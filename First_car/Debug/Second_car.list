
Second_car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ba8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007d78  08007d78  00017d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dd8  08007dd8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007dd8  08007dd8  00017dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007de0  08007de0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007de0  08007de0  00017de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007de4  08007de4  00017de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ebc  20000010  08007df8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ecc  08007df8  00024ecc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b943  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c9a  00000000  00000000  0003b9c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018b0  00000000  00000000  0003f660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001364  00000000  00000000  00040f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000044ed  00000000  00000000  00042274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e113  00000000  00000000  00046761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd97a  00000000  00000000  00064874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a24  00000000  00000000  001421f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  00148c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007d60 	.word	0x08007d60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08007d60 	.word	0x08007d60

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__aeabi_d2uiz>:
 80009ac:	004a      	lsls	r2, r1, #1
 80009ae:	d211      	bcs.n	80009d4 <__aeabi_d2uiz+0x28>
 80009b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009b4:	d211      	bcs.n	80009da <__aeabi_d2uiz+0x2e>
 80009b6:	d50d      	bpl.n	80009d4 <__aeabi_d2uiz+0x28>
 80009b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c0:	d40e      	bmi.n	80009e0 <__aeabi_d2uiz+0x34>
 80009c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ce:	fa23 f002 	lsr.w	r0, r3, r2
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d102      	bne.n	80009e6 <__aeabi_d2uiz+0x3a>
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	4770      	bx	lr
 80009e6:	f04f 0000 	mov.w	r0, #0
 80009ea:	4770      	bx	lr

080009ec <__aeabi_d2f>:
 80009ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009f4:	bf24      	itt	cs
 80009f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009fe:	d90d      	bls.n	8000a1c <__aeabi_d2f+0x30>
 8000a00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a14:	bf08      	it	eq
 8000a16:	f020 0001 	biceq.w	r0, r0, #1
 8000a1a:	4770      	bx	lr
 8000a1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a20:	d121      	bne.n	8000a66 <__aeabi_d2f+0x7a>
 8000a22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a26:	bfbc      	itt	lt
 8000a28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a2c:	4770      	bxlt	lr
 8000a2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a36:	f1c2 0218 	rsb	r2, r2, #24
 8000a3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a42:	fa20 f002 	lsr.w	r0, r0, r2
 8000a46:	bf18      	it	ne
 8000a48:	f040 0001 	orrne.w	r0, r0, #1
 8000a4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a58:	ea40 000c 	orr.w	r0, r0, ip
 8000a5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a64:	e7cc      	b.n	8000a00 <__aeabi_d2f+0x14>
 8000a66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a6a:	d107      	bne.n	8000a7c <__aeabi_d2f+0x90>
 8000a6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a70:	bf1e      	ittt	ne
 8000a72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a7a:	4770      	bxne	lr
 8000a7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b970 	b.w	8000d84 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	460d      	mov	r5, r1
 8000ac4:	4604      	mov	r4, r0
 8000ac6:	460f      	mov	r7, r1
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d14a      	bne.n	8000b62 <__udivmoddi4+0xa6>
 8000acc:	428a      	cmp	r2, r1
 8000ace:	4694      	mov	ip, r2
 8000ad0:	d965      	bls.n	8000b9e <__udivmoddi4+0xe2>
 8000ad2:	fab2 f382 	clz	r3, r2
 8000ad6:	b143      	cbz	r3, 8000aea <__udivmoddi4+0x2e>
 8000ad8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000adc:	f1c3 0220 	rsb	r2, r3, #32
 8000ae0:	409f      	lsls	r7, r3
 8000ae2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ae6:	4317      	orrs	r7, r2
 8000ae8:	409c      	lsls	r4, r3
 8000aea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aee:	fa1f f58c 	uxth.w	r5, ip
 8000af2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000af6:	0c22      	lsrs	r2, r4, #16
 8000af8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000afc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b00:	fb01 f005 	mul.w	r0, r1, r5
 8000b04:	4290      	cmp	r0, r2
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x62>
 8000b08:	eb1c 0202 	adds.w	r2, ip, r2
 8000b0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b10:	f080 811c 	bcs.w	8000d4c <__udivmoddi4+0x290>
 8000b14:	4290      	cmp	r0, r2
 8000b16:	f240 8119 	bls.w	8000d4c <__udivmoddi4+0x290>
 8000b1a:	3902      	subs	r1, #2
 8000b1c:	4462      	add	r2, ip
 8000b1e:	1a12      	subs	r2, r2, r0
 8000b20:	b2a4      	uxth	r4, r4
 8000b22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b2e:	fb00 f505 	mul.w	r5, r0, r5
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	d90a      	bls.n	8000b4c <__udivmoddi4+0x90>
 8000b36:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b3e:	f080 8107 	bcs.w	8000d50 <__udivmoddi4+0x294>
 8000b42:	42a5      	cmp	r5, r4
 8000b44:	f240 8104 	bls.w	8000d50 <__udivmoddi4+0x294>
 8000b48:	4464      	add	r4, ip
 8000b4a:	3802      	subs	r0, #2
 8000b4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b50:	1b64      	subs	r4, r4, r5
 8000b52:	2100      	movs	r1, #0
 8000b54:	b11e      	cbz	r6, 8000b5e <__udivmoddi4+0xa2>
 8000b56:	40dc      	lsrs	r4, r3
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0xbc>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	f000 80ed 	beq.w	8000d46 <__udivmoddi4+0x28a>
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b72:	4608      	mov	r0, r1
 8000b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b78:	fab3 f183 	clz	r1, r3
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	d149      	bne.n	8000c14 <__udivmoddi4+0x158>
 8000b80:	42ab      	cmp	r3, r5
 8000b82:	d302      	bcc.n	8000b8a <__udivmoddi4+0xce>
 8000b84:	4282      	cmp	r2, r0
 8000b86:	f200 80f8 	bhi.w	8000d7a <__udivmoddi4+0x2be>
 8000b8a:	1a84      	subs	r4, r0, r2
 8000b8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b90:	2001      	movs	r0, #1
 8000b92:	4617      	mov	r7, r2
 8000b94:	2e00      	cmp	r6, #0
 8000b96:	d0e2      	beq.n	8000b5e <__udivmoddi4+0xa2>
 8000b98:	e9c6 4700 	strd	r4, r7, [r6]
 8000b9c:	e7df      	b.n	8000b5e <__udivmoddi4+0xa2>
 8000b9e:	b902      	cbnz	r2, 8000ba2 <__udivmoddi4+0xe6>
 8000ba0:	deff      	udf	#255	; 0xff
 8000ba2:	fab2 f382 	clz	r3, r2
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8090 	bne.w	8000ccc <__udivmoddi4+0x210>
 8000bac:	1a8a      	subs	r2, r1, r2
 8000bae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb2:	fa1f fe8c 	uxth.w	lr, ip
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bbc:	fb07 2015 	mls	r0, r7, r5, r2
 8000bc0:	0c22      	lsrs	r2, r4, #16
 8000bc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bc6:	fb0e f005 	mul.w	r0, lr, r5
 8000bca:	4290      	cmp	r0, r2
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x124>
 8000bce:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x122>
 8000bd8:	4290      	cmp	r0, r2
 8000bda:	f200 80cb 	bhi.w	8000d74 <__udivmoddi4+0x2b8>
 8000bde:	4645      	mov	r5, r8
 8000be0:	1a12      	subs	r2, r2, r0
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000be8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bf4:	45a6      	cmp	lr, r4
 8000bf6:	d908      	bls.n	8000c0a <__udivmoddi4+0x14e>
 8000bf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c00:	d202      	bcs.n	8000c08 <__udivmoddi4+0x14c>
 8000c02:	45a6      	cmp	lr, r4
 8000c04:	f200 80bb 	bhi.w	8000d7e <__udivmoddi4+0x2c2>
 8000c08:	4610      	mov	r0, r2
 8000c0a:	eba4 040e 	sub.w	r4, r4, lr
 8000c0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c12:	e79f      	b.n	8000b54 <__udivmoddi4+0x98>
 8000c14:	f1c1 0720 	rsb	r7, r1, #32
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c22:	fa05 f401 	lsl.w	r4, r5, r1
 8000c26:	fa20 f307 	lsr.w	r3, r0, r7
 8000c2a:	40fd      	lsrs	r5, r7
 8000c2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c30:	4323      	orrs	r3, r4
 8000c32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c36:	fa1f fe8c 	uxth.w	lr, ip
 8000c3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c3e:	0c1c      	lsrs	r4, r3, #16
 8000c40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c44:	fb08 f50e 	mul.w	r5, r8, lr
 8000c48:	42a5      	cmp	r5, r4
 8000c4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b0>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c5c:	f080 8088 	bcs.w	8000d70 <__udivmoddi4+0x2b4>
 8000c60:	42a5      	cmp	r5, r4
 8000c62:	f240 8085 	bls.w	8000d70 <__udivmoddi4+0x2b4>
 8000c66:	f1a8 0802 	sub.w	r8, r8, #2
 8000c6a:	4464      	add	r4, ip
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	b29d      	uxth	r5, r3
 8000c70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c74:	fb09 4413 	mls	r4, r9, r3, r4
 8000c78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c80:	45a6      	cmp	lr, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1da>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c8c:	d26c      	bcs.n	8000d68 <__udivmoddi4+0x2ac>
 8000c8e:	45a6      	cmp	lr, r4
 8000c90:	d96a      	bls.n	8000d68 <__udivmoddi4+0x2ac>
 8000c92:	3b02      	subs	r3, #2
 8000c94:	4464      	add	r4, ip
 8000c96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c9e:	eba4 040e 	sub.w	r4, r4, lr
 8000ca2:	42ac      	cmp	r4, r5
 8000ca4:	46c8      	mov	r8, r9
 8000ca6:	46ae      	mov	lr, r5
 8000ca8:	d356      	bcc.n	8000d58 <__udivmoddi4+0x29c>
 8000caa:	d053      	beq.n	8000d54 <__udivmoddi4+0x298>
 8000cac:	b156      	cbz	r6, 8000cc4 <__udivmoddi4+0x208>
 8000cae:	ebb0 0208 	subs.w	r2, r0, r8
 8000cb2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cb6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cba:	40ca      	lsrs	r2, r1
 8000cbc:	40cc      	lsrs	r4, r1
 8000cbe:	4317      	orrs	r7, r2
 8000cc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ccc:	f1c3 0120 	rsb	r1, r3, #32
 8000cd0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cd8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cdc:	409d      	lsls	r5, r3
 8000cde:	432a      	orrs	r2, r5
 8000ce0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce4:	fa1f fe8c 	uxth.w	lr, ip
 8000ce8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cec:	fb07 1510 	mls	r5, r7, r0, r1
 8000cf0:	0c11      	lsrs	r1, r2, #16
 8000cf2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cf6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cfa:	428d      	cmp	r5, r1
 8000cfc:	fa04 f403 	lsl.w	r4, r4, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x258>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d0a:	d22f      	bcs.n	8000d6c <__udivmoddi4+0x2b0>
 8000d0c:	428d      	cmp	r5, r1
 8000d0e:	d92d      	bls.n	8000d6c <__udivmoddi4+0x2b0>
 8000d10:	3802      	subs	r0, #2
 8000d12:	4461      	add	r1, ip
 8000d14:	1b49      	subs	r1, r1, r5
 8000d16:	b292      	uxth	r2, r2
 8000d18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d24:	fb05 f10e 	mul.w	r1, r5, lr
 8000d28:	4291      	cmp	r1, r2
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x282>
 8000d2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d34:	d216      	bcs.n	8000d64 <__udivmoddi4+0x2a8>
 8000d36:	4291      	cmp	r1, r2
 8000d38:	d914      	bls.n	8000d64 <__udivmoddi4+0x2a8>
 8000d3a:	3d02      	subs	r5, #2
 8000d3c:	4462      	add	r2, ip
 8000d3e:	1a52      	subs	r2, r2, r1
 8000d40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d44:	e738      	b.n	8000bb8 <__udivmoddi4+0xfc>
 8000d46:	4631      	mov	r1, r6
 8000d48:	4630      	mov	r0, r6
 8000d4a:	e708      	b.n	8000b5e <__udivmoddi4+0xa2>
 8000d4c:	4639      	mov	r1, r7
 8000d4e:	e6e6      	b.n	8000b1e <__udivmoddi4+0x62>
 8000d50:	4610      	mov	r0, r2
 8000d52:	e6fb      	b.n	8000b4c <__udivmoddi4+0x90>
 8000d54:	4548      	cmp	r0, r9
 8000d56:	d2a9      	bcs.n	8000cac <__udivmoddi4+0x1f0>
 8000d58:	ebb9 0802 	subs.w	r8, r9, r2
 8000d5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d60:	3b01      	subs	r3, #1
 8000d62:	e7a3      	b.n	8000cac <__udivmoddi4+0x1f0>
 8000d64:	4645      	mov	r5, r8
 8000d66:	e7ea      	b.n	8000d3e <__udivmoddi4+0x282>
 8000d68:	462b      	mov	r3, r5
 8000d6a:	e794      	b.n	8000c96 <__udivmoddi4+0x1da>
 8000d6c:	4640      	mov	r0, r8
 8000d6e:	e7d1      	b.n	8000d14 <__udivmoddi4+0x258>
 8000d70:	46d0      	mov	r8, sl
 8000d72:	e77b      	b.n	8000c6c <__udivmoddi4+0x1b0>
 8000d74:	3d02      	subs	r5, #2
 8000d76:	4462      	add	r2, ip
 8000d78:	e732      	b.n	8000be0 <__udivmoddi4+0x124>
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e70a      	b.n	8000b94 <__udivmoddi4+0xd8>
 8000d7e:	4464      	add	r4, ip
 8000d80:	3802      	subs	r0, #2
 8000d82:	e742      	b.n	8000c0a <__udivmoddi4+0x14e>

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	71fb      	strb	r3, [r7, #7]
	 * increments by 1 for future storing, it doesnt coincide with the tail
	 * the % UART_BUFFER_SIZE checking if the index of the next storing procedure
	 * is bigger than the buffer size(ex this iteration stores in 512 byte and the next one
	 * will be in the 513 so i should reset the (i) to zero to repeat again)*/

  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000da0:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d009      	beq.n	8000dc2 <store_char+0x3a>
  {
	  /*Storing the charachter in the recent head pointed location*/
    buffer->buffer[buffer->head] = c;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000db4:	683a      	ldr	r2, [r7, #0]
 8000db6:	79f9      	ldrb	r1, [r7, #7]
 8000db8:	54d1      	strb	r1, [r2, r3]

    /*After storing the character, incrementing the head for the next storing */
    buffer->head = i;
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f003 0320 	and.w	r3, r3, #32
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d013      	beq.n	8000e1a <Uart_isr+0x4a>
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	f003 0320 	and.w	r3, r3, #32
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d00e      	beq.n	8000e1a <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8000e0a:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <Uart_isr+0xb4>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ffb8 	bl	8000d88 <store_char>
        return;
 8000e18:	e031      	b.n	8000e7e <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d02c      	beq.n	8000e7e <Uart_isr+0xae>
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d027      	beq.n	8000e7e <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <Uart_isr+0xb8>)
 8000e30:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <Uart_isr+0xb8>)
 8000e36:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d108      	bne.n	8000e50 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	68da      	ldr	r2, [r3, #12]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e4c:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8000e4e:	e015      	b.n	8000e7c <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8000e50:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <Uart_isr+0xb8>)
 8000e52:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e56:	4a0c      	ldr	r2, [pc, #48]	; (8000e88 <Uart_isr+0xb8>)
 8000e58:	5cd3      	ldrb	r3, [r2, r3]
 8000e5a:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <Uart_isr+0xb8>)
 8000e5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e62:	3301      	adds	r3, #1
 8000e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e68:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <Uart_isr+0xb8>)
 8000e6a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	7bba      	ldrb	r2, [r7, #14]
 8000e7a:	605a      	str	r2, [r3, #4]
    	return;
 8000e7c:	bf00      	nop
    }
}
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000234 	.word	0x20000234
 8000e88:	2000002c 	.word	0x2000002c

08000e8c <Calculate_Car_Speed>:
#include "calculateSpeed.h"

extern uint32_t edges_counter;

float Calculate_Car_Speed()
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
	float Local_uint16Speed;
	Local_uint16Speed = (edges_counter/50)/(2000.0*60);
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <Calculate_Car_Speed+0x48>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <Calculate_Car_Speed+0x4c>)
 8000e98:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9c:	091b      	lsrs	r3, r3, #4
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff faf8 	bl	8000494 <__aeabi_ui2d>
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <Calculate_Car_Speed+0x50>)
 8000eaa:	f7ff fc97 	bl	80007dc <__aeabi_ddiv>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f7ff fd99 	bl	80009ec <__aeabi_d2f>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	607b      	str	r3, [r7, #4]
	edges_counter=0;
 8000ebe:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <Calculate_Car_Speed+0x48>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
	return Local_uint16Speed;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	ee07 3a90 	vmov	s15, r3
}
 8000eca:	eeb0 0a67 	vmov.f32	s0, s15
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000528 	.word	0x20000528
 8000ed8:	51eb851f 	.word	0x51eb851f
 8000edc:	40fd4c00 	.word	0x40fd4c00

08000ee0 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef4:	f000 ffe0 	bl	8001eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef8:	f000 f82a 	bl	8000f50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efc:	f000 faf0 	bl	80014e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f00:	f000 f892 	bl	8001028 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000f04:	f000 fa98 	bl	8001438 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f08:	f000 fac0 	bl	800148c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000f0c:	f000 f916 	bl	800113c <MX_TIM2_Init>
  MX_I2C2_Init();
 8000f10:	f000 f8b8 	bl	8001084 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000f14:	f000 f8e4 	bl	80010e0 <MX_I2C3_Init>
  MX_TIM3_Init();
 8000f18:	f000 f970 	bl	80011fc <MX_TIM3_Init>
  MX_UART5_Init();
 8000f1c:	f000 fa62 	bl	80013e4 <MX_UART5_Init>
  MX_TIM6_Init();
 8000f20:	f000 f9e6 	bl	80012f0 <MX_TIM6_Init>
  MX_TIM12_Init();
 8000f24:	f000 fa1a 	bl	800135c <MX_TIM12_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f28:	f004 f946 	bl	80051b8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f2c:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <main+0x54>)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4805      	ldr	r0, [pc, #20]	; (8000f48 <main+0x58>)
 8000f32:	f004 f98b 	bl	800524c <osThreadNew>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <main+0x5c>)
 8000f3a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f3c:	f004 f960 	bl	8005200 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <main+0x50>
 8000f42:	bf00      	nop
 8000f44:	08007d9c 	.word	0x08007d9c
 8000f48:	0800160d 	.word	0x0800160d
 8000f4c:	20000520 	.word	0x20000520

08000f50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b094      	sub	sp, #80	; 0x50
 8000f54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	2234      	movs	r2, #52	; 0x34
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f006 fe7c 	bl	8007c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f74:	2300      	movs	r3, #0
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	4b29      	ldr	r3, [pc, #164]	; (8001020 <SystemClock_Config+0xd0>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	4a28      	ldr	r2, [pc, #160]	; (8001020 <SystemClock_Config+0xd0>)
 8000f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f82:	6413      	str	r3, [r2, #64]	; 0x40
 8000f84:	4b26      	ldr	r3, [pc, #152]	; (8001020 <SystemClock_Config+0xd0>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f90:	2300      	movs	r3, #0
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	4b23      	ldr	r3, [pc, #140]	; (8001024 <SystemClock_Config+0xd4>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f9c:	4a21      	ldr	r2, [pc, #132]	; (8001024 <SystemClock_Config+0xd4>)
 8000f9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <SystemClock_Config+0xd4>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fac:	603b      	str	r3, [r7, #0]
 8000fae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb8:	2310      	movs	r3, #16
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fc4:	2308      	movs	r3, #8
 8000fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000fc8:	2340      	movs	r3, #64	; 0x40
 8000fca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f001 ff09 	bl	8002df4 <HAL_RCC_OscConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000fe8:	f000 fb2a 	bl	8001640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fec:	230f      	movs	r3, #15
 8000fee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001000:	f107 0308 	add.w	r3, r7, #8
 8001004:	2101      	movs	r1, #1
 8001006:	4618      	mov	r0, r3
 8001008:	f001 fbfe 	bl	8002808 <HAL_RCC_ClockConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001012:	f000 fb15 	bl	8001640 <Error_Handler>
  }
}
 8001016:	bf00      	nop
 8001018:	3750      	adds	r7, #80	; 0x50
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800
 8001024:	40007000 	.word	0x40007000

08001028 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <MX_I2C1_Init+0x54>)
 800102e:	4a14      	ldr	r2, [pc, #80]	; (8001080 <MX_I2C1_Init+0x58>)
 8001030:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 1000;
 8001032:	4b12      	ldr	r3, [pc, #72]	; (800107c <MX_I2C1_Init+0x54>)
 8001034:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001038:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <MX_I2C1_Init+0x54>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_I2C1_Init+0x54>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <MX_I2C1_Init+0x54>)
 8001048:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800104c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <MX_I2C1_Init+0x54>)
 8001050:	2200      	movs	r2, #0
 8001052:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_I2C1_Init+0x54>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <MX_I2C1_Init+0x54>)
 800105c:	2200      	movs	r2, #0
 800105e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_I2C1_Init+0x54>)
 8001062:	2200      	movs	r2, #0
 8001064:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_I2C1_Init+0x54>)
 8001068:	f001 fa8a 	bl	8002580 <HAL_I2C_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001072:	f000 fae5 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000238 	.word	0x20000238
 8001080:	40005400 	.word	0x40005400

08001084 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <MX_I2C2_Init+0x54>)
 800108a:	4a14      	ldr	r2, [pc, #80]	; (80010dc <MX_I2C2_Init+0x58>)
 800108c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 1000;
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <MX_I2C2_Init+0x54>)
 8001090:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001094:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <MX_I2C2_Init+0x54>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 120;
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_I2C2_Init+0x54>)
 800109e:	2278      	movs	r2, #120	; 0x78
 80010a0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <MX_I2C2_Init+0x54>)
 80010a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010a8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <MX_I2C2_Init+0x54>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_I2C2_Init+0x54>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <MX_I2C2_Init+0x54>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_I2C2_Init+0x54>)
 80010be:	2200      	movs	r2, #0
 80010c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_I2C2_Init+0x54>)
 80010c4:	f001 fa5c 	bl	8002580 <HAL_I2C_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 80010ce:	f000 fab7 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2000028c 	.word	0x2000028c
 80010dc:	40005800 	.word	0x40005800

080010e0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_I2C3_Init+0x50>)
 80010e6:	4a13      	ldr	r2, [pc, #76]	; (8001134 <MX_I2C3_Init+0x54>)
 80010e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_I2C3_Init+0x50>)
 80010ec:	4a12      	ldr	r2, [pc, #72]	; (8001138 <MX_I2C3_Init+0x58>)
 80010ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_I2C3_Init+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_I2C3_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <MX_I2C3_Init+0x50>)
 80010fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001102:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <MX_I2C3_Init+0x50>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <MX_I2C3_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <MX_I2C3_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <MX_I2C3_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <MX_I2C3_Init+0x50>)
 800111e:	f001 fa2f 	bl	8002580 <HAL_I2C_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001128:	f000 fa8a 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200002e0 	.word	0x200002e0
 8001134:	40005c00 	.word	0x40005c00
 8001138:	000186a0 	.word	0x000186a0

0800113c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001142:	f107 0310 	add.w	r3, r7, #16
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800114c:	463b      	mov	r3, r7
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001158:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <MX_TIM2_Init+0xbc>)
 800115a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800115e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 8001160:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <MX_TIM2_Init+0xbc>)
 8001162:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001166:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001168:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <MX_TIM2_Init+0xbc>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000;
 800116e:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <MX_TIM2_Init+0xbc>)
 8001170:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8001174:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <MX_TIM2_Init+0xbc>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117c:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <MX_TIM2_Init+0xbc>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001182:	481d      	ldr	r0, [pc, #116]	; (80011f8 <MX_TIM2_Init+0xbc>)
 8001184:	f002 f9e3 	bl	800354e <HAL_TIM_IC_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800118e:	f000 fa57 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	4619      	mov	r1, r3
 80011a0:	4815      	ldr	r0, [pc, #84]	; (80011f8 <MX_TIM2_Init+0xbc>)
 80011a2:	f003 f821 	bl	80041e8 <HAL_TIMEx_MasterConfigSynchronization>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80011ac:	f000 fa48 	bl	8001640 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80011b0:	230a      	movs	r3, #10
 80011b2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011b4:	2301      	movs	r3, #1
 80011b6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011c0:	463b      	mov	r3, r7
 80011c2:	2200      	movs	r2, #0
 80011c4:	4619      	mov	r1, r3
 80011c6:	480c      	ldr	r0, [pc, #48]	; (80011f8 <MX_TIM2_Init+0xbc>)
 80011c8:	f002 fb18 	bl	80037fc <HAL_TIM_IC_ConfigChannel>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80011d2:	f000 fa35 	bl	8001640 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011d6:	2300      	movs	r3, #0
 80011d8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80011da:	463b      	mov	r3, r7
 80011dc:	2204      	movs	r2, #4
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_TIM2_Init+0xbc>)
 80011e2:	f002 fb0b 	bl	80037fc <HAL_TIM_IC_ConfigChannel>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80011ec:	f000 fa28 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000334 	.word	0x20000334

080011fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001202:	f107 0320 	add.w	r3, r7, #32
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]
 800121a:	615a      	str	r2, [r3, #20]
 800121c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800121e:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <MX_TIM3_Init+0xec>)
 8001220:	4a32      	ldr	r2, [pc, #200]	; (80012ec <MX_TIM3_Init+0xf0>)
 8001222:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 320-1;
 8001224:	4b30      	ldr	r3, [pc, #192]	; (80012e8 <MX_TIM3_Init+0xec>)
 8001226:	f240 123f 	movw	r2, #319	; 0x13f
 800122a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122c:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <MX_TIM3_Init+0xec>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001232:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <MX_TIM3_Init+0xec>)
 8001234:	2263      	movs	r2, #99	; 0x63
 8001236:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001238:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <MX_TIM3_Init+0xec>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123e:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <MX_TIM3_Init+0xec>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001244:	4828      	ldr	r0, [pc, #160]	; (80012e8 <MX_TIM3_Init+0xec>)
 8001246:	f002 f933 	bl	80034b0 <HAL_TIM_PWM_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001250:	f000 f9f6 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800125c:	f107 0320 	add.w	r3, r7, #32
 8001260:	4619      	mov	r1, r3
 8001262:	4821      	ldr	r0, [pc, #132]	; (80012e8 <MX_TIM3_Init+0xec>)
 8001264:	f002 ffc0 	bl	80041e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800126e:	f000 f9e7 	bl	8001640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001272:	2360      	movs	r3, #96	; 0x60
 8001274:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2200      	movs	r2, #0
 8001286:	4619      	mov	r1, r3
 8001288:	4817      	ldr	r0, [pc, #92]	; (80012e8 <MX_TIM3_Init+0xec>)
 800128a:	f002 fb53 	bl	8003934 <HAL_TIM_PWM_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001294:	f000 f9d4 	bl	8001640 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	2204      	movs	r2, #4
 800129c:	4619      	mov	r1, r3
 800129e:	4812      	ldr	r0, [pc, #72]	; (80012e8 <MX_TIM3_Init+0xec>)
 80012a0:	f002 fb48 	bl	8003934 <HAL_TIM_PWM_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80012aa:	f000 f9c9 	bl	8001640 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2208      	movs	r2, #8
 80012b2:	4619      	mov	r1, r3
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <MX_TIM3_Init+0xec>)
 80012b6:	f002 fb3d 	bl	8003934 <HAL_TIM_PWM_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80012c0:	f000 f9be 	bl	8001640 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	220c      	movs	r2, #12
 80012c8:	4619      	mov	r1, r3
 80012ca:	4807      	ldr	r0, [pc, #28]	; (80012e8 <MX_TIM3_Init+0xec>)
 80012cc:	f002 fb32 	bl	8003934 <HAL_TIM_PWM_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80012d6:	f000 f9b3 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012da:	4803      	ldr	r0, [pc, #12]	; (80012e8 <MX_TIM3_Init+0xec>)
 80012dc:	f000 fb5c 	bl	8001998 <HAL_TIM_MspPostInit>

}
 80012e0:	bf00      	nop
 80012e2:	3728      	adds	r7, #40	; 0x28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	2000037c 	.word	0x2000037c
 80012ec:	40000400 	.word	0x40000400

080012f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f6:	463b      	mov	r3, r7
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <MX_TIM6_Init+0x64>)
 8001300:	4a15      	ldr	r2, [pc, #84]	; (8001358 <MX_TIM6_Init+0x68>)
 8001302:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <MX_TIM6_Init+0x64>)
 8001306:	2200      	movs	r2, #0
 8001308:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <MX_TIM6_Init+0x64>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001310:	4b10      	ldr	r3, [pc, #64]	; (8001354 <MX_TIM6_Init+0x64>)
 8001312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001316:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_TIM6_Init+0x64>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800131e:	480d      	ldr	r0, [pc, #52]	; (8001354 <MX_TIM6_Init+0x64>)
 8001320:	f002 f806 	bl	8003330 <HAL_TIM_Base_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800132a:	f000 f989 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001336:	463b      	mov	r3, r7
 8001338:	4619      	mov	r1, r3
 800133a:	4806      	ldr	r0, [pc, #24]	; (8001354 <MX_TIM6_Init+0x64>)
 800133c:	f002 ff54 	bl	80041e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001346:	f000 f97b 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200003c4 	.word	0x200003c4
 8001358:	40001000 	.word	0x40001000

0800135c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
 8001370:	615a      	str	r2, [r3, #20]
 8001372:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <MX_TIM12_Init+0x80>)
 8001376:	4a1a      	ldr	r2, [pc, #104]	; (80013e0 <MX_TIM12_Init+0x84>)
 8001378:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 160-1;
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <MX_TIM12_Init+0x80>)
 800137c:	229f      	movs	r2, #159	; 0x9f
 800137e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001380:	4b16      	ldr	r3, [pc, #88]	; (80013dc <MX_TIM12_Init+0x80>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 100-1;
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <MX_TIM12_Init+0x80>)
 8001388:	2263      	movs	r2, #99	; 0x63
 800138a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <MX_TIM12_Init+0x80>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <MX_TIM12_Init+0x80>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001398:	4810      	ldr	r0, [pc, #64]	; (80013dc <MX_TIM12_Init+0x80>)
 800139a:	f002 f889 	bl	80034b0 <HAL_TIM_PWM_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 80013a4:	f000 f94c 	bl	8001640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013a8:	2360      	movs	r3, #96	; 0x60
 80013aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2200      	movs	r2, #0
 80013bc:	4619      	mov	r1, r3
 80013be:	4807      	ldr	r0, [pc, #28]	; (80013dc <MX_TIM12_Init+0x80>)
 80013c0:	f002 fab8 	bl	8003934 <HAL_TIM_PWM_ConfigChannel>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 80013ca:	f000 f939 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80013ce:	4803      	ldr	r0, [pc, #12]	; (80013dc <MX_TIM12_Init+0x80>)
 80013d0:	f000 fae2 	bl	8001998 <HAL_TIM_MspPostInit>

}
 80013d4:	bf00      	nop
 80013d6:	3720      	adds	r7, #32
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	2000040c 	.word	0x2000040c
 80013e0:	40001800 	.word	0x40001800

080013e4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <MX_UART5_Init+0x4c>)
 80013ea:	4a12      	ldr	r2, [pc, #72]	; (8001434 <MX_UART5_Init+0x50>)
 80013ec:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <MX_UART5_Init+0x4c>)
 80013f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013f4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <MX_UART5_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <MX_UART5_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <MX_UART5_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <MX_UART5_Init+0x4c>)
 800140a:	220c      	movs	r2, #12
 800140c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <MX_UART5_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <MX_UART5_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <MX_UART5_Init+0x4c>)
 800141c:	f002 ff74 	bl	8004308 <HAL_UART_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001426:	f000 f90b 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000454 	.word	0x20000454
 8001434:	40005000 	.word	0x40005000

08001438 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 800143e:	4a12      	ldr	r2, [pc, #72]	; (8001488 <MX_USART1_UART_Init+0x50>)
 8001440:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 8001444:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001448:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 800145e:	220c      	movs	r2, #12
 8001460:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_USART1_UART_Init+0x4c>)
 8001470:	f002 ff4a 	bl	8004308 <HAL_UART_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800147a:	f000 f8e1 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000498 	.word	0x20000498
 8001488:	40011000 	.word	0x40011000

0800148c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 8001492:	4a12      	ldr	r2, [pc, #72]	; (80014dc <MX_USART3_UART_Init+0x50>)
 8001494:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 8001498:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800149c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_USART3_UART_Init+0x4c>)
 80014c4:	f002 ff20 	bl	8004308 <HAL_UART_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80014ce:	f000 f8b7 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200004dc 	.word	0x200004dc
 80014dc:	40004800 	.word	0x40004800

080014e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b32      	ldr	r3, [pc, #200]	; (80015c4 <MX_GPIO_Init+0xe4>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a31      	ldr	r2, [pc, #196]	; (80015c4 <MX_GPIO_Init+0xe4>)
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <MX_GPIO_Init+0xe4>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <MX_GPIO_Init+0xe4>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a2a      	ldr	r2, [pc, #168]	; (80015c4 <MX_GPIO_Init+0xe4>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <MX_GPIO_Init+0xe4>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <MX_GPIO_Init+0xe4>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a23      	ldr	r2, [pc, #140]	; (80015c4 <MX_GPIO_Init+0xe4>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <MX_GPIO_Init+0xe4>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <MX_GPIO_Init+0xe4>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a1c      	ldr	r2, [pc, #112]	; (80015c4 <MX_GPIO_Init+0xe4>)
 8001554:	f043 0308 	orr.w	r3, r3, #8
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <MX_GPIO_Init+0xe4>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001566:	2200      	movs	r2, #0
 8001568:	f242 311c 	movw	r1, #8988	; 0x231c
 800156c:	4816      	ldr	r0, [pc, #88]	; (80015c8 <MX_GPIO_Init+0xe8>)
 800156e:	f000 ffed 	bl	800254c <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001578:	4814      	ldr	r0, [pc, #80]	; (80015cc <MX_GPIO_Init+0xec>)
 800157a:	f000 ffe7 	bl	800254c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 PC4
                           PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800157e:	f242 331c 	movw	r3, #8988	; 0x231c
 8001582:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001584:	2301      	movs	r3, #1
 8001586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	480c      	ldr	r0, [pc, #48]	; (80015c8 <MX_GPIO_Init+0xe8>)
 8001598:	f000 fe44 	bl	8002224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 800159c:	f44f 7308 	mov.w	r3, #544	; 0x220
 80015a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_GPIO_Init+0xec>)
 80015b6:	f000 fe35 	bl	8002224 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015ba:	bf00      	nop
 80015bc:	3728      	adds	r7, #40	; 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020800 	.word	0x40020800
 80015cc:	40020400 	.word	0x40020400

080015d0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2 && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 || htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015e0:	d10c      	bne.n	80015fc <HAL_TIM_IC_CaptureCallback+0x2c>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	7f1b      	ldrb	r3, [r3, #28]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d003      	beq.n	80015f2 <HAL_TIM_IC_CaptureCallback+0x22>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	7f1b      	ldrb	r3, [r3, #28]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d104      	bne.n	80015fc <HAL_TIM_IC_CaptureCallback+0x2c>
  {
	  edges_counter++;
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_TIM_IC_CaptureCallback+0x38>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	3301      	adds	r3, #1
 80015f8:	4a03      	ldr	r2, [pc, #12]	; (8001608 <HAL_TIM_IC_CaptureCallback+0x38>)
 80015fa:	6013      	str	r3, [r2, #0]
  }
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	20000528 	.word	0x20000528

0800160c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001614:	2001      	movs	r0, #1
 8001616:	f003 feab 	bl	8005370 <osDelay>
 800161a:	e7fb      	b.n	8001614 <StartDefaultTask+0x8>

0800161c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a04      	ldr	r2, [pc, #16]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d101      	bne.n	8001632 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800162e:	f000 fc65 	bl	8001efc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40001400 	.word	0x40001400

08001640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001644:	b672      	cpsid	i
}
 8001646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001648:	e7fe      	b.n	8001648 <Error_Handler+0x8>
	...

0800164c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_MspInit+0x54>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	4a11      	ldr	r2, [pc, #68]	; (80016a0 <HAL_MspInit+0x54>)
 800165c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001660:	6453      	str	r3, [r2, #68]	; 0x44
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_MspInit+0x54>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	603b      	str	r3, [r7, #0]
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <HAL_MspInit+0x54>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <HAL_MspInit+0x54>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_MspInit+0x54>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	210f      	movs	r1, #15
 800168e:	f06f 0001 	mvn.w	r0, #1
 8001692:	f000 fd0b 	bl	80020ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800

080016a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08e      	sub	sp, #56	; 0x38
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a5b      	ldr	r2, [pc, #364]	; (8001830 <HAL_I2C_MspInit+0x18c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d12c      	bne.n	8001720 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
 80016ca:	4b5a      	ldr	r3, [pc, #360]	; (8001834 <HAL_I2C_MspInit+0x190>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a59      	ldr	r2, [pc, #356]	; (8001834 <HAL_I2C_MspInit+0x190>)
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b57      	ldr	r3, [pc, #348]	; (8001834 <HAL_I2C_MspInit+0x190>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	623b      	str	r3, [r7, #32]
 80016e0:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016e2:	23c0      	movs	r3, #192	; 0xc0
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e6:	2312      	movs	r3, #18
 80016e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ee:	2303      	movs	r3, #3
 80016f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016f2:	2304      	movs	r3, #4
 80016f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fa:	4619      	mov	r1, r3
 80016fc:	484e      	ldr	r0, [pc, #312]	; (8001838 <HAL_I2C_MspInit+0x194>)
 80016fe:	f000 fd91 	bl	8002224 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
 8001706:	4b4b      	ldr	r3, [pc, #300]	; (8001834 <HAL_I2C_MspInit+0x190>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a4a      	ldr	r2, [pc, #296]	; (8001834 <HAL_I2C_MspInit+0x190>)
 800170c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b48      	ldr	r3, [pc, #288]	; (8001834 <HAL_I2C_MspInit+0x190>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800171a:	61fb      	str	r3, [r7, #28]
 800171c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800171e:	e082      	b.n	8001826 <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C2)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a45      	ldr	r2, [pc, #276]	; (800183c <HAL_I2C_MspInit+0x198>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d12d      	bne.n	8001786 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
 800172e:	4b41      	ldr	r3, [pc, #260]	; (8001834 <HAL_I2C_MspInit+0x190>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a40      	ldr	r2, [pc, #256]	; (8001834 <HAL_I2C_MspInit+0x190>)
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b3e      	ldr	r3, [pc, #248]	; (8001834 <HAL_I2C_MspInit+0x190>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	61bb      	str	r3, [r7, #24]
 8001744:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001746:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800174c:	2312      	movs	r3, #18
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001754:	2303      	movs	r3, #3
 8001756:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001758:	2304      	movs	r3, #4
 800175a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001760:	4619      	mov	r1, r3
 8001762:	4835      	ldr	r0, [pc, #212]	; (8001838 <HAL_I2C_MspInit+0x194>)
 8001764:	f000 fd5e 	bl	8002224 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	4b31      	ldr	r3, [pc, #196]	; (8001834 <HAL_I2C_MspInit+0x190>)
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	4a30      	ldr	r2, [pc, #192]	; (8001834 <HAL_I2C_MspInit+0x190>)
 8001772:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001776:	6413      	str	r3, [r2, #64]	; 0x40
 8001778:	4b2e      	ldr	r3, [pc, #184]	; (8001834 <HAL_I2C_MspInit+0x190>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	697b      	ldr	r3, [r7, #20]
}
 8001784:	e04f      	b.n	8001826 <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C3)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a2d      	ldr	r2, [pc, #180]	; (8001840 <HAL_I2C_MspInit+0x19c>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d14a      	bne.n	8001826 <HAL_I2C_MspInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001790:	2300      	movs	r3, #0
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <HAL_I2C_MspInit+0x190>)
 8001796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001798:	4a26      	ldr	r2, [pc, #152]	; (8001834 <HAL_I2C_MspInit+0x190>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6313      	str	r3, [r2, #48]	; 0x30
 80017a0:	4b24      	ldr	r3, [pc, #144]	; (8001834 <HAL_I2C_MspInit+0x190>)
 80017a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_I2C_MspInit+0x190>)
 80017b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b4:	4a1f      	ldr	r2, [pc, #124]	; (8001834 <HAL_I2C_MspInit+0x190>)
 80017b6:	f043 0302 	orr.w	r3, r3, #2
 80017ba:	6313      	str	r3, [r2, #48]	; 0x30
 80017bc:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <HAL_I2C_MspInit+0x190>)
 80017be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ce:	2312      	movs	r3, #18
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80017da:	2304      	movs	r3, #4
 80017dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e2:	4619      	mov	r1, r3
 80017e4:	4817      	ldr	r0, [pc, #92]	; (8001844 <HAL_I2C_MspInit+0x1a0>)
 80017e6:	f000 fd1d 	bl	8002224 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017ea:	2310      	movs	r3, #16
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ee:	2312      	movs	r3, #18
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f6:	2303      	movs	r3, #3
 80017f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80017fa:	2304      	movs	r3, #4
 80017fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001802:	4619      	mov	r1, r3
 8001804:	480c      	ldr	r0, [pc, #48]	; (8001838 <HAL_I2C_MspInit+0x194>)
 8001806:	f000 fd0d 	bl	8002224 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_I2C_MspInit+0x190>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	4a08      	ldr	r2, [pc, #32]	; (8001834 <HAL_I2C_MspInit+0x190>)
 8001814:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001818:	6413      	str	r3, [r2, #64]	; 0x40
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_I2C_MspInit+0x190>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]
}
 8001826:	bf00      	nop
 8001828:	3738      	adds	r7, #56	; 0x38
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40005400 	.word	0x40005400
 8001834:	40023800 	.word	0x40023800
 8001838:	40020400 	.word	0x40020400
 800183c:	40005800 	.word	0x40005800
 8001840:	40005c00 	.word	0x40005c00
 8001844:	40020000 	.word	0x40020000

08001848 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001868:	d133      	bne.n	80018d2 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <HAL_TIM_IC_MspInit+0x94>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	4a1a      	ldr	r2, [pc, #104]	; (80018dc <HAL_TIM_IC_MspInit+0x94>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6413      	str	r3, [r2, #64]	; 0x40
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <HAL_TIM_IC_MspInit+0x94>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b14      	ldr	r3, [pc, #80]	; (80018dc <HAL_TIM_IC_MspInit+0x94>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a13      	ldr	r2, [pc, #76]	; (80018dc <HAL_TIM_IC_MspInit+0x94>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <HAL_TIM_IC_MspInit+0x94>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018a2:	2303      	movs	r3, #3
 80018a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018b2:	2301      	movs	r3, #1
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4619      	mov	r1, r3
 80018bc:	4808      	ldr	r0, [pc, #32]	; (80018e0 <HAL_TIM_IC_MspInit+0x98>)
 80018be:	f000 fcb1 	bl	8002224 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2100      	movs	r1, #0
 80018c6:	201c      	movs	r0, #28
 80018c8:	f000 fbf0 	bl	80020ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018cc:	201c      	movs	r0, #28
 80018ce:	f000 fc09 	bl	80020e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018d2:	bf00      	nop
 80018d4:	3728      	adds	r7, #40	; 0x28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020000 	.word	0x40020000

080018e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a15      	ldr	r2, [pc, #84]	; (8001948 <HAL_TIM_PWM_MspInit+0x64>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d10e      	bne.n	8001914 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	4b14      	ldr	r3, [pc, #80]	; (800194c <HAL_TIM_PWM_MspInit+0x68>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	4a13      	ldr	r2, [pc, #76]	; (800194c <HAL_TIM_PWM_MspInit+0x68>)
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	6413      	str	r3, [r2, #64]	; 0x40
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <HAL_TIM_PWM_MspInit+0x68>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001912:	e012      	b.n	800193a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0d      	ldr	r2, [pc, #52]	; (8001950 <HAL_TIM_PWM_MspInit+0x6c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d10d      	bne.n	800193a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_TIM_PWM_MspInit+0x68>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a09      	ldr	r2, [pc, #36]	; (800194c <HAL_TIM_PWM_MspInit+0x68>)
 8001928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b07      	ldr	r3, [pc, #28]	; (800194c <HAL_TIM_PWM_MspInit+0x68>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
}
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40000400 	.word	0x40000400
 800194c:	40023800 	.word	0x40023800
 8001950:	40001800 	.word	0x40001800

08001954 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0b      	ldr	r2, [pc, #44]	; (8001990 <HAL_TIM_Base_MspInit+0x3c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d10d      	bne.n	8001982 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <HAL_TIM_Base_MspInit+0x40>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	4a09      	ldr	r2, [pc, #36]	; (8001994 <HAL_TIM_Base_MspInit+0x40>)
 8001970:	f043 0310 	orr.w	r3, r3, #16
 8001974:	6413      	str	r3, [r2, #64]	; 0x40
 8001976:	4b07      	ldr	r3, [pc, #28]	; (8001994 <HAL_TIM_Base_MspInit+0x40>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f003 0310 	and.w	r3, r3, #16
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40001000 	.word	0x40001000
 8001994:	40023800 	.word	0x40023800

08001998 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a33      	ldr	r2, [pc, #204]	; (8001a84 <HAL_TIM_MspPostInit+0xec>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d13c      	bne.n	8001a34 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	4b32      	ldr	r3, [pc, #200]	; (8001a88 <HAL_TIM_MspPostInit+0xf0>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a31      	ldr	r2, [pc, #196]	; (8001a88 <HAL_TIM_MspPostInit+0xf0>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b2f      	ldr	r3, [pc, #188]	; (8001a88 <HAL_TIM_MspPostInit+0xf0>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b2b      	ldr	r3, [pc, #172]	; (8001a88 <HAL_TIM_MspPostInit+0xf0>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a2a      	ldr	r2, [pc, #168]	; (8001a88 <HAL_TIM_MspPostInit+0xf0>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <HAL_TIM_MspPostInit+0xf0>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019f2:	23c0      	movs	r3, #192	; 0xc0
 80019f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a02:	2302      	movs	r3, #2
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	481f      	ldr	r0, [pc, #124]	; (8001a8c <HAL_TIM_MspPostInit+0xf4>)
 8001a0e:	f000 fc09 	bl	8002224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a12:	2303      	movs	r3, #3
 8001a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a22:	2302      	movs	r3, #2
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4818      	ldr	r0, [pc, #96]	; (8001a90 <HAL_TIM_MspPostInit+0xf8>)
 8001a2e:	f000 fbf9 	bl	8002224 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001a32:	e023      	b.n	8001a7c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM12)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a16      	ldr	r2, [pc, #88]	; (8001a94 <HAL_TIM_MspPostInit+0xfc>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d11e      	bne.n	8001a7c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <HAL_TIM_MspPostInit+0xf0>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a10      	ldr	r2, [pc, #64]	; (8001a88 <HAL_TIM_MspPostInit+0xf0>)
 8001a48:	f043 0302 	orr.w	r3, r3, #2
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <HAL_TIM_MspPostInit+0xf0>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001a5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001a6c:	2309      	movs	r3, #9
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4619      	mov	r1, r3
 8001a76:	4806      	ldr	r0, [pc, #24]	; (8001a90 <HAL_TIM_MspPostInit+0xf8>)
 8001a78:	f000 fbd4 	bl	8002224 <HAL_GPIO_Init>
}
 8001a7c:	bf00      	nop
 8001a7e:	3728      	adds	r7, #40	; 0x28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40000400 	.word	0x40000400
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40020400 	.word	0x40020400
 8001a94:	40001800 	.word	0x40001800

08001a98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08e      	sub	sp, #56	; 0x38
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a67      	ldr	r2, [pc, #412]	; (8001c54 <HAL_UART_MspInit+0x1bc>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d153      	bne.n	8001b62 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	623b      	str	r3, [r7, #32]
 8001abe:	4b66      	ldr	r3, [pc, #408]	; (8001c58 <HAL_UART_MspInit+0x1c0>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	4a65      	ldr	r2, [pc, #404]	; (8001c58 <HAL_UART_MspInit+0x1c0>)
 8001ac4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aca:	4b63      	ldr	r3, [pc, #396]	; (8001c58 <HAL_UART_MspInit+0x1c0>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad2:	623b      	str	r3, [r7, #32]
 8001ad4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
 8001ada:	4b5f      	ldr	r3, [pc, #380]	; (8001c58 <HAL_UART_MspInit+0x1c0>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a5e      	ldr	r2, [pc, #376]	; (8001c58 <HAL_UART_MspInit+0x1c0>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b5c      	ldr	r3, [pc, #368]	; (8001c58 <HAL_UART_MspInit+0x1c0>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	4b58      	ldr	r3, [pc, #352]	; (8001c58 <HAL_UART_MspInit+0x1c0>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a57      	ldr	r2, [pc, #348]	; (8001c58 <HAL_UART_MspInit+0x1c0>)
 8001afc:	f043 0308 	orr.w	r3, r3, #8
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b55      	ldr	r3, [pc, #340]	; (8001c58 <HAL_UART_MspInit+0x1c0>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	61bb      	str	r3, [r7, #24]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001b20:	2308      	movs	r3, #8
 8001b22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b28:	4619      	mov	r1, r3
 8001b2a:	484c      	ldr	r0, [pc, #304]	; (8001c5c <HAL_UART_MspInit+0x1c4>)
 8001b2c:	f000 fb7a 	bl	8002224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b30:	2304      	movs	r3, #4
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001b40:	2308      	movs	r3, #8
 8001b42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4845      	ldr	r0, [pc, #276]	; (8001c60 <HAL_UART_MspInit+0x1c8>)
 8001b4c:	f000 fb6a 	bl	8002224 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2107      	movs	r1, #7
 8001b54:	2035      	movs	r0, #53	; 0x35
 8001b56:	f000 faa9 	bl	80020ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001b5a:	2035      	movs	r0, #53	; 0x35
 8001b5c:	f000 fac2 	bl	80020e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b60:	e074      	b.n	8001c4c <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART1)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a3f      	ldr	r2, [pc, #252]	; (8001c64 <HAL_UART_MspInit+0x1cc>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d135      	bne.n	8001bd8 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	4b39      	ldr	r3, [pc, #228]	; (8001c58 <HAL_UART_MspInit+0x1c0>)
 8001b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b74:	4a38      	ldr	r2, [pc, #224]	; (8001c58 <HAL_UART_MspInit+0x1c0>)
 8001b76:	f043 0310 	orr.w	r3, r3, #16
 8001b7a:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7c:	4b36      	ldr	r3, [pc, #216]	; (8001c58 <HAL_UART_MspInit+0x1c0>)
 8001b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b80:	f003 0310 	and.w	r3, r3, #16
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	4b32      	ldr	r3, [pc, #200]	; (8001c58 <HAL_UART_MspInit+0x1c0>)
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b90:	4a31      	ldr	r2, [pc, #196]	; (8001c58 <HAL_UART_MspInit+0x1c0>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	6313      	str	r3, [r2, #48]	; 0x30
 8001b98:	4b2f      	ldr	r3, [pc, #188]	; (8001c58 <HAL_UART_MspInit+0x1c0>)
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ba4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bb6:	2307      	movs	r3, #7
 8001bb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4829      	ldr	r0, [pc, #164]	; (8001c68 <HAL_UART_MspInit+0x1d0>)
 8001bc2:	f000 fb2f 	bl	8002224 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2106      	movs	r1, #6
 8001bca:	2025      	movs	r0, #37	; 0x25
 8001bcc:	f000 fa6e 	bl	80020ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bd0:	2025      	movs	r0, #37	; 0x25
 8001bd2:	f000 fa87 	bl	80020e4 <HAL_NVIC_EnableIRQ>
}
 8001bd6:	e039      	b.n	8001c4c <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART3)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a23      	ldr	r2, [pc, #140]	; (8001c6c <HAL_UART_MspInit+0x1d4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d134      	bne.n	8001c4c <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <HAL_UART_MspInit+0x1c0>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	4a1b      	ldr	r2, [pc, #108]	; (8001c58 <HAL_UART_MspInit+0x1c0>)
 8001bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf2:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_UART_MspInit+0x1c0>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_UART_MspInit+0x1c0>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a14      	ldr	r2, [pc, #80]	; (8001c58 <HAL_UART_MspInit+0x1c0>)
 8001c08:	f043 0304 	orr.w	r3, r3, #4
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_UART_MspInit+0x1c0>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8001c1a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c2c:	2307      	movs	r3, #7
 8001c2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c34:	4619      	mov	r1, r3
 8001c36:	4809      	ldr	r0, [pc, #36]	; (8001c5c <HAL_UART_MspInit+0x1c4>)
 8001c38:	f000 faf4 	bl	8002224 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2101      	movs	r1, #1
 8001c40:	2027      	movs	r0, #39	; 0x27
 8001c42:	f000 fa33 	bl	80020ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c46:	2027      	movs	r0, #39	; 0x27
 8001c48:	f000 fa4c 	bl	80020e4 <HAL_NVIC_EnableIRQ>
}
 8001c4c:	bf00      	nop
 8001c4e:	3738      	adds	r7, #56	; 0x38
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40005000 	.word	0x40005000
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40020800 	.word	0x40020800
 8001c60:	40020c00 	.word	0x40020c00
 8001c64:	40011000 	.word	0x40011000
 8001c68:	40020000 	.word	0x40020000
 8001c6c:	40004800 	.word	0x40004800

08001c70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08e      	sub	sp, #56	; 0x38
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	4b33      	ldr	r3, [pc, #204]	; (8001d54 <HAL_InitTick+0xe4>)
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	4a32      	ldr	r2, [pc, #200]	; (8001d54 <HAL_InitTick+0xe4>)
 8001c8a:	f043 0320 	orr.w	r3, r3, #32
 8001c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c90:	4b30      	ldr	r3, [pc, #192]	; (8001d54 <HAL_InitTick+0xe4>)
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	f003 0320 	and.w	r3, r3, #32
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c9c:	f107 0210 	add.w	r2, r7, #16
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 fec8 	bl	8002a3c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d103      	bne.n	8001cbe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001cb6:	f000 fe99 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8001cba:	6378      	str	r0, [r7, #52]	; 0x34
 8001cbc:	e004      	b.n	8001cc8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001cbe:	f000 fe95 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cca:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <HAL_InitTick+0xe8>)
 8001ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd0:	0c9b      	lsrs	r3, r3, #18
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001cd6:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <HAL_InitTick+0xec>)
 8001cd8:	4a21      	ldr	r2, [pc, #132]	; (8001d60 <HAL_InitTick+0xf0>)
 8001cda:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001cdc:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <HAL_InitTick+0xec>)
 8001cde:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ce2:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001ce4:	4a1d      	ldr	r2, [pc, #116]	; (8001d5c <HAL_InitTick+0xec>)
 8001ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce8:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001cea:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <HAL_InitTick+0xec>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <HAL_InitTick+0xec>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf6:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <HAL_InitTick+0xec>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001cfc:	4817      	ldr	r0, [pc, #92]	; (8001d5c <HAL_InitTick+0xec>)
 8001cfe:	f001 fb17 	bl	8003330 <HAL_TIM_Base_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001d08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d11b      	bne.n	8001d48 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001d10:	4812      	ldr	r0, [pc, #72]	; (8001d5c <HAL_InitTick+0xec>)
 8001d12:	f001 fb5d 	bl	80033d0 <HAL_TIM_Base_Start_IT>
 8001d16:	4603      	mov	r3, r0
 8001d18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001d1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d111      	bne.n	8001d48 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001d24:	2037      	movs	r0, #55	; 0x37
 8001d26:	f000 f9dd 	bl	80020e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b0f      	cmp	r3, #15
 8001d2e:	d808      	bhi.n	8001d42 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001d30:	2200      	movs	r2, #0
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	2037      	movs	r0, #55	; 0x37
 8001d36:	f000 f9b9 	bl	80020ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <HAL_InitTick+0xf4>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	e002      	b.n	8001d48 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001d48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3738      	adds	r7, #56	; 0x38
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	431bde83 	.word	0x431bde83
 8001d5c:	20000530 	.word	0x20000530
 8001d60:	40001400 	.word	0x40001400
 8001d64:	20000004 	.word	0x20000004

08001d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <NMI_Handler+0x4>

08001d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <HardFault_Handler+0x4>

08001d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <MemManage_Handler+0x4>

08001d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d7e:	e7fe      	b.n	8001d7e <BusFault_Handler+0x4>

08001d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <UsageFault_Handler+0x4>
	...

08001d88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	float Local_fSpeed_In_Decimals;
	is_two_readings++;
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <TIM2_IRQHandler+0x5c>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	3301      	adds	r3, #1
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <TIM2_IRQHandler+0x5c>)
 8001d98:	701a      	strb	r2, [r3, #0]
	if(is_two_readings == 2){
 8001d9a:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <TIM2_IRQHandler+0x5c>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d119      	bne.n	8001dd6 <TIM2_IRQHandler+0x4e>
		Local_fSpeed_In_Decimals=Calculate_Car_Speed();
 8001da2:	f7ff f873 	bl	8000e8c <Calculate_Car_Speed>
 8001da6:	ed87 0a01 	vstr	s0, [r7, #4]
         Global_Speed=round(Local_fSpeed_In_Decimals);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7fe fb94 	bl	80004d8 <__aeabi_f2d>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	ec43 2b10 	vmov	d0, r2, r3
 8001db8:	f005 ff8a 	bl	8007cd0 <round>
 8001dbc:	ec53 2b10 	vmov	r2, r3, d0
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f7fe fdf2 	bl	80009ac <__aeabi_d2uiz>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <TIM2_IRQHandler+0x60>)
 8001dce:	801a      	strh	r2, [r3, #0]
		is_two_readings = 0;
 8001dd0:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <TIM2_IRQHandler+0x5c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dd6:	4805      	ldr	r0, [pc, #20]	; (8001dec <TIM2_IRQHandler+0x64>)
 8001dd8:	f001 fc08 	bl	80035ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000524 	.word	0x20000524
 8001de8:	2000052c 	.word	0x2000052c
 8001dec:	20000334 	.word	0x20000334

08001df0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8001df4:	4802      	ldr	r0, [pc, #8]	; (8001e00 <USART1_IRQHandler+0x10>)
 8001df6:	f7fe ffeb 	bl	8000dd0 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
 // HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000498 	.word	0x20000498

08001e04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <USART3_IRQHandler+0x10>)
 8001e0a:	f002 facb 	bl	80043a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	200004dc 	.word	0x200004dc

08001e18 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <UART5_IRQHandler+0x10>)
 8001e1e:	f002 fac1 	bl	80043a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000454 	.word	0x20000454

08001e2c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001e30:	4802      	ldr	r0, [pc, #8]	; (8001e3c <TIM7_IRQHandler+0x10>)
 8001e32:	f001 fbdb 	bl	80035ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000530 	.word	0x20000530

08001e40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <SystemInit+0x20>)
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4a:	4a05      	ldr	r2, [pc, #20]	; (8001e60 <SystemInit+0x20>)
 8001e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e68:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e6a:	490e      	ldr	r1, [pc, #56]	; (8001ea4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ea8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e70:	e002      	b.n	8001e78 <LoopCopyDataInit>

08001e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e76:	3304      	adds	r3, #4

08001e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e7c:	d3f9      	bcc.n	8001e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7e:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e80:	4c0b      	ldr	r4, [pc, #44]	; (8001eb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e84:	e001      	b.n	8001e8a <LoopFillZerobss>

08001e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e88:	3204      	adds	r2, #4

08001e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e8c:	d3fb      	bcc.n	8001e86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e8e:	f7ff ffd7 	bl	8001e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e92:	f005 feeb 	bl	8007c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e96:	f7ff f82b 	bl	8000ef0 <main>
  bx  lr    
 8001e9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001ea8:	08007de8 	.word	0x08007de8
  ldr r2, =_sbss
 8001eac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001eb0:	20004ecc 	.word	0x20004ecc

08001eb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb4:	e7fe      	b.n	8001eb4 <ADC_IRQHandler>
	...

08001eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <HAL_Init+0x40>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	; (8001ef8 <HAL_Init+0x40>)
 8001ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_Init+0x40>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <HAL_Init+0x40>)
 8001ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HAL_Init+0x40>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a07      	ldr	r2, [pc, #28]	; (8001ef8 <HAL_Init+0x40>)
 8001eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	f000 f8d8 	bl	8002096 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ee6:	200f      	movs	r0, #15
 8001ee8:	f7ff fec2 	bl	8001c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eec:	f7ff fbae 	bl	800164c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40023c00 	.word	0x40023c00

08001efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_IncTick+0x20>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_IncTick+0x24>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <HAL_IncTick+0x24>)
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	20000578 	.word	0x20000578

08001f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <HAL_GetTick+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000578 	.word	0x20000578

08001f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6e:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	60d3      	str	r3, [r2, #12]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <__NVIC_GetPriorityGrouping+0x18>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	f003 0307 	and.w	r3, r3, #7
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	db0b      	blt.n	8001fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	f003 021f 	and.w	r2, r3, #31
 8001fb8:	4907      	ldr	r1, [pc, #28]	; (8001fd8 <__NVIC_EnableIRQ+0x38>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000e100 	.word	0xe000e100

08001fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	6039      	str	r1, [r7, #0]
 8001fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	db0a      	blt.n	8002006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	490c      	ldr	r1, [pc, #48]	; (8002028 <__NVIC_SetPriority+0x4c>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	0112      	lsls	r2, r2, #4
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	440b      	add	r3, r1
 8002000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002004:	e00a      	b.n	800201c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4908      	ldr	r1, [pc, #32]	; (800202c <__NVIC_SetPriority+0x50>)
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	3b04      	subs	r3, #4
 8002014:	0112      	lsls	r2, r2, #4
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	440b      	add	r3, r1
 800201a:	761a      	strb	r2, [r3, #24]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000e100 	.word	0xe000e100
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	; 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f1c3 0307 	rsb	r3, r3, #7
 800204a:	2b04      	cmp	r3, #4
 800204c:	bf28      	it	cs
 800204e:	2304      	movcs	r3, #4
 8002050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3304      	adds	r3, #4
 8002056:	2b06      	cmp	r3, #6
 8002058:	d902      	bls.n	8002060 <NVIC_EncodePriority+0x30>
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3b03      	subs	r3, #3
 800205e:	e000      	b.n	8002062 <NVIC_EncodePriority+0x32>
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	f04f 32ff 	mov.w	r2, #4294967295
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43da      	mvns	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	401a      	ands	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002078:	f04f 31ff 	mov.w	r1, #4294967295
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	43d9      	mvns	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	4313      	orrs	r3, r2
         );
}
 800208a:	4618      	mov	r0, r3
 800208c:	3724      	adds	r7, #36	; 0x24
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ff4c 	bl	8001f3c <__NVIC_SetPriorityGrouping>
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020be:	f7ff ff61 	bl	8001f84 <__NVIC_GetPriorityGrouping>
 80020c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	68b9      	ldr	r1, [r7, #8]
 80020c8:	6978      	ldr	r0, [r7, #20]
 80020ca:	f7ff ffb1 	bl	8002030 <NVIC_EncodePriority>
 80020ce:	4602      	mov	r2, r0
 80020d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d4:	4611      	mov	r1, r2
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff ff80 	bl	8001fdc <__NVIC_SetPriority>
}
 80020dc:	bf00      	nop
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff ff54 	bl	8001fa0 <__NVIC_EnableIRQ>
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800210e:	f7ff ff09 	bl	8001f24 <HAL_GetTick>
 8002112:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d008      	beq.n	8002132 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2280      	movs	r2, #128	; 0x80
 8002124:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e052      	b.n	80021d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0216 	bic.w	r2, r2, #22
 8002140:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695a      	ldr	r2, [r3, #20]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002150:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	2b00      	cmp	r3, #0
 8002158:	d103      	bne.n	8002162 <HAL_DMA_Abort+0x62>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800215e:	2b00      	cmp	r3, #0
 8002160:	d007      	beq.n	8002172 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0208 	bic.w	r2, r2, #8
 8002170:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0201 	bic.w	r2, r2, #1
 8002180:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002182:	e013      	b.n	80021ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002184:	f7ff fece 	bl	8001f24 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b05      	cmp	r3, #5
 8002190:	d90c      	bls.n	80021ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2220      	movs	r2, #32
 8002196:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2203      	movs	r2, #3
 800219c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e015      	b.n	80021d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1e4      	bne.n	8002184 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021be:	223f      	movs	r2, #63	; 0x3f
 80021c0:	409a      	lsls	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d004      	beq.n	80021fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2280      	movs	r2, #128	; 0x80
 80021f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e00c      	b.n	8002218 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2205      	movs	r2, #5
 8002202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0201 	bic.w	r2, r2, #1
 8002214:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002224:	b480      	push	{r7}
 8002226:	b089      	sub	sp, #36	; 0x24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002236:	2300      	movs	r3, #0
 8002238:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
 800223e:	e165      	b.n	800250c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002240:	2201      	movs	r2, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	429a      	cmp	r2, r3
 800225a:	f040 8154 	bne.w	8002506 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	2b01      	cmp	r3, #1
 8002268:	d005      	beq.n	8002276 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002272:	2b02      	cmp	r3, #2
 8002274:	d130      	bne.n	80022d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	2203      	movs	r2, #3
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022ac:	2201      	movs	r2, #1
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	f003 0201 	and.w	r2, r3, #1
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d017      	beq.n	8002314 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d123      	bne.n	8002368 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	08da      	lsrs	r2, r3, #3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3208      	adds	r2, #8
 8002328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	220f      	movs	r2, #15
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	691a      	ldr	r2, [r3, #16]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	08da      	lsrs	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3208      	adds	r2, #8
 8002362:	69b9      	ldr	r1, [r7, #24]
 8002364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	2203      	movs	r2, #3
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0203 	and.w	r2, r3, #3
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80ae 	beq.w	8002506 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	4b5d      	ldr	r3, [pc, #372]	; (8002524 <HAL_GPIO_Init+0x300>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b2:	4a5c      	ldr	r2, [pc, #368]	; (8002524 <HAL_GPIO_Init+0x300>)
 80023b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b8:	6453      	str	r3, [r2, #68]	; 0x44
 80023ba:	4b5a      	ldr	r3, [pc, #360]	; (8002524 <HAL_GPIO_Init+0x300>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023c6:	4a58      	ldr	r2, [pc, #352]	; (8002528 <HAL_GPIO_Init+0x304>)
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	089b      	lsrs	r3, r3, #2
 80023cc:	3302      	adds	r3, #2
 80023ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	220f      	movs	r2, #15
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a4f      	ldr	r2, [pc, #316]	; (800252c <HAL_GPIO_Init+0x308>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d025      	beq.n	800243e <HAL_GPIO_Init+0x21a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a4e      	ldr	r2, [pc, #312]	; (8002530 <HAL_GPIO_Init+0x30c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d01f      	beq.n	800243a <HAL_GPIO_Init+0x216>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a4d      	ldr	r2, [pc, #308]	; (8002534 <HAL_GPIO_Init+0x310>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d019      	beq.n	8002436 <HAL_GPIO_Init+0x212>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a4c      	ldr	r2, [pc, #304]	; (8002538 <HAL_GPIO_Init+0x314>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d013      	beq.n	8002432 <HAL_GPIO_Init+0x20e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a4b      	ldr	r2, [pc, #300]	; (800253c <HAL_GPIO_Init+0x318>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00d      	beq.n	800242e <HAL_GPIO_Init+0x20a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a4a      	ldr	r2, [pc, #296]	; (8002540 <HAL_GPIO_Init+0x31c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d007      	beq.n	800242a <HAL_GPIO_Init+0x206>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a49      	ldr	r2, [pc, #292]	; (8002544 <HAL_GPIO_Init+0x320>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d101      	bne.n	8002426 <HAL_GPIO_Init+0x202>
 8002422:	2306      	movs	r3, #6
 8002424:	e00c      	b.n	8002440 <HAL_GPIO_Init+0x21c>
 8002426:	2307      	movs	r3, #7
 8002428:	e00a      	b.n	8002440 <HAL_GPIO_Init+0x21c>
 800242a:	2305      	movs	r3, #5
 800242c:	e008      	b.n	8002440 <HAL_GPIO_Init+0x21c>
 800242e:	2304      	movs	r3, #4
 8002430:	e006      	b.n	8002440 <HAL_GPIO_Init+0x21c>
 8002432:	2303      	movs	r3, #3
 8002434:	e004      	b.n	8002440 <HAL_GPIO_Init+0x21c>
 8002436:	2302      	movs	r3, #2
 8002438:	e002      	b.n	8002440 <HAL_GPIO_Init+0x21c>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <HAL_GPIO_Init+0x21c>
 800243e:	2300      	movs	r3, #0
 8002440:	69fa      	ldr	r2, [r7, #28]
 8002442:	f002 0203 	and.w	r2, r2, #3
 8002446:	0092      	lsls	r2, r2, #2
 8002448:	4093      	lsls	r3, r2
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002450:	4935      	ldr	r1, [pc, #212]	; (8002528 <HAL_GPIO_Init+0x304>)
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	089b      	lsrs	r3, r3, #2
 8002456:	3302      	adds	r3, #2
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800245e:	4b3a      	ldr	r3, [pc, #232]	; (8002548 <HAL_GPIO_Init+0x324>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002482:	4a31      	ldr	r2, [pc, #196]	; (8002548 <HAL_GPIO_Init+0x324>)
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002488:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <HAL_GPIO_Init+0x324>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024ac:	4a26      	ldr	r2, [pc, #152]	; (8002548 <HAL_GPIO_Init+0x324>)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024b2:	4b25      	ldr	r3, [pc, #148]	; (8002548 <HAL_GPIO_Init+0x324>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024d6:	4a1c      	ldr	r2, [pc, #112]	; (8002548 <HAL_GPIO_Init+0x324>)
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024dc:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <HAL_GPIO_Init+0x324>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002500:	4a11      	ldr	r2, [pc, #68]	; (8002548 <HAL_GPIO_Init+0x324>)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3301      	adds	r3, #1
 800250a:	61fb      	str	r3, [r7, #28]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	2b0f      	cmp	r3, #15
 8002510:	f67f ae96 	bls.w	8002240 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002514:	bf00      	nop
 8002516:	bf00      	nop
 8002518:	3724      	adds	r7, #36	; 0x24
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40023800 	.word	0x40023800
 8002528:	40013800 	.word	0x40013800
 800252c:	40020000 	.word	0x40020000
 8002530:	40020400 	.word	0x40020400
 8002534:	40020800 	.word	0x40020800
 8002538:	40020c00 	.word	0x40020c00
 800253c:	40021000 	.word	0x40021000
 8002540:	40021400 	.word	0x40021400
 8002544:	40021800 	.word	0x40021800
 8002548:	40013c00 	.word	0x40013c00

0800254c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	807b      	strh	r3, [r7, #2]
 8002558:	4613      	mov	r3, r2
 800255a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800255c:	787b      	ldrb	r3, [r7, #1]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002562:	887a      	ldrh	r2, [r7, #2]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002568:	e003      	b.n	8002572 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800256a:	887b      	ldrh	r3, [r7, #2]
 800256c:	041a      	lsls	r2, r3, #16
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	619a      	str	r2, [r3, #24]
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
	...

08002580 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e12b      	b.n	80027ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d106      	bne.n	80025ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff f87c 	bl	80016a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2224      	movs	r2, #36	; 0x24
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0201 	bic.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025e4:	f000 fa02 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 80025e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	4a81      	ldr	r2, [pc, #516]	; (80027f4 <HAL_I2C_Init+0x274>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d807      	bhi.n	8002604 <HAL_I2C_Init+0x84>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4a80      	ldr	r2, [pc, #512]	; (80027f8 <HAL_I2C_Init+0x278>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	bf94      	ite	ls
 80025fc:	2301      	movls	r3, #1
 80025fe:	2300      	movhi	r3, #0
 8002600:	b2db      	uxtb	r3, r3
 8002602:	e006      	b.n	8002612 <HAL_I2C_Init+0x92>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4a7d      	ldr	r2, [pc, #500]	; (80027fc <HAL_I2C_Init+0x27c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	bf94      	ite	ls
 800260c:	2301      	movls	r3, #1
 800260e:	2300      	movhi	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e0e7      	b.n	80027ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4a78      	ldr	r2, [pc, #480]	; (8002800 <HAL_I2C_Init+0x280>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	0c9b      	lsrs	r3, r3, #18
 8002624:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	430a      	orrs	r2, r1
 8002638:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	4a6a      	ldr	r2, [pc, #424]	; (80027f4 <HAL_I2C_Init+0x274>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d802      	bhi.n	8002654 <HAL_I2C_Init+0xd4>
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	3301      	adds	r3, #1
 8002652:	e009      	b.n	8002668 <HAL_I2C_Init+0xe8>
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800265a:	fb02 f303 	mul.w	r3, r2, r3
 800265e:	4a69      	ldr	r2, [pc, #420]	; (8002804 <HAL_I2C_Init+0x284>)
 8002660:	fba2 2303 	umull	r2, r3, r2, r3
 8002664:	099b      	lsrs	r3, r3, #6
 8002666:	3301      	adds	r3, #1
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	430b      	orrs	r3, r1
 800266e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800267a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	495c      	ldr	r1, [pc, #368]	; (80027f4 <HAL_I2C_Init+0x274>)
 8002684:	428b      	cmp	r3, r1
 8002686:	d819      	bhi.n	80026bc <HAL_I2C_Init+0x13c>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1e59      	subs	r1, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	fbb1 f3f3 	udiv	r3, r1, r3
 8002696:	1c59      	adds	r1, r3, #1
 8002698:	f640 73fc 	movw	r3, #4092	; 0xffc
 800269c:	400b      	ands	r3, r1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00a      	beq.n	80026b8 <HAL_I2C_Init+0x138>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1e59      	subs	r1, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80026b0:	3301      	adds	r3, #1
 80026b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b6:	e051      	b.n	800275c <HAL_I2C_Init+0x1dc>
 80026b8:	2304      	movs	r3, #4
 80026ba:	e04f      	b.n	800275c <HAL_I2C_Init+0x1dc>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d111      	bne.n	80026e8 <HAL_I2C_Init+0x168>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1e58      	subs	r0, r3, #1
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	440b      	add	r3, r1
 80026d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026d6:	3301      	adds	r3, #1
 80026d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf0c      	ite	eq
 80026e0:	2301      	moveq	r3, #1
 80026e2:	2300      	movne	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	e012      	b.n	800270e <HAL_I2C_Init+0x18e>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1e58      	subs	r0, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6859      	ldr	r1, [r3, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	0099      	lsls	r1, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80026fe:	3301      	adds	r3, #1
 8002700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002704:	2b00      	cmp	r3, #0
 8002706:	bf0c      	ite	eq
 8002708:	2301      	moveq	r3, #1
 800270a:	2300      	movne	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_I2C_Init+0x196>
 8002712:	2301      	movs	r3, #1
 8002714:	e022      	b.n	800275c <HAL_I2C_Init+0x1dc>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10e      	bne.n	800273c <HAL_I2C_Init+0x1bc>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1e58      	subs	r0, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6859      	ldr	r1, [r3, #4]
 8002726:	460b      	mov	r3, r1
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	440b      	add	r3, r1
 800272c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002730:	3301      	adds	r3, #1
 8002732:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800273a:	e00f      	b.n	800275c <HAL_I2C_Init+0x1dc>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1e58      	subs	r0, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	0099      	lsls	r1, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002752:	3301      	adds	r3, #1
 8002754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002758:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	6809      	ldr	r1, [r1, #0]
 8002760:	4313      	orrs	r3, r2
 8002762:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69da      	ldr	r2, [r3, #28]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800278a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6911      	ldr	r1, [r2, #16]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68d2      	ldr	r2, [r2, #12]
 8002796:	4311      	orrs	r1, r2
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	430b      	orrs	r3, r1
 800279e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695a      	ldr	r2, [r3, #20]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2220      	movs	r2, #32
 80027d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	000186a0 	.word	0x000186a0
 80027f8:	001e847f 	.word	0x001e847f
 80027fc:	003d08ff 	.word	0x003d08ff
 8002800:	431bde83 	.word	0x431bde83
 8002804:	10624dd3 	.word	0x10624dd3

08002808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0cc      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800281c:	4b68      	ldr	r3, [pc, #416]	; (80029c0 <HAL_RCC_ClockConfig+0x1b8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d90c      	bls.n	8002844 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4b65      	ldr	r3, [pc, #404]	; (80029c0 <HAL_RCC_ClockConfig+0x1b8>)
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002832:	4b63      	ldr	r3, [pc, #396]	; (80029c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d001      	beq.n	8002844 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0b8      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d020      	beq.n	8002892 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800285c:	4b59      	ldr	r3, [pc, #356]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	4a58      	ldr	r2, [pc, #352]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002866:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002874:	4b53      	ldr	r3, [pc, #332]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	4a52      	ldr	r2, [pc, #328]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800287e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002880:	4b50      	ldr	r3, [pc, #320]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	494d      	ldr	r1, [pc, #308]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	4313      	orrs	r3, r2
 8002890:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d044      	beq.n	8002928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d107      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a6:	4b47      	ldr	r3, [pc, #284]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d119      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e07f      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d003      	beq.n	80028c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c6:	4b3f      	ldr	r3, [pc, #252]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d109      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e06f      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d6:	4b3b      	ldr	r3, [pc, #236]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e067      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028e6:	4b37      	ldr	r3, [pc, #220]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f023 0203 	bic.w	r2, r3, #3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	4934      	ldr	r1, [pc, #208]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f8:	f7ff fb14 	bl	8001f24 <HAL_GetTick>
 80028fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fe:	e00a      	b.n	8002916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002900:	f7ff fb10 	bl	8001f24 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f241 3288 	movw	r2, #5000	; 0x1388
 800290e:	4293      	cmp	r3, r2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e04f      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002916:	4b2b      	ldr	r3, [pc, #172]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 020c 	and.w	r2, r3, #12
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	429a      	cmp	r2, r3
 8002926:	d1eb      	bne.n	8002900 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002928:	4b25      	ldr	r3, [pc, #148]	; (80029c0 <HAL_RCC_ClockConfig+0x1b8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 030f 	and.w	r3, r3, #15
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d20c      	bcs.n	8002950 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002936:	4b22      	ldr	r3, [pc, #136]	; (80029c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800293e:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d001      	beq.n	8002950 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e032      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800295c:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4916      	ldr	r1, [pc, #88]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	4313      	orrs	r3, r2
 800296c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b00      	cmp	r3, #0
 8002978:	d009      	beq.n	800298e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800297a:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	490e      	ldr	r1, [pc, #56]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	4313      	orrs	r3, r2
 800298c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800298e:	f000 f887 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8002992:	4602      	mov	r2, r0
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	490a      	ldr	r1, [pc, #40]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 80029a0:	5ccb      	ldrb	r3, [r1, r3]
 80029a2:	fa22 f303 	lsr.w	r3, r2, r3
 80029a6:	4a09      	ldr	r2, [pc, #36]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029aa:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <HAL_RCC_ClockConfig+0x1c8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff f95e 	bl	8001c70 <HAL_InitTick>

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40023c00 	.word	0x40023c00
 80029c4:	40023800 	.word	0x40023800
 80029c8:	08007dc0 	.word	0x08007dc0
 80029cc:	20000000 	.word	0x20000000
 80029d0:	20000004 	.word	0x20000004

080029d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029d8:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029da:	681b      	ldr	r3, [r3, #0]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	20000000 	.word	0x20000000

080029ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029f0:	f7ff fff0 	bl	80029d4 <HAL_RCC_GetHCLKFreq>
 80029f4:	4602      	mov	r2, r0
 80029f6:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <HAL_RCC_GetPCLK1Freq+0x20>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	0a9b      	lsrs	r3, r3, #10
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	4903      	ldr	r1, [pc, #12]	; (8002a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a02:	5ccb      	ldrb	r3, [r1, r3]
 8002a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	08007dd0 	.word	0x08007dd0

08002a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a18:	f7ff ffdc 	bl	80029d4 <HAL_RCC_GetHCLKFreq>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	0b5b      	lsrs	r3, r3, #13
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	4903      	ldr	r1, [pc, #12]	; (8002a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a2a:	5ccb      	ldrb	r3, [r1, r3]
 8002a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40023800 	.word	0x40023800
 8002a38:	08007dd0 	.word	0x08007dd0

08002a3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	220f      	movs	r2, #15
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a4c:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_RCC_GetClockConfig+0x5c>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 0203 	and.w	r2, r3, #3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a58:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <HAL_RCC_GetClockConfig+0x5c>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a64:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <HAL_RCC_GetClockConfig+0x5c>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a70:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <HAL_RCC_GetClockConfig+0x5c>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	08db      	lsrs	r3, r3, #3
 8002a76:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a7e:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <HAL_RCC_GetClockConfig+0x60>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 020f 	and.w	r2, r3, #15
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	601a      	str	r2, [r3, #0]
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40023c00 	.word	0x40023c00

08002aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aa4:	b0a6      	sub	sp, #152	; 0x98
 8002aa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ac6:	4bc8      	ldr	r3, [pc, #800]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	2b0c      	cmp	r3, #12
 8002ad0:	f200 817e 	bhi.w	8002dd0 <HAL_RCC_GetSysClockFreq+0x330>
 8002ad4:	a201      	add	r2, pc, #4	; (adr r2, 8002adc <HAL_RCC_GetSysClockFreq+0x3c>)
 8002ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ada:	bf00      	nop
 8002adc:	08002b11 	.word	0x08002b11
 8002ae0:	08002dd1 	.word	0x08002dd1
 8002ae4:	08002dd1 	.word	0x08002dd1
 8002ae8:	08002dd1 	.word	0x08002dd1
 8002aec:	08002b19 	.word	0x08002b19
 8002af0:	08002dd1 	.word	0x08002dd1
 8002af4:	08002dd1 	.word	0x08002dd1
 8002af8:	08002dd1 	.word	0x08002dd1
 8002afc:	08002b21 	.word	0x08002b21
 8002b00:	08002dd1 	.word	0x08002dd1
 8002b04:	08002dd1 	.word	0x08002dd1
 8002b08:	08002dd1 	.word	0x08002dd1
 8002b0c:	08002c8b 	.word	0x08002c8b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b10:	4bb6      	ldr	r3, [pc, #728]	; (8002dec <HAL_RCC_GetSysClockFreq+0x34c>)
 8002b12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002b16:	e15f      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b18:	4bb5      	ldr	r3, [pc, #724]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002b1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002b1e:	e15b      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b20:	4bb1      	ldr	r3, [pc, #708]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b2c:	4bae      	ldr	r3, [pc, #696]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d031      	beq.n	8002b9c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b38:	4bab      	ldr	r3, [pc, #684]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	099b      	lsrs	r3, r3, #6
 8002b3e:	2200      	movs	r2, #0
 8002b40:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b4a:	663b      	str	r3, [r7, #96]	; 0x60
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	667b      	str	r3, [r7, #100]	; 0x64
 8002b50:	4ba7      	ldr	r3, [pc, #668]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002b52:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002b56:	462a      	mov	r2, r5
 8002b58:	fb03 f202 	mul.w	r2, r3, r2
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	4621      	mov	r1, r4
 8002b60:	fb01 f303 	mul.w	r3, r1, r3
 8002b64:	4413      	add	r3, r2
 8002b66:	4aa2      	ldr	r2, [pc, #648]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002b68:	4621      	mov	r1, r4
 8002b6a:	fba1 1202 	umull	r1, r2, r1, r2
 8002b6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002b70:	460a      	mov	r2, r1
 8002b72:	67ba      	str	r2, [r7, #120]	; 0x78
 8002b74:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002b76:	4413      	add	r3, r2
 8002b78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b7e:	2200      	movs	r2, #0
 8002b80:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b82:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002b84:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b88:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002b8c:	f7fd ff7e 	bl	8000a8c <__aeabi_uldivmod>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4613      	mov	r3, r2
 8002b96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b9a:	e064      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b9c:	4b92      	ldr	r3, [pc, #584]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	099b      	lsrs	r3, r3, #6
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	653b      	str	r3, [r7, #80]	; 0x50
 8002ba6:	657a      	str	r2, [r7, #84]	; 0x54
 8002ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bae:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bb4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002bb8:	4622      	mov	r2, r4
 8002bba:	462b      	mov	r3, r5
 8002bbc:	f04f 0000 	mov.w	r0, #0
 8002bc0:	f04f 0100 	mov.w	r1, #0
 8002bc4:	0159      	lsls	r1, r3, #5
 8002bc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bca:	0150      	lsls	r0, r2, #5
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4621      	mov	r1, r4
 8002bd2:	1a51      	subs	r1, r2, r1
 8002bd4:	6139      	str	r1, [r7, #16]
 8002bd6:	4629      	mov	r1, r5
 8002bd8:	eb63 0301 	sbc.w	r3, r3, r1
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bea:	4659      	mov	r1, fp
 8002bec:	018b      	lsls	r3, r1, #6
 8002bee:	4651      	mov	r1, sl
 8002bf0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bf4:	4651      	mov	r1, sl
 8002bf6:	018a      	lsls	r2, r1, #6
 8002bf8:	4651      	mov	r1, sl
 8002bfa:	ebb2 0801 	subs.w	r8, r2, r1
 8002bfe:	4659      	mov	r1, fp
 8002c00:	eb63 0901 	sbc.w	r9, r3, r1
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c10:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c14:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c18:	4690      	mov	r8, r2
 8002c1a:	4699      	mov	r9, r3
 8002c1c:	4623      	mov	r3, r4
 8002c1e:	eb18 0303 	adds.w	r3, r8, r3
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	462b      	mov	r3, r5
 8002c26:	eb49 0303 	adc.w	r3, r9, r3
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c38:	4629      	mov	r1, r5
 8002c3a:	028b      	lsls	r3, r1, #10
 8002c3c:	4621      	mov	r1, r4
 8002c3e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c42:	4621      	mov	r1, r4
 8002c44:	028a      	lsls	r2, r1, #10
 8002c46:	4610      	mov	r0, r2
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c4e:	2200      	movs	r2, #0
 8002c50:	643b      	str	r3, [r7, #64]	; 0x40
 8002c52:	647a      	str	r2, [r7, #68]	; 0x44
 8002c54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c58:	f7fd ff18 	bl	8000a8c <__aeabi_uldivmod>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4613      	mov	r3, r2
 8002c62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c66:	4b60      	ldr	r3, [pc, #384]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	0c1b      	lsrs	r3, r3, #16
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	3301      	adds	r3, #1
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002c78:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002c88:	e0a6      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c8a:	4b57      	ldr	r3, [pc, #348]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c96:	4b54      	ldr	r3, [pc, #336]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d02a      	beq.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca2:	4b51      	ldr	r3, [pc, #324]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	099b      	lsrs	r3, r3, #6
 8002ca8:	2200      	movs	r2, #0
 8002caa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4b4e      	ldr	r3, [pc, #312]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002cb8:	fb03 f201 	mul.w	r2, r3, r1
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	fb00 f303 	mul.w	r3, r0, r3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	4a4a      	ldr	r2, [pc, #296]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002cc6:	fba0 1202 	umull	r1, r2, r0, r2
 8002cca:	677a      	str	r2, [r7, #116]	; 0x74
 8002ccc:	460a      	mov	r2, r1
 8002cce:	673a      	str	r2, [r7, #112]	; 0x70
 8002cd0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002cd2:	4413      	add	r3, r2
 8002cd4:	677b      	str	r3, [r7, #116]	; 0x74
 8002cd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cda:	2200      	movs	r2, #0
 8002cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8002cde:	637a      	str	r2, [r7, #52]	; 0x34
 8002ce0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ce4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002ce8:	f7fd fed0 	bl	8000a8c <__aeabi_uldivmod>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002cf6:	e05b      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf8:	4b3b      	ldr	r3, [pc, #236]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	099b      	lsrs	r3, r3, #6
 8002cfe:	2200      	movs	r2, #0
 8002d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d0a:	623b      	str	r3, [r7, #32]
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d14:	4642      	mov	r2, r8
 8002d16:	464b      	mov	r3, r9
 8002d18:	f04f 0000 	mov.w	r0, #0
 8002d1c:	f04f 0100 	mov.w	r1, #0
 8002d20:	0159      	lsls	r1, r3, #5
 8002d22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d26:	0150      	lsls	r0, r2, #5
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4641      	mov	r1, r8
 8002d2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d32:	4649      	mov	r1, r9
 8002d34:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d4c:	ebb2 040a 	subs.w	r4, r2, sl
 8002d50:	eb63 050b 	sbc.w	r5, r3, fp
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	00eb      	lsls	r3, r5, #3
 8002d5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d62:	00e2      	lsls	r2, r4, #3
 8002d64:	4614      	mov	r4, r2
 8002d66:	461d      	mov	r5, r3
 8002d68:	4643      	mov	r3, r8
 8002d6a:	18e3      	adds	r3, r4, r3
 8002d6c:	603b      	str	r3, [r7, #0]
 8002d6e:	464b      	mov	r3, r9
 8002d70:	eb45 0303 	adc.w	r3, r5, r3
 8002d74:	607b      	str	r3, [r7, #4]
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d82:	4629      	mov	r1, r5
 8002d84:	028b      	lsls	r3, r1, #10
 8002d86:	4621      	mov	r1, r4
 8002d88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d8c:	4621      	mov	r1, r4
 8002d8e:	028a      	lsls	r2, r1, #10
 8002d90:	4610      	mov	r0, r2
 8002d92:	4619      	mov	r1, r3
 8002d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d98:	2200      	movs	r2, #0
 8002d9a:	61bb      	str	r3, [r7, #24]
 8002d9c:	61fa      	str	r2, [r7, #28]
 8002d9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002da2:	f7fd fe73 	bl	8000a8c <__aeabi_uldivmod>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4613      	mov	r3, r2
 8002dac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002db0:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	0f1b      	lsrs	r3, r3, #28
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002dbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002dc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002dce:	e003      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_RCC_GetSysClockFreq+0x34c>)
 8002dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002dd6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3798      	adds	r7, #152	; 0x98
 8002de0:	46bd      	mov	sp, r7
 8002de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	00f42400 	.word	0x00f42400
 8002df0:	017d7840 	.word	0x017d7840

08002df4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e28d      	b.n	8003322 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 8083 	beq.w	8002f1a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e14:	4b94      	ldr	r3, [pc, #592]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 030c 	and.w	r3, r3, #12
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d019      	beq.n	8002e54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e20:	4b91      	ldr	r3, [pc, #580]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d106      	bne.n	8002e3a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e2c:	4b8e      	ldr	r3, [pc, #568]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e38:	d00c      	beq.n	8002e54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e3a:	4b8b      	ldr	r3, [pc, #556]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e42:	2b0c      	cmp	r3, #12
 8002e44:	d112      	bne.n	8002e6c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e46:	4b88      	ldr	r3, [pc, #544]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e52:	d10b      	bne.n	8002e6c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e54:	4b84      	ldr	r3, [pc, #528]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d05b      	beq.n	8002f18 <HAL_RCC_OscConfig+0x124>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d157      	bne.n	8002f18 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e25a      	b.n	8003322 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e74:	d106      	bne.n	8002e84 <HAL_RCC_OscConfig+0x90>
 8002e76:	4b7c      	ldr	r3, [pc, #496]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a7b      	ldr	r2, [pc, #492]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	e01d      	b.n	8002ec0 <HAL_RCC_OscConfig+0xcc>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e8c:	d10c      	bne.n	8002ea8 <HAL_RCC_OscConfig+0xb4>
 8002e8e:	4b76      	ldr	r3, [pc, #472]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a75      	ldr	r2, [pc, #468]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	4b73      	ldr	r3, [pc, #460]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a72      	ldr	r2, [pc, #456]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	e00b      	b.n	8002ec0 <HAL_RCC_OscConfig+0xcc>
 8002ea8:	4b6f      	ldr	r3, [pc, #444]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a6e      	ldr	r2, [pc, #440]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	4b6c      	ldr	r3, [pc, #432]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a6b      	ldr	r2, [pc, #428]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d013      	beq.n	8002ef0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7ff f82c 	bl	8001f24 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ed0:	f7ff f828 	bl	8001f24 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	; 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e21f      	b.n	8003322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	4b61      	ldr	r3, [pc, #388]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0xdc>
 8002eee:	e014      	b.n	8002f1a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7ff f818 	bl	8001f24 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ef8:	f7ff f814 	bl	8001f24 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b64      	cmp	r3, #100	; 0x64
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e20b      	b.n	8003322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0a:	4b57      	ldr	r3, [pc, #348]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x104>
 8002f16:	e000      	b.n	8002f1a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d06f      	beq.n	8003006 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f26:	4b50      	ldr	r3, [pc, #320]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d017      	beq.n	8002f62 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f32:	4b4d      	ldr	r3, [pc, #308]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d105      	bne.n	8002f4a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f3e:	4b4a      	ldr	r3, [pc, #296]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00b      	beq.n	8002f62 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f4a:	4b47      	ldr	r3, [pc, #284]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f52:	2b0c      	cmp	r3, #12
 8002f54:	d11c      	bne.n	8002f90 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f56:	4b44      	ldr	r3, [pc, #272]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d116      	bne.n	8002f90 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f62:	4b41      	ldr	r3, [pc, #260]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <HAL_RCC_OscConfig+0x186>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d001      	beq.n	8002f7a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e1d3      	b.n	8003322 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7a:	4b3b      	ldr	r3, [pc, #236]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	4937      	ldr	r1, [pc, #220]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8e:	e03a      	b.n	8003006 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d020      	beq.n	8002fda <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f98:	4b34      	ldr	r3, [pc, #208]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9e:	f7fe ffc1 	bl	8001f24 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fa6:	f7fe ffbd 	bl	8001f24 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e1b4      	b.n	8003322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb8:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc4:	4b28      	ldr	r3, [pc, #160]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4925      	ldr	r1, [pc, #148]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	600b      	str	r3, [r1, #0]
 8002fd8:	e015      	b.n	8003006 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fda:	4b24      	ldr	r3, [pc, #144]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7fe ffa0 	bl	8001f24 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fe8:	f7fe ff9c 	bl	8001f24 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e193      	b.n	8003322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffa:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d036      	beq.n	8003080 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d016      	beq.n	8003048 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800301a:	4b15      	ldr	r3, [pc, #84]	; (8003070 <HAL_RCC_OscConfig+0x27c>)
 800301c:	2201      	movs	r2, #1
 800301e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003020:	f7fe ff80 	bl	8001f24 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003028:	f7fe ff7c 	bl	8001f24 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e173      	b.n	8003322 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303a:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 800303c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f0      	beq.n	8003028 <HAL_RCC_OscConfig+0x234>
 8003046:	e01b      	b.n	8003080 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003048:	4b09      	ldr	r3, [pc, #36]	; (8003070 <HAL_RCC_OscConfig+0x27c>)
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304e:	f7fe ff69 	bl	8001f24 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003054:	e00e      	b.n	8003074 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003056:	f7fe ff65 	bl	8001f24 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d907      	bls.n	8003074 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e15c      	b.n	8003322 <HAL_RCC_OscConfig+0x52e>
 8003068:	40023800 	.word	0x40023800
 800306c:	42470000 	.word	0x42470000
 8003070:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003074:	4b8a      	ldr	r3, [pc, #552]	; (80032a0 <HAL_RCC_OscConfig+0x4ac>)
 8003076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1ea      	bne.n	8003056 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 8097 	beq.w	80031bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308e:	2300      	movs	r3, #0
 8003090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003092:	4b83      	ldr	r3, [pc, #524]	; (80032a0 <HAL_RCC_OscConfig+0x4ac>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10f      	bne.n	80030be <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	4b7f      	ldr	r3, [pc, #508]	; (80032a0 <HAL_RCC_OscConfig+0x4ac>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	4a7e      	ldr	r2, [pc, #504]	; (80032a0 <HAL_RCC_OscConfig+0x4ac>)
 80030a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ac:	6413      	str	r3, [r2, #64]	; 0x40
 80030ae:	4b7c      	ldr	r3, [pc, #496]	; (80032a0 <HAL_RCC_OscConfig+0x4ac>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ba:	2301      	movs	r3, #1
 80030bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030be:	4b79      	ldr	r3, [pc, #484]	; (80032a4 <HAL_RCC_OscConfig+0x4b0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d118      	bne.n	80030fc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ca:	4b76      	ldr	r3, [pc, #472]	; (80032a4 <HAL_RCC_OscConfig+0x4b0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a75      	ldr	r2, [pc, #468]	; (80032a4 <HAL_RCC_OscConfig+0x4b0>)
 80030d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d6:	f7fe ff25 	bl	8001f24 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030de:	f7fe ff21 	bl	8001f24 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e118      	b.n	8003322 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f0:	4b6c      	ldr	r3, [pc, #432]	; (80032a4 <HAL_RCC_OscConfig+0x4b0>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0f0      	beq.n	80030de <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d106      	bne.n	8003112 <HAL_RCC_OscConfig+0x31e>
 8003104:	4b66      	ldr	r3, [pc, #408]	; (80032a0 <HAL_RCC_OscConfig+0x4ac>)
 8003106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003108:	4a65      	ldr	r2, [pc, #404]	; (80032a0 <HAL_RCC_OscConfig+0x4ac>)
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	6713      	str	r3, [r2, #112]	; 0x70
 8003110:	e01c      	b.n	800314c <HAL_RCC_OscConfig+0x358>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2b05      	cmp	r3, #5
 8003118:	d10c      	bne.n	8003134 <HAL_RCC_OscConfig+0x340>
 800311a:	4b61      	ldr	r3, [pc, #388]	; (80032a0 <HAL_RCC_OscConfig+0x4ac>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	4a60      	ldr	r2, [pc, #384]	; (80032a0 <HAL_RCC_OscConfig+0x4ac>)
 8003120:	f043 0304 	orr.w	r3, r3, #4
 8003124:	6713      	str	r3, [r2, #112]	; 0x70
 8003126:	4b5e      	ldr	r3, [pc, #376]	; (80032a0 <HAL_RCC_OscConfig+0x4ac>)
 8003128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312a:	4a5d      	ldr	r2, [pc, #372]	; (80032a0 <HAL_RCC_OscConfig+0x4ac>)
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	6713      	str	r3, [r2, #112]	; 0x70
 8003132:	e00b      	b.n	800314c <HAL_RCC_OscConfig+0x358>
 8003134:	4b5a      	ldr	r3, [pc, #360]	; (80032a0 <HAL_RCC_OscConfig+0x4ac>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	4a59      	ldr	r2, [pc, #356]	; (80032a0 <HAL_RCC_OscConfig+0x4ac>)
 800313a:	f023 0301 	bic.w	r3, r3, #1
 800313e:	6713      	str	r3, [r2, #112]	; 0x70
 8003140:	4b57      	ldr	r3, [pc, #348]	; (80032a0 <HAL_RCC_OscConfig+0x4ac>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	4a56      	ldr	r2, [pc, #344]	; (80032a0 <HAL_RCC_OscConfig+0x4ac>)
 8003146:	f023 0304 	bic.w	r3, r3, #4
 800314a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d015      	beq.n	8003180 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003154:	f7fe fee6 	bl	8001f24 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800315a:	e00a      	b.n	8003172 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800315c:	f7fe fee2 	bl	8001f24 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	f241 3288 	movw	r2, #5000	; 0x1388
 800316a:	4293      	cmp	r3, r2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e0d7      	b.n	8003322 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003172:	4b4b      	ldr	r3, [pc, #300]	; (80032a0 <HAL_RCC_OscConfig+0x4ac>)
 8003174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0ee      	beq.n	800315c <HAL_RCC_OscConfig+0x368>
 800317e:	e014      	b.n	80031aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003180:	f7fe fed0 	bl	8001f24 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003186:	e00a      	b.n	800319e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003188:	f7fe fecc 	bl	8001f24 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	f241 3288 	movw	r2, #5000	; 0x1388
 8003196:	4293      	cmp	r3, r2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e0c1      	b.n	8003322 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800319e:	4b40      	ldr	r3, [pc, #256]	; (80032a0 <HAL_RCC_OscConfig+0x4ac>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1ee      	bne.n	8003188 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031aa:	7dfb      	ldrb	r3, [r7, #23]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d105      	bne.n	80031bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b0:	4b3b      	ldr	r3, [pc, #236]	; (80032a0 <HAL_RCC_OscConfig+0x4ac>)
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	4a3a      	ldr	r2, [pc, #232]	; (80032a0 <HAL_RCC_OscConfig+0x4ac>)
 80031b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80ad 	beq.w	8003320 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031c6:	4b36      	ldr	r3, [pc, #216]	; (80032a0 <HAL_RCC_OscConfig+0x4ac>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d060      	beq.n	8003294 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d145      	bne.n	8003266 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031da:	4b33      	ldr	r3, [pc, #204]	; (80032a8 <HAL_RCC_OscConfig+0x4b4>)
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fe fea0 	bl	8001f24 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e8:	f7fe fe9c 	bl	8001f24 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e093      	b.n	8003322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fa:	4b29      	ldr	r3, [pc, #164]	; (80032a0 <HAL_RCC_OscConfig+0x4ac>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69da      	ldr	r2, [r3, #28]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	019b      	lsls	r3, r3, #6
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	085b      	lsrs	r3, r3, #1
 800321e:	3b01      	subs	r3, #1
 8003220:	041b      	lsls	r3, r3, #16
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	061b      	lsls	r3, r3, #24
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003230:	071b      	lsls	r3, r3, #28
 8003232:	491b      	ldr	r1, [pc, #108]	; (80032a0 <HAL_RCC_OscConfig+0x4ac>)
 8003234:	4313      	orrs	r3, r2
 8003236:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003238:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <HAL_RCC_OscConfig+0x4b4>)
 800323a:	2201      	movs	r2, #1
 800323c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323e:	f7fe fe71 	bl	8001f24 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003246:	f7fe fe6d 	bl	8001f24 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e064      	b.n	8003322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003258:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <HAL_RCC_OscConfig+0x4ac>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0f0      	beq.n	8003246 <HAL_RCC_OscConfig+0x452>
 8003264:	e05c      	b.n	8003320 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003266:	4b10      	ldr	r3, [pc, #64]	; (80032a8 <HAL_RCC_OscConfig+0x4b4>)
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326c:	f7fe fe5a 	bl	8001f24 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003274:	f7fe fe56 	bl	8001f24 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e04d      	b.n	8003322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HAL_RCC_OscConfig+0x4ac>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x480>
 8003292:	e045      	b.n	8003320 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d107      	bne.n	80032ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e040      	b.n	8003322 <HAL_RCC_OscConfig+0x52e>
 80032a0:	40023800 	.word	0x40023800
 80032a4:	40007000 	.word	0x40007000
 80032a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032ac:	4b1f      	ldr	r3, [pc, #124]	; (800332c <HAL_RCC_OscConfig+0x538>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d030      	beq.n	800331c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d129      	bne.n	800331c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d122      	bne.n	800331c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032dc:	4013      	ands	r3, r2
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d119      	bne.n	800331c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f2:	085b      	lsrs	r3, r3, #1
 80032f4:	3b01      	subs	r3, #1
 80032f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d10f      	bne.n	800331c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003306:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003308:	429a      	cmp	r2, r3
 800330a:	d107      	bne.n	800331c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003318:	429a      	cmp	r2, r3
 800331a:	d001      	beq.n	8003320 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	40023800 	.word	0x40023800

08003330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e041      	b.n	80033c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7fe fafc 	bl	8001954 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3304      	adds	r3, #4
 800336c:	4619      	mov	r1, r3
 800336e:	4610      	mov	r0, r2
 8003370:	f000 fbc0 	bl	8003af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d001      	beq.n	80033e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e04e      	b.n	8003486 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a23      	ldr	r2, [pc, #140]	; (8003494 <HAL_TIM_Base_Start_IT+0xc4>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d022      	beq.n	8003450 <HAL_TIM_Base_Start_IT+0x80>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003412:	d01d      	beq.n	8003450 <HAL_TIM_Base_Start_IT+0x80>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a1f      	ldr	r2, [pc, #124]	; (8003498 <HAL_TIM_Base_Start_IT+0xc8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d018      	beq.n	8003450 <HAL_TIM_Base_Start_IT+0x80>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a1e      	ldr	r2, [pc, #120]	; (800349c <HAL_TIM_Base_Start_IT+0xcc>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d013      	beq.n	8003450 <HAL_TIM_Base_Start_IT+0x80>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1c      	ldr	r2, [pc, #112]	; (80034a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d00e      	beq.n	8003450 <HAL_TIM_Base_Start_IT+0x80>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a1b      	ldr	r2, [pc, #108]	; (80034a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d009      	beq.n	8003450 <HAL_TIM_Base_Start_IT+0x80>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a19      	ldr	r2, [pc, #100]	; (80034a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d004      	beq.n	8003450 <HAL_TIM_Base_Start_IT+0x80>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a18      	ldr	r2, [pc, #96]	; (80034ac <HAL_TIM_Base_Start_IT+0xdc>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d111      	bne.n	8003474 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2b06      	cmp	r3, #6
 8003460:	d010      	beq.n	8003484 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0201 	orr.w	r2, r2, #1
 8003470:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003472:	e007      	b.n	8003484 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40010000 	.word	0x40010000
 8003498:	40000400 	.word	0x40000400
 800349c:	40000800 	.word	0x40000800
 80034a0:	40000c00 	.word	0x40000c00
 80034a4:	40010400 	.word	0x40010400
 80034a8:	40014000 	.word	0x40014000
 80034ac:	40001800 	.word	0x40001800

080034b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e041      	b.n	8003546 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fe fa04 	bl	80018e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3304      	adds	r3, #4
 80034ec:	4619      	mov	r1, r3
 80034ee:	4610      	mov	r0, r2
 80034f0:	f000 fb00 	bl	8003af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e041      	b.n	80035e4 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d106      	bne.n	800357a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7fe f967 	bl	8001848 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2202      	movs	r2, #2
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3304      	adds	r3, #4
 800358a:	4619      	mov	r1, r3
 800358c:	4610      	mov	r0, r2
 800358e:	f000 fab1 	bl	8003af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d122      	bne.n	8003648 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b02      	cmp	r3, #2
 800360e:	d11b      	bne.n	8003648 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0202 	mvn.w	r2, #2
 8003618:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fd ffce 	bl	80015d0 <HAL_TIM_IC_CaptureCallback>
 8003634:	e005      	b.n	8003642 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fa3e 	bl	8003ab8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 fa45 	bl	8003acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	2b04      	cmp	r3, #4
 8003654:	d122      	bne.n	800369c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b04      	cmp	r3, #4
 8003662:	d11b      	bne.n	800369c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0204 	mvn.w	r2, #4
 800366c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2202      	movs	r2, #2
 8003672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fd ffa4 	bl	80015d0 <HAL_TIM_IC_CaptureCallback>
 8003688:	e005      	b.n	8003696 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fa14 	bl	8003ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 fa1b 	bl	8003acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d122      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d11b      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f06f 0208 	mvn.w	r2, #8
 80036c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2204      	movs	r2, #4
 80036c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fd ff7a 	bl	80015d0 <HAL_TIM_IC_CaptureCallback>
 80036dc:	e005      	b.n	80036ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f9ea 	bl	8003ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f9f1 	bl	8003acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f003 0310 	and.w	r3, r3, #16
 80036fa:	2b10      	cmp	r3, #16
 80036fc:	d122      	bne.n	8003744 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f003 0310 	and.w	r3, r3, #16
 8003708:	2b10      	cmp	r3, #16
 800370a:	d11b      	bne.n	8003744 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f06f 0210 	mvn.w	r2, #16
 8003714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2208      	movs	r2, #8
 800371a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fd ff50 	bl	80015d0 <HAL_TIM_IC_CaptureCallback>
 8003730:	e005      	b.n	800373e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f9c0 	bl	8003ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f9c7 	bl	8003acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b01      	cmp	r3, #1
 8003750:	d10e      	bne.n	8003770 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b01      	cmp	r3, #1
 800375e:	d107      	bne.n	8003770 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0201 	mvn.w	r2, #1
 8003768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fd ff56 	bl	800161c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377a:	2b80      	cmp	r3, #128	; 0x80
 800377c:	d10e      	bne.n	800379c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003788:	2b80      	cmp	r3, #128	; 0x80
 800378a:	d107      	bne.n	800379c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fdac 	bl	80042f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a6:	2b40      	cmp	r3, #64	; 0x40
 80037a8:	d10e      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b4:	2b40      	cmp	r3, #64	; 0x40
 80037b6:	d107      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f98c 	bl	8003ae0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b20      	cmp	r3, #32
 80037d4:	d10e      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f003 0320 	and.w	r3, r3, #32
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	d107      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0220 	mvn.w	r2, #32
 80037ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fd76 	bl	80042e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037f4:	bf00      	nop
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003812:	2b01      	cmp	r3, #1
 8003814:	d101      	bne.n	800381a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003816:	2302      	movs	r3, #2
 8003818:	e088      	b.n	800392c <HAL_TIM_IC_ConfigChannel+0x130>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d11b      	bne.n	8003860 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	6819      	ldr	r1, [r3, #0]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f000 fbac 	bl	8003f94 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699a      	ldr	r2, [r3, #24]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 020c 	bic.w	r2, r2, #12
 800384a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6999      	ldr	r1, [r3, #24]
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	619a      	str	r2, [r3, #24]
 800385e:	e060      	b.n	8003922 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b04      	cmp	r3, #4
 8003864:	d11c      	bne.n	80038a0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6818      	ldr	r0, [r3, #0]
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	6819      	ldr	r1, [r3, #0]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f000 fc01 	bl	800407c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	699a      	ldr	r2, [r3, #24]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003888:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6999      	ldr	r1, [r3, #24]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	021a      	lsls	r2, r3, #8
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	619a      	str	r2, [r3, #24]
 800389e:	e040      	b.n	8003922 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d11b      	bne.n	80038de <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	6819      	ldr	r1, [r3, #0]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f000 fc1e 	bl	80040f6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69da      	ldr	r2, [r3, #28]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 020c 	bic.w	r2, r2, #12
 80038c8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	69d9      	ldr	r1, [r3, #28]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	61da      	str	r2, [r3, #28]
 80038dc:	e021      	b.n	8003922 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b0c      	cmp	r3, #12
 80038e2:	d11c      	bne.n	800391e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6818      	ldr	r0, [r3, #0]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	6819      	ldr	r1, [r3, #0]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f000 fc3b 	bl	800416e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	69da      	ldr	r2, [r3, #28]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003906:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69d9      	ldr	r1, [r3, #28]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	021a      	lsls	r2, r3, #8
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	61da      	str	r2, [r3, #28]
 800391c:	e001      	b.n	8003922 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800392a:	7dfb      	ldrb	r3, [r7, #23]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800394e:	2302      	movs	r3, #2
 8003950:	e0ae      	b.n	8003ab0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b0c      	cmp	r3, #12
 800395e:	f200 809f 	bhi.w	8003aa0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003962:	a201      	add	r2, pc, #4	; (adr r2, 8003968 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003968:	0800399d 	.word	0x0800399d
 800396c:	08003aa1 	.word	0x08003aa1
 8003970:	08003aa1 	.word	0x08003aa1
 8003974:	08003aa1 	.word	0x08003aa1
 8003978:	080039dd 	.word	0x080039dd
 800397c:	08003aa1 	.word	0x08003aa1
 8003980:	08003aa1 	.word	0x08003aa1
 8003984:	08003aa1 	.word	0x08003aa1
 8003988:	08003a1f 	.word	0x08003a1f
 800398c:	08003aa1 	.word	0x08003aa1
 8003990:	08003aa1 	.word	0x08003aa1
 8003994:	08003aa1 	.word	0x08003aa1
 8003998:	08003a5f 	.word	0x08003a5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68b9      	ldr	r1, [r7, #8]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 f946 	bl	8003c34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0208 	orr.w	r2, r2, #8
 80039b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699a      	ldr	r2, [r3, #24]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0204 	bic.w	r2, r2, #4
 80039c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6999      	ldr	r1, [r3, #24]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	691a      	ldr	r2, [r3, #16]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	619a      	str	r2, [r3, #24]
      break;
 80039da:	e064      	b.n	8003aa6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68b9      	ldr	r1, [r7, #8]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 f996 	bl	8003d14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699a      	ldr	r2, [r3, #24]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699a      	ldr	r2, [r3, #24]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6999      	ldr	r1, [r3, #24]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	021a      	lsls	r2, r3, #8
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	619a      	str	r2, [r3, #24]
      break;
 8003a1c:	e043      	b.n	8003aa6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68b9      	ldr	r1, [r7, #8]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 f9eb 	bl	8003e00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	69da      	ldr	r2, [r3, #28]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 0208 	orr.w	r2, r2, #8
 8003a38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69da      	ldr	r2, [r3, #28]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0204 	bic.w	r2, r2, #4
 8003a48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69d9      	ldr	r1, [r3, #28]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	61da      	str	r2, [r3, #28]
      break;
 8003a5c:	e023      	b.n	8003aa6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68b9      	ldr	r1, [r7, #8]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 fa3f 	bl	8003ee8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	69da      	ldr	r2, [r3, #28]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	69da      	ldr	r2, [r3, #28]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	69d9      	ldr	r1, [r3, #28]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	021a      	lsls	r2, r3, #8
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	61da      	str	r2, [r3, #28]
      break;
 8003a9e:	e002      	b.n	8003aa6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	75fb      	strb	r3, [r7, #23]
      break;
 8003aa4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a40      	ldr	r2, [pc, #256]	; (8003c08 <TIM_Base_SetConfig+0x114>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d013      	beq.n	8003b34 <TIM_Base_SetConfig+0x40>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b12:	d00f      	beq.n	8003b34 <TIM_Base_SetConfig+0x40>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a3d      	ldr	r2, [pc, #244]	; (8003c0c <TIM_Base_SetConfig+0x118>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d00b      	beq.n	8003b34 <TIM_Base_SetConfig+0x40>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a3c      	ldr	r2, [pc, #240]	; (8003c10 <TIM_Base_SetConfig+0x11c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d007      	beq.n	8003b34 <TIM_Base_SetConfig+0x40>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a3b      	ldr	r2, [pc, #236]	; (8003c14 <TIM_Base_SetConfig+0x120>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d003      	beq.n	8003b34 <TIM_Base_SetConfig+0x40>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a3a      	ldr	r2, [pc, #232]	; (8003c18 <TIM_Base_SetConfig+0x124>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d108      	bne.n	8003b46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a2f      	ldr	r2, [pc, #188]	; (8003c08 <TIM_Base_SetConfig+0x114>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d02b      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b54:	d027      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a2c      	ldr	r2, [pc, #176]	; (8003c0c <TIM_Base_SetConfig+0x118>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d023      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a2b      	ldr	r2, [pc, #172]	; (8003c10 <TIM_Base_SetConfig+0x11c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d01f      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a2a      	ldr	r2, [pc, #168]	; (8003c14 <TIM_Base_SetConfig+0x120>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d01b      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a29      	ldr	r2, [pc, #164]	; (8003c18 <TIM_Base_SetConfig+0x124>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d017      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a28      	ldr	r2, [pc, #160]	; (8003c1c <TIM_Base_SetConfig+0x128>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d013      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a27      	ldr	r2, [pc, #156]	; (8003c20 <TIM_Base_SetConfig+0x12c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00f      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a26      	ldr	r2, [pc, #152]	; (8003c24 <TIM_Base_SetConfig+0x130>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00b      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a25      	ldr	r2, [pc, #148]	; (8003c28 <TIM_Base_SetConfig+0x134>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d007      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a24      	ldr	r2, [pc, #144]	; (8003c2c <TIM_Base_SetConfig+0x138>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d003      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a23      	ldr	r2, [pc, #140]	; (8003c30 <TIM_Base_SetConfig+0x13c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d108      	bne.n	8003bb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a0a      	ldr	r2, [pc, #40]	; (8003c08 <TIM_Base_SetConfig+0x114>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d003      	beq.n	8003bec <TIM_Base_SetConfig+0xf8>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a0c      	ldr	r2, [pc, #48]	; (8003c18 <TIM_Base_SetConfig+0x124>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d103      	bne.n	8003bf4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	615a      	str	r2, [r3, #20]
}
 8003bfa:	bf00      	nop
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	40010000 	.word	0x40010000
 8003c0c:	40000400 	.word	0x40000400
 8003c10:	40000800 	.word	0x40000800
 8003c14:	40000c00 	.word	0x40000c00
 8003c18:	40010400 	.word	0x40010400
 8003c1c:	40014000 	.word	0x40014000
 8003c20:	40014400 	.word	0x40014400
 8003c24:	40014800 	.word	0x40014800
 8003c28:	40001800 	.word	0x40001800
 8003c2c:	40001c00 	.word	0x40001c00
 8003c30:	40002000 	.word	0x40002000

08003c34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	f023 0201 	bic.w	r2, r3, #1
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0303 	bic.w	r3, r3, #3
 8003c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f023 0302 	bic.w	r3, r3, #2
 8003c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a20      	ldr	r2, [pc, #128]	; (8003d0c <TIM_OC1_SetConfig+0xd8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d003      	beq.n	8003c98 <TIM_OC1_SetConfig+0x64>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a1f      	ldr	r2, [pc, #124]	; (8003d10 <TIM_OC1_SetConfig+0xdc>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d10c      	bne.n	8003cb2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f023 0308 	bic.w	r3, r3, #8
 8003c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f023 0304 	bic.w	r3, r3, #4
 8003cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a15      	ldr	r2, [pc, #84]	; (8003d0c <TIM_OC1_SetConfig+0xd8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d003      	beq.n	8003cc2 <TIM_OC1_SetConfig+0x8e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a14      	ldr	r2, [pc, #80]	; (8003d10 <TIM_OC1_SetConfig+0xdc>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d111      	bne.n	8003ce6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	621a      	str	r2, [r3, #32]
}
 8003d00:	bf00      	nop
 8003d02:	371c      	adds	r7, #28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	40010000 	.word	0x40010000
 8003d10:	40010400 	.word	0x40010400

08003d14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	f023 0210 	bic.w	r2, r3, #16
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	021b      	lsls	r3, r3, #8
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f023 0320 	bic.w	r3, r3, #32
 8003d5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a22      	ldr	r2, [pc, #136]	; (8003df8 <TIM_OC2_SetConfig+0xe4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d003      	beq.n	8003d7c <TIM_OC2_SetConfig+0x68>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a21      	ldr	r2, [pc, #132]	; (8003dfc <TIM_OC2_SetConfig+0xe8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d10d      	bne.n	8003d98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a17      	ldr	r2, [pc, #92]	; (8003df8 <TIM_OC2_SetConfig+0xe4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d003      	beq.n	8003da8 <TIM_OC2_SetConfig+0x94>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a16      	ldr	r2, [pc, #88]	; (8003dfc <TIM_OC2_SetConfig+0xe8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d113      	bne.n	8003dd0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003db6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	621a      	str	r2, [r3, #32]
}
 8003dea:	bf00      	nop
 8003dec:	371c      	adds	r7, #28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40010000 	.word	0x40010000
 8003dfc:	40010400 	.word	0x40010400

08003e00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 0303 	bic.w	r3, r3, #3
 8003e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	021b      	lsls	r3, r3, #8
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a21      	ldr	r2, [pc, #132]	; (8003ee0 <TIM_OC3_SetConfig+0xe0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d003      	beq.n	8003e66 <TIM_OC3_SetConfig+0x66>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a20      	ldr	r2, [pc, #128]	; (8003ee4 <TIM_OC3_SetConfig+0xe4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d10d      	bne.n	8003e82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	021b      	lsls	r3, r3, #8
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a16      	ldr	r2, [pc, #88]	; (8003ee0 <TIM_OC3_SetConfig+0xe0>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d003      	beq.n	8003e92 <TIM_OC3_SetConfig+0x92>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a15      	ldr	r2, [pc, #84]	; (8003ee4 <TIM_OC3_SetConfig+0xe4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d113      	bne.n	8003eba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	621a      	str	r2, [r3, #32]
}
 8003ed4:	bf00      	nop
 8003ed6:	371c      	adds	r7, #28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	40010000 	.word	0x40010000
 8003ee4:	40010400 	.word	0x40010400

08003ee8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	031b      	lsls	r3, r3, #12
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a12      	ldr	r2, [pc, #72]	; (8003f8c <TIM_OC4_SetConfig+0xa4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d003      	beq.n	8003f50 <TIM_OC4_SetConfig+0x68>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a11      	ldr	r2, [pc, #68]	; (8003f90 <TIM_OC4_SetConfig+0xa8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d109      	bne.n	8003f64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	019b      	lsls	r3, r3, #6
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	621a      	str	r2, [r3, #32]
}
 8003f7e:	bf00      	nop
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40010000 	.word	0x40010000
 8003f90:	40010400 	.word	0x40010400

08003f94 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	f023 0201 	bic.w	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4a28      	ldr	r2, [pc, #160]	; (8004060 <TIM_TI1_SetConfig+0xcc>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d01b      	beq.n	8003ffa <TIM_TI1_SetConfig+0x66>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc8:	d017      	beq.n	8003ffa <TIM_TI1_SetConfig+0x66>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4a25      	ldr	r2, [pc, #148]	; (8004064 <TIM_TI1_SetConfig+0xd0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d013      	beq.n	8003ffa <TIM_TI1_SetConfig+0x66>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4a24      	ldr	r2, [pc, #144]	; (8004068 <TIM_TI1_SetConfig+0xd4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00f      	beq.n	8003ffa <TIM_TI1_SetConfig+0x66>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4a23      	ldr	r2, [pc, #140]	; (800406c <TIM_TI1_SetConfig+0xd8>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00b      	beq.n	8003ffa <TIM_TI1_SetConfig+0x66>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4a22      	ldr	r2, [pc, #136]	; (8004070 <TIM_TI1_SetConfig+0xdc>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d007      	beq.n	8003ffa <TIM_TI1_SetConfig+0x66>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4a21      	ldr	r2, [pc, #132]	; (8004074 <TIM_TI1_SetConfig+0xe0>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d003      	beq.n	8003ffa <TIM_TI1_SetConfig+0x66>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4a20      	ldr	r2, [pc, #128]	; (8004078 <TIM_TI1_SetConfig+0xe4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d101      	bne.n	8003ffe <TIM_TI1_SetConfig+0x6a>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e000      	b.n	8004000 <TIM_TI1_SetConfig+0x6c>
 8003ffe:	2300      	movs	r3, #0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f023 0303 	bic.w	r3, r3, #3
 800400a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	e003      	b.n	800401e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f043 0301 	orr.w	r3, r3, #1
 800401c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004024:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	b2db      	uxtb	r3, r3
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f023 030a 	bic.w	r3, r3, #10
 8004038:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	f003 030a 	and.w	r3, r3, #10
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	4313      	orrs	r3, r2
 8004044:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	621a      	str	r2, [r3, #32]
}
 8004052:	bf00      	nop
 8004054:	371c      	adds	r7, #28
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40010000 	.word	0x40010000
 8004064:	40000400 	.word	0x40000400
 8004068:	40000800 	.word	0x40000800
 800406c:	40000c00 	.word	0x40000c00
 8004070:	40010400 	.word	0x40010400
 8004074:	40014000 	.word	0x40014000
 8004078:	40001800 	.word	0x40001800

0800407c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
 8004088:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	f023 0210 	bic.w	r2, r3, #16
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	021b      	lsls	r3, r3, #8
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	031b      	lsls	r3, r3, #12
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040ce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	621a      	str	r2, [r3, #32]
}
 80040ea:	bf00      	nop
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b087      	sub	sp, #28
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	607a      	str	r2, [r7, #4]
 8004102:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f023 0303 	bic.w	r3, r3, #3
 8004122:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004132:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	b2db      	uxtb	r3, r3
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004146:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	021b      	lsls	r3, r3, #8
 800414c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	4313      	orrs	r3, r2
 8004154:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	621a      	str	r2, [r3, #32]
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800416e:	b480      	push	{r7}
 8004170:	b087      	sub	sp, #28
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800419a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	031b      	lsls	r3, r3, #12
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80041c0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	031b      	lsls	r3, r3, #12
 80041c6:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	621a      	str	r2, [r3, #32]
}
 80041dc:	bf00      	nop
 80041de:	371c      	adds	r7, #28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d101      	bne.n	8004200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041fc:	2302      	movs	r3, #2
 80041fe:	e05a      	b.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004226:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	4313      	orrs	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a21      	ldr	r2, [pc, #132]	; (80042c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d022      	beq.n	800428a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424c:	d01d      	beq.n	800428a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a1d      	ldr	r2, [pc, #116]	; (80042c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d018      	beq.n	800428a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a1b      	ldr	r2, [pc, #108]	; (80042cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d013      	beq.n	800428a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a1a      	ldr	r2, [pc, #104]	; (80042d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d00e      	beq.n	800428a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a18      	ldr	r2, [pc, #96]	; (80042d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d009      	beq.n	800428a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a17      	ldr	r2, [pc, #92]	; (80042d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d004      	beq.n	800428a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a15      	ldr	r2, [pc, #84]	; (80042dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d10c      	bne.n	80042a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004290:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	4313      	orrs	r3, r2
 800429a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	40010000 	.word	0x40010000
 80042c8:	40000400 	.word	0x40000400
 80042cc:	40000800 	.word	0x40000800
 80042d0:	40000c00 	.word	0x40000c00
 80042d4:	40010400 	.word	0x40010400
 80042d8:	40014000 	.word	0x40014000
 80042dc:	40001800 	.word	0x40001800

080042e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e03f      	b.n	800439a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7fd fbb2 	bl	8001a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2224      	movs	r2, #36	; 0x24
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800434a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 fc7b 	bl	8004c48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004360:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	695a      	ldr	r2, [r3, #20]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004370:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68da      	ldr	r2, [r3, #12]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004380:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2220      	movs	r2, #32
 8004394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b0ba      	sub	sp, #232	; 0xe8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80043e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10f      	bne.n	800440a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ee:	f003 0320 	and.w	r3, r3, #32
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <HAL_UART_IRQHandler+0x66>
 80043f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fb65 	bl	8004ad2 <UART_Receive_IT>
      return;
 8004408:	e256      	b.n	80048b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800440a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 80de 	beq.w	80045d0 <HAL_UART_IRQHandler+0x22c>
 8004414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d106      	bne.n	800442e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004424:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 80d1 	beq.w	80045d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800442e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00b      	beq.n	8004452 <HAL_UART_IRQHandler+0xae>
 800443a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800443e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004442:	2b00      	cmp	r3, #0
 8004444:	d005      	beq.n	8004452 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	f043 0201 	orr.w	r2, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00b      	beq.n	8004476 <HAL_UART_IRQHandler+0xd2>
 800445e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d005      	beq.n	8004476 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	f043 0202 	orr.w	r2, r3, #2
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00b      	beq.n	800449a <HAL_UART_IRQHandler+0xf6>
 8004482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d005      	beq.n	800449a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	f043 0204 	orr.w	r2, r3, #4
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800449a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d011      	beq.n	80044ca <HAL_UART_IRQHandler+0x126>
 80044a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d105      	bne.n	80044be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80044b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d005      	beq.n	80044ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	f043 0208 	orr.w	r2, r3, #8
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 81ed 	beq.w	80048ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d008      	beq.n	80044f2 <HAL_UART_IRQHandler+0x14e>
 80044e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 faf0 	bl	8004ad2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fc:	2b40      	cmp	r3, #64	; 0x40
 80044fe:	bf0c      	ite	eq
 8004500:	2301      	moveq	r3, #1
 8004502:	2300      	movne	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b00      	cmp	r3, #0
 8004514:	d103      	bne.n	800451e <HAL_UART_IRQHandler+0x17a>
 8004516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800451a:	2b00      	cmp	r3, #0
 800451c:	d04f      	beq.n	80045be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f9f8 	bl	8004914 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452e:	2b40      	cmp	r3, #64	; 0x40
 8004530:	d141      	bne.n	80045b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3314      	adds	r3, #20
 8004538:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004540:	e853 3f00 	ldrex	r3, [r3]
 8004544:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004548:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800454c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004550:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3314      	adds	r3, #20
 800455a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800455e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004562:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004566:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800456a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800456e:	e841 2300 	strex	r3, r2, [r1]
 8004572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1d9      	bne.n	8004532 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004582:	2b00      	cmp	r3, #0
 8004584:	d013      	beq.n	80045ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458a:	4a7d      	ldr	r2, [pc, #500]	; (8004780 <HAL_UART_IRQHandler+0x3dc>)
 800458c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004592:	4618      	mov	r0, r3
 8004594:	f7fd fe24 	bl	80021e0 <HAL_DMA_Abort_IT>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d016      	beq.n	80045cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045a8:	4610      	mov	r0, r2
 80045aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ac:	e00e      	b.n	80045cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f99a 	bl	80048e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b4:	e00a      	b.n	80045cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f996 	bl	80048e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045bc:	e006      	b.n	80045cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f992 	bl	80048e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80045ca:	e170      	b.n	80048ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045cc:	bf00      	nop
    return;
 80045ce:	e16e      	b.n	80048ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	f040 814a 	bne.w	800486e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80045da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045de:	f003 0310 	and.w	r3, r3, #16
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 8143 	beq.w	800486e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80045e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ec:	f003 0310 	and.w	r3, r3, #16
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 813c 	beq.w	800486e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045f6:	2300      	movs	r3, #0
 80045f8:	60bb      	str	r3, [r7, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	60bb      	str	r3, [r7, #8]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	60bb      	str	r3, [r7, #8]
 800460a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004616:	2b40      	cmp	r3, #64	; 0x40
 8004618:	f040 80b4 	bne.w	8004784 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004628:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 8140 	beq.w	80048b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800463a:	429a      	cmp	r2, r3
 800463c:	f080 8139 	bcs.w	80048b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004646:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004652:	f000 8088 	beq.w	8004766 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	330c      	adds	r3, #12
 800465c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004660:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004664:	e853 3f00 	ldrex	r3, [r3]
 8004668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800466c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004674:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	330c      	adds	r3, #12
 800467e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004682:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800468e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004692:	e841 2300 	strex	r3, r2, [r1]
 8004696:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800469a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1d9      	bne.n	8004656 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3314      	adds	r3, #20
 80046a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046ac:	e853 3f00 	ldrex	r3, [r3]
 80046b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80046b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046b4:	f023 0301 	bic.w	r3, r3, #1
 80046b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3314      	adds	r3, #20
 80046c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80046ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80046d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e1      	bne.n	80046a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3314      	adds	r3, #20
 80046e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046e8:	e853 3f00 	ldrex	r3, [r3]
 80046ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80046ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3314      	adds	r3, #20
 80046fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004702:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004704:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004708:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e3      	bne.n	80046de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	330c      	adds	r3, #12
 800472a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800472e:	e853 3f00 	ldrex	r3, [r3]
 8004732:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004736:	f023 0310 	bic.w	r3, r3, #16
 800473a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	330c      	adds	r3, #12
 8004744:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004748:	65ba      	str	r2, [r7, #88]	; 0x58
 800474a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800474e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004750:	e841 2300 	strex	r3, r2, [r1]
 8004754:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e3      	bne.n	8004724 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004760:	4618      	mov	r0, r3
 8004762:	f7fd fccd 	bl	8002100 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800476e:	b29b      	uxth	r3, r3
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	b29b      	uxth	r3, r3
 8004774:	4619      	mov	r1, r3
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f8c0 	bl	80048fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800477c:	e099      	b.n	80048b2 <HAL_UART_IRQHandler+0x50e>
 800477e:	bf00      	nop
 8004780:	080049db 	.word	0x080049db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800478c:	b29b      	uxth	r3, r3
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 808b 	beq.w	80048b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80047a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 8086 	beq.w	80048b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	330c      	adds	r3, #12
 80047b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b4:	e853 3f00 	ldrex	r3, [r3]
 80047b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	330c      	adds	r3, #12
 80047ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80047ce:	647a      	str	r2, [r7, #68]	; 0x44
 80047d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047d6:	e841 2300 	strex	r3, r2, [r1]
 80047da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1e3      	bne.n	80047aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3314      	adds	r3, #20
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	e853 3f00 	ldrex	r3, [r3]
 80047f0:	623b      	str	r3, [r7, #32]
   return(result);
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	3314      	adds	r3, #20
 8004802:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004806:	633a      	str	r2, [r7, #48]	; 0x30
 8004808:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800480c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800480e:	e841 2300 	strex	r3, r2, [r1]
 8004812:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1e3      	bne.n	80047e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	330c      	adds	r3, #12
 800482e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	e853 3f00 	ldrex	r3, [r3]
 8004836:	60fb      	str	r3, [r7, #12]
   return(result);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0310 	bic.w	r3, r3, #16
 800483e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	330c      	adds	r3, #12
 8004848:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800484c:	61fa      	str	r2, [r7, #28]
 800484e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	69b9      	ldr	r1, [r7, #24]
 8004852:	69fa      	ldr	r2, [r7, #28]
 8004854:	e841 2300 	strex	r3, r2, [r1]
 8004858:	617b      	str	r3, [r7, #20]
   return(result);
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e3      	bne.n	8004828 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004860:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004864:	4619      	mov	r1, r3
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f848 	bl	80048fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800486c:	e023      	b.n	80048b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800486e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004876:	2b00      	cmp	r3, #0
 8004878:	d009      	beq.n	800488e <HAL_UART_IRQHandler+0x4ea>
 800487a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800487e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f8bb 	bl	8004a02 <UART_Transmit_IT>
    return;
 800488c:	e014      	b.n	80048b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800488e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00e      	beq.n	80048b8 <HAL_UART_IRQHandler+0x514>
 800489a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800489e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d008      	beq.n	80048b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f8fb 	bl	8004aa2 <UART_EndTransmit_IT>
    return;
 80048ac:	e004      	b.n	80048b8 <HAL_UART_IRQHandler+0x514>
    return;
 80048ae:	bf00      	nop
 80048b0:	e002      	b.n	80048b8 <HAL_UART_IRQHandler+0x514>
      return;
 80048b2:	bf00      	nop
 80048b4:	e000      	b.n	80048b8 <HAL_UART_IRQHandler+0x514>
      return;
 80048b6:	bf00      	nop
  }
}
 80048b8:	37e8      	adds	r7, #232	; 0xe8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop

080048c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004914:	b480      	push	{r7}
 8004916:	b095      	sub	sp, #84	; 0x54
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	330c      	adds	r3, #12
 8004922:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004926:	e853 3f00 	ldrex	r3, [r3]
 800492a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800492c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	330c      	adds	r3, #12
 800493a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800493c:	643a      	str	r2, [r7, #64]	; 0x40
 800493e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004940:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004942:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004944:	e841 2300 	strex	r3, r2, [r1]
 8004948:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800494a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1e5      	bne.n	800491c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3314      	adds	r3, #20
 8004956:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	e853 3f00 	ldrex	r3, [r3]
 800495e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	f023 0301 	bic.w	r3, r3, #1
 8004966:	64bb      	str	r3, [r7, #72]	; 0x48
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3314      	adds	r3, #20
 800496e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004970:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004972:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004974:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004978:	e841 2300 	strex	r3, r2, [r1]
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e5      	bne.n	8004950 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004988:	2b01      	cmp	r3, #1
 800498a:	d119      	bne.n	80049c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	330c      	adds	r3, #12
 8004992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	e853 3f00 	ldrex	r3, [r3]
 800499a:	60bb      	str	r3, [r7, #8]
   return(result);
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f023 0310 	bic.w	r3, r3, #16
 80049a2:	647b      	str	r3, [r7, #68]	; 0x44
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	330c      	adds	r3, #12
 80049aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049ac:	61ba      	str	r2, [r7, #24]
 80049ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	6979      	ldr	r1, [r7, #20]
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	e841 2300 	strex	r3, r2, [r1]
 80049b8:	613b      	str	r3, [r7, #16]
   return(result);
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e5      	bne.n	800498c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80049ce:	bf00      	nop
 80049d0:	3754      	adds	r7, #84	; 0x54
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b084      	sub	sp, #16
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f7ff ff77 	bl	80048e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049fa:	bf00      	nop
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b085      	sub	sp, #20
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b21      	cmp	r3, #33	; 0x21
 8004a14:	d13e      	bne.n	8004a94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a1e:	d114      	bne.n	8004a4a <UART_Transmit_IT+0x48>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d110      	bne.n	8004a4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	1c9a      	adds	r2, r3, #2
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	621a      	str	r2, [r3, #32]
 8004a48:	e008      	b.n	8004a5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	1c59      	adds	r1, r3, #1
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6211      	str	r1, [r2, #32]
 8004a54:	781a      	ldrb	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	3b01      	subs	r3, #1
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	4619      	mov	r1, r3
 8004a6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10f      	bne.n	8004a90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a90:	2300      	movs	r3, #0
 8004a92:	e000      	b.n	8004a96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a94:	2302      	movs	r3, #2
  }
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b082      	sub	sp, #8
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ab8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2220      	movs	r2, #32
 8004abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff fefc 	bl	80048c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b08c      	sub	sp, #48	; 0x30
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b22      	cmp	r3, #34	; 0x22
 8004ae4:	f040 80ab 	bne.w	8004c3e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af0:	d117      	bne.n	8004b22 <UART_Receive_IT+0x50>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d113      	bne.n	8004b22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1a:	1c9a      	adds	r2, r3, #2
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	629a      	str	r2, [r3, #40]	; 0x28
 8004b20:	e026      	b.n	8004b70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b34:	d007      	beq.n	8004b46 <UART_Receive_IT+0x74>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10a      	bne.n	8004b54 <UART_Receive_IT+0x82>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d106      	bne.n	8004b54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b50:	701a      	strb	r2, [r3, #0]
 8004b52:	e008      	b.n	8004b66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d15a      	bne.n	8004c3a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0220 	bic.w	r2, r2, #32
 8004b92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ba2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	695a      	ldr	r2, [r3, #20]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0201 	bic.w	r2, r2, #1
 8004bb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d135      	bne.n	8004c30 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	330c      	adds	r3, #12
 8004bd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	e853 3f00 	ldrex	r3, [r3]
 8004bd8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	f023 0310 	bic.w	r3, r3, #16
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	330c      	adds	r3, #12
 8004be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bea:	623a      	str	r2, [r7, #32]
 8004bec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bee:	69f9      	ldr	r1, [r7, #28]
 8004bf0:	6a3a      	ldr	r2, [r7, #32]
 8004bf2:	e841 2300 	strex	r3, r2, [r1]
 8004bf6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1e5      	bne.n	8004bca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0310 	and.w	r3, r3, #16
 8004c08:	2b10      	cmp	r3, #16
 8004c0a:	d10a      	bne.n	8004c22 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c26:	4619      	mov	r1, r3
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff fe67 	bl	80048fc <HAL_UARTEx_RxEventCallback>
 8004c2e:	e002      	b.n	8004c36 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7ff fe4f 	bl	80048d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	e002      	b.n	8004c40 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	e000      	b.n	8004c40 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004c3e:	2302      	movs	r3, #2
  }
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3730      	adds	r7, #48	; 0x30
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c4c:	b0c0      	sub	sp, #256	; 0x100
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c64:	68d9      	ldr	r1, [r3, #12]
 8004c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	ea40 0301 	orr.w	r3, r0, r1
 8004c70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	431a      	orrs	r2, r3
 8004c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ca0:	f021 010c 	bic.w	r1, r1, #12
 8004ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004cae:	430b      	orrs	r3, r1
 8004cb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc2:	6999      	ldr	r1, [r3, #24]
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	ea40 0301 	orr.w	r3, r0, r1
 8004cce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	4b8f      	ldr	r3, [pc, #572]	; (8004f14 <UART_SetConfig+0x2cc>)
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d005      	beq.n	8004ce8 <UART_SetConfig+0xa0>
 8004cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4b8d      	ldr	r3, [pc, #564]	; (8004f18 <UART_SetConfig+0x2d0>)
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d104      	bne.n	8004cf2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ce8:	f7fd fe94 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 8004cec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004cf0:	e003      	b.n	8004cfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cf2:	f7fd fe7b 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8004cf6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d04:	f040 810c 	bne.w	8004f20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d1a:	4622      	mov	r2, r4
 8004d1c:	462b      	mov	r3, r5
 8004d1e:	1891      	adds	r1, r2, r2
 8004d20:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d22:	415b      	adcs	r3, r3
 8004d24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d2a:	4621      	mov	r1, r4
 8004d2c:	eb12 0801 	adds.w	r8, r2, r1
 8004d30:	4629      	mov	r1, r5
 8004d32:	eb43 0901 	adc.w	r9, r3, r1
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	f04f 0300 	mov.w	r3, #0
 8004d3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d4a:	4690      	mov	r8, r2
 8004d4c:	4699      	mov	r9, r3
 8004d4e:	4623      	mov	r3, r4
 8004d50:	eb18 0303 	adds.w	r3, r8, r3
 8004d54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d58:	462b      	mov	r3, r5
 8004d5a:	eb49 0303 	adc.w	r3, r9, r3
 8004d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d76:	460b      	mov	r3, r1
 8004d78:	18db      	adds	r3, r3, r3
 8004d7a:	653b      	str	r3, [r7, #80]	; 0x50
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	eb42 0303 	adc.w	r3, r2, r3
 8004d82:	657b      	str	r3, [r7, #84]	; 0x54
 8004d84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d8c:	f7fb fe7e 	bl	8000a8c <__aeabi_uldivmod>
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4b61      	ldr	r3, [pc, #388]	; (8004f1c <UART_SetConfig+0x2d4>)
 8004d96:	fba3 2302 	umull	r2, r3, r3, r2
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	011c      	lsls	r4, r3, #4
 8004d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004da2:	2200      	movs	r2, #0
 8004da4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004da8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004dac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004db0:	4642      	mov	r2, r8
 8004db2:	464b      	mov	r3, r9
 8004db4:	1891      	adds	r1, r2, r2
 8004db6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004db8:	415b      	adcs	r3, r3
 8004dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004dc0:	4641      	mov	r1, r8
 8004dc2:	eb12 0a01 	adds.w	sl, r2, r1
 8004dc6:	4649      	mov	r1, r9
 8004dc8:	eb43 0b01 	adc.w	fp, r3, r1
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004dd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ddc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004de0:	4692      	mov	sl, r2
 8004de2:	469b      	mov	fp, r3
 8004de4:	4643      	mov	r3, r8
 8004de6:	eb1a 0303 	adds.w	r3, sl, r3
 8004dea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dee:	464b      	mov	r3, r9
 8004df0:	eb4b 0303 	adc.w	r3, fp, r3
 8004df4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	18db      	adds	r3, r3, r3
 8004e10:	643b      	str	r3, [r7, #64]	; 0x40
 8004e12:	4613      	mov	r3, r2
 8004e14:	eb42 0303 	adc.w	r3, r2, r3
 8004e18:	647b      	str	r3, [r7, #68]	; 0x44
 8004e1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e22:	f7fb fe33 	bl	8000a8c <__aeabi_uldivmod>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	4b3b      	ldr	r3, [pc, #236]	; (8004f1c <UART_SetConfig+0x2d4>)
 8004e2e:	fba3 2301 	umull	r2, r3, r3, r1
 8004e32:	095b      	lsrs	r3, r3, #5
 8004e34:	2264      	movs	r2, #100	; 0x64
 8004e36:	fb02 f303 	mul.w	r3, r2, r3
 8004e3a:	1acb      	subs	r3, r1, r3
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e42:	4b36      	ldr	r3, [pc, #216]	; (8004f1c <UART_SetConfig+0x2d4>)
 8004e44:	fba3 2302 	umull	r2, r3, r3, r2
 8004e48:	095b      	lsrs	r3, r3, #5
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e50:	441c      	add	r4, r3
 8004e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e56:	2200      	movs	r2, #0
 8004e58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e64:	4642      	mov	r2, r8
 8004e66:	464b      	mov	r3, r9
 8004e68:	1891      	adds	r1, r2, r2
 8004e6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e6c:	415b      	adcs	r3, r3
 8004e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e74:	4641      	mov	r1, r8
 8004e76:	1851      	adds	r1, r2, r1
 8004e78:	6339      	str	r1, [r7, #48]	; 0x30
 8004e7a:	4649      	mov	r1, r9
 8004e7c:	414b      	adcs	r3, r1
 8004e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	f04f 0300 	mov.w	r3, #0
 8004e88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e8c:	4659      	mov	r1, fp
 8004e8e:	00cb      	lsls	r3, r1, #3
 8004e90:	4651      	mov	r1, sl
 8004e92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e96:	4651      	mov	r1, sl
 8004e98:	00ca      	lsls	r2, r1, #3
 8004e9a:	4610      	mov	r0, r2
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	4642      	mov	r2, r8
 8004ea2:	189b      	adds	r3, r3, r2
 8004ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ea8:	464b      	mov	r3, r9
 8004eaa:	460a      	mov	r2, r1
 8004eac:	eb42 0303 	adc.w	r3, r2, r3
 8004eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ec0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ec4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ec8:	460b      	mov	r3, r1
 8004eca:	18db      	adds	r3, r3, r3
 8004ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ece:	4613      	mov	r3, r2
 8004ed0:	eb42 0303 	adc.w	r3, r2, r3
 8004ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ed6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004eda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ede:	f7fb fdd5 	bl	8000a8c <__aeabi_uldivmod>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	4b0d      	ldr	r3, [pc, #52]	; (8004f1c <UART_SetConfig+0x2d4>)
 8004ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8004eec:	095b      	lsrs	r3, r3, #5
 8004eee:	2164      	movs	r1, #100	; 0x64
 8004ef0:	fb01 f303 	mul.w	r3, r1, r3
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	3332      	adds	r3, #50	; 0x32
 8004efa:	4a08      	ldr	r2, [pc, #32]	; (8004f1c <UART_SetConfig+0x2d4>)
 8004efc:	fba2 2303 	umull	r2, r3, r2, r3
 8004f00:	095b      	lsrs	r3, r3, #5
 8004f02:	f003 0207 	and.w	r2, r3, #7
 8004f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4422      	add	r2, r4
 8004f0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f10:	e106      	b.n	8005120 <UART_SetConfig+0x4d8>
 8004f12:	bf00      	nop
 8004f14:	40011000 	.word	0x40011000
 8004f18:	40011400 	.word	0x40011400
 8004f1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f24:	2200      	movs	r2, #0
 8004f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f32:	4642      	mov	r2, r8
 8004f34:	464b      	mov	r3, r9
 8004f36:	1891      	adds	r1, r2, r2
 8004f38:	6239      	str	r1, [r7, #32]
 8004f3a:	415b      	adcs	r3, r3
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f42:	4641      	mov	r1, r8
 8004f44:	1854      	adds	r4, r2, r1
 8004f46:	4649      	mov	r1, r9
 8004f48:	eb43 0501 	adc.w	r5, r3, r1
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	f04f 0300 	mov.w	r3, #0
 8004f54:	00eb      	lsls	r3, r5, #3
 8004f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f5a:	00e2      	lsls	r2, r4, #3
 8004f5c:	4614      	mov	r4, r2
 8004f5e:	461d      	mov	r5, r3
 8004f60:	4643      	mov	r3, r8
 8004f62:	18e3      	adds	r3, r4, r3
 8004f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f68:	464b      	mov	r3, r9
 8004f6a:	eb45 0303 	adc.w	r3, r5, r3
 8004f6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	f04f 0300 	mov.w	r3, #0
 8004f8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f8e:	4629      	mov	r1, r5
 8004f90:	008b      	lsls	r3, r1, #2
 8004f92:	4621      	mov	r1, r4
 8004f94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f98:	4621      	mov	r1, r4
 8004f9a:	008a      	lsls	r2, r1, #2
 8004f9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004fa0:	f7fb fd74 	bl	8000a8c <__aeabi_uldivmod>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4b60      	ldr	r3, [pc, #384]	; (800512c <UART_SetConfig+0x4e4>)
 8004faa:	fba3 2302 	umull	r2, r3, r3, r2
 8004fae:	095b      	lsrs	r3, r3, #5
 8004fb0:	011c      	lsls	r4, r3, #4
 8004fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004fbc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004fc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004fc4:	4642      	mov	r2, r8
 8004fc6:	464b      	mov	r3, r9
 8004fc8:	1891      	adds	r1, r2, r2
 8004fca:	61b9      	str	r1, [r7, #24]
 8004fcc:	415b      	adcs	r3, r3
 8004fce:	61fb      	str	r3, [r7, #28]
 8004fd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fd4:	4641      	mov	r1, r8
 8004fd6:	1851      	adds	r1, r2, r1
 8004fd8:	6139      	str	r1, [r7, #16]
 8004fda:	4649      	mov	r1, r9
 8004fdc:	414b      	adcs	r3, r1
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	f04f 0300 	mov.w	r3, #0
 8004fe8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fec:	4659      	mov	r1, fp
 8004fee:	00cb      	lsls	r3, r1, #3
 8004ff0:	4651      	mov	r1, sl
 8004ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ff6:	4651      	mov	r1, sl
 8004ff8:	00ca      	lsls	r2, r1, #3
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4603      	mov	r3, r0
 8005000:	4642      	mov	r2, r8
 8005002:	189b      	adds	r3, r3, r2
 8005004:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005008:	464b      	mov	r3, r9
 800500a:	460a      	mov	r2, r1
 800500c:	eb42 0303 	adc.w	r3, r2, r3
 8005010:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	67bb      	str	r3, [r7, #120]	; 0x78
 800501e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005020:	f04f 0200 	mov.w	r2, #0
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800502c:	4649      	mov	r1, r9
 800502e:	008b      	lsls	r3, r1, #2
 8005030:	4641      	mov	r1, r8
 8005032:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005036:	4641      	mov	r1, r8
 8005038:	008a      	lsls	r2, r1, #2
 800503a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800503e:	f7fb fd25 	bl	8000a8c <__aeabi_uldivmod>
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	4611      	mov	r1, r2
 8005048:	4b38      	ldr	r3, [pc, #224]	; (800512c <UART_SetConfig+0x4e4>)
 800504a:	fba3 2301 	umull	r2, r3, r3, r1
 800504e:	095b      	lsrs	r3, r3, #5
 8005050:	2264      	movs	r2, #100	; 0x64
 8005052:	fb02 f303 	mul.w	r3, r2, r3
 8005056:	1acb      	subs	r3, r1, r3
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	3332      	adds	r3, #50	; 0x32
 800505c:	4a33      	ldr	r2, [pc, #204]	; (800512c <UART_SetConfig+0x4e4>)
 800505e:	fba2 2303 	umull	r2, r3, r2, r3
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005068:	441c      	add	r4, r3
 800506a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800506e:	2200      	movs	r2, #0
 8005070:	673b      	str	r3, [r7, #112]	; 0x70
 8005072:	677a      	str	r2, [r7, #116]	; 0x74
 8005074:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005078:	4642      	mov	r2, r8
 800507a:	464b      	mov	r3, r9
 800507c:	1891      	adds	r1, r2, r2
 800507e:	60b9      	str	r1, [r7, #8]
 8005080:	415b      	adcs	r3, r3
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005088:	4641      	mov	r1, r8
 800508a:	1851      	adds	r1, r2, r1
 800508c:	6039      	str	r1, [r7, #0]
 800508e:	4649      	mov	r1, r9
 8005090:	414b      	adcs	r3, r1
 8005092:	607b      	str	r3, [r7, #4]
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	f04f 0300 	mov.w	r3, #0
 800509c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050a0:	4659      	mov	r1, fp
 80050a2:	00cb      	lsls	r3, r1, #3
 80050a4:	4651      	mov	r1, sl
 80050a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050aa:	4651      	mov	r1, sl
 80050ac:	00ca      	lsls	r2, r1, #3
 80050ae:	4610      	mov	r0, r2
 80050b0:	4619      	mov	r1, r3
 80050b2:	4603      	mov	r3, r0
 80050b4:	4642      	mov	r2, r8
 80050b6:	189b      	adds	r3, r3, r2
 80050b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80050ba:	464b      	mov	r3, r9
 80050bc:	460a      	mov	r2, r1
 80050be:	eb42 0303 	adc.w	r3, r2, r3
 80050c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	663b      	str	r3, [r7, #96]	; 0x60
 80050ce:	667a      	str	r2, [r7, #100]	; 0x64
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	f04f 0300 	mov.w	r3, #0
 80050d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80050dc:	4649      	mov	r1, r9
 80050de:	008b      	lsls	r3, r1, #2
 80050e0:	4641      	mov	r1, r8
 80050e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050e6:	4641      	mov	r1, r8
 80050e8:	008a      	lsls	r2, r1, #2
 80050ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80050ee:	f7fb fccd 	bl	8000a8c <__aeabi_uldivmod>
 80050f2:	4602      	mov	r2, r0
 80050f4:	460b      	mov	r3, r1
 80050f6:	4b0d      	ldr	r3, [pc, #52]	; (800512c <UART_SetConfig+0x4e4>)
 80050f8:	fba3 1302 	umull	r1, r3, r3, r2
 80050fc:	095b      	lsrs	r3, r3, #5
 80050fe:	2164      	movs	r1, #100	; 0x64
 8005100:	fb01 f303 	mul.w	r3, r1, r3
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	3332      	adds	r3, #50	; 0x32
 800510a:	4a08      	ldr	r2, [pc, #32]	; (800512c <UART_SetConfig+0x4e4>)
 800510c:	fba2 2303 	umull	r2, r3, r2, r3
 8005110:	095b      	lsrs	r3, r3, #5
 8005112:	f003 020f 	and.w	r2, r3, #15
 8005116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4422      	add	r2, r4
 800511e:	609a      	str	r2, [r3, #8]
}
 8005120:	bf00      	nop
 8005122:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005126:	46bd      	mov	sp, r7
 8005128:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800512c:	51eb851f 	.word	0x51eb851f

08005130 <__NVIC_SetPriority>:
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	6039      	str	r1, [r7, #0]
 800513a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800513c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005140:	2b00      	cmp	r3, #0
 8005142:	db0a      	blt.n	800515a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	b2da      	uxtb	r2, r3
 8005148:	490c      	ldr	r1, [pc, #48]	; (800517c <__NVIC_SetPriority+0x4c>)
 800514a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800514e:	0112      	lsls	r2, r2, #4
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	440b      	add	r3, r1
 8005154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005158:	e00a      	b.n	8005170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	b2da      	uxtb	r2, r3
 800515e:	4908      	ldr	r1, [pc, #32]	; (8005180 <__NVIC_SetPriority+0x50>)
 8005160:	79fb      	ldrb	r3, [r7, #7]
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	3b04      	subs	r3, #4
 8005168:	0112      	lsls	r2, r2, #4
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	440b      	add	r3, r1
 800516e:	761a      	strb	r2, [r3, #24]
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	e000e100 	.word	0xe000e100
 8005180:	e000ed00 	.word	0xe000ed00

08005184 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005188:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <SysTick_Handler+0x1c>)
 800518a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800518c:	f001 fd00 	bl	8006b90 <xTaskGetSchedulerState>
 8005190:	4603      	mov	r3, r0
 8005192:	2b01      	cmp	r3, #1
 8005194:	d001      	beq.n	800519a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005196:	f002 fae7 	bl	8007768 <xPortSysTickHandler>
  }
}
 800519a:	bf00      	nop
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	e000e010 	.word	0xe000e010

080051a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80051a8:	2100      	movs	r1, #0
 80051aa:	f06f 0004 	mvn.w	r0, #4
 80051ae:	f7ff ffbf 	bl	8005130 <__NVIC_SetPriority>
#endif
}
 80051b2:	bf00      	nop
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051be:	f3ef 8305 	mrs	r3, IPSR
 80051c2:	603b      	str	r3, [r7, #0]
  return(result);
 80051c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80051ca:	f06f 0305 	mvn.w	r3, #5
 80051ce:	607b      	str	r3, [r7, #4]
 80051d0:	e00c      	b.n	80051ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80051d2:	4b0a      	ldr	r3, [pc, #40]	; (80051fc <osKernelInitialize+0x44>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d105      	bne.n	80051e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80051da:	4b08      	ldr	r3, [pc, #32]	; (80051fc <osKernelInitialize+0x44>)
 80051dc:	2201      	movs	r2, #1
 80051de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	607b      	str	r3, [r7, #4]
 80051e4:	e002      	b.n	80051ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80051e6:	f04f 33ff 	mov.w	r3, #4294967295
 80051ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80051ec:	687b      	ldr	r3, [r7, #4]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	2000057c 	.word	0x2000057c

08005200 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005206:	f3ef 8305 	mrs	r3, IPSR
 800520a:	603b      	str	r3, [r7, #0]
  return(result);
 800520c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005212:	f06f 0305 	mvn.w	r3, #5
 8005216:	607b      	str	r3, [r7, #4]
 8005218:	e010      	b.n	800523c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800521a:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <osKernelStart+0x48>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d109      	bne.n	8005236 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005222:	f7ff ffbf 	bl	80051a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005226:	4b08      	ldr	r3, [pc, #32]	; (8005248 <osKernelStart+0x48>)
 8005228:	2202      	movs	r2, #2
 800522a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800522c:	f001 f866 	bl	80062fc <vTaskStartScheduler>
      stat = osOK;
 8005230:	2300      	movs	r3, #0
 8005232:	607b      	str	r3, [r7, #4]
 8005234:	e002      	b.n	800523c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005236:	f04f 33ff 	mov.w	r3, #4294967295
 800523a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800523c:	687b      	ldr	r3, [r7, #4]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	2000057c 	.word	0x2000057c

0800524c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800524c:	b580      	push	{r7, lr}
 800524e:	b08e      	sub	sp, #56	; 0x38
 8005250:	af04      	add	r7, sp, #16
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005258:	2300      	movs	r3, #0
 800525a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800525c:	f3ef 8305 	mrs	r3, IPSR
 8005260:	617b      	str	r3, [r7, #20]
  return(result);
 8005262:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005264:	2b00      	cmp	r3, #0
 8005266:	d17e      	bne.n	8005366 <osThreadNew+0x11a>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d07b      	beq.n	8005366 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800526e:	2380      	movs	r3, #128	; 0x80
 8005270:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005272:	2318      	movs	r3, #24
 8005274:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005276:	2300      	movs	r3, #0
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800527a:	f04f 33ff 	mov.w	r3, #4294967295
 800527e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d045      	beq.n	8005312 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <osThreadNew+0x48>
        name = attr->name;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d002      	beq.n	80052a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d008      	beq.n	80052ba <osThreadNew+0x6e>
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	2b38      	cmp	r3, #56	; 0x38
 80052ac:	d805      	bhi.n	80052ba <osThreadNew+0x6e>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <osThreadNew+0x72>
        return (NULL);
 80052ba:	2300      	movs	r3, #0
 80052bc:	e054      	b.n	8005368 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	089b      	lsrs	r3, r3, #2
 80052cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00e      	beq.n	80052f4 <osThreadNew+0xa8>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	2b5b      	cmp	r3, #91	; 0x5b
 80052dc:	d90a      	bls.n	80052f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d006      	beq.n	80052f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <osThreadNew+0xa8>
        mem = 1;
 80052ee:	2301      	movs	r3, #1
 80052f0:	61bb      	str	r3, [r7, #24]
 80052f2:	e010      	b.n	8005316 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10c      	bne.n	8005316 <osThreadNew+0xca>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d108      	bne.n	8005316 <osThreadNew+0xca>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d104      	bne.n	8005316 <osThreadNew+0xca>
          mem = 0;
 800530c:	2300      	movs	r3, #0
 800530e:	61bb      	str	r3, [r7, #24]
 8005310:	e001      	b.n	8005316 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005312:	2300      	movs	r3, #0
 8005314:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d110      	bne.n	800533e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005324:	9202      	str	r2, [sp, #8]
 8005326:	9301      	str	r3, [sp, #4]
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	6a3a      	ldr	r2, [r7, #32]
 8005330:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 fe0c 	bl	8005f50 <xTaskCreateStatic>
 8005338:	4603      	mov	r3, r0
 800533a:	613b      	str	r3, [r7, #16]
 800533c:	e013      	b.n	8005366 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d110      	bne.n	8005366 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	b29a      	uxth	r2, r3
 8005348:	f107 0310 	add.w	r3, r7, #16
 800534c:	9301      	str	r3, [sp, #4]
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 fe57 	bl	800600a <xTaskCreate>
 800535c:	4603      	mov	r3, r0
 800535e:	2b01      	cmp	r3, #1
 8005360:	d001      	beq.n	8005366 <osThreadNew+0x11a>
            hTask = NULL;
 8005362:	2300      	movs	r3, #0
 8005364:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005366:	693b      	ldr	r3, [r7, #16]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3728      	adds	r7, #40	; 0x28
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005378:	f3ef 8305 	mrs	r3, IPSR
 800537c:	60bb      	str	r3, [r7, #8]
  return(result);
 800537e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <osDelay+0x1c>
    stat = osErrorISR;
 8005384:	f06f 0305 	mvn.w	r3, #5
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	e007      	b.n	800539c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800538c:	2300      	movs	r3, #0
 800538e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 ff7c 	bl	8006294 <vTaskDelay>
    }
  }

  return (stat);
 800539c:	68fb      	ldr	r3, [r7, #12]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
	...

080053a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4a07      	ldr	r2, [pc, #28]	; (80053d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80053b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	4a06      	ldr	r2, [pc, #24]	; (80053d8 <vApplicationGetIdleTaskMemory+0x30>)
 80053be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2280      	movs	r2, #128	; 0x80
 80053c4:	601a      	str	r2, [r3, #0]
}
 80053c6:	bf00      	nop
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	20000580 	.word	0x20000580
 80053d8:	200005dc 	.word	0x200005dc

080053dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4a07      	ldr	r2, [pc, #28]	; (8005408 <vApplicationGetTimerTaskMemory+0x2c>)
 80053ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	4a06      	ldr	r2, [pc, #24]	; (800540c <vApplicationGetTimerTaskMemory+0x30>)
 80053f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053fa:	601a      	str	r2, [r3, #0]
}
 80053fc:	bf00      	nop
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	200007dc 	.word	0x200007dc
 800540c:	20000838 	.word	0x20000838

08005410 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f103 0208 	add.w	r2, r3, #8
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f04f 32ff 	mov.w	r2, #4294967295
 8005428:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f103 0208 	add.w	r2, r3, #8
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f103 0208 	add.w	r2, r3, #8
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800546a:	b480      	push	{r7}
 800546c:	b085      	sub	sp, #20
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	1c5a      	adds	r2, r3, #1
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	601a      	str	r2, [r3, #0]
}
 80054a6:	bf00      	nop
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054b2:	b480      	push	{r7}
 80054b4:	b085      	sub	sp, #20
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c8:	d103      	bne.n	80054d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	e00c      	b.n	80054ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	3308      	adds	r3, #8
 80054d6:	60fb      	str	r3, [r7, #12]
 80054d8:	e002      	b.n	80054e0 <vListInsert+0x2e>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	60fb      	str	r3, [r7, #12]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d2f6      	bcs.n	80054da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	601a      	str	r2, [r3, #0]
}
 8005518:	bf00      	nop
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	6892      	ldr	r2, [r2, #8]
 800553a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	6852      	ldr	r2, [r2, #4]
 8005544:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	429a      	cmp	r2, r3
 800554e:	d103      	bne.n	8005558 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	1e5a      	subs	r2, r3, #1
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
}
 800556c:	4618      	mov	r0, r3
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10a      	bne.n	80055a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800558c:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005590:	f383 8811 	msr	BASEPRI, r3
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800559e:	bf00      	nop
 80055a0:	e7fe      	b.n	80055a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80055a2:	f002 f84f 	bl	8007644 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ae:	68f9      	ldr	r1, [r7, #12]
 80055b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055b2:	fb01 f303 	mul.w	r3, r1, r3
 80055b6:	441a      	add	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d2:	3b01      	subs	r3, #1
 80055d4:	68f9      	ldr	r1, [r7, #12]
 80055d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055d8:	fb01 f303 	mul.w	r3, r1, r3
 80055dc:	441a      	add	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	22ff      	movs	r2, #255	; 0xff
 80055e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	22ff      	movs	r2, #255	; 0xff
 80055ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d114      	bne.n	8005622 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d01a      	beq.n	8005636 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	3310      	adds	r3, #16
 8005604:	4618      	mov	r0, r3
 8005606:	f001 f903 	bl	8006810 <xTaskRemoveFromEventList>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d012      	beq.n	8005636 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005610:	4b0c      	ldr	r3, [pc, #48]	; (8005644 <xQueueGenericReset+0xcc>)
 8005612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	e009      	b.n	8005636 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	3310      	adds	r3, #16
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff fef2 	bl	8005410 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	3324      	adds	r3, #36	; 0x24
 8005630:	4618      	mov	r0, r3
 8005632:	f7ff feed 	bl	8005410 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005636:	f002 f835 	bl	80076a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800563a:	2301      	movs	r3, #1
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	e000ed04 	.word	0xe000ed04

08005648 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005648:	b580      	push	{r7, lr}
 800564a:	b08e      	sub	sp, #56	; 0x38
 800564c:	af02      	add	r7, sp, #8
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10a      	bne.n	8005672 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800565c:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800566e:	bf00      	nop
 8005670:	e7fe      	b.n	8005670 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10a      	bne.n	800568e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005678:	f04f 0370 	mov.w	r3, #112	; 0x70
 800567c:	f383 8811 	msr	BASEPRI, r3
 8005680:	f3bf 8f6f 	isb	sy
 8005684:	f3bf 8f4f 	dsb	sy
 8005688:	627b      	str	r3, [r7, #36]	; 0x24
}
 800568a:	bf00      	nop
 800568c:	e7fe      	b.n	800568c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <xQueueGenericCreateStatic+0x52>
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <xQueueGenericCreateStatic+0x56>
 800569a:	2301      	movs	r3, #1
 800569c:	e000      	b.n	80056a0 <xQueueGenericCreateStatic+0x58>
 800569e:	2300      	movs	r3, #0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10a      	bne.n	80056ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80056a4:	f04f 0370 	mov.w	r3, #112	; 0x70
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	623b      	str	r3, [r7, #32]
}
 80056b6:	bf00      	nop
 80056b8:	e7fe      	b.n	80056b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d102      	bne.n	80056c6 <xQueueGenericCreateStatic+0x7e>
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <xQueueGenericCreateStatic+0x82>
 80056c6:	2301      	movs	r3, #1
 80056c8:	e000      	b.n	80056cc <xQueueGenericCreateStatic+0x84>
 80056ca:	2300      	movs	r3, #0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10a      	bne.n	80056e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80056d0:	f04f 0370 	mov.w	r3, #112	; 0x70
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	61fb      	str	r3, [r7, #28]
}
 80056e2:	bf00      	nop
 80056e4:	e7fe      	b.n	80056e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80056e6:	2350      	movs	r3, #80	; 0x50
 80056e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	2b50      	cmp	r3, #80	; 0x50
 80056ee:	d00a      	beq.n	8005706 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80056f0:	f04f 0370 	mov.w	r3, #112	; 0x70
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	61bb      	str	r3, [r7, #24]
}
 8005702:	bf00      	nop
 8005704:	e7fe      	b.n	8005704 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005706:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800570c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00d      	beq.n	800572e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800571a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	4613      	mov	r3, r2
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	68b9      	ldr	r1, [r7, #8]
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 f805 	bl	8005738 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800572e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005730:	4618      	mov	r0, r3
 8005732:	3730      	adds	r7, #48	; 0x30
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d103      	bne.n	8005754 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	e002      	b.n	800575a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005766:	2101      	movs	r1, #1
 8005768:	69b8      	ldr	r0, [r7, #24]
 800576a:	f7ff ff05 	bl	8005578 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	78fa      	ldrb	r2, [r7, #3]
 8005772:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005776:	bf00      	nop
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
	...

08005780 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08e      	sub	sp, #56	; 0x38
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
 800578c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800578e:	2300      	movs	r3, #0
 8005790:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10a      	bne.n	80057b2 <xQueueGenericSend+0x32>
	__asm volatile
 800579c:	f04f 0370 	mov.w	r3, #112	; 0x70
 80057a0:	f383 8811 	msr	BASEPRI, r3
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80057ae:	bf00      	nop
 80057b0:	e7fe      	b.n	80057b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d103      	bne.n	80057c0 <xQueueGenericSend+0x40>
 80057b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <xQueueGenericSend+0x44>
 80057c0:	2301      	movs	r3, #1
 80057c2:	e000      	b.n	80057c6 <xQueueGenericSend+0x46>
 80057c4:	2300      	movs	r3, #0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10a      	bne.n	80057e0 <xQueueGenericSend+0x60>
	__asm volatile
 80057ca:	f04f 0370 	mov.w	r3, #112	; 0x70
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057dc:	bf00      	nop
 80057de:	e7fe      	b.n	80057de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d103      	bne.n	80057ee <xQueueGenericSend+0x6e>
 80057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d101      	bne.n	80057f2 <xQueueGenericSend+0x72>
 80057ee:	2301      	movs	r3, #1
 80057f0:	e000      	b.n	80057f4 <xQueueGenericSend+0x74>
 80057f2:	2300      	movs	r3, #0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10a      	bne.n	800580e <xQueueGenericSend+0x8e>
	__asm volatile
 80057f8:	f04f 0370 	mov.w	r3, #112	; 0x70
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	623b      	str	r3, [r7, #32]
}
 800580a:	bf00      	nop
 800580c:	e7fe      	b.n	800580c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800580e:	f001 f9bf 	bl	8006b90 <xTaskGetSchedulerState>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d102      	bne.n	800581e <xQueueGenericSend+0x9e>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <xQueueGenericSend+0xa2>
 800581e:	2301      	movs	r3, #1
 8005820:	e000      	b.n	8005824 <xQueueGenericSend+0xa4>
 8005822:	2300      	movs	r3, #0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10a      	bne.n	800583e <xQueueGenericSend+0xbe>
	__asm volatile
 8005828:	f04f 0370 	mov.w	r3, #112	; 0x70
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	61fb      	str	r3, [r7, #28]
}
 800583a:	bf00      	nop
 800583c:	e7fe      	b.n	800583c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800583e:	f001 ff01 	bl	8007644 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584a:	429a      	cmp	r2, r3
 800584c:	d302      	bcc.n	8005854 <xQueueGenericSend+0xd4>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b02      	cmp	r3, #2
 8005852:	d129      	bne.n	80058a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	68b9      	ldr	r1, [r7, #8]
 8005858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800585a:	f000 fa0b 	bl	8005c74 <prvCopyDataToQueue>
 800585e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	2b00      	cmp	r3, #0
 8005866:	d010      	beq.n	800588a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586a:	3324      	adds	r3, #36	; 0x24
 800586c:	4618      	mov	r0, r3
 800586e:	f000 ffcf 	bl	8006810 <xTaskRemoveFromEventList>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d013      	beq.n	80058a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005878:	4b3f      	ldr	r3, [pc, #252]	; (8005978 <xQueueGenericSend+0x1f8>)
 800587a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	e00a      	b.n	80058a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800588a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588c:	2b00      	cmp	r3, #0
 800588e:	d007      	beq.n	80058a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005890:	4b39      	ldr	r3, [pc, #228]	; (8005978 <xQueueGenericSend+0x1f8>)
 8005892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80058a0:	f001 ff00 	bl	80076a4 <vPortExitCritical>
				return pdPASS;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e063      	b.n	8005970 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d103      	bne.n	80058b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058ae:	f001 fef9 	bl	80076a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80058b2:	2300      	movs	r3, #0
 80058b4:	e05c      	b.n	8005970 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d106      	bne.n	80058ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058bc:	f107 0314 	add.w	r3, r7, #20
 80058c0:	4618      	mov	r0, r3
 80058c2:	f001 f809 	bl	80068d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058c6:	2301      	movs	r3, #1
 80058c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058ca:	f001 feeb 	bl	80076a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058ce:	f000 fd7b 	bl	80063c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058d2:	f001 feb7 	bl	8007644 <vPortEnterCritical>
 80058d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058dc:	b25b      	sxtb	r3, r3
 80058de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e2:	d103      	bne.n	80058ec <xQueueGenericSend+0x16c>
 80058e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058f2:	b25b      	sxtb	r3, r3
 80058f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f8:	d103      	bne.n	8005902 <xQueueGenericSend+0x182>
 80058fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005902:	f001 fecf 	bl	80076a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005906:	1d3a      	adds	r2, r7, #4
 8005908:	f107 0314 	add.w	r3, r7, #20
 800590c:	4611      	mov	r1, r2
 800590e:	4618      	mov	r0, r3
 8005910:	f000 fff8 	bl	8006904 <xTaskCheckForTimeOut>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d124      	bne.n	8005964 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800591a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800591c:	f000 faa2 	bl	8005e64 <prvIsQueueFull>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d018      	beq.n	8005958 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	3310      	adds	r3, #16
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	4611      	mov	r1, r2
 800592e:	4618      	mov	r0, r3
 8005930:	f000 ff1e 	bl	8006770 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005936:	f000 fa2d 	bl	8005d94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800593a:	f000 fd53 	bl	80063e4 <xTaskResumeAll>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	f47f af7c 	bne.w	800583e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005946:	4b0c      	ldr	r3, [pc, #48]	; (8005978 <xQueueGenericSend+0x1f8>)
 8005948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	e772      	b.n	800583e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800595a:	f000 fa1b 	bl	8005d94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800595e:	f000 fd41 	bl	80063e4 <xTaskResumeAll>
 8005962:	e76c      	b.n	800583e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005966:	f000 fa15 	bl	8005d94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800596a:	f000 fd3b 	bl	80063e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800596e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005970:	4618      	mov	r0, r3
 8005972:	3738      	adds	r7, #56	; 0x38
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	e000ed04 	.word	0xe000ed04

0800597c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b090      	sub	sp, #64	; 0x40
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800598e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10a      	bne.n	80059aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005994:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005998:	f383 8811 	msr	BASEPRI, r3
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059a6:	bf00      	nop
 80059a8:	e7fe      	b.n	80059a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d103      	bne.n	80059b8 <xQueueGenericSendFromISR+0x3c>
 80059b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <xQueueGenericSendFromISR+0x40>
 80059b8:	2301      	movs	r3, #1
 80059ba:	e000      	b.n	80059be <xQueueGenericSendFromISR+0x42>
 80059bc:	2300      	movs	r3, #0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10a      	bne.n	80059d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80059c2:	f04f 0370 	mov.w	r3, #112	; 0x70
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059d4:	bf00      	nop
 80059d6:	e7fe      	b.n	80059d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d103      	bne.n	80059e6 <xQueueGenericSendFromISR+0x6a>
 80059de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d101      	bne.n	80059ea <xQueueGenericSendFromISR+0x6e>
 80059e6:	2301      	movs	r3, #1
 80059e8:	e000      	b.n	80059ec <xQueueGenericSendFromISR+0x70>
 80059ea:	2300      	movs	r3, #0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10a      	bne.n	8005a06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80059f0:	f04f 0370 	mov.w	r3, #112	; 0x70
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	623b      	str	r3, [r7, #32]
}
 8005a02:	bf00      	nop
 8005a04:	e7fe      	b.n	8005a04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a06:	f001 feff 	bl	8007808 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a0a:	f3ef 8211 	mrs	r2, BASEPRI
 8005a0e:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	61fa      	str	r2, [r7, #28]
 8005a20:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a22:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a24:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d302      	bcc.n	8005a38 <xQueueGenericSendFromISR+0xbc>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d12f      	bne.n	8005a98 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a46:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	68b9      	ldr	r1, [r7, #8]
 8005a4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a4e:	f000 f911 	bl	8005c74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a52:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5a:	d112      	bne.n	8005a82 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d016      	beq.n	8005a92 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a66:	3324      	adds	r3, #36	; 0x24
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 fed1 	bl	8006810 <xTaskRemoveFromEventList>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00e      	beq.n	8005a92 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00b      	beq.n	8005a92 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	e007      	b.n	8005a92 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a86:	3301      	adds	r3, #1
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	b25a      	sxtb	r2, r3
 8005a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a92:	2301      	movs	r3, #1
 8005a94:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005a96:	e001      	b.n	8005a9c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a9e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005aa6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3740      	adds	r7, #64	; 0x40
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
	...

08005ab4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b08c      	sub	sp, #48	; 0x30
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10a      	bne.n	8005ae4 <xQueueReceive+0x30>
	__asm volatile
 8005ace:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	623b      	str	r3, [r7, #32]
}
 8005ae0:	bf00      	nop
 8005ae2:	e7fe      	b.n	8005ae2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d103      	bne.n	8005af2 <xQueueReceive+0x3e>
 8005aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <xQueueReceive+0x42>
 8005af2:	2301      	movs	r3, #1
 8005af4:	e000      	b.n	8005af8 <xQueueReceive+0x44>
 8005af6:	2300      	movs	r3, #0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10a      	bne.n	8005b12 <xQueueReceive+0x5e>
	__asm volatile
 8005afc:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	61fb      	str	r3, [r7, #28]
}
 8005b0e:	bf00      	nop
 8005b10:	e7fe      	b.n	8005b10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b12:	f001 f83d 	bl	8006b90 <xTaskGetSchedulerState>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d102      	bne.n	8005b22 <xQueueReceive+0x6e>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <xQueueReceive+0x72>
 8005b22:	2301      	movs	r3, #1
 8005b24:	e000      	b.n	8005b28 <xQueueReceive+0x74>
 8005b26:	2300      	movs	r3, #0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10a      	bne.n	8005b42 <xQueueReceive+0x8e>
	__asm volatile
 8005b2c:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	61bb      	str	r3, [r7, #24]
}
 8005b3e:	bf00      	nop
 8005b40:	e7fe      	b.n	8005b40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b42:	f001 fd7f 	bl	8007644 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d01f      	beq.n	8005b92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b52:	68b9      	ldr	r1, [r7, #8]
 8005b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b56:	f000 f8f7 	bl	8005d48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	1e5a      	subs	r2, r3, #1
 8005b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00f      	beq.n	8005b8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	3310      	adds	r3, #16
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fe4e 	bl	8006810 <xTaskRemoveFromEventList>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d007      	beq.n	8005b8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b7a:	4b3d      	ldr	r3, [pc, #244]	; (8005c70 <xQueueReceive+0x1bc>)
 8005b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b8a:	f001 fd8b 	bl	80076a4 <vPortExitCritical>
				return pdPASS;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e069      	b.n	8005c66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d103      	bne.n	8005ba0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b98:	f001 fd84 	bl	80076a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	e062      	b.n	8005c66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d106      	bne.n	8005bb4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ba6:	f107 0310 	add.w	r3, r7, #16
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fe94 	bl	80068d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bb4:	f001 fd76 	bl	80076a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bb8:	f000 fc06 	bl	80063c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bbc:	f001 fd42 	bl	8007644 <vPortEnterCritical>
 8005bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bc6:	b25b      	sxtb	r3, r3
 8005bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bcc:	d103      	bne.n	8005bd6 <xQueueReceive+0x122>
 8005bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bdc:	b25b      	sxtb	r3, r3
 8005bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be2:	d103      	bne.n	8005bec <xQueueReceive+0x138>
 8005be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bec:	f001 fd5a 	bl	80076a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bf0:	1d3a      	adds	r2, r7, #4
 8005bf2:	f107 0310 	add.w	r3, r7, #16
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fe83 	bl	8006904 <xTaskCheckForTimeOut>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d123      	bne.n	8005c4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c06:	f000 f917 	bl	8005e38 <prvIsQueueEmpty>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d017      	beq.n	8005c40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c12:	3324      	adds	r3, #36	; 0x24
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	4611      	mov	r1, r2
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 fda9 	bl	8006770 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c20:	f000 f8b8 	bl	8005d94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c24:	f000 fbde 	bl	80063e4 <xTaskResumeAll>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d189      	bne.n	8005b42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005c2e:	4b10      	ldr	r3, [pc, #64]	; (8005c70 <xQueueReceive+0x1bc>)
 8005c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c34:	601a      	str	r2, [r3, #0]
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	e780      	b.n	8005b42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c42:	f000 f8a7 	bl	8005d94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c46:	f000 fbcd 	bl	80063e4 <xTaskResumeAll>
 8005c4a:	e77a      	b.n	8005b42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c4e:	f000 f8a1 	bl	8005d94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c52:	f000 fbc7 	bl	80063e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c58:	f000 f8ee 	bl	8005e38 <prvIsQueueEmpty>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f43f af6f 	beq.w	8005b42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3730      	adds	r7, #48	; 0x30
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	e000ed04 	.word	0xe000ed04

08005c74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c80:	2300      	movs	r3, #0
 8005c82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10d      	bne.n	8005cae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d14d      	bne.n	8005d36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 ff94 	bl	8006bcc <xTaskPriorityDisinherit>
 8005ca4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	609a      	str	r2, [r3, #8]
 8005cac:	e043      	b.n	8005d36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d119      	bne.n	8005ce8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6858      	ldr	r0, [r3, #4]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	68b9      	ldr	r1, [r7, #8]
 8005cc0:	f001 fff8 	bl	8007cb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ccc:	441a      	add	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d32b      	bcc.n	8005d36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	605a      	str	r2, [r3, #4]
 8005ce6:	e026      	b.n	8005d36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	68d8      	ldr	r0, [r3, #12]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	68b9      	ldr	r1, [r7, #8]
 8005cf4:	f001 ffde 	bl	8007cb4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	68da      	ldr	r2, [r3, #12]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d00:	425b      	negs	r3, r3
 8005d02:	441a      	add	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d207      	bcs.n	8005d24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1c:	425b      	negs	r3, r3
 8005d1e:	441a      	add	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d105      	bne.n	8005d36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	1c5a      	adds	r2, r3, #1
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005d3e:	697b      	ldr	r3, [r7, #20]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3718      	adds	r7, #24
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d018      	beq.n	8005d8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	441a      	add	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d303      	bcc.n	8005d7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68d9      	ldr	r1, [r3, #12]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d84:	461a      	mov	r2, r3
 8005d86:	6838      	ldr	r0, [r7, #0]
 8005d88:	f001 ff94 	bl	8007cb4 <memcpy>
	}
}
 8005d8c:	bf00      	nop
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d9c:	f001 fc52 	bl	8007644 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005da6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005da8:	e011      	b.n	8005dce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d012      	beq.n	8005dd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	3324      	adds	r3, #36	; 0x24
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 fd2a 	bl	8006810 <xTaskRemoveFromEventList>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005dc2:	f000 fe01 	bl	80069c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	dce9      	bgt.n	8005daa <prvUnlockQueue+0x16>
 8005dd6:	e000      	b.n	8005dda <prvUnlockQueue+0x46>
					break;
 8005dd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	22ff      	movs	r2, #255	; 0xff
 8005dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005de2:	f001 fc5f 	bl	80076a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005de6:	f001 fc2d 	bl	8007644 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005df0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005df2:	e011      	b.n	8005e18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d012      	beq.n	8005e22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3310      	adds	r3, #16
 8005e00:	4618      	mov	r0, r3
 8005e02:	f000 fd05 	bl	8006810 <xTaskRemoveFromEventList>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005e0c:	f000 fddc 	bl	80069c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005e10:	7bbb      	ldrb	r3, [r7, #14]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	dce9      	bgt.n	8005df4 <prvUnlockQueue+0x60>
 8005e20:	e000      	b.n	8005e24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	22ff      	movs	r2, #255	; 0xff
 8005e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005e2c:	f001 fc3a 	bl	80076a4 <vPortExitCritical>
}
 8005e30:	bf00      	nop
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e40:	f001 fc00 	bl	8007644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d102      	bne.n	8005e52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	e001      	b.n	8005e56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e56:	f001 fc25 	bl	80076a4 <vPortExitCritical>

	return xReturn;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e6c:	f001 fbea 	bl	8007644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d102      	bne.n	8005e82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	e001      	b.n	8005e86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e82:	2300      	movs	r3, #0
 8005e84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e86:	f001 fc0d 	bl	80076a4 <vPortExitCritical>

	return xReturn;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60fb      	str	r3, [r7, #12]
 8005ea2:	e014      	b.n	8005ece <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ea4:	4a0f      	ldr	r2, [pc, #60]	; (8005ee4 <vQueueAddToRegistry+0x50>)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10b      	bne.n	8005ec8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005eb0:	490c      	ldr	r1, [pc, #48]	; (8005ee4 <vQueueAddToRegistry+0x50>)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005eba:	4a0a      	ldr	r2, [pc, #40]	; (8005ee4 <vQueueAddToRegistry+0x50>)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	4413      	add	r3, r2
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005ec6:	e006      	b.n	8005ed6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2b07      	cmp	r3, #7
 8005ed2:	d9e7      	bls.n	8005ea4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ed4:	bf00      	nop
 8005ed6:	bf00      	nop
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	20000c38 	.word	0x20000c38

08005ee8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005ef8:	f001 fba4 	bl	8007644 <vPortEnterCritical>
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f02:	b25b      	sxtb	r3, r3
 8005f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f08:	d103      	bne.n	8005f12 <vQueueWaitForMessageRestricted+0x2a>
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f18:	b25b      	sxtb	r3, r3
 8005f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1e:	d103      	bne.n	8005f28 <vQueueWaitForMessageRestricted+0x40>
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f28:	f001 fbbc 	bl	80076a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d106      	bne.n	8005f42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	3324      	adds	r3, #36	; 0x24
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	68b9      	ldr	r1, [r7, #8]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 fc3b 	bl	80067b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005f42:	6978      	ldr	r0, [r7, #20]
 8005f44:	f7ff ff26 	bl	8005d94 <prvUnlockQueue>
	}
 8005f48:	bf00      	nop
 8005f4a:	3718      	adds	r7, #24
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08e      	sub	sp, #56	; 0x38
 8005f54:	af04      	add	r7, sp, #16
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10a      	bne.n	8005f7a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005f64:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	623b      	str	r3, [r7, #32]
}
 8005f76:	bf00      	nop
 8005f78:	e7fe      	b.n	8005f78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10a      	bne.n	8005f96 <xTaskCreateStatic+0x46>
	__asm volatile
 8005f80:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	61fb      	str	r3, [r7, #28]
}
 8005f92:	bf00      	nop
 8005f94:	e7fe      	b.n	8005f94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f96:	235c      	movs	r3, #92	; 0x5c
 8005f98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	2b5c      	cmp	r3, #92	; 0x5c
 8005f9e:	d00a      	beq.n	8005fb6 <xTaskCreateStatic+0x66>
	__asm volatile
 8005fa0:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	61bb      	str	r3, [r7, #24]
}
 8005fb2:	bf00      	nop
 8005fb4:	e7fe      	b.n	8005fb4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005fb6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d01e      	beq.n	8005ffc <xTaskCreateStatic+0xac>
 8005fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d01b      	beq.n	8005ffc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fcc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	9303      	str	r3, [sp, #12]
 8005fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fdc:	9302      	str	r3, [sp, #8]
 8005fde:	f107 0314 	add.w	r3, r7, #20
 8005fe2:	9301      	str	r3, [sp, #4]
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	68b9      	ldr	r1, [r7, #8]
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 f850 	bl	8006094 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ff4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ff6:	f000 f8dd 	bl	80061b4 <prvAddNewTaskToReadyList>
 8005ffa:	e001      	b.n	8006000 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006000:	697b      	ldr	r3, [r7, #20]
	}
 8006002:	4618      	mov	r0, r3
 8006004:	3728      	adds	r7, #40	; 0x28
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800600a:	b580      	push	{r7, lr}
 800600c:	b08c      	sub	sp, #48	; 0x30
 800600e:	af04      	add	r7, sp, #16
 8006010:	60f8      	str	r0, [r7, #12]
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	603b      	str	r3, [r7, #0]
 8006016:	4613      	mov	r3, r2
 8006018:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800601a:	88fb      	ldrh	r3, [r7, #6]
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4618      	mov	r0, r3
 8006020:	f001 fc32 	bl	8007888 <pvPortMalloc>
 8006024:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00e      	beq.n	800604a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800602c:	205c      	movs	r0, #92	; 0x5c
 800602e:	f001 fc2b 	bl	8007888 <pvPortMalloc>
 8006032:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	631a      	str	r2, [r3, #48]	; 0x30
 8006040:	e005      	b.n	800604e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006042:	6978      	ldr	r0, [r7, #20]
 8006044:	f001 fcec 	bl	8007a20 <vPortFree>
 8006048:	e001      	b.n	800604e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800604a:	2300      	movs	r3, #0
 800604c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d017      	beq.n	8006084 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800605c:	88fa      	ldrh	r2, [r7, #6]
 800605e:	2300      	movs	r3, #0
 8006060:	9303      	str	r3, [sp, #12]
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	9302      	str	r3, [sp, #8]
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006068:	9301      	str	r3, [sp, #4]
 800606a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	68b9      	ldr	r1, [r7, #8]
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 f80e 	bl	8006094 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006078:	69f8      	ldr	r0, [r7, #28]
 800607a:	f000 f89b 	bl	80061b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800607e:	2301      	movs	r3, #1
 8006080:	61bb      	str	r3, [r7, #24]
 8006082:	e002      	b.n	800608a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006084:	f04f 33ff 	mov.w	r3, #4294967295
 8006088:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800608a:	69bb      	ldr	r3, [r7, #24]
	}
 800608c:	4618      	mov	r0, r3
 800608e:	3720      	adds	r7, #32
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b088      	sub	sp, #32
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
 80060a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	461a      	mov	r2, r3
 80060ac:	21a5      	movs	r1, #165	; 0xa5
 80060ae:	f001 fdd5 	bl	8007c5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80060b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80060bc:	3b01      	subs	r3, #1
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4413      	add	r3, r2
 80060c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	f023 0307 	bic.w	r3, r3, #7
 80060ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	f003 0307 	and.w	r3, r3, #7
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <prvInitialiseNewTask+0x58>
	__asm volatile
 80060d6:	f04f 0370 	mov.w	r3, #112	; 0x70
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	617b      	str	r3, [r7, #20]
}
 80060e8:	bf00      	nop
 80060ea:	e7fe      	b.n	80060ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d01f      	beq.n	8006132 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060f2:	2300      	movs	r3, #0
 80060f4:	61fb      	str	r3, [r7, #28]
 80060f6:	e012      	b.n	800611e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	4413      	add	r3, r2
 80060fe:	7819      	ldrb	r1, [r3, #0]
 8006100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	4413      	add	r3, r2
 8006106:	3334      	adds	r3, #52	; 0x34
 8006108:	460a      	mov	r2, r1
 800610a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	4413      	add	r3, r2
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d006      	beq.n	8006126 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	3301      	adds	r3, #1
 800611c:	61fb      	str	r3, [r7, #28]
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	2b0f      	cmp	r3, #15
 8006122:	d9e9      	bls.n	80060f8 <prvInitialiseNewTask+0x64>
 8006124:	e000      	b.n	8006128 <prvInitialiseNewTask+0x94>
			{
				break;
 8006126:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612a:	2200      	movs	r2, #0
 800612c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006130:	e003      	b.n	800613a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	2b37      	cmp	r3, #55	; 0x37
 800613e:	d901      	bls.n	8006144 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006140:	2337      	movs	r3, #55	; 0x37
 8006142:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006148:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800614e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006152:	2200      	movs	r2, #0
 8006154:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	3304      	adds	r3, #4
 800615a:	4618      	mov	r0, r3
 800615c:	f7ff f978 	bl	8005450 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	3318      	adds	r3, #24
 8006164:	4618      	mov	r0, r3
 8006166:	f7ff f973 	bl	8005450 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800616a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800616e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006172:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006178:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800617a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800617e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006182:	2200      	movs	r2, #0
 8006184:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	68f9      	ldr	r1, [r7, #12]
 8006192:	69b8      	ldr	r0, [r7, #24]
 8006194:	f001 f92a 	bl	80073ec <pxPortInitialiseStack>
 8006198:	4602      	mov	r2, r0
 800619a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80061a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061aa:	bf00      	nop
 80061ac:	3720      	adds	r7, #32
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
	...

080061b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80061bc:	f001 fa42 	bl	8007644 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80061c0:	4b2d      	ldr	r3, [pc, #180]	; (8006278 <prvAddNewTaskToReadyList+0xc4>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3301      	adds	r3, #1
 80061c6:	4a2c      	ldr	r2, [pc, #176]	; (8006278 <prvAddNewTaskToReadyList+0xc4>)
 80061c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80061ca:	4b2c      	ldr	r3, [pc, #176]	; (800627c <prvAddNewTaskToReadyList+0xc8>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d109      	bne.n	80061e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80061d2:	4a2a      	ldr	r2, [pc, #168]	; (800627c <prvAddNewTaskToReadyList+0xc8>)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80061d8:	4b27      	ldr	r3, [pc, #156]	; (8006278 <prvAddNewTaskToReadyList+0xc4>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d110      	bne.n	8006202 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80061e0:	f000 fc18 	bl	8006a14 <prvInitialiseTaskLists>
 80061e4:	e00d      	b.n	8006202 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80061e6:	4b26      	ldr	r3, [pc, #152]	; (8006280 <prvAddNewTaskToReadyList+0xcc>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d109      	bne.n	8006202 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80061ee:	4b23      	ldr	r3, [pc, #140]	; (800627c <prvAddNewTaskToReadyList+0xc8>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d802      	bhi.n	8006202 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80061fc:	4a1f      	ldr	r2, [pc, #124]	; (800627c <prvAddNewTaskToReadyList+0xc8>)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006202:	4b20      	ldr	r3, [pc, #128]	; (8006284 <prvAddNewTaskToReadyList+0xd0>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3301      	adds	r3, #1
 8006208:	4a1e      	ldr	r2, [pc, #120]	; (8006284 <prvAddNewTaskToReadyList+0xd0>)
 800620a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800620c:	4b1d      	ldr	r3, [pc, #116]	; (8006284 <prvAddNewTaskToReadyList+0xd0>)
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006218:	4b1b      	ldr	r3, [pc, #108]	; (8006288 <prvAddNewTaskToReadyList+0xd4>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	429a      	cmp	r2, r3
 800621e:	d903      	bls.n	8006228 <prvAddNewTaskToReadyList+0x74>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006224:	4a18      	ldr	r2, [pc, #96]	; (8006288 <prvAddNewTaskToReadyList+0xd4>)
 8006226:	6013      	str	r3, [r2, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800622c:	4613      	mov	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4a15      	ldr	r2, [pc, #84]	; (800628c <prvAddNewTaskToReadyList+0xd8>)
 8006236:	441a      	add	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	3304      	adds	r3, #4
 800623c:	4619      	mov	r1, r3
 800623e:	4610      	mov	r0, r2
 8006240:	f7ff f913 	bl	800546a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006244:	f001 fa2e 	bl	80076a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006248:	4b0d      	ldr	r3, [pc, #52]	; (8006280 <prvAddNewTaskToReadyList+0xcc>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00e      	beq.n	800626e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006250:	4b0a      	ldr	r3, [pc, #40]	; (800627c <prvAddNewTaskToReadyList+0xc8>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625a:	429a      	cmp	r2, r3
 800625c:	d207      	bcs.n	800626e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800625e:	4b0c      	ldr	r3, [pc, #48]	; (8006290 <prvAddNewTaskToReadyList+0xdc>)
 8006260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800626e:	bf00      	nop
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	2000114c 	.word	0x2000114c
 800627c:	20000c78 	.word	0x20000c78
 8006280:	20001158 	.word	0x20001158
 8006284:	20001168 	.word	0x20001168
 8006288:	20001154 	.word	0x20001154
 800628c:	20000c7c 	.word	0x20000c7c
 8006290:	e000ed04 	.word	0xe000ed04

08006294 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800629c:	2300      	movs	r3, #0
 800629e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d017      	beq.n	80062d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80062a6:	4b13      	ldr	r3, [pc, #76]	; (80062f4 <vTaskDelay+0x60>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00a      	beq.n	80062c4 <vTaskDelay+0x30>
	__asm volatile
 80062ae:	f04f 0370 	mov.w	r3, #112	; 0x70
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	60bb      	str	r3, [r7, #8]
}
 80062c0:	bf00      	nop
 80062c2:	e7fe      	b.n	80062c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80062c4:	f000 f880 	bl	80063c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80062c8:	2100      	movs	r1, #0
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fcec 	bl	8006ca8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80062d0:	f000 f888 	bl	80063e4 <xTaskResumeAll>
 80062d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d107      	bne.n	80062ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80062dc:	4b06      	ldr	r3, [pc, #24]	; (80062f8 <vTaskDelay+0x64>)
 80062de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	f3bf 8f4f 	dsb	sy
 80062e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062ec:	bf00      	nop
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	20001174 	.word	0x20001174
 80062f8:	e000ed04 	.word	0xe000ed04

080062fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b08a      	sub	sp, #40	; 0x28
 8006300:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006302:	2300      	movs	r3, #0
 8006304:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006306:	2300      	movs	r3, #0
 8006308:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800630a:	463a      	mov	r2, r7
 800630c:	1d39      	adds	r1, r7, #4
 800630e:	f107 0308 	add.w	r3, r7, #8
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff f848 	bl	80053a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006318:	6839      	ldr	r1, [r7, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	9202      	str	r2, [sp, #8]
 8006320:	9301      	str	r3, [sp, #4]
 8006322:	2300      	movs	r3, #0
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	2300      	movs	r3, #0
 8006328:	460a      	mov	r2, r1
 800632a:	4921      	ldr	r1, [pc, #132]	; (80063b0 <vTaskStartScheduler+0xb4>)
 800632c:	4821      	ldr	r0, [pc, #132]	; (80063b4 <vTaskStartScheduler+0xb8>)
 800632e:	f7ff fe0f 	bl	8005f50 <xTaskCreateStatic>
 8006332:	4603      	mov	r3, r0
 8006334:	4a20      	ldr	r2, [pc, #128]	; (80063b8 <vTaskStartScheduler+0xbc>)
 8006336:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006338:	4b1f      	ldr	r3, [pc, #124]	; (80063b8 <vTaskStartScheduler+0xbc>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006340:	2301      	movs	r3, #1
 8006342:	617b      	str	r3, [r7, #20]
 8006344:	e001      	b.n	800634a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006346:	2300      	movs	r3, #0
 8006348:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d102      	bne.n	8006356 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006350:	f000 fcfe 	bl	8006d50 <xTimerCreateTimerTask>
 8006354:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d116      	bne.n	800638a <vTaskStartScheduler+0x8e>
	__asm volatile
 800635c:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006360:	f383 8811 	msr	BASEPRI, r3
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	f3bf 8f4f 	dsb	sy
 800636c:	613b      	str	r3, [r7, #16]
}
 800636e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006370:	4b12      	ldr	r3, [pc, #72]	; (80063bc <vTaskStartScheduler+0xc0>)
 8006372:	f04f 32ff 	mov.w	r2, #4294967295
 8006376:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006378:	4b11      	ldr	r3, [pc, #68]	; (80063c0 <vTaskStartScheduler+0xc4>)
 800637a:	2201      	movs	r2, #1
 800637c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800637e:	4b11      	ldr	r3, [pc, #68]	; (80063c4 <vTaskStartScheduler+0xc8>)
 8006380:	2200      	movs	r2, #0
 8006382:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006384:	f001 f8bc 	bl	8007500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006388:	e00e      	b.n	80063a8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006390:	d10a      	bne.n	80063a8 <vTaskStartScheduler+0xac>
	__asm volatile
 8006392:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	60fb      	str	r3, [r7, #12]
}
 80063a4:	bf00      	nop
 80063a6:	e7fe      	b.n	80063a6 <vTaskStartScheduler+0xaa>
}
 80063a8:	bf00      	nop
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	08007d84 	.word	0x08007d84
 80063b4:	080069e1 	.word	0x080069e1
 80063b8:	20001170 	.word	0x20001170
 80063bc:	2000116c 	.word	0x2000116c
 80063c0:	20001158 	.word	0x20001158
 80063c4:	20001150 	.word	0x20001150

080063c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063c8:	b480      	push	{r7}
 80063ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80063cc:	4b04      	ldr	r3, [pc, #16]	; (80063e0 <vTaskSuspendAll+0x18>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	3301      	adds	r3, #1
 80063d2:	4a03      	ldr	r2, [pc, #12]	; (80063e0 <vTaskSuspendAll+0x18>)
 80063d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80063d6:	bf00      	nop
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	20001174 	.word	0x20001174

080063e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80063ea:	2300      	movs	r3, #0
 80063ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80063ee:	2300      	movs	r3, #0
 80063f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80063f2:	4b42      	ldr	r3, [pc, #264]	; (80064fc <xTaskResumeAll+0x118>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10a      	bne.n	8006410 <xTaskResumeAll+0x2c>
	__asm volatile
 80063fa:	f04f 0370 	mov.w	r3, #112	; 0x70
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	603b      	str	r3, [r7, #0]
}
 800640c:	bf00      	nop
 800640e:	e7fe      	b.n	800640e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006410:	f001 f918 	bl	8007644 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006414:	4b39      	ldr	r3, [pc, #228]	; (80064fc <xTaskResumeAll+0x118>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3b01      	subs	r3, #1
 800641a:	4a38      	ldr	r2, [pc, #224]	; (80064fc <xTaskResumeAll+0x118>)
 800641c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800641e:	4b37      	ldr	r3, [pc, #220]	; (80064fc <xTaskResumeAll+0x118>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d162      	bne.n	80064ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006426:	4b36      	ldr	r3, [pc, #216]	; (8006500 <xTaskResumeAll+0x11c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d05e      	beq.n	80064ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800642e:	e02f      	b.n	8006490 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006430:	4b34      	ldr	r3, [pc, #208]	; (8006504 <xTaskResumeAll+0x120>)
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3318      	adds	r3, #24
 800643c:	4618      	mov	r0, r3
 800643e:	f7ff f871 	bl	8005524 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	3304      	adds	r3, #4
 8006446:	4618      	mov	r0, r3
 8006448:	f7ff f86c 	bl	8005524 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006450:	4b2d      	ldr	r3, [pc, #180]	; (8006508 <xTaskResumeAll+0x124>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	429a      	cmp	r2, r3
 8006456:	d903      	bls.n	8006460 <xTaskResumeAll+0x7c>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	4a2a      	ldr	r2, [pc, #168]	; (8006508 <xTaskResumeAll+0x124>)
 800645e:	6013      	str	r3, [r2, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006464:	4613      	mov	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4413      	add	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4a27      	ldr	r2, [pc, #156]	; (800650c <xTaskResumeAll+0x128>)
 800646e:	441a      	add	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	3304      	adds	r3, #4
 8006474:	4619      	mov	r1, r3
 8006476:	4610      	mov	r0, r2
 8006478:	f7fe fff7 	bl	800546a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006480:	4b23      	ldr	r3, [pc, #140]	; (8006510 <xTaskResumeAll+0x12c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006486:	429a      	cmp	r2, r3
 8006488:	d302      	bcc.n	8006490 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800648a:	4b22      	ldr	r3, [pc, #136]	; (8006514 <xTaskResumeAll+0x130>)
 800648c:	2201      	movs	r2, #1
 800648e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006490:	4b1c      	ldr	r3, [pc, #112]	; (8006504 <xTaskResumeAll+0x120>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1cb      	bne.n	8006430 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800649e:	f000 fb57 	bl	8006b50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80064a2:	4b1d      	ldr	r3, [pc, #116]	; (8006518 <xTaskResumeAll+0x134>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d010      	beq.n	80064d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80064ae:	f000 f847 	bl	8006540 <xTaskIncrementTick>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80064b8:	4b16      	ldr	r3, [pc, #88]	; (8006514 <xTaskResumeAll+0x130>)
 80064ba:	2201      	movs	r2, #1
 80064bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	3b01      	subs	r3, #1
 80064c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1f1      	bne.n	80064ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80064ca:	4b13      	ldr	r3, [pc, #76]	; (8006518 <xTaskResumeAll+0x134>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80064d0:	4b10      	ldr	r3, [pc, #64]	; (8006514 <xTaskResumeAll+0x130>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d009      	beq.n	80064ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80064d8:	2301      	movs	r3, #1
 80064da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80064dc:	4b0f      	ldr	r3, [pc, #60]	; (800651c <xTaskResumeAll+0x138>)
 80064de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064ec:	f001 f8da 	bl	80076a4 <vPortExitCritical>

	return xAlreadyYielded;
 80064f0:	68bb      	ldr	r3, [r7, #8]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20001174 	.word	0x20001174
 8006500:	2000114c 	.word	0x2000114c
 8006504:	2000110c 	.word	0x2000110c
 8006508:	20001154 	.word	0x20001154
 800650c:	20000c7c 	.word	0x20000c7c
 8006510:	20000c78 	.word	0x20000c78
 8006514:	20001160 	.word	0x20001160
 8006518:	2000115c 	.word	0x2000115c
 800651c:	e000ed04 	.word	0xe000ed04

08006520 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006526:	4b05      	ldr	r3, [pc, #20]	; (800653c <xTaskGetTickCount+0x1c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800652c:	687b      	ldr	r3, [r7, #4]
}
 800652e:	4618      	mov	r0, r3
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	20001150 	.word	0x20001150

08006540 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006546:	2300      	movs	r3, #0
 8006548:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800654a:	4b4f      	ldr	r3, [pc, #316]	; (8006688 <xTaskIncrementTick+0x148>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	f040 808f 	bne.w	8006672 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006554:	4b4d      	ldr	r3, [pc, #308]	; (800668c <xTaskIncrementTick+0x14c>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3301      	adds	r3, #1
 800655a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800655c:	4a4b      	ldr	r2, [pc, #300]	; (800668c <xTaskIncrementTick+0x14c>)
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d120      	bne.n	80065aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006568:	4b49      	ldr	r3, [pc, #292]	; (8006690 <xTaskIncrementTick+0x150>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00a      	beq.n	8006588 <xTaskIncrementTick+0x48>
	__asm volatile
 8006572:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006576:	f383 8811 	msr	BASEPRI, r3
 800657a:	f3bf 8f6f 	isb	sy
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	603b      	str	r3, [r7, #0]
}
 8006584:	bf00      	nop
 8006586:	e7fe      	b.n	8006586 <xTaskIncrementTick+0x46>
 8006588:	4b41      	ldr	r3, [pc, #260]	; (8006690 <xTaskIncrementTick+0x150>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	60fb      	str	r3, [r7, #12]
 800658e:	4b41      	ldr	r3, [pc, #260]	; (8006694 <xTaskIncrementTick+0x154>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a3f      	ldr	r2, [pc, #252]	; (8006690 <xTaskIncrementTick+0x150>)
 8006594:	6013      	str	r3, [r2, #0]
 8006596:	4a3f      	ldr	r2, [pc, #252]	; (8006694 <xTaskIncrementTick+0x154>)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6013      	str	r3, [r2, #0]
 800659c:	4b3e      	ldr	r3, [pc, #248]	; (8006698 <xTaskIncrementTick+0x158>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3301      	adds	r3, #1
 80065a2:	4a3d      	ldr	r2, [pc, #244]	; (8006698 <xTaskIncrementTick+0x158>)
 80065a4:	6013      	str	r3, [r2, #0]
 80065a6:	f000 fad3 	bl	8006b50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80065aa:	4b3c      	ldr	r3, [pc, #240]	; (800669c <xTaskIncrementTick+0x15c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d349      	bcc.n	8006648 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065b4:	4b36      	ldr	r3, [pc, #216]	; (8006690 <xTaskIncrementTick+0x150>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d104      	bne.n	80065c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065be:	4b37      	ldr	r3, [pc, #220]	; (800669c <xTaskIncrementTick+0x15c>)
 80065c0:	f04f 32ff 	mov.w	r2, #4294967295
 80065c4:	601a      	str	r2, [r3, #0]
					break;
 80065c6:	e03f      	b.n	8006648 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065c8:	4b31      	ldr	r3, [pc, #196]	; (8006690 <xTaskIncrementTick+0x150>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d203      	bcs.n	80065e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80065e0:	4a2e      	ldr	r2, [pc, #184]	; (800669c <xTaskIncrementTick+0x15c>)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80065e6:	e02f      	b.n	8006648 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	3304      	adds	r3, #4
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7fe ff99 	bl	8005524 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d004      	beq.n	8006604 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	3318      	adds	r3, #24
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fe ff90 	bl	8005524 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006608:	4b25      	ldr	r3, [pc, #148]	; (80066a0 <xTaskIncrementTick+0x160>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	429a      	cmp	r2, r3
 800660e:	d903      	bls.n	8006618 <xTaskIncrementTick+0xd8>
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006614:	4a22      	ldr	r2, [pc, #136]	; (80066a0 <xTaskIncrementTick+0x160>)
 8006616:	6013      	str	r3, [r2, #0]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800661c:	4613      	mov	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4a1f      	ldr	r2, [pc, #124]	; (80066a4 <xTaskIncrementTick+0x164>)
 8006626:	441a      	add	r2, r3
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	3304      	adds	r3, #4
 800662c:	4619      	mov	r1, r3
 800662e:	4610      	mov	r0, r2
 8006630:	f7fe ff1b 	bl	800546a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006638:	4b1b      	ldr	r3, [pc, #108]	; (80066a8 <xTaskIncrementTick+0x168>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663e:	429a      	cmp	r2, r3
 8006640:	d3b8      	bcc.n	80065b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006642:	2301      	movs	r3, #1
 8006644:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006646:	e7b5      	b.n	80065b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006648:	4b17      	ldr	r3, [pc, #92]	; (80066a8 <xTaskIncrementTick+0x168>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664e:	4915      	ldr	r1, [pc, #84]	; (80066a4 <xTaskIncrementTick+0x164>)
 8006650:	4613      	mov	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	440b      	add	r3, r1
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d901      	bls.n	8006664 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006660:	2301      	movs	r3, #1
 8006662:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006664:	4b11      	ldr	r3, [pc, #68]	; (80066ac <xTaskIncrementTick+0x16c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d007      	beq.n	800667c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800666c:	2301      	movs	r3, #1
 800666e:	617b      	str	r3, [r7, #20]
 8006670:	e004      	b.n	800667c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006672:	4b0f      	ldr	r3, [pc, #60]	; (80066b0 <xTaskIncrementTick+0x170>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	3301      	adds	r3, #1
 8006678:	4a0d      	ldr	r2, [pc, #52]	; (80066b0 <xTaskIncrementTick+0x170>)
 800667a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800667c:	697b      	ldr	r3, [r7, #20]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20001174 	.word	0x20001174
 800668c:	20001150 	.word	0x20001150
 8006690:	20001104 	.word	0x20001104
 8006694:	20001108 	.word	0x20001108
 8006698:	20001164 	.word	0x20001164
 800669c:	2000116c 	.word	0x2000116c
 80066a0:	20001154 	.word	0x20001154
 80066a4:	20000c7c 	.word	0x20000c7c
 80066a8:	20000c78 	.word	0x20000c78
 80066ac:	20001160 	.word	0x20001160
 80066b0:	2000115c 	.word	0x2000115c

080066b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80066ba:	4b28      	ldr	r3, [pc, #160]	; (800675c <vTaskSwitchContext+0xa8>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d003      	beq.n	80066ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80066c2:	4b27      	ldr	r3, [pc, #156]	; (8006760 <vTaskSwitchContext+0xac>)
 80066c4:	2201      	movs	r2, #1
 80066c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80066c8:	e041      	b.n	800674e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80066ca:	4b25      	ldr	r3, [pc, #148]	; (8006760 <vTaskSwitchContext+0xac>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066d0:	4b24      	ldr	r3, [pc, #144]	; (8006764 <vTaskSwitchContext+0xb0>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	60fb      	str	r3, [r7, #12]
 80066d6:	e010      	b.n	80066fa <vTaskSwitchContext+0x46>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10a      	bne.n	80066f4 <vTaskSwitchContext+0x40>
	__asm volatile
 80066de:	f04f 0370 	mov.w	r3, #112	; 0x70
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	607b      	str	r3, [r7, #4]
}
 80066f0:	bf00      	nop
 80066f2:	e7fe      	b.n	80066f2 <vTaskSwitchContext+0x3e>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	3b01      	subs	r3, #1
 80066f8:	60fb      	str	r3, [r7, #12]
 80066fa:	491b      	ldr	r1, [pc, #108]	; (8006768 <vTaskSwitchContext+0xb4>)
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	4613      	mov	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	440b      	add	r3, r1
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d0e4      	beq.n	80066d8 <vTaskSwitchContext+0x24>
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	4613      	mov	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4a13      	ldr	r2, [pc, #76]	; (8006768 <vTaskSwitchContext+0xb4>)
 800671a:	4413      	add	r3, r2
 800671c:	60bb      	str	r3, [r7, #8]
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	605a      	str	r2, [r3, #4]
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	3308      	adds	r3, #8
 8006730:	429a      	cmp	r2, r3
 8006732:	d104      	bne.n	800673e <vTaskSwitchContext+0x8a>
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	605a      	str	r2, [r3, #4]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	4a09      	ldr	r2, [pc, #36]	; (800676c <vTaskSwitchContext+0xb8>)
 8006746:	6013      	str	r3, [r2, #0]
 8006748:	4a06      	ldr	r2, [pc, #24]	; (8006764 <vTaskSwitchContext+0xb0>)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6013      	str	r3, [r2, #0]
}
 800674e:	bf00      	nop
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	20001174 	.word	0x20001174
 8006760:	20001160 	.word	0x20001160
 8006764:	20001154 	.word	0x20001154
 8006768:	20000c7c 	.word	0x20000c7c
 800676c:	20000c78 	.word	0x20000c78

08006770 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10a      	bne.n	8006796 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006780:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	60fb      	str	r3, [r7, #12]
}
 8006792:	bf00      	nop
 8006794:	e7fe      	b.n	8006794 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006796:	4b07      	ldr	r3, [pc, #28]	; (80067b4 <vTaskPlaceOnEventList+0x44>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3318      	adds	r3, #24
 800679c:	4619      	mov	r1, r3
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7fe fe87 	bl	80054b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80067a4:	2101      	movs	r1, #1
 80067a6:	6838      	ldr	r0, [r7, #0]
 80067a8:	f000 fa7e 	bl	8006ca8 <prvAddCurrentTaskToDelayedList>
}
 80067ac:	bf00      	nop
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	20000c78 	.word	0x20000c78

080067b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10a      	bne.n	80067e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80067ca:	f04f 0370 	mov.w	r3, #112	; 0x70
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	617b      	str	r3, [r7, #20]
}
 80067dc:	bf00      	nop
 80067de:	e7fe      	b.n	80067de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067e0:	4b0a      	ldr	r3, [pc, #40]	; (800680c <vTaskPlaceOnEventListRestricted+0x54>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	3318      	adds	r3, #24
 80067e6:	4619      	mov	r1, r3
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f7fe fe3e 	bl	800546a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d002      	beq.n	80067fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80067f4:	f04f 33ff 	mov.w	r3, #4294967295
 80067f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80067fa:	6879      	ldr	r1, [r7, #4]
 80067fc:	68b8      	ldr	r0, [r7, #8]
 80067fe:	f000 fa53 	bl	8006ca8 <prvAddCurrentTaskToDelayedList>
	}
 8006802:	bf00      	nop
 8006804:	3718      	adds	r7, #24
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	20000c78 	.word	0x20000c78

08006810 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10a      	bne.n	800683c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006826:	f04f 0370 	mov.w	r3, #112	; 0x70
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	60fb      	str	r3, [r7, #12]
}
 8006838:	bf00      	nop
 800683a:	e7fe      	b.n	800683a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	3318      	adds	r3, #24
 8006840:	4618      	mov	r0, r3
 8006842:	f7fe fe6f 	bl	8005524 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006846:	4b1e      	ldr	r3, [pc, #120]	; (80068c0 <xTaskRemoveFromEventList+0xb0>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d11d      	bne.n	800688a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	3304      	adds	r3, #4
 8006852:	4618      	mov	r0, r3
 8006854:	f7fe fe66 	bl	8005524 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800685c:	4b19      	ldr	r3, [pc, #100]	; (80068c4 <xTaskRemoveFromEventList+0xb4>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	429a      	cmp	r2, r3
 8006862:	d903      	bls.n	800686c <xTaskRemoveFromEventList+0x5c>
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006868:	4a16      	ldr	r2, [pc, #88]	; (80068c4 <xTaskRemoveFromEventList+0xb4>)
 800686a:	6013      	str	r3, [r2, #0]
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006870:	4613      	mov	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4a13      	ldr	r2, [pc, #76]	; (80068c8 <xTaskRemoveFromEventList+0xb8>)
 800687a:	441a      	add	r2, r3
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	3304      	adds	r3, #4
 8006880:	4619      	mov	r1, r3
 8006882:	4610      	mov	r0, r2
 8006884:	f7fe fdf1 	bl	800546a <vListInsertEnd>
 8006888:	e005      	b.n	8006896 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	3318      	adds	r3, #24
 800688e:	4619      	mov	r1, r3
 8006890:	480e      	ldr	r0, [pc, #56]	; (80068cc <xTaskRemoveFromEventList+0xbc>)
 8006892:	f7fe fdea 	bl	800546a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689a:	4b0d      	ldr	r3, [pc, #52]	; (80068d0 <xTaskRemoveFromEventList+0xc0>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d905      	bls.n	80068b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80068a4:	2301      	movs	r3, #1
 80068a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80068a8:	4b0a      	ldr	r3, [pc, #40]	; (80068d4 <xTaskRemoveFromEventList+0xc4>)
 80068aa:	2201      	movs	r2, #1
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	e001      	b.n	80068b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80068b0:	2300      	movs	r3, #0
 80068b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80068b4:	697b      	ldr	r3, [r7, #20]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3718      	adds	r7, #24
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	20001174 	.word	0x20001174
 80068c4:	20001154 	.word	0x20001154
 80068c8:	20000c7c 	.word	0x20000c7c
 80068cc:	2000110c 	.word	0x2000110c
 80068d0:	20000c78 	.word	0x20000c78
 80068d4:	20001160 	.word	0x20001160

080068d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068e0:	4b06      	ldr	r3, [pc, #24]	; (80068fc <vTaskInternalSetTimeOutState+0x24>)
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068e8:	4b05      	ldr	r3, [pc, #20]	; (8006900 <vTaskInternalSetTimeOutState+0x28>)
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	605a      	str	r2, [r3, #4]
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	20001164 	.word	0x20001164
 8006900:	20001150 	.word	0x20001150

08006904 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b088      	sub	sp, #32
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10a      	bne.n	800692a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006914:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	613b      	str	r3, [r7, #16]
}
 8006926:	bf00      	nop
 8006928:	e7fe      	b.n	8006928 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10a      	bne.n	8006946 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006930:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	60fb      	str	r3, [r7, #12]
}
 8006942:	bf00      	nop
 8006944:	e7fe      	b.n	8006944 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006946:	f000 fe7d 	bl	8007644 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800694a:	4b1d      	ldr	r3, [pc, #116]	; (80069c0 <xTaskCheckForTimeOut+0xbc>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006962:	d102      	bne.n	800696a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006964:	2300      	movs	r3, #0
 8006966:	61fb      	str	r3, [r7, #28]
 8006968:	e023      	b.n	80069b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	4b15      	ldr	r3, [pc, #84]	; (80069c4 <xTaskCheckForTimeOut+0xc0>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	429a      	cmp	r2, r3
 8006974:	d007      	beq.n	8006986 <xTaskCheckForTimeOut+0x82>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	69ba      	ldr	r2, [r7, #24]
 800697c:	429a      	cmp	r2, r3
 800697e:	d302      	bcc.n	8006986 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006980:	2301      	movs	r3, #1
 8006982:	61fb      	str	r3, [r7, #28]
 8006984:	e015      	b.n	80069b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	429a      	cmp	r2, r3
 800698e:	d20b      	bcs.n	80069a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	1ad2      	subs	r2, r2, r3
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7ff ff9b 	bl	80068d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80069a2:	2300      	movs	r3, #0
 80069a4:	61fb      	str	r3, [r7, #28]
 80069a6:	e004      	b.n	80069b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	2200      	movs	r2, #0
 80069ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80069ae:	2301      	movs	r3, #1
 80069b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80069b2:	f000 fe77 	bl	80076a4 <vPortExitCritical>

	return xReturn;
 80069b6:	69fb      	ldr	r3, [r7, #28]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3720      	adds	r7, #32
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	20001150 	.word	0x20001150
 80069c4:	20001164 	.word	0x20001164

080069c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80069c8:	b480      	push	{r7}
 80069ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80069cc:	4b03      	ldr	r3, [pc, #12]	; (80069dc <vTaskMissedYield+0x14>)
 80069ce:	2201      	movs	r2, #1
 80069d0:	601a      	str	r2, [r3, #0]
}
 80069d2:	bf00      	nop
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	20001160 	.word	0x20001160

080069e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069e8:	f000 f854 	bl	8006a94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069ec:	4b07      	ldr	r3, [pc, #28]	; (8006a0c <prvIdleTask+0x2c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d907      	bls.n	8006a04 <prvIdleTask+0x24>
			{
				taskYIELD();
 80069f4:	4b06      	ldr	r3, [pc, #24]	; (8006a10 <prvIdleTask+0x30>)
 80069f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069fa:	601a      	str	r2, [r3, #0]
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8006a04:	f7fa fa6c 	bl	8000ee0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8006a08:	e7ee      	b.n	80069e8 <prvIdleTask+0x8>
 8006a0a:	bf00      	nop
 8006a0c:	20000c7c 	.word	0x20000c7c
 8006a10:	e000ed04 	.word	0xe000ed04

08006a14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	607b      	str	r3, [r7, #4]
 8006a1e:	e00c      	b.n	8006a3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	4613      	mov	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4a12      	ldr	r2, [pc, #72]	; (8006a74 <prvInitialiseTaskLists+0x60>)
 8006a2c:	4413      	add	r3, r2
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fe fcee 	bl	8005410 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3301      	adds	r3, #1
 8006a38:	607b      	str	r3, [r7, #4]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b37      	cmp	r3, #55	; 0x37
 8006a3e:	d9ef      	bls.n	8006a20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a40:	480d      	ldr	r0, [pc, #52]	; (8006a78 <prvInitialiseTaskLists+0x64>)
 8006a42:	f7fe fce5 	bl	8005410 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a46:	480d      	ldr	r0, [pc, #52]	; (8006a7c <prvInitialiseTaskLists+0x68>)
 8006a48:	f7fe fce2 	bl	8005410 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a4c:	480c      	ldr	r0, [pc, #48]	; (8006a80 <prvInitialiseTaskLists+0x6c>)
 8006a4e:	f7fe fcdf 	bl	8005410 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a52:	480c      	ldr	r0, [pc, #48]	; (8006a84 <prvInitialiseTaskLists+0x70>)
 8006a54:	f7fe fcdc 	bl	8005410 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a58:	480b      	ldr	r0, [pc, #44]	; (8006a88 <prvInitialiseTaskLists+0x74>)
 8006a5a:	f7fe fcd9 	bl	8005410 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a5e:	4b0b      	ldr	r3, [pc, #44]	; (8006a8c <prvInitialiseTaskLists+0x78>)
 8006a60:	4a05      	ldr	r2, [pc, #20]	; (8006a78 <prvInitialiseTaskLists+0x64>)
 8006a62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a64:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <prvInitialiseTaskLists+0x7c>)
 8006a66:	4a05      	ldr	r2, [pc, #20]	; (8006a7c <prvInitialiseTaskLists+0x68>)
 8006a68:	601a      	str	r2, [r3, #0]
}
 8006a6a:	bf00      	nop
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	20000c7c 	.word	0x20000c7c
 8006a78:	200010dc 	.word	0x200010dc
 8006a7c:	200010f0 	.word	0x200010f0
 8006a80:	2000110c 	.word	0x2000110c
 8006a84:	20001120 	.word	0x20001120
 8006a88:	20001138 	.word	0x20001138
 8006a8c:	20001104 	.word	0x20001104
 8006a90:	20001108 	.word	0x20001108

08006a94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a9a:	e019      	b.n	8006ad0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a9c:	f000 fdd2 	bl	8007644 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aa0:	4b10      	ldr	r3, [pc, #64]	; (8006ae4 <prvCheckTasksWaitingTermination+0x50>)
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fe fd39 	bl	8005524 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ab2:	4b0d      	ldr	r3, [pc, #52]	; (8006ae8 <prvCheckTasksWaitingTermination+0x54>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	4a0b      	ldr	r2, [pc, #44]	; (8006ae8 <prvCheckTasksWaitingTermination+0x54>)
 8006aba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006abc:	4b0b      	ldr	r3, [pc, #44]	; (8006aec <prvCheckTasksWaitingTermination+0x58>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	4a0a      	ldr	r2, [pc, #40]	; (8006aec <prvCheckTasksWaitingTermination+0x58>)
 8006ac4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ac6:	f000 fded 	bl	80076a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f810 	bl	8006af0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ad0:	4b06      	ldr	r3, [pc, #24]	; (8006aec <prvCheckTasksWaitingTermination+0x58>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e1      	bne.n	8006a9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ad8:	bf00      	nop
 8006ada:	bf00      	nop
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20001120 	.word	0x20001120
 8006ae8:	2000114c 	.word	0x2000114c
 8006aec:	20001134 	.word	0x20001134

08006af0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d108      	bne.n	8006b14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 ff8a 	bl	8007a20 <vPortFree>
				vPortFree( pxTCB );
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 ff87 	bl	8007a20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b12:	e018      	b.n	8006b46 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d103      	bne.n	8006b26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 ff7e 	bl	8007a20 <vPortFree>
	}
 8006b24:	e00f      	b.n	8006b46 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d00a      	beq.n	8006b46 <prvDeleteTCB+0x56>
	__asm volatile
 8006b30:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	60fb      	str	r3, [r7, #12]
}
 8006b42:	bf00      	nop
 8006b44:	e7fe      	b.n	8006b44 <prvDeleteTCB+0x54>
	}
 8006b46:	bf00      	nop
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
	...

08006b50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b56:	4b0c      	ldr	r3, [pc, #48]	; (8006b88 <prvResetNextTaskUnblockTime+0x38>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d104      	bne.n	8006b6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b60:	4b0a      	ldr	r3, [pc, #40]	; (8006b8c <prvResetNextTaskUnblockTime+0x3c>)
 8006b62:	f04f 32ff 	mov.w	r2, #4294967295
 8006b66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b68:	e008      	b.n	8006b7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b6a:	4b07      	ldr	r3, [pc, #28]	; (8006b88 <prvResetNextTaskUnblockTime+0x38>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	4a04      	ldr	r2, [pc, #16]	; (8006b8c <prvResetNextTaskUnblockTime+0x3c>)
 8006b7a:	6013      	str	r3, [r2, #0]
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	20001104 	.word	0x20001104
 8006b8c:	2000116c 	.word	0x2000116c

08006b90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b96:	4b0b      	ldr	r3, [pc, #44]	; (8006bc4 <xTaskGetSchedulerState+0x34>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d102      	bne.n	8006ba4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	607b      	str	r3, [r7, #4]
 8006ba2:	e008      	b.n	8006bb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ba4:	4b08      	ldr	r3, [pc, #32]	; (8006bc8 <xTaskGetSchedulerState+0x38>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d102      	bne.n	8006bb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006bac:	2302      	movs	r3, #2
 8006bae:	607b      	str	r3, [r7, #4]
 8006bb0:	e001      	b.n	8006bb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006bb6:	687b      	ldr	r3, [r7, #4]
	}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr
 8006bc4:	20001158 	.word	0x20001158
 8006bc8:	20001174 	.word	0x20001174

08006bcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d056      	beq.n	8006c90 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006be2:	4b2e      	ldr	r3, [pc, #184]	; (8006c9c <xTaskPriorityDisinherit+0xd0>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d00a      	beq.n	8006c02 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006bec:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006bf0:	f383 8811 	msr	BASEPRI, r3
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	60fb      	str	r3, [r7, #12]
}
 8006bfe:	bf00      	nop
 8006c00:	e7fe      	b.n	8006c00 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10a      	bne.n	8006c20 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006c0a:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	60bb      	str	r3, [r7, #8]
}
 8006c1c:	bf00      	nop
 8006c1e:	e7fe      	b.n	8006c1e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c24:	1e5a      	subs	r2, r3, #1
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d02c      	beq.n	8006c90 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d128      	bne.n	8006c90 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	3304      	adds	r3, #4
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fe fc6e 	bl	8005524 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c60:	4b0f      	ldr	r3, [pc, #60]	; (8006ca0 <xTaskPriorityDisinherit+0xd4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d903      	bls.n	8006c70 <xTaskPriorityDisinherit+0xa4>
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6c:	4a0c      	ldr	r2, [pc, #48]	; (8006ca0 <xTaskPriorityDisinherit+0xd4>)
 8006c6e:	6013      	str	r3, [r2, #0]
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c74:	4613      	mov	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4a09      	ldr	r2, [pc, #36]	; (8006ca4 <xTaskPriorityDisinherit+0xd8>)
 8006c7e:	441a      	add	r2, r3
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	3304      	adds	r3, #4
 8006c84:	4619      	mov	r1, r3
 8006c86:	4610      	mov	r0, r2
 8006c88:	f7fe fbef 	bl	800546a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c90:	697b      	ldr	r3, [r7, #20]
	}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20000c78 	.word	0x20000c78
 8006ca0:	20001154 	.word	0x20001154
 8006ca4:	20000c7c 	.word	0x20000c7c

08006ca8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006cb2:	4b21      	ldr	r3, [pc, #132]	; (8006d38 <prvAddCurrentTaskToDelayedList+0x90>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cb8:	4b20      	ldr	r3, [pc, #128]	; (8006d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7fe fc30 	bl	8005524 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cca:	d10a      	bne.n	8006ce2 <prvAddCurrentTaskToDelayedList+0x3a>
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d007      	beq.n	8006ce2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cd2:	4b1a      	ldr	r3, [pc, #104]	; (8006d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	3304      	adds	r3, #4
 8006cd8:	4619      	mov	r1, r3
 8006cda:	4819      	ldr	r0, [pc, #100]	; (8006d40 <prvAddCurrentTaskToDelayedList+0x98>)
 8006cdc:	f7fe fbc5 	bl	800546a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ce0:	e026      	b.n	8006d30 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006cea:	4b14      	ldr	r3, [pc, #80]	; (8006d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d209      	bcs.n	8006d0e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cfa:	4b12      	ldr	r3, [pc, #72]	; (8006d44 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	4b0f      	ldr	r3, [pc, #60]	; (8006d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3304      	adds	r3, #4
 8006d04:	4619      	mov	r1, r3
 8006d06:	4610      	mov	r0, r2
 8006d08:	f7fe fbd3 	bl	80054b2 <vListInsert>
}
 8006d0c:	e010      	b.n	8006d30 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d0e:	4b0e      	ldr	r3, [pc, #56]	; (8006d48 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	4b0a      	ldr	r3, [pc, #40]	; (8006d3c <prvAddCurrentTaskToDelayedList+0x94>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3304      	adds	r3, #4
 8006d18:	4619      	mov	r1, r3
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	f7fe fbc9 	bl	80054b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d20:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d202      	bcs.n	8006d30 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006d2a:	4a08      	ldr	r2, [pc, #32]	; (8006d4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	6013      	str	r3, [r2, #0]
}
 8006d30:	bf00      	nop
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	20001150 	.word	0x20001150
 8006d3c:	20000c78 	.word	0x20000c78
 8006d40:	20001138 	.word	0x20001138
 8006d44:	20001108 	.word	0x20001108
 8006d48:	20001104 	.word	0x20001104
 8006d4c:	2000116c 	.word	0x2000116c

08006d50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b08a      	sub	sp, #40	; 0x28
 8006d54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d56:	2300      	movs	r3, #0
 8006d58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d5a:	f000 fb07 	bl	800736c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d5e:	4b1c      	ldr	r3, [pc, #112]	; (8006dd0 <xTimerCreateTimerTask+0x80>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d021      	beq.n	8006daa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d66:	2300      	movs	r3, #0
 8006d68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d6e:	1d3a      	adds	r2, r7, #4
 8006d70:	f107 0108 	add.w	r1, r7, #8
 8006d74:	f107 030c 	add.w	r3, r7, #12
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7fe fb2f 	bl	80053dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d7e:	6879      	ldr	r1, [r7, #4]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	9202      	str	r2, [sp, #8]
 8006d86:	9301      	str	r3, [sp, #4]
 8006d88:	2302      	movs	r3, #2
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	460a      	mov	r2, r1
 8006d90:	4910      	ldr	r1, [pc, #64]	; (8006dd4 <xTimerCreateTimerTask+0x84>)
 8006d92:	4811      	ldr	r0, [pc, #68]	; (8006dd8 <xTimerCreateTimerTask+0x88>)
 8006d94:	f7ff f8dc 	bl	8005f50 <xTaskCreateStatic>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	4a10      	ldr	r2, [pc, #64]	; (8006ddc <xTimerCreateTimerTask+0x8c>)
 8006d9c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d9e:	4b0f      	ldr	r3, [pc, #60]	; (8006ddc <xTimerCreateTimerTask+0x8c>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006da6:	2301      	movs	r3, #1
 8006da8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d10a      	bne.n	8006dc6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006db0:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	613b      	str	r3, [r7, #16]
}
 8006dc2:	bf00      	nop
 8006dc4:	e7fe      	b.n	8006dc4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006dc6:	697b      	ldr	r3, [r7, #20]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3718      	adds	r7, #24
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	200011a8 	.word	0x200011a8
 8006dd4:	08007d8c 	.word	0x08007d8c
 8006dd8:	08006f15 	.word	0x08006f15
 8006ddc:	200011ac 	.word	0x200011ac

08006de0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b08a      	sub	sp, #40	; 0x28
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
 8006dec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006dee:	2300      	movs	r3, #0
 8006df0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10a      	bne.n	8006e0e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006df8:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006dfc:	f383 8811 	msr	BASEPRI, r3
 8006e00:	f3bf 8f6f 	isb	sy
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	623b      	str	r3, [r7, #32]
}
 8006e0a:	bf00      	nop
 8006e0c:	e7fe      	b.n	8006e0c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006e0e:	4b1a      	ldr	r3, [pc, #104]	; (8006e78 <xTimerGenericCommand+0x98>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d02a      	beq.n	8006e6c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	2b05      	cmp	r3, #5
 8006e26:	dc18      	bgt.n	8006e5a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e28:	f7ff feb2 	bl	8006b90 <xTaskGetSchedulerState>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d109      	bne.n	8006e46 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e32:	4b11      	ldr	r3, [pc, #68]	; (8006e78 <xTimerGenericCommand+0x98>)
 8006e34:	6818      	ldr	r0, [r3, #0]
 8006e36:	f107 0110 	add.w	r1, r7, #16
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e3e:	f7fe fc9f 	bl	8005780 <xQueueGenericSend>
 8006e42:	6278      	str	r0, [r7, #36]	; 0x24
 8006e44:	e012      	b.n	8006e6c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e46:	4b0c      	ldr	r3, [pc, #48]	; (8006e78 <xTimerGenericCommand+0x98>)
 8006e48:	6818      	ldr	r0, [r3, #0]
 8006e4a:	f107 0110 	add.w	r1, r7, #16
 8006e4e:	2300      	movs	r3, #0
 8006e50:	2200      	movs	r2, #0
 8006e52:	f7fe fc95 	bl	8005780 <xQueueGenericSend>
 8006e56:	6278      	str	r0, [r7, #36]	; 0x24
 8006e58:	e008      	b.n	8006e6c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e5a:	4b07      	ldr	r3, [pc, #28]	; (8006e78 <xTimerGenericCommand+0x98>)
 8006e5c:	6818      	ldr	r0, [r3, #0]
 8006e5e:	f107 0110 	add.w	r1, r7, #16
 8006e62:	2300      	movs	r3, #0
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	f7fe fd89 	bl	800597c <xQueueGenericSendFromISR>
 8006e6a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3728      	adds	r7, #40	; 0x28
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	200011a8 	.word	0x200011a8

08006e7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b088      	sub	sp, #32
 8006e80:	af02      	add	r7, sp, #8
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e86:	4b22      	ldr	r3, [pc, #136]	; (8006f10 <prvProcessExpiredTimer+0x94>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	3304      	adds	r3, #4
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7fe fb45 	bl	8005524 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ea0:	f003 0304 	and.w	r3, r3, #4
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d022      	beq.n	8006eee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	699a      	ldr	r2, [r3, #24]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	18d1      	adds	r1, r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	683a      	ldr	r2, [r7, #0]
 8006eb4:	6978      	ldr	r0, [r7, #20]
 8006eb6:	f000 f8d1 	bl	800705c <prvInsertTimerInActiveList>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d01f      	beq.n	8006f00 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	9300      	str	r3, [sp, #0]
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	2100      	movs	r1, #0
 8006eca:	6978      	ldr	r0, [r7, #20]
 8006ecc:	f7ff ff88 	bl	8006de0 <xTimerGenericCommand>
 8006ed0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d113      	bne.n	8006f00 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006ed8:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006edc:	f383 8811 	msr	BASEPRI, r3
 8006ee0:	f3bf 8f6f 	isb	sy
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	60fb      	str	r3, [r7, #12]
}
 8006eea:	bf00      	nop
 8006eec:	e7fe      	b.n	8006eec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ef4:	f023 0301 	bic.w	r3, r3, #1
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	6978      	ldr	r0, [r7, #20]
 8006f06:	4798      	blx	r3
}
 8006f08:	bf00      	nop
 8006f0a:	3718      	adds	r7, #24
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	200011a0 	.word	0x200011a0

08006f14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f1c:	f107 0308 	add.w	r3, r7, #8
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 f857 	bl	8006fd4 <prvGetNextExpireTime>
 8006f26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f000 f803 	bl	8006f38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f32:	f000 f8d5 	bl	80070e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f36:	e7f1      	b.n	8006f1c <prvTimerTask+0x8>

08006f38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f42:	f7ff fa41 	bl	80063c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f46:	f107 0308 	add.w	r3, r7, #8
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f000 f866 	bl	800701c <prvSampleTimeNow>
 8006f50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d130      	bne.n	8006fba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10a      	bne.n	8006f74 <prvProcessTimerOrBlockTask+0x3c>
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d806      	bhi.n	8006f74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f66:	f7ff fa3d 	bl	80063e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f6a:	68f9      	ldr	r1, [r7, #12]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f7ff ff85 	bl	8006e7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f72:	e024      	b.n	8006fbe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d008      	beq.n	8006f8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f7a:	4b13      	ldr	r3, [pc, #76]	; (8006fc8 <prvProcessTimerOrBlockTask+0x90>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <prvProcessTimerOrBlockTask+0x50>
 8006f84:	2301      	movs	r3, #1
 8006f86:	e000      	b.n	8006f8a <prvProcessTimerOrBlockTask+0x52>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f8c:	4b0f      	ldr	r3, [pc, #60]	; (8006fcc <prvProcessTimerOrBlockTask+0x94>)
 8006f8e:	6818      	ldr	r0, [r3, #0]
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	4619      	mov	r1, r3
 8006f9a:	f7fe ffa5 	bl	8005ee8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f9e:	f7ff fa21 	bl	80063e4 <xTaskResumeAll>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10a      	bne.n	8006fbe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006fa8:	4b09      	ldr	r3, [pc, #36]	; (8006fd0 <prvProcessTimerOrBlockTask+0x98>)
 8006faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fae:	601a      	str	r2, [r3, #0]
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	f3bf 8f6f 	isb	sy
}
 8006fb8:	e001      	b.n	8006fbe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006fba:	f7ff fa13 	bl	80063e4 <xTaskResumeAll>
}
 8006fbe:	bf00      	nop
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	200011a4 	.word	0x200011a4
 8006fcc:	200011a8 	.word	0x200011a8
 8006fd0:	e000ed04 	.word	0xe000ed04

08006fd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006fdc:	4b0e      	ldr	r3, [pc, #56]	; (8007018 <prvGetNextExpireTime+0x44>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <prvGetNextExpireTime+0x16>
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	e000      	b.n	8006fec <prvGetNextExpireTime+0x18>
 8006fea:	2200      	movs	r2, #0
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d105      	bne.n	8007004 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ff8:	4b07      	ldr	r3, [pc, #28]	; (8007018 <prvGetNextExpireTime+0x44>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	60fb      	str	r3, [r7, #12]
 8007002:	e001      	b.n	8007008 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007004:	2300      	movs	r3, #0
 8007006:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007008:	68fb      	ldr	r3, [r7, #12]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	200011a0 	.word	0x200011a0

0800701c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007024:	f7ff fa7c 	bl	8006520 <xTaskGetTickCount>
 8007028:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800702a:	4b0b      	ldr	r3, [pc, #44]	; (8007058 <prvSampleTimeNow+0x3c>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	429a      	cmp	r2, r3
 8007032:	d205      	bcs.n	8007040 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007034:	f000 f936 	bl	80072a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	601a      	str	r2, [r3, #0]
 800703e:	e002      	b.n	8007046 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007046:	4a04      	ldr	r2, [pc, #16]	; (8007058 <prvSampleTimeNow+0x3c>)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800704c:	68fb      	ldr	r3, [r7, #12]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	200011b0 	.word	0x200011b0

0800705c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
 8007068:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800706a:	2300      	movs	r3, #0
 800706c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	429a      	cmp	r2, r3
 8007080:	d812      	bhi.n	80070a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	1ad2      	subs	r2, r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	429a      	cmp	r2, r3
 800708e:	d302      	bcc.n	8007096 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007090:	2301      	movs	r3, #1
 8007092:	617b      	str	r3, [r7, #20]
 8007094:	e01b      	b.n	80070ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007096:	4b10      	ldr	r3, [pc, #64]	; (80070d8 <prvInsertTimerInActiveList+0x7c>)
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	3304      	adds	r3, #4
 800709e:	4619      	mov	r1, r3
 80070a0:	4610      	mov	r0, r2
 80070a2:	f7fe fa06 	bl	80054b2 <vListInsert>
 80070a6:	e012      	b.n	80070ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d206      	bcs.n	80070be <prvInsertTimerInActiveList+0x62>
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d302      	bcc.n	80070be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80070b8:	2301      	movs	r3, #1
 80070ba:	617b      	str	r3, [r7, #20]
 80070bc:	e007      	b.n	80070ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070be:	4b07      	ldr	r3, [pc, #28]	; (80070dc <prvInsertTimerInActiveList+0x80>)
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	3304      	adds	r3, #4
 80070c6:	4619      	mov	r1, r3
 80070c8:	4610      	mov	r0, r2
 80070ca:	f7fe f9f2 	bl	80054b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80070ce:	697b      	ldr	r3, [r7, #20]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3718      	adds	r7, #24
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	200011a4 	.word	0x200011a4
 80070dc:	200011a0 	.word	0x200011a0

080070e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b08e      	sub	sp, #56	; 0x38
 80070e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070e6:	e0ca      	b.n	800727e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	da18      	bge.n	8007120 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80070ee:	1d3b      	adds	r3, r7, #4
 80070f0:	3304      	adds	r3, #4
 80070f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80070f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10a      	bne.n	8007110 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80070fa:	f04f 0370 	mov.w	r3, #112	; 0x70
 80070fe:	f383 8811 	msr	BASEPRI, r3
 8007102:	f3bf 8f6f 	isb	sy
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	61fb      	str	r3, [r7, #28]
}
 800710c:	bf00      	nop
 800710e:	e7fe      	b.n	800710e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007116:	6850      	ldr	r0, [r2, #4]
 8007118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800711a:	6892      	ldr	r2, [r2, #8]
 800711c:	4611      	mov	r1, r2
 800711e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	f2c0 80ab 	blt.w	800727e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800712c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712e:	695b      	ldr	r3, [r3, #20]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d004      	beq.n	800713e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007136:	3304      	adds	r3, #4
 8007138:	4618      	mov	r0, r3
 800713a:	f7fe f9f3 	bl	8005524 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800713e:	463b      	mov	r3, r7
 8007140:	4618      	mov	r0, r3
 8007142:	f7ff ff6b 	bl	800701c <prvSampleTimeNow>
 8007146:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b09      	cmp	r3, #9
 800714c:	f200 8096 	bhi.w	800727c <prvProcessReceivedCommands+0x19c>
 8007150:	a201      	add	r2, pc, #4	; (adr r2, 8007158 <prvProcessReceivedCommands+0x78>)
 8007152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007156:	bf00      	nop
 8007158:	08007181 	.word	0x08007181
 800715c:	08007181 	.word	0x08007181
 8007160:	08007181 	.word	0x08007181
 8007164:	080071f5 	.word	0x080071f5
 8007168:	08007209 	.word	0x08007209
 800716c:	08007253 	.word	0x08007253
 8007170:	08007181 	.word	0x08007181
 8007174:	08007181 	.word	0x08007181
 8007178:	080071f5 	.word	0x080071f5
 800717c:	08007209 	.word	0x08007209
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007182:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007186:	f043 0301 	orr.w	r3, r3, #1
 800718a:	b2da      	uxtb	r2, r3
 800718c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	18d1      	adds	r1, r2, r3
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800719e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071a0:	f7ff ff5c 	bl	800705c <prvInsertTimerInActiveList>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d069      	beq.n	800727e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071b8:	f003 0304 	and.w	r3, r3, #4
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d05e      	beq.n	800727e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	441a      	add	r2, r3
 80071c8:	2300      	movs	r3, #0
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	2300      	movs	r3, #0
 80071ce:	2100      	movs	r1, #0
 80071d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071d2:	f7ff fe05 	bl	8006de0 <xTimerGenericCommand>
 80071d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80071d8:	6a3b      	ldr	r3, [r7, #32]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d14f      	bne.n	800727e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80071de:	f04f 0370 	mov.w	r3, #112	; 0x70
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	61bb      	str	r3, [r7, #24]
}
 80071f0:	bf00      	nop
 80071f2:	e7fe      	b.n	80071f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071fa:	f023 0301 	bic.w	r3, r3, #1
 80071fe:	b2da      	uxtb	r2, r3
 8007200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007202:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007206:	e03a      	b.n	800727e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800720e:	f043 0301 	orr.w	r3, r3, #1
 8007212:	b2da      	uxtb	r2, r3
 8007214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007216:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10a      	bne.n	800723e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007228:	f04f 0370 	mov.w	r3, #112	; 0x70
 800722c:	f383 8811 	msr	BASEPRI, r3
 8007230:	f3bf 8f6f 	isb	sy
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	617b      	str	r3, [r7, #20]
}
 800723a:	bf00      	nop
 800723c:	e7fe      	b.n	800723c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800723e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007240:	699a      	ldr	r2, [r3, #24]
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007244:	18d1      	adds	r1, r2, r3
 8007246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800724a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800724c:	f7ff ff06 	bl	800705c <prvInsertTimerInActiveList>
					break;
 8007250:	e015      	b.n	800727e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007254:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007258:	f003 0302 	and.w	r3, r3, #2
 800725c:	2b00      	cmp	r3, #0
 800725e:	d103      	bne.n	8007268 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007262:	f000 fbdd 	bl	8007a20 <vPortFree>
 8007266:	e00a      	b.n	800727e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800726e:	f023 0301 	bic.w	r3, r3, #1
 8007272:	b2da      	uxtb	r2, r3
 8007274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007276:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800727a:	e000      	b.n	800727e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800727c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800727e:	4b08      	ldr	r3, [pc, #32]	; (80072a0 <prvProcessReceivedCommands+0x1c0>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	1d39      	adds	r1, r7, #4
 8007284:	2200      	movs	r2, #0
 8007286:	4618      	mov	r0, r3
 8007288:	f7fe fc14 	bl	8005ab4 <xQueueReceive>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	f47f af2a 	bne.w	80070e8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007294:	bf00      	nop
 8007296:	bf00      	nop
 8007298:	3730      	adds	r7, #48	; 0x30
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	200011a8 	.word	0x200011a8

080072a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b088      	sub	sp, #32
 80072a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072aa:	e048      	b.n	800733e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072ac:	4b2d      	ldr	r3, [pc, #180]	; (8007364 <prvSwitchTimerLists+0xc0>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072b6:	4b2b      	ldr	r3, [pc, #172]	; (8007364 <prvSwitchTimerLists+0xc0>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	3304      	adds	r3, #4
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7fe f92d 	bl	8005524 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072d8:	f003 0304 	and.w	r3, r3, #4
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d02e      	beq.n	800733e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	4413      	add	r3, r2
 80072e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80072ea:	68ba      	ldr	r2, [r7, #8]
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d90e      	bls.n	8007310 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072fe:	4b19      	ldr	r3, [pc, #100]	; (8007364 <prvSwitchTimerLists+0xc0>)
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	3304      	adds	r3, #4
 8007306:	4619      	mov	r1, r3
 8007308:	4610      	mov	r0, r2
 800730a:	f7fe f8d2 	bl	80054b2 <vListInsert>
 800730e:	e016      	b.n	800733e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007310:	2300      	movs	r3, #0
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	2300      	movs	r3, #0
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	2100      	movs	r1, #0
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f7ff fd60 	bl	8006de0 <xTimerGenericCommand>
 8007320:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10a      	bne.n	800733e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007328:	f04f 0370 	mov.w	r3, #112	; 0x70
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	603b      	str	r3, [r7, #0]
}
 800733a:	bf00      	nop
 800733c:	e7fe      	b.n	800733c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800733e:	4b09      	ldr	r3, [pc, #36]	; (8007364 <prvSwitchTimerLists+0xc0>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1b1      	bne.n	80072ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007348:	4b06      	ldr	r3, [pc, #24]	; (8007364 <prvSwitchTimerLists+0xc0>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800734e:	4b06      	ldr	r3, [pc, #24]	; (8007368 <prvSwitchTimerLists+0xc4>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a04      	ldr	r2, [pc, #16]	; (8007364 <prvSwitchTimerLists+0xc0>)
 8007354:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007356:	4a04      	ldr	r2, [pc, #16]	; (8007368 <prvSwitchTimerLists+0xc4>)
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	6013      	str	r3, [r2, #0]
}
 800735c:	bf00      	nop
 800735e:	3718      	adds	r7, #24
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	200011a0 	.word	0x200011a0
 8007368:	200011a4 	.word	0x200011a4

0800736c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007372:	f000 f967 	bl	8007644 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007376:	4b15      	ldr	r3, [pc, #84]	; (80073cc <prvCheckForValidListAndQueue+0x60>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d120      	bne.n	80073c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800737e:	4814      	ldr	r0, [pc, #80]	; (80073d0 <prvCheckForValidListAndQueue+0x64>)
 8007380:	f7fe f846 	bl	8005410 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007384:	4813      	ldr	r0, [pc, #76]	; (80073d4 <prvCheckForValidListAndQueue+0x68>)
 8007386:	f7fe f843 	bl	8005410 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800738a:	4b13      	ldr	r3, [pc, #76]	; (80073d8 <prvCheckForValidListAndQueue+0x6c>)
 800738c:	4a10      	ldr	r2, [pc, #64]	; (80073d0 <prvCheckForValidListAndQueue+0x64>)
 800738e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007390:	4b12      	ldr	r3, [pc, #72]	; (80073dc <prvCheckForValidListAndQueue+0x70>)
 8007392:	4a10      	ldr	r2, [pc, #64]	; (80073d4 <prvCheckForValidListAndQueue+0x68>)
 8007394:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007396:	2300      	movs	r3, #0
 8007398:	9300      	str	r3, [sp, #0]
 800739a:	4b11      	ldr	r3, [pc, #68]	; (80073e0 <prvCheckForValidListAndQueue+0x74>)
 800739c:	4a11      	ldr	r2, [pc, #68]	; (80073e4 <prvCheckForValidListAndQueue+0x78>)
 800739e:	2110      	movs	r1, #16
 80073a0:	200a      	movs	r0, #10
 80073a2:	f7fe f951 	bl	8005648 <xQueueGenericCreateStatic>
 80073a6:	4603      	mov	r3, r0
 80073a8:	4a08      	ldr	r2, [pc, #32]	; (80073cc <prvCheckForValidListAndQueue+0x60>)
 80073aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80073ac:	4b07      	ldr	r3, [pc, #28]	; (80073cc <prvCheckForValidListAndQueue+0x60>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d005      	beq.n	80073c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80073b4:	4b05      	ldr	r3, [pc, #20]	; (80073cc <prvCheckForValidListAndQueue+0x60>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	490b      	ldr	r1, [pc, #44]	; (80073e8 <prvCheckForValidListAndQueue+0x7c>)
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7fe fd6a 	bl	8005e94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073c0:	f000 f970 	bl	80076a4 <vPortExitCritical>
}
 80073c4:	bf00      	nop
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	200011a8 	.word	0x200011a8
 80073d0:	20001178 	.word	0x20001178
 80073d4:	2000118c 	.word	0x2000118c
 80073d8:	200011a0 	.word	0x200011a0
 80073dc:	200011a4 	.word	0x200011a4
 80073e0:	20001254 	.word	0x20001254
 80073e4:	200011b4 	.word	0x200011b4
 80073e8:	08007d94 	.word	0x08007d94

080073ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	3b04      	subs	r3, #4
 80073fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007404:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	3b04      	subs	r3, #4
 800740a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f023 0201 	bic.w	r2, r3, #1
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	3b04      	subs	r3, #4
 800741a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800741c:	4a0c      	ldr	r2, [pc, #48]	; (8007450 <pxPortInitialiseStack+0x64>)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	3b14      	subs	r3, #20
 8007426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	3b04      	subs	r3, #4
 8007432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f06f 0202 	mvn.w	r2, #2
 800743a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	3b20      	subs	r3, #32
 8007440:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007442:	68fb      	ldr	r3, [r7, #12]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	08007455 	.word	0x08007455

08007454 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800745a:	2300      	movs	r3, #0
 800745c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800745e:	4b12      	ldr	r3, [pc, #72]	; (80074a8 <prvTaskExitError+0x54>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007466:	d00a      	beq.n	800747e <prvTaskExitError+0x2a>
	__asm volatile
 8007468:	f04f 0370 	mov.w	r3, #112	; 0x70
 800746c:	f383 8811 	msr	BASEPRI, r3
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	60fb      	str	r3, [r7, #12]
}
 800747a:	bf00      	nop
 800747c:	e7fe      	b.n	800747c <prvTaskExitError+0x28>
	__asm volatile
 800747e:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	60bb      	str	r3, [r7, #8]
}
 8007490:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007492:	bf00      	nop
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d0fc      	beq.n	8007494 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800749a:	bf00      	nop
 800749c:	bf00      	nop
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	2000000c 	.word	0x2000000c
 80074ac:	00000000 	.word	0x00000000

080074b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074b0:	4b07      	ldr	r3, [pc, #28]	; (80074d0 <pxCurrentTCBConst2>)
 80074b2:	6819      	ldr	r1, [r3, #0]
 80074b4:	6808      	ldr	r0, [r1, #0]
 80074b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ba:	f380 8809 	msr	PSP, r0
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f04f 0000 	mov.w	r0, #0
 80074c6:	f380 8811 	msr	BASEPRI, r0
 80074ca:	4770      	bx	lr
 80074cc:	f3af 8000 	nop.w

080074d0 <pxCurrentTCBConst2>:
 80074d0:	20000c78 	.word	0x20000c78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop

080074d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074d8:	4808      	ldr	r0, [pc, #32]	; (80074fc <prvPortStartFirstTask+0x24>)
 80074da:	6800      	ldr	r0, [r0, #0]
 80074dc:	6800      	ldr	r0, [r0, #0]
 80074de:	f380 8808 	msr	MSP, r0
 80074e2:	f04f 0000 	mov.w	r0, #0
 80074e6:	f380 8814 	msr	CONTROL, r0
 80074ea:	b662      	cpsie	i
 80074ec:	b661      	cpsie	f
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	df00      	svc	0
 80074f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074fa:	bf00      	nop
 80074fc:	e000ed08 	.word	0xe000ed08

08007500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007506:	4b46      	ldr	r3, [pc, #280]	; (8007620 <xPortStartScheduler+0x120>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a46      	ldr	r2, [pc, #280]	; (8007624 <xPortStartScheduler+0x124>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d10a      	bne.n	8007526 <xPortStartScheduler+0x26>
	__asm volatile
 8007510:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	613b      	str	r3, [r7, #16]
}
 8007522:	bf00      	nop
 8007524:	e7fe      	b.n	8007524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007526:	4b3e      	ldr	r3, [pc, #248]	; (8007620 <xPortStartScheduler+0x120>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a3f      	ldr	r2, [pc, #252]	; (8007628 <xPortStartScheduler+0x128>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d10a      	bne.n	8007546 <xPortStartScheduler+0x46>
	__asm volatile
 8007530:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	60fb      	str	r3, [r7, #12]
}
 8007542:	bf00      	nop
 8007544:	e7fe      	b.n	8007544 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007546:	4b39      	ldr	r3, [pc, #228]	; (800762c <xPortStartScheduler+0x12c>)
 8007548:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	b2db      	uxtb	r3, r3
 8007550:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	22ff      	movs	r2, #255	; 0xff
 8007556:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	b2db      	uxtb	r3, r3
 800755e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007560:	78fb      	ldrb	r3, [r7, #3]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007568:	b2da      	uxtb	r2, r3
 800756a:	4b31      	ldr	r3, [pc, #196]	; (8007630 <xPortStartScheduler+0x130>)
 800756c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800756e:	4b31      	ldr	r3, [pc, #196]	; (8007634 <xPortStartScheduler+0x134>)
 8007570:	2207      	movs	r2, #7
 8007572:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007574:	e009      	b.n	800758a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007576:	4b2f      	ldr	r3, [pc, #188]	; (8007634 <xPortStartScheduler+0x134>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	3b01      	subs	r3, #1
 800757c:	4a2d      	ldr	r2, [pc, #180]	; (8007634 <xPortStartScheduler+0x134>)
 800757e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007580:	78fb      	ldrb	r3, [r7, #3]
 8007582:	b2db      	uxtb	r3, r3
 8007584:	005b      	lsls	r3, r3, #1
 8007586:	b2db      	uxtb	r3, r3
 8007588:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800758a:	78fb      	ldrb	r3, [r7, #3]
 800758c:	b2db      	uxtb	r3, r3
 800758e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007592:	2b80      	cmp	r3, #128	; 0x80
 8007594:	d0ef      	beq.n	8007576 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007596:	4b27      	ldr	r3, [pc, #156]	; (8007634 <xPortStartScheduler+0x134>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f1c3 0307 	rsb	r3, r3, #7
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d00a      	beq.n	80075b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80075a2:	f04f 0370 	mov.w	r3, #112	; 0x70
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	60bb      	str	r3, [r7, #8]
}
 80075b4:	bf00      	nop
 80075b6:	e7fe      	b.n	80075b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075b8:	4b1e      	ldr	r3, [pc, #120]	; (8007634 <xPortStartScheduler+0x134>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	021b      	lsls	r3, r3, #8
 80075be:	4a1d      	ldr	r2, [pc, #116]	; (8007634 <xPortStartScheduler+0x134>)
 80075c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075c2:	4b1c      	ldr	r3, [pc, #112]	; (8007634 <xPortStartScheduler+0x134>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075ca:	4a1a      	ldr	r2, [pc, #104]	; (8007634 <xPortStartScheduler+0x134>)
 80075cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075d6:	4b18      	ldr	r3, [pc, #96]	; (8007638 <xPortStartScheduler+0x138>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a17      	ldr	r2, [pc, #92]	; (8007638 <xPortStartScheduler+0x138>)
 80075dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075e2:	4b15      	ldr	r3, [pc, #84]	; (8007638 <xPortStartScheduler+0x138>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a14      	ldr	r2, [pc, #80]	; (8007638 <xPortStartScheduler+0x138>)
 80075e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80075ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075ee:	f000 f8dd 	bl	80077ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075f2:	4b12      	ldr	r3, [pc, #72]	; (800763c <xPortStartScheduler+0x13c>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80075f8:	f000 f8fc 	bl	80077f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80075fc:	4b10      	ldr	r3, [pc, #64]	; (8007640 <xPortStartScheduler+0x140>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a0f      	ldr	r2, [pc, #60]	; (8007640 <xPortStartScheduler+0x140>)
 8007602:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007606:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007608:	f7ff ff66 	bl	80074d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800760c:	f7ff f852 	bl	80066b4 <vTaskSwitchContext>
	prvTaskExitError();
 8007610:	f7ff ff20 	bl	8007454 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	e000ed00 	.word	0xe000ed00
 8007624:	410fc271 	.word	0x410fc271
 8007628:	410fc270 	.word	0x410fc270
 800762c:	e000e400 	.word	0xe000e400
 8007630:	200012a4 	.word	0x200012a4
 8007634:	200012a8 	.word	0x200012a8
 8007638:	e000ed20 	.word	0xe000ed20
 800763c:	2000000c 	.word	0x2000000c
 8007640:	e000ef34 	.word	0xe000ef34

08007644 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
	__asm volatile
 800764a:	f04f 0370 	mov.w	r3, #112	; 0x70
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	607b      	str	r3, [r7, #4]
}
 800765c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800765e:	4b0f      	ldr	r3, [pc, #60]	; (800769c <vPortEnterCritical+0x58>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3301      	adds	r3, #1
 8007664:	4a0d      	ldr	r2, [pc, #52]	; (800769c <vPortEnterCritical+0x58>)
 8007666:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007668:	4b0c      	ldr	r3, [pc, #48]	; (800769c <vPortEnterCritical+0x58>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d10f      	bne.n	8007690 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007670:	4b0b      	ldr	r3, [pc, #44]	; (80076a0 <vPortEnterCritical+0x5c>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00a      	beq.n	8007690 <vPortEnterCritical+0x4c>
	__asm volatile
 800767a:	f04f 0370 	mov.w	r3, #112	; 0x70
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	603b      	str	r3, [r7, #0]
}
 800768c:	bf00      	nop
 800768e:	e7fe      	b.n	800768e <vPortEnterCritical+0x4a>
	}
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	2000000c 	.word	0x2000000c
 80076a0:	e000ed04 	.word	0xe000ed04

080076a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076aa:	4b12      	ldr	r3, [pc, #72]	; (80076f4 <vPortExitCritical+0x50>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10a      	bne.n	80076c8 <vPortExitCritical+0x24>
	__asm volatile
 80076b2:	f04f 0370 	mov.w	r3, #112	; 0x70
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	607b      	str	r3, [r7, #4]
}
 80076c4:	bf00      	nop
 80076c6:	e7fe      	b.n	80076c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80076c8:	4b0a      	ldr	r3, [pc, #40]	; (80076f4 <vPortExitCritical+0x50>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3b01      	subs	r3, #1
 80076ce:	4a09      	ldr	r2, [pc, #36]	; (80076f4 <vPortExitCritical+0x50>)
 80076d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076d2:	4b08      	ldr	r3, [pc, #32]	; (80076f4 <vPortExitCritical+0x50>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d105      	bne.n	80076e6 <vPortExitCritical+0x42>
 80076da:	2300      	movs	r3, #0
 80076dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	f383 8811 	msr	BASEPRI, r3
}
 80076e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80076e6:	bf00      	nop
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	2000000c 	.word	0x2000000c
	...

08007700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007700:	f3ef 8009 	mrs	r0, PSP
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	4b15      	ldr	r3, [pc, #84]	; (8007760 <pxCurrentTCBConst>)
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	f01e 0f10 	tst.w	lr, #16
 8007710:	bf08      	it	eq
 8007712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771a:	6010      	str	r0, [r2, #0]
 800771c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007720:	f04f 0070 	mov.w	r0, #112	; 0x70
 8007724:	f380 8811 	msr	BASEPRI, r0
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f7fe ffc0 	bl	80066b4 <vTaskSwitchContext>
 8007734:	f04f 0000 	mov.w	r0, #0
 8007738:	f380 8811 	msr	BASEPRI, r0
 800773c:	bc09      	pop	{r0, r3}
 800773e:	6819      	ldr	r1, [r3, #0]
 8007740:	6808      	ldr	r0, [r1, #0]
 8007742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007746:	f01e 0f10 	tst.w	lr, #16
 800774a:	bf08      	it	eq
 800774c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007750:	f380 8809 	msr	PSP, r0
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	f3af 8000 	nop.w

08007760 <pxCurrentTCBConst>:
 8007760:	20000c78 	.word	0x20000c78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop

08007768 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
	__asm volatile
 800776e:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	607b      	str	r3, [r7, #4]
}
 8007780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007782:	f7fe fedd 	bl	8006540 <xTaskIncrementTick>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800778c:	4b06      	ldr	r3, [pc, #24]	; (80077a8 <xPortSysTickHandler+0x40>)
 800778e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	2300      	movs	r3, #0
 8007796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	f383 8811 	msr	BASEPRI, r3
}
 800779e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80077a0:	bf00      	nop
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	e000ed04 	.word	0xe000ed04

080077ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80077ac:	b480      	push	{r7}
 80077ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077b0:	4b0b      	ldr	r3, [pc, #44]	; (80077e0 <vPortSetupTimerInterrupt+0x34>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077b6:	4b0b      	ldr	r3, [pc, #44]	; (80077e4 <vPortSetupTimerInterrupt+0x38>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077bc:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <vPortSetupTimerInterrupt+0x3c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a0a      	ldr	r2, [pc, #40]	; (80077ec <vPortSetupTimerInterrupt+0x40>)
 80077c2:	fba2 2303 	umull	r2, r3, r2, r3
 80077c6:	099b      	lsrs	r3, r3, #6
 80077c8:	4a09      	ldr	r2, [pc, #36]	; (80077f0 <vPortSetupTimerInterrupt+0x44>)
 80077ca:	3b01      	subs	r3, #1
 80077cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077ce:	4b04      	ldr	r3, [pc, #16]	; (80077e0 <vPortSetupTimerInterrupt+0x34>)
 80077d0:	2207      	movs	r2, #7
 80077d2:	601a      	str	r2, [r3, #0]
}
 80077d4:	bf00      	nop
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	e000e010 	.word	0xe000e010
 80077e4:	e000e018 	.word	0xe000e018
 80077e8:	20000000 	.word	0x20000000
 80077ec:	10624dd3 	.word	0x10624dd3
 80077f0:	e000e014 	.word	0xe000e014

080077f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80077f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007804 <vPortEnableVFP+0x10>
 80077f8:	6801      	ldr	r1, [r0, #0]
 80077fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80077fe:	6001      	str	r1, [r0, #0]
 8007800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007802:	bf00      	nop
 8007804:	e000ed88 	.word	0xe000ed88

08007808 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800780e:	f3ef 8305 	mrs	r3, IPSR
 8007812:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b0f      	cmp	r3, #15
 8007818:	d914      	bls.n	8007844 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800781a:	4a17      	ldr	r2, [pc, #92]	; (8007878 <vPortValidateInterruptPriority+0x70>)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	4413      	add	r3, r2
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007824:	4b15      	ldr	r3, [pc, #84]	; (800787c <vPortValidateInterruptPriority+0x74>)
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	7afa      	ldrb	r2, [r7, #11]
 800782a:	429a      	cmp	r2, r3
 800782c:	d20a      	bcs.n	8007844 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800782e:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	607b      	str	r3, [r7, #4]
}
 8007840:	bf00      	nop
 8007842:	e7fe      	b.n	8007842 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007844:	4b0e      	ldr	r3, [pc, #56]	; (8007880 <vPortValidateInterruptPriority+0x78>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800784c:	4b0d      	ldr	r3, [pc, #52]	; (8007884 <vPortValidateInterruptPriority+0x7c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	429a      	cmp	r2, r3
 8007852:	d90a      	bls.n	800786a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007854:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	603b      	str	r3, [r7, #0]
}
 8007866:	bf00      	nop
 8007868:	e7fe      	b.n	8007868 <vPortValidateInterruptPriority+0x60>
	}
 800786a:	bf00      	nop
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	e000e3f0 	.word	0xe000e3f0
 800787c:	200012a4 	.word	0x200012a4
 8007880:	e000ed0c 	.word	0xe000ed0c
 8007884:	200012a8 	.word	0x200012a8

08007888 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b08a      	sub	sp, #40	; 0x28
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007890:	2300      	movs	r3, #0
 8007892:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007894:	f7fe fd98 	bl	80063c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007898:	4b5b      	ldr	r3, [pc, #364]	; (8007a08 <pvPortMalloc+0x180>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d101      	bne.n	80078a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078a0:	f000 f920 	bl	8007ae4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078a4:	4b59      	ldr	r3, [pc, #356]	; (8007a0c <pvPortMalloc+0x184>)
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4013      	ands	r3, r2
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f040 8093 	bne.w	80079d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d01d      	beq.n	80078f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80078b8:	2208      	movs	r2, #8
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4413      	add	r3, r2
 80078be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f003 0307 	and.w	r3, r3, #7
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d014      	beq.n	80078f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f023 0307 	bic.w	r3, r3, #7
 80078d0:	3308      	adds	r3, #8
 80078d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f003 0307 	and.w	r3, r3, #7
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00a      	beq.n	80078f4 <pvPortMalloc+0x6c>
	__asm volatile
 80078de:	f04f 0370 	mov.w	r3, #112	; 0x70
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	617b      	str	r3, [r7, #20]
}
 80078f0:	bf00      	nop
 80078f2:	e7fe      	b.n	80078f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d06e      	beq.n	80079d8 <pvPortMalloc+0x150>
 80078fa:	4b45      	ldr	r3, [pc, #276]	; (8007a10 <pvPortMalloc+0x188>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	429a      	cmp	r2, r3
 8007902:	d869      	bhi.n	80079d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007904:	4b43      	ldr	r3, [pc, #268]	; (8007a14 <pvPortMalloc+0x18c>)
 8007906:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007908:	4b42      	ldr	r3, [pc, #264]	; (8007a14 <pvPortMalloc+0x18c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800790e:	e004      	b.n	800791a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007912:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	429a      	cmp	r2, r3
 8007922:	d903      	bls.n	800792c <pvPortMalloc+0xa4>
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1f1      	bne.n	8007910 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800792c:	4b36      	ldr	r3, [pc, #216]	; (8007a08 <pvPortMalloc+0x180>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007932:	429a      	cmp	r2, r3
 8007934:	d050      	beq.n	80079d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2208      	movs	r2, #8
 800793c:	4413      	add	r3, r2
 800793e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	6a3b      	ldr	r3, [r7, #32]
 8007946:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	1ad2      	subs	r2, r2, r3
 8007950:	2308      	movs	r3, #8
 8007952:	005b      	lsls	r3, r3, #1
 8007954:	429a      	cmp	r2, r3
 8007956:	d91f      	bls.n	8007998 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4413      	add	r3, r2
 800795e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	f003 0307 	and.w	r3, r3, #7
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00a      	beq.n	8007980 <pvPortMalloc+0xf8>
	__asm volatile
 800796a:	f04f 0370 	mov.w	r3, #112	; 0x70
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	613b      	str	r3, [r7, #16]
}
 800797c:	bf00      	nop
 800797e:	e7fe      	b.n	800797e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007982:	685a      	ldr	r2, [r3, #4]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	1ad2      	subs	r2, r2, r3
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007992:	69b8      	ldr	r0, [r7, #24]
 8007994:	f000 f908 	bl	8007ba8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007998:	4b1d      	ldr	r3, [pc, #116]	; (8007a10 <pvPortMalloc+0x188>)
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	4a1b      	ldr	r2, [pc, #108]	; (8007a10 <pvPortMalloc+0x188>)
 80079a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079a6:	4b1a      	ldr	r3, [pc, #104]	; (8007a10 <pvPortMalloc+0x188>)
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	4b1b      	ldr	r3, [pc, #108]	; (8007a18 <pvPortMalloc+0x190>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d203      	bcs.n	80079ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079b2:	4b17      	ldr	r3, [pc, #92]	; (8007a10 <pvPortMalloc+0x188>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a18      	ldr	r2, [pc, #96]	; (8007a18 <pvPortMalloc+0x190>)
 80079b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	685a      	ldr	r2, [r3, #4]
 80079be:	4b13      	ldr	r3, [pc, #76]	; (8007a0c <pvPortMalloc+0x184>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	431a      	orrs	r2, r3
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ca:	2200      	movs	r2, #0
 80079cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079ce:	4b13      	ldr	r3, [pc, #76]	; (8007a1c <pvPortMalloc+0x194>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3301      	adds	r3, #1
 80079d4:	4a11      	ldr	r2, [pc, #68]	; (8007a1c <pvPortMalloc+0x194>)
 80079d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079d8:	f7fe fd04 	bl	80063e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	f003 0307 	and.w	r3, r3, #7
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00a      	beq.n	80079fc <pvPortMalloc+0x174>
	__asm volatile
 80079e6:	f04f 0370 	mov.w	r3, #112	; 0x70
 80079ea:	f383 8811 	msr	BASEPRI, r3
 80079ee:	f3bf 8f6f 	isb	sy
 80079f2:	f3bf 8f4f 	dsb	sy
 80079f6:	60fb      	str	r3, [r7, #12]
}
 80079f8:	bf00      	nop
 80079fa:	e7fe      	b.n	80079fa <pvPortMalloc+0x172>
	return pvReturn;
 80079fc:	69fb      	ldr	r3, [r7, #28]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3728      	adds	r7, #40	; 0x28
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	20004eb4 	.word	0x20004eb4
 8007a0c:	20004ec8 	.word	0x20004ec8
 8007a10:	20004eb8 	.word	0x20004eb8
 8007a14:	20004eac 	.word	0x20004eac
 8007a18:	20004ebc 	.word	0x20004ebc
 8007a1c:	20004ec0 	.word	0x20004ec0

08007a20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d04d      	beq.n	8007ace <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a32:	2308      	movs	r3, #8
 8007a34:	425b      	negs	r3, r3
 8007a36:	697a      	ldr	r2, [r7, #20]
 8007a38:	4413      	add	r3, r2
 8007a3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	685a      	ldr	r2, [r3, #4]
 8007a44:	4b24      	ldr	r3, [pc, #144]	; (8007ad8 <vPortFree+0xb8>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4013      	ands	r3, r2
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10a      	bne.n	8007a64 <vPortFree+0x44>
	__asm volatile
 8007a4e:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	60fb      	str	r3, [r7, #12]
}
 8007a60:	bf00      	nop
 8007a62:	e7fe      	b.n	8007a62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00a      	beq.n	8007a82 <vPortFree+0x62>
	__asm volatile
 8007a6c:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007a70:	f383 8811 	msr	BASEPRI, r3
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	f3bf 8f4f 	dsb	sy
 8007a7c:	60bb      	str	r3, [r7, #8]
}
 8007a7e:	bf00      	nop
 8007a80:	e7fe      	b.n	8007a80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	685a      	ldr	r2, [r3, #4]
 8007a86:	4b14      	ldr	r3, [pc, #80]	; (8007ad8 <vPortFree+0xb8>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d01e      	beq.n	8007ace <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d11a      	bne.n	8007ace <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	685a      	ldr	r2, [r3, #4]
 8007a9c:	4b0e      	ldr	r3, [pc, #56]	; (8007ad8 <vPortFree+0xb8>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	43db      	mvns	r3, r3
 8007aa2:	401a      	ands	r2, r3
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007aa8:	f7fe fc8e 	bl	80063c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	4b0a      	ldr	r3, [pc, #40]	; (8007adc <vPortFree+0xbc>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	4a09      	ldr	r2, [pc, #36]	; (8007adc <vPortFree+0xbc>)
 8007ab8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007aba:	6938      	ldr	r0, [r7, #16]
 8007abc:	f000 f874 	bl	8007ba8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ac0:	4b07      	ldr	r3, [pc, #28]	; (8007ae0 <vPortFree+0xc0>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	4a06      	ldr	r2, [pc, #24]	; (8007ae0 <vPortFree+0xc0>)
 8007ac8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007aca:	f7fe fc8b 	bl	80063e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ace:	bf00      	nop
 8007ad0:	3718      	adds	r7, #24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	20004ec8 	.word	0x20004ec8
 8007adc:	20004eb8 	.word	0x20004eb8
 8007ae0:	20004ec4 	.word	0x20004ec4

08007ae4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007aea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007aee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007af0:	4b27      	ldr	r3, [pc, #156]	; (8007b90 <prvHeapInit+0xac>)
 8007af2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f003 0307 	and.w	r3, r3, #7
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00c      	beq.n	8007b18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	3307      	adds	r3, #7
 8007b02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f023 0307 	bic.w	r3, r3, #7
 8007b0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	4a1f      	ldr	r2, [pc, #124]	; (8007b90 <prvHeapInit+0xac>)
 8007b14:	4413      	add	r3, r2
 8007b16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b1c:	4a1d      	ldr	r2, [pc, #116]	; (8007b94 <prvHeapInit+0xb0>)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b22:	4b1c      	ldr	r3, [pc, #112]	; (8007b94 <prvHeapInit+0xb0>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b30:	2208      	movs	r2, #8
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	1a9b      	subs	r3, r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f023 0307 	bic.w	r3, r3, #7
 8007b3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	4a15      	ldr	r2, [pc, #84]	; (8007b98 <prvHeapInit+0xb4>)
 8007b44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b46:	4b14      	ldr	r3, [pc, #80]	; (8007b98 <prvHeapInit+0xb4>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b4e:	4b12      	ldr	r3, [pc, #72]	; (8007b98 <prvHeapInit+0xb4>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2200      	movs	r2, #0
 8007b54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	1ad2      	subs	r2, r2, r3
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b64:	4b0c      	ldr	r3, [pc, #48]	; (8007b98 <prvHeapInit+0xb4>)
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	4a0a      	ldr	r2, [pc, #40]	; (8007b9c <prvHeapInit+0xb8>)
 8007b72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	4a09      	ldr	r2, [pc, #36]	; (8007ba0 <prvHeapInit+0xbc>)
 8007b7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b7c:	4b09      	ldr	r3, [pc, #36]	; (8007ba4 <prvHeapInit+0xc0>)
 8007b7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b82:	601a      	str	r2, [r3, #0]
}
 8007b84:	bf00      	nop
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	200012ac 	.word	0x200012ac
 8007b94:	20004eac 	.word	0x20004eac
 8007b98:	20004eb4 	.word	0x20004eb4
 8007b9c:	20004ebc 	.word	0x20004ebc
 8007ba0:	20004eb8 	.word	0x20004eb8
 8007ba4:	20004ec8 	.word	0x20004ec8

08007ba8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bb0:	4b28      	ldr	r3, [pc, #160]	; (8007c54 <prvInsertBlockIntoFreeList+0xac>)
 8007bb2:	60fb      	str	r3, [r7, #12]
 8007bb4:	e002      	b.n	8007bbc <prvInsertBlockIntoFreeList+0x14>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	60fb      	str	r3, [r7, #12]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d8f7      	bhi.n	8007bb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d108      	bne.n	8007bea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	441a      	add	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	441a      	add	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d118      	bne.n	8007c30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	4b15      	ldr	r3, [pc, #84]	; (8007c58 <prvInsertBlockIntoFreeList+0xb0>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d00d      	beq.n	8007c26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	441a      	add	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	e008      	b.n	8007c38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c26:	4b0c      	ldr	r3, [pc, #48]	; (8007c58 <prvInsertBlockIntoFreeList+0xb0>)
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	601a      	str	r2, [r3, #0]
 8007c2e:	e003      	b.n	8007c38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d002      	beq.n	8007c46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c46:	bf00      	nop
 8007c48:	3714      	adds	r7, #20
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	20004eac 	.word	0x20004eac
 8007c58:	20004eb4 	.word	0x20004eb4

08007c5c <memset>:
 8007c5c:	4402      	add	r2, r0
 8007c5e:	4603      	mov	r3, r0
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d100      	bne.n	8007c66 <memset+0xa>
 8007c64:	4770      	bx	lr
 8007c66:	f803 1b01 	strb.w	r1, [r3], #1
 8007c6a:	e7f9      	b.n	8007c60 <memset+0x4>

08007c6c <__libc_init_array>:
 8007c6c:	b570      	push	{r4, r5, r6, lr}
 8007c6e:	4d0d      	ldr	r5, [pc, #52]	; (8007ca4 <__libc_init_array+0x38>)
 8007c70:	4c0d      	ldr	r4, [pc, #52]	; (8007ca8 <__libc_init_array+0x3c>)
 8007c72:	1b64      	subs	r4, r4, r5
 8007c74:	10a4      	asrs	r4, r4, #2
 8007c76:	2600      	movs	r6, #0
 8007c78:	42a6      	cmp	r6, r4
 8007c7a:	d109      	bne.n	8007c90 <__libc_init_array+0x24>
 8007c7c:	4d0b      	ldr	r5, [pc, #44]	; (8007cac <__libc_init_array+0x40>)
 8007c7e:	4c0c      	ldr	r4, [pc, #48]	; (8007cb0 <__libc_init_array+0x44>)
 8007c80:	f000 f86e 	bl	8007d60 <_init>
 8007c84:	1b64      	subs	r4, r4, r5
 8007c86:	10a4      	asrs	r4, r4, #2
 8007c88:	2600      	movs	r6, #0
 8007c8a:	42a6      	cmp	r6, r4
 8007c8c:	d105      	bne.n	8007c9a <__libc_init_array+0x2e>
 8007c8e:	bd70      	pop	{r4, r5, r6, pc}
 8007c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c94:	4798      	blx	r3
 8007c96:	3601      	adds	r6, #1
 8007c98:	e7ee      	b.n	8007c78 <__libc_init_array+0xc>
 8007c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c9e:	4798      	blx	r3
 8007ca0:	3601      	adds	r6, #1
 8007ca2:	e7f2      	b.n	8007c8a <__libc_init_array+0x1e>
 8007ca4:	08007de0 	.word	0x08007de0
 8007ca8:	08007de0 	.word	0x08007de0
 8007cac:	08007de0 	.word	0x08007de0
 8007cb0:	08007de4 	.word	0x08007de4

08007cb4 <memcpy>:
 8007cb4:	440a      	add	r2, r1
 8007cb6:	4291      	cmp	r1, r2
 8007cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cbc:	d100      	bne.n	8007cc0 <memcpy+0xc>
 8007cbe:	4770      	bx	lr
 8007cc0:	b510      	push	{r4, lr}
 8007cc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cca:	4291      	cmp	r1, r2
 8007ccc:	d1f9      	bne.n	8007cc2 <memcpy+0xe>
 8007cce:	bd10      	pop	{r4, pc}

08007cd0 <round>:
 8007cd0:	ec53 2b10 	vmov	r2, r3, d0
 8007cd4:	b570      	push	{r4, r5, r6, lr}
 8007cd6:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8007cda:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8007cde:	2813      	cmp	r0, #19
 8007ce0:	ee10 5a10 	vmov	r5, s0
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	dc18      	bgt.n	8007d1a <round+0x4a>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	da09      	bge.n	8007d00 <round+0x30>
 8007cec:	3001      	adds	r0, #1
 8007cee:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8007cf2:	d103      	bne.n	8007cfc <round+0x2c>
 8007cf4:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8007cf8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	e02a      	b.n	8007d56 <round+0x86>
 8007d00:	4c16      	ldr	r4, [pc, #88]	; (8007d5c <round+0x8c>)
 8007d02:	4104      	asrs	r4, r0
 8007d04:	ea03 0604 	and.w	r6, r3, r4
 8007d08:	4316      	orrs	r6, r2
 8007d0a:	d011      	beq.n	8007d30 <round+0x60>
 8007d0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007d10:	4103      	asrs	r3, r0
 8007d12:	440b      	add	r3, r1
 8007d14:	ea23 0104 	bic.w	r1, r3, r4
 8007d18:	e7f0      	b.n	8007cfc <round+0x2c>
 8007d1a:	2833      	cmp	r0, #51	; 0x33
 8007d1c:	dd0b      	ble.n	8007d36 <round+0x66>
 8007d1e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007d22:	d105      	bne.n	8007d30 <round+0x60>
 8007d24:	ee10 0a10 	vmov	r0, s0
 8007d28:	f7f8 fa78 	bl	800021c <__adddf3>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	ec43 2b10 	vmov	d0, r2, r3
 8007d34:	bd70      	pop	{r4, r5, r6, pc}
 8007d36:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8007d3a:	f04f 34ff 	mov.w	r4, #4294967295
 8007d3e:	40f4      	lsrs	r4, r6
 8007d40:	4214      	tst	r4, r2
 8007d42:	d0f5      	beq.n	8007d30 <round+0x60>
 8007d44:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8007d48:	2301      	movs	r3, #1
 8007d4a:	4083      	lsls	r3, r0
 8007d4c:	195b      	adds	r3, r3, r5
 8007d4e:	bf28      	it	cs
 8007d50:	3101      	addcs	r1, #1
 8007d52:	ea23 0304 	bic.w	r3, r3, r4
 8007d56:	461a      	mov	r2, r3
 8007d58:	460b      	mov	r3, r1
 8007d5a:	e7e9      	b.n	8007d30 <round+0x60>
 8007d5c:	000fffff 	.word	0x000fffff

08007d60 <_init>:
 8007d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d62:	bf00      	nop
 8007d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d66:	bc08      	pop	{r3}
 8007d68:	469e      	mov	lr, r3
 8007d6a:	4770      	bx	lr

08007d6c <_fini>:
 8007d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6e:	bf00      	nop
 8007d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d72:	bc08      	pop	{r3}
 8007d74:	469e      	mov	lr, r3
 8007d76:	4770      	bx	lr
