
Sec_car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cef0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  0800d0c0  0800d0c0  0001d0c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5c4  0800d5c4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5c4  0800d5c4  0001d5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5cc  0800d5cc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5cc  0800d5cc  0001d5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5d0  0800d5d0  0001d5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800d5d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014ac0  200001dc  0800d7b0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014c9c  0800d7b0  00024c9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f892  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004aab  00000000  00000000  0003fae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c80  00000000  00000000  00044590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001622  00000000  00000000  00046210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000697d  00000000  00000000  00047832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024488  00000000  00000000  0004e1af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5683  00000000  00000000  00072637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000086c4  00000000  00000000  00157cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00160380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d0a8 	.word	0x0800d0a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800d0a8 	.word	0x0800d0a8

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20013578 	.word	0x20013578
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <strlen>:
 8000350:	4603      	mov	r3, r0
 8000352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000356:	2a00      	cmp	r2, #0
 8000358:	d1fb      	bne.n	8000352 <strlen+0x2>
 800035a:	1a18      	subs	r0, r3, r0
 800035c:	3801      	subs	r0, #1
 800035e:	4770      	bx	lr

08000360 <__aeabi_drsub>:
 8000360:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000364:	e002      	b.n	800036c <__adddf3>
 8000366:	bf00      	nop

08000368 <__aeabi_dsub>:
 8000368:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800036c <__adddf3>:
 800036c:	b530      	push	{r4, r5, lr}
 800036e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000372:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	bf1f      	itttt	ne
 8000382:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000386:	ea55 0c02 	orrsne.w	ip, r5, r2
 800038a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800038e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000392:	f000 80e2 	beq.w	800055a <__adddf3+0x1ee>
 8000396:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800039a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800039e:	bfb8      	it	lt
 80003a0:	426d      	neglt	r5, r5
 80003a2:	dd0c      	ble.n	80003be <__adddf3+0x52>
 80003a4:	442c      	add	r4, r5
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	ea82 0000 	eor.w	r0, r2, r0
 80003b2:	ea83 0101 	eor.w	r1, r3, r1
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	2d36      	cmp	r5, #54	; 0x36
 80003c0:	bf88      	it	hi
 80003c2:	bd30      	pophi	{r4, r5, pc}
 80003c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003d4:	d002      	beq.n	80003dc <__adddf3+0x70>
 80003d6:	4240      	negs	r0, r0
 80003d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003e8:	d002      	beq.n	80003f0 <__adddf3+0x84>
 80003ea:	4252      	negs	r2, r2
 80003ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003f0:	ea94 0f05 	teq	r4, r5
 80003f4:	f000 80a7 	beq.w	8000546 <__adddf3+0x1da>
 80003f8:	f1a4 0401 	sub.w	r4, r4, #1
 80003fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000400:	db0d      	blt.n	800041e <__adddf3+0xb2>
 8000402:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000406:	fa22 f205 	lsr.w	r2, r2, r5
 800040a:	1880      	adds	r0, r0, r2
 800040c:	f141 0100 	adc.w	r1, r1, #0
 8000410:	fa03 f20e 	lsl.w	r2, r3, lr
 8000414:	1880      	adds	r0, r0, r2
 8000416:	fa43 f305 	asr.w	r3, r3, r5
 800041a:	4159      	adcs	r1, r3
 800041c:	e00e      	b.n	800043c <__adddf3+0xd0>
 800041e:	f1a5 0520 	sub.w	r5, r5, #32
 8000422:	f10e 0e20 	add.w	lr, lr, #32
 8000426:	2a01      	cmp	r2, #1
 8000428:	fa03 fc0e 	lsl.w	ip, r3, lr
 800042c:	bf28      	it	cs
 800042e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000432:	fa43 f305 	asr.w	r3, r3, r5
 8000436:	18c0      	adds	r0, r0, r3
 8000438:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800043c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000440:	d507      	bpl.n	8000452 <__adddf3+0xe6>
 8000442:	f04f 0e00 	mov.w	lr, #0
 8000446:	f1dc 0c00 	rsbs	ip, ip, #0
 800044a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800044e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000452:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000456:	d31b      	bcc.n	8000490 <__adddf3+0x124>
 8000458:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800045c:	d30c      	bcc.n	8000478 <__adddf3+0x10c>
 800045e:	0849      	lsrs	r1, r1, #1
 8000460:	ea5f 0030 	movs.w	r0, r0, rrx
 8000464:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000468:	f104 0401 	add.w	r4, r4, #1
 800046c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000470:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000474:	f080 809a 	bcs.w	80005ac <__adddf3+0x240>
 8000478:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800047c:	bf08      	it	eq
 800047e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000482:	f150 0000 	adcs.w	r0, r0, #0
 8000486:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800048a:	ea41 0105 	orr.w	r1, r1, r5
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000494:	4140      	adcs	r0, r0
 8000496:	eb41 0101 	adc.w	r1, r1, r1
 800049a:	3c01      	subs	r4, #1
 800049c:	bf28      	it	cs
 800049e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004a2:	d2e9      	bcs.n	8000478 <__adddf3+0x10c>
 80004a4:	f091 0f00 	teq	r1, #0
 80004a8:	bf04      	itt	eq
 80004aa:	4601      	moveq	r1, r0
 80004ac:	2000      	moveq	r0, #0
 80004ae:	fab1 f381 	clz	r3, r1
 80004b2:	bf08      	it	eq
 80004b4:	3320      	addeq	r3, #32
 80004b6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ba:	f1b3 0220 	subs.w	r2, r3, #32
 80004be:	da0c      	bge.n	80004da <__adddf3+0x16e>
 80004c0:	320c      	adds	r2, #12
 80004c2:	dd08      	ble.n	80004d6 <__adddf3+0x16a>
 80004c4:	f102 0c14 	add.w	ip, r2, #20
 80004c8:	f1c2 020c 	rsb	r2, r2, #12
 80004cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004d0:	fa21 f102 	lsr.w	r1, r1, r2
 80004d4:	e00c      	b.n	80004f0 <__adddf3+0x184>
 80004d6:	f102 0214 	add.w	r2, r2, #20
 80004da:	bfd8      	it	le
 80004dc:	f1c2 0c20 	rsble	ip, r2, #32
 80004e0:	fa01 f102 	lsl.w	r1, r1, r2
 80004e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004e8:	bfdc      	itt	le
 80004ea:	ea41 010c 	orrle.w	r1, r1, ip
 80004ee:	4090      	lslle	r0, r2
 80004f0:	1ae4      	subs	r4, r4, r3
 80004f2:	bfa2      	ittt	ge
 80004f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004f8:	4329      	orrge	r1, r5
 80004fa:	bd30      	popge	{r4, r5, pc}
 80004fc:	ea6f 0404 	mvn.w	r4, r4
 8000500:	3c1f      	subs	r4, #31
 8000502:	da1c      	bge.n	800053e <__adddf3+0x1d2>
 8000504:	340c      	adds	r4, #12
 8000506:	dc0e      	bgt.n	8000526 <__adddf3+0x1ba>
 8000508:	f104 0414 	add.w	r4, r4, #20
 800050c:	f1c4 0220 	rsb	r2, r4, #32
 8000510:	fa20 f004 	lsr.w	r0, r0, r4
 8000514:	fa01 f302 	lsl.w	r3, r1, r2
 8000518:	ea40 0003 	orr.w	r0, r0, r3
 800051c:	fa21 f304 	lsr.w	r3, r1, r4
 8000520:	ea45 0103 	orr.w	r1, r5, r3
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f1c4 040c 	rsb	r4, r4, #12
 800052a:	f1c4 0220 	rsb	r2, r4, #32
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 f304 	lsl.w	r3, r1, r4
 8000536:	ea40 0003 	orr.w	r0, r0, r3
 800053a:	4629      	mov	r1, r5
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	fa21 f004 	lsr.w	r0, r1, r4
 8000542:	4629      	mov	r1, r5
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f094 0f00 	teq	r4, #0
 800054a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800054e:	bf06      	itte	eq
 8000550:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000554:	3401      	addeq	r4, #1
 8000556:	3d01      	subne	r5, #1
 8000558:	e74e      	b.n	80003f8 <__adddf3+0x8c>
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf18      	it	ne
 8000560:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000564:	d029      	beq.n	80005ba <__adddf3+0x24e>
 8000566:	ea94 0f05 	teq	r4, r5
 800056a:	bf08      	it	eq
 800056c:	ea90 0f02 	teqeq	r0, r2
 8000570:	d005      	beq.n	800057e <__adddf3+0x212>
 8000572:	ea54 0c00 	orrs.w	ip, r4, r0
 8000576:	bf04      	itt	eq
 8000578:	4619      	moveq	r1, r3
 800057a:	4610      	moveq	r0, r2
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	ea91 0f03 	teq	r1, r3
 8000582:	bf1e      	ittt	ne
 8000584:	2100      	movne	r1, #0
 8000586:	2000      	movne	r0, #0
 8000588:	bd30      	popne	{r4, r5, pc}
 800058a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800058e:	d105      	bne.n	800059c <__adddf3+0x230>
 8000590:	0040      	lsls	r0, r0, #1
 8000592:	4149      	adcs	r1, r1
 8000594:	bf28      	it	cs
 8000596:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005a0:	bf3c      	itt	cc
 80005a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005a6:	bd30      	popcc	{r4, r5, pc}
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005b4:	f04f 0000 	mov.w	r0, #0
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf1a      	itte	ne
 80005c0:	4619      	movne	r1, r3
 80005c2:	4610      	movne	r0, r2
 80005c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005c8:	bf1c      	itt	ne
 80005ca:	460b      	movne	r3, r1
 80005cc:	4602      	movne	r2, r0
 80005ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005d2:	bf06      	itte	eq
 80005d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005d8:	ea91 0f03 	teqeq	r1, r3
 80005dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	bf00      	nop

080005e4 <__aeabi_ui2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f04f 0500 	mov.w	r5, #0
 80005fc:	f04f 0100 	mov.w	r1, #0
 8000600:	e750      	b.n	80004a4 <__adddf3+0x138>
 8000602:	bf00      	nop

08000604 <__aeabi_i2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800061c:	bf48      	it	mi
 800061e:	4240      	negmi	r0, r0
 8000620:	f04f 0100 	mov.w	r1, #0
 8000624:	e73e      	b.n	80004a4 <__adddf3+0x138>
 8000626:	bf00      	nop

08000628 <__aeabi_f2d>:
 8000628:	0042      	lsls	r2, r0, #1
 800062a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800062e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000632:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000636:	bf1f      	itttt	ne
 8000638:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800063c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000640:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000644:	4770      	bxne	lr
 8000646:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800064a:	bf08      	it	eq
 800064c:	4770      	bxeq	lr
 800064e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000652:	bf04      	itt	eq
 8000654:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000658:	4770      	bxeq	lr
 800065a:	b530      	push	{r4, r5, lr}
 800065c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000660:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	e71c      	b.n	80004a4 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_ul2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	e00a      	b.n	8000692 <__aeabi_l2d+0x16>

0800067c <__aeabi_l2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800068a:	d502      	bpl.n	8000692 <__aeabi_l2d+0x16>
 800068c:	4240      	negs	r0, r0
 800068e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000692:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000696:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800069a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800069e:	f43f aed8 	beq.w	8000452 <__adddf3+0xe6>
 80006a2:	f04f 0203 	mov.w	r2, #3
 80006a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006aa:	bf18      	it	ne
 80006ac:	3203      	addne	r2, #3
 80006ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006b2:	bf18      	it	ne
 80006b4:	3203      	addne	r2, #3
 80006b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ba:	f1c2 0320 	rsb	r3, r2, #32
 80006be:	fa00 fc03 	lsl.w	ip, r0, r3
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ca:	ea40 000e 	orr.w	r0, r0, lr
 80006ce:	fa21 f102 	lsr.w	r1, r1, r2
 80006d2:	4414      	add	r4, r2
 80006d4:	e6bd      	b.n	8000452 <__adddf3+0xe6>
 80006d6:	bf00      	nop

080006d8 <__aeabi_dmul>:
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006e6:	bf1d      	ittte	ne
 80006e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006ec:	ea94 0f0c 	teqne	r4, ip
 80006f0:	ea95 0f0c 	teqne	r5, ip
 80006f4:	f000 f8de 	bleq	80008b4 <__aeabi_dmul+0x1dc>
 80006f8:	442c      	add	r4, r5
 80006fa:	ea81 0603 	eor.w	r6, r1, r3
 80006fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000702:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000706:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800070a:	bf18      	it	ne
 800070c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000718:	d038      	beq.n	800078c <__aeabi_dmul+0xb4>
 800071a:	fba0 ce02 	umull	ip, lr, r0, r2
 800071e:	f04f 0500 	mov.w	r5, #0
 8000722:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000726:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800072a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800072e:	f04f 0600 	mov.w	r6, #0
 8000732:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000736:	f09c 0f00 	teq	ip, #0
 800073a:	bf18      	it	ne
 800073c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000740:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000744:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000748:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800074c:	d204      	bcs.n	8000758 <__aeabi_dmul+0x80>
 800074e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000752:	416d      	adcs	r5, r5
 8000754:	eb46 0606 	adc.w	r6, r6, r6
 8000758:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800075c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000760:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000764:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000768:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800076c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000770:	bf88      	it	hi
 8000772:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000776:	d81e      	bhi.n	80007b6 <__aeabi_dmul+0xde>
 8000778:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800077c:	bf08      	it	eq
 800077e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000782:	f150 0000 	adcs.w	r0, r0, #0
 8000786:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000790:	ea46 0101 	orr.w	r1, r6, r1
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007a0:	bfc2      	ittt	gt
 80007a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	popgt	{r4, r5, r6, pc}
 80007ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007b0:	f04f 0e00 	mov.w	lr, #0
 80007b4:	3c01      	subs	r4, #1
 80007b6:	f300 80ab 	bgt.w	8000910 <__aeabi_dmul+0x238>
 80007ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007be:	bfde      	ittt	le
 80007c0:	2000      	movle	r0, #0
 80007c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007c6:	bd70      	pople	{r4, r5, r6, pc}
 80007c8:	f1c4 0400 	rsb	r4, r4, #0
 80007cc:	3c20      	subs	r4, #32
 80007ce:	da35      	bge.n	800083c <__aeabi_dmul+0x164>
 80007d0:	340c      	adds	r4, #12
 80007d2:	dc1b      	bgt.n	800080c <__aeabi_dmul+0x134>
 80007d4:	f104 0414 	add.w	r4, r4, #20
 80007d8:	f1c4 0520 	rsb	r5, r4, #32
 80007dc:	fa00 f305 	lsl.w	r3, r0, r5
 80007e0:	fa20 f004 	lsr.w	r0, r0, r4
 80007e4:	fa01 f205 	lsl.w	r2, r1, r5
 80007e8:	ea40 0002 	orr.w	r0, r0, r2
 80007ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007f8:	fa21 f604 	lsr.w	r6, r1, r4
 80007fc:	eb42 0106 	adc.w	r1, r2, r6
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 040c 	rsb	r4, r4, #12
 8000810:	f1c4 0520 	rsb	r5, r4, #32
 8000814:	fa00 f304 	lsl.w	r3, r0, r4
 8000818:	fa20 f005 	lsr.w	r0, r0, r5
 800081c:	fa01 f204 	lsl.w	r2, r1, r4
 8000820:	ea40 0002 	orr.w	r0, r0, r2
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800082c:	f141 0100 	adc.w	r1, r1, #0
 8000830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000834:	bf08      	it	eq
 8000836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f1c4 0520 	rsb	r5, r4, #32
 8000840:	fa00 f205 	lsl.w	r2, r0, r5
 8000844:	ea4e 0e02 	orr.w	lr, lr, r2
 8000848:	fa20 f304 	lsr.w	r3, r0, r4
 800084c:	fa01 f205 	lsl.w	r2, r1, r5
 8000850:	ea43 0302 	orr.w	r3, r3, r2
 8000854:	fa21 f004 	lsr.w	r0, r1, r4
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	fa21 f204 	lsr.w	r2, r1, r4
 8000860:	ea20 0002 	bic.w	r0, r0, r2
 8000864:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000868:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800086c:	bf08      	it	eq
 800086e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f094 0f00 	teq	r4, #0
 8000878:	d10f      	bne.n	800089a <__aeabi_dmul+0x1c2>
 800087a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800087e:	0040      	lsls	r0, r0, #1
 8000880:	eb41 0101 	adc.w	r1, r1, r1
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3c01      	subeq	r4, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1a6>
 800088e:	ea41 0106 	orr.w	r1, r1, r6
 8000892:	f095 0f00 	teq	r5, #0
 8000896:	bf18      	it	ne
 8000898:	4770      	bxne	lr
 800089a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800089e:	0052      	lsls	r2, r2, #1
 80008a0:	eb43 0303 	adc.w	r3, r3, r3
 80008a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3d01      	subeq	r5, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1c6>
 80008ae:	ea43 0306 	orr.w	r3, r3, r6
 80008b2:	4770      	bx	lr
 80008b4:	ea94 0f0c 	teq	r4, ip
 80008b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008bc:	bf18      	it	ne
 80008be:	ea95 0f0c 	teqne	r5, ip
 80008c2:	d00c      	beq.n	80008de <__aeabi_dmul+0x206>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	d1d1      	bne.n	8000874 <__aeabi_dmul+0x19c>
 80008d0:	ea81 0103 	eor.w	r1, r1, r3
 80008d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008d8:	f04f 0000 	mov.w	r0, #0
 80008dc:	bd70      	pop	{r4, r5, r6, pc}
 80008de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e2:	bf06      	itte	eq
 80008e4:	4610      	moveq	r0, r2
 80008e6:	4619      	moveq	r1, r3
 80008e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ec:	d019      	beq.n	8000922 <__aeabi_dmul+0x24a>
 80008ee:	ea94 0f0c 	teq	r4, ip
 80008f2:	d102      	bne.n	80008fa <__aeabi_dmul+0x222>
 80008f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008f8:	d113      	bne.n	8000922 <__aeabi_dmul+0x24a>
 80008fa:	ea95 0f0c 	teq	r5, ip
 80008fe:	d105      	bne.n	800090c <__aeabi_dmul+0x234>
 8000900:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000904:	bf1c      	itt	ne
 8000906:	4610      	movne	r0, r2
 8000908:	4619      	movne	r1, r3
 800090a:	d10a      	bne.n	8000922 <__aeabi_dmul+0x24a>
 800090c:	ea81 0103 	eor.w	r1, r1, r3
 8000910:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000914:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000918:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	bd70      	pop	{r4, r5, r6, pc}
 8000922:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000926:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800092a:	bd70      	pop	{r4, r5, r6, pc}

0800092c <__aeabi_ddiv>:
 800092c:	b570      	push	{r4, r5, r6, lr}
 800092e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000932:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000936:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800093a:	bf1d      	ittte	ne
 800093c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000940:	ea94 0f0c 	teqne	r4, ip
 8000944:	ea95 0f0c 	teqne	r5, ip
 8000948:	f000 f8a7 	bleq	8000a9a <__aeabi_ddiv+0x16e>
 800094c:	eba4 0405 	sub.w	r4, r4, r5
 8000950:	ea81 0e03 	eor.w	lr, r1, r3
 8000954:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000958:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800095c:	f000 8088 	beq.w	8000a70 <__aeabi_ddiv+0x144>
 8000960:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000964:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000968:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800096c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000970:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000974:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000978:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800097c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000980:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000984:	429d      	cmp	r5, r3
 8000986:	bf08      	it	eq
 8000988:	4296      	cmpeq	r6, r2
 800098a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800098e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000992:	d202      	bcs.n	800099a <__aeabi_ddiv+0x6e>
 8000994:	085b      	lsrs	r3, r3, #1
 8000996:	ea4f 0232 	mov.w	r2, r2, rrx
 800099a:	1ab6      	subs	r6, r6, r2
 800099c:	eb65 0503 	sbc.w	r5, r5, r3
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009d8:	085b      	lsrs	r3, r3, #1
 80009da:	ea4f 0232 	mov.w	r2, r2, rrx
 80009de:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e6:	bf22      	ittt	cs
 80009e8:	1ab6      	subcs	r6, r6, r2
 80009ea:	4675      	movcs	r5, lr
 80009ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a08:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a0c:	d018      	beq.n	8000a40 <__aeabi_ddiv+0x114>
 8000a0e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a12:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a16:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a1a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a1e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a26:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a2a:	d1c0      	bne.n	80009ae <__aeabi_ddiv+0x82>
 8000a2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a30:	d10b      	bne.n	8000a4a <__aeabi_ddiv+0x11e>
 8000a32:	ea41 0100 	orr.w	r1, r1, r0
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a3e:	e7b6      	b.n	80009ae <__aeabi_ddiv+0x82>
 8000a40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a44:	bf04      	itt	eq
 8000a46:	4301      	orreq	r1, r0
 8000a48:	2000      	moveq	r0, #0
 8000a4a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a4e:	bf88      	it	hi
 8000a50:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a54:	f63f aeaf 	bhi.w	80007b6 <__aeabi_dmul+0xde>
 8000a58:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a5c:	bf04      	itt	eq
 8000a5e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a66:	f150 0000 	adcs.w	r0, r0, #0
 8000a6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a74:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a78:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a7c:	bfc2      	ittt	gt
 8000a7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a86:	bd70      	popgt	{r4, r5, r6, pc}
 8000a88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a8c:	f04f 0e00 	mov.w	lr, #0
 8000a90:	3c01      	subs	r4, #1
 8000a92:	e690      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a94:	ea45 0e06 	orr.w	lr, r5, r6
 8000a98:	e68d      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a9a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a9e:	ea94 0f0c 	teq	r4, ip
 8000aa2:	bf08      	it	eq
 8000aa4:	ea95 0f0c 	teqeq	r5, ip
 8000aa8:	f43f af3b 	beq.w	8000922 <__aeabi_dmul+0x24a>
 8000aac:	ea94 0f0c 	teq	r4, ip
 8000ab0:	d10a      	bne.n	8000ac8 <__aeabi_ddiv+0x19c>
 8000ab2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ab6:	f47f af34 	bne.w	8000922 <__aeabi_dmul+0x24a>
 8000aba:	ea95 0f0c 	teq	r5, ip
 8000abe:	f47f af25 	bne.w	800090c <__aeabi_dmul+0x234>
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	e72c      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000ac8:	ea95 0f0c 	teq	r5, ip
 8000acc:	d106      	bne.n	8000adc <__aeabi_ddiv+0x1b0>
 8000ace:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ad2:	f43f aefd 	beq.w	80008d0 <__aeabi_dmul+0x1f8>
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	e722      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000adc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ae0:	bf18      	it	ne
 8000ae2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ae6:	f47f aec5 	bne.w	8000874 <__aeabi_dmul+0x19c>
 8000aea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000aee:	f47f af0d 	bne.w	800090c <__aeabi_dmul+0x234>
 8000af2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000af6:	f47f aeeb 	bne.w	80008d0 <__aeabi_dmul+0x1f8>
 8000afa:	e712      	b.n	8000922 <__aeabi_dmul+0x24a>

08000afc <__gedf2>:
 8000afc:	f04f 3cff 	mov.w	ip, #4294967295
 8000b00:	e006      	b.n	8000b10 <__cmpdf2+0x4>
 8000b02:	bf00      	nop

08000b04 <__ledf2>:
 8000b04:	f04f 0c01 	mov.w	ip, #1
 8000b08:	e002      	b.n	8000b10 <__cmpdf2+0x4>
 8000b0a:	bf00      	nop

08000b0c <__cmpdf2>:
 8000b0c:	f04f 0c01 	mov.w	ip, #1
 8000b10:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b26:	d01b      	beq.n	8000b60 <__cmpdf2+0x54>
 8000b28:	b001      	add	sp, #4
 8000b2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b2e:	bf0c      	ite	eq
 8000b30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b34:	ea91 0f03 	teqne	r1, r3
 8000b38:	bf02      	ittt	eq
 8000b3a:	ea90 0f02 	teqeq	r0, r2
 8000b3e:	2000      	moveq	r0, #0
 8000b40:	4770      	bxeq	lr
 8000b42:	f110 0f00 	cmn.w	r0, #0
 8000b46:	ea91 0f03 	teq	r1, r3
 8000b4a:	bf58      	it	pl
 8000b4c:	4299      	cmppl	r1, r3
 8000b4e:	bf08      	it	eq
 8000b50:	4290      	cmpeq	r0, r2
 8000b52:	bf2c      	ite	cs
 8000b54:	17d8      	asrcs	r0, r3, #31
 8000b56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b5a:	f040 0001 	orr.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__cmpdf2+0x64>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d107      	bne.n	8000b80 <__cmpdf2+0x74>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d1d6      	bne.n	8000b28 <__cmpdf2+0x1c>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d0d3      	beq.n	8000b28 <__cmpdf2+0x1c>
 8000b80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_cdrcmple>:
 8000b88:	4684      	mov	ip, r0
 8000b8a:	4610      	mov	r0, r2
 8000b8c:	4662      	mov	r2, ip
 8000b8e:	468c      	mov	ip, r1
 8000b90:	4619      	mov	r1, r3
 8000b92:	4663      	mov	r3, ip
 8000b94:	e000      	b.n	8000b98 <__aeabi_cdcmpeq>
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdcmpeq>:
 8000b98:	b501      	push	{r0, lr}
 8000b9a:	f7ff ffb7 	bl	8000b0c <__cmpdf2>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	bf48      	it	mi
 8000ba2:	f110 0f00 	cmnmi.w	r0, #0
 8000ba6:	bd01      	pop	{r0, pc}

08000ba8 <__aeabi_dcmpeq>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff fff4 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bb0:	bf0c      	ite	eq
 8000bb2:	2001      	moveq	r0, #1
 8000bb4:	2000      	movne	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_dcmplt>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff ffea 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bc4:	bf34      	ite	cc
 8000bc6:	2001      	movcc	r0, #1
 8000bc8:	2000      	movcs	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_dcmple>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffe0 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bd8:	bf94      	ite	ls
 8000bda:	2001      	movls	r0, #1
 8000bdc:	2000      	movhi	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_dcmpge>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffce 	bl	8000b88 <__aeabi_cdrcmple>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_dcmpgt>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffc4 	bl	8000b88 <__aeabi_cdrcmple>
 8000c00:	bf34      	ite	cc
 8000c02:	2001      	movcc	r0, #1
 8000c04:	2000      	movcs	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_dcmpun>:
 8000c0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c14:	d102      	bne.n	8000c1c <__aeabi_dcmpun+0x10>
 8000c16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c1a:	d10a      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x20>
 8000c26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c2c:	f04f 0000 	mov.w	r0, #0
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0001 	mov.w	r0, #1
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2iz>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c40:	d215      	bcs.n	8000c6e <__aeabi_d2iz+0x36>
 8000c42:	d511      	bpl.n	8000c68 <__aeabi_d2iz+0x30>
 8000c44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c4c:	d912      	bls.n	8000c74 <__aeabi_d2iz+0x3c>
 8000c4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c62:	bf18      	it	ne
 8000c64:	4240      	negne	r0, r0
 8000c66:	4770      	bx	lr
 8000c68:	f04f 0000 	mov.w	r0, #0
 8000c6c:	4770      	bx	lr
 8000c6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c72:	d105      	bne.n	8000c80 <__aeabi_d2iz+0x48>
 8000c74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	bf08      	it	eq
 8000c7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c7e:	4770      	bx	lr
 8000c80:	f04f 0000 	mov.w	r0, #0
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2uiz>:
 8000c88:	004a      	lsls	r2, r1, #1
 8000c8a:	d211      	bcs.n	8000cb0 <__aeabi_d2uiz+0x28>
 8000c8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c90:	d211      	bcs.n	8000cb6 <__aeabi_d2uiz+0x2e>
 8000c92:	d50d      	bpl.n	8000cb0 <__aeabi_d2uiz+0x28>
 8000c94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c9c:	d40e      	bmi.n	8000cbc <__aeabi_d2uiz+0x34>
 8000c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000caa:	fa23 f002 	lsr.w	r0, r3, r2
 8000cae:	4770      	bx	lr
 8000cb0:	f04f 0000 	mov.w	r0, #0
 8000cb4:	4770      	bx	lr
 8000cb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cba:	d102      	bne.n	8000cc2 <__aeabi_d2uiz+0x3a>
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	4770      	bx	lr
 8000cc2:	f04f 0000 	mov.w	r0, #0
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2f>:
 8000cc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ccc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cd0:	bf24      	itt	cs
 8000cd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cda:	d90d      	bls.n	8000cf8 <__aeabi_d2f+0x30>
 8000cdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ce0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ce4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ce8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cf0:	bf08      	it	eq
 8000cf2:	f020 0001 	biceq.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cfc:	d121      	bne.n	8000d42 <__aeabi_d2f+0x7a>
 8000cfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d02:	bfbc      	itt	lt
 8000d04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d08:	4770      	bxlt	lr
 8000d0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d12:	f1c2 0218 	rsb	r2, r2, #24
 8000d16:	f1c2 0c20 	rsb	ip, r2, #32
 8000d1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d22:	bf18      	it	ne
 8000d24:	f040 0001 	orrne.w	r0, r0, #1
 8000d28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d34:	ea40 000c 	orr.w	r0, r0, ip
 8000d38:	fa23 f302 	lsr.w	r3, r3, r2
 8000d3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d40:	e7cc      	b.n	8000cdc <__aeabi_d2f+0x14>
 8000d42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d46:	d107      	bne.n	8000d58 <__aeabi_d2f+0x90>
 8000d48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d56:	4770      	bxne	lr
 8000d58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b970 	b.w	8001060 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f806 	bl	8000d98 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__udivmoddi4>:
 8000d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d9c:	9e08      	ldr	r6, [sp, #32]
 8000d9e:	460d      	mov	r5, r1
 8000da0:	4604      	mov	r4, r0
 8000da2:	460f      	mov	r7, r1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d14a      	bne.n	8000e3e <__udivmoddi4+0xa6>
 8000da8:	428a      	cmp	r2, r1
 8000daa:	4694      	mov	ip, r2
 8000dac:	d965      	bls.n	8000e7a <__udivmoddi4+0xe2>
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	b143      	cbz	r3, 8000dc6 <__udivmoddi4+0x2e>
 8000db4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000db8:	f1c3 0220 	rsb	r2, r3, #32
 8000dbc:	409f      	lsls	r7, r3
 8000dbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc2:	4317      	orrs	r7, r2
 8000dc4:	409c      	lsls	r4, r3
 8000dc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dca:	fa1f f58c 	uxth.w	r5, ip
 8000dce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dd2:	0c22      	lsrs	r2, r4, #16
 8000dd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ddc:	fb01 f005 	mul.w	r0, r1, r5
 8000de0:	4290      	cmp	r0, r2
 8000de2:	d90a      	bls.n	8000dfa <__udivmoddi4+0x62>
 8000de4:	eb1c 0202 	adds.w	r2, ip, r2
 8000de8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dec:	f080 811c 	bcs.w	8001028 <__udivmoddi4+0x290>
 8000df0:	4290      	cmp	r0, r2
 8000df2:	f240 8119 	bls.w	8001028 <__udivmoddi4+0x290>
 8000df6:	3902      	subs	r1, #2
 8000df8:	4462      	add	r2, ip
 8000dfa:	1a12      	subs	r2, r2, r0
 8000dfc:	b2a4      	uxth	r4, r4
 8000dfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0a:	fb00 f505 	mul.w	r5, r0, r5
 8000e0e:	42a5      	cmp	r5, r4
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x90>
 8000e12:	eb1c 0404 	adds.w	r4, ip, r4
 8000e16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e1a:	f080 8107 	bcs.w	800102c <__udivmoddi4+0x294>
 8000e1e:	42a5      	cmp	r5, r4
 8000e20:	f240 8104 	bls.w	800102c <__udivmoddi4+0x294>
 8000e24:	4464      	add	r4, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e2c:	1b64      	subs	r4, r4, r5
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11e      	cbz	r6, 8000e3a <__udivmoddi4+0xa2>
 8000e32:	40dc      	lsrs	r4, r3
 8000e34:	2300      	movs	r3, #0
 8000e36:	e9c6 4300 	strd	r4, r3, [r6]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0xbc>
 8000e42:	2e00      	cmp	r6, #0
 8000e44:	f000 80ed 	beq.w	8001022 <__udivmoddi4+0x28a>
 8000e48:	2100      	movs	r1, #0
 8000e4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e4e:	4608      	mov	r0, r1
 8000e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e54:	fab3 f183 	clz	r1, r3
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	d149      	bne.n	8000ef0 <__udivmoddi4+0x158>
 8000e5c:	42ab      	cmp	r3, r5
 8000e5e:	d302      	bcc.n	8000e66 <__udivmoddi4+0xce>
 8000e60:	4282      	cmp	r2, r0
 8000e62:	f200 80f8 	bhi.w	8001056 <__udivmoddi4+0x2be>
 8000e66:	1a84      	subs	r4, r0, r2
 8000e68:	eb65 0203 	sbc.w	r2, r5, r3
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	4617      	mov	r7, r2
 8000e70:	2e00      	cmp	r6, #0
 8000e72:	d0e2      	beq.n	8000e3a <__udivmoddi4+0xa2>
 8000e74:	e9c6 4700 	strd	r4, r7, [r6]
 8000e78:	e7df      	b.n	8000e3a <__udivmoddi4+0xa2>
 8000e7a:	b902      	cbnz	r2, 8000e7e <__udivmoddi4+0xe6>
 8000e7c:	deff      	udf	#255	; 0xff
 8000e7e:	fab2 f382 	clz	r3, r2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f040 8090 	bne.w	8000fa8 <__udivmoddi4+0x210>
 8000e88:	1a8a      	subs	r2, r1, r2
 8000e8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e8e:	fa1f fe8c 	uxth.w	lr, ip
 8000e92:	2101      	movs	r1, #1
 8000e94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e98:	fb07 2015 	mls	r0, r7, r5, r2
 8000e9c:	0c22      	lsrs	r2, r4, #16
 8000e9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ea2:	fb0e f005 	mul.w	r0, lr, r5
 8000ea6:	4290      	cmp	r0, r2
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x124>
 8000eaa:	eb1c 0202 	adds.w	r2, ip, r2
 8000eae:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x122>
 8000eb4:	4290      	cmp	r0, r2
 8000eb6:	f200 80cb 	bhi.w	8001050 <__udivmoddi4+0x2b8>
 8000eba:	4645      	mov	r5, r8
 8000ebc:	1a12      	subs	r2, r2, r0
 8000ebe:	b2a4      	uxth	r4, r4
 8000ec0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ec4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ec8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ecc:	fb0e fe00 	mul.w	lr, lr, r0
 8000ed0:	45a6      	cmp	lr, r4
 8000ed2:	d908      	bls.n	8000ee6 <__udivmoddi4+0x14e>
 8000ed4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000edc:	d202      	bcs.n	8000ee4 <__udivmoddi4+0x14c>
 8000ede:	45a6      	cmp	lr, r4
 8000ee0:	f200 80bb 	bhi.w	800105a <__udivmoddi4+0x2c2>
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	eba4 040e 	sub.w	r4, r4, lr
 8000eea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eee:	e79f      	b.n	8000e30 <__udivmoddi4+0x98>
 8000ef0:	f1c1 0720 	rsb	r7, r1, #32
 8000ef4:	408b      	lsls	r3, r1
 8000ef6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000efa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000efe:	fa05 f401 	lsl.w	r4, r5, r1
 8000f02:	fa20 f307 	lsr.w	r3, r0, r7
 8000f06:	40fd      	lsrs	r5, r7
 8000f08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f0c:	4323      	orrs	r3, r4
 8000f0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f12:	fa1f fe8c 	uxth.w	lr, ip
 8000f16:	fb09 5518 	mls	r5, r9, r8, r5
 8000f1a:	0c1c      	lsrs	r4, r3, #16
 8000f1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f20:	fb08 f50e 	mul.w	r5, r8, lr
 8000f24:	42a5      	cmp	r5, r4
 8000f26:	fa02 f201 	lsl.w	r2, r2, r1
 8000f2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000f2e:	d90b      	bls.n	8000f48 <__udivmoddi4+0x1b0>
 8000f30:	eb1c 0404 	adds.w	r4, ip, r4
 8000f34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f38:	f080 8088 	bcs.w	800104c <__udivmoddi4+0x2b4>
 8000f3c:	42a5      	cmp	r5, r4
 8000f3e:	f240 8085 	bls.w	800104c <__udivmoddi4+0x2b4>
 8000f42:	f1a8 0802 	sub.w	r8, r8, #2
 8000f46:	4464      	add	r4, ip
 8000f48:	1b64      	subs	r4, r4, r5
 8000f4a:	b29d      	uxth	r5, r3
 8000f4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f50:	fb09 4413 	mls	r4, r9, r3, r4
 8000f54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f5c:	45a6      	cmp	lr, r4
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x1da>
 8000f60:	eb1c 0404 	adds.w	r4, ip, r4
 8000f64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f68:	d26c      	bcs.n	8001044 <__udivmoddi4+0x2ac>
 8000f6a:	45a6      	cmp	lr, r4
 8000f6c:	d96a      	bls.n	8001044 <__udivmoddi4+0x2ac>
 8000f6e:	3b02      	subs	r3, #2
 8000f70:	4464      	add	r4, ip
 8000f72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f76:	fba3 9502 	umull	r9, r5, r3, r2
 8000f7a:	eba4 040e 	sub.w	r4, r4, lr
 8000f7e:	42ac      	cmp	r4, r5
 8000f80:	46c8      	mov	r8, r9
 8000f82:	46ae      	mov	lr, r5
 8000f84:	d356      	bcc.n	8001034 <__udivmoddi4+0x29c>
 8000f86:	d053      	beq.n	8001030 <__udivmoddi4+0x298>
 8000f88:	b156      	cbz	r6, 8000fa0 <__udivmoddi4+0x208>
 8000f8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f92:	fa04 f707 	lsl.w	r7, r4, r7
 8000f96:	40ca      	lsrs	r2, r1
 8000f98:	40cc      	lsrs	r4, r1
 8000f9a:	4317      	orrs	r7, r2
 8000f9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa8:	f1c3 0120 	rsb	r1, r3, #32
 8000fac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000fb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000fb8:	409d      	lsls	r5, r3
 8000fba:	432a      	orrs	r2, r5
 8000fbc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc0:	fa1f fe8c 	uxth.w	lr, ip
 8000fc4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fc8:	fb07 1510 	mls	r5, r7, r0, r1
 8000fcc:	0c11      	lsrs	r1, r2, #16
 8000fce:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fd2:	fb00 f50e 	mul.w	r5, r0, lr
 8000fd6:	428d      	cmp	r5, r1
 8000fd8:	fa04 f403 	lsl.w	r4, r4, r3
 8000fdc:	d908      	bls.n	8000ff0 <__udivmoddi4+0x258>
 8000fde:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fe6:	d22f      	bcs.n	8001048 <__udivmoddi4+0x2b0>
 8000fe8:	428d      	cmp	r5, r1
 8000fea:	d92d      	bls.n	8001048 <__udivmoddi4+0x2b0>
 8000fec:	3802      	subs	r0, #2
 8000fee:	4461      	add	r1, ip
 8000ff0:	1b49      	subs	r1, r1, r5
 8000ff2:	b292      	uxth	r2, r2
 8000ff4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ff8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	fb05 f10e 	mul.w	r1, r5, lr
 8001004:	4291      	cmp	r1, r2
 8001006:	d908      	bls.n	800101a <__udivmoddi4+0x282>
 8001008:	eb1c 0202 	adds.w	r2, ip, r2
 800100c:	f105 38ff 	add.w	r8, r5, #4294967295
 8001010:	d216      	bcs.n	8001040 <__udivmoddi4+0x2a8>
 8001012:	4291      	cmp	r1, r2
 8001014:	d914      	bls.n	8001040 <__udivmoddi4+0x2a8>
 8001016:	3d02      	subs	r5, #2
 8001018:	4462      	add	r2, ip
 800101a:	1a52      	subs	r2, r2, r1
 800101c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001020:	e738      	b.n	8000e94 <__udivmoddi4+0xfc>
 8001022:	4631      	mov	r1, r6
 8001024:	4630      	mov	r0, r6
 8001026:	e708      	b.n	8000e3a <__udivmoddi4+0xa2>
 8001028:	4639      	mov	r1, r7
 800102a:	e6e6      	b.n	8000dfa <__udivmoddi4+0x62>
 800102c:	4610      	mov	r0, r2
 800102e:	e6fb      	b.n	8000e28 <__udivmoddi4+0x90>
 8001030:	4548      	cmp	r0, r9
 8001032:	d2a9      	bcs.n	8000f88 <__udivmoddi4+0x1f0>
 8001034:	ebb9 0802 	subs.w	r8, r9, r2
 8001038:	eb65 0e0c 	sbc.w	lr, r5, ip
 800103c:	3b01      	subs	r3, #1
 800103e:	e7a3      	b.n	8000f88 <__udivmoddi4+0x1f0>
 8001040:	4645      	mov	r5, r8
 8001042:	e7ea      	b.n	800101a <__udivmoddi4+0x282>
 8001044:	462b      	mov	r3, r5
 8001046:	e794      	b.n	8000f72 <__udivmoddi4+0x1da>
 8001048:	4640      	mov	r0, r8
 800104a:	e7d1      	b.n	8000ff0 <__udivmoddi4+0x258>
 800104c:	46d0      	mov	r8, sl
 800104e:	e77b      	b.n	8000f48 <__udivmoddi4+0x1b0>
 8001050:	3d02      	subs	r5, #2
 8001052:	4462      	add	r2, ip
 8001054:	e732      	b.n	8000ebc <__udivmoddi4+0x124>
 8001056:	4608      	mov	r0, r1
 8001058:	e70a      	b.n	8000e70 <__udivmoddi4+0xd8>
 800105a:	4464      	add	r4, ip
 800105c:	3802      	subs	r0, #2
 800105e:	e742      	b.n	8000ee6 <__udivmoddi4+0x14e>

08001060 <__aeabi_idiv0>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <Buzzer_voidHighSound>:
#endif


}
void Buzzer_voidHighSound(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0


#endif
#elif Buzzer_Timer_Connected == TIMER12
#if Buzzer_TimerChannel_Connected == TIMER_CHANNEL_1
	TIM12->CCR1=90;
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <Buzzer_voidHighSound+0x18>)
 800106a:	225a      	movs	r2, #90	; 0x5a
 800106c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);
 800106e:	2100      	movs	r1, #0
 8001070:	4803      	ldr	r0, [pc, #12]	; (8001080 <Buzzer_voidHighSound+0x1c>)
 8001072:	f003 f9f5 	bl	8004460 <HAL_TIM_PWM_Start>

#endif



}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40001800 	.word	0x40001800
 8001080:	20000588 	.word	0x20000588

08001084 <HAL_TIM_IC_CaptureCallback>:
extern uint8_t received_char;
uint32_t edges_counter = 0;

     /***************************************Interrupts_Call_Backs********************************************************/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 || htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2))
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001094:	d10c      	bne.n	80010b0 <HAL_TIM_IC_CaptureCallback+0x2c>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	7f1b      	ldrb	r3, [r3, #28]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d003      	beq.n	80010a6 <HAL_TIM_IC_CaptureCallback+0x22>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	7f1b      	ldrb	r3, [r3, #28]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d104      	bne.n	80010b0 <HAL_TIM_IC_CaptureCallback+0x2c>
	{
		edges_counter++;
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <HAL_TIM_IC_CaptureCallback+0x38>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	3301      	adds	r3, #1
 80010ac:	4a03      	ldr	r2, [pc, #12]	; (80010bc <HAL_TIM_IC_CaptureCallback+0x38>)
 80010ae:	6013      	str	r3, [r2, #0]
	}
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	200001f8 	.word	0x200001f8

080010c0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	/*BT interrupt*/
	if(huart->Instance==USART3)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <HAL_UART_RxCpltCallback+0x24>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d104      	bne.n	80010dc <HAL_UART_RxCpltCallback+0x1c>
	{
		/*Reactivating the interrupt*/
		HAL_UART_Receive_IT(&huart3, &received_char, 1);
 80010d2:	2201      	movs	r2, #1
 80010d4:	4904      	ldr	r1, [pc, #16]	; (80010e8 <HAL_UART_RxCpltCallback+0x28>)
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <HAL_UART_RxCpltCallback+0x2c>)
 80010d8:	f004 fb03 	bl	80056e2 <HAL_UART_Receive_IT>

		/*Give the semaphore*/

	}

}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40004800 	.word	0x40004800
 80010e8:	200006e0 	.word	0x200006e0
 80010ec:	20000658 	.word	0x20000658

080010f0 <vApplicationIdleHook>:

/*********************************************Application_Hook*************************************************************/
void vApplicationIdleHook(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	/*The processer will go to sleep in the IDLE Task*/
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80010f4:	2101      	movs	r1, #1
 80010f6:	2000      	movs	r0, #0
 80010f8:	f002 faf2 	bl	80036e0 <HAL_PWR_EnterSLEEPMode>

}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <LCD_HighLightIntensity_Warning>:




void LCD_HighLightIntensity_Warning()
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0

	/*Printing the warning sign*/
	LCD_Print_WarningSign();
 8001104:	f000 f814 	bl	8001130 <LCD_Print_WarningSign>

	/*Printing the warning message to the driver*/
	LCD_voidSetPositionXY(1,0);
 8001108:	2100      	movs	r1, #0
 800110a:	2001      	movs	r0, #1
 800110c:	f000 f96e 	bl	80013ec <LCD_voidSetPositionXY>
	LCD_voidSendString("Dim your");
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <LCD_HighLightIntensity_Warning+0x28>)
 8001112:	f000 f94f 	bl	80013b4 <LCD_voidSendString>

	LCD_voidSetPositionXY(2,0);
 8001116:	2100      	movs	r1, #0
 8001118:	2002      	movs	r0, #2
 800111a:	f000 f967 	bl	80013ec <LCD_voidSetPositionXY>
	LCD_voidSendString("Light ASAP!");
 800111e:	4803      	ldr	r0, [pc, #12]	; (800112c <LCD_HighLightIntensity_Warning+0x2c>)
 8001120:	f000 f948 	bl	80013b4 <LCD_voidSendString>

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	0800d0c0 	.word	0x0800d0c0
 800112c:	0800d0cc 	.word	0x0800d0cc

08001130 <LCD_Print_WarningSign>:
	LCD_voidSendString("Slow Down");


}
static void LCD_Print_WarningSign(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b096      	sub	sp, #88	; 0x58
 8001134:	af00      	add	r7, sp, #0
	/*Saving the elemetents of each block of the LCD in multiple arrays to be sent to the special charachter function*/

	uint8_t LCD_R1_C16_Array[8] =
 8001136:	4a4e      	ldr	r2, [pc, #312]	; (8001270 <LCD_Print_WarningSign+0x140>)
 8001138:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800113c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001140:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00001110,
			0b00001110,
			0b00001110
	};
	uint8_t LCD_R1_C15_Array[8] =
 8001144:	4a4b      	ldr	r2, [pc, #300]	; (8001274 <LCD_Print_WarningSign+0x144>)
 8001146:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800114a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800114e:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00001000,
			0b00010000,
			0b00000000
	};

	uint8_t LCD_R1_C14_Array[8] =
 8001152:	4a49      	ldr	r2, [pc, #292]	; (8001278 <LCD_Print_WarningSign+0x148>)
 8001154:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001158:	e892 0003 	ldmia.w	r2, {r0, r1}
 800115c:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00000001
	};
	uint8_t LCD_R1_C18_Array[8] =
 8001160:	4a46      	ldr	r2, [pc, #280]	; (800127c <LCD_Print_WarningSign+0x14c>)
 8001162:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001166:	e892 0003 	ldmia.w	r2, {r0, r1}
 800116a:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00010000
	};
	uint8_t LCD_R2_C14_Array[8] =
 800116e:	4a44      	ldr	r2, [pc, #272]	; (8001280 <LCD_Print_WarningSign+0x150>)
 8001170:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001174:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001178:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00011111
	};

	uint8_t LCD_R2_C18_Array[8] =
 800117c:	4a41      	ldr	r2, [pc, #260]	; (8001284 <LCD_Print_WarningSign+0x154>)
 800117e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001182:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001186:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C13_Array[8] =
 800118a:	4a3f      	ldr	r2, [pc, #252]	; (8001288 <LCD_Print_WarningSign+0x158>)
 800118c:	f107 0320 	add.w	r3, r7, #32
 8001190:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001194:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000010,
			0b00000100,
			0b00001000,
			0b00011111
	};
	uint8_t LCD_R2_C19_Array[8] =
 8001198:	4a3c      	ldr	r2, [pc, #240]	; (800128c <LCD_Print_WarningSign+0x15c>)
 800119a:	f107 0318 	add.w	r3, r7, #24
 800119e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011a2:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00001000,
			0b00000100,
			0b00000010,
			0b00011111
	};
	uint8_t LCD_R2_C15_Array[8] =
 80011a6:	4a3a      	ldr	r2, [pc, #232]	; (8001290 <LCD_Print_WarningSign+0x160>)
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011b0:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C17_Array[8] =
 80011b4:	4a36      	ldr	r2, [pc, #216]	; (8001290 <LCD_Print_WarningSign+0x160>)
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011be:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C16_Array[8] =
 80011c2:	4a34      	ldr	r2, [pc, #208]	; (8001294 <LCD_Print_WarningSign+0x164>)
 80011c4:	463b      	mov	r3, r7
 80011c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011ca:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00011111
	};

	LCD_voidDrawSpecialCharachter(&LCD_R1_C14_Array, 0, 1, 14);
 80011ce:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80011d2:	230e      	movs	r3, #14
 80011d4:	2201      	movs	r2, #1
 80011d6:	2100      	movs	r1, #0
 80011d8:	f000 f94e 	bl	8001478 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R1_C15_Array, 0, 1, 15);
 80011dc:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80011e0:	230f      	movs	r3, #15
 80011e2:	2201      	movs	r2, #1
 80011e4:	2100      	movs	r1, #0
 80011e6:	f000 f947 	bl	8001478 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R1_C16_Array, 0, 1, 16);
 80011ea:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80011ee:	2310      	movs	r3, #16
 80011f0:	2201      	movs	r2, #1
 80011f2:	2100      	movs	r1, #0
 80011f4:	f000 f940 	bl	8001478 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R1_C18_Array, 0, 1, 18);
 80011f8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80011fc:	2312      	movs	r3, #18
 80011fe:	2201      	movs	r2, #1
 8001200:	2100      	movs	r1, #0
 8001202:	f000 f939 	bl	8001478 <LCD_voidDrawSpecialCharachter>

	LCD_voidDrawSpecialCharachter(&LCD_R2_C13_Array, 0, 2, 13);
 8001206:	f107 0020 	add.w	r0, r7, #32
 800120a:	230d      	movs	r3, #13
 800120c:	2202      	movs	r2, #2
 800120e:	2100      	movs	r1, #0
 8001210:	f000 f932 	bl	8001478 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C14_Array, 0, 2, 14);
 8001214:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001218:	230e      	movs	r3, #14
 800121a:	2202      	movs	r2, #2
 800121c:	2100      	movs	r1, #0
 800121e:	f000 f92b 	bl	8001478 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C15_Array, 0, 2, 15);
 8001222:	f107 0010 	add.w	r0, r7, #16
 8001226:	230f      	movs	r3, #15
 8001228:	2202      	movs	r2, #2
 800122a:	2100      	movs	r1, #0
 800122c:	f000 f924 	bl	8001478 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C16_Array, 0, 2, 16);
 8001230:	4638      	mov	r0, r7
 8001232:	2310      	movs	r3, #16
 8001234:	2202      	movs	r2, #2
 8001236:	2100      	movs	r1, #0
 8001238:	f000 f91e 	bl	8001478 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C17_Array, 0, 2, 17);
 800123c:	f107 0008 	add.w	r0, r7, #8
 8001240:	2311      	movs	r3, #17
 8001242:	2202      	movs	r2, #2
 8001244:	2100      	movs	r1, #0
 8001246:	f000 f917 	bl	8001478 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C18_Array, 0, 2, 18);
 800124a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800124e:	2312      	movs	r3, #18
 8001250:	2202      	movs	r2, #2
 8001252:	2100      	movs	r1, #0
 8001254:	f000 f910 	bl	8001478 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C19_Array, 0, 2, 19);
 8001258:	f107 0018 	add.w	r0, r7, #24
 800125c:	2313      	movs	r3, #19
 800125e:	2202      	movs	r2, #2
 8001260:	2100      	movs	r1, #0
 8001262:	f000 f909 	bl	8001478 <LCD_voidDrawSpecialCharachter>



}
 8001266:	bf00      	nop
 8001268:	3758      	adds	r7, #88	; 0x58
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	0800d0f8 	.word	0x0800d0f8
 8001274:	0800d100 	.word	0x0800d100
 8001278:	0800d108 	.word	0x0800d108
 800127c:	0800d110 	.word	0x0800d110
 8001280:	0800d118 	.word	0x0800d118
 8001284:	0800d120 	.word	0x0800d120
 8001288:	0800d128 	.word	0x0800d128
 800128c:	0800d130 	.word	0x0800d130
 8001290:	0800d138 	.word	0x0800d138
 8001294:	0800d140 	.word	0x0800d140

08001298 <LCD_voidInit>:
#define LCD_SLAVE_ADDRESS 0b01001110

extern I2C_HandleTypeDef hi2c1;

void LCD_voidInit(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	/*Setting 4 bits interface(Twice as the datasheet specefies)*/
	LCD_voidSendCommand(0b00110011);
 800129c:	2033      	movs	r0, #51	; 0x33
 800129e:	f000 f829 	bl	80012f4 <LCD_voidSendCommand>
	LCD_voidSendCommand(0b00110010);
 80012a2:	2032      	movs	r0, #50	; 0x32
 80012a4:	f000 f826 	bl	80012f4 <LCD_voidSendCommand>
	HAL_Delay(50);
 80012a8:	2032      	movs	r0, #50	; 0x32
 80012aa:	f001 fa87 	bl	80027bc <HAL_Delay>
	/*Setting the LCD Function*/
	LCD_voidSendCommand(0b00101000);
 80012ae:	2028      	movs	r0, #40	; 0x28
 80012b0:	f000 f820 	bl	80012f4 <LCD_voidSendCommand>
	HAL_Delay(50);
 80012b4:	2032      	movs	r0, #50	; 0x32
 80012b6:	f001 fa81 	bl	80027bc <HAL_Delay>
	/*Clearing the display*/
	LCD_voidSendCommand(0b00000001);
 80012ba:	2001      	movs	r0, #1
 80012bc:	f000 f81a 	bl	80012f4 <LCD_voidSendCommand>
	HAL_Delay(50);
 80012c0:	2032      	movs	r0, #50	; 0x32
 80012c2:	f001 fa7b 	bl	80027bc <HAL_Delay>
	/*Set the entry mode*/
	LCD_voidSendCommand(0b00000110);
 80012c6:	2006      	movs	r0, #6
 80012c8:	f000 f814 	bl	80012f4 <LCD_voidSendCommand>
	HAL_Delay(50);
 80012cc:	2032      	movs	r0, #50	; 0x32
 80012ce:	f001 fa75 	bl	80027bc <HAL_Delay>
	/*Set the display to on*/
	LCD_voidSendCommand(0b00001100);
 80012d2:	200c      	movs	r0, #12
 80012d4:	f000 f80e 	bl	80012f4 <LCD_voidSendCommand>
	HAL_Delay(50);
 80012d8:	2032      	movs	r0, #50	; 0x32
 80012da:	f001 fa6f 	bl	80027bc <HAL_Delay>
	/*Set the cursor to home */
	LCD_voidSendCommand(0b00000010);
 80012de:	2002      	movs	r0, #2
 80012e0:	f000 f808 	bl	80012f4 <LCD_voidSendCommand>
	HAL_Delay(50);
 80012e4:	2032      	movs	r0, #50	; 0x32
 80012e6:	f001 fa69 	bl	80027bc <HAL_Delay>
	/*and the Data address to 0*/
	LCD_voidSendCommand(0b10000000);
 80012ea:	2080      	movs	r0, #128	; 0x80
 80012ec:	f000 f802 	bl	80012f4 <LCD_voidSendCommand>

}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <LCD_voidSendCommand>:
void LCD_voidSendCommand(uint8_t Copy_uint8Command)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
 *
 *
 * 0b00000001 --> DataU --> 0b000000000-->0b00000001100
 *
 * */
	Local_uint8Local_uint8DataU=(Copy_uint8Command&0b11110000);
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f023 030f 	bic.w	r3, r3, #15
 8001304:	73fb      	strb	r3, [r7, #15]
	Local_uint8Local_uint8DataL=((Copy_uint8Command<<4)&0b11110000);
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	73bb      	strb	r3, [r7, #14]

	Local_uint8Local_uint8DataT[0]=Local_uint8Local_uint8DataU|0b00001100; //EN=1 RS=0
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	f043 030c 	orr.w	r3, r3, #12
 8001312:	b2db      	uxtb	r3, r3
 8001314:	723b      	strb	r3, [r7, #8]
	Local_uint8Local_uint8DataT[1]=Local_uint8Local_uint8DataU|0b00001000; //EN=0 RS=0
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	f043 0308 	orr.w	r3, r3, #8
 800131c:	b2db      	uxtb	r3, r3
 800131e:	727b      	strb	r3, [r7, #9]
	Local_uint8Local_uint8DataT[2]=Local_uint8Local_uint8DataL|0b00001100; //EN=1 RS=0
 8001320:	7bbb      	ldrb	r3, [r7, #14]
 8001322:	f043 030c 	orr.w	r3, r3, #12
 8001326:	b2db      	uxtb	r3, r3
 8001328:	72bb      	strb	r3, [r7, #10]
	Local_uint8Local_uint8DataT[3]=Local_uint8Local_uint8DataL|0b00001000; //EN=0 RS=0
 800132a:	7bbb      	ldrb	r3, [r7, #14]
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	b2db      	uxtb	r3, r3
 8001332:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDRESS,(uint8_t*)Local_uint8Local_uint8DataT , 4, 100);
 8001334:	f107 0208 	add.w	r2, r7, #8
 8001338:	2364      	movs	r3, #100	; 0x64
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2304      	movs	r3, #4
 800133e:	214e      	movs	r1, #78	; 0x4e
 8001340:	4803      	ldr	r0, [pc, #12]	; (8001350 <LCD_voidSendCommand+0x5c>)
 8001342:	f001 fec5 	bl	80030d0 <HAL_I2C_Master_Transmit>
}
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000408 	.word	0x20000408

08001354 <LCD_voidSendCharachter>:

void LCD_voidSendCharachter(uint8_t Copy_uint8Charachter)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af02      	add	r7, sp, #8
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_uint8Local_uint8DataU,Local_uint8Local_uint8DataL;
	uint8_t Local_uint8Local_uint8DataT[4];
	Local_uint8Local_uint8DataU=(Copy_uint8Charachter&0b11110000);
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	f023 030f 	bic.w	r3, r3, #15
 8001364:	73fb      	strb	r3, [r7, #15]
	Local_uint8Local_uint8DataL=((Copy_uint8Charachter<<4)&0b11110000);
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	73bb      	strb	r3, [r7, #14]

	Local_uint8Local_uint8DataT[0]=Local_uint8Local_uint8DataU|0b00001101; //EN=1 RS=0
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	f043 030d 	orr.w	r3, r3, #13
 8001372:	b2db      	uxtb	r3, r3
 8001374:	723b      	strb	r3, [r7, #8]
	Local_uint8Local_uint8DataT[1]=Local_uint8Local_uint8DataU|0b00001001; //EN=0 RS=0
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	f043 0309 	orr.w	r3, r3, #9
 800137c:	b2db      	uxtb	r3, r3
 800137e:	727b      	strb	r3, [r7, #9]
	Local_uint8Local_uint8DataT[2]=Local_uint8Local_uint8DataL|0b00001101; //EN=1 RS=0
 8001380:	7bbb      	ldrb	r3, [r7, #14]
 8001382:	f043 030d 	orr.w	r3, r3, #13
 8001386:	b2db      	uxtb	r3, r3
 8001388:	72bb      	strb	r3, [r7, #10]
	Local_uint8Local_uint8DataT[3]=Local_uint8Local_uint8DataL|0b00001001; //EN=0 RS=0
 800138a:	7bbb      	ldrb	r3, [r7, #14]
 800138c:	f043 0309 	orr.w	r3, r3, #9
 8001390:	b2db      	uxtb	r3, r3
 8001392:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDRESS,(uint8_t*)Local_uint8Local_uint8DataT , 4, 100);
 8001394:	f107 0208 	add.w	r2, r7, #8
 8001398:	2364      	movs	r3, #100	; 0x64
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2304      	movs	r3, #4
 800139e:	214e      	movs	r1, #78	; 0x4e
 80013a0:	4803      	ldr	r0, [pc, #12]	; (80013b0 <LCD_voidSendCharachter+0x5c>)
 80013a2:	f001 fe95 	bl	80030d0 <HAL_I2C_Master_Transmit>

}
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000408 	.word	0x20000408

080013b4 <LCD_voidSendString>:

void LCD_voidSendString (uint8_t *Copy_pu8StringOfCharachters)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8Counter=0;
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8StringOfCharachters[Local_uint8Counter] !='\0')
 80013c0:	e009      	b.n	80013d6 <LCD_voidSendString+0x22>
	{
		LCD_voidSendCharachter(Copy_pu8StringOfCharachters[Local_uint8Counter]);
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ffc2 	bl	8001354 <LCD_voidSendCharachter>
		Local_uint8Counter++;
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	3301      	adds	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8StringOfCharachters[Local_uint8Counter] !='\0')
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	4413      	add	r3, r2
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1ef      	bne.n	80013c2 <LCD_voidSendString+0xe>
	}


}
 80013e2:	bf00      	nop
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <LCD_voidSetPositionXY>:
void LCD_voidSetPositionXY(uint8_t Copy_uint8Row,uint8_t Copy_uint8Column)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	460a      	mov	r2, r1
 80013f6:	71fb      	strb	r3, [r7, #7]
 80013f8:	4613      	mov	r3, r2
 80013fa:	71bb      	strb	r3, [r7, #6]
	//1,add,add,add,add,add,add,add,0,0
	uint8_t Local_uint8PositionAddress = 0b10000000;
 80013fc:	2380      	movs	r3, #128	; 0x80
 80013fe:	73fb      	strb	r3, [r7, #15]
	switch(Copy_uint8Row){
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	2b03      	cmp	r3, #3
 8001404:	d82d      	bhi.n	8001462 <LCD_voidSetPositionXY+0x76>
 8001406:	a201      	add	r2, pc, #4	; (adr r2, 800140c <LCD_voidSetPositionXY+0x20>)
 8001408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140c:	0800141d 	.word	0x0800141d
 8001410:	08001427 	.word	0x08001427
 8001414:	0800143b 	.word	0x0800143b
 8001418:	0800144f 	.word	0x0800144f
	case 0:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 0);
 800141c:	7bfa      	ldrb	r2, [r7, #15]
 800141e:	79bb      	ldrb	r3, [r7, #6]
 8001420:	4313      	orrs	r3, r2
 8001422:	73fb      	strb	r3, [r7, #15]
		break;
 8001424:	e01d      	b.n	8001462 <LCD_voidSetPositionXY+0x76>
	case 1:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 64);
 8001426:	79bb      	ldrb	r3, [r7, #6]
 8001428:	3340      	adds	r3, #64	; 0x40
 800142a:	b2db      	uxtb	r3, r3
 800142c:	b25a      	sxtb	r2, r3
 800142e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001432:	4313      	orrs	r3, r2
 8001434:	b25b      	sxtb	r3, r3
 8001436:	73fb      	strb	r3, [r7, #15]
		break;
 8001438:	e013      	b.n	8001462 <LCD_voidSetPositionXY+0x76>
	case 2:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 20);
 800143a:	79bb      	ldrb	r3, [r7, #6]
 800143c:	3314      	adds	r3, #20
 800143e:	b2db      	uxtb	r3, r3
 8001440:	b25a      	sxtb	r2, r3
 8001442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001446:	4313      	orrs	r3, r2
 8001448:	b25b      	sxtb	r3, r3
 800144a:	73fb      	strb	r3, [r7, #15]
		break;
 800144c:	e009      	b.n	8001462 <LCD_voidSetPositionXY+0x76>
	case 3:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 84);
 800144e:	79bb      	ldrb	r3, [r7, #6]
 8001450:	3354      	adds	r3, #84	; 0x54
 8001452:	b2db      	uxtb	r3, r3
 8001454:	b25a      	sxtb	r2, r3
 8001456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145a:	4313      	orrs	r3, r2
 800145c:	b25b      	sxtb	r3, r3
 800145e:	73fb      	strb	r3, [r7, #15]
		break;
 8001460:	bf00      	nop
	}
		LCD_voidSendCommand(Local_uint8PositionAddress);
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff45 	bl	80012f4 <LCD_voidSendCommand>
		HAL_Delay(1);
 800146a:	2001      	movs	r0, #1
 800146c:	f001 f9a6 	bl	80027bc <HAL_Delay>

}
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <LCD_voidDrawSpecialCharachter>:
		}
	}
}

void LCD_voidDrawSpecialCharachter(uint8_t*Copy_puint8Pattern,uint8_t Copy_uint8LocationNum,uint8_t Copy_uint8RowNum,uint8_t Copy_uint8ColNum)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	4608      	mov	r0, r1
 8001482:	4611      	mov	r1, r2
 8001484:	461a      	mov	r2, r3
 8001486:	4603      	mov	r3, r0
 8001488:	70fb      	strb	r3, [r7, #3]
 800148a:	460b      	mov	r3, r1
 800148c:	70bb      	strb	r3, [r7, #2]
 800148e:	4613      	mov	r3, r2
 8001490:	707b      	strb	r3, [r7, #1]
	/*Accessing the CGRAM address*/
	uint8_t Local_uint8CGRAMAddress,Local_uint8Counter;
	Local_uint8CGRAMAddress=Copy_uint8LocationNum*8;
 8001492:	78fb      	ldrb	r3, [r7, #3]
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	73bb      	strb	r3, [r7, #14]
	/*Accessing CGRAM of lcd by command 0b01xxxxxx*/
	LCD_voidSendCommand(Local_uint8CGRAMAddress+64);
 8001498:	7bbb      	ldrb	r3, [r7, #14]
 800149a:	3340      	adds	r3, #64	; 0x40
 800149c:	b2db      	uxtb	r3, r3
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ff28 	bl	80012f4 <LCD_voidSendCommand>
	/*Write the pattern on CGRAM*/
	/*zy makont ba3mel fel string ha3mel hena , bas al fekra ane hawa2f al loop 3nd (((8))) ale howa max bytes
	 * in a location in the CGRAM fal user masaln e5tar location 0 fa2a5ro feh 8 charachters ale homa 8 bytes*/
	for(Local_uint8Counter=0;Local_uint8Counter<8;Local_uint8Counter++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	73fb      	strb	r3, [r7, #15]
 80014a8:	e009      	b.n	80014be <LCD_voidDrawSpecialCharachter+0x46>
	{
		LCD_voidSendCharachter(Copy_puint8Pattern[Local_uint8Counter]);
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff4e 	bl	8001354 <LCD_voidSendCharachter>
	for(Local_uint8Counter=0;Local_uint8Counter<8;Local_uint8Counter++)
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	3301      	adds	r3, #1
 80014bc:	73fb      	strb	r3, [r7, #15]
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	2b07      	cmp	r3, #7
 80014c2:	d9f2      	bls.n	80014aa <LCD_voidDrawSpecialCharachter+0x32>
	}
	/*Keda e7na 7atena al pattern fe location mo3yn fel CGRAM, fa na2esna bas neb3at al pattern lel DDRAM 34an n7oto fel LCD */
	/*kona fo2 3malna command 34an ne access al CGRAM 34an ne access al DDRAM lazem command tany
	 * wel set position feha asln al command dah*/
	LCD_voidSetPositionXY(Copy_uint8RowNum,Copy_uint8ColNum);
 80014c4:	787a      	ldrb	r2, [r7, #1]
 80014c6:	78bb      	ldrb	r3, [r7, #2]
 80014c8:	4611      	mov	r1, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ff8e 	bl	80013ec <LCD_voidSetPositionXY>
	LCD_voidSendCharachter(Copy_uint8LocationNum);
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff3e 	bl	8001354 <LCD_voidSendCharachter>
}
 80014d8:	bf00      	nop
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <TASK_LCDBuzzer>:
#include "bluetooth.h"
#include "Build_msg.h"

extern uint8_t received_char;
void TASK_LCDBuzzer (void *parameters)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	6078      	str	r0, [r7, #4]
    uint32_t Local_uint8NotificationValue;

	while(1)
	{
      xTaskNotifyWait((uint32_t)NULL,0xFFFFFFFF,&Local_uint8NotificationValue, portMAX_DELAY);
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	f04f 32ff 	mov.w	r2, #4294967295
 80014f0:	9200      	str	r2, [sp, #0]
 80014f2:	f04f 32ff 	mov.w	r2, #4294967295
 80014f6:	2100      	movs	r1, #0
 80014f8:	2000      	movs	r0, #0
 80014fa:	f006 fb19 	bl	8007b30 <xTaskGenericNotifyWait>

	 switch(Local_uint8NotificationValue)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d104      	bne.n	800150e <TASK_LCDBuzzer+0x2e>
	  {
	 case Notify_TASK_LCDBuzzer_Break:

         Buzzer_voidHighSound();
 8001504:	f7ff fdae 	bl	8001064 <Buzzer_voidHighSound>
         LCD_HighLightIntensity_Warning();
 8001508:	f7ff fdfa 	bl	8001100 <LCD_HighLightIntensity_Warning>



		 break;
 800150c:	e000      	b.n	8001510 <TASK_LCDBuzzer+0x30>

	 default:
		 /*Do Nothing*/
		 break;
 800150e:	bf00      	nop
      xTaskNotifyWait((uint32_t)NULL,0xFFFFFFFF,&Local_uint8NotificationValue, portMAX_DELAY);
 8001510:	e7ea      	b.n	80014e8 <TASK_LCDBuzzer+0x8>

08001512 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001512:	b480      	push	{r7}
 8001514:	b085      	sub	sp, #20
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	6039      	str	r1, [r7, #0]
 800151c:	71fb      	strb	r3, [r7, #7]
	 * increments by 1 for future storing, it doesnt coincide with the tail
	 * the % UART_BUFFER_SIZE checking if the index of the next storing procedure
	 * is bigger than the buffer size(ex this iteration stores in 512 byte and the next one
	 * will be in the 513 so i should reset the (i) to zero to repeat again)*/

  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001524:	3301      	adds	r3, #1
 8001526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800152a:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	429a      	cmp	r2, r3
 8001536:	d009      	beq.n	800154c <store_char+0x3a>
  {
	  /*Storing the charachter in the recent head pointed location*/
    buffer->buffer[buffer->head] = c;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	79f9      	ldrb	r1, [r7, #7]
 8001542:	54d1      	strb	r1, [r2, r3]

    /*After storing the character, incrementing the head for the next storing */
    buffer->head = i;
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f003 0320 	and.w	r3, r3, #32
 8001576:	2b00      	cmp	r3, #0
 8001578:	d013      	beq.n	80015a2 <Uart_isr+0x4a>
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	f003 0320 	and.w	r3, r3, #32
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00e      	beq.n	80015a2 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8001592:	4b1e      	ldr	r3, [pc, #120]	; (800160c <Uart_isr+0xb4>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	4611      	mov	r1, r2
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ffb9 	bl	8001512 <store_char>
        return;
 80015a0:	e031      	b.n	8001606 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d02c      	beq.n	8001606 <Uart_isr+0xae>
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d027      	beq.n	8001606 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <Uart_isr+0xb8>)
 80015b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80015bc:	4b14      	ldr	r3, [pc, #80]	; (8001610 <Uart_isr+0xb8>)
 80015be:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d108      	bne.n	80015d8 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015d4:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80015d6:	e015      	b.n	8001604 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80015d8:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <Uart_isr+0xb8>)
 80015da:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80015de:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <Uart_isr+0xb8>)
 80015e0:	5cd3      	ldrb	r3, [r2, r3]
 80015e2:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80015e4:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <Uart_isr+0xb8>)
 80015e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80015ea:	3301      	adds	r3, #1
 80015ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015f0:	4a07      	ldr	r2, [pc, #28]	; (8001610 <Uart_isr+0xb8>)
 80015f2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	7bba      	ldrb	r2, [r7, #14]
 8001602:	605a      	str	r2, [r3, #4]
    	return;
 8001604:	bf00      	nop
    }
}
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000404 	.word	0x20000404
 8001610:	200001fc 	.word	0x200001fc

08001614 <Calculate_Car_Speed>:
#include "calculateSpeed.h"

extern uint32_t edges_counter;

float Calculate_Car_Speed()
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
	float Local_uint16Speed;
	Local_uint16Speed = (edges_counter/50)/(2000.0*60);
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <Calculate_Car_Speed+0x48>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a10      	ldr	r2, [pc, #64]	; (8001660 <Calculate_Car_Speed+0x4c>)
 8001620:	fba2 2303 	umull	r2, r3, r2, r3
 8001624:	091b      	lsrs	r3, r3, #4
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ffdc 	bl	80005e4 <__aeabi_ui2d>
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <Calculate_Car_Speed+0x50>)
 8001632:	f7ff f97b 	bl	800092c <__aeabi_ddiv>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff fb43 	bl	8000cc8 <__aeabi_d2f>
 8001642:	4603      	mov	r3, r0
 8001644:	607b      	str	r3, [r7, #4]
	edges_counter=0;
 8001646:	4b05      	ldr	r3, [pc, #20]	; (800165c <Calculate_Car_Speed+0x48>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
	return Local_uint16Speed;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	ee07 3a90 	vmov	s15, r3
}
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	200001f8 	.word	0x200001f8
 8001660:	51eb851f 	.word	0x51eb851f
 8001664:	40fd4c00 	.word	0x40fd4c00

08001668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800166e:	f001 f863 	bl	8002738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001672:	f000 f853 	bl	800171c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001676:	f000 fb15 	bl	8001ca4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800167a:	f000 f8bb 	bl	80017f4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800167e:	f000 fa93 	bl	8001ba8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001682:	f000 fabb 	bl	8001bfc <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001686:	f000 f911 	bl	80018ac <MX_TIM2_Init>
  MX_I2C3_Init();
 800168a:	f000 f8e1 	bl	8001850 <MX_I2C3_Init>
  MX_TIM3_Init();
 800168e:	f000 f96d 	bl	800196c <MX_TIM3_Init>
  MX_UART5_Init();
 8001692:	f000 fa5f 	bl	8001b54 <MX_UART5_Init>
  MX_TIM6_Init();
 8001696:	f000 f9e3 	bl	8001a60 <MX_TIM6_Init>
  MX_TIM12_Init();
 800169a:	f000 fa17 	bl	8001acc <MX_TIM12_Init>
  MX_USART6_UART_Init();
 800169e:	f000 fad7 	bl	8001c50 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
	LCD_voidInit();
 80016a2:	f7ff fdf9 	bl	8001298 <LCD_voidInit>
  
  // enable interrupt
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <main+0xa4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	4b17      	ldr	r3, [pc, #92]	; (800170c <main+0xa4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f042 0201 	orr.w	r2, r2, #1
 80016b4:	60da      	str	r2, [r3, #12]
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80016b6:	2100      	movs	r1, #0
 80016b8:	4814      	ldr	r0, [pc, #80]	; (800170c <main+0xa4>)
 80016ba:	f002 ffe9 	bl	8004690 <HAL_TIM_IC_Start_IT>

	//Enable the CYCCN counter (For SEGGER)
	DWT_CTRL |= (1<<0);
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <main+0xa8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a13      	ldr	r2, [pc, #76]	; (8001710 <main+0xa8>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6013      	str	r3, [r2, #0]

	SEGGER_SYSVIEW_Conf();
 80016ca:	f007 f9f1 	bl	8008ab0 <SEGGER_SYSVIEW_Conf>

	SEGGER_SYSVIEW_Start();
 80016ce:	f008 fa5d 	bl	8009b8c <SEGGER_SYSVIEW_Start>

	Task1_Status=xTaskCreate(TASK_LCDBuzzer, "LED1", 200, NULL, 2, &Task1_Handle);
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	2302      	movs	r3, #2
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	2300      	movs	r3, #0
 80016dc:	22c8      	movs	r2, #200	; 0xc8
 80016de:	490d      	ldr	r1, [pc, #52]	; (8001714 <main+0xac>)
 80016e0:	480d      	ldr	r0, [pc, #52]	; (8001718 <main+0xb0>)
 80016e2:	f005 fae9 	bl	8006cb8 <xTaskCreate>
 80016e6:	60f8      	str	r0, [r7, #12]

	configASSERT(Task1_Status==pdPASS);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d00a      	beq.n	8001704 <main+0x9c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80016ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016f2:	f383 8811 	msr	BASEPRI, r3
 80016f6:	f3bf 8f6f 	isb	sy
 80016fa:	f3bf 8f4f 	dsb	sy
 80016fe:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001700:	bf00      	nop
 8001702:	e7fe      	b.n	8001702 <main+0x9a>

	vTaskStartScheduler();
 8001704:	f005 fc60 	bl	8006fc8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001708:	e7fe      	b.n	8001708 <main+0xa0>
 800170a:	bf00      	nop
 800170c:	200004b0 	.word	0x200004b0
 8001710:	e0001000 	.word	0xe0001000
 8001714:	0800d148 	.word	0x0800d148
 8001718:	080014e1 	.word	0x080014e1

0800171c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b094      	sub	sp, #80	; 0x50
 8001720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001722:	f107 031c 	add.w	r3, r7, #28
 8001726:	2234      	movs	r2, #52	; 0x34
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f009 fd27 	bl	800b17e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001730:	f107 0308 	add.w	r3, r7, #8
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001740:	2300      	movs	r3, #0
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	4b29      	ldr	r3, [pc, #164]	; (80017ec <SystemClock_Config+0xd0>)
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	4a28      	ldr	r2, [pc, #160]	; (80017ec <SystemClock_Config+0xd0>)
 800174a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800174e:	6413      	str	r3, [r2, #64]	; 0x40
 8001750:	4b26      	ldr	r3, [pc, #152]	; (80017ec <SystemClock_Config+0xd0>)
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800175c:	2300      	movs	r3, #0
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <SystemClock_Config+0xd4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001768:	4a21      	ldr	r2, [pc, #132]	; (80017f0 <SystemClock_Config+0xd4>)
 800176a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <SystemClock_Config+0xd4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001778:	603b      	str	r3, [r7, #0]
 800177a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800177c:	2302      	movs	r3, #2
 800177e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001780:	2301      	movs	r3, #1
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001784:	2310      	movs	r3, #16
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001788:	2302      	movs	r3, #2
 800178a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800178c:	2300      	movs	r3, #0
 800178e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001790:	2308      	movs	r3, #8
 8001792:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001794:	2340      	movs	r3, #64	; 0x40
 8001796:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001798:	2302      	movs	r3, #2
 800179a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800179c:	2302      	movs	r3, #2
 800179e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017a0:	2302      	movs	r3, #2
 80017a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	4618      	mov	r0, r3
 80017aa:	f002 faab 	bl	8003d04 <HAL_RCC_OscConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80017b4:	f000 fb16 	bl	8001de4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b8:	230f      	movs	r3, #15
 80017ba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017bc:	2302      	movs	r3, #2
 80017be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017cc:	f107 0308 	add.w	r3, r7, #8
 80017d0:	2101      	movs	r1, #1
 80017d2:	4618      	mov	r0, r3
 80017d4:	f001 ffa0 	bl	8003718 <HAL_RCC_ClockConfig>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80017de:	f000 fb01 	bl	8001de4 <Error_Handler>
  }
}
 80017e2:	bf00      	nop
 80017e4:	3750      	adds	r7, #80	; 0x50
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40007000 	.word	0x40007000

080017f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017f8:	4b13      	ldr	r3, [pc, #76]	; (8001848 <MX_I2C1_Init+0x54>)
 80017fa:	4a14      	ldr	r2, [pc, #80]	; (800184c <MX_I2C1_Init+0x58>)
 80017fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 1000;
 80017fe:	4b12      	ldr	r3, [pc, #72]	; (8001848 <MX_I2C1_Init+0x54>)
 8001800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001804:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <MX_I2C1_Init+0x54>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <MX_I2C1_Init+0x54>)
 800180e:	2200      	movs	r2, #0
 8001810:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001812:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <MX_I2C1_Init+0x54>)
 8001814:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001818:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <MX_I2C1_Init+0x54>)
 800181c:	2200      	movs	r2, #0
 800181e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <MX_I2C1_Init+0x54>)
 8001822:	2200      	movs	r2, #0
 8001824:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <MX_I2C1_Init+0x54>)
 8001828:	2200      	movs	r2, #0
 800182a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <MX_I2C1_Init+0x54>)
 800182e:	2200      	movs	r2, #0
 8001830:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001832:	4805      	ldr	r0, [pc, #20]	; (8001848 <MX_I2C1_Init+0x54>)
 8001834:	f001 fb08 	bl	8002e48 <HAL_I2C_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800183e:	f000 fad1 	bl	8001de4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000408 	.word	0x20000408
 800184c:	40005400 	.word	0x40005400

08001850 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <MX_I2C3_Init+0x50>)
 8001856:	4a13      	ldr	r2, [pc, #76]	; (80018a4 <MX_I2C3_Init+0x54>)
 8001858:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <MX_I2C3_Init+0x50>)
 800185c:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <MX_I2C3_Init+0x58>)
 800185e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <MX_I2C3_Init+0x50>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <MX_I2C3_Init+0x50>)
 8001868:	2200      	movs	r2, #0
 800186a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <MX_I2C3_Init+0x50>)
 800186e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001872:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001874:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <MX_I2C3_Init+0x50>)
 8001876:	2200      	movs	r2, #0
 8001878:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <MX_I2C3_Init+0x50>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001880:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <MX_I2C3_Init+0x50>)
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <MX_I2C3_Init+0x50>)
 8001888:	2200      	movs	r2, #0
 800188a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800188c:	4804      	ldr	r0, [pc, #16]	; (80018a0 <MX_I2C3_Init+0x50>)
 800188e:	f001 fadb 	bl	8002e48 <HAL_I2C_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001898:	f000 faa4 	bl	8001de4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	2000045c 	.word	0x2000045c
 80018a4:	40005c00 	.word	0x40005c00
 80018a8:	000186a0 	.word	0x000186a0

080018ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b2:	f107 0310 	add.w	r3, r7, #16
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018bc:	463b      	mov	r3, r7
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018c8:	4b27      	ldr	r3, [pc, #156]	; (8001968 <MX_TIM2_Init+0xbc>)
 80018ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 80018d0:	4b25      	ldr	r3, [pc, #148]	; (8001968 <MX_TIM2_Init+0xbc>)
 80018d2:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80018d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d8:	4b23      	ldr	r3, [pc, #140]	; (8001968 <MX_TIM2_Init+0xbc>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000;
 80018de:	4b22      	ldr	r3, [pc, #136]	; (8001968 <MX_TIM2_Init+0xbc>)
 80018e0:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80018e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e6:	4b20      	ldr	r3, [pc, #128]	; (8001968 <MX_TIM2_Init+0xbc>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <MX_TIM2_Init+0xbc>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80018f2:	481d      	ldr	r0, [pc, #116]	; (8001968 <MX_TIM2_Init+0xbc>)
 80018f4:	f002 fe7c 	bl	80045f0 <HAL_TIM_IC_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80018fe:	f000 fa71 	bl	8001de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800190a:	f107 0310 	add.w	r3, r7, #16
 800190e:	4619      	mov	r1, r3
 8001910:	4815      	ldr	r0, [pc, #84]	; (8001968 <MX_TIM2_Init+0xbc>)
 8001912:	f003 fe09 	bl	8005528 <HAL_TIMEx_MasterConfigSynchronization>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800191c:	f000 fa62 	bl	8001de4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001920:	230a      	movs	r3, #10
 8001922:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001924:	2301      	movs	r3, #1
 8001926:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001928:	2300      	movs	r3, #0
 800192a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001930:	463b      	mov	r3, r7
 8001932:	2200      	movs	r2, #0
 8001934:	4619      	mov	r1, r3
 8001936:	480c      	ldr	r0, [pc, #48]	; (8001968 <MX_TIM2_Init+0xbc>)
 8001938:	f003 f8da 	bl	8004af0 <HAL_TIM_IC_ConfigChannel>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001942:	f000 fa4f 	bl	8001de4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001946:	2300      	movs	r3, #0
 8001948:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800194a:	463b      	mov	r3, r7
 800194c:	2204      	movs	r2, #4
 800194e:	4619      	mov	r1, r3
 8001950:	4805      	ldr	r0, [pc, #20]	; (8001968 <MX_TIM2_Init+0xbc>)
 8001952:	f003 f8cd 	bl	8004af0 <HAL_TIM_IC_ConfigChannel>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800195c:	f000 fa42 	bl	8001de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001960:	bf00      	nop
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	200004b0 	.word	0x200004b0

0800196c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001972:	f107 0320 	add.w	r3, r7, #32
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]
 8001988:	611a      	str	r2, [r3, #16]
 800198a:	615a      	str	r2, [r3, #20]
 800198c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800198e:	4b32      	ldr	r3, [pc, #200]	; (8001a58 <MX_TIM3_Init+0xec>)
 8001990:	4a32      	ldr	r2, [pc, #200]	; (8001a5c <MX_TIM3_Init+0xf0>)
 8001992:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 320-1;
 8001994:	4b30      	ldr	r3, [pc, #192]	; (8001a58 <MX_TIM3_Init+0xec>)
 8001996:	f240 123f 	movw	r2, #319	; 0x13f
 800199a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199c:	4b2e      	ldr	r3, [pc, #184]	; (8001a58 <MX_TIM3_Init+0xec>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80019a2:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <MX_TIM3_Init+0xec>)
 80019a4:	2263      	movs	r2, #99	; 0x63
 80019a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a8:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <MX_TIM3_Init+0xec>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ae:	4b2a      	ldr	r3, [pc, #168]	; (8001a58 <MX_TIM3_Init+0xec>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019b4:	4828      	ldr	r0, [pc, #160]	; (8001a58 <MX_TIM3_Init+0xec>)
 80019b6:	f002 fd03 	bl	80043c0 <HAL_TIM_PWM_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80019c0:	f000 fa10 	bl	8001de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019cc:	f107 0320 	add.w	r3, r7, #32
 80019d0:	4619      	mov	r1, r3
 80019d2:	4821      	ldr	r0, [pc, #132]	; (8001a58 <MX_TIM3_Init+0xec>)
 80019d4:	f003 fda8 	bl	8005528 <HAL_TIMEx_MasterConfigSynchronization>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80019de:	f000 fa01 	bl	8001de4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019e2:	2360      	movs	r3, #96	; 0x60
 80019e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	2200      	movs	r2, #0
 80019f6:	4619      	mov	r1, r3
 80019f8:	4817      	ldr	r0, [pc, #92]	; (8001a58 <MX_TIM3_Init+0xec>)
 80019fa:	f003 f915 	bl	8004c28 <HAL_TIM_PWM_ConfigChannel>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001a04:	f000 f9ee 	bl	8001de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	2204      	movs	r2, #4
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4812      	ldr	r0, [pc, #72]	; (8001a58 <MX_TIM3_Init+0xec>)
 8001a10:	f003 f90a 	bl	8004c28 <HAL_TIM_PWM_ConfigChannel>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001a1a:	f000 f9e3 	bl	8001de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	2208      	movs	r2, #8
 8001a22:	4619      	mov	r1, r3
 8001a24:	480c      	ldr	r0, [pc, #48]	; (8001a58 <MX_TIM3_Init+0xec>)
 8001a26:	f003 f8ff 	bl	8004c28 <HAL_TIM_PWM_ConfigChannel>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001a30:	f000 f9d8 	bl	8001de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	220c      	movs	r2, #12
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4807      	ldr	r0, [pc, #28]	; (8001a58 <MX_TIM3_Init+0xec>)
 8001a3c:	f003 f8f4 	bl	8004c28 <HAL_TIM_PWM_ConfigChannel>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001a46:	f000 f9cd 	bl	8001de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a4a:	4803      	ldr	r0, [pc, #12]	; (8001a58 <MX_TIM3_Init+0xec>)
 8001a4c:	f000 fb3c 	bl	80020c8 <HAL_TIM_MspPostInit>

}
 8001a50:	bf00      	nop
 8001a52:	3728      	adds	r7, #40	; 0x28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	200004f8 	.word	0x200004f8
 8001a5c:	40000400 	.word	0x40000400

08001a60 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a66:	463b      	mov	r3, r7
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <MX_TIM6_Init+0x64>)
 8001a70:	4a15      	ldr	r2, [pc, #84]	; (8001ac8 <MX_TIM6_Init+0x68>)
 8001a72:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001a74:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <MX_TIM6_Init+0x64>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <MX_TIM6_Init+0x64>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001a80:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <MX_TIM6_Init+0x64>)
 8001a82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a86:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a88:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_TIM6_Init+0x64>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a8e:	480d      	ldr	r0, [pc, #52]	; (8001ac4 <MX_TIM6_Init+0x64>)
 8001a90:	f002 fbd6 	bl	8004240 <HAL_TIM_Base_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001a9a:	f000 f9a3 	bl	8001de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4806      	ldr	r0, [pc, #24]	; (8001ac4 <MX_TIM6_Init+0x64>)
 8001aac:	f003 fd3c 	bl	8005528 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001ab6:	f000 f995 	bl	8001de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000540 	.word	0x20000540
 8001ac8:	40001000 	.word	0x40001000

08001acc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
 8001ae0:	615a      	str	r2, [r3, #20]
 8001ae2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001ae4:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <MX_TIM12_Init+0x80>)
 8001ae6:	4a1a      	ldr	r2, [pc, #104]	; (8001b50 <MX_TIM12_Init+0x84>)
 8001ae8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 160-1;
 8001aea:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <MX_TIM12_Init+0x80>)
 8001aec:	229f      	movs	r2, #159	; 0x9f
 8001aee:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af0:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <MX_TIM12_Init+0x80>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 100-1;
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <MX_TIM12_Init+0x80>)
 8001af8:	2263      	movs	r2, #99	; 0x63
 8001afa:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <MX_TIM12_Init+0x80>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b02:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <MX_TIM12_Init+0x80>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001b08:	4810      	ldr	r0, [pc, #64]	; (8001b4c <MX_TIM12_Init+0x80>)
 8001b0a:	f002 fc59 	bl	80043c0 <HAL_TIM_PWM_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8001b14:	f000 f966 	bl	8001de4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b18:	2360      	movs	r3, #96	; 0x60
 8001b1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4807      	ldr	r0, [pc, #28]	; (8001b4c <MX_TIM12_Init+0x80>)
 8001b30:	f003 f87a 	bl	8004c28 <HAL_TIM_PWM_ConfigChannel>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8001b3a:	f000 f953 	bl	8001de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001b3e:	4803      	ldr	r0, [pc, #12]	; (8001b4c <MX_TIM12_Init+0x80>)
 8001b40:	f000 fac2 	bl	80020c8 <HAL_TIM_MspPostInit>

}
 8001b44:	bf00      	nop
 8001b46:	3720      	adds	r7, #32
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000588 	.word	0x20000588
 8001b50:	40001800 	.word	0x40001800

08001b54 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <MX_UART5_Init+0x4c>)
 8001b5a:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <MX_UART5_Init+0x50>)
 8001b5c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <MX_UART5_Init+0x4c>)
 8001b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b64:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <MX_UART5_Init+0x4c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_UART5_Init+0x4c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <MX_UART5_Init+0x4c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_UART5_Init+0x4c>)
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <MX_UART5_Init+0x4c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <MX_UART5_Init+0x4c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001b8a:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <MX_UART5_Init+0x4c>)
 8001b8c:	f003 fd5c 	bl	8005648 <HAL_UART_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001b96:	f000 f925 	bl	8001de4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200005d0 	.word	0x200005d0
 8001ba4:	40005000 	.word	0x40005000

08001ba8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bae:	4a12      	ldr	r2, [pc, #72]	; (8001bf8 <MX_USART1_UART_Init+0x50>)
 8001bb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bb4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001bb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bce:	220c      	movs	r2, #12
 8001bd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd2:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bde:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001be0:	f003 fd32 	bl	8005648 <HAL_UART_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bea:	f000 f8fb 	bl	8001de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000614 	.word	0x20000614
 8001bf8:	40011000 	.word	0x40011000

08001bfc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <MX_USART3_UART_Init+0x4c>)
 8001c02:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <MX_USART3_UART_Init+0x50>)
 8001c04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <MX_USART3_UART_Init+0x4c>)
 8001c08:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <MX_USART3_UART_Init+0x4c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <MX_USART3_UART_Init+0x4c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <MX_USART3_UART_Init+0x4c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c20:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <MX_USART3_UART_Init+0x4c>)
 8001c22:	220c      	movs	r2, #12
 8001c24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c26:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <MX_USART3_UART_Init+0x4c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <MX_USART3_UART_Init+0x4c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c32:	4805      	ldr	r0, [pc, #20]	; (8001c48 <MX_USART3_UART_Init+0x4c>)
 8001c34:	f003 fd08 	bl	8005648 <HAL_UART_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c3e:	f000 f8d1 	bl	8001de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000658 	.word	0x20000658
 8001c4c:	40004800 	.word	0x40004800

08001c50 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c56:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <MX_USART6_UART_Init+0x50>)
 8001c58:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c60:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c76:	220c      	movs	r2, #12
 8001c78:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c86:	4805      	ldr	r0, [pc, #20]	; (8001c9c <MX_USART6_UART_Init+0x4c>)
 8001c88:	f003 fcde 	bl	8005648 <HAL_UART_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001c92:	f000 f8a7 	bl	8001de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	2000069c 	.word	0x2000069c
 8001ca0:	40011400 	.word	0x40011400

08001ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
 8001cb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	4b3c      	ldr	r3, [pc, #240]	; (8001db0 <MX_GPIO_Init+0x10c>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a3b      	ldr	r2, [pc, #236]	; (8001db0 <MX_GPIO_Init+0x10c>)
 8001cc4:	f043 0304 	orr.w	r3, r3, #4
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b39      	ldr	r3, [pc, #228]	; (8001db0 <MX_GPIO_Init+0x10c>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	4b35      	ldr	r3, [pc, #212]	; (8001db0 <MX_GPIO_Init+0x10c>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a34      	ldr	r2, [pc, #208]	; (8001db0 <MX_GPIO_Init+0x10c>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b32      	ldr	r3, [pc, #200]	; (8001db0 <MX_GPIO_Init+0x10c>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	4b2e      	ldr	r3, [pc, #184]	; (8001db0 <MX_GPIO_Init+0x10c>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a2d      	ldr	r2, [pc, #180]	; (8001db0 <MX_GPIO_Init+0x10c>)
 8001cfc:	f043 0302 	orr.w	r3, r3, #2
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <MX_GPIO_Init+0x10c>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	4b27      	ldr	r3, [pc, #156]	; (8001db0 <MX_GPIO_Init+0x10c>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a26      	ldr	r2, [pc, #152]	; (8001db0 <MX_GPIO_Init+0x10c>)
 8001d18:	f043 0308 	orr.w	r3, r3, #8
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <MX_GPIO_Init+0x10c>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f242 311c 	movw	r1, #8988	; 0x231c
 8001d30:	4820      	ldr	r0, [pc, #128]	; (8001db4 <MX_GPIO_Init+0x110>)
 8001d32:	f001 f86f 	bl	8002e14 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001d36:	2200      	movs	r2, #0
 8001d38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d3c:	481e      	ldr	r0, [pc, #120]	; (8001db8 <MX_GPIO_Init+0x114>)
 8001d3e:	f001 f869 	bl	8002e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 8001d42:	2200      	movs	r2, #0
 8001d44:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001d48:	481c      	ldr	r0, [pc, #112]	; (8001dbc <MX_GPIO_Init+0x118>)
 8001d4a:	f001 f863 	bl	8002e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 PC4
                           PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001d4e:	f242 331c 	movw	r3, #8988	; 0x231c
 8001d52:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d54:	2301      	movs	r3, #1
 8001d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	4619      	mov	r1, r3
 8001d66:	4813      	ldr	r0, [pc, #76]	; (8001db4 <MX_GPIO_Init+0x110>)
 8001d68:	f000 fec0 	bl	8002aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d72:	2301      	movs	r3, #1
 8001d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	4619      	mov	r1, r3
 8001d84:	480c      	ldr	r0, [pc, #48]	; (8001db8 <MX_GPIO_Init+0x114>)
 8001d86:	f000 feb1 	bl	8002aec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 8001d8a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d90:	2301      	movs	r3, #1
 8001d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4619      	mov	r1, r3
 8001da2:	4806      	ldr	r0, [pc, #24]	; (8001dbc <MX_GPIO_Init+0x118>)
 8001da4:	f000 fea2 	bl	8002aec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001da8:	bf00      	nop
 8001daa:	3728      	adds	r7, #40	; 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020800 	.word	0x40020800
 8001db8:	40020000 	.word	0x40020000
 8001dbc:	40020400 	.word	0x40020400

08001dc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d101      	bne.n	8001dd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001dd2:	f000 fcd3 	bl	800277c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40001400 	.word	0x40001400

08001de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001de8:	b672      	cpsid	i
}
 8001dea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001dec:	e7fe      	b.n	8001dec <Error_Handler+0x8>
	...

08001df0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <HAL_MspInit+0x4c>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	4a0f      	ldr	r2, [pc, #60]	; (8001e3c <HAL_MspInit+0x4c>)
 8001e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e04:	6453      	str	r3, [r2, #68]	; 0x44
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <HAL_MspInit+0x4c>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	603b      	str	r3, [r7, #0]
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <HAL_MspInit+0x4c>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	4a08      	ldr	r2, [pc, #32]	; (8001e3c <HAL_MspInit+0x4c>)
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e20:	6413      	str	r3, [r2, #64]	; 0x40
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_MspInit+0x4c>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800

08001e40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08c      	sub	sp, #48	; 0x30
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a41      	ldr	r2, [pc, #260]	; (8001f64 <HAL_I2C_MspInit+0x124>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d12c      	bne.n	8001ebc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	4b40      	ldr	r3, [pc, #256]	; (8001f68 <HAL_I2C_MspInit+0x128>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a3f      	ldr	r2, [pc, #252]	; (8001f68 <HAL_I2C_MspInit+0x128>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b3d      	ldr	r3, [pc, #244]	; (8001f68 <HAL_I2C_MspInit+0x128>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e7e:	23c0      	movs	r3, #192	; 0xc0
 8001e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e82:	2312      	movs	r3, #18
 8001e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e8e:	2304      	movs	r3, #4
 8001e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e92:	f107 031c 	add.w	r3, r7, #28
 8001e96:	4619      	mov	r1, r3
 8001e98:	4834      	ldr	r0, [pc, #208]	; (8001f6c <HAL_I2C_MspInit+0x12c>)
 8001e9a:	f000 fe27 	bl	8002aec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	4b31      	ldr	r3, [pc, #196]	; (8001f68 <HAL_I2C_MspInit+0x128>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	4a30      	ldr	r2, [pc, #192]	; (8001f68 <HAL_I2C_MspInit+0x128>)
 8001ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001eac:	6413      	str	r3, [r2, #64]	; 0x40
 8001eae:	4b2e      	ldr	r3, [pc, #184]	; (8001f68 <HAL_I2C_MspInit+0x128>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001eba:	e04f      	b.n	8001f5c <HAL_I2C_MspInit+0x11c>
  else if(hi2c->Instance==I2C3)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a2b      	ldr	r2, [pc, #172]	; (8001f70 <HAL_I2C_MspInit+0x130>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d14a      	bne.n	8001f5c <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	4b27      	ldr	r3, [pc, #156]	; (8001f68 <HAL_I2C_MspInit+0x128>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a26      	ldr	r2, [pc, #152]	; (8001f68 <HAL_I2C_MspInit+0x128>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b24      	ldr	r3, [pc, #144]	; (8001f68 <HAL_I2C_MspInit+0x128>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <HAL_I2C_MspInit+0x128>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	4a1f      	ldr	r2, [pc, #124]	; (8001f68 <HAL_I2C_MspInit+0x128>)
 8001eec:	f043 0302 	orr.w	r3, r3, #2
 8001ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef2:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <HAL_I2C_MspInit+0x128>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f04:	2312      	movs	r3, #18
 8001f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f10:	2304      	movs	r3, #4
 8001f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f14:	f107 031c 	add.w	r3, r7, #28
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4816      	ldr	r0, [pc, #88]	; (8001f74 <HAL_I2C_MspInit+0x134>)
 8001f1c:	f000 fde6 	bl	8002aec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f20:	2310      	movs	r3, #16
 8001f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f24:	2312      	movs	r3, #18
 8001f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f30:	2304      	movs	r3, #4
 8001f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f34:	f107 031c 	add.w	r3, r7, #28
 8001f38:	4619      	mov	r1, r3
 8001f3a:	480c      	ldr	r0, [pc, #48]	; (8001f6c <HAL_I2C_MspInit+0x12c>)
 8001f3c:	f000 fdd6 	bl	8002aec <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f40:	2300      	movs	r3, #0
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <HAL_I2C_MspInit+0x128>)
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	4a07      	ldr	r2, [pc, #28]	; (8001f68 <HAL_I2C_MspInit+0x128>)
 8001f4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_I2C_MspInit+0x128>)
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
}
 8001f5c:	bf00      	nop
 8001f5e:	3730      	adds	r7, #48	; 0x30
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40005400 	.word	0x40005400
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40020400 	.word	0x40020400
 8001f70:	40005c00 	.word	0x40005c00
 8001f74:	40020000 	.word	0x40020000

08001f78 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	; 0x28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f98:	d133      	bne.n	8002002 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	4b1b      	ldr	r3, [pc, #108]	; (800200c <HAL_TIM_IC_MspInit+0x94>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	4a1a      	ldr	r2, [pc, #104]	; (800200c <HAL_TIM_IC_MspInit+0x94>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001faa:	4b18      	ldr	r3, [pc, #96]	; (800200c <HAL_TIM_IC_MspInit+0x94>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	4b14      	ldr	r3, [pc, #80]	; (800200c <HAL_TIM_IC_MspInit+0x94>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a13      	ldr	r2, [pc, #76]	; (800200c <HAL_TIM_IC_MspInit+0x94>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b11      	ldr	r3, [pc, #68]	; (800200c <HAL_TIM_IC_MspInit+0x94>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe6:	f107 0314 	add.w	r3, r7, #20
 8001fea:	4619      	mov	r1, r3
 8001fec:	4808      	ldr	r0, [pc, #32]	; (8002010 <HAL_TIM_IC_MspInit+0x98>)
 8001fee:	f000 fd7d 	bl	8002aec <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	201c      	movs	r0, #28
 8001ff8:	f000 fcbc 	bl	8002974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ffc:	201c      	movs	r0, #28
 8001ffe:	f000 fcd5 	bl	80029ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002002:	bf00      	nop
 8002004:	3728      	adds	r7, #40	; 0x28
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800
 8002010:	40020000 	.word	0x40020000

08002014 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a15      	ldr	r2, [pc, #84]	; (8002078 <HAL_TIM_PWM_MspInit+0x64>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d10e      	bne.n	8002044 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	4b14      	ldr	r3, [pc, #80]	; (800207c <HAL_TIM_PWM_MspInit+0x68>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	4a13      	ldr	r2, [pc, #76]	; (800207c <HAL_TIM_PWM_MspInit+0x68>)
 8002030:	f043 0302 	orr.w	r3, r3, #2
 8002034:	6413      	str	r3, [r2, #64]	; 0x40
 8002036:	4b11      	ldr	r3, [pc, #68]	; (800207c <HAL_TIM_PWM_MspInit+0x68>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002042:	e012      	b.n	800206a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a0d      	ldr	r2, [pc, #52]	; (8002080 <HAL_TIM_PWM_MspInit+0x6c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d10d      	bne.n	800206a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	4b0a      	ldr	r3, [pc, #40]	; (800207c <HAL_TIM_PWM_MspInit+0x68>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	4a09      	ldr	r2, [pc, #36]	; (800207c <HAL_TIM_PWM_MspInit+0x68>)
 8002058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800205c:	6413      	str	r3, [r2, #64]	; 0x40
 800205e:	4b07      	ldr	r3, [pc, #28]	; (800207c <HAL_TIM_PWM_MspInit+0x68>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
}
 800206a:	bf00      	nop
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40000400 	.word	0x40000400
 800207c:	40023800 	.word	0x40023800
 8002080:	40001800 	.word	0x40001800

08002084 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0b      	ldr	r2, [pc, #44]	; (80020c0 <HAL_TIM_Base_MspInit+0x3c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d10d      	bne.n	80020b2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_TIM_Base_MspInit+0x40>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a09      	ldr	r2, [pc, #36]	; (80020c4 <HAL_TIM_Base_MspInit+0x40>)
 80020a0:	f043 0310 	orr.w	r3, r3, #16
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
 80020a6:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <HAL_TIM_Base_MspInit+0x40>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40001000 	.word	0x40001000
 80020c4:	40023800 	.word	0x40023800

080020c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	; 0x28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a33      	ldr	r2, [pc, #204]	; (80021b4 <HAL_TIM_MspPostInit+0xec>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d13c      	bne.n	8002164 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	4b32      	ldr	r3, [pc, #200]	; (80021b8 <HAL_TIM_MspPostInit+0xf0>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a31      	ldr	r2, [pc, #196]	; (80021b8 <HAL_TIM_MspPostInit+0xf0>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b2f      	ldr	r3, [pc, #188]	; (80021b8 <HAL_TIM_MspPostInit+0xf0>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	4b2b      	ldr	r3, [pc, #172]	; (80021b8 <HAL_TIM_MspPostInit+0xf0>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a2a      	ldr	r2, [pc, #168]	; (80021b8 <HAL_TIM_MspPostInit+0xf0>)
 8002110:	f043 0302 	orr.w	r3, r3, #2
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b28      	ldr	r3, [pc, #160]	; (80021b8 <HAL_TIM_MspPostInit+0xf0>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002122:	23c0      	movs	r3, #192	; 0xc0
 8002124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	2300      	movs	r3, #0
 8002130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002132:	2302      	movs	r3, #2
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	4619      	mov	r1, r3
 800213c:	481f      	ldr	r0, [pc, #124]	; (80021bc <HAL_TIM_MspPostInit+0xf4>)
 800213e:	f000 fcd5 	bl	8002aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002142:	2303      	movs	r3, #3
 8002144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002152:	2302      	movs	r3, #2
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	4619      	mov	r1, r3
 800215c:	4818      	ldr	r0, [pc, #96]	; (80021c0 <HAL_TIM_MspPostInit+0xf8>)
 800215e:	f000 fcc5 	bl	8002aec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002162:	e023      	b.n	80021ac <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM12)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a16      	ldr	r2, [pc, #88]	; (80021c4 <HAL_TIM_MspPostInit+0xfc>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d11e      	bne.n	80021ac <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <HAL_TIM_MspPostInit+0xf0>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a10      	ldr	r2, [pc, #64]	; (80021b8 <HAL_TIM_MspPostInit+0xf0>)
 8002178:	f043 0302 	orr.w	r3, r3, #2
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <HAL_TIM_MspPostInit+0xf0>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800218a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800218e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002198:	2300      	movs	r3, #0
 800219a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800219c:	2309      	movs	r3, #9
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	4619      	mov	r1, r3
 80021a6:	4806      	ldr	r0, [pc, #24]	; (80021c0 <HAL_TIM_MspPostInit+0xf8>)
 80021a8:	f000 fca0 	bl	8002aec <HAL_GPIO_Init>
}
 80021ac:	bf00      	nop
 80021ae:	3728      	adds	r7, #40	; 0x28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40000400 	.word	0x40000400
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40020000 	.word	0x40020000
 80021c0:	40020400 	.word	0x40020400
 80021c4:	40001800 	.word	0x40001800

080021c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b090      	sub	sp, #64	; 0x40
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a80      	ldr	r2, [pc, #512]	; (80023e8 <HAL_UART_MspInit+0x220>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d153      	bne.n	8002292 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ee:	4b7f      	ldr	r3, [pc, #508]	; (80023ec <HAL_UART_MspInit+0x224>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	4a7e      	ldr	r2, [pc, #504]	; (80023ec <HAL_UART_MspInit+0x224>)
 80021f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021f8:	6413      	str	r3, [r2, #64]	; 0x40
 80021fa:	4b7c      	ldr	r3, [pc, #496]	; (80023ec <HAL_UART_MspInit+0x224>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
 8002204:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
 800220a:	4b78      	ldr	r3, [pc, #480]	; (80023ec <HAL_UART_MspInit+0x224>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a77      	ldr	r2, [pc, #476]	; (80023ec <HAL_UART_MspInit+0x224>)
 8002210:	f043 0304 	orr.w	r3, r3, #4
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b75      	ldr	r3, [pc, #468]	; (80023ec <HAL_UART_MspInit+0x224>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	623b      	str	r3, [r7, #32]
 8002226:	4b71      	ldr	r3, [pc, #452]	; (80023ec <HAL_UART_MspInit+0x224>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a70      	ldr	r2, [pc, #448]	; (80023ec <HAL_UART_MspInit+0x224>)
 800222c:	f043 0308 	orr.w	r3, r3, #8
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b6e      	ldr	r3, [pc, #440]	; (80023ec <HAL_UART_MspInit+0x224>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	623b      	str	r3, [r7, #32]
 800223c:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800223e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002242:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002244:	2302      	movs	r3, #2
 8002246:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224c:	2303      	movs	r3, #3
 800224e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002250:	2308      	movs	r3, #8
 8002252:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002254:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002258:	4619      	mov	r1, r3
 800225a:	4865      	ldr	r0, [pc, #404]	; (80023f0 <HAL_UART_MspInit+0x228>)
 800225c:	f000 fc46 	bl	8002aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002260:	2304      	movs	r3, #4
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226c:	2303      	movs	r3, #3
 800226e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002270:	2308      	movs	r3, #8
 8002272:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002274:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002278:	4619      	mov	r1, r3
 800227a:	485e      	ldr	r0, [pc, #376]	; (80023f4 <HAL_UART_MspInit+0x22c>)
 800227c:	f000 fc36 	bl	8002aec <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002280:	2200      	movs	r2, #0
 8002282:	2100      	movs	r1, #0
 8002284:	2035      	movs	r0, #53	; 0x35
 8002286:	f000 fb75 	bl	8002974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800228a:	2035      	movs	r0, #53	; 0x35
 800228c:	f000 fb8e 	bl	80029ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002290:	e0a6      	b.n	80023e0 <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a58      	ldr	r2, [pc, #352]	; (80023f8 <HAL_UART_MspInit+0x230>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d135      	bne.n	8002308 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
 80022a0:	4b52      	ldr	r3, [pc, #328]	; (80023ec <HAL_UART_MspInit+0x224>)
 80022a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a4:	4a51      	ldr	r2, [pc, #324]	; (80023ec <HAL_UART_MspInit+0x224>)
 80022a6:	f043 0310 	orr.w	r3, r3, #16
 80022aa:	6453      	str	r3, [r2, #68]	; 0x44
 80022ac:	4b4f      	ldr	r3, [pc, #316]	; (80023ec <HAL_UART_MspInit+0x224>)
 80022ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b0:	f003 0310 	and.w	r3, r3, #16
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b8:	2300      	movs	r3, #0
 80022ba:	61bb      	str	r3, [r7, #24]
 80022bc:	4b4b      	ldr	r3, [pc, #300]	; (80023ec <HAL_UART_MspInit+0x224>)
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	4a4a      	ldr	r2, [pc, #296]	; (80023ec <HAL_UART_MspInit+0x224>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	6313      	str	r3, [r2, #48]	; 0x30
 80022c8:	4b48      	ldr	r3, [pc, #288]	; (80023ec <HAL_UART_MspInit+0x224>)
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e2:	2303      	movs	r3, #3
 80022e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022e6:	2307      	movs	r3, #7
 80022e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022ee:	4619      	mov	r1, r3
 80022f0:	4842      	ldr	r0, [pc, #264]	; (80023fc <HAL_UART_MspInit+0x234>)
 80022f2:	f000 fbfb 	bl	8002aec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 80022f6:	2200      	movs	r2, #0
 80022f8:	2106      	movs	r1, #6
 80022fa:	2025      	movs	r0, #37	; 0x25
 80022fc:	f000 fb3a 	bl	8002974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002300:	2025      	movs	r0, #37	; 0x25
 8002302:	f000 fb53 	bl	80029ac <HAL_NVIC_EnableIRQ>
}
 8002306:	e06b      	b.n	80023e0 <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART3)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a3c      	ldr	r2, [pc, #240]	; (8002400 <HAL_UART_MspInit+0x238>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d135      	bne.n	800237e <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	4b35      	ldr	r3, [pc, #212]	; (80023ec <HAL_UART_MspInit+0x224>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	4a34      	ldr	r2, [pc, #208]	; (80023ec <HAL_UART_MspInit+0x224>)
 800231c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002320:	6413      	str	r3, [r2, #64]	; 0x40
 8002322:	4b32      	ldr	r3, [pc, #200]	; (80023ec <HAL_UART_MspInit+0x224>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	4b2e      	ldr	r3, [pc, #184]	; (80023ec <HAL_UART_MspInit+0x224>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a2d      	ldr	r2, [pc, #180]	; (80023ec <HAL_UART_MspInit+0x224>)
 8002338:	f043 0304 	orr.w	r3, r3, #4
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b2b      	ldr	r3, [pc, #172]	; (80023ec <HAL_UART_MspInit+0x224>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 800234a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002350:	2302      	movs	r3, #2
 8002352:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002358:	2303      	movs	r3, #3
 800235a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800235c:	2307      	movs	r3, #7
 800235e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002360:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002364:	4619      	mov	r1, r3
 8002366:	4822      	ldr	r0, [pc, #136]	; (80023f0 <HAL_UART_MspInit+0x228>)
 8002368:	f000 fbc0 	bl	8002aec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800236c:	2200      	movs	r2, #0
 800236e:	2101      	movs	r1, #1
 8002370:	2027      	movs	r0, #39	; 0x27
 8002372:	f000 faff 	bl	8002974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002376:	2027      	movs	r0, #39	; 0x27
 8002378:	f000 fb18 	bl	80029ac <HAL_NVIC_EnableIRQ>
}
 800237c:	e030      	b.n	80023e0 <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART6)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a20      	ldr	r2, [pc, #128]	; (8002404 <HAL_UART_MspInit+0x23c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d12b      	bne.n	80023e0 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	4b17      	ldr	r3, [pc, #92]	; (80023ec <HAL_UART_MspInit+0x224>)
 800238e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002390:	4a16      	ldr	r2, [pc, #88]	; (80023ec <HAL_UART_MspInit+0x224>)
 8002392:	f043 0320 	orr.w	r3, r3, #32
 8002396:	6453      	str	r3, [r2, #68]	; 0x44
 8002398:	4b14      	ldr	r3, [pc, #80]	; (80023ec <HAL_UART_MspInit+0x224>)
 800239a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239c:	f003 0320 	and.w	r3, r3, #32
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a4:	2300      	movs	r3, #0
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	4b10      	ldr	r3, [pc, #64]	; (80023ec <HAL_UART_MspInit+0x224>)
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	4a0f      	ldr	r2, [pc, #60]	; (80023ec <HAL_UART_MspInit+0x224>)
 80023ae:	f043 0304 	orr.w	r3, r3, #4
 80023b2:	6313      	str	r3, [r2, #48]	; 0x30
 80023b4:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <HAL_UART_MspInit+0x224>)
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023c0:	23c0      	movs	r3, #192	; 0xc0
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c4:	2302      	movs	r3, #2
 80023c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023cc:	2303      	movs	r3, #3
 80023ce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80023d0:	2308      	movs	r3, #8
 80023d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023d8:	4619      	mov	r1, r3
 80023da:	4805      	ldr	r0, [pc, #20]	; (80023f0 <HAL_UART_MspInit+0x228>)
 80023dc:	f000 fb86 	bl	8002aec <HAL_GPIO_Init>
}
 80023e0:	bf00      	nop
 80023e2:	3740      	adds	r7, #64	; 0x40
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40005000 	.word	0x40005000
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40020800 	.word	0x40020800
 80023f4:	40020c00 	.word	0x40020c00
 80023f8:	40011000 	.word	0x40011000
 80023fc:	40020000 	.word	0x40020000
 8002400:	40004800 	.word	0x40004800
 8002404:	40011400 	.word	0x40011400

08002408 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08e      	sub	sp, #56	; 0x38
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002414:	2300      	movs	r3, #0
 8002416:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	4b33      	ldr	r3, [pc, #204]	; (80024ec <HAL_InitTick+0xe4>)
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	4a32      	ldr	r2, [pc, #200]	; (80024ec <HAL_InitTick+0xe4>)
 8002422:	f043 0320 	orr.w	r3, r3, #32
 8002426:	6413      	str	r3, [r2, #64]	; 0x40
 8002428:	4b30      	ldr	r3, [pc, #192]	; (80024ec <HAL_InitTick+0xe4>)
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	f003 0320 	and.w	r3, r3, #32
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002434:	f107 0210 	add.w	r2, r7, #16
 8002438:	f107 0314 	add.w	r3, r7, #20
 800243c:	4611      	mov	r1, r2
 800243e:	4618      	mov	r0, r3
 8002440:	f001 fa84 	bl	800394c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244a:	2b00      	cmp	r3, #0
 800244c:	d103      	bne.n	8002456 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800244e:	f001 fa55 	bl	80038fc <HAL_RCC_GetPCLK1Freq>
 8002452:	6378      	str	r0, [r7, #52]	; 0x34
 8002454:	e004      	b.n	8002460 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002456:	f001 fa51 	bl	80038fc <HAL_RCC_GetPCLK1Freq>
 800245a:	4603      	mov	r3, r0
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002462:	4a23      	ldr	r2, [pc, #140]	; (80024f0 <HAL_InitTick+0xe8>)
 8002464:	fba2 2303 	umull	r2, r3, r2, r3
 8002468:	0c9b      	lsrs	r3, r3, #18
 800246a:	3b01      	subs	r3, #1
 800246c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800246e:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <HAL_InitTick+0xec>)
 8002470:	4a21      	ldr	r2, [pc, #132]	; (80024f8 <HAL_InitTick+0xf0>)
 8002472:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002474:	4b1f      	ldr	r3, [pc, #124]	; (80024f4 <HAL_InitTick+0xec>)
 8002476:	f240 32e7 	movw	r2, #999	; 0x3e7
 800247a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800247c:	4a1d      	ldr	r2, [pc, #116]	; (80024f4 <HAL_InitTick+0xec>)
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002482:	4b1c      	ldr	r3, [pc, #112]	; (80024f4 <HAL_InitTick+0xec>)
 8002484:	2200      	movs	r2, #0
 8002486:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002488:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <HAL_InitTick+0xec>)
 800248a:	2200      	movs	r2, #0
 800248c:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800248e:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <HAL_InitTick+0xec>)
 8002490:	2200      	movs	r2, #0
 8002492:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8002494:	4817      	ldr	r0, [pc, #92]	; (80024f4 <HAL_InitTick+0xec>)
 8002496:	f001 fed3 	bl	8004240 <HAL_TIM_Base_Init>
 800249a:	4603      	mov	r3, r0
 800249c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80024a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d11b      	bne.n	80024e0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80024a8:	4812      	ldr	r0, [pc, #72]	; (80024f4 <HAL_InitTick+0xec>)
 80024aa:	f001 ff19 	bl	80042e0 <HAL_TIM_Base_Start_IT>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80024b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d111      	bne.n	80024e0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80024bc:	2037      	movs	r0, #55	; 0x37
 80024be:	f000 fa75 	bl	80029ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b0f      	cmp	r3, #15
 80024c6:	d808      	bhi.n	80024da <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80024c8:	2200      	movs	r2, #0
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	2037      	movs	r0, #55	; 0x37
 80024ce:	f000 fa51 	bl	8002974 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024d2:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <HAL_InitTick+0xf4>)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	e002      	b.n	80024e0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80024e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3738      	adds	r7, #56	; 0x38
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40023800 	.word	0x40023800
 80024f0:	431bde83 	.word	0x431bde83
 80024f4:	200006e4 	.word	0x200006e4
 80024f8:	40001400 	.word	0x40001400
 80024fc:	20000004 	.word	0x20000004

08002500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002504:	e7fe      	b.n	8002504 <NMI_Handler+0x4>

08002506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002506:	b480      	push	{r7}
 8002508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800250a:	e7fe      	b.n	800250a <HardFault_Handler+0x4>

0800250c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002510:	e7fe      	b.n	8002510 <MemManage_Handler+0x4>

08002512 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002516:	e7fe      	b.n	8002516 <BusFault_Handler+0x4>

08002518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800251c:	e7fe      	b.n	800251c <UsageFault_Handler+0x4>
	...

08002520 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_UPDATE) != RESET) {
 8002524:	4b14      	ldr	r3, [pc, #80]	; (8002578 <TIM2_IRQHandler+0x58>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b01      	cmp	r3, #1
 8002530:	d117      	bne.n	8002562 <TIM2_IRQHandler+0x42>
		// Timer overflow interrupt
		Global_Speed = round(Calculate_Car_Speed());
 8002532:	f7ff f86f 	bl	8001614 <Calculate_Car_Speed>
 8002536:	ee10 3a10 	vmov	r3, s0
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe f874 	bl	8000628 <__aeabi_f2d>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	ec43 2b10 	vmov	d0, r2, r3
 8002548:	f00a fd58 	bl	800cffc <round>
 800254c:	ec53 2b10 	vmov	r2, r3, d0
 8002550:	4610      	mov	r0, r2
 8002552:	4619      	mov	r1, r3
 8002554:	f7fe fb98 	bl	8000c88 <__aeabi_d2uiz>
 8002558:	4603      	mov	r3, r0
 800255a:	b29a      	uxth	r2, r3
 800255c:	4b07      	ldr	r3, [pc, #28]	; (800257c <TIM2_IRQHandler+0x5c>)
 800255e:	801a      	strh	r2, [r3, #0]
 8002560:	e004      	b.n	800256c <TIM2_IRQHandler+0x4c>
	}else {
		edges_counter++;
 8002562:	4b07      	ldr	r3, [pc, #28]	; (8002580 <TIM2_IRQHandler+0x60>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	3301      	adds	r3, #1
 8002568:	4a05      	ldr	r2, [pc, #20]	; (8002580 <TIM2_IRQHandler+0x60>)
 800256a:	6013      	str	r3, [r2, #0]
	}
  
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800256c:	4802      	ldr	r0, [pc, #8]	; (8002578 <TIM2_IRQHandler+0x58>)
 800256e:	f002 f9b7 	bl	80048e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	200004b0 	.word	0x200004b0
 800257c:	200006e2 	.word	0x200006e2
 8002580:	200001f8 	.word	0x200001f8

08002584 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8002588:	4803      	ldr	r0, [pc, #12]	; (8002598 <USART1_IRQHandler+0x14>)
 800258a:	f7fe ffe5 	bl	8001558 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800258e:	4802      	ldr	r0, [pc, #8]	; (8002598 <USART1_IRQHandler+0x14>)
 8002590:	f003 f8d8 	bl	8005744 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20000614 	.word	0x20000614

0800259c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80025a0:	4802      	ldr	r0, [pc, #8]	; (80025ac <USART3_IRQHandler+0x10>)
 80025a2:	f003 f8cf 	bl	8005744 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20000658 	.word	0x20000658

080025b0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80025b4:	4802      	ldr	r0, [pc, #8]	; (80025c0 <UART5_IRQHandler+0x10>)
 80025b6:	f003 f8c5 	bl	8005744 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	200005d0 	.word	0x200005d0

080025c4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80025c8:	4802      	ldr	r0, [pc, #8]	; (80025d4 <TIM7_IRQHandler+0x10>)
 80025ca:	f002 f989 	bl	80048e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	200006e4 	.word	0x200006e4

080025d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return 1;
 80025dc:	2301      	movs	r3, #1
}
 80025de:	4618      	mov	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <_kill>:

int _kill(int pid, int sig)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025f2:	f008 fe05 	bl	800b200 <__errno>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2216      	movs	r2, #22
 80025fa:	601a      	str	r2, [r3, #0]
  return -1;
 80025fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002600:	4618      	mov	r0, r3
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <_exit>:

void _exit (int status)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002610:	f04f 31ff 	mov.w	r1, #4294967295
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ffe7 	bl	80025e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800261a:	e7fe      	b.n	800261a <_exit+0x12>

0800261c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	e00a      	b.n	8002644 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800262e:	f3af 8000 	nop.w
 8002632:	4601      	mov	r1, r0
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	60ba      	str	r2, [r7, #8]
 800263a:	b2ca      	uxtb	r2, r1
 800263c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	3301      	adds	r3, #1
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	429a      	cmp	r2, r3
 800264a:	dbf0      	blt.n	800262e <_read+0x12>
  }

  return len;
 800264c:	687b      	ldr	r3, [r7, #4]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800265e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800267e:	605a      	str	r2, [r3, #4]
  return 0;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <_isatty>:

int _isatty(int file)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002696:	2301      	movs	r3, #1
}
 8002698:	4618      	mov	r0, r3
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
	...

080026c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <SystemInit+0x20>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ca:	4a05      	ldr	r2, [pc, #20]	; (80026e0 <SystemInit+0x20>)
 80026cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800271c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026e8:	480d      	ldr	r0, [pc, #52]	; (8002720 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026ea:	490e      	ldr	r1, [pc, #56]	; (8002724 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026ec:	4a0e      	ldr	r2, [pc, #56]	; (8002728 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026f0:	e002      	b.n	80026f8 <LoopCopyDataInit>

080026f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026f6:	3304      	adds	r3, #4

080026f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026fc:	d3f9      	bcc.n	80026f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026fe:	4a0b      	ldr	r2, [pc, #44]	; (800272c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002700:	4c0b      	ldr	r4, [pc, #44]	; (8002730 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002704:	e001      	b.n	800270a <LoopFillZerobss>

08002706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002708:	3204      	adds	r2, #4

0800270a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800270a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800270c:	d3fb      	bcc.n	8002706 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800270e:	f7ff ffd7 	bl	80026c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002712:	f008 fd7b 	bl	800b20c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002716:	f7fe ffa7 	bl	8001668 <main>
  bx  lr    
 800271a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800271c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002724:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002728:	0800d5d4 	.word	0x0800d5d4
  ldr r2, =_sbss
 800272c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002730:	20014c9c 	.word	0x20014c9c

08002734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002734:	e7fe      	b.n	8002734 <ADC_IRQHandler>
	...

08002738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800273c:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <HAL_Init+0x40>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a0d      	ldr	r2, [pc, #52]	; (8002778 <HAL_Init+0x40>)
 8002742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002746:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_Init+0x40>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <HAL_Init+0x40>)
 800274e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002752:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <HAL_Init+0x40>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a07      	ldr	r2, [pc, #28]	; (8002778 <HAL_Init+0x40>)
 800275a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002760:	2003      	movs	r0, #3
 8002762:	f000 f8fc 	bl	800295e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002766:	200f      	movs	r0, #15
 8002768:	f7ff fe4e 	bl	8002408 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800276c:	f7ff fb40 	bl	8001df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40023c00 	.word	0x40023c00

0800277c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <HAL_IncTick+0x20>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_IncTick+0x24>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4413      	add	r3, r2
 800278c:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <HAL_IncTick+0x24>)
 800278e:	6013      	str	r3, [r2, #0]
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20000008 	.word	0x20000008
 80027a0:	2000072c 	.word	0x2000072c

080027a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return uwTick;
 80027a8:	4b03      	ldr	r3, [pc, #12]	; (80027b8 <HAL_GetTick+0x14>)
 80027aa:	681b      	ldr	r3, [r3, #0]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	2000072c 	.word	0x2000072c

080027bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027c4:	f7ff ffee 	bl	80027a4 <HAL_GetTick>
 80027c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d4:	d005      	beq.n	80027e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027d6:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <HAL_Delay+0x44>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4413      	add	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027e2:	bf00      	nop
 80027e4:	f7ff ffde 	bl	80027a4 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d8f7      	bhi.n	80027e4 <HAL_Delay+0x28>
  {
  }
}
 80027f4:	bf00      	nop
 80027f6:	bf00      	nop
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000008 	.word	0x20000008

08002804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <__NVIC_SetPriorityGrouping+0x44>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002820:	4013      	ands	r3, r2
 8002822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800282c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <__NVIC_SetPriorityGrouping+0x44>)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	60d3      	str	r3, [r2, #12]
}
 800283c:	bf00      	nop
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002850:	4b04      	ldr	r3, [pc, #16]	; (8002864 <__NVIC_GetPriorityGrouping+0x18>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	0a1b      	lsrs	r3, r3, #8
 8002856:	f003 0307 	and.w	r3, r3, #7
}
 800285a:	4618      	mov	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	2b00      	cmp	r3, #0
 8002878:	db0b      	blt.n	8002892 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	f003 021f 	and.w	r2, r3, #31
 8002880:	4907      	ldr	r1, [pc, #28]	; (80028a0 <__NVIC_EnableIRQ+0x38>)
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	2001      	movs	r0, #1
 800288a:	fa00 f202 	lsl.w	r2, r0, r2
 800288e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	e000e100 	.word	0xe000e100

080028a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	6039      	str	r1, [r7, #0]
 80028ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	db0a      	blt.n	80028ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	490c      	ldr	r1, [pc, #48]	; (80028f0 <__NVIC_SetPriority+0x4c>)
 80028be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c2:	0112      	lsls	r2, r2, #4
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	440b      	add	r3, r1
 80028c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028cc:	e00a      	b.n	80028e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	4908      	ldr	r1, [pc, #32]	; (80028f4 <__NVIC_SetPriority+0x50>)
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	3b04      	subs	r3, #4
 80028dc:	0112      	lsls	r2, r2, #4
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	440b      	add	r3, r1
 80028e2:	761a      	strb	r2, [r3, #24]
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000e100 	.word	0xe000e100
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b089      	sub	sp, #36	; 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f1c3 0307 	rsb	r3, r3, #7
 8002912:	2b04      	cmp	r3, #4
 8002914:	bf28      	it	cs
 8002916:	2304      	movcs	r3, #4
 8002918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3304      	adds	r3, #4
 800291e:	2b06      	cmp	r3, #6
 8002920:	d902      	bls.n	8002928 <NVIC_EncodePriority+0x30>
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3b03      	subs	r3, #3
 8002926:	e000      	b.n	800292a <NVIC_EncodePriority+0x32>
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800292c:	f04f 32ff 	mov.w	r2, #4294967295
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43da      	mvns	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	401a      	ands	r2, r3
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002940:	f04f 31ff 	mov.w	r1, #4294967295
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	fa01 f303 	lsl.w	r3, r1, r3
 800294a:	43d9      	mvns	r1, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002950:	4313      	orrs	r3, r2
         );
}
 8002952:	4618      	mov	r0, r3
 8002954:	3724      	adds	r7, #36	; 0x24
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7ff ff4c 	bl	8002804 <__NVIC_SetPriorityGrouping>
}
 800296c:	bf00      	nop
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002986:	f7ff ff61 	bl	800284c <__NVIC_GetPriorityGrouping>
 800298a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	6978      	ldr	r0, [r7, #20]
 8002992:	f7ff ffb1 	bl	80028f8 <NVIC_EncodePriority>
 8002996:	4602      	mov	r2, r0
 8002998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800299c:	4611      	mov	r1, r2
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff ff80 	bl	80028a4 <__NVIC_SetPriority>
}
 80029a4:	bf00      	nop
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff ff54 	bl	8002868 <__NVIC_EnableIRQ>
}
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029d6:	f7ff fee5 	bl	80027a4 <HAL_GetTick>
 80029da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d008      	beq.n	80029fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2280      	movs	r2, #128	; 0x80
 80029ec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e052      	b.n	8002aa0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0216 	bic.w	r2, r2, #22
 8002a08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695a      	ldr	r2, [r3, #20]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d103      	bne.n	8002a2a <HAL_DMA_Abort+0x62>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d007      	beq.n	8002a3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0208 	bic.w	r2, r2, #8
 8002a38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0201 	bic.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a4a:	e013      	b.n	8002a74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a4c:	f7ff feaa 	bl	80027a4 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b05      	cmp	r3, #5
 8002a58:	d90c      	bls.n	8002a74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2203      	movs	r2, #3
 8002a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e015      	b.n	8002aa0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1e4      	bne.n	8002a4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a86:	223f      	movs	r2, #63	; 0x3f
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d004      	beq.n	8002ac6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2280      	movs	r2, #128	; 0x80
 8002ac0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00c      	b.n	8002ae0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2205      	movs	r2, #5
 8002aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0201 	bic.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b089      	sub	sp, #36	; 0x24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
 8002b06:	e165      	b.n	8002dd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b08:	2201      	movs	r2, #1
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	f040 8154 	bne.w	8002dce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d005      	beq.n	8002b3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d130      	bne.n	8002ba0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	2203      	movs	r2, #3
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4013      	ands	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b74:	2201      	movs	r2, #1
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	091b      	lsrs	r3, r3, #4
 8002b8a:	f003 0201 	and.w	r2, r3, #1
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d017      	beq.n	8002bdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d123      	bne.n	8002c30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	08da      	lsrs	r2, r3, #3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3208      	adds	r2, #8
 8002bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	220f      	movs	r2, #15
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	08da      	lsrs	r2, r3, #3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3208      	adds	r2, #8
 8002c2a:	69b9      	ldr	r1, [r7, #24]
 8002c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 0203 	and.w	r2, r3, #3
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 80ae 	beq.w	8002dce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	4b5d      	ldr	r3, [pc, #372]	; (8002dec <HAL_GPIO_Init+0x300>)
 8002c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7a:	4a5c      	ldr	r2, [pc, #368]	; (8002dec <HAL_GPIO_Init+0x300>)
 8002c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c80:	6453      	str	r3, [r2, #68]	; 0x44
 8002c82:	4b5a      	ldr	r3, [pc, #360]	; (8002dec <HAL_GPIO_Init+0x300>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c8e:	4a58      	ldr	r2, [pc, #352]	; (8002df0 <HAL_GPIO_Init+0x304>)
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	089b      	lsrs	r3, r3, #2
 8002c94:	3302      	adds	r3, #2
 8002c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	220f      	movs	r2, #15
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a4f      	ldr	r2, [pc, #316]	; (8002df4 <HAL_GPIO_Init+0x308>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d025      	beq.n	8002d06 <HAL_GPIO_Init+0x21a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a4e      	ldr	r2, [pc, #312]	; (8002df8 <HAL_GPIO_Init+0x30c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d01f      	beq.n	8002d02 <HAL_GPIO_Init+0x216>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a4d      	ldr	r2, [pc, #308]	; (8002dfc <HAL_GPIO_Init+0x310>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d019      	beq.n	8002cfe <HAL_GPIO_Init+0x212>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a4c      	ldr	r2, [pc, #304]	; (8002e00 <HAL_GPIO_Init+0x314>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d013      	beq.n	8002cfa <HAL_GPIO_Init+0x20e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a4b      	ldr	r2, [pc, #300]	; (8002e04 <HAL_GPIO_Init+0x318>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00d      	beq.n	8002cf6 <HAL_GPIO_Init+0x20a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a4a      	ldr	r2, [pc, #296]	; (8002e08 <HAL_GPIO_Init+0x31c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d007      	beq.n	8002cf2 <HAL_GPIO_Init+0x206>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a49      	ldr	r2, [pc, #292]	; (8002e0c <HAL_GPIO_Init+0x320>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d101      	bne.n	8002cee <HAL_GPIO_Init+0x202>
 8002cea:	2306      	movs	r3, #6
 8002cec:	e00c      	b.n	8002d08 <HAL_GPIO_Init+0x21c>
 8002cee:	2307      	movs	r3, #7
 8002cf0:	e00a      	b.n	8002d08 <HAL_GPIO_Init+0x21c>
 8002cf2:	2305      	movs	r3, #5
 8002cf4:	e008      	b.n	8002d08 <HAL_GPIO_Init+0x21c>
 8002cf6:	2304      	movs	r3, #4
 8002cf8:	e006      	b.n	8002d08 <HAL_GPIO_Init+0x21c>
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e004      	b.n	8002d08 <HAL_GPIO_Init+0x21c>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e002      	b.n	8002d08 <HAL_GPIO_Init+0x21c>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <HAL_GPIO_Init+0x21c>
 8002d06:	2300      	movs	r3, #0
 8002d08:	69fa      	ldr	r2, [r7, #28]
 8002d0a:	f002 0203 	and.w	r2, r2, #3
 8002d0e:	0092      	lsls	r2, r2, #2
 8002d10:	4093      	lsls	r3, r2
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d18:	4935      	ldr	r1, [pc, #212]	; (8002df0 <HAL_GPIO_Init+0x304>)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	089b      	lsrs	r3, r3, #2
 8002d1e:	3302      	adds	r3, #2
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d26:	4b3a      	ldr	r3, [pc, #232]	; (8002e10 <HAL_GPIO_Init+0x324>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4013      	ands	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d4a:	4a31      	ldr	r2, [pc, #196]	; (8002e10 <HAL_GPIO_Init+0x324>)
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d50:	4b2f      	ldr	r3, [pc, #188]	; (8002e10 <HAL_GPIO_Init+0x324>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d74:	4a26      	ldr	r2, [pc, #152]	; (8002e10 <HAL_GPIO_Init+0x324>)
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d7a:	4b25      	ldr	r3, [pc, #148]	; (8002e10 <HAL_GPIO_Init+0x324>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	43db      	mvns	r3, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4013      	ands	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d9e:	4a1c      	ldr	r2, [pc, #112]	; (8002e10 <HAL_GPIO_Init+0x324>)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002da4:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <HAL_GPIO_Init+0x324>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dc8:	4a11      	ldr	r2, [pc, #68]	; (8002e10 <HAL_GPIO_Init+0x324>)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	61fb      	str	r3, [r7, #28]
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	2b0f      	cmp	r3, #15
 8002dd8:	f67f ae96 	bls.w	8002b08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ddc:	bf00      	nop
 8002dde:	bf00      	nop
 8002de0:	3724      	adds	r7, #36	; 0x24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40013800 	.word	0x40013800
 8002df4:	40020000 	.word	0x40020000
 8002df8:	40020400 	.word	0x40020400
 8002dfc:	40020800 	.word	0x40020800
 8002e00:	40020c00 	.word	0x40020c00
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40021400 	.word	0x40021400
 8002e0c:	40021800 	.word	0x40021800
 8002e10:	40013c00 	.word	0x40013c00

08002e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	807b      	strh	r3, [r7, #2]
 8002e20:	4613      	mov	r3, r2
 8002e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e24:	787b      	ldrb	r3, [r7, #1]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e2a:	887a      	ldrh	r2, [r7, #2]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e30:	e003      	b.n	8002e3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e32:	887b      	ldrh	r3, [r7, #2]
 8002e34:	041a      	lsls	r2, r3, #16
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	619a      	str	r2, [r3, #24]
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
	...

08002e48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e12b      	b.n	80030b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7fe ffe6 	bl	8001e40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2224      	movs	r2, #36	; 0x24
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0201 	bic.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002eac:	f000 fd26 	bl	80038fc <HAL_RCC_GetPCLK1Freq>
 8002eb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4a81      	ldr	r2, [pc, #516]	; (80030bc <HAL_I2C_Init+0x274>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d807      	bhi.n	8002ecc <HAL_I2C_Init+0x84>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4a80      	ldr	r2, [pc, #512]	; (80030c0 <HAL_I2C_Init+0x278>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	bf94      	ite	ls
 8002ec4:	2301      	movls	r3, #1
 8002ec6:	2300      	movhi	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	e006      	b.n	8002eda <HAL_I2C_Init+0x92>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4a7d      	ldr	r2, [pc, #500]	; (80030c4 <HAL_I2C_Init+0x27c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	bf94      	ite	ls
 8002ed4:	2301      	movls	r3, #1
 8002ed6:	2300      	movhi	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e0e7      	b.n	80030b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4a78      	ldr	r2, [pc, #480]	; (80030c8 <HAL_I2C_Init+0x280>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	0c9b      	lsrs	r3, r3, #18
 8002eec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4a6a      	ldr	r2, [pc, #424]	; (80030bc <HAL_I2C_Init+0x274>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d802      	bhi.n	8002f1c <HAL_I2C_Init+0xd4>
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	e009      	b.n	8002f30 <HAL_I2C_Init+0xe8>
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f22:	fb02 f303 	mul.w	r3, r2, r3
 8002f26:	4a69      	ldr	r2, [pc, #420]	; (80030cc <HAL_I2C_Init+0x284>)
 8002f28:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2c:	099b      	lsrs	r3, r3, #6
 8002f2e:	3301      	adds	r3, #1
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	430b      	orrs	r3, r1
 8002f36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	495c      	ldr	r1, [pc, #368]	; (80030bc <HAL_I2C_Init+0x274>)
 8002f4c:	428b      	cmp	r3, r1
 8002f4e:	d819      	bhi.n	8002f84 <HAL_I2C_Init+0x13c>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	1e59      	subs	r1, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f5e:	1c59      	adds	r1, r3, #1
 8002f60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f64:	400b      	ands	r3, r1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <HAL_I2C_Init+0x138>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1e59      	subs	r1, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f78:	3301      	adds	r3, #1
 8002f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f7e:	e051      	b.n	8003024 <HAL_I2C_Init+0x1dc>
 8002f80:	2304      	movs	r3, #4
 8002f82:	e04f      	b.n	8003024 <HAL_I2C_Init+0x1dc>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d111      	bne.n	8002fb0 <HAL_I2C_Init+0x168>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1e58      	subs	r0, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6859      	ldr	r1, [r3, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	440b      	add	r3, r1
 8002f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	e012      	b.n	8002fd6 <HAL_I2C_Init+0x18e>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1e58      	subs	r0, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6859      	ldr	r1, [r3, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	0099      	lsls	r1, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	bf0c      	ite	eq
 8002fd0:	2301      	moveq	r3, #1
 8002fd2:	2300      	movne	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_I2C_Init+0x196>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e022      	b.n	8003024 <HAL_I2C_Init+0x1dc>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10e      	bne.n	8003004 <HAL_I2C_Init+0x1bc>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	1e58      	subs	r0, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6859      	ldr	r1, [r3, #4]
 8002fee:	460b      	mov	r3, r1
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	440b      	add	r3, r1
 8002ff4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003002:	e00f      	b.n	8003024 <HAL_I2C_Init+0x1dc>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1e58      	subs	r0, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6859      	ldr	r1, [r3, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	0099      	lsls	r1, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	fbb0 f3f3 	udiv	r3, r0, r3
 800301a:	3301      	adds	r3, #1
 800301c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003020:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	6809      	ldr	r1, [r1, #0]
 8003028:	4313      	orrs	r3, r2
 800302a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69da      	ldr	r2, [r3, #28]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003052:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6911      	ldr	r1, [r2, #16]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68d2      	ldr	r2, [r2, #12]
 800305e:	4311      	orrs	r1, r2
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	430b      	orrs	r3, r1
 8003066:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695a      	ldr	r2, [r3, #20]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	000186a0 	.word	0x000186a0
 80030c0:	001e847f 	.word	0x001e847f
 80030c4:	003d08ff 	.word	0x003d08ff
 80030c8:	431bde83 	.word	0x431bde83
 80030cc:	10624dd3 	.word	0x10624dd3

080030d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af02      	add	r7, sp, #8
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	607a      	str	r2, [r7, #4]
 80030da:	461a      	mov	r2, r3
 80030dc:	460b      	mov	r3, r1
 80030de:	817b      	strh	r3, [r7, #10]
 80030e0:	4613      	mov	r3, r2
 80030e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030e4:	f7ff fb5e 	bl	80027a4 <HAL_GetTick>
 80030e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	f040 80e0 	bne.w	80032b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	2319      	movs	r3, #25
 80030fe:	2201      	movs	r2, #1
 8003100:	4970      	ldr	r1, [pc, #448]	; (80032c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 f964 	bl	80033d0 <I2C_WaitOnFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800310e:	2302      	movs	r3, #2
 8003110:	e0d3      	b.n	80032ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_I2C_Master_Transmit+0x50>
 800311c:	2302      	movs	r3, #2
 800311e:	e0cc      	b.n	80032ba <HAL_I2C_Master_Transmit+0x1ea>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b01      	cmp	r3, #1
 8003134:	d007      	beq.n	8003146 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 0201 	orr.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003154:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2221      	movs	r2, #33	; 0x21
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2210      	movs	r2, #16
 8003162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	893a      	ldrh	r2, [r7, #8]
 8003176:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4a50      	ldr	r2, [pc, #320]	; (80032c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003186:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003188:	8979      	ldrh	r1, [r7, #10]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	6a3a      	ldr	r2, [r7, #32]
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 f89c 	bl	80032cc <I2C_MasterRequestWrite>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e08d      	b.n	80032ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800319e:	2300      	movs	r3, #0
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80031b4:	e066      	b.n	8003284 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	6a39      	ldr	r1, [r7, #32]
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f9de 	bl	800357c <I2C_WaitOnTXEFlagUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00d      	beq.n	80031e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d107      	bne.n	80031de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e06b      	b.n	80032ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	781a      	ldrb	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b04      	cmp	r3, #4
 800321e:	d11b      	bne.n	8003258 <HAL_I2C_Master_Transmit+0x188>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003224:	2b00      	cmp	r3, #0
 8003226:	d017      	beq.n	8003258 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	781a      	ldrb	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003250:	3b01      	subs	r3, #1
 8003252:	b29a      	uxth	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	6a39      	ldr	r1, [r7, #32]
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f9ce 	bl	80035fe <I2C_WaitOnBTFFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00d      	beq.n	8003284 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	2b04      	cmp	r3, #4
 800326e:	d107      	bne.n	8003280 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800327e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e01a      	b.n	80032ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003288:	2b00      	cmp	r3, #0
 800328a:	d194      	bne.n	80031b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800329a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	e000      	b.n	80032ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80032b8:	2302      	movs	r3, #2
  }
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	00100002 	.word	0x00100002
 80032c8:	ffff0000 	.word	0xffff0000

080032cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af02      	add	r7, sp, #8
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	460b      	mov	r3, r1
 80032da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d006      	beq.n	80032f6 <I2C_MasterRequestWrite+0x2a>
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d003      	beq.n	80032f6 <I2C_MasterRequestWrite+0x2a>
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032f4:	d108      	bne.n	8003308 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	e00b      	b.n	8003320 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	2b12      	cmp	r3, #18
 800330e:	d107      	bne.n	8003320 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800331e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 f84f 	bl	80033d0 <I2C_WaitOnFlagUntilTimeout>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00d      	beq.n	8003354 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003346:	d103      	bne.n	8003350 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800334e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e035      	b.n	80033c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800335c:	d108      	bne.n	8003370 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800335e:	897b      	ldrh	r3, [r7, #10]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	461a      	mov	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800336c:	611a      	str	r2, [r3, #16]
 800336e:	e01b      	b.n	80033a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003370:	897b      	ldrh	r3, [r7, #10]
 8003372:	11db      	asrs	r3, r3, #7
 8003374:	b2db      	uxtb	r3, r3
 8003376:	f003 0306 	and.w	r3, r3, #6
 800337a:	b2db      	uxtb	r3, r3
 800337c:	f063 030f 	orn	r3, r3, #15
 8003380:	b2da      	uxtb	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	490e      	ldr	r1, [pc, #56]	; (80033c8 <I2C_MasterRequestWrite+0xfc>)
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f875 	bl	800347e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e010      	b.n	80033c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800339e:	897b      	ldrh	r3, [r7, #10]
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	4907      	ldr	r1, [pc, #28]	; (80033cc <I2C_MasterRequestWrite+0x100>)
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 f865 	bl	800347e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	00010008 	.word	0x00010008
 80033cc:	00010002 	.word	0x00010002

080033d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	4613      	mov	r3, r2
 80033de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033e0:	e025      	b.n	800342e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e8:	d021      	beq.n	800342e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ea:	f7ff f9db 	bl	80027a4 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d302      	bcc.n	8003400 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d116      	bne.n	800342e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	f043 0220 	orr.w	r2, r3, #32
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e023      	b.n	8003476 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	0c1b      	lsrs	r3, r3, #16
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b01      	cmp	r3, #1
 8003436:	d10d      	bne.n	8003454 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	43da      	mvns	r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	4013      	ands	r3, r2
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	bf0c      	ite	eq
 800344a:	2301      	moveq	r3, #1
 800344c:	2300      	movne	r3, #0
 800344e:	b2db      	uxtb	r3, r3
 8003450:	461a      	mov	r2, r3
 8003452:	e00c      	b.n	800346e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	43da      	mvns	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4013      	ands	r3, r2
 8003460:	b29b      	uxth	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	bf0c      	ite	eq
 8003466:	2301      	moveq	r3, #1
 8003468:	2300      	movne	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	461a      	mov	r2, r3
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	429a      	cmp	r2, r3
 8003472:	d0b6      	beq.n	80033e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b084      	sub	sp, #16
 8003482:	af00      	add	r7, sp, #0
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	607a      	str	r2, [r7, #4]
 800348a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800348c:	e051      	b.n	8003532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800349c:	d123      	bne.n	80034e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	f043 0204 	orr.w	r2, r3, #4
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e046      	b.n	8003574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ec:	d021      	beq.n	8003532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ee:	f7ff f959 	bl	80027a4 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d302      	bcc.n	8003504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d116      	bne.n	8003532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2220      	movs	r2, #32
 800350e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f043 0220 	orr.w	r2, r3, #32
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e020      	b.n	8003574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	0c1b      	lsrs	r3, r3, #16
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b01      	cmp	r3, #1
 800353a:	d10c      	bne.n	8003556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	43da      	mvns	r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	4013      	ands	r3, r2
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	bf14      	ite	ne
 800354e:	2301      	movne	r3, #1
 8003550:	2300      	moveq	r3, #0
 8003552:	b2db      	uxtb	r3, r3
 8003554:	e00b      	b.n	800356e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	43da      	mvns	r2, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	4013      	ands	r3, r2
 8003562:	b29b      	uxth	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	bf14      	ite	ne
 8003568:	2301      	movne	r3, #1
 800356a:	2300      	moveq	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d18d      	bne.n	800348e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003588:	e02d      	b.n	80035e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 f878 	bl	8003680 <I2C_IsAcknowledgeFailed>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e02d      	b.n	80035f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d021      	beq.n	80035e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a2:	f7ff f8ff 	bl	80027a4 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d302      	bcc.n	80035b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d116      	bne.n	80035e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	f043 0220 	orr.w	r2, r3, #32
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e007      	b.n	80035f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f0:	2b80      	cmp	r3, #128	; 0x80
 80035f2:	d1ca      	bne.n	800358a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b084      	sub	sp, #16
 8003602:	af00      	add	r7, sp, #0
 8003604:	60f8      	str	r0, [r7, #12]
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800360a:	e02d      	b.n	8003668 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 f837 	bl	8003680 <I2C_IsAcknowledgeFailed>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e02d      	b.n	8003678 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003622:	d021      	beq.n	8003668 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003624:	f7ff f8be 	bl	80027a4 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	429a      	cmp	r2, r3
 8003632:	d302      	bcc.n	800363a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d116      	bne.n	8003668 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	f043 0220 	orr.w	r2, r3, #32
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e007      	b.n	8003678 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b04      	cmp	r3, #4
 8003674:	d1ca      	bne.n	800360c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003696:	d11b      	bne.n	80036d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	f043 0204 	orr.w	r2, r3, #4
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
	...

080036e0 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80036ec:	4b09      	ldr	r3, [pc, #36]	; (8003714 <HAL_PWR_EnterSLEEPMode+0x34>)
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	4a08      	ldr	r2, [pc, #32]	; (8003714 <HAL_PWR_EnterSLEEPMode+0x34>)
 80036f2:	f023 0304 	bic.w	r3, r3, #4
 80036f6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d101      	bne.n	8003702 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80036fe:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8003700:	e002      	b.n	8003708 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8003702:	bf40      	sev
    __WFE();
 8003704:	bf20      	wfe
    __WFE();
 8003706:	bf20      	wfe
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	e000ed00 	.word	0xe000ed00

08003718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0cc      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800372c:	4b68      	ldr	r3, [pc, #416]	; (80038d0 <HAL_RCC_ClockConfig+0x1b8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d90c      	bls.n	8003754 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373a:	4b65      	ldr	r3, [pc, #404]	; (80038d0 <HAL_RCC_ClockConfig+0x1b8>)
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003742:	4b63      	ldr	r3, [pc, #396]	; (80038d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d001      	beq.n	8003754 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e0b8      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d020      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800376c:	4b59      	ldr	r3, [pc, #356]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	4a58      	ldr	r2, [pc, #352]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003776:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003784:	4b53      	ldr	r3, [pc, #332]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	4a52      	ldr	r2, [pc, #328]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800378e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003790:	4b50      	ldr	r3, [pc, #320]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	494d      	ldr	r1, [pc, #308]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d044      	beq.n	8003838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d107      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b6:	4b47      	ldr	r3, [pc, #284]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d119      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e07f      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d003      	beq.n	80037d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d107      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d6:	4b3f      	ldr	r3, [pc, #252]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d109      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e06f      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e6:	4b3b      	ldr	r3, [pc, #236]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e067      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037f6:	4b37      	ldr	r3, [pc, #220]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f023 0203 	bic.w	r2, r3, #3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	4934      	ldr	r1, [pc, #208]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003804:	4313      	orrs	r3, r2
 8003806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003808:	f7fe ffcc 	bl	80027a4 <HAL_GetTick>
 800380c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380e:	e00a      	b.n	8003826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003810:	f7fe ffc8 	bl	80027a4 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	f241 3288 	movw	r2, #5000	; 0x1388
 800381e:	4293      	cmp	r3, r2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e04f      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003826:	4b2b      	ldr	r3, [pc, #172]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 020c 	and.w	r2, r3, #12
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	429a      	cmp	r2, r3
 8003836:	d1eb      	bne.n	8003810 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003838:	4b25      	ldr	r3, [pc, #148]	; (80038d0 <HAL_RCC_ClockConfig+0x1b8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d20c      	bcs.n	8003860 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003846:	4b22      	ldr	r3, [pc, #136]	; (80038d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800384e:	4b20      	ldr	r3, [pc, #128]	; (80038d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d001      	beq.n	8003860 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e032      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800386c:	4b19      	ldr	r3, [pc, #100]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	4916      	ldr	r1, [pc, #88]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	4313      	orrs	r3, r2
 800387c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800388a:	4b12      	ldr	r3, [pc, #72]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	490e      	ldr	r1, [pc, #56]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	4313      	orrs	r3, r2
 800389c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800389e:	f000 f887 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 80038a2:	4602      	mov	r2, r0
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	490a      	ldr	r1, [pc, #40]	; (80038d8 <HAL_RCC_ClockConfig+0x1c0>)
 80038b0:	5ccb      	ldrb	r3, [r1, r3]
 80038b2:	fa22 f303 	lsr.w	r3, r2, r3
 80038b6:	4a09      	ldr	r2, [pc, #36]	; (80038dc <HAL_RCC_ClockConfig+0x1c4>)
 80038b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038ba:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <HAL_RCC_ClockConfig+0x1c8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fe fda2 	bl	8002408 <HAL_InitTick>

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40023c00 	.word	0x40023c00
 80038d4:	40023800 	.word	0x40023800
 80038d8:	0800d228 	.word	0x0800d228
 80038dc:	20000000 	.word	0x20000000
 80038e0:	20000004 	.word	0x20000004

080038e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038e8:	4b03      	ldr	r3, [pc, #12]	; (80038f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038ea:	681b      	ldr	r3, [r3, #0]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	20000000 	.word	0x20000000

080038fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003900:	f7ff fff0 	bl	80038e4 <HAL_RCC_GetHCLKFreq>
 8003904:	4602      	mov	r2, r0
 8003906:	4b05      	ldr	r3, [pc, #20]	; (800391c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	0a9b      	lsrs	r3, r3, #10
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	4903      	ldr	r1, [pc, #12]	; (8003920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003912:	5ccb      	ldrb	r3, [r1, r3]
 8003914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003918:	4618      	mov	r0, r3
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40023800 	.word	0x40023800
 8003920:	0800d238 	.word	0x0800d238

08003924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003928:	f7ff ffdc 	bl	80038e4 <HAL_RCC_GetHCLKFreq>
 800392c:	4602      	mov	r2, r0
 800392e:	4b05      	ldr	r3, [pc, #20]	; (8003944 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	0b5b      	lsrs	r3, r3, #13
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	4903      	ldr	r1, [pc, #12]	; (8003948 <HAL_RCC_GetPCLK2Freq+0x24>)
 800393a:	5ccb      	ldrb	r3, [r1, r3]
 800393c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003940:	4618      	mov	r0, r3
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40023800 	.word	0x40023800
 8003948:	0800d238 	.word	0x0800d238

0800394c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	220f      	movs	r2, #15
 800395a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800395c:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <HAL_RCC_GetClockConfig+0x5c>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 0203 	and.w	r2, r3, #3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003968:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <HAL_RCC_GetClockConfig+0x5c>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <HAL_RCC_GetClockConfig+0x5c>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003980:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <HAL_RCC_GetClockConfig+0x5c>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	08db      	lsrs	r3, r3, #3
 8003986:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800398e:	4b07      	ldr	r3, [pc, #28]	; (80039ac <HAL_RCC_GetClockConfig+0x60>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 020f 	and.w	r2, r3, #15
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	601a      	str	r2, [r3, #0]
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40023800 	.word	0x40023800
 80039ac:	40023c00 	.word	0x40023c00

080039b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039b4:	b0a6      	sub	sp, #152	; 0x98
 80039b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039d6:	4bc8      	ldr	r3, [pc, #800]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x348>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b0c      	cmp	r3, #12
 80039e0:	f200 817e 	bhi.w	8003ce0 <HAL_RCC_GetSysClockFreq+0x330>
 80039e4:	a201      	add	r2, pc, #4	; (adr r2, 80039ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80039e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ea:	bf00      	nop
 80039ec:	08003a21 	.word	0x08003a21
 80039f0:	08003ce1 	.word	0x08003ce1
 80039f4:	08003ce1 	.word	0x08003ce1
 80039f8:	08003ce1 	.word	0x08003ce1
 80039fc:	08003a29 	.word	0x08003a29
 8003a00:	08003ce1 	.word	0x08003ce1
 8003a04:	08003ce1 	.word	0x08003ce1
 8003a08:	08003ce1 	.word	0x08003ce1
 8003a0c:	08003a31 	.word	0x08003a31
 8003a10:	08003ce1 	.word	0x08003ce1
 8003a14:	08003ce1 	.word	0x08003ce1
 8003a18:	08003ce1 	.word	0x08003ce1
 8003a1c:	08003b9b 	.word	0x08003b9b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a20:	4bb6      	ldr	r3, [pc, #728]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x34c>)
 8003a22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003a26:	e15f      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a28:	4bb5      	ldr	r3, [pc, #724]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x350>)
 8003a2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003a2e:	e15b      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a30:	4bb1      	ldr	r3, [pc, #708]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a3c:	4bae      	ldr	r3, [pc, #696]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d031      	beq.n	8003aac <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a48:	4bab      	ldr	r3, [pc, #684]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	099b      	lsrs	r3, r3, #6
 8003a4e:	2200      	movs	r2, #0
 8003a50:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a5a:	663b      	str	r3, [r7, #96]	; 0x60
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	667b      	str	r3, [r7, #100]	; 0x64
 8003a60:	4ba7      	ldr	r3, [pc, #668]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x350>)
 8003a62:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003a66:	462a      	mov	r2, r5
 8003a68:	fb03 f202 	mul.w	r2, r3, r2
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	4621      	mov	r1, r4
 8003a70:	fb01 f303 	mul.w	r3, r1, r3
 8003a74:	4413      	add	r3, r2
 8003a76:	4aa2      	ldr	r2, [pc, #648]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x350>)
 8003a78:	4621      	mov	r1, r4
 8003a7a:	fba1 1202 	umull	r1, r2, r1, r2
 8003a7e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a80:	460a      	mov	r2, r1
 8003a82:	67ba      	str	r2, [r7, #120]	; 0x78
 8003a84:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003a86:	4413      	add	r3, r2
 8003a88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a8e:	2200      	movs	r2, #0
 8003a90:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a92:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003a94:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a98:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003a9c:	f7fd f964 	bl	8000d68 <__aeabi_uldivmod>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003aaa:	e064      	b.n	8003b76 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aac:	4b92      	ldr	r3, [pc, #584]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x348>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	099b      	lsrs	r3, r3, #6
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	653b      	str	r3, [r7, #80]	; 0x50
 8003ab6:	657a      	str	r2, [r7, #84]	; 0x54
 8003ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003abe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ac4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003ac8:	4622      	mov	r2, r4
 8003aca:	462b      	mov	r3, r5
 8003acc:	f04f 0000 	mov.w	r0, #0
 8003ad0:	f04f 0100 	mov.w	r1, #0
 8003ad4:	0159      	lsls	r1, r3, #5
 8003ad6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ada:	0150      	lsls	r0, r2, #5
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	1a51      	subs	r1, r2, r1
 8003ae4:	6139      	str	r1, [r7, #16]
 8003ae6:	4629      	mov	r1, r5
 8003ae8:	eb63 0301 	sbc.w	r3, r3, r1
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003afa:	4659      	mov	r1, fp
 8003afc:	018b      	lsls	r3, r1, #6
 8003afe:	4651      	mov	r1, sl
 8003b00:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b04:	4651      	mov	r1, sl
 8003b06:	018a      	lsls	r2, r1, #6
 8003b08:	4651      	mov	r1, sl
 8003b0a:	ebb2 0801 	subs.w	r8, r2, r1
 8003b0e:	4659      	mov	r1, fp
 8003b10:	eb63 0901 	sbc.w	r9, r3, r1
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b20:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b24:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b28:	4690      	mov	r8, r2
 8003b2a:	4699      	mov	r9, r3
 8003b2c:	4623      	mov	r3, r4
 8003b2e:	eb18 0303 	adds.w	r3, r8, r3
 8003b32:	60bb      	str	r3, [r7, #8]
 8003b34:	462b      	mov	r3, r5
 8003b36:	eb49 0303 	adc.w	r3, r9, r3
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b48:	4629      	mov	r1, r5
 8003b4a:	028b      	lsls	r3, r1, #10
 8003b4c:	4621      	mov	r1, r4
 8003b4e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b52:	4621      	mov	r1, r4
 8003b54:	028a      	lsls	r2, r1, #10
 8003b56:	4610      	mov	r0, r2
 8003b58:	4619      	mov	r1, r3
 8003b5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b5e:	2200      	movs	r2, #0
 8003b60:	643b      	str	r3, [r7, #64]	; 0x40
 8003b62:	647a      	str	r2, [r7, #68]	; 0x44
 8003b64:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b68:	f7fd f8fe 	bl	8000d68 <__aeabi_uldivmod>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4613      	mov	r3, r2
 8003b72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b76:	4b60      	ldr	r3, [pc, #384]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	0c1b      	lsrs	r3, r3, #16
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	3301      	adds	r3, #1
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003b88:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003b98:	e0a6      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b9a:	4b57      	ldr	r3, [pc, #348]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ba2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ba6:	4b54      	ldr	r3, [pc, #336]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x348>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d02a      	beq.n	8003c08 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bb2:	4b51      	ldr	r3, [pc, #324]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x348>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	099b      	lsrs	r3, r3, #6
 8003bb8:	2200      	movs	r2, #0
 8003bba:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	4b4e      	ldr	r3, [pc, #312]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x350>)
 8003bc8:	fb03 f201 	mul.w	r2, r3, r1
 8003bcc:	2300      	movs	r3, #0
 8003bce:	fb00 f303 	mul.w	r3, r0, r3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	4a4a      	ldr	r2, [pc, #296]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x350>)
 8003bd6:	fba0 1202 	umull	r1, r2, r0, r2
 8003bda:	677a      	str	r2, [r7, #116]	; 0x74
 8003bdc:	460a      	mov	r2, r1
 8003bde:	673a      	str	r2, [r7, #112]	; 0x70
 8003be0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003be2:	4413      	add	r3, r2
 8003be4:	677b      	str	r3, [r7, #116]	; 0x74
 8003be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bea:	2200      	movs	r2, #0
 8003bec:	633b      	str	r3, [r7, #48]	; 0x30
 8003bee:	637a      	str	r2, [r7, #52]	; 0x34
 8003bf0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003bf4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003bf8:	f7fd f8b6 	bl	8000d68 <__aeabi_uldivmod>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4613      	mov	r3, r2
 8003c02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c06:	e05b      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c08:	4b3b      	ldr	r3, [pc, #236]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	099b      	lsrs	r3, r3, #6
 8003c0e:	2200      	movs	r2, #0
 8003c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1a:	623b      	str	r3, [r7, #32]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c24:	4642      	mov	r2, r8
 8003c26:	464b      	mov	r3, r9
 8003c28:	f04f 0000 	mov.w	r0, #0
 8003c2c:	f04f 0100 	mov.w	r1, #0
 8003c30:	0159      	lsls	r1, r3, #5
 8003c32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c36:	0150      	lsls	r0, r2, #5
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4641      	mov	r1, r8
 8003c3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c42:	4649      	mov	r1, r9
 8003c44:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c5c:	ebb2 040a 	subs.w	r4, r2, sl
 8003c60:	eb63 050b 	sbc.w	r5, r3, fp
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	00eb      	lsls	r3, r5, #3
 8003c6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c72:	00e2      	lsls	r2, r4, #3
 8003c74:	4614      	mov	r4, r2
 8003c76:	461d      	mov	r5, r3
 8003c78:	4643      	mov	r3, r8
 8003c7a:	18e3      	adds	r3, r4, r3
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	464b      	mov	r3, r9
 8003c80:	eb45 0303 	adc.w	r3, r5, r3
 8003c84:	607b      	str	r3, [r7, #4]
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c92:	4629      	mov	r1, r5
 8003c94:	028b      	lsls	r3, r1, #10
 8003c96:	4621      	mov	r1, r4
 8003c98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	028a      	lsls	r2, r1, #10
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ca8:	2200      	movs	r2, #0
 8003caa:	61bb      	str	r3, [r7, #24]
 8003cac:	61fa      	str	r2, [r7, #28]
 8003cae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cb2:	f7fd f859 	bl	8000d68 <__aeabi_uldivmod>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4613      	mov	r3, r2
 8003cbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003cc0:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	0f1b      	lsrs	r3, r3, #28
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8003cce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003cd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003cde:	e003      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ce0:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x34c>)
 8003ce2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003ce6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ce8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3798      	adds	r7, #152	; 0x98
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	00f42400 	.word	0x00f42400
 8003d00:	017d7840 	.word	0x017d7840

08003d04 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e28d      	b.n	8004232 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 8083 	beq.w	8003e2a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d24:	4b94      	ldr	r3, [pc, #592]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 030c 	and.w	r3, r3, #12
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d019      	beq.n	8003d64 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d30:	4b91      	ldr	r3, [pc, #580]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d106      	bne.n	8003d4a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d3c:	4b8e      	ldr	r3, [pc, #568]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d48:	d00c      	beq.n	8003d64 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d4a:	4b8b      	ldr	r3, [pc, #556]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d52:	2b0c      	cmp	r3, #12
 8003d54:	d112      	bne.n	8003d7c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d56:	4b88      	ldr	r3, [pc, #544]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d62:	d10b      	bne.n	8003d7c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d64:	4b84      	ldr	r3, [pc, #528]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d05b      	beq.n	8003e28 <HAL_RCC_OscConfig+0x124>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d157      	bne.n	8003e28 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e25a      	b.n	8004232 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d84:	d106      	bne.n	8003d94 <HAL_RCC_OscConfig+0x90>
 8003d86:	4b7c      	ldr	r3, [pc, #496]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a7b      	ldr	r2, [pc, #492]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	e01d      	b.n	8003dd0 <HAL_RCC_OscConfig+0xcc>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d9c:	d10c      	bne.n	8003db8 <HAL_RCC_OscConfig+0xb4>
 8003d9e:	4b76      	ldr	r3, [pc, #472]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a75      	ldr	r2, [pc, #468]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	4b73      	ldr	r3, [pc, #460]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a72      	ldr	r2, [pc, #456]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	e00b      	b.n	8003dd0 <HAL_RCC_OscConfig+0xcc>
 8003db8:	4b6f      	ldr	r3, [pc, #444]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a6e      	ldr	r2, [pc, #440]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc2:	6013      	str	r3, [r2, #0]
 8003dc4:	4b6c      	ldr	r3, [pc, #432]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a6b      	ldr	r2, [pc, #428]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d013      	beq.n	8003e00 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd8:	f7fe fce4 	bl	80027a4 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003de0:	f7fe fce0 	bl	80027a4 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b64      	cmp	r3, #100	; 0x64
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e21f      	b.n	8004232 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df2:	4b61      	ldr	r3, [pc, #388]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0f0      	beq.n	8003de0 <HAL_RCC_OscConfig+0xdc>
 8003dfe:	e014      	b.n	8003e2a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e00:	f7fe fcd0 	bl	80027a4 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e08:	f7fe fccc 	bl	80027a4 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b64      	cmp	r3, #100	; 0x64
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e20b      	b.n	8004232 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e1a:	4b57      	ldr	r3, [pc, #348]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f0      	bne.n	8003e08 <HAL_RCC_OscConfig+0x104>
 8003e26:	e000      	b.n	8003e2a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d06f      	beq.n	8003f16 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e36:	4b50      	ldr	r3, [pc, #320]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 030c 	and.w	r3, r3, #12
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d017      	beq.n	8003e72 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e42:	4b4d      	ldr	r3, [pc, #308]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d105      	bne.n	8003e5a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e4e:	4b4a      	ldr	r3, [pc, #296]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00b      	beq.n	8003e72 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e5a:	4b47      	ldr	r3, [pc, #284]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e62:	2b0c      	cmp	r3, #12
 8003e64:	d11c      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e66:	4b44      	ldr	r3, [pc, #272]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d116      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e72:	4b41      	ldr	r3, [pc, #260]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <HAL_RCC_OscConfig+0x186>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d001      	beq.n	8003e8a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e1d3      	b.n	8004232 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8a:	4b3b      	ldr	r3, [pc, #236]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4937      	ldr	r1, [pc, #220]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e9e:	e03a      	b.n	8003f16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d020      	beq.n	8003eea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ea8:	4b34      	ldr	r3, [pc, #208]	; (8003f7c <HAL_RCC_OscConfig+0x278>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eae:	f7fe fc79 	bl	80027a4 <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eb6:	f7fe fc75 	bl	80027a4 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e1b4      	b.n	8004232 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec8:	4b2b      	ldr	r3, [pc, #172]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0f0      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed4:	4b28      	ldr	r3, [pc, #160]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	4925      	ldr	r1, [pc, #148]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	600b      	str	r3, [r1, #0]
 8003ee8:	e015      	b.n	8003f16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eea:	4b24      	ldr	r3, [pc, #144]	; (8003f7c <HAL_RCC_OscConfig+0x278>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef0:	f7fe fc58 	bl	80027a4 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ef8:	f7fe fc54 	bl	80027a4 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e193      	b.n	8004232 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f0a:	4b1b      	ldr	r3, [pc, #108]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d036      	beq.n	8003f90 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d016      	beq.n	8003f58 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f2a:	4b15      	ldr	r3, [pc, #84]	; (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f30:	f7fe fc38 	bl	80027a4 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f38:	f7fe fc34 	bl	80027a4 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e173      	b.n	8004232 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f4a:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <HAL_RCC_OscConfig+0x274>)
 8003f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0f0      	beq.n	8003f38 <HAL_RCC_OscConfig+0x234>
 8003f56:	e01b      	b.n	8003f90 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f58:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5e:	f7fe fc21 	bl	80027a4 <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f64:	e00e      	b.n	8003f84 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f66:	f7fe fc1d 	bl	80027a4 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d907      	bls.n	8003f84 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e15c      	b.n	8004232 <HAL_RCC_OscConfig+0x52e>
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	42470000 	.word	0x42470000
 8003f80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f84:	4b8a      	ldr	r3, [pc, #552]	; (80041b0 <HAL_RCC_OscConfig+0x4ac>)
 8003f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1ea      	bne.n	8003f66 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 8097 	beq.w	80040cc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa2:	4b83      	ldr	r3, [pc, #524]	; (80041b0 <HAL_RCC_OscConfig+0x4ac>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10f      	bne.n	8003fce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60bb      	str	r3, [r7, #8]
 8003fb2:	4b7f      	ldr	r3, [pc, #508]	; (80041b0 <HAL_RCC_OscConfig+0x4ac>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	4a7e      	ldr	r2, [pc, #504]	; (80041b0 <HAL_RCC_OscConfig+0x4ac>)
 8003fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8003fbe:	4b7c      	ldr	r3, [pc, #496]	; (80041b0 <HAL_RCC_OscConfig+0x4ac>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fce:	4b79      	ldr	r3, [pc, #484]	; (80041b4 <HAL_RCC_OscConfig+0x4b0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d118      	bne.n	800400c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fda:	4b76      	ldr	r3, [pc, #472]	; (80041b4 <HAL_RCC_OscConfig+0x4b0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a75      	ldr	r2, [pc, #468]	; (80041b4 <HAL_RCC_OscConfig+0x4b0>)
 8003fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fe6:	f7fe fbdd 	bl	80027a4 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fee:	f7fe fbd9 	bl	80027a4 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e118      	b.n	8004232 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004000:	4b6c      	ldr	r3, [pc, #432]	; (80041b4 <HAL_RCC_OscConfig+0x4b0>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0f0      	beq.n	8003fee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d106      	bne.n	8004022 <HAL_RCC_OscConfig+0x31e>
 8004014:	4b66      	ldr	r3, [pc, #408]	; (80041b0 <HAL_RCC_OscConfig+0x4ac>)
 8004016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004018:	4a65      	ldr	r2, [pc, #404]	; (80041b0 <HAL_RCC_OscConfig+0x4ac>)
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	6713      	str	r3, [r2, #112]	; 0x70
 8004020:	e01c      	b.n	800405c <HAL_RCC_OscConfig+0x358>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2b05      	cmp	r3, #5
 8004028:	d10c      	bne.n	8004044 <HAL_RCC_OscConfig+0x340>
 800402a:	4b61      	ldr	r3, [pc, #388]	; (80041b0 <HAL_RCC_OscConfig+0x4ac>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	4a60      	ldr	r2, [pc, #384]	; (80041b0 <HAL_RCC_OscConfig+0x4ac>)
 8004030:	f043 0304 	orr.w	r3, r3, #4
 8004034:	6713      	str	r3, [r2, #112]	; 0x70
 8004036:	4b5e      	ldr	r3, [pc, #376]	; (80041b0 <HAL_RCC_OscConfig+0x4ac>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403a:	4a5d      	ldr	r2, [pc, #372]	; (80041b0 <HAL_RCC_OscConfig+0x4ac>)
 800403c:	f043 0301 	orr.w	r3, r3, #1
 8004040:	6713      	str	r3, [r2, #112]	; 0x70
 8004042:	e00b      	b.n	800405c <HAL_RCC_OscConfig+0x358>
 8004044:	4b5a      	ldr	r3, [pc, #360]	; (80041b0 <HAL_RCC_OscConfig+0x4ac>)
 8004046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004048:	4a59      	ldr	r2, [pc, #356]	; (80041b0 <HAL_RCC_OscConfig+0x4ac>)
 800404a:	f023 0301 	bic.w	r3, r3, #1
 800404e:	6713      	str	r3, [r2, #112]	; 0x70
 8004050:	4b57      	ldr	r3, [pc, #348]	; (80041b0 <HAL_RCC_OscConfig+0x4ac>)
 8004052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004054:	4a56      	ldr	r2, [pc, #344]	; (80041b0 <HAL_RCC_OscConfig+0x4ac>)
 8004056:	f023 0304 	bic.w	r3, r3, #4
 800405a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d015      	beq.n	8004090 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004064:	f7fe fb9e 	bl	80027a4 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406a:	e00a      	b.n	8004082 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800406c:	f7fe fb9a 	bl	80027a4 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f241 3288 	movw	r2, #5000	; 0x1388
 800407a:	4293      	cmp	r3, r2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e0d7      	b.n	8004232 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004082:	4b4b      	ldr	r3, [pc, #300]	; (80041b0 <HAL_RCC_OscConfig+0x4ac>)
 8004084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0ee      	beq.n	800406c <HAL_RCC_OscConfig+0x368>
 800408e:	e014      	b.n	80040ba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004090:	f7fe fb88 	bl	80027a4 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004096:	e00a      	b.n	80040ae <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004098:	f7fe fb84 	bl	80027a4 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e0c1      	b.n	8004232 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ae:	4b40      	ldr	r3, [pc, #256]	; (80041b0 <HAL_RCC_OscConfig+0x4ac>)
 80040b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1ee      	bne.n	8004098 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040ba:	7dfb      	ldrb	r3, [r7, #23]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d105      	bne.n	80040cc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c0:	4b3b      	ldr	r3, [pc, #236]	; (80041b0 <HAL_RCC_OscConfig+0x4ac>)
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	4a3a      	ldr	r2, [pc, #232]	; (80041b0 <HAL_RCC_OscConfig+0x4ac>)
 80040c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 80ad 	beq.w	8004230 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040d6:	4b36      	ldr	r3, [pc, #216]	; (80041b0 <HAL_RCC_OscConfig+0x4ac>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 030c 	and.w	r3, r3, #12
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d060      	beq.n	80041a4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d145      	bne.n	8004176 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ea:	4b33      	ldr	r3, [pc, #204]	; (80041b8 <HAL_RCC_OscConfig+0x4b4>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f0:	f7fe fb58 	bl	80027a4 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f8:	f7fe fb54 	bl	80027a4 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e093      	b.n	8004232 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410a:	4b29      	ldr	r3, [pc, #164]	; (80041b0 <HAL_RCC_OscConfig+0x4ac>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69da      	ldr	r2, [r3, #28]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	019b      	lsls	r3, r3, #6
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	085b      	lsrs	r3, r3, #1
 800412e:	3b01      	subs	r3, #1
 8004130:	041b      	lsls	r3, r3, #16
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004138:	061b      	lsls	r3, r3, #24
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	071b      	lsls	r3, r3, #28
 8004142:	491b      	ldr	r1, [pc, #108]	; (80041b0 <HAL_RCC_OscConfig+0x4ac>)
 8004144:	4313      	orrs	r3, r2
 8004146:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004148:	4b1b      	ldr	r3, [pc, #108]	; (80041b8 <HAL_RCC_OscConfig+0x4b4>)
 800414a:	2201      	movs	r2, #1
 800414c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414e:	f7fe fb29 	bl	80027a4 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004156:	f7fe fb25 	bl	80027a4 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e064      	b.n	8004232 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004168:	4b11      	ldr	r3, [pc, #68]	; (80041b0 <HAL_RCC_OscConfig+0x4ac>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0f0      	beq.n	8004156 <HAL_RCC_OscConfig+0x452>
 8004174:	e05c      	b.n	8004230 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004176:	4b10      	ldr	r3, [pc, #64]	; (80041b8 <HAL_RCC_OscConfig+0x4b4>)
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417c:	f7fe fb12 	bl	80027a4 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004184:	f7fe fb0e 	bl	80027a4 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e04d      	b.n	8004232 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004196:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <HAL_RCC_OscConfig+0x4ac>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1f0      	bne.n	8004184 <HAL_RCC_OscConfig+0x480>
 80041a2:	e045      	b.n	8004230 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d107      	bne.n	80041bc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e040      	b.n	8004232 <HAL_RCC_OscConfig+0x52e>
 80041b0:	40023800 	.word	0x40023800
 80041b4:	40007000 	.word	0x40007000
 80041b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041bc:	4b1f      	ldr	r3, [pc, #124]	; (800423c <HAL_RCC_OscConfig+0x538>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d030      	beq.n	800422c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d129      	bne.n	800422c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d122      	bne.n	800422c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041ec:	4013      	ands	r3, r2
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d119      	bne.n	800422c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004202:	085b      	lsrs	r3, r3, #1
 8004204:	3b01      	subs	r3, #1
 8004206:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004208:	429a      	cmp	r2, r3
 800420a:	d10f      	bne.n	800422c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004218:	429a      	cmp	r2, r3
 800421a:	d107      	bne.n	800422c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004228:	429a      	cmp	r2, r3
 800422a:	d001      	beq.n	8004230 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e000      	b.n	8004232 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40023800 	.word	0x40023800

08004240 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e041      	b.n	80042d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fd ff0c 	bl	8002084 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3304      	adds	r3, #4
 800427c:	4619      	mov	r1, r3
 800427e:	4610      	mov	r0, r2
 8004280:	f000 fdb2 	bl	8004de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d001      	beq.n	80042f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e04e      	b.n	8004396 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a23      	ldr	r2, [pc, #140]	; (80043a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d022      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x80>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004322:	d01d      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x80>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a1f      	ldr	r2, [pc, #124]	; (80043a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d018      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x80>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a1e      	ldr	r2, [pc, #120]	; (80043ac <HAL_TIM_Base_Start_IT+0xcc>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d013      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x80>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1c      	ldr	r2, [pc, #112]	; (80043b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d00e      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x80>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a1b      	ldr	r2, [pc, #108]	; (80043b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d009      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x80>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a19      	ldr	r2, [pc, #100]	; (80043b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d004      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x80>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a18      	ldr	r2, [pc, #96]	; (80043bc <HAL_TIM_Base_Start_IT+0xdc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d111      	bne.n	8004384 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2b06      	cmp	r3, #6
 8004370:	d010      	beq.n	8004394 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f042 0201 	orr.w	r2, r2, #1
 8004380:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004382:	e007      	b.n	8004394 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40010000 	.word	0x40010000
 80043a8:	40000400 	.word	0x40000400
 80043ac:	40000800 	.word	0x40000800
 80043b0:	40000c00 	.word	0x40000c00
 80043b4:	40010400 	.word	0x40010400
 80043b8:	40014000 	.word	0x40014000
 80043bc:	40001800 	.word	0x40001800

080043c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e041      	b.n	8004456 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d106      	bne.n	80043ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fd fe14 	bl	8002014 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3304      	adds	r3, #4
 80043fc:	4619      	mov	r1, r3
 80043fe:	4610      	mov	r0, r2
 8004400:	f000 fcf2 	bl	8004de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d109      	bne.n	8004484 <HAL_TIM_PWM_Start+0x24>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b01      	cmp	r3, #1
 800447a:	bf14      	ite	ne
 800447c:	2301      	movne	r3, #1
 800447e:	2300      	moveq	r3, #0
 8004480:	b2db      	uxtb	r3, r3
 8004482:	e022      	b.n	80044ca <HAL_TIM_PWM_Start+0x6a>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	2b04      	cmp	r3, #4
 8004488:	d109      	bne.n	800449e <HAL_TIM_PWM_Start+0x3e>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b01      	cmp	r3, #1
 8004494:	bf14      	ite	ne
 8004496:	2301      	movne	r3, #1
 8004498:	2300      	moveq	r3, #0
 800449a:	b2db      	uxtb	r3, r3
 800449c:	e015      	b.n	80044ca <HAL_TIM_PWM_Start+0x6a>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d109      	bne.n	80044b8 <HAL_TIM_PWM_Start+0x58>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	bf14      	ite	ne
 80044b0:	2301      	movne	r3, #1
 80044b2:	2300      	moveq	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	e008      	b.n	80044ca <HAL_TIM_PWM_Start+0x6a>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	bf14      	ite	ne
 80044c4:	2301      	movne	r3, #1
 80044c6:	2300      	moveq	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e07c      	b.n	80045cc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d104      	bne.n	80044e2 <HAL_TIM_PWM_Start+0x82>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044e0:	e013      	b.n	800450a <HAL_TIM_PWM_Start+0xaa>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d104      	bne.n	80044f2 <HAL_TIM_PWM_Start+0x92>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044f0:	e00b      	b.n	800450a <HAL_TIM_PWM_Start+0xaa>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d104      	bne.n	8004502 <HAL_TIM_PWM_Start+0xa2>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004500:	e003      	b.n	800450a <HAL_TIM_PWM_Start+0xaa>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2202      	movs	r2, #2
 8004506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2201      	movs	r2, #1
 8004510:	6839      	ldr	r1, [r7, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f000 ffe2 	bl	80054dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a2d      	ldr	r2, [pc, #180]	; (80045d4 <HAL_TIM_PWM_Start+0x174>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d004      	beq.n	800452c <HAL_TIM_PWM_Start+0xcc>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a2c      	ldr	r2, [pc, #176]	; (80045d8 <HAL_TIM_PWM_Start+0x178>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d101      	bne.n	8004530 <HAL_TIM_PWM_Start+0xd0>
 800452c:	2301      	movs	r3, #1
 800452e:	e000      	b.n	8004532 <HAL_TIM_PWM_Start+0xd2>
 8004530:	2300      	movs	r3, #0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d007      	beq.n	8004546 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004544:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a22      	ldr	r2, [pc, #136]	; (80045d4 <HAL_TIM_PWM_Start+0x174>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d022      	beq.n	8004596 <HAL_TIM_PWM_Start+0x136>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004558:	d01d      	beq.n	8004596 <HAL_TIM_PWM_Start+0x136>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a1f      	ldr	r2, [pc, #124]	; (80045dc <HAL_TIM_PWM_Start+0x17c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d018      	beq.n	8004596 <HAL_TIM_PWM_Start+0x136>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a1d      	ldr	r2, [pc, #116]	; (80045e0 <HAL_TIM_PWM_Start+0x180>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d013      	beq.n	8004596 <HAL_TIM_PWM_Start+0x136>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a1c      	ldr	r2, [pc, #112]	; (80045e4 <HAL_TIM_PWM_Start+0x184>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d00e      	beq.n	8004596 <HAL_TIM_PWM_Start+0x136>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a16      	ldr	r2, [pc, #88]	; (80045d8 <HAL_TIM_PWM_Start+0x178>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d009      	beq.n	8004596 <HAL_TIM_PWM_Start+0x136>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a18      	ldr	r2, [pc, #96]	; (80045e8 <HAL_TIM_PWM_Start+0x188>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d004      	beq.n	8004596 <HAL_TIM_PWM_Start+0x136>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a16      	ldr	r2, [pc, #88]	; (80045ec <HAL_TIM_PWM_Start+0x18c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d111      	bne.n	80045ba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2b06      	cmp	r3, #6
 80045a6:	d010      	beq.n	80045ca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0201 	orr.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b8:	e007      	b.n	80045ca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0201 	orr.w	r2, r2, #1
 80045c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40010000 	.word	0x40010000
 80045d8:	40010400 	.word	0x40010400
 80045dc:	40000400 	.word	0x40000400
 80045e0:	40000800 	.word	0x40000800
 80045e4:	40000c00 	.word	0x40000c00
 80045e8:	40014000 	.word	0x40014000
 80045ec:	40001800 	.word	0x40001800

080045f0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e041      	b.n	8004686 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d106      	bne.n	800461c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7fd fcae 	bl	8001f78 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3304      	adds	r3, #4
 800462c:	4619      	mov	r1, r3
 800462e:	4610      	mov	r0, r2
 8004630:	f000 fbda 	bl	8004de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d104      	bne.n	80046ae <HAL_TIM_IC_Start_IT+0x1e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	e013      	b.n	80046d6 <HAL_TIM_IC_Start_IT+0x46>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d104      	bne.n	80046be <HAL_TIM_IC_Start_IT+0x2e>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	e00b      	b.n	80046d6 <HAL_TIM_IC_Start_IT+0x46>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	d104      	bne.n	80046ce <HAL_TIM_IC_Start_IT+0x3e>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	e003      	b.n	80046d6 <HAL_TIM_IC_Start_IT+0x46>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d104      	bne.n	80046e8 <HAL_TIM_IC_Start_IT+0x58>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	e013      	b.n	8004710 <HAL_TIM_IC_Start_IT+0x80>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d104      	bne.n	80046f8 <HAL_TIM_IC_Start_IT+0x68>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	e00b      	b.n	8004710 <HAL_TIM_IC_Start_IT+0x80>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d104      	bne.n	8004708 <HAL_TIM_IC_Start_IT+0x78>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004704:	b2db      	uxtb	r3, r3
 8004706:	e003      	b.n	8004710 <HAL_TIM_IC_Start_IT+0x80>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800470e:	b2db      	uxtb	r3, r3
 8004710:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004712:	7bbb      	ldrb	r3, [r7, #14]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d102      	bne.n	800471e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004718:	7b7b      	ldrb	r3, [r7, #13]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d001      	beq.n	8004722 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e0cc      	b.n	80048bc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d104      	bne.n	8004732 <HAL_TIM_IC_Start_IT+0xa2>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004730:	e013      	b.n	800475a <HAL_TIM_IC_Start_IT+0xca>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b04      	cmp	r3, #4
 8004736:	d104      	bne.n	8004742 <HAL_TIM_IC_Start_IT+0xb2>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004740:	e00b      	b.n	800475a <HAL_TIM_IC_Start_IT+0xca>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b08      	cmp	r3, #8
 8004746:	d104      	bne.n	8004752 <HAL_TIM_IC_Start_IT+0xc2>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004750:	e003      	b.n	800475a <HAL_TIM_IC_Start_IT+0xca>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2202      	movs	r2, #2
 8004756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d104      	bne.n	800476a <HAL_TIM_IC_Start_IT+0xda>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004768:	e013      	b.n	8004792 <HAL_TIM_IC_Start_IT+0x102>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b04      	cmp	r3, #4
 800476e:	d104      	bne.n	800477a <HAL_TIM_IC_Start_IT+0xea>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004778:	e00b      	b.n	8004792 <HAL_TIM_IC_Start_IT+0x102>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b08      	cmp	r3, #8
 800477e:	d104      	bne.n	800478a <HAL_TIM_IC_Start_IT+0xfa>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004788:	e003      	b.n	8004792 <HAL_TIM_IC_Start_IT+0x102>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2202      	movs	r2, #2
 800478e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b0c      	cmp	r3, #12
 8004796:	d841      	bhi.n	800481c <HAL_TIM_IC_Start_IT+0x18c>
 8004798:	a201      	add	r2, pc, #4	; (adr r2, 80047a0 <HAL_TIM_IC_Start_IT+0x110>)
 800479a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479e:	bf00      	nop
 80047a0:	080047d5 	.word	0x080047d5
 80047a4:	0800481d 	.word	0x0800481d
 80047a8:	0800481d 	.word	0x0800481d
 80047ac:	0800481d 	.word	0x0800481d
 80047b0:	080047e7 	.word	0x080047e7
 80047b4:	0800481d 	.word	0x0800481d
 80047b8:	0800481d 	.word	0x0800481d
 80047bc:	0800481d 	.word	0x0800481d
 80047c0:	080047f9 	.word	0x080047f9
 80047c4:	0800481d 	.word	0x0800481d
 80047c8:	0800481d 	.word	0x0800481d
 80047cc:	0800481d 	.word	0x0800481d
 80047d0:	0800480b 	.word	0x0800480b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0202 	orr.w	r2, r2, #2
 80047e2:	60da      	str	r2, [r3, #12]
      break;
 80047e4:	e01d      	b.n	8004822 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f042 0204 	orr.w	r2, r2, #4
 80047f4:	60da      	str	r2, [r3, #12]
      break;
 80047f6:	e014      	b.n	8004822 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0208 	orr.w	r2, r2, #8
 8004806:	60da      	str	r2, [r3, #12]
      break;
 8004808:	e00b      	b.n	8004822 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0210 	orr.w	r2, r2, #16
 8004818:	60da      	str	r2, [r3, #12]
      break;
 800481a:	e002      	b.n	8004822 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	73fb      	strb	r3, [r7, #15]
      break;
 8004820:	bf00      	nop
  }

  if (status == HAL_OK)
 8004822:	7bfb      	ldrb	r3, [r7, #15]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d148      	bne.n	80048ba <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2201      	movs	r2, #1
 800482e:	6839      	ldr	r1, [r7, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f000 fe53 	bl	80054dc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a22      	ldr	r2, [pc, #136]	; (80048c4 <HAL_TIM_IC_Start_IT+0x234>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d022      	beq.n	8004886 <HAL_TIM_IC_Start_IT+0x1f6>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004848:	d01d      	beq.n	8004886 <HAL_TIM_IC_Start_IT+0x1f6>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a1e      	ldr	r2, [pc, #120]	; (80048c8 <HAL_TIM_IC_Start_IT+0x238>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d018      	beq.n	8004886 <HAL_TIM_IC_Start_IT+0x1f6>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a1c      	ldr	r2, [pc, #112]	; (80048cc <HAL_TIM_IC_Start_IT+0x23c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d013      	beq.n	8004886 <HAL_TIM_IC_Start_IT+0x1f6>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a1b      	ldr	r2, [pc, #108]	; (80048d0 <HAL_TIM_IC_Start_IT+0x240>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d00e      	beq.n	8004886 <HAL_TIM_IC_Start_IT+0x1f6>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a19      	ldr	r2, [pc, #100]	; (80048d4 <HAL_TIM_IC_Start_IT+0x244>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d009      	beq.n	8004886 <HAL_TIM_IC_Start_IT+0x1f6>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a18      	ldr	r2, [pc, #96]	; (80048d8 <HAL_TIM_IC_Start_IT+0x248>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d004      	beq.n	8004886 <HAL_TIM_IC_Start_IT+0x1f6>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a16      	ldr	r2, [pc, #88]	; (80048dc <HAL_TIM_IC_Start_IT+0x24c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d111      	bne.n	80048aa <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b06      	cmp	r3, #6
 8004896:	d010      	beq.n	80048ba <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0201 	orr.w	r2, r2, #1
 80048a6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a8:	e007      	b.n	80048ba <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f042 0201 	orr.w	r2, r2, #1
 80048b8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80048ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40010000 	.word	0x40010000
 80048c8:	40000400 	.word	0x40000400
 80048cc:	40000800 	.word	0x40000800
 80048d0:	40000c00 	.word	0x40000c00
 80048d4:	40010400 	.word	0x40010400
 80048d8:	40014000 	.word	0x40014000
 80048dc:	40001800 	.word	0x40001800

080048e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d122      	bne.n	800493c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b02      	cmp	r3, #2
 8004902:	d11b      	bne.n	800493c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0202 	mvn.w	r2, #2
 800490c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fc fbae 	bl	8001084 <HAL_TIM_IC_CaptureCallback>
 8004928:	e005      	b.n	8004936 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fa3e 	bl	8004dac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fa45 	bl	8004dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0304 	and.w	r3, r3, #4
 8004946:	2b04      	cmp	r3, #4
 8004948:	d122      	bne.n	8004990 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b04      	cmp	r3, #4
 8004956:	d11b      	bne.n	8004990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0204 	mvn.w	r2, #4
 8004960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2202      	movs	r2, #2
 8004966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fc fb84 	bl	8001084 <HAL_TIM_IC_CaptureCallback>
 800497c:	e005      	b.n	800498a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fa14 	bl	8004dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 fa1b 	bl	8004dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b08      	cmp	r3, #8
 800499c:	d122      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d11b      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0208 	mvn.w	r2, #8
 80049b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2204      	movs	r2, #4
 80049ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7fc fb5a 	bl	8001084 <HAL_TIM_IC_CaptureCallback>
 80049d0:	e005      	b.n	80049de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f9ea 	bl	8004dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f9f1 	bl	8004dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 0310 	and.w	r3, r3, #16
 80049ee:	2b10      	cmp	r3, #16
 80049f0:	d122      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	2b10      	cmp	r3, #16
 80049fe:	d11b      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0210 	mvn.w	r2, #16
 8004a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2208      	movs	r2, #8
 8004a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fc fb30 	bl	8001084 <HAL_TIM_IC_CaptureCallback>
 8004a24:	e005      	b.n	8004a32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f9c0 	bl	8004dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f9c7 	bl	8004dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d10e      	bne.n	8004a64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d107      	bne.n	8004a64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0201 	mvn.w	r2, #1
 8004a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fd f9ae 	bl	8001dc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6e:	2b80      	cmp	r3, #128	; 0x80
 8004a70:	d10e      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7c:	2b80      	cmp	r3, #128	; 0x80
 8004a7e:	d107      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fdd2 	bl	8005634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9a:	2b40      	cmp	r3, #64	; 0x40
 8004a9c:	d10e      	bne.n	8004abc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa8:	2b40      	cmp	r3, #64	; 0x40
 8004aaa:	d107      	bne.n	8004abc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f98c 	bl	8004dd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f003 0320 	and.w	r3, r3, #32
 8004ac6:	2b20      	cmp	r3, #32
 8004ac8:	d10e      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f003 0320 	and.w	r3, r3, #32
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	d107      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f06f 0220 	mvn.w	r2, #32
 8004ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fd9c 	bl	8005620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ae8:	bf00      	nop
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <HAL_TIM_IC_ConfigChannel+0x1e>
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	e088      	b.n	8004c20 <HAL_TIM_IC_ConfigChannel+0x130>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d11b      	bne.n	8004b54 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6818      	ldr	r0, [r3, #0]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	6819      	ldr	r1, [r3, #0]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f000 fbac 	bl	8005288 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699a      	ldr	r2, [r3, #24]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 020c 	bic.w	r2, r2, #12
 8004b3e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6999      	ldr	r1, [r3, #24]
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	689a      	ldr	r2, [r3, #8]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	619a      	str	r2, [r3, #24]
 8004b52:	e060      	b.n	8004c16 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d11c      	bne.n	8004b94 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6818      	ldr	r0, [r3, #0]
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	6819      	ldr	r1, [r3, #0]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f000 fc01 	bl	8005370 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	699a      	ldr	r2, [r3, #24]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b7c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6999      	ldr	r1, [r3, #24]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	021a      	lsls	r2, r3, #8
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	619a      	str	r2, [r3, #24]
 8004b92:	e040      	b.n	8004c16 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b08      	cmp	r3, #8
 8004b98:	d11b      	bne.n	8004bd2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	6819      	ldr	r1, [r3, #0]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f000 fc1e 	bl	80053ea <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69da      	ldr	r2, [r3, #28]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 020c 	bic.w	r2, r2, #12
 8004bbc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69d9      	ldr	r1, [r3, #28]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	61da      	str	r2, [r3, #28]
 8004bd0:	e021      	b.n	8004c16 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b0c      	cmp	r3, #12
 8004bd6:	d11c      	bne.n	8004c12 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6818      	ldr	r0, [r3, #0]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	6819      	ldr	r1, [r3, #0]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f000 fc3b 	bl	8005462 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	69da      	ldr	r2, [r3, #28]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004bfa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	69d9      	ldr	r1, [r3, #28]
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	021a      	lsls	r2, r3, #8
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	61da      	str	r2, [r3, #28]
 8004c10:	e001      	b.n	8004c16 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3718      	adds	r7, #24
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d101      	bne.n	8004c46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c42:	2302      	movs	r3, #2
 8004c44:	e0ae      	b.n	8004da4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b0c      	cmp	r3, #12
 8004c52:	f200 809f 	bhi.w	8004d94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c56:	a201      	add	r2, pc, #4	; (adr r2, 8004c5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5c:	08004c91 	.word	0x08004c91
 8004c60:	08004d95 	.word	0x08004d95
 8004c64:	08004d95 	.word	0x08004d95
 8004c68:	08004d95 	.word	0x08004d95
 8004c6c:	08004cd1 	.word	0x08004cd1
 8004c70:	08004d95 	.word	0x08004d95
 8004c74:	08004d95 	.word	0x08004d95
 8004c78:	08004d95 	.word	0x08004d95
 8004c7c:	08004d13 	.word	0x08004d13
 8004c80:	08004d95 	.word	0x08004d95
 8004c84:	08004d95 	.word	0x08004d95
 8004c88:	08004d95 	.word	0x08004d95
 8004c8c:	08004d53 	.word	0x08004d53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 f946 	bl	8004f28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699a      	ldr	r2, [r3, #24]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0208 	orr.w	r2, r2, #8
 8004caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699a      	ldr	r2, [r3, #24]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0204 	bic.w	r2, r2, #4
 8004cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6999      	ldr	r1, [r3, #24]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	691a      	ldr	r2, [r3, #16]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	619a      	str	r2, [r3, #24]
      break;
 8004cce:	e064      	b.n	8004d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68b9      	ldr	r1, [r7, #8]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 f996 	bl	8005008 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	699a      	ldr	r2, [r3, #24]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	699a      	ldr	r2, [r3, #24]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6999      	ldr	r1, [r3, #24]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	021a      	lsls	r2, r3, #8
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	619a      	str	r2, [r3, #24]
      break;
 8004d10:	e043      	b.n	8004d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68b9      	ldr	r1, [r7, #8]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 f9eb 	bl	80050f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69da      	ldr	r2, [r3, #28]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0208 	orr.w	r2, r2, #8
 8004d2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69da      	ldr	r2, [r3, #28]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0204 	bic.w	r2, r2, #4
 8004d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69d9      	ldr	r1, [r3, #28]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	61da      	str	r2, [r3, #28]
      break;
 8004d50:	e023      	b.n	8004d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68b9      	ldr	r1, [r7, #8]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 fa3f 	bl	80051dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69da      	ldr	r2, [r3, #28]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69da      	ldr	r2, [r3, #28]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69d9      	ldr	r1, [r3, #28]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	021a      	lsls	r2, r3, #8
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	61da      	str	r2, [r3, #28]
      break;
 8004d92:	e002      	b.n	8004d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	75fb      	strb	r3, [r7, #23]
      break;
 8004d98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a40      	ldr	r2, [pc, #256]	; (8004efc <TIM_Base_SetConfig+0x114>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d013      	beq.n	8004e28 <TIM_Base_SetConfig+0x40>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e06:	d00f      	beq.n	8004e28 <TIM_Base_SetConfig+0x40>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a3d      	ldr	r2, [pc, #244]	; (8004f00 <TIM_Base_SetConfig+0x118>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00b      	beq.n	8004e28 <TIM_Base_SetConfig+0x40>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a3c      	ldr	r2, [pc, #240]	; (8004f04 <TIM_Base_SetConfig+0x11c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d007      	beq.n	8004e28 <TIM_Base_SetConfig+0x40>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a3b      	ldr	r2, [pc, #236]	; (8004f08 <TIM_Base_SetConfig+0x120>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d003      	beq.n	8004e28 <TIM_Base_SetConfig+0x40>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a3a      	ldr	r2, [pc, #232]	; (8004f0c <TIM_Base_SetConfig+0x124>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d108      	bne.n	8004e3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a2f      	ldr	r2, [pc, #188]	; (8004efc <TIM_Base_SetConfig+0x114>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d02b      	beq.n	8004e9a <TIM_Base_SetConfig+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e48:	d027      	beq.n	8004e9a <TIM_Base_SetConfig+0xb2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a2c      	ldr	r2, [pc, #176]	; (8004f00 <TIM_Base_SetConfig+0x118>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d023      	beq.n	8004e9a <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a2b      	ldr	r2, [pc, #172]	; (8004f04 <TIM_Base_SetConfig+0x11c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d01f      	beq.n	8004e9a <TIM_Base_SetConfig+0xb2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a2a      	ldr	r2, [pc, #168]	; (8004f08 <TIM_Base_SetConfig+0x120>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d01b      	beq.n	8004e9a <TIM_Base_SetConfig+0xb2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a29      	ldr	r2, [pc, #164]	; (8004f0c <TIM_Base_SetConfig+0x124>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d017      	beq.n	8004e9a <TIM_Base_SetConfig+0xb2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a28      	ldr	r2, [pc, #160]	; (8004f10 <TIM_Base_SetConfig+0x128>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d013      	beq.n	8004e9a <TIM_Base_SetConfig+0xb2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a27      	ldr	r2, [pc, #156]	; (8004f14 <TIM_Base_SetConfig+0x12c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d00f      	beq.n	8004e9a <TIM_Base_SetConfig+0xb2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a26      	ldr	r2, [pc, #152]	; (8004f18 <TIM_Base_SetConfig+0x130>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00b      	beq.n	8004e9a <TIM_Base_SetConfig+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a25      	ldr	r2, [pc, #148]	; (8004f1c <TIM_Base_SetConfig+0x134>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d007      	beq.n	8004e9a <TIM_Base_SetConfig+0xb2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a24      	ldr	r2, [pc, #144]	; (8004f20 <TIM_Base_SetConfig+0x138>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d003      	beq.n	8004e9a <TIM_Base_SetConfig+0xb2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a23      	ldr	r2, [pc, #140]	; (8004f24 <TIM_Base_SetConfig+0x13c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d108      	bne.n	8004eac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a0a      	ldr	r2, [pc, #40]	; (8004efc <TIM_Base_SetConfig+0x114>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d003      	beq.n	8004ee0 <TIM_Base_SetConfig+0xf8>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a0c      	ldr	r2, [pc, #48]	; (8004f0c <TIM_Base_SetConfig+0x124>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d103      	bne.n	8004ee8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	615a      	str	r2, [r3, #20]
}
 8004eee:	bf00      	nop
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	40010000 	.word	0x40010000
 8004f00:	40000400 	.word	0x40000400
 8004f04:	40000800 	.word	0x40000800
 8004f08:	40000c00 	.word	0x40000c00
 8004f0c:	40010400 	.word	0x40010400
 8004f10:	40014000 	.word	0x40014000
 8004f14:	40014400 	.word	0x40014400
 8004f18:	40014800 	.word	0x40014800
 8004f1c:	40001800 	.word	0x40001800
 8004f20:	40001c00 	.word	0x40001c00
 8004f24:	40002000 	.word	0x40002000

08004f28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	f023 0201 	bic.w	r2, r3, #1
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0303 	bic.w	r3, r3, #3
 8004f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f023 0302 	bic.w	r3, r3, #2
 8004f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a20      	ldr	r2, [pc, #128]	; (8005000 <TIM_OC1_SetConfig+0xd8>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d003      	beq.n	8004f8c <TIM_OC1_SetConfig+0x64>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a1f      	ldr	r2, [pc, #124]	; (8005004 <TIM_OC1_SetConfig+0xdc>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d10c      	bne.n	8004fa6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f023 0308 	bic.w	r3, r3, #8
 8004f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f023 0304 	bic.w	r3, r3, #4
 8004fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a15      	ldr	r2, [pc, #84]	; (8005000 <TIM_OC1_SetConfig+0xd8>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d003      	beq.n	8004fb6 <TIM_OC1_SetConfig+0x8e>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a14      	ldr	r2, [pc, #80]	; (8005004 <TIM_OC1_SetConfig+0xdc>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d111      	bne.n	8004fda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	621a      	str	r2, [r3, #32]
}
 8004ff4:	bf00      	nop
 8004ff6:	371c      	adds	r7, #28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	40010000 	.word	0x40010000
 8005004:	40010400 	.word	0x40010400

08005008 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	f023 0210 	bic.w	r2, r3, #16
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800503e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	021b      	lsls	r3, r3, #8
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4313      	orrs	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f023 0320 	bic.w	r3, r3, #32
 8005052:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	4313      	orrs	r3, r2
 800505e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a22      	ldr	r2, [pc, #136]	; (80050ec <TIM_OC2_SetConfig+0xe4>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d003      	beq.n	8005070 <TIM_OC2_SetConfig+0x68>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a21      	ldr	r2, [pc, #132]	; (80050f0 <TIM_OC2_SetConfig+0xe8>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d10d      	bne.n	800508c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	011b      	lsls	r3, r3, #4
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800508a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a17      	ldr	r2, [pc, #92]	; (80050ec <TIM_OC2_SetConfig+0xe4>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d003      	beq.n	800509c <TIM_OC2_SetConfig+0x94>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a16      	ldr	r2, [pc, #88]	; (80050f0 <TIM_OC2_SetConfig+0xe8>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d113      	bne.n	80050c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	621a      	str	r2, [r3, #32]
}
 80050de:	bf00      	nop
 80050e0:	371c      	adds	r7, #28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	40010000 	.word	0x40010000
 80050f0:	40010400 	.word	0x40010400

080050f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0303 	bic.w	r3, r3, #3
 800512a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800513c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a21      	ldr	r2, [pc, #132]	; (80051d4 <TIM_OC3_SetConfig+0xe0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d003      	beq.n	800515a <TIM_OC3_SetConfig+0x66>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a20      	ldr	r2, [pc, #128]	; (80051d8 <TIM_OC3_SetConfig+0xe4>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d10d      	bne.n	8005176 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005160:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	021b      	lsls	r3, r3, #8
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a16      	ldr	r2, [pc, #88]	; (80051d4 <TIM_OC3_SetConfig+0xe0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d003      	beq.n	8005186 <TIM_OC3_SetConfig+0x92>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a15      	ldr	r2, [pc, #84]	; (80051d8 <TIM_OC3_SetConfig+0xe4>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d113      	bne.n	80051ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800518c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	4313      	orrs	r3, r2
 80051a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	621a      	str	r2, [r3, #32]
}
 80051c8:	bf00      	nop
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	40010000 	.word	0x40010000
 80051d8:	40010400 	.word	0x40010400

080051dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005226:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	031b      	lsls	r3, r3, #12
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a12      	ldr	r2, [pc, #72]	; (8005280 <TIM_OC4_SetConfig+0xa4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d003      	beq.n	8005244 <TIM_OC4_SetConfig+0x68>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a11      	ldr	r2, [pc, #68]	; (8005284 <TIM_OC4_SetConfig+0xa8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d109      	bne.n	8005258 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800524a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	019b      	lsls	r3, r3, #6
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	4313      	orrs	r3, r2
 8005256:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	621a      	str	r2, [r3, #32]
}
 8005272:	bf00      	nop
 8005274:	371c      	adds	r7, #28
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	40010000 	.word	0x40010000
 8005284:	40010400 	.word	0x40010400

08005288 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	f023 0201 	bic.w	r2, r3, #1
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	4a28      	ldr	r2, [pc, #160]	; (8005354 <TIM_TI1_SetConfig+0xcc>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d01b      	beq.n	80052ee <TIM_TI1_SetConfig+0x66>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052bc:	d017      	beq.n	80052ee <TIM_TI1_SetConfig+0x66>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4a25      	ldr	r2, [pc, #148]	; (8005358 <TIM_TI1_SetConfig+0xd0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d013      	beq.n	80052ee <TIM_TI1_SetConfig+0x66>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4a24      	ldr	r2, [pc, #144]	; (800535c <TIM_TI1_SetConfig+0xd4>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d00f      	beq.n	80052ee <TIM_TI1_SetConfig+0x66>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4a23      	ldr	r2, [pc, #140]	; (8005360 <TIM_TI1_SetConfig+0xd8>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00b      	beq.n	80052ee <TIM_TI1_SetConfig+0x66>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4a22      	ldr	r2, [pc, #136]	; (8005364 <TIM_TI1_SetConfig+0xdc>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d007      	beq.n	80052ee <TIM_TI1_SetConfig+0x66>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4a21      	ldr	r2, [pc, #132]	; (8005368 <TIM_TI1_SetConfig+0xe0>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d003      	beq.n	80052ee <TIM_TI1_SetConfig+0x66>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4a20      	ldr	r2, [pc, #128]	; (800536c <TIM_TI1_SetConfig+0xe4>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d101      	bne.n	80052f2 <TIM_TI1_SetConfig+0x6a>
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <TIM_TI1_SetConfig+0x6c>
 80052f2:	2300      	movs	r3, #0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d008      	beq.n	800530a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f023 0303 	bic.w	r3, r3, #3
 80052fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4313      	orrs	r3, r2
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	e003      	b.n	8005312 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f043 0301 	orr.w	r3, r3, #1
 8005310:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005318:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	b2db      	uxtb	r3, r3
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	4313      	orrs	r3, r2
 8005324:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f023 030a 	bic.w	r3, r3, #10
 800532c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	f003 030a 	and.w	r3, r3, #10
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	621a      	str	r2, [r3, #32]
}
 8005346:	bf00      	nop
 8005348:	371c      	adds	r7, #28
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	40010000 	.word	0x40010000
 8005358:	40000400 	.word	0x40000400
 800535c:	40000800 	.word	0x40000800
 8005360:	40000c00 	.word	0x40000c00
 8005364:	40010400 	.word	0x40010400
 8005368:	40014000 	.word	0x40014000
 800536c:	40001800 	.word	0x40001800

08005370 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	f023 0210 	bic.w	r2, r3, #16
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	021b      	lsls	r3, r3, #8
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	031b      	lsls	r3, r3, #12
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053c2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	621a      	str	r2, [r3, #32]
}
 80053de:	bf00      	nop
 80053e0:	371c      	adds	r7, #28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b087      	sub	sp, #28
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	60f8      	str	r0, [r7, #12]
 80053f2:	60b9      	str	r1, [r7, #8]
 80053f4:	607a      	str	r2, [r7, #4]
 80053f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f023 0303 	bic.w	r3, r3, #3
 8005416:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4313      	orrs	r3, r2
 800541e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005426:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	b2db      	uxtb	r3, r3
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	4313      	orrs	r3, r2
 8005432:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800543a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	021b      	lsls	r3, r3, #8
 8005440:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	4313      	orrs	r3, r2
 8005448:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	621a      	str	r2, [r3, #32]
}
 8005456:	bf00      	nop
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005462:	b480      	push	{r7}
 8005464:	b087      	sub	sp, #28
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	607a      	str	r2, [r7, #4]
 800546e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800548e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	021b      	lsls	r3, r3, #8
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	4313      	orrs	r3, r2
 8005498:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	031b      	lsls	r3, r3, #12
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80054b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	031b      	lsls	r3, r3, #12
 80054ba:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	621a      	str	r2, [r3, #32]
}
 80054d0:	bf00      	nop
 80054d2:	371c      	adds	r7, #28
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f003 031f 	and.w	r3, r3, #31
 80054ee:	2201      	movs	r2, #1
 80054f0:	fa02 f303 	lsl.w	r3, r2, r3
 80054f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a1a      	ldr	r2, [r3, #32]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	43db      	mvns	r3, r3
 80054fe:	401a      	ands	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a1a      	ldr	r2, [r3, #32]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f003 031f 	and.w	r3, r3, #31
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	fa01 f303 	lsl.w	r3, r1, r3
 8005514:	431a      	orrs	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	621a      	str	r2, [r3, #32]
}
 800551a:	bf00      	nop
 800551c:	371c      	adds	r7, #28
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
	...

08005528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800553c:	2302      	movs	r3, #2
 800553e:	e05a      	b.n	80055f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005566:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a21      	ldr	r2, [pc, #132]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d022      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558c:	d01d      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a1d      	ldr	r2, [pc, #116]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d018      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a1b      	ldr	r2, [pc, #108]	; (800560c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d013      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a1a      	ldr	r2, [pc, #104]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d00e      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a18      	ldr	r2, [pc, #96]	; (8005614 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d009      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a17      	ldr	r2, [pc, #92]	; (8005618 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d004      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a15      	ldr	r2, [pc, #84]	; (800561c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d10c      	bne.n	80055e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	4313      	orrs	r3, r2
 80055da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	40010000 	.word	0x40010000
 8005608:	40000400 	.word	0x40000400
 800560c:	40000800 	.word	0x40000800
 8005610:	40000c00 	.word	0x40000c00
 8005614:	40010400 	.word	0x40010400
 8005618:	40014000 	.word	0x40014000
 800561c:	40001800 	.word	0x40001800

08005620 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e03f      	b.n	80056da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d106      	bne.n	8005674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7fc fdaa 	bl	80021c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2224      	movs	r2, #36	; 0x24
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68da      	ldr	r2, [r3, #12]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800568a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fcdf 	bl	8006050 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691a      	ldr	r2, [r3, #16]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695a      	ldr	r2, [r3, #20]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68da      	ldr	r2, [r3, #12]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	4613      	mov	r3, r2
 80056ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b20      	cmp	r3, #32
 80056fa:	d11d      	bne.n	8005738 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <HAL_UART_Receive_IT+0x26>
 8005702:	88fb      	ldrh	r3, [r7, #6]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e016      	b.n	800573a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_UART_Receive_IT+0x38>
 8005716:	2302      	movs	r3, #2
 8005718:	e00f      	b.n	800573a <HAL_UART_Receive_IT+0x58>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005728:	88fb      	ldrh	r3, [r7, #6]
 800572a:	461a      	mov	r2, r3
 800572c:	68b9      	ldr	r1, [r7, #8]
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 fab6 	bl	8005ca0 <UART_Start_Receive_IT>
 8005734:	4603      	mov	r3, r0
 8005736:	e000      	b.n	800573a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005738:	2302      	movs	r3, #2
  }
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b0ba      	sub	sp, #232	; 0xe8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800576a:	2300      	movs	r3, #0
 800576c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005770:	2300      	movs	r3, #0
 8005772:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005782:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10f      	bne.n	80057aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800578a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	2b00      	cmp	r3, #0
 8005794:	d009      	beq.n	80057aa <HAL_UART_IRQHandler+0x66>
 8005796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800579a:	f003 0320 	and.w	r3, r3, #32
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fb99 	bl	8005eda <UART_Receive_IT>
      return;
 80057a8:	e256      	b.n	8005c58 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80057aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 80de 	beq.w	8005970 <HAL_UART_IRQHandler+0x22c>
 80057b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d106      	bne.n	80057ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 80d1 	beq.w	8005970 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00b      	beq.n	80057f2 <HAL_UART_IRQHandler+0xae>
 80057da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d005      	beq.n	80057f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	f043 0201 	orr.w	r2, r3, #1
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057f6:	f003 0304 	and.w	r3, r3, #4
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00b      	beq.n	8005816 <HAL_UART_IRQHandler+0xd2>
 80057fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d005      	beq.n	8005816 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580e:	f043 0202 	orr.w	r2, r3, #2
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00b      	beq.n	800583a <HAL_UART_IRQHandler+0xf6>
 8005822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d005      	beq.n	800583a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	f043 0204 	orr.w	r2, r3, #4
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800583a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800583e:	f003 0308 	and.w	r3, r3, #8
 8005842:	2b00      	cmp	r3, #0
 8005844:	d011      	beq.n	800586a <HAL_UART_IRQHandler+0x126>
 8005846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800584a:	f003 0320 	and.w	r3, r3, #32
 800584e:	2b00      	cmp	r3, #0
 8005850:	d105      	bne.n	800585e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d005      	beq.n	800586a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	f043 0208 	orr.w	r2, r3, #8
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 81ed 	beq.w	8005c4e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005878:	f003 0320 	and.w	r3, r3, #32
 800587c:	2b00      	cmp	r3, #0
 800587e:	d008      	beq.n	8005892 <HAL_UART_IRQHandler+0x14e>
 8005880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005884:	f003 0320 	and.w	r3, r3, #32
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 fb24 	bl	8005eda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589c:	2b40      	cmp	r3, #64	; 0x40
 800589e:	bf0c      	ite	eq
 80058a0:	2301      	moveq	r3, #1
 80058a2:	2300      	movne	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	f003 0308 	and.w	r3, r3, #8
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d103      	bne.n	80058be <HAL_UART_IRQHandler+0x17a>
 80058b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d04f      	beq.n	800595e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fa2c 	bl	8005d1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ce:	2b40      	cmp	r3, #64	; 0x40
 80058d0:	d141      	bne.n	8005956 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3314      	adds	r3, #20
 80058d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058e0:	e853 3f00 	ldrex	r3, [r3]
 80058e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80058e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3314      	adds	r3, #20
 80058fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80058fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005902:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005906:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800590a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800590e:	e841 2300 	strex	r3, r2, [r1]
 8005912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1d9      	bne.n	80058d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005922:	2b00      	cmp	r3, #0
 8005924:	d013      	beq.n	800594e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592a:	4a7d      	ldr	r2, [pc, #500]	; (8005b20 <HAL_UART_IRQHandler+0x3dc>)
 800592c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005932:	4618      	mov	r0, r3
 8005934:	f7fd f8b8 	bl	8002aa8 <HAL_DMA_Abort_IT>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d016      	beq.n	800596c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005948:	4610      	mov	r0, r2
 800594a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800594c:	e00e      	b.n	800596c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f990 	bl	8005c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005954:	e00a      	b.n	800596c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f98c 	bl	8005c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800595c:	e006      	b.n	800596c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f988 	bl	8005c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800596a:	e170      	b.n	8005c4e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800596c:	bf00      	nop
    return;
 800596e:	e16e      	b.n	8005c4e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005974:	2b01      	cmp	r3, #1
 8005976:	f040 814a 	bne.w	8005c0e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800597a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800597e:	f003 0310 	and.w	r3, r3, #16
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 8143 	beq.w	8005c0e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800598c:	f003 0310 	and.w	r3, r3, #16
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 813c 	beq.w	8005c0e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005996:	2300      	movs	r3, #0
 8005998:	60bb      	str	r3, [r7, #8]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	60bb      	str	r3, [r7, #8]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	60bb      	str	r3, [r7, #8]
 80059aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b6:	2b40      	cmp	r3, #64	; 0x40
 80059b8:	f040 80b4 	bne.w	8005b24 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 8140 	beq.w	8005c52 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059da:	429a      	cmp	r2, r3
 80059dc:	f080 8139 	bcs.w	8005c52 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059f2:	f000 8088 	beq.w	8005b06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	330c      	adds	r3, #12
 80059fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a04:	e853 3f00 	ldrex	r3, [r3]
 8005a08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005a0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	330c      	adds	r3, #12
 8005a1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005a22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a32:	e841 2300 	strex	r3, r2, [r1]
 8005a36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1d9      	bne.n	80059f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3314      	adds	r3, #20
 8005a48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a4c:	e853 3f00 	ldrex	r3, [r3]
 8005a50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a54:	f023 0301 	bic.w	r3, r3, #1
 8005a58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3314      	adds	r3, #20
 8005a62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a72:	e841 2300 	strex	r3, r2, [r1]
 8005a76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1e1      	bne.n	8005a42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	3314      	adds	r3, #20
 8005a84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a88:	e853 3f00 	ldrex	r3, [r3]
 8005a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3314      	adds	r3, #20
 8005a9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005aa2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005aa4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005aa8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005aaa:	e841 2300 	strex	r3, r2, [r1]
 8005aae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ab0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1e3      	bne.n	8005a7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	330c      	adds	r3, #12
 8005aca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ace:	e853 3f00 	ldrex	r3, [r3]
 8005ad2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ad6:	f023 0310 	bic.w	r3, r3, #16
 8005ada:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	330c      	adds	r3, #12
 8005ae4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ae8:	65ba      	str	r2, [r7, #88]	; 0x58
 8005aea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005aee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005af0:	e841 2300 	strex	r3, r2, [r1]
 8005af4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e3      	bne.n	8005ac4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fc ff61 	bl	80029c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	4619      	mov	r1, r3
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f8b6 	bl	8005c88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b1c:	e099      	b.n	8005c52 <HAL_UART_IRQHandler+0x50e>
 8005b1e:	bf00      	nop
 8005b20:	08005de3 	.word	0x08005de3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f000 808b 	beq.w	8005c56 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005b40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 8086 	beq.w	8005c56 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	330c      	adds	r3, #12
 8005b50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b54:	e853 3f00 	ldrex	r3, [r3]
 8005b58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	330c      	adds	r3, #12
 8005b6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005b6e:	647a      	str	r2, [r7, #68]	; 0x44
 8005b70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b76:	e841 2300 	strex	r3, r2, [r1]
 8005b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1e3      	bne.n	8005b4a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3314      	adds	r3, #20
 8005b88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	e853 3f00 	ldrex	r3, [r3]
 8005b90:	623b      	str	r3, [r7, #32]
   return(result);
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	f023 0301 	bic.w	r3, r3, #1
 8005b98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	3314      	adds	r3, #20
 8005ba2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ba6:	633a      	str	r2, [r7, #48]	; 0x30
 8005ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e3      	bne.n	8005b82 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	330c      	adds	r3, #12
 8005bce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	e853 3f00 	ldrex	r3, [r3]
 8005bd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0310 	bic.w	r3, r3, #16
 8005bde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	330c      	adds	r3, #12
 8005be8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005bec:	61fa      	str	r2, [r7, #28]
 8005bee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf0:	69b9      	ldr	r1, [r7, #24]
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	e841 2300 	strex	r3, r2, [r1]
 8005bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1e3      	bne.n	8005bc8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c04:	4619      	mov	r1, r3
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f83e 	bl	8005c88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c0c:	e023      	b.n	8005c56 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d009      	beq.n	8005c2e <HAL_UART_IRQHandler+0x4ea>
 8005c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f8ef 	bl	8005e0a <UART_Transmit_IT>
    return;
 8005c2c:	e014      	b.n	8005c58 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00e      	beq.n	8005c58 <HAL_UART_IRQHandler+0x514>
 8005c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d008      	beq.n	8005c58 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f92f 	bl	8005eaa <UART_EndTransmit_IT>
    return;
 8005c4c:	e004      	b.n	8005c58 <HAL_UART_IRQHandler+0x514>
    return;
 8005c4e:	bf00      	nop
 8005c50:	e002      	b.n	8005c58 <HAL_UART_IRQHandler+0x514>
      return;
 8005c52:	bf00      	nop
 8005c54:	e000      	b.n	8005c58 <HAL_UART_IRQHandler+0x514>
      return;
 8005c56:	bf00      	nop
  }
}
 8005c58:	37e8      	adds	r7, #232	; 0xe8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop

08005c60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	460b      	mov	r3, r1
 8005c92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	4613      	mov	r3, r2
 8005cac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	88fa      	ldrh	r2, [r7, #6]
 8005cb8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	88fa      	ldrh	r2, [r7, #6]
 8005cbe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2222      	movs	r2, #34	; 0x22
 8005cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d007      	beq.n	8005cee <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68da      	ldr	r2, [r3, #12]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	695a      	ldr	r2, [r3, #20]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f042 0201 	orr.w	r2, r2, #1
 8005cfc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68da      	ldr	r2, [r3, #12]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f042 0220 	orr.w	r2, r2, #32
 8005d0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b095      	sub	sp, #84	; 0x54
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	330c      	adds	r3, #12
 8005d2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d2e:	e853 3f00 	ldrex	r3, [r3]
 8005d32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	330c      	adds	r3, #12
 8005d42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d44:	643a      	str	r2, [r7, #64]	; 0x40
 8005d46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d4c:	e841 2300 	strex	r3, r2, [r1]
 8005d50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1e5      	bne.n	8005d24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3314      	adds	r3, #20
 8005d5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	e853 3f00 	ldrex	r3, [r3]
 8005d66:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	f023 0301 	bic.w	r3, r3, #1
 8005d6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3314      	adds	r3, #20
 8005d76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d80:	e841 2300 	strex	r3, r2, [r1]
 8005d84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1e5      	bne.n	8005d58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d119      	bne.n	8005dc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	330c      	adds	r3, #12
 8005d9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	e853 3f00 	ldrex	r3, [r3]
 8005da2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f023 0310 	bic.w	r3, r3, #16
 8005daa:	647b      	str	r3, [r7, #68]	; 0x44
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	330c      	adds	r3, #12
 8005db2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005db4:	61ba      	str	r2, [r7, #24]
 8005db6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db8:	6979      	ldr	r1, [r7, #20]
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	e841 2300 	strex	r3, r2, [r1]
 8005dc0:	613b      	str	r3, [r7, #16]
   return(result);
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1e5      	bne.n	8005d94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005dd6:	bf00      	nop
 8005dd8:	3754      	adds	r7, #84	; 0x54
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b084      	sub	sp, #16
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f7ff ff39 	bl	8005c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e02:	bf00      	nop
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b085      	sub	sp, #20
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b21      	cmp	r3, #33	; 0x21
 8005e1c:	d13e      	bne.n	8005e9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e26:	d114      	bne.n	8005e52 <UART_Transmit_IT+0x48>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d110      	bne.n	8005e52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	1c9a      	adds	r2, r3, #2
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	621a      	str	r2, [r3, #32]
 8005e50:	e008      	b.n	8005e64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	1c59      	adds	r1, r3, #1
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6211      	str	r1, [r2, #32]
 8005e5c:	781a      	ldrb	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	4619      	mov	r1, r3
 8005e72:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10f      	bne.n	8005e98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68da      	ldr	r2, [r3, #12]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	e000      	b.n	8005e9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e9c:	2302      	movs	r3, #2
  }
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b082      	sub	sp, #8
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68da      	ldr	r2, [r3, #12]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ec0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7ff fec8 	bl	8005c60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b08c      	sub	sp, #48	; 0x30
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b22      	cmp	r3, #34	; 0x22
 8005eec:	f040 80ab 	bne.w	8006046 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef8:	d117      	bne.n	8005f2a <UART_Receive_IT+0x50>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d113      	bne.n	8005f2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f02:	2300      	movs	r3, #0
 8005f04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f22:	1c9a      	adds	r2, r3, #2
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	629a      	str	r2, [r3, #40]	; 0x28
 8005f28:	e026      	b.n	8005f78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005f30:	2300      	movs	r3, #0
 8005f32:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f3c:	d007      	beq.n	8005f4e <UART_Receive_IT+0x74>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10a      	bne.n	8005f5c <UART_Receive_IT+0x82>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d106      	bne.n	8005f5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f58:	701a      	strb	r2, [r3, #0]
 8005f5a:	e008      	b.n	8005f6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	4619      	mov	r1, r3
 8005f86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d15a      	bne.n	8006042 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0220 	bic.w	r2, r2, #32
 8005f9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68da      	ldr	r2, [r3, #12]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005faa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	695a      	ldr	r2, [r3, #20]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0201 	bic.w	r2, r2, #1
 8005fba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d135      	bne.n	8006038 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	330c      	adds	r3, #12
 8005fd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	e853 3f00 	ldrex	r3, [r3]
 8005fe0:	613b      	str	r3, [r7, #16]
   return(result);
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f023 0310 	bic.w	r3, r3, #16
 8005fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	330c      	adds	r3, #12
 8005ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff2:	623a      	str	r2, [r7, #32]
 8005ff4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	69f9      	ldr	r1, [r7, #28]
 8005ff8:	6a3a      	ldr	r2, [r7, #32]
 8005ffa:	e841 2300 	strex	r3, r2, [r1]
 8005ffe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1e5      	bne.n	8005fd2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0310 	and.w	r3, r3, #16
 8006010:	2b10      	cmp	r3, #16
 8006012:	d10a      	bne.n	800602a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006014:	2300      	movs	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800602e:	4619      	mov	r1, r3
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7ff fe29 	bl	8005c88 <HAL_UARTEx_RxEventCallback>
 8006036:	e002      	b.n	800603e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7fb f841 	bl	80010c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	e002      	b.n	8006048 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	e000      	b.n	8006048 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006046:	2302      	movs	r3, #2
  }
}
 8006048:	4618      	mov	r0, r3
 800604a:	3730      	adds	r7, #48	; 0x30
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006054:	b0c0      	sub	sp, #256	; 0x100
 8006056:	af00      	add	r7, sp, #0
 8006058:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800605c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606c:	68d9      	ldr	r1, [r3, #12]
 800606e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	ea40 0301 	orr.w	r3, r0, r1
 8006078:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800607a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	431a      	orrs	r2, r3
 8006088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	431a      	orrs	r2, r3
 8006090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	4313      	orrs	r3, r2
 8006098:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800609c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80060a8:	f021 010c 	bic.w	r1, r1, #12
 80060ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060b6:	430b      	orrs	r3, r1
 80060b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80060c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ca:	6999      	ldr	r1, [r3, #24]
 80060cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	ea40 0301 	orr.w	r3, r0, r1
 80060d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	4b8f      	ldr	r3, [pc, #572]	; (800631c <UART_SetConfig+0x2cc>)
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d005      	beq.n	80060f0 <UART_SetConfig+0xa0>
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	4b8d      	ldr	r3, [pc, #564]	; (8006320 <UART_SetConfig+0x2d0>)
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d104      	bne.n	80060fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060f0:	f7fd fc18 	bl	8003924 <HAL_RCC_GetPCLK2Freq>
 80060f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80060f8:	e003      	b.n	8006102 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060fa:	f7fd fbff 	bl	80038fc <HAL_RCC_GetPCLK1Freq>
 80060fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800610c:	f040 810c 	bne.w	8006328 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006110:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006114:	2200      	movs	r2, #0
 8006116:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800611a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800611e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006122:	4622      	mov	r2, r4
 8006124:	462b      	mov	r3, r5
 8006126:	1891      	adds	r1, r2, r2
 8006128:	65b9      	str	r1, [r7, #88]	; 0x58
 800612a:	415b      	adcs	r3, r3
 800612c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800612e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006132:	4621      	mov	r1, r4
 8006134:	eb12 0801 	adds.w	r8, r2, r1
 8006138:	4629      	mov	r1, r5
 800613a:	eb43 0901 	adc.w	r9, r3, r1
 800613e:	f04f 0200 	mov.w	r2, #0
 8006142:	f04f 0300 	mov.w	r3, #0
 8006146:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800614a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800614e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006152:	4690      	mov	r8, r2
 8006154:	4699      	mov	r9, r3
 8006156:	4623      	mov	r3, r4
 8006158:	eb18 0303 	adds.w	r3, r8, r3
 800615c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006160:	462b      	mov	r3, r5
 8006162:	eb49 0303 	adc.w	r3, r9, r3
 8006166:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800616a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006176:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800617a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800617e:	460b      	mov	r3, r1
 8006180:	18db      	adds	r3, r3, r3
 8006182:	653b      	str	r3, [r7, #80]	; 0x50
 8006184:	4613      	mov	r3, r2
 8006186:	eb42 0303 	adc.w	r3, r2, r3
 800618a:	657b      	str	r3, [r7, #84]	; 0x54
 800618c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006190:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006194:	f7fa fde8 	bl	8000d68 <__aeabi_uldivmod>
 8006198:	4602      	mov	r2, r0
 800619a:	460b      	mov	r3, r1
 800619c:	4b61      	ldr	r3, [pc, #388]	; (8006324 <UART_SetConfig+0x2d4>)
 800619e:	fba3 2302 	umull	r2, r3, r3, r2
 80061a2:	095b      	lsrs	r3, r3, #5
 80061a4:	011c      	lsls	r4, r3, #4
 80061a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061aa:	2200      	movs	r2, #0
 80061ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80061b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80061b8:	4642      	mov	r2, r8
 80061ba:	464b      	mov	r3, r9
 80061bc:	1891      	adds	r1, r2, r2
 80061be:	64b9      	str	r1, [r7, #72]	; 0x48
 80061c0:	415b      	adcs	r3, r3
 80061c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80061c8:	4641      	mov	r1, r8
 80061ca:	eb12 0a01 	adds.w	sl, r2, r1
 80061ce:	4649      	mov	r1, r9
 80061d0:	eb43 0b01 	adc.w	fp, r3, r1
 80061d4:	f04f 0200 	mov.w	r2, #0
 80061d8:	f04f 0300 	mov.w	r3, #0
 80061dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061e8:	4692      	mov	sl, r2
 80061ea:	469b      	mov	fp, r3
 80061ec:	4643      	mov	r3, r8
 80061ee:	eb1a 0303 	adds.w	r3, sl, r3
 80061f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061f6:	464b      	mov	r3, r9
 80061f8:	eb4b 0303 	adc.w	r3, fp, r3
 80061fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800620c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006210:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006214:	460b      	mov	r3, r1
 8006216:	18db      	adds	r3, r3, r3
 8006218:	643b      	str	r3, [r7, #64]	; 0x40
 800621a:	4613      	mov	r3, r2
 800621c:	eb42 0303 	adc.w	r3, r2, r3
 8006220:	647b      	str	r3, [r7, #68]	; 0x44
 8006222:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006226:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800622a:	f7fa fd9d 	bl	8000d68 <__aeabi_uldivmod>
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	4611      	mov	r1, r2
 8006234:	4b3b      	ldr	r3, [pc, #236]	; (8006324 <UART_SetConfig+0x2d4>)
 8006236:	fba3 2301 	umull	r2, r3, r3, r1
 800623a:	095b      	lsrs	r3, r3, #5
 800623c:	2264      	movs	r2, #100	; 0x64
 800623e:	fb02 f303 	mul.w	r3, r2, r3
 8006242:	1acb      	subs	r3, r1, r3
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800624a:	4b36      	ldr	r3, [pc, #216]	; (8006324 <UART_SetConfig+0x2d4>)
 800624c:	fba3 2302 	umull	r2, r3, r3, r2
 8006250:	095b      	lsrs	r3, r3, #5
 8006252:	005b      	lsls	r3, r3, #1
 8006254:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006258:	441c      	add	r4, r3
 800625a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800625e:	2200      	movs	r2, #0
 8006260:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006264:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006268:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800626c:	4642      	mov	r2, r8
 800626e:	464b      	mov	r3, r9
 8006270:	1891      	adds	r1, r2, r2
 8006272:	63b9      	str	r1, [r7, #56]	; 0x38
 8006274:	415b      	adcs	r3, r3
 8006276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006278:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800627c:	4641      	mov	r1, r8
 800627e:	1851      	adds	r1, r2, r1
 8006280:	6339      	str	r1, [r7, #48]	; 0x30
 8006282:	4649      	mov	r1, r9
 8006284:	414b      	adcs	r3, r1
 8006286:	637b      	str	r3, [r7, #52]	; 0x34
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006294:	4659      	mov	r1, fp
 8006296:	00cb      	lsls	r3, r1, #3
 8006298:	4651      	mov	r1, sl
 800629a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800629e:	4651      	mov	r1, sl
 80062a0:	00ca      	lsls	r2, r1, #3
 80062a2:	4610      	mov	r0, r2
 80062a4:	4619      	mov	r1, r3
 80062a6:	4603      	mov	r3, r0
 80062a8:	4642      	mov	r2, r8
 80062aa:	189b      	adds	r3, r3, r2
 80062ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062b0:	464b      	mov	r3, r9
 80062b2:	460a      	mov	r2, r1
 80062b4:	eb42 0303 	adc.w	r3, r2, r3
 80062b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80062cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80062d0:	460b      	mov	r3, r1
 80062d2:	18db      	adds	r3, r3, r3
 80062d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80062d6:	4613      	mov	r3, r2
 80062d8:	eb42 0303 	adc.w	r3, r2, r3
 80062dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80062e6:	f7fa fd3f 	bl	8000d68 <__aeabi_uldivmod>
 80062ea:	4602      	mov	r2, r0
 80062ec:	460b      	mov	r3, r1
 80062ee:	4b0d      	ldr	r3, [pc, #52]	; (8006324 <UART_SetConfig+0x2d4>)
 80062f0:	fba3 1302 	umull	r1, r3, r3, r2
 80062f4:	095b      	lsrs	r3, r3, #5
 80062f6:	2164      	movs	r1, #100	; 0x64
 80062f8:	fb01 f303 	mul.w	r3, r1, r3
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	3332      	adds	r3, #50	; 0x32
 8006302:	4a08      	ldr	r2, [pc, #32]	; (8006324 <UART_SetConfig+0x2d4>)
 8006304:	fba2 2303 	umull	r2, r3, r2, r3
 8006308:	095b      	lsrs	r3, r3, #5
 800630a:	f003 0207 	and.w	r2, r3, #7
 800630e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4422      	add	r2, r4
 8006316:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006318:	e106      	b.n	8006528 <UART_SetConfig+0x4d8>
 800631a:	bf00      	nop
 800631c:	40011000 	.word	0x40011000
 8006320:	40011400 	.word	0x40011400
 8006324:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006328:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800632c:	2200      	movs	r2, #0
 800632e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006332:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006336:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800633a:	4642      	mov	r2, r8
 800633c:	464b      	mov	r3, r9
 800633e:	1891      	adds	r1, r2, r2
 8006340:	6239      	str	r1, [r7, #32]
 8006342:	415b      	adcs	r3, r3
 8006344:	627b      	str	r3, [r7, #36]	; 0x24
 8006346:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800634a:	4641      	mov	r1, r8
 800634c:	1854      	adds	r4, r2, r1
 800634e:	4649      	mov	r1, r9
 8006350:	eb43 0501 	adc.w	r5, r3, r1
 8006354:	f04f 0200 	mov.w	r2, #0
 8006358:	f04f 0300 	mov.w	r3, #0
 800635c:	00eb      	lsls	r3, r5, #3
 800635e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006362:	00e2      	lsls	r2, r4, #3
 8006364:	4614      	mov	r4, r2
 8006366:	461d      	mov	r5, r3
 8006368:	4643      	mov	r3, r8
 800636a:	18e3      	adds	r3, r4, r3
 800636c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006370:	464b      	mov	r3, r9
 8006372:	eb45 0303 	adc.w	r3, r5, r3
 8006376:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800637a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006386:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800638a:	f04f 0200 	mov.w	r2, #0
 800638e:	f04f 0300 	mov.w	r3, #0
 8006392:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006396:	4629      	mov	r1, r5
 8006398:	008b      	lsls	r3, r1, #2
 800639a:	4621      	mov	r1, r4
 800639c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063a0:	4621      	mov	r1, r4
 80063a2:	008a      	lsls	r2, r1, #2
 80063a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80063a8:	f7fa fcde 	bl	8000d68 <__aeabi_uldivmod>
 80063ac:	4602      	mov	r2, r0
 80063ae:	460b      	mov	r3, r1
 80063b0:	4b60      	ldr	r3, [pc, #384]	; (8006534 <UART_SetConfig+0x4e4>)
 80063b2:	fba3 2302 	umull	r2, r3, r3, r2
 80063b6:	095b      	lsrs	r3, r3, #5
 80063b8:	011c      	lsls	r4, r3, #4
 80063ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063be:	2200      	movs	r2, #0
 80063c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80063c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80063cc:	4642      	mov	r2, r8
 80063ce:	464b      	mov	r3, r9
 80063d0:	1891      	adds	r1, r2, r2
 80063d2:	61b9      	str	r1, [r7, #24]
 80063d4:	415b      	adcs	r3, r3
 80063d6:	61fb      	str	r3, [r7, #28]
 80063d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063dc:	4641      	mov	r1, r8
 80063de:	1851      	adds	r1, r2, r1
 80063e0:	6139      	str	r1, [r7, #16]
 80063e2:	4649      	mov	r1, r9
 80063e4:	414b      	adcs	r3, r1
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	f04f 0200 	mov.w	r2, #0
 80063ec:	f04f 0300 	mov.w	r3, #0
 80063f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063f4:	4659      	mov	r1, fp
 80063f6:	00cb      	lsls	r3, r1, #3
 80063f8:	4651      	mov	r1, sl
 80063fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063fe:	4651      	mov	r1, sl
 8006400:	00ca      	lsls	r2, r1, #3
 8006402:	4610      	mov	r0, r2
 8006404:	4619      	mov	r1, r3
 8006406:	4603      	mov	r3, r0
 8006408:	4642      	mov	r2, r8
 800640a:	189b      	adds	r3, r3, r2
 800640c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006410:	464b      	mov	r3, r9
 8006412:	460a      	mov	r2, r1
 8006414:	eb42 0303 	adc.w	r3, r2, r3
 8006418:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800641c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	67bb      	str	r3, [r7, #120]	; 0x78
 8006426:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006428:	f04f 0200 	mov.w	r2, #0
 800642c:	f04f 0300 	mov.w	r3, #0
 8006430:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006434:	4649      	mov	r1, r9
 8006436:	008b      	lsls	r3, r1, #2
 8006438:	4641      	mov	r1, r8
 800643a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800643e:	4641      	mov	r1, r8
 8006440:	008a      	lsls	r2, r1, #2
 8006442:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006446:	f7fa fc8f 	bl	8000d68 <__aeabi_uldivmod>
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	4611      	mov	r1, r2
 8006450:	4b38      	ldr	r3, [pc, #224]	; (8006534 <UART_SetConfig+0x4e4>)
 8006452:	fba3 2301 	umull	r2, r3, r3, r1
 8006456:	095b      	lsrs	r3, r3, #5
 8006458:	2264      	movs	r2, #100	; 0x64
 800645a:	fb02 f303 	mul.w	r3, r2, r3
 800645e:	1acb      	subs	r3, r1, r3
 8006460:	011b      	lsls	r3, r3, #4
 8006462:	3332      	adds	r3, #50	; 0x32
 8006464:	4a33      	ldr	r2, [pc, #204]	; (8006534 <UART_SetConfig+0x4e4>)
 8006466:	fba2 2303 	umull	r2, r3, r2, r3
 800646a:	095b      	lsrs	r3, r3, #5
 800646c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006470:	441c      	add	r4, r3
 8006472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006476:	2200      	movs	r2, #0
 8006478:	673b      	str	r3, [r7, #112]	; 0x70
 800647a:	677a      	str	r2, [r7, #116]	; 0x74
 800647c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006480:	4642      	mov	r2, r8
 8006482:	464b      	mov	r3, r9
 8006484:	1891      	adds	r1, r2, r2
 8006486:	60b9      	str	r1, [r7, #8]
 8006488:	415b      	adcs	r3, r3
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006490:	4641      	mov	r1, r8
 8006492:	1851      	adds	r1, r2, r1
 8006494:	6039      	str	r1, [r7, #0]
 8006496:	4649      	mov	r1, r9
 8006498:	414b      	adcs	r3, r1
 800649a:	607b      	str	r3, [r7, #4]
 800649c:	f04f 0200 	mov.w	r2, #0
 80064a0:	f04f 0300 	mov.w	r3, #0
 80064a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064a8:	4659      	mov	r1, fp
 80064aa:	00cb      	lsls	r3, r1, #3
 80064ac:	4651      	mov	r1, sl
 80064ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064b2:	4651      	mov	r1, sl
 80064b4:	00ca      	lsls	r2, r1, #3
 80064b6:	4610      	mov	r0, r2
 80064b8:	4619      	mov	r1, r3
 80064ba:	4603      	mov	r3, r0
 80064bc:	4642      	mov	r2, r8
 80064be:	189b      	adds	r3, r3, r2
 80064c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80064c2:	464b      	mov	r3, r9
 80064c4:	460a      	mov	r2, r1
 80064c6:	eb42 0303 	adc.w	r3, r2, r3
 80064ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	663b      	str	r3, [r7, #96]	; 0x60
 80064d6:	667a      	str	r2, [r7, #100]	; 0x64
 80064d8:	f04f 0200 	mov.w	r2, #0
 80064dc:	f04f 0300 	mov.w	r3, #0
 80064e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80064e4:	4649      	mov	r1, r9
 80064e6:	008b      	lsls	r3, r1, #2
 80064e8:	4641      	mov	r1, r8
 80064ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064ee:	4641      	mov	r1, r8
 80064f0:	008a      	lsls	r2, r1, #2
 80064f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80064f6:	f7fa fc37 	bl	8000d68 <__aeabi_uldivmod>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	4b0d      	ldr	r3, [pc, #52]	; (8006534 <UART_SetConfig+0x4e4>)
 8006500:	fba3 1302 	umull	r1, r3, r3, r2
 8006504:	095b      	lsrs	r3, r3, #5
 8006506:	2164      	movs	r1, #100	; 0x64
 8006508:	fb01 f303 	mul.w	r3, r1, r3
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	011b      	lsls	r3, r3, #4
 8006510:	3332      	adds	r3, #50	; 0x32
 8006512:	4a08      	ldr	r2, [pc, #32]	; (8006534 <UART_SetConfig+0x4e4>)
 8006514:	fba2 2303 	umull	r2, r3, r2, r3
 8006518:	095b      	lsrs	r3, r3, #5
 800651a:	f003 020f 	and.w	r2, r3, #15
 800651e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4422      	add	r2, r4
 8006526:	609a      	str	r2, [r3, #8]
}
 8006528:	bf00      	nop
 800652a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800652e:	46bd      	mov	sp, r7
 8006530:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006534:	51eb851f 	.word	0x51eb851f

08006538 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f103 0208 	add.w	r2, r3, #8
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f04f 32ff 	mov.w	r2, #4294967295
 8006550:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f103 0208 	add.w	r2, r3, #8
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f103 0208 	add.w	r2, r3, #8
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006586:	bf00      	nop
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8006592:	b480      	push	{r7}
 8006594:	b085      	sub	sp, #20
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a8:	d103      	bne.n	80065b2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	60fb      	str	r3, [r7, #12]
 80065b0:	e00c      	b.n	80065cc <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	3308      	adds	r3, #8
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	e002      	b.n	80065c0 <vListInsert+0x2e>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	60fb      	str	r3, [r7, #12]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d2f6      	bcs.n	80065ba <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	1c5a      	adds	r2, r3, #1
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	601a      	str	r2, [r3, #0]
}
 80065f8:	bf00      	nop
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	6892      	ldr	r2, [r2, #8]
 800661a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	6852      	ldr	r2, [r2, #4]
 8006624:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	429a      	cmp	r2, r3
 800662e:	d103      	bne.n	8006638 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	1e5a      	subs	r2, r3, #1
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8006662:	2301      	movs	r3, #1
 8006664:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10a      	bne.n	8006686 <xQueueGenericReset+0x2e>
        __asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	60fb      	str	r3, [r7, #12]
    }
 8006682:	bf00      	nop
 8006684:	e7fe      	b.n	8006684 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d05d      	beq.n	8006748 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8006690:	2b00      	cmp	r3, #0
 8006692:	d059      	beq.n	8006748 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800669c:	2100      	movs	r1, #0
 800669e:	fba3 2302 	umull	r2, r3, r3, r2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d000      	beq.n	80066a8 <xQueueGenericReset+0x50>
 80066a6:	2101      	movs	r1, #1
 80066a8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d14c      	bne.n	8006748 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80066ae:	f001 fefb 	bl	80084a8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ba:	6939      	ldr	r1, [r7, #16]
 80066bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066be:	fb01 f303 	mul.w	r3, r1, r3
 80066c2:	441a      	add	r2, r3
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	2200      	movs	r2, #0
 80066cc:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066de:	3b01      	subs	r3, #1
 80066e0:	6939      	ldr	r1, [r7, #16]
 80066e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066e4:	fb01 f303 	mul.w	r3, r1, r3
 80066e8:	441a      	add	r2, r3
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	22ff      	movs	r2, #255	; 0xff
 80066f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	22ff      	movs	r2, #255	; 0xff
 80066fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d114      	bne.n	800672e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d01a      	beq.n	8006742 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	3310      	adds	r3, #16
 8006710:	4618      	mov	r0, r3
 8006712:	f000 ffdb 	bl	80076cc <xTaskRemoveFromEventList>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d012      	beq.n	8006742 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800671c:	4b15      	ldr	r3, [pc, #84]	; (8006774 <xQueueGenericReset+0x11c>)
 800671e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	e009      	b.n	8006742 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	3310      	adds	r3, #16
 8006732:	4618      	mov	r0, r3
 8006734:	f7ff ff00 	bl	8006538 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	3324      	adds	r3, #36	; 0x24
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff fefb 	bl	8006538 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8006742:	f001 fee1 	bl	8008508 <vPortExitCritical>
 8006746:	e001      	b.n	800674c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8006748:	2300      	movs	r3, #0
 800674a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10a      	bne.n	8006768 <xQueueGenericReset+0x110>
        __asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	60bb      	str	r3, [r7, #8]
    }
 8006764:	bf00      	nop
 8006766:	e7fe      	b.n	8006766 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8006768:	697b      	ldr	r3, [r7, #20]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3718      	adds	r7, #24
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	e000ed04 	.word	0xe000ed04

08006778 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8006778:	b580      	push	{r7, lr}
 800677a:	b08a      	sub	sp, #40	; 0x28
 800677c:	af02      	add	r7, sp, #8
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	4613      	mov	r3, r2
 8006784:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8006786:	2300      	movs	r3, #0
 8006788:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d02e      	beq.n	80067ee <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8006790:	2100      	movs	r1, #0
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	fba3 2302 	umull	r2, r3, r3, r2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d000      	beq.n	80067a0 <xQueueGenericCreate+0x28>
 800679e:	2101      	movs	r1, #1
 80067a0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d123      	bne.n	80067ee <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80067ae:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80067b2:	d81c      	bhi.n	80067ee <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	fb02 f303 	mul.w	r3, r2, r3
 80067bc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	3350      	adds	r3, #80	; 0x50
 80067c2:	4618      	mov	r0, r3
 80067c4:	f001 ff9a 	bl	80086fc <pvPortMalloc>
 80067c8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d01c      	beq.n	800680a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	3350      	adds	r3, #80	; 0x50
 80067d8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067da:	79fa      	ldrb	r2, [r7, #7]
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	4613      	mov	r3, r2
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	68b9      	ldr	r1, [r7, #8]
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 f814 	bl	8006814 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80067ec:	e00d      	b.n	800680a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <xQueueGenericCreate+0x92>
        __asm volatile
 80067f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	613b      	str	r3, [r7, #16]
    }
 8006806:	bf00      	nop
 8006808:	e7fe      	b.n	8006808 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800680a:	69fb      	ldr	r3, [r7, #28]
    }
 800680c:	4618      	mov	r0, r3
 800680e:	3720      	adds	r7, #32
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d103      	bne.n	8006830 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	69ba      	ldr	r2, [r7, #24]
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	e002      	b.n	8006836 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006842:	2101      	movs	r1, #1
 8006844:	69b8      	ldr	r0, [r7, #24]
 8006846:	f7ff ff07 	bl	8006658 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	78fa      	ldrb	r2, [r7, #3]
 800684e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8006852:	78fb      	ldrb	r3, [r7, #3]
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	68f9      	ldr	r1, [r7, #12]
 8006858:	2073      	movs	r0, #115	; 0x73
 800685a:	f003 f88f 	bl	800997c <SEGGER_SYSVIEW_RecordU32x3>
}
 800685e:	bf00      	nop
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
	...

08006868 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8006868:	b590      	push	{r4, r7, lr}
 800686a:	b08f      	sub	sp, #60	; 0x3c
 800686c:	af02      	add	r7, sp, #8
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006874:	2300      	movs	r3, #0
 8006876:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800687c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10a      	bne.n	8006898 <xQueueReceive+0x30>
        __asm volatile
 8006882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	623b      	str	r3, [r7, #32]
    }
 8006894:	bf00      	nop
 8006896:	e7fe      	b.n	8006896 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d103      	bne.n	80068a6 <xQueueReceive+0x3e>
 800689e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <xQueueReceive+0x42>
 80068a6:	2301      	movs	r3, #1
 80068a8:	e000      	b.n	80068ac <xQueueReceive+0x44>
 80068aa:	2300      	movs	r3, #0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10a      	bne.n	80068c6 <xQueueReceive+0x5e>
        __asm volatile
 80068b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	61fb      	str	r3, [r7, #28]
    }
 80068c2:	bf00      	nop
 80068c4:	e7fe      	b.n	80068c4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068c6:	f001 f915 	bl	8007af4 <xTaskGetSchedulerState>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d102      	bne.n	80068d6 <xQueueReceive+0x6e>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <xQueueReceive+0x72>
 80068d6:	2301      	movs	r3, #1
 80068d8:	e000      	b.n	80068dc <xQueueReceive+0x74>
 80068da:	2300      	movs	r3, #0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10a      	bne.n	80068f6 <xQueueReceive+0x8e>
        __asm volatile
 80068e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	61bb      	str	r3, [r7, #24]
    }
 80068f2:	bf00      	nop
 80068f4:	e7fe      	b.n	80068f4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80068f6:	f001 fdd7 	bl	80084a8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	2b00      	cmp	r3, #0
 8006904:	d02f      	beq.n	8006966 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006906:	68b9      	ldr	r1, [r7, #8]
 8006908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800690a:	f000 f8bd 	bl	8006a88 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800690e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006910:	4618      	mov	r0, r3
 8006912:	f003 fd5f 	bl	800a3d4 <SEGGER_SYSVIEW_ShrinkId>
 8006916:	4604      	mov	r4, r0
 8006918:	2000      	movs	r0, #0
 800691a:	f003 fd5b 	bl	800a3d4 <SEGGER_SYSVIEW_ShrinkId>
 800691e:	4602      	mov	r2, r0
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2101      	movs	r1, #1
 8006924:	9100      	str	r1, [sp, #0]
 8006926:	4621      	mov	r1, r4
 8006928:	205c      	movs	r0, #92	; 0x5c
 800692a:	f003 f89d 	bl	8009a68 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	1e5a      	subs	r2, r3, #1
 8006932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006934:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00f      	beq.n	800695e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006940:	3310      	adds	r3, #16
 8006942:	4618      	mov	r0, r3
 8006944:	f000 fec2 	bl	80076cc <xTaskRemoveFromEventList>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d007      	beq.n	800695e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800694e:	4b4d      	ldr	r3, [pc, #308]	; (8006a84 <xQueueReceive+0x21c>)
 8006950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800695e:	f001 fdd3 	bl	8008508 <vPortExitCritical>
                return pdPASS;
 8006962:	2301      	movs	r3, #1
 8006964:	e08a      	b.n	8006a7c <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d113      	bne.n	8006994 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800696c:	f001 fdcc 	bl	8008508 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8006970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006972:	4618      	mov	r0, r3
 8006974:	f003 fd2e 	bl	800a3d4 <SEGGER_SYSVIEW_ShrinkId>
 8006978:	4604      	mov	r4, r0
 800697a:	2000      	movs	r0, #0
 800697c:	f003 fd2a 	bl	800a3d4 <SEGGER_SYSVIEW_ShrinkId>
 8006980:	4602      	mov	r2, r0
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2101      	movs	r1, #1
 8006986:	9100      	str	r1, [sp, #0]
 8006988:	4621      	mov	r1, r4
 800698a:	205c      	movs	r0, #92	; 0x5c
 800698c:	f003 f86c 	bl	8009a68 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8006990:	2300      	movs	r3, #0
 8006992:	e073      	b.n	8006a7c <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006996:	2b00      	cmp	r3, #0
 8006998:	d106      	bne.n	80069a8 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800699a:	f107 0310 	add.w	r3, r7, #16
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 ff6c 	bl	800787c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80069a4:	2301      	movs	r3, #1
 80069a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80069a8:	f001 fdae 	bl	8008508 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80069ac:	f000 fb6e 	bl	800708c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80069b0:	f001 fd7a 	bl	80084a8 <vPortEnterCritical>
 80069b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069ba:	b25b      	sxtb	r3, r3
 80069bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c0:	d103      	bne.n	80069ca <xQueueReceive+0x162>
 80069c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069d0:	b25b      	sxtb	r3, r3
 80069d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d6:	d103      	bne.n	80069e0 <xQueueReceive+0x178>
 80069d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069e0:	f001 fd92 	bl	8008508 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069e4:	1d3a      	adds	r2, r7, #4
 80069e6:	f107 0310 	add.w	r3, r7, #16
 80069ea:	4611      	mov	r1, r2
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 ff5b 	bl	80078a8 <xTaskCheckForTimeOut>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d124      	bne.n	8006a42 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069fa:	f000 f8bd 	bl	8006b78 <prvIsQueueEmpty>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d018      	beq.n	8006a36 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a06:	3324      	adds	r3, #36	; 0x24
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f000 fdf1 	bl	80075f4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006a12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a14:	f000 f85e 	bl	8006ad4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006a18:	f000 fb46 	bl	80070a8 <xTaskResumeAll>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f47f af69 	bne.w	80068f6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8006a24:	4b17      	ldr	r3, [pc, #92]	; (8006a84 <xQueueReceive+0x21c>)
 8006a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a2a:	601a      	str	r2, [r3, #0]
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	f3bf 8f6f 	isb	sy
 8006a34:	e75f      	b.n	80068f6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006a36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a38:	f000 f84c 	bl	8006ad4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006a3c:	f000 fb34 	bl	80070a8 <xTaskResumeAll>
 8006a40:	e759      	b.n	80068f6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8006a42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a44:	f000 f846 	bl	8006ad4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006a48:	f000 fb2e 	bl	80070a8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a4e:	f000 f893 	bl	8006b78 <prvIsQueueEmpty>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f43f af4e 	beq.w	80068f6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f003 fcb9 	bl	800a3d4 <SEGGER_SYSVIEW_ShrinkId>
 8006a62:	4604      	mov	r4, r0
 8006a64:	2000      	movs	r0, #0
 8006a66:	f003 fcb5 	bl	800a3d4 <SEGGER_SYSVIEW_ShrinkId>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2101      	movs	r1, #1
 8006a70:	9100      	str	r1, [sp, #0]
 8006a72:	4621      	mov	r1, r4
 8006a74:	205c      	movs	r0, #92	; 0x5c
 8006a76:	f002 fff7 	bl	8009a68 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8006a7a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3734      	adds	r7, #52	; 0x34
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd90      	pop	{r4, r7, pc}
 8006a84:	e000ed04 	.word	0xe000ed04

08006a88 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d018      	beq.n	8006acc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	441a      	add	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68da      	ldr	r2, [r3, #12]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d303      	bcc.n	8006abc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68d9      	ldr	r1, [r3, #12]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	6838      	ldr	r0, [r7, #0]
 8006ac8:	f004 fbc7 	bl	800b25a <memcpy>
    }
}
 8006acc:	bf00      	nop
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8006adc:	f001 fce4 	bl	80084a8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ae6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ae8:	e011      	b.n	8006b0e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d012      	beq.n	8006b18 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	3324      	adds	r3, #36	; 0x24
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 fde8 	bl	80076cc <xTaskRemoveFromEventList>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8006b02:	f000 ff37 	bl	8007974 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	dce9      	bgt.n	8006aea <prvUnlockQueue+0x16>
 8006b16:	e000      	b.n	8006b1a <prvUnlockQueue+0x46>
                    break;
 8006b18:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	22ff      	movs	r2, #255	; 0xff
 8006b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8006b22:	f001 fcf1 	bl	8008508 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006b26:	f001 fcbf 	bl	80084a8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b30:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b32:	e011      	b.n	8006b58 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d012      	beq.n	8006b62 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	3310      	adds	r3, #16
 8006b40:	4618      	mov	r0, r3
 8006b42:	f000 fdc3 	bl	80076cc <xTaskRemoveFromEventList>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d001      	beq.n	8006b50 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8006b4c:	f000 ff12 	bl	8007974 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006b50:	7bbb      	ldrb	r3, [r7, #14]
 8006b52:	3b01      	subs	r3, #1
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	dce9      	bgt.n	8006b34 <prvUnlockQueue+0x60>
 8006b60:	e000      	b.n	8006b64 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8006b62:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	22ff      	movs	r2, #255	; 0xff
 8006b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8006b6c:	f001 fccc 	bl	8008508 <vPortExitCritical>
}
 8006b70:	bf00      	nop
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006b80:	f001 fc92 	bl	80084a8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d102      	bne.n	8006b92 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	60fb      	str	r3, [r7, #12]
 8006b90:	e001      	b.n	8006b96 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006b92:	2300      	movs	r3, #0
 8006b94:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006b96:	f001 fcb7 	bl	8008508 <vPortExitCritical>

    return xReturn;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10a      	bne.n	8006bce <vQueueAddToRegistry+0x2a>
        __asm volatile
 8006bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbc:	f383 8811 	msr	BASEPRI, r3
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	60fb      	str	r3, [r7, #12]
    }
 8006bca:	bf00      	nop
 8006bcc:	e7fe      	b.n	8006bcc <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d024      	beq.n	8006c1e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	e01e      	b.n	8006c18 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8006bda:	4a1c      	ldr	r2, [pc, #112]	; (8006c4c <vQueueAddToRegistry+0xa8>)
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	4413      	add	r3, r2
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d105      	bne.n	8006bf6 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	00db      	lsls	r3, r3, #3
 8006bee:	4a17      	ldr	r2, [pc, #92]	; (8006c4c <vQueueAddToRegistry+0xa8>)
 8006bf0:	4413      	add	r3, r2
 8006bf2:	613b      	str	r3, [r7, #16]
                    break;
 8006bf4:	e013      	b.n	8006c1e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10a      	bne.n	8006c12 <vQueueAddToRegistry+0x6e>
 8006bfc:	4a13      	ldr	r2, [pc, #76]	; (8006c4c <vQueueAddToRegistry+0xa8>)
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d104      	bne.n	8006c12 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	00db      	lsls	r3, r3, #3
 8006c0c:	4a0f      	ldr	r2, [pc, #60]	; (8006c4c <vQueueAddToRegistry+0xa8>)
 8006c0e:	4413      	add	r3, r2
 8006c10:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	3301      	adds	r3, #1
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	2b07      	cmp	r3, #7
 8006c1c:	d9dd      	bls.n	8006bda <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00f      	beq.n	8006c44 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f003 fbce 	bl	800a3d4 <SEGGER_SYSVIEW_ShrinkId>
 8006c38:	4601      	mov	r1, r0
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	2071      	movs	r0, #113	; 0x71
 8006c40:	f002 fe42 	bl	80098c8 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8006c44:	bf00      	nop
 8006c46:	3718      	adds	r7, #24
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	20000730 	.word	0x20000730

08006c50 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006c60:	f001 fc22 	bl	80084a8 <vPortEnterCritical>
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c6a:	b25b      	sxtb	r3, r3
 8006c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c70:	d103      	bne.n	8006c7a <vQueueWaitForMessageRestricted+0x2a>
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c80:	b25b      	sxtb	r3, r3
 8006c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c86:	d103      	bne.n	8006c90 <vQueueWaitForMessageRestricted+0x40>
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c90:	f001 fc3a 	bl	8008508 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d106      	bne.n	8006caa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	3324      	adds	r3, #36	; 0x24
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	68b9      	ldr	r1, [r7, #8]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 fcc9 	bl	800763c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8006caa:	6978      	ldr	r0, [r7, #20]
 8006cac:	f7ff ff12 	bl	8006ad4 <prvUnlockQueue>
    }
 8006cb0:	bf00      	nop
 8006cb2:	3718      	adds	r7, #24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b08c      	sub	sp, #48	; 0x30
 8006cbc:	af04      	add	r7, sp, #16
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	603b      	str	r3, [r7, #0]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006cc8:	88fb      	ldrh	r3, [r7, #6]
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f001 fd15 	bl	80086fc <pvPortMalloc>
 8006cd2:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d013      	beq.n	8006d02 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006cda:	2058      	movs	r0, #88	; 0x58
 8006cdc:	f001 fd0e 	bl	80086fc <pvPortMalloc>
 8006ce0:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d008      	beq.n	8006cfa <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8006ce8:	2258      	movs	r2, #88	; 0x58
 8006cea:	2100      	movs	r1, #0
 8006cec:	69f8      	ldr	r0, [r7, #28]
 8006cee:	f004 fa46 	bl	800b17e <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	631a      	str	r2, [r3, #48]	; 0x30
 8006cf8:	e005      	b.n	8006d06 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8006cfa:	6978      	ldr	r0, [r7, #20]
 8006cfc:	f001 fdb8 	bl	8008870 <vPortFree>
 8006d00:	e001      	b.n	8006d06 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8006d02:	2300      	movs	r3, #0
 8006d04:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d013      	beq.n	8006d34 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006d0c:	88fa      	ldrh	r2, [r7, #6]
 8006d0e:	2300      	movs	r3, #0
 8006d10:	9303      	str	r3, [sp, #12]
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	9302      	str	r3, [sp, #8]
 8006d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d18:	9301      	str	r3, [sp, #4]
 8006d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	68b9      	ldr	r1, [r7, #8]
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f000 f80e 	bl	8006d44 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006d28:	69f8      	ldr	r0, [r7, #28]
 8006d2a:	f000 f899 	bl	8006e60 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	61bb      	str	r3, [r7, #24]
 8006d32:	e002      	b.n	8006d3a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d34:	f04f 33ff 	mov.w	r3, #4294967295
 8006d38:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8006d3a:	69bb      	ldr	r3, [r7, #24]
    }
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3720      	adds	r7, #32
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b088      	sub	sp, #32
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
 8006d50:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d54:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	21a5      	movs	r1, #165	; 0xa5
 8006d5e:	f004 fa0e 	bl	800b17e <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	f023 0307 	bic.w	r3, r3, #7
 8006d7a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	f003 0307 	and.w	r3, r3, #7
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00a      	beq.n	8006d9c <prvInitialiseNewTask+0x58>
        __asm volatile
 8006d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	617b      	str	r3, [r7, #20]
    }
 8006d98:	bf00      	nop
 8006d9a:	e7fe      	b.n	8006d9a <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d01e      	beq.n	8006de0 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006da2:	2300      	movs	r3, #0
 8006da4:	61fb      	str	r3, [r7, #28]
 8006da6:	e012      	b.n	8006dce <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	4413      	add	r3, r2
 8006dae:	7819      	ldrb	r1, [r3, #0]
 8006db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	4413      	add	r3, r2
 8006db6:	3334      	adds	r3, #52	; 0x34
 8006db8:	460a      	mov	r2, r1
 8006dba:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d006      	beq.n	8006dd6 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	61fb      	str	r3, [r7, #28]
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	2b09      	cmp	r3, #9
 8006dd2:	d9e9      	bls.n	8006da8 <prvInitialiseNewTask+0x64>
 8006dd4:	e000      	b.n	8006dd8 <prvInitialiseNewTask+0x94>
            {
                break;
 8006dd6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8006de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de2:	2b04      	cmp	r3, #4
 8006de4:	d90a      	bls.n	8006dfc <prvInitialiseNewTask+0xb8>
        __asm volatile
 8006de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dea:	f383 8811 	msr	BASEPRI, r3
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	613b      	str	r3, [r7, #16]
    }
 8006df8:	bf00      	nop
 8006dfa:	e7fe      	b.n	8006dfa <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	d901      	bls.n	8006e06 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e02:	2304      	movs	r3, #4
 8006e04:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e0a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e10:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e14:	3304      	adds	r3, #4
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7ff fbae 	bl	8006578 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1e:	3318      	adds	r3, #24
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7ff fba9 	bl	8006578 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e2a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2e:	f1c3 0205 	rsb	r2, r3, #5
 8006e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e34:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e3a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	68f9      	ldr	r1, [r7, #12]
 8006e40:	69b8      	ldr	r0, [r7, #24]
 8006e42:	f001 fa01 	bl	8008248 <pxPortInitialiseStack>
 8006e46:	4602      	mov	r2, r0
 8006e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8006e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d002      	beq.n	8006e58 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e56:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006e58:	bf00      	nop
 8006e5a:	3720      	adds	r7, #32
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006e60:	b5b0      	push	{r4, r5, r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af02      	add	r7, sp, #8
 8006e66:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8006e68:	f001 fb1e 	bl	80084a8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8006e6c:	4b4f      	ldr	r3, [pc, #316]	; (8006fac <prvAddNewTaskToReadyList+0x14c>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3301      	adds	r3, #1
 8006e72:	4a4e      	ldr	r2, [pc, #312]	; (8006fac <prvAddNewTaskToReadyList+0x14c>)
 8006e74:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8006e76:	4b4e      	ldr	r3, [pc, #312]	; (8006fb0 <prvAddNewTaskToReadyList+0x150>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d109      	bne.n	8006e92 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8006e7e:	4a4c      	ldr	r2, [pc, #304]	; (8006fb0 <prvAddNewTaskToReadyList+0x150>)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e84:	4b49      	ldr	r3, [pc, #292]	; (8006fac <prvAddNewTaskToReadyList+0x14c>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d110      	bne.n	8006eae <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006e8c:	f000 fd98 	bl	80079c0 <prvInitialiseTaskLists>
 8006e90:	e00d      	b.n	8006eae <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8006e92:	4b48      	ldr	r3, [pc, #288]	; (8006fb4 <prvAddNewTaskToReadyList+0x154>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d109      	bne.n	8006eae <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e9a:	4b45      	ldr	r3, [pc, #276]	; (8006fb0 <prvAddNewTaskToReadyList+0x150>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d802      	bhi.n	8006eae <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006ea8:	4a41      	ldr	r2, [pc, #260]	; (8006fb0 <prvAddNewTaskToReadyList+0x150>)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8006eae:	4b42      	ldr	r3, [pc, #264]	; (8006fb8 <prvAddNewTaskToReadyList+0x158>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	4a40      	ldr	r2, [pc, #256]	; (8006fb8 <prvAddNewTaskToReadyList+0x158>)
 8006eb6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006eb8:	4b3f      	ldr	r3, [pc, #252]	; (8006fb8 <prvAddNewTaskToReadyList+0x158>)
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d016      	beq.n	8006ef4 <prvAddNewTaskToReadyList+0x94>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f003 f9bd 	bl	800a248 <SEGGER_SYSVIEW_OnTaskCreate>
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ede:	461d      	mov	r5, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	461c      	mov	r4, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eea:	1ae3      	subs	r3, r4, r3
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	462b      	mov	r3, r5
 8006ef0:	f001 fe80 	bl	8008bf4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f003 fa2a 	bl	800a350 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f00:	2201      	movs	r2, #1
 8006f02:	409a      	lsls	r2, r3
 8006f04:	4b2d      	ldr	r3, [pc, #180]	; (8006fbc <prvAddNewTaskToReadyList+0x15c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	4a2c      	ldr	r2, [pc, #176]	; (8006fbc <prvAddNewTaskToReadyList+0x15c>)
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f12:	492b      	ldr	r1, [pc, #172]	; (8006fc0 <prvAddNewTaskToReadyList+0x160>)
 8006f14:	4613      	mov	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	440b      	add	r3, r1
 8006f1e:	3304      	adds	r3, #4
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	609a      	str	r2, [r3, #8]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	689a      	ldr	r2, [r3, #8]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	60da      	str	r2, [r3, #12]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	3204      	adds	r2, #4
 8006f3a:	605a      	str	r2, [r3, #4]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	1d1a      	adds	r2, r3, #4
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	609a      	str	r2, [r3, #8]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f48:	4613      	mov	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4413      	add	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4a1b      	ldr	r2, [pc, #108]	; (8006fc0 <prvAddNewTaskToReadyList+0x160>)
 8006f52:	441a      	add	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	615a      	str	r2, [r3, #20]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f5c:	4918      	ldr	r1, [pc, #96]	; (8006fc0 <prvAddNewTaskToReadyList+0x160>)
 8006f5e:	4613      	mov	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	440b      	add	r3, r1
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	1c59      	adds	r1, r3, #1
 8006f6c:	4814      	ldr	r0, [pc, #80]	; (8006fc0 <prvAddNewTaskToReadyList+0x160>)
 8006f6e:	4613      	mov	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4403      	add	r3, r0
 8006f78:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8006f7a:	f001 fac5 	bl	8008508 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8006f7e:	4b0d      	ldr	r3, [pc, #52]	; (8006fb4 <prvAddNewTaskToReadyList+0x154>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00e      	beq.n	8006fa4 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f86:	4b0a      	ldr	r3, [pc, #40]	; (8006fb0 <prvAddNewTaskToReadyList+0x150>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d207      	bcs.n	8006fa4 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8006f94:	4b0b      	ldr	r3, [pc, #44]	; (8006fc4 <prvAddNewTaskToReadyList+0x164>)
 8006f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006fa4:	bf00      	nop
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bdb0      	pop	{r4, r5, r7, pc}
 8006fac:	20000848 	.word	0x20000848
 8006fb0:	20000770 	.word	0x20000770
 8006fb4:	20000854 	.word	0x20000854
 8006fb8:	20000864 	.word	0x20000864
 8006fbc:	20000850 	.word	0x20000850
 8006fc0:	20000774 	.word	0x20000774
 8006fc4:	e000ed04 	.word	0xe000ed04

08006fc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8006fce:	4b27      	ldr	r3, [pc, #156]	; (800706c <vTaskStartScheduler+0xa4>)
 8006fd0:	9301      	str	r3, [sp, #4]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	2282      	movs	r2, #130	; 0x82
 8006fda:	4925      	ldr	r1, [pc, #148]	; (8007070 <vTaskStartScheduler+0xa8>)
 8006fdc:	4825      	ldr	r0, [pc, #148]	; (8007074 <vTaskStartScheduler+0xac>)
 8006fde:	f7ff fe6b 	bl	8006cb8 <xTaskCreate>
 8006fe2:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d102      	bne.n	8006ff0 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8006fea:	f000 fea9 	bl	8007d40 <xTimerCreateTimerTask>
 8006fee:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d124      	bne.n	8007040 <vTaskStartScheduler+0x78>
        __asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	60bb      	str	r3, [r7, #8]
    }
 8007008:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800700a:	4b1b      	ldr	r3, [pc, #108]	; (8007078 <vTaskStartScheduler+0xb0>)
 800700c:	f04f 32ff 	mov.w	r2, #4294967295
 8007010:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8007012:	4b1a      	ldr	r3, [pc, #104]	; (800707c <vTaskStartScheduler+0xb4>)
 8007014:	2201      	movs	r2, #1
 8007016:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007018:	4b19      	ldr	r3, [pc, #100]	; (8007080 <vTaskStartScheduler+0xb8>)
 800701a:	2200      	movs	r2, #0
 800701c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800701e:	4b19      	ldr	r3, [pc, #100]	; (8007084 <vTaskStartScheduler+0xbc>)
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	4b12      	ldr	r3, [pc, #72]	; (800706c <vTaskStartScheduler+0xa4>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	429a      	cmp	r2, r3
 8007028:	d102      	bne.n	8007030 <vTaskStartScheduler+0x68>
 800702a:	f003 f8f1 	bl	800a210 <SEGGER_SYSVIEW_OnIdle>
 800702e:	e004      	b.n	800703a <vTaskStartScheduler+0x72>
 8007030:	4b14      	ldr	r3, [pc, #80]	; (8007084 <vTaskStartScheduler+0xbc>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4618      	mov	r0, r3
 8007036:	f003 f949 	bl	800a2cc <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800703a:	f001 f993 	bl	8008364 <xPortStartScheduler>
 800703e:	e00e      	b.n	800705e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007046:	d10a      	bne.n	800705e <vTaskStartScheduler+0x96>
        __asm volatile
 8007048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704c:	f383 8811 	msr	BASEPRI, r3
 8007050:	f3bf 8f6f 	isb	sy
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	607b      	str	r3, [r7, #4]
    }
 800705a:	bf00      	nop
 800705c:	e7fe      	b.n	800705c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800705e:	4b0a      	ldr	r3, [pc, #40]	; (8007088 <vTaskStartScheduler+0xc0>)
 8007060:	681b      	ldr	r3, [r3, #0]
}
 8007062:	bf00      	nop
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	2000086c 	.word	0x2000086c
 8007070:	0800d150 	.word	0x0800d150
 8007074:	0800798d 	.word	0x0800798d
 8007078:	20000868 	.word	0x20000868
 800707c:	20000854 	.word	0x20000854
 8007080:	2000084c 	.word	0x2000084c
 8007084:	20000770 	.word	0x20000770
 8007088:	2000000c 	.word	0x2000000c

0800708c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800708c:	b480      	push	{r7}
 800708e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8007090:	4b04      	ldr	r3, [pc, #16]	; (80070a4 <vTaskSuspendAll+0x18>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	3301      	adds	r3, #1
 8007096:	4a03      	ldr	r2, [pc, #12]	; (80070a4 <vTaskSuspendAll+0x18>)
 8007098:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800709a:	bf00      	nop
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	20000870 	.word	0x20000870

080070a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b088      	sub	sp, #32
 80070ac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80070ae:	2300      	movs	r3, #0
 80070b0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80070b2:	2300      	movs	r3, #0
 80070b4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80070b6:	4b73      	ldr	r3, [pc, #460]	; (8007284 <xTaskResumeAll+0x1dc>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10a      	bne.n	80070d4 <xTaskResumeAll+0x2c>
        __asm volatile
 80070be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	607b      	str	r3, [r7, #4]
    }
 80070d0:	bf00      	nop
 80070d2:	e7fe      	b.n	80070d2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80070d4:	f001 f9e8 	bl	80084a8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80070d8:	4b6a      	ldr	r3, [pc, #424]	; (8007284 <xTaskResumeAll+0x1dc>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	3b01      	subs	r3, #1
 80070de:	4a69      	ldr	r2, [pc, #420]	; (8007284 <xTaskResumeAll+0x1dc>)
 80070e0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070e2:	4b68      	ldr	r3, [pc, #416]	; (8007284 <xTaskResumeAll+0x1dc>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f040 80c4 	bne.w	8007274 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80070ec:	4b66      	ldr	r3, [pc, #408]	; (8007288 <xTaskResumeAll+0x1e0>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 80bf 	beq.w	8007274 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070f6:	e08e      	b.n	8007216 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070f8:	4b64      	ldr	r3, [pc, #400]	; (800728c <xTaskResumeAll+0x1e4>)
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007104:	613b      	str	r3, [r7, #16]
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	69fa      	ldr	r2, [r7, #28]
 800710c:	6a12      	ldr	r2, [r2, #32]
 800710e:	609a      	str	r2, [r3, #8]
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	6a1b      	ldr	r3, [r3, #32]
 8007114:	69fa      	ldr	r2, [r7, #28]
 8007116:	69d2      	ldr	r2, [r2, #28]
 8007118:	605a      	str	r2, [r3, #4]
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	3318      	adds	r3, #24
 8007122:	429a      	cmp	r2, r3
 8007124:	d103      	bne.n	800712e <xTaskResumeAll+0x86>
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	6a1a      	ldr	r2, [r3, #32]
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	605a      	str	r2, [r3, #4]
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	2200      	movs	r2, #0
 8007132:	629a      	str	r2, [r3, #40]	; 0x28
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	1e5a      	subs	r2, r3, #1
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	69fa      	ldr	r2, [r7, #28]
 800714a:	68d2      	ldr	r2, [r2, #12]
 800714c:	609a      	str	r2, [r3, #8]
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	69fa      	ldr	r2, [r7, #28]
 8007154:	6892      	ldr	r2, [r2, #8]
 8007156:	605a      	str	r2, [r3, #4]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	3304      	adds	r3, #4
 8007160:	429a      	cmp	r2, r3
 8007162:	d103      	bne.n	800716c <xTaskResumeAll+0xc4>
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	605a      	str	r2, [r3, #4]
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	2200      	movs	r2, #0
 8007170:	615a      	str	r2, [r3, #20]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	1e5a      	subs	r2, r3, #1
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	4618      	mov	r0, r3
 8007180:	f003 f8e6 	bl	800a350 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007188:	2201      	movs	r2, #1
 800718a:	409a      	lsls	r2, r3
 800718c:	4b40      	ldr	r3, [pc, #256]	; (8007290 <xTaskResumeAll+0x1e8>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4313      	orrs	r3, r2
 8007192:	4a3f      	ldr	r2, [pc, #252]	; (8007290 <xTaskResumeAll+0x1e8>)
 8007194:	6013      	str	r3, [r2, #0]
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719a:	493e      	ldr	r1, [pc, #248]	; (8007294 <xTaskResumeAll+0x1ec>)
 800719c:	4613      	mov	r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	440b      	add	r3, r1
 80071a6:	3304      	adds	r3, #4
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	60bb      	str	r3, [r7, #8]
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	609a      	str	r2, [r3, #8]
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	689a      	ldr	r2, [r3, #8]
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	60da      	str	r2, [r3, #12]
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	69fa      	ldr	r2, [r7, #28]
 80071c0:	3204      	adds	r2, #4
 80071c2:	605a      	str	r2, [r3, #4]
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	1d1a      	adds	r2, r3, #4
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	609a      	str	r2, [r3, #8]
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d0:	4613      	mov	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4a2e      	ldr	r2, [pc, #184]	; (8007294 <xTaskResumeAll+0x1ec>)
 80071da:	441a      	add	r2, r3
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	615a      	str	r2, [r3, #20]
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e4:	492b      	ldr	r1, [pc, #172]	; (8007294 <xTaskResumeAll+0x1ec>)
 80071e6:	4613      	mov	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	440b      	add	r3, r1
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	1c59      	adds	r1, r3, #1
 80071f4:	4827      	ldr	r0, [pc, #156]	; (8007294 <xTaskResumeAll+0x1ec>)
 80071f6:	4613      	mov	r3, r2
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	4413      	add	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4403      	add	r3, r0
 8007200:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007206:	4b24      	ldr	r3, [pc, #144]	; (8007298 <xTaskResumeAll+0x1f0>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720c:	429a      	cmp	r2, r3
 800720e:	d302      	bcc.n	8007216 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8007210:	4b22      	ldr	r3, [pc, #136]	; (800729c <xTaskResumeAll+0x1f4>)
 8007212:	2201      	movs	r2, #1
 8007214:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007216:	4b1d      	ldr	r3, [pc, #116]	; (800728c <xTaskResumeAll+0x1e4>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	f47f af6c 	bne.w	80070f8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8007226:	f000 fc49 	bl	8007abc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800722a:	4b1d      	ldr	r3, [pc, #116]	; (80072a0 <xTaskResumeAll+0x1f8>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d010      	beq.n	8007258 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8007236:	f000 f859 	bl	80072ec <xTaskIncrementTick>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d002      	beq.n	8007246 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8007240:	4b16      	ldr	r3, [pc, #88]	; (800729c <xTaskResumeAll+0x1f4>)
 8007242:	2201      	movs	r2, #1
 8007244:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	3b01      	subs	r3, #1
 800724a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1f1      	bne.n	8007236 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8007252:	4b13      	ldr	r3, [pc, #76]	; (80072a0 <xTaskResumeAll+0x1f8>)
 8007254:	2200      	movs	r2, #0
 8007256:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8007258:	4b10      	ldr	r3, [pc, #64]	; (800729c <xTaskResumeAll+0x1f4>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d009      	beq.n	8007274 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8007260:	2301      	movs	r3, #1
 8007262:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8007264:	4b0f      	ldr	r3, [pc, #60]	; (80072a4 <xTaskResumeAll+0x1fc>)
 8007266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8007274:	f001 f948 	bl	8008508 <vPortExitCritical>

    return xAlreadyYielded;
 8007278:	69bb      	ldr	r3, [r7, #24]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3720      	adds	r7, #32
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	20000870 	.word	0x20000870
 8007288:	20000848 	.word	0x20000848
 800728c:	20000808 	.word	0x20000808
 8007290:	20000850 	.word	0x20000850
 8007294:	20000774 	.word	0x20000774
 8007298:	20000770 	.word	0x20000770
 800729c:	2000085c 	.word	0x2000085c
 80072a0:	20000858 	.word	0x20000858
 80072a4:	e000ed04 	.word	0xe000ed04

080072a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80072ae:	4b05      	ldr	r3, [pc, #20]	; (80072c4 <xTaskGetTickCount+0x1c>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80072b4:	687b      	ldr	r3, [r7, #4]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	370c      	adds	r7, #12
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	2000084c 	.word	0x2000084c

080072c8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072ce:	f001 f9d5 	bl	800867c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80072d2:	2300      	movs	r3, #0
 80072d4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80072d6:	4b04      	ldr	r3, [pc, #16]	; (80072e8 <xTaskGetTickCountFromISR+0x20>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80072dc:	683b      	ldr	r3, [r7, #0]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	2000084c 	.word	0x2000084c

080072ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08a      	sub	sp, #40	; 0x28
 80072f0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80072f2:	2300      	movs	r3, #0
 80072f4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072f6:	4b7f      	ldr	r3, [pc, #508]	; (80074f4 <xTaskIncrementTick+0x208>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f040 80f0 	bne.w	80074e0 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007300:	4b7d      	ldr	r3, [pc, #500]	; (80074f8 <xTaskIncrementTick+0x20c>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3301      	adds	r3, #1
 8007306:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007308:	4a7b      	ldr	r2, [pc, #492]	; (80074f8 <xTaskIncrementTick+0x20c>)
 800730a:	6a3b      	ldr	r3, [r7, #32]
 800730c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d120      	bne.n	8007356 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8007314:	4b79      	ldr	r3, [pc, #484]	; (80074fc <xTaskIncrementTick+0x210>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00a      	beq.n	8007334 <xTaskIncrementTick+0x48>
        __asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	607b      	str	r3, [r7, #4]
    }
 8007330:	bf00      	nop
 8007332:	e7fe      	b.n	8007332 <xTaskIncrementTick+0x46>
 8007334:	4b71      	ldr	r3, [pc, #452]	; (80074fc <xTaskIncrementTick+0x210>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	61fb      	str	r3, [r7, #28]
 800733a:	4b71      	ldr	r3, [pc, #452]	; (8007500 <xTaskIncrementTick+0x214>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a6f      	ldr	r2, [pc, #444]	; (80074fc <xTaskIncrementTick+0x210>)
 8007340:	6013      	str	r3, [r2, #0]
 8007342:	4a6f      	ldr	r2, [pc, #444]	; (8007500 <xTaskIncrementTick+0x214>)
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	6013      	str	r3, [r2, #0]
 8007348:	4b6e      	ldr	r3, [pc, #440]	; (8007504 <xTaskIncrementTick+0x218>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	3301      	adds	r3, #1
 800734e:	4a6d      	ldr	r2, [pc, #436]	; (8007504 <xTaskIncrementTick+0x218>)
 8007350:	6013      	str	r3, [r2, #0]
 8007352:	f000 fbb3 	bl	8007abc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8007356:	4b6c      	ldr	r3, [pc, #432]	; (8007508 <xTaskIncrementTick+0x21c>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6a3a      	ldr	r2, [r7, #32]
 800735c:	429a      	cmp	r2, r3
 800735e:	f0c0 80aa 	bcc.w	80074b6 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007362:	4b66      	ldr	r3, [pc, #408]	; (80074fc <xTaskIncrementTick+0x210>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d104      	bne.n	8007376 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800736c:	4b66      	ldr	r3, [pc, #408]	; (8007508 <xTaskIncrementTick+0x21c>)
 800736e:	f04f 32ff 	mov.w	r2, #4294967295
 8007372:	601a      	str	r2, [r3, #0]
                    break;
 8007374:	e09f      	b.n	80074b6 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007376:	4b61      	ldr	r3, [pc, #388]	; (80074fc <xTaskIncrementTick+0x210>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8007386:	6a3a      	ldr	r2, [r7, #32]
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	429a      	cmp	r2, r3
 800738c:	d203      	bcs.n	8007396 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800738e:	4a5e      	ldr	r2, [pc, #376]	; (8007508 <xTaskIncrementTick+0x21c>)
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8007394:	e08f      	b.n	80074b6 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	613b      	str	r3, [r7, #16]
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	68d2      	ldr	r2, [r2, #12]
 80073a4:	609a      	str	r2, [r3, #8]
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	69ba      	ldr	r2, [r7, #24]
 80073ac:	6892      	ldr	r2, [r2, #8]
 80073ae:	605a      	str	r2, [r3, #4]
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	3304      	adds	r3, #4
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d103      	bne.n	80073c4 <xTaskIncrementTick+0xd8>
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	68da      	ldr	r2, [r3, #12]
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	605a      	str	r2, [r3, #4]
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	2200      	movs	r2, #0
 80073c8:	615a      	str	r2, [r3, #20]
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	1e5a      	subs	r2, r3, #1
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d01e      	beq.n	800741a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e0:	60fb      	str	r3, [r7, #12]
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	69ba      	ldr	r2, [r7, #24]
 80073e8:	6a12      	ldr	r2, [r2, #32]
 80073ea:	609a      	str	r2, [r3, #8]
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	69ba      	ldr	r2, [r7, #24]
 80073f2:	69d2      	ldr	r2, [r2, #28]
 80073f4:	605a      	str	r2, [r3, #4]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	685a      	ldr	r2, [r3, #4]
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	3318      	adds	r3, #24
 80073fe:	429a      	cmp	r2, r3
 8007400:	d103      	bne.n	800740a <xTaskIncrementTick+0x11e>
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	6a1a      	ldr	r2, [r3, #32]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	605a      	str	r2, [r3, #4]
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	2200      	movs	r2, #0
 800740e:	629a      	str	r2, [r3, #40]	; 0x28
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	1e5a      	subs	r2, r3, #1
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	4618      	mov	r0, r3
 800741e:	f002 ff97 	bl	800a350 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007426:	2201      	movs	r2, #1
 8007428:	409a      	lsls	r2, r3
 800742a:	4b38      	ldr	r3, [pc, #224]	; (800750c <xTaskIncrementTick+0x220>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4313      	orrs	r3, r2
 8007430:	4a36      	ldr	r2, [pc, #216]	; (800750c <xTaskIncrementTick+0x220>)
 8007432:	6013      	str	r3, [r2, #0]
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007438:	4935      	ldr	r1, [pc, #212]	; (8007510 <xTaskIncrementTick+0x224>)
 800743a:	4613      	mov	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	440b      	add	r3, r1
 8007444:	3304      	adds	r3, #4
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	60bb      	str	r3, [r7, #8]
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	609a      	str	r2, [r3, #8]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	689a      	ldr	r2, [r3, #8]
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	60da      	str	r2, [r3, #12]
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	3204      	adds	r2, #4
 8007460:	605a      	str	r2, [r3, #4]
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	1d1a      	adds	r2, r3, #4
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	609a      	str	r2, [r3, #8]
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746e:	4613      	mov	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4a26      	ldr	r2, [pc, #152]	; (8007510 <xTaskIncrementTick+0x224>)
 8007478:	441a      	add	r2, r3
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	615a      	str	r2, [r3, #20]
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007482:	4923      	ldr	r1, [pc, #140]	; (8007510 <xTaskIncrementTick+0x224>)
 8007484:	4613      	mov	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	440b      	add	r3, r1
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	1c59      	adds	r1, r3, #1
 8007492:	481f      	ldr	r0, [pc, #124]	; (8007510 <xTaskIncrementTick+0x224>)
 8007494:	4613      	mov	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4403      	add	r3, r0
 800749e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a4:	4b1b      	ldr	r3, [pc, #108]	; (8007514 <xTaskIncrementTick+0x228>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074aa:	429a      	cmp	r2, r3
 80074ac:	f67f af59 	bls.w	8007362 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80074b0:	2301      	movs	r3, #1
 80074b2:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074b4:	e755      	b.n	8007362 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80074b6:	4b17      	ldr	r3, [pc, #92]	; (8007514 <xTaskIncrementTick+0x228>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074bc:	4914      	ldr	r1, [pc, #80]	; (8007510 <xTaskIncrementTick+0x224>)
 80074be:	4613      	mov	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	440b      	add	r3, r1
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d901      	bls.n	80074d2 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 80074ce:	2301      	movs	r3, #1
 80074d0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80074d2:	4b11      	ldr	r3, [pc, #68]	; (8007518 <xTaskIncrementTick+0x22c>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d007      	beq.n	80074ea <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 80074da:	2301      	movs	r3, #1
 80074dc:	627b      	str	r3, [r7, #36]	; 0x24
 80074de:	e004      	b.n	80074ea <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80074e0:	4b0e      	ldr	r3, [pc, #56]	; (800751c <xTaskIncrementTick+0x230>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3301      	adds	r3, #1
 80074e6:	4a0d      	ldr	r2, [pc, #52]	; (800751c <xTaskIncrementTick+0x230>)
 80074e8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80074ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3728      	adds	r7, #40	; 0x28
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	20000870 	.word	0x20000870
 80074f8:	2000084c 	.word	0x2000084c
 80074fc:	20000800 	.word	0x20000800
 8007500:	20000804 	.word	0x20000804
 8007504:	20000860 	.word	0x20000860
 8007508:	20000868 	.word	0x20000868
 800750c:	20000850 	.word	0x20000850
 8007510:	20000774 	.word	0x20000774
 8007514:	20000770 	.word	0x20000770
 8007518:	2000085c 	.word	0x2000085c
 800751c:	20000858 	.word	0x20000858

08007520 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007526:	4b2d      	ldr	r3, [pc, #180]	; (80075dc <vTaskSwitchContext+0xbc>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d003      	beq.n	8007536 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800752e:	4b2c      	ldr	r3, [pc, #176]	; (80075e0 <vTaskSwitchContext+0xc0>)
 8007530:	2201      	movs	r2, #1
 8007532:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8007534:	e04d      	b.n	80075d2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8007536:	4b2a      	ldr	r3, [pc, #168]	; (80075e0 <vTaskSwitchContext+0xc0>)
 8007538:	2200      	movs	r2, #0
 800753a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800753c:	4b29      	ldr	r3, [pc, #164]	; (80075e4 <vTaskSwitchContext+0xc4>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	fab3 f383 	clz	r3, r3
 8007548:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800754a:	7afb      	ldrb	r3, [r7, #11]
 800754c:	f1c3 031f 	rsb	r3, r3, #31
 8007550:	617b      	str	r3, [r7, #20]
 8007552:	4925      	ldr	r1, [pc, #148]	; (80075e8 <vTaskSwitchContext+0xc8>)
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	4613      	mov	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	440b      	add	r3, r1
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10a      	bne.n	800757c <vTaskSwitchContext+0x5c>
        __asm volatile
 8007566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756a:	f383 8811 	msr	BASEPRI, r3
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	607b      	str	r3, [r7, #4]
    }
 8007578:	bf00      	nop
 800757a:	e7fe      	b.n	800757a <vTaskSwitchContext+0x5a>
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	4613      	mov	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4a18      	ldr	r2, [pc, #96]	; (80075e8 <vTaskSwitchContext+0xc8>)
 8007588:	4413      	add	r3, r2
 800758a:	613b      	str	r3, [r7, #16]
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	685a      	ldr	r2, [r3, #4]
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	605a      	str	r2, [r3, #4]
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	685a      	ldr	r2, [r3, #4]
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	3308      	adds	r3, #8
 800759e:	429a      	cmp	r2, r3
 80075a0:	d104      	bne.n	80075ac <vTaskSwitchContext+0x8c>
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	685a      	ldr	r2, [r3, #4]
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	605a      	str	r2, [r3, #4]
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	4a0e      	ldr	r2, [pc, #56]	; (80075ec <vTaskSwitchContext+0xcc>)
 80075b4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80075b6:	4b0d      	ldr	r3, [pc, #52]	; (80075ec <vTaskSwitchContext+0xcc>)
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	4b0d      	ldr	r3, [pc, #52]	; (80075f0 <vTaskSwitchContext+0xd0>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d102      	bne.n	80075c8 <vTaskSwitchContext+0xa8>
 80075c2:	f002 fe25 	bl	800a210 <SEGGER_SYSVIEW_OnIdle>
}
 80075c6:	e004      	b.n	80075d2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80075c8:	4b08      	ldr	r3, [pc, #32]	; (80075ec <vTaskSwitchContext+0xcc>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f002 fe7d 	bl	800a2cc <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80075d2:	bf00      	nop
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	20000870 	.word	0x20000870
 80075e0:	2000085c 	.word	0x2000085c
 80075e4:	20000850 	.word	0x20000850
 80075e8:	20000774 	.word	0x20000774
 80075ec:	20000770 	.word	0x20000770
 80075f0:	2000086c 	.word	0x2000086c

080075f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10a      	bne.n	800761a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	60fb      	str	r3, [r7, #12]
    }
 8007616:	bf00      	nop
 8007618:	e7fe      	b.n	8007618 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800761a:	4b07      	ldr	r3, [pc, #28]	; (8007638 <vTaskPlaceOnEventList+0x44>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3318      	adds	r3, #24
 8007620:	4619      	mov	r1, r3
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7fe ffb5 	bl	8006592 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007628:	2101      	movs	r1, #1
 800762a:	6838      	ldr	r0, [r7, #0]
 800762c:	f000 fb08 	bl	8007c40 <prvAddCurrentTaskToDelayedList>
}
 8007630:	bf00      	nop
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	20000770 	.word	0x20000770

0800763c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800763c:	b580      	push	{r7, lr}
 800763e:	b086      	sub	sp, #24
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10a      	bne.n	8007664 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800764e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	613b      	str	r3, [r7, #16]
    }
 8007660:	bf00      	nop
 8007662:	e7fe      	b.n	8007662 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	617b      	str	r3, [r7, #20]
 800766a:	4b17      	ldr	r3, [pc, #92]	; (80076c8 <vTaskPlaceOnEventListRestricted+0x8c>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	61da      	str	r2, [r3, #28]
 8007672:	4b15      	ldr	r3, [pc, #84]	; (80076c8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	6892      	ldr	r2, [r2, #8]
 800767a:	621a      	str	r2, [r3, #32]
 800767c:	4b12      	ldr	r3, [pc, #72]	; (80076c8 <vTaskPlaceOnEventListRestricted+0x8c>)
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	3218      	adds	r2, #24
 8007686:	605a      	str	r2, [r3, #4]
 8007688:	4b0f      	ldr	r3, [pc, #60]	; (80076c8 <vTaskPlaceOnEventListRestricted+0x8c>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f103 0218 	add.w	r2, r3, #24
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	609a      	str	r2, [r3, #8]
 8007694:	4b0c      	ldr	r3, [pc, #48]	; (80076c8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	629a      	str	r2, [r3, #40]	; 0x28
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	1c5a      	adds	r2, r3, #1
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d002      	beq.n	80076b2 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80076ac:	f04f 33ff 	mov.w	r3, #4294967295
 80076b0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80076b2:	2024      	movs	r0, #36	; 0x24
 80076b4:	f002 f8ae 	bl	8009814 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80076b8:	6879      	ldr	r1, [r7, #4]
 80076ba:	68b8      	ldr	r0, [r7, #8]
 80076bc:	f000 fac0 	bl	8007c40 <prvAddCurrentTaskToDelayedList>
    }
 80076c0:	bf00      	nop
 80076c2:	3718      	adds	r7, #24
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	20000770 	.word	0x20000770

080076cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08a      	sub	sp, #40	; 0x28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80076dc:	6a3b      	ldr	r3, [r7, #32]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10a      	bne.n	80076f8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80076e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	60fb      	str	r3, [r7, #12]
    }
 80076f4:	bf00      	nop
 80076f6:	e7fe      	b.n	80076f6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80076f8:	6a3b      	ldr	r3, [r7, #32]
 80076fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fc:	61fb      	str	r3, [r7, #28]
 80076fe:	6a3b      	ldr	r3, [r7, #32]
 8007700:	69db      	ldr	r3, [r3, #28]
 8007702:	6a3a      	ldr	r2, [r7, #32]
 8007704:	6a12      	ldr	r2, [r2, #32]
 8007706:	609a      	str	r2, [r3, #8]
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	6a1b      	ldr	r3, [r3, #32]
 800770c:	6a3a      	ldr	r2, [r7, #32]
 800770e:	69d2      	ldr	r2, [r2, #28]
 8007710:	605a      	str	r2, [r3, #4]
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	685a      	ldr	r2, [r3, #4]
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	3318      	adds	r3, #24
 800771a:	429a      	cmp	r2, r3
 800771c:	d103      	bne.n	8007726 <xTaskRemoveFromEventList+0x5a>
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	6a1a      	ldr	r2, [r3, #32]
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	605a      	str	r2, [r3, #4]
 8007726:	6a3b      	ldr	r3, [r7, #32]
 8007728:	2200      	movs	r2, #0
 800772a:	629a      	str	r2, [r3, #40]	; 0x28
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	1e5a      	subs	r2, r3, #1
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007736:	4b4b      	ldr	r3, [pc, #300]	; (8007864 <xTaskRemoveFromEventList+0x198>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d162      	bne.n	8007804 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800773e:	6a3b      	ldr	r3, [r7, #32]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	617b      	str	r3, [r7, #20]
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	6a3a      	ldr	r2, [r7, #32]
 800774a:	68d2      	ldr	r2, [r2, #12]
 800774c:	609a      	str	r2, [r3, #8]
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	6a3a      	ldr	r2, [r7, #32]
 8007754:	6892      	ldr	r2, [r2, #8]
 8007756:	605a      	str	r2, [r3, #4]
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	3304      	adds	r3, #4
 8007760:	429a      	cmp	r2, r3
 8007762:	d103      	bne.n	800776c <xTaskRemoveFromEventList+0xa0>
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	68da      	ldr	r2, [r3, #12]
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	605a      	str	r2, [r3, #4]
 800776c:	6a3b      	ldr	r3, [r7, #32]
 800776e:	2200      	movs	r2, #0
 8007770:	615a      	str	r2, [r3, #20]
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	1e5a      	subs	r2, r3, #1
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800777c:	6a3b      	ldr	r3, [r7, #32]
 800777e:	4618      	mov	r0, r3
 8007780:	f002 fde6 	bl	800a350 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007788:	2201      	movs	r2, #1
 800778a:	409a      	lsls	r2, r3
 800778c:	4b36      	ldr	r3, [pc, #216]	; (8007868 <xTaskRemoveFromEventList+0x19c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4313      	orrs	r3, r2
 8007792:	4a35      	ldr	r2, [pc, #212]	; (8007868 <xTaskRemoveFromEventList+0x19c>)
 8007794:	6013      	str	r3, [r2, #0]
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800779a:	4934      	ldr	r1, [pc, #208]	; (800786c <xTaskRemoveFromEventList+0x1a0>)
 800779c:	4613      	mov	r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	4413      	add	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	440b      	add	r3, r1
 80077a6:	3304      	adds	r3, #4
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	613b      	str	r3, [r7, #16]
 80077ac:	6a3b      	ldr	r3, [r7, #32]
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	609a      	str	r2, [r3, #8]
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	689a      	ldr	r2, [r3, #8]
 80077b6:	6a3b      	ldr	r3, [r7, #32]
 80077b8:	60da      	str	r2, [r3, #12]
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	6a3a      	ldr	r2, [r7, #32]
 80077c0:	3204      	adds	r2, #4
 80077c2:	605a      	str	r2, [r3, #4]
 80077c4:	6a3b      	ldr	r3, [r7, #32]
 80077c6:	1d1a      	adds	r2, r3, #4
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	609a      	str	r2, [r3, #8]
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d0:	4613      	mov	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4a24      	ldr	r2, [pc, #144]	; (800786c <xTaskRemoveFromEventList+0x1a0>)
 80077da:	441a      	add	r2, r3
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	615a      	str	r2, [r3, #20]
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e4:	4921      	ldr	r1, [pc, #132]	; (800786c <xTaskRemoveFromEventList+0x1a0>)
 80077e6:	4613      	mov	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4413      	add	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	440b      	add	r3, r1
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	1c59      	adds	r1, r3, #1
 80077f4:	481d      	ldr	r0, [pc, #116]	; (800786c <xTaskRemoveFromEventList+0x1a0>)
 80077f6:	4613      	mov	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4413      	add	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4403      	add	r3, r0
 8007800:	6019      	str	r1, [r3, #0]
 8007802:	e01b      	b.n	800783c <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007804:	4b1a      	ldr	r3, [pc, #104]	; (8007870 <xTaskRemoveFromEventList+0x1a4>)
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	61bb      	str	r3, [r7, #24]
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	69ba      	ldr	r2, [r7, #24]
 800780e:	61da      	str	r2, [r3, #28]
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	689a      	ldr	r2, [r3, #8]
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	621a      	str	r2, [r3, #32]
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	6a3a      	ldr	r2, [r7, #32]
 800781e:	3218      	adds	r2, #24
 8007820:	605a      	str	r2, [r3, #4]
 8007822:	6a3b      	ldr	r3, [r7, #32]
 8007824:	f103 0218 	add.w	r2, r3, #24
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	609a      	str	r2, [r3, #8]
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	4a10      	ldr	r2, [pc, #64]	; (8007870 <xTaskRemoveFromEventList+0x1a4>)
 8007830:	629a      	str	r2, [r3, #40]	; 0x28
 8007832:	4b0f      	ldr	r3, [pc, #60]	; (8007870 <xTaskRemoveFromEventList+0x1a4>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3301      	adds	r3, #1
 8007838:	4a0d      	ldr	r2, [pc, #52]	; (8007870 <xTaskRemoveFromEventList+0x1a4>)
 800783a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800783c:	6a3b      	ldr	r3, [r7, #32]
 800783e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007840:	4b0c      	ldr	r3, [pc, #48]	; (8007874 <xTaskRemoveFromEventList+0x1a8>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007846:	429a      	cmp	r2, r3
 8007848:	d905      	bls.n	8007856 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800784a:	2301      	movs	r3, #1
 800784c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800784e:	4b0a      	ldr	r3, [pc, #40]	; (8007878 <xTaskRemoveFromEventList+0x1ac>)
 8007850:	2201      	movs	r2, #1
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	e001      	b.n	800785a <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8007856:	2300      	movs	r3, #0
 8007858:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800785c:	4618      	mov	r0, r3
 800785e:	3728      	adds	r7, #40	; 0x28
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	20000870 	.word	0x20000870
 8007868:	20000850 	.word	0x20000850
 800786c:	20000774 	.word	0x20000774
 8007870:	20000808 	.word	0x20000808
 8007874:	20000770 	.word	0x20000770
 8007878:	2000085c 	.word	0x2000085c

0800787c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007884:	4b06      	ldr	r3, [pc, #24]	; (80078a0 <vTaskInternalSetTimeOutState+0x24>)
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800788c:	4b05      	ldr	r3, [pc, #20]	; (80078a4 <vTaskInternalSetTimeOutState+0x28>)
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	605a      	str	r2, [r3, #4]
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	20000860 	.word	0x20000860
 80078a4:	2000084c 	.word	0x2000084c

080078a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b088      	sub	sp, #32
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10a      	bne.n	80078ce <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80078b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	613b      	str	r3, [r7, #16]
    }
 80078ca:	bf00      	nop
 80078cc:	e7fe      	b.n	80078cc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10a      	bne.n	80078ea <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80078d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	60fb      	str	r3, [r7, #12]
    }
 80078e6:	bf00      	nop
 80078e8:	e7fe      	b.n	80078e8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80078ea:	f000 fddd 	bl	80084a8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80078ee:	4b1f      	ldr	r3, [pc, #124]	; (800796c <xTaskCheckForTimeOut+0xc4>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	69ba      	ldr	r2, [r7, #24]
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007906:	d102      	bne.n	800790e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8007908:	2300      	movs	r3, #0
 800790a:	61fb      	str	r3, [r7, #28]
 800790c:	e026      	b.n	800795c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	4b17      	ldr	r3, [pc, #92]	; (8007970 <xTaskCheckForTimeOut+0xc8>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	429a      	cmp	r2, r3
 8007918:	d00a      	beq.n	8007930 <xTaskCheckForTimeOut+0x88>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	69ba      	ldr	r2, [r7, #24]
 8007920:	429a      	cmp	r2, r3
 8007922:	d305      	bcc.n	8007930 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8007924:	2301      	movs	r3, #1
 8007926:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	2200      	movs	r2, #0
 800792c:	601a      	str	r2, [r3, #0]
 800792e:	e015      	b.n	800795c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	429a      	cmp	r2, r3
 8007938:	d20b      	bcs.n	8007952 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	1ad2      	subs	r2, r2, r3
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7ff ff98 	bl	800787c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800794c:	2300      	movs	r3, #0
 800794e:	61fb      	str	r3, [r7, #28]
 8007950:	e004      	b.n	800795c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2200      	movs	r2, #0
 8007956:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8007958:	2301      	movs	r3, #1
 800795a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800795c:	f000 fdd4 	bl	8008508 <vPortExitCritical>

    return xReturn;
 8007960:	69fb      	ldr	r3, [r7, #28]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3720      	adds	r7, #32
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	2000084c 	.word	0x2000084c
 8007970:	20000860 	.word	0x20000860

08007974 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007974:	b480      	push	{r7}
 8007976:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8007978:	4b03      	ldr	r3, [pc, #12]	; (8007988 <vTaskMissedYield+0x14>)
 800797a:	2201      	movs	r2, #1
 800797c:	601a      	str	r2, [r3, #0]
}
 800797e:	bf00      	nop
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	2000085c 	.word	0x2000085c

0800798c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007994:	f000 f854 	bl	8007a40 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007998:	4b07      	ldr	r3, [pc, #28]	; (80079b8 <prvIdleTask+0x2c>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d907      	bls.n	80079b0 <prvIdleTask+0x24>
            {
                taskYIELD();
 80079a0:	4b06      	ldr	r3, [pc, #24]	; (80079bc <prvIdleTask+0x30>)
 80079a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079a6:	601a      	str	r2, [r3, #0]
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	f3bf 8f6f 	isb	sy
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 80079b0:	f7f9 fb9e 	bl	80010f0 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 80079b4:	e7ee      	b.n	8007994 <prvIdleTask+0x8>
 80079b6:	bf00      	nop
 80079b8:	20000774 	.word	0x20000774
 80079bc:	e000ed04 	.word	0xe000ed04

080079c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079c6:	2300      	movs	r3, #0
 80079c8:	607b      	str	r3, [r7, #4]
 80079ca:	e00c      	b.n	80079e6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	4613      	mov	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4a12      	ldr	r2, [pc, #72]	; (8007a20 <prvInitialiseTaskLists+0x60>)
 80079d8:	4413      	add	r3, r2
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fe fdac 	bl	8006538 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	3301      	adds	r3, #1
 80079e4:	607b      	str	r3, [r7, #4]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b04      	cmp	r3, #4
 80079ea:	d9ef      	bls.n	80079cc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80079ec:	480d      	ldr	r0, [pc, #52]	; (8007a24 <prvInitialiseTaskLists+0x64>)
 80079ee:	f7fe fda3 	bl	8006538 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80079f2:	480d      	ldr	r0, [pc, #52]	; (8007a28 <prvInitialiseTaskLists+0x68>)
 80079f4:	f7fe fda0 	bl	8006538 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80079f8:	480c      	ldr	r0, [pc, #48]	; (8007a2c <prvInitialiseTaskLists+0x6c>)
 80079fa:	f7fe fd9d 	bl	8006538 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80079fe:	480c      	ldr	r0, [pc, #48]	; (8007a30 <prvInitialiseTaskLists+0x70>)
 8007a00:	f7fe fd9a 	bl	8006538 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8007a04:	480b      	ldr	r0, [pc, #44]	; (8007a34 <prvInitialiseTaskLists+0x74>)
 8007a06:	f7fe fd97 	bl	8006538 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8007a0a:	4b0b      	ldr	r3, [pc, #44]	; (8007a38 <prvInitialiseTaskLists+0x78>)
 8007a0c:	4a05      	ldr	r2, [pc, #20]	; (8007a24 <prvInitialiseTaskLists+0x64>)
 8007a0e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a10:	4b0a      	ldr	r3, [pc, #40]	; (8007a3c <prvInitialiseTaskLists+0x7c>)
 8007a12:	4a05      	ldr	r2, [pc, #20]	; (8007a28 <prvInitialiseTaskLists+0x68>)
 8007a14:	601a      	str	r2, [r3, #0]
}
 8007a16:	bf00      	nop
 8007a18:	3708      	adds	r7, #8
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	20000774 	.word	0x20000774
 8007a24:	200007d8 	.word	0x200007d8
 8007a28:	200007ec 	.word	0x200007ec
 8007a2c:	20000808 	.word	0x20000808
 8007a30:	2000081c 	.word	0x2000081c
 8007a34:	20000834 	.word	0x20000834
 8007a38:	20000800 	.word	0x20000800
 8007a3c:	20000804 	.word	0x20000804

08007a40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a46:	e019      	b.n	8007a7c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8007a48:	f000 fd2e 	bl	80084a8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a4c:	4b10      	ldr	r3, [pc, #64]	; (8007a90 <prvCheckTasksWaitingTermination+0x50>)
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	3304      	adds	r3, #4
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7fe fdd3 	bl	8006604 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8007a5e:	4b0d      	ldr	r3, [pc, #52]	; (8007a94 <prvCheckTasksWaitingTermination+0x54>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3b01      	subs	r3, #1
 8007a64:	4a0b      	ldr	r2, [pc, #44]	; (8007a94 <prvCheckTasksWaitingTermination+0x54>)
 8007a66:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8007a68:	4b0b      	ldr	r3, [pc, #44]	; (8007a98 <prvCheckTasksWaitingTermination+0x58>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	4a0a      	ldr	r2, [pc, #40]	; (8007a98 <prvCheckTasksWaitingTermination+0x58>)
 8007a70:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8007a72:	f000 fd49 	bl	8008508 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f810 	bl	8007a9c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a7c:	4b06      	ldr	r3, [pc, #24]	; (8007a98 <prvCheckTasksWaitingTermination+0x58>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1e1      	bne.n	8007a48 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	2000081c 	.word	0x2000081c
 8007a94:	20000848 	.word	0x20000848
 8007a98:	20000830 	.word	0x20000830

08007a9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f000 fee1 	bl	8008870 <vPortFree>
            vPortFree( pxTCB );
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fede 	bl	8008870 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8007ab4:	bf00      	nop
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007abc:	b480      	push	{r7}
 8007abe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ac0:	4b0a      	ldr	r3, [pc, #40]	; (8007aec <prvResetNextTaskUnblockTime+0x30>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d104      	bne.n	8007ad4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8007aca:	4b09      	ldr	r3, [pc, #36]	; (8007af0 <prvResetNextTaskUnblockTime+0x34>)
 8007acc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ad0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8007ad2:	e005      	b.n	8007ae0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007ad4:	4b05      	ldr	r3, [pc, #20]	; (8007aec <prvResetNextTaskUnblockTime+0x30>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a04      	ldr	r2, [pc, #16]	; (8007af0 <prvResetNextTaskUnblockTime+0x34>)
 8007ade:	6013      	str	r3, [r2, #0]
}
 8007ae0:	bf00      	nop
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	20000800 	.word	0x20000800
 8007af0:	20000868 	.word	0x20000868

08007af4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8007afa:	4b0b      	ldr	r3, [pc, #44]	; (8007b28 <xTaskGetSchedulerState+0x34>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d102      	bne.n	8007b08 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8007b02:	2301      	movs	r3, #1
 8007b04:	607b      	str	r3, [r7, #4]
 8007b06:	e008      	b.n	8007b1a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b08:	4b08      	ldr	r3, [pc, #32]	; (8007b2c <xTaskGetSchedulerState+0x38>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d102      	bne.n	8007b16 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007b10:	2302      	movs	r3, #2
 8007b12:	607b      	str	r3, [r7, #4]
 8007b14:	e001      	b.n	8007b1a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8007b16:	2300      	movs	r3, #0
 8007b18:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8007b1a:	687b      	ldr	r3, [r7, #4]
    }
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	20000854 	.word	0x20000854
 8007b2c:	20000870 	.word	0x20000870

08007b30 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b088      	sub	sp, #32
 8007b34:	af02      	add	r7, sp, #8
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
 8007b3c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00a      	beq.n	8007b5a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8007b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b48:	f383 8811 	msr	BASEPRI, r3
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	613b      	str	r3, [r7, #16]
    }
 8007b56:	bf00      	nop
 8007b58:	e7fe      	b.n	8007b58 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8007b5a:	f000 fca5 	bl	80084a8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8007b5e:	4b36      	ldr	r3, [pc, #216]	; (8007c38 <xTaskGenericNotifyWait+0x108>)
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	4413      	add	r3, r2
 8007b66:	3354      	adds	r3, #84	; 0x54
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d022      	beq.n	8007bb6 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8007b70:	4b31      	ldr	r3, [pc, #196]	; (8007c38 <xTaskGenericNotifyWait+0x108>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	3214      	adds	r2, #20
 8007b78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	43d2      	mvns	r2, r2
 8007b80:	4011      	ands	r1, r2
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	3214      	adds	r2, #20
 8007b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8007b8a:	4b2b      	ldr	r3, [pc, #172]	; (8007c38 <xTaskGenericNotifyWait+0x108>)
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	4413      	add	r3, r2
 8007b92:	3354      	adds	r3, #84	; 0x54
 8007b94:	2201      	movs	r2, #1
 8007b96:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00b      	beq.n	8007bb6 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b9e:	2101      	movs	r1, #1
 8007ba0:	6a38      	ldr	r0, [r7, #32]
 8007ba2:	f000 f84d 	bl	8007c40 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8007ba6:	4b25      	ldr	r3, [pc, #148]	; (8007c3c <xTaskGenericNotifyWait+0x10c>)
 8007ba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bac:	601a      	str	r2, [r3, #0]
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007bb6:	f000 fca7 	bl	8008508 <vPortExitCritical>

        taskENTER_CRITICAL();
 8007bba:	f000 fc75 	bl	80084a8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	6a3b      	ldr	r3, [r7, #32]
 8007bc2:	9300      	str	r3, [sp, #0]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	68b9      	ldr	r1, [r7, #8]
 8007bca:	2040      	movs	r0, #64	; 0x40
 8007bcc:	f001 ff4c 	bl	8009a68 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d007      	beq.n	8007be6 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8007bd6:	4b18      	ldr	r3, [pc, #96]	; (8007c38 <xTaskGenericNotifyWait+0x108>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	3214      	adds	r2, #20
 8007bde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8007be6:	4b14      	ldr	r3, [pc, #80]	; (8007c38 <xTaskGenericNotifyWait+0x108>)
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	4413      	add	r3, r2
 8007bee:	3354      	adds	r3, #84	; 0x54
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d002      	beq.n	8007bfe <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	617b      	str	r3, [r7, #20]
 8007bfc:	e00e      	b.n	8007c1c <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8007bfe:	4b0e      	ldr	r3, [pc, #56]	; (8007c38 <xTaskGenericNotifyWait+0x108>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	3214      	adds	r2, #20
 8007c06:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	43d2      	mvns	r2, r2
 8007c0e:	4011      	ands	r1, r2
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	3214      	adds	r2, #20
 8007c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8007c1c:	4b06      	ldr	r3, [pc, #24]	; (8007c38 <xTaskGenericNotifyWait+0x108>)
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	4413      	add	r3, r2
 8007c24:	3354      	adds	r3, #84	; 0x54
 8007c26:	2200      	movs	r2, #0
 8007c28:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8007c2a:	f000 fc6d 	bl	8008508 <vPortExitCritical>

        return xReturn;
 8007c2e:	697b      	ldr	r3, [r7, #20]
    }
 8007c30:	4618      	mov	r0, r3
 8007c32:	3718      	adds	r7, #24
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	20000770 	.word	0x20000770
 8007c3c:	e000ed04 	.word	0xe000ed04

08007c40 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b086      	sub	sp, #24
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007c4a:	4b36      	ldr	r3, [pc, #216]	; (8007d24 <prvAddCurrentTaskToDelayedList+0xe4>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c50:	4b35      	ldr	r3, [pc, #212]	; (8007d28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	3304      	adds	r3, #4
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fe fcd4 	bl	8006604 <uxListRemove>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10b      	bne.n	8007c7a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007c62:	4b31      	ldr	r3, [pc, #196]	; (8007d28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c68:	2201      	movs	r2, #1
 8007c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6e:	43da      	mvns	r2, r3
 8007c70:	4b2e      	ldr	r3, [pc, #184]	; (8007d2c <prvAddCurrentTaskToDelayedList+0xec>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4013      	ands	r3, r2
 8007c76:	4a2d      	ldr	r2, [pc, #180]	; (8007d2c <prvAddCurrentTaskToDelayedList+0xec>)
 8007c78:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c80:	d124      	bne.n	8007ccc <prvAddCurrentTaskToDelayedList+0x8c>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d021      	beq.n	8007ccc <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c88:	4b29      	ldr	r3, [pc, #164]	; (8007d30 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	613b      	str	r3, [r7, #16]
 8007c8e:	4b26      	ldr	r3, [pc, #152]	; (8007d28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	609a      	str	r2, [r3, #8]
 8007c96:	4b24      	ldr	r3, [pc, #144]	; (8007d28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	6892      	ldr	r2, [r2, #8]
 8007c9e:	60da      	str	r2, [r3, #12]
 8007ca0:	4b21      	ldr	r3, [pc, #132]	; (8007d28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	3204      	adds	r2, #4
 8007caa:	605a      	str	r2, [r3, #4]
 8007cac:	4b1e      	ldr	r3, [pc, #120]	; (8007d28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	1d1a      	adds	r2, r3, #4
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	609a      	str	r2, [r3, #8]
 8007cb6:	4b1c      	ldr	r3, [pc, #112]	; (8007d28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a1d      	ldr	r2, [pc, #116]	; (8007d30 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007cbc:	615a      	str	r2, [r3, #20]
 8007cbe:	4b1c      	ldr	r3, [pc, #112]	; (8007d30 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	4a1a      	ldr	r2, [pc, #104]	; (8007d30 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007cc6:	6013      	str	r3, [r2, #0]
 8007cc8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8007cca:	e026      	b.n	8007d1a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007cd4:	4b14      	ldr	r3, [pc, #80]	; (8007d28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d209      	bcs.n	8007cf8 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ce4:	4b13      	ldr	r3, [pc, #76]	; (8007d34 <prvAddCurrentTaskToDelayedList+0xf4>)
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	4b0f      	ldr	r3, [pc, #60]	; (8007d28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	3304      	adds	r3, #4
 8007cee:	4619      	mov	r1, r3
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	f7fe fc4e 	bl	8006592 <vListInsert>
}
 8007cf6:	e010      	b.n	8007d1a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cf8:	4b0f      	ldr	r3, [pc, #60]	; (8007d38 <prvAddCurrentTaskToDelayedList+0xf8>)
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	4b0a      	ldr	r3, [pc, #40]	; (8007d28 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3304      	adds	r3, #4
 8007d02:	4619      	mov	r1, r3
 8007d04:	4610      	mov	r0, r2
 8007d06:	f7fe fc44 	bl	8006592 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8007d0a:	4b0c      	ldr	r3, [pc, #48]	; (8007d3c <prvAddCurrentTaskToDelayedList+0xfc>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d202      	bcs.n	8007d1a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8007d14:	4a09      	ldr	r2, [pc, #36]	; (8007d3c <prvAddCurrentTaskToDelayedList+0xfc>)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6013      	str	r3, [r2, #0]
}
 8007d1a:	bf00      	nop
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	2000084c 	.word	0x2000084c
 8007d28:	20000770 	.word	0x20000770
 8007d2c:	20000850 	.word	0x20000850
 8007d30:	20000834 	.word	0x20000834
 8007d34:	20000804 	.word	0x20000804
 8007d38:	20000800 	.word	0x20000800
 8007d3c:	20000868 	.word	0x20000868

08007d40 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8007d46:	2300      	movs	r3, #0
 8007d48:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8007d4a:	f000 fa47 	bl	80081dc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8007d4e:	4b11      	ldr	r3, [pc, #68]	; (8007d94 <xTimerCreateTimerTask+0x54>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00b      	beq.n	8007d6e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8007d56:	4b10      	ldr	r3, [pc, #64]	; (8007d98 <xTimerCreateTimerTask+0x58>)
 8007d58:	9301      	str	r3, [sp, #4]
 8007d5a:	2302      	movs	r3, #2
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	2300      	movs	r3, #0
 8007d60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007d64:	490d      	ldr	r1, [pc, #52]	; (8007d9c <xTimerCreateTimerTask+0x5c>)
 8007d66:	480e      	ldr	r0, [pc, #56]	; (8007da0 <xTimerCreateTimerTask+0x60>)
 8007d68:	f7fe ffa6 	bl	8006cb8 <xTaskCreate>
 8007d6c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10a      	bne.n	8007d8a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8007d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	603b      	str	r3, [r7, #0]
    }
 8007d86:	bf00      	nop
 8007d88:	e7fe      	b.n	8007d88 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8007d8a:	687b      	ldr	r3, [r7, #4]
    }
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	200008a4 	.word	0x200008a4
 8007d98:	200008a8 	.word	0x200008a8
 8007d9c:	0800d158 	.word	0x0800d158
 8007da0:	08007e49 	.word	0x08007e49

08007da4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007db0:	e008      	b.n	8007dc4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	4413      	add	r3, r2
 8007dba:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	699a      	ldr	r2, [r3, #24]
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	18d1      	adds	r1, r2, r3
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f000 f8dd 	bl	8007f90 <prvInsertTimerInActiveList>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1ea      	bne.n	8007db2 <prvReloadTimer+0xe>
        }
    }
 8007ddc:	bf00      	nop
 8007dde:	bf00      	nop
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
	...

08007de8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007df2:	4b14      	ldr	r3, [pc, #80]	; (8007e44 <prvProcessExpiredTimer+0x5c>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	3304      	adds	r3, #4
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fe fbff 	bl	8006604 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e0c:	f003 0304 	and.w	r3, r3, #4
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d005      	beq.n	8007e20 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8007e14:	683a      	ldr	r2, [r7, #0]
 8007e16:	6879      	ldr	r1, [r7, #4]
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f7ff ffc3 	bl	8007da4 <prvReloadTimer>
 8007e1e:	e008      	b.n	8007e32 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e26:	f023 0301 	bic.w	r3, r3, #1
 8007e2a:	b2da      	uxtb	r2, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	4798      	blx	r3
    }
 8007e3a:	bf00      	nop
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	2000089c 	.word	0x2000089c

08007e48 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e50:	f107 0308 	add.w	r3, r7, #8
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 f857 	bl	8007f08 <prvGetNextExpireTime>
 8007e5a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	4619      	mov	r1, r3
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f000 f803 	bl	8007e6c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007e66:	f000 f8d5 	bl	8008014 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e6a:	e7f1      	b.n	8007e50 <prvTimerTask+0x8>

08007e6c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007e76:	f7ff f909 	bl	800708c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e7a:	f107 0308 	add.w	r3, r7, #8
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 f866 	bl	8007f50 <prvSampleTimeNow>
 8007e84:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d130      	bne.n	8007eee <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10a      	bne.n	8007ea8 <prvProcessTimerOrBlockTask+0x3c>
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d806      	bhi.n	8007ea8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8007e9a:	f7ff f905 	bl	80070a8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007e9e:	68f9      	ldr	r1, [r7, #12]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f7ff ffa1 	bl	8007de8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007ea6:	e024      	b.n	8007ef2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d008      	beq.n	8007ec0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007eae:	4b13      	ldr	r3, [pc, #76]	; (8007efc <prvProcessTimerOrBlockTask+0x90>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d101      	bne.n	8007ebc <prvProcessTimerOrBlockTask+0x50>
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e000      	b.n	8007ebe <prvProcessTimerOrBlockTask+0x52>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ec0:	4b0f      	ldr	r3, [pc, #60]	; (8007f00 <prvProcessTimerOrBlockTask+0x94>)
 8007ec2:	6818      	ldr	r0, [r3, #0]
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	4619      	mov	r1, r3
 8007ece:	f7fe febf 	bl	8006c50 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007ed2:	f7ff f8e9 	bl	80070a8 <xTaskResumeAll>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10a      	bne.n	8007ef2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007edc:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <prvProcessTimerOrBlockTask+0x98>)
 8007ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	f3bf 8f6f 	isb	sy
    }
 8007eec:	e001      	b.n	8007ef2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007eee:	f7ff f8db 	bl	80070a8 <xTaskResumeAll>
    }
 8007ef2:	bf00      	nop
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	200008a0 	.word	0x200008a0
 8007f00:	200008a4 	.word	0x200008a4
 8007f04:	e000ed04 	.word	0xe000ed04

08007f08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007f10:	4b0e      	ldr	r3, [pc, #56]	; (8007f4c <prvGetNextExpireTime+0x44>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d101      	bne.n	8007f1e <prvGetNextExpireTime+0x16>
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	e000      	b.n	8007f20 <prvGetNextExpireTime+0x18>
 8007f1e:	2200      	movs	r2, #0
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d105      	bne.n	8007f38 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f2c:	4b07      	ldr	r3, [pc, #28]	; (8007f4c <prvGetNextExpireTime+0x44>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	60fb      	str	r3, [r7, #12]
 8007f36:	e001      	b.n	8007f3c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
    }
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3714      	adds	r7, #20
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	2000089c 	.word	0x2000089c

08007f50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007f58:	f7ff f9a6 	bl	80072a8 <xTaskGetTickCount>
 8007f5c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007f5e:	4b0b      	ldr	r3, [pc, #44]	; (8007f8c <prvSampleTimeNow+0x3c>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d205      	bcs.n	8007f74 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007f68:	f000 f912 	bl	8008190 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	601a      	str	r2, [r3, #0]
 8007f72:	e002      	b.n	8007f7a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007f7a:	4a04      	ldr	r2, [pc, #16]	; (8007f8c <prvSampleTimeNow+0x3c>)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007f80:	68fb      	ldr	r3, [r7, #12]
    }
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	200008ac 	.word	0x200008ac

08007f90 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
 8007f9c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d812      	bhi.n	8007fdc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	1ad2      	subs	r2, r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d302      	bcc.n	8007fca <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	617b      	str	r3, [r7, #20]
 8007fc8:	e01b      	b.n	8008002 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007fca:	4b10      	ldr	r3, [pc, #64]	; (800800c <prvInsertTimerInActiveList+0x7c>)
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	f7fe fadc 	bl	8006592 <vListInsert>
 8007fda:	e012      	b.n	8008002 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d206      	bcs.n	8007ff2 <prvInsertTimerInActiveList+0x62>
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d302      	bcc.n	8007ff2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007fec:	2301      	movs	r3, #1
 8007fee:	617b      	str	r3, [r7, #20]
 8007ff0:	e007      	b.n	8008002 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ff2:	4b07      	ldr	r3, [pc, #28]	; (8008010 <prvInsertTimerInActiveList+0x80>)
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	3304      	adds	r3, #4
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	f7fe fac8 	bl	8006592 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8008002:	697b      	ldr	r3, [r7, #20]
    }
 8008004:	4618      	mov	r0, r3
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	200008a0 	.word	0x200008a0
 8008010:	2000089c 	.word	0x2000089c

08008014 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8008014:	b580      	push	{r7, lr}
 8008016:	b088      	sub	sp, #32
 8008018:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800801a:	e0a6      	b.n	800816a <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	2b00      	cmp	r3, #0
 8008020:	f2c0 80a3 	blt.w	800816a <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	695b      	ldr	r3, [r3, #20]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d004      	beq.n	800803a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	3304      	adds	r3, #4
 8008034:	4618      	mov	r0, r3
 8008036:	f7fe fae5 	bl	8006604 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800803a:	1d3b      	adds	r3, r7, #4
 800803c:	4618      	mov	r0, r3
 800803e:	f7ff ff87 	bl	8007f50 <prvSampleTimeNow>
 8008042:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	3b01      	subs	r3, #1
 8008048:	2b08      	cmp	r3, #8
 800804a:	f200 808d 	bhi.w	8008168 <prvProcessReceivedCommands+0x154>
 800804e:	a201      	add	r2, pc, #4	; (adr r2, 8008054 <prvProcessReceivedCommands+0x40>)
 8008050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008054:	08008079 	.word	0x08008079
 8008058:	08008079 	.word	0x08008079
 800805c:	080080e1 	.word	0x080080e1
 8008060:	080080f5 	.word	0x080080f5
 8008064:	0800813f 	.word	0x0800813f
 8008068:	08008079 	.word	0x08008079
 800806c:	08008079 	.word	0x08008079
 8008070:	080080e1 	.word	0x080080e1
 8008074:	080080f5 	.word	0x080080f5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800807e:	f043 0301 	orr.w	r3, r3, #1
 8008082:	b2da      	uxtb	r2, r3
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	18d1      	adds	r1, r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	69ba      	ldr	r2, [r7, #24]
 8008096:	69f8      	ldr	r0, [r7, #28]
 8008098:	f7ff ff7a 	bl	8007f90 <prvInsertTimerInActiveList>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d063      	beq.n	800816a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080a8:	f003 0304 	and.w	r3, r3, #4
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d009      	beq.n	80080c4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	4413      	add	r3, r2
 80080b8:	69ba      	ldr	r2, [r7, #24]
 80080ba:	4619      	mov	r1, r3
 80080bc:	69f8      	ldr	r0, [r7, #28]
 80080be:	f7ff fe71 	bl	8007da4 <prvReloadTimer>
 80080c2:	e008      	b.n	80080d6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080ca:	f023 0301 	bic.w	r3, r3, #1
 80080ce:	b2da      	uxtb	r2, r3
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	6a1b      	ldr	r3, [r3, #32]
 80080da:	69f8      	ldr	r0, [r7, #28]
 80080dc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80080de:	e044      	b.n	800816a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080e6:	f023 0301 	bic.w	r3, r3, #1
 80080ea:	b2da      	uxtb	r2, r3
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80080f2:	e03a      	b.n	800816a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080fa:	f043 0301 	orr.w	r3, r3, #1
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10a      	bne.n	800812a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	617b      	str	r3, [r7, #20]
    }
 8008126:	bf00      	nop
 8008128:	e7fe      	b.n	8008128 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	699a      	ldr	r2, [r3, #24]
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	18d1      	adds	r1, r2, r3
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	69ba      	ldr	r2, [r7, #24]
 8008136:	69f8      	ldr	r0, [r7, #28]
 8008138:	f7ff ff2a 	bl	8007f90 <prvInsertTimerInActiveList>
                        break;
 800813c:	e015      	b.n	800816a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008144:	f003 0302 	and.w	r3, r3, #2
 8008148:	2b00      	cmp	r3, #0
 800814a:	d103      	bne.n	8008154 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 800814c:	69f8      	ldr	r0, [r7, #28]
 800814e:	f000 fb8f 	bl	8008870 <vPortFree>
 8008152:	e00a      	b.n	800816a <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800815a:	f023 0301 	bic.w	r3, r3, #1
 800815e:	b2da      	uxtb	r2, r3
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8008166:	e000      	b.n	800816a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8008168:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800816a:	4b08      	ldr	r3, [pc, #32]	; (800818c <prvProcessReceivedCommands+0x178>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f107 0108 	add.w	r1, r7, #8
 8008172:	2200      	movs	r2, #0
 8008174:	4618      	mov	r0, r3
 8008176:	f7fe fb77 	bl	8006868 <xQueueReceive>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	f47f af4d 	bne.w	800801c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8008182:	bf00      	nop
 8008184:	bf00      	nop
 8008186:	3720      	adds	r7, #32
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	200008a4 	.word	0x200008a4

08008190 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008196:	e009      	b.n	80081ac <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008198:	4b0e      	ldr	r3, [pc, #56]	; (80081d4 <prvSwitchTimerLists+0x44>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80081a2:	f04f 31ff 	mov.w	r1, #4294967295
 80081a6:	6838      	ldr	r0, [r7, #0]
 80081a8:	f7ff fe1e 	bl	8007de8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80081ac:	4b09      	ldr	r3, [pc, #36]	; (80081d4 <prvSwitchTimerLists+0x44>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1f0      	bne.n	8008198 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80081b6:	4b07      	ldr	r3, [pc, #28]	; (80081d4 <prvSwitchTimerLists+0x44>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80081bc:	4b06      	ldr	r3, [pc, #24]	; (80081d8 <prvSwitchTimerLists+0x48>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a04      	ldr	r2, [pc, #16]	; (80081d4 <prvSwitchTimerLists+0x44>)
 80081c2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80081c4:	4a04      	ldr	r2, [pc, #16]	; (80081d8 <prvSwitchTimerLists+0x48>)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6013      	str	r3, [r2, #0]
    }
 80081ca:	bf00      	nop
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	2000089c 	.word	0x2000089c
 80081d8:	200008a0 	.word	0x200008a0

080081dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80081dc:	b580      	push	{r7, lr}
 80081de:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80081e0:	f000 f962 	bl	80084a8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80081e4:	4b12      	ldr	r3, [pc, #72]	; (8008230 <prvCheckForValidListAndQueue+0x54>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d11d      	bne.n	8008228 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80081ec:	4811      	ldr	r0, [pc, #68]	; (8008234 <prvCheckForValidListAndQueue+0x58>)
 80081ee:	f7fe f9a3 	bl	8006538 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80081f2:	4811      	ldr	r0, [pc, #68]	; (8008238 <prvCheckForValidListAndQueue+0x5c>)
 80081f4:	f7fe f9a0 	bl	8006538 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80081f8:	4b10      	ldr	r3, [pc, #64]	; (800823c <prvCheckForValidListAndQueue+0x60>)
 80081fa:	4a0e      	ldr	r2, [pc, #56]	; (8008234 <prvCheckForValidListAndQueue+0x58>)
 80081fc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80081fe:	4b10      	ldr	r3, [pc, #64]	; (8008240 <prvCheckForValidListAndQueue+0x64>)
 8008200:	4a0d      	ldr	r2, [pc, #52]	; (8008238 <prvCheckForValidListAndQueue+0x5c>)
 8008202:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8008204:	2200      	movs	r2, #0
 8008206:	210c      	movs	r1, #12
 8008208:	200a      	movs	r0, #10
 800820a:	f7fe fab5 	bl	8006778 <xQueueGenericCreate>
 800820e:	4603      	mov	r3, r0
 8008210:	4a07      	ldr	r2, [pc, #28]	; (8008230 <prvCheckForValidListAndQueue+0x54>)
 8008212:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8008214:	4b06      	ldr	r3, [pc, #24]	; (8008230 <prvCheckForValidListAndQueue+0x54>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d005      	beq.n	8008228 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800821c:	4b04      	ldr	r3, [pc, #16]	; (8008230 <prvCheckForValidListAndQueue+0x54>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4908      	ldr	r1, [pc, #32]	; (8008244 <prvCheckForValidListAndQueue+0x68>)
 8008222:	4618      	mov	r0, r3
 8008224:	f7fe fcbe 	bl	8006ba4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008228:	f000 f96e 	bl	8008508 <vPortExitCritical>
    }
 800822c:	bf00      	nop
 800822e:	bd80      	pop	{r7, pc}
 8008230:	200008a4 	.word	0x200008a4
 8008234:	20000874 	.word	0x20000874
 8008238:	20000888 	.word	0x20000888
 800823c:	2000089c 	.word	0x2000089c
 8008240:	200008a0 	.word	0x200008a0
 8008244:	0800d160 	.word	0x0800d160

08008248 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	3b04      	subs	r3, #4
 8008258:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008260:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	3b04      	subs	r3, #4
 8008266:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	f023 0201 	bic.w	r2, r3, #1
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	3b04      	subs	r3, #4
 8008276:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008278:	4a0c      	ldr	r2, [pc, #48]	; (80082ac <pxPortInitialiseStack+0x64>)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	3b14      	subs	r3, #20
 8008282:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	3b04      	subs	r3, #4
 800828e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f06f 0202 	mvn.w	r2, #2
 8008296:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	3b20      	subs	r3, #32
 800829c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800829e:	68fb      	ldr	r3, [r7, #12]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3714      	adds	r7, #20
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	080082b1 	.word	0x080082b1

080082b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80082b0:	b480      	push	{r7}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80082b6:	2300      	movs	r3, #0
 80082b8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80082ba:	4b12      	ldr	r3, [pc, #72]	; (8008304 <prvTaskExitError+0x54>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c2:	d00a      	beq.n	80082da <prvTaskExitError+0x2a>
        __asm volatile
 80082c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c8:	f383 8811 	msr	BASEPRI, r3
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	60fb      	str	r3, [r7, #12]
    }
 80082d6:	bf00      	nop
 80082d8:	e7fe      	b.n	80082d8 <prvTaskExitError+0x28>
        __asm volatile
 80082da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	60bb      	str	r3, [r7, #8]
    }
 80082ec:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80082ee:	bf00      	nop
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d0fc      	beq.n	80082f0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80082f6:	bf00      	nop
 80082f8:	bf00      	nop
 80082fa:	3714      	adds	r7, #20
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr
 8008304:	20000010 	.word	0x20000010
	...

08008310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008310:	4b07      	ldr	r3, [pc, #28]	; (8008330 <pxCurrentTCBConst2>)
 8008312:	6819      	ldr	r1, [r3, #0]
 8008314:	6808      	ldr	r0, [r1, #0]
 8008316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831a:	f380 8809 	msr	PSP, r0
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	f04f 0000 	mov.w	r0, #0
 8008326:	f380 8811 	msr	BASEPRI, r0
 800832a:	4770      	bx	lr
 800832c:	f3af 8000 	nop.w

08008330 <pxCurrentTCBConst2>:
 8008330:	20000770 	.word	0x20000770
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008334:	bf00      	nop
 8008336:	bf00      	nop

08008338 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008338:	4808      	ldr	r0, [pc, #32]	; (800835c <prvPortStartFirstTask+0x24>)
 800833a:	6800      	ldr	r0, [r0, #0]
 800833c:	6800      	ldr	r0, [r0, #0]
 800833e:	f380 8808 	msr	MSP, r0
 8008342:	f04f 0000 	mov.w	r0, #0
 8008346:	f380 8814 	msr	CONTROL, r0
 800834a:	b662      	cpsie	i
 800834c:	b661      	cpsie	f
 800834e:	f3bf 8f4f 	dsb	sy
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	df00      	svc	0
 8008358:	bf00      	nop
 800835a:	0000      	.short	0x0000
 800835c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008360:	bf00      	nop
 8008362:	bf00      	nop

08008364 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800836a:	4b46      	ldr	r3, [pc, #280]	; (8008484 <xPortStartScheduler+0x120>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a46      	ldr	r2, [pc, #280]	; (8008488 <xPortStartScheduler+0x124>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d10a      	bne.n	800838a <xPortStartScheduler+0x26>
        __asm volatile
 8008374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008378:	f383 8811 	msr	BASEPRI, r3
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	613b      	str	r3, [r7, #16]
    }
 8008386:	bf00      	nop
 8008388:	e7fe      	b.n	8008388 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800838a:	4b3e      	ldr	r3, [pc, #248]	; (8008484 <xPortStartScheduler+0x120>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a3f      	ldr	r2, [pc, #252]	; (800848c <xPortStartScheduler+0x128>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d10a      	bne.n	80083aa <xPortStartScheduler+0x46>
        __asm volatile
 8008394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008398:	f383 8811 	msr	BASEPRI, r3
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	60fb      	str	r3, [r7, #12]
    }
 80083a6:	bf00      	nop
 80083a8:	e7fe      	b.n	80083a8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80083aa:	4b39      	ldr	r3, [pc, #228]	; (8008490 <xPortStartScheduler+0x12c>)
 80083ac:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	22ff      	movs	r2, #255	; 0xff
 80083ba:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80083c4:	78fb      	ldrb	r3, [r7, #3]
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80083cc:	b2da      	uxtb	r2, r3
 80083ce:	4b31      	ldr	r3, [pc, #196]	; (8008494 <xPortStartScheduler+0x130>)
 80083d0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80083d2:	4b31      	ldr	r3, [pc, #196]	; (8008498 <xPortStartScheduler+0x134>)
 80083d4:	2207      	movs	r2, #7
 80083d6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083d8:	e009      	b.n	80083ee <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80083da:	4b2f      	ldr	r3, [pc, #188]	; (8008498 <xPortStartScheduler+0x134>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	3b01      	subs	r3, #1
 80083e0:	4a2d      	ldr	r2, [pc, #180]	; (8008498 <xPortStartScheduler+0x134>)
 80083e2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80083e4:	78fb      	ldrb	r3, [r7, #3]
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	005b      	lsls	r3, r3, #1
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083ee:	78fb      	ldrb	r3, [r7, #3]
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083f6:	2b80      	cmp	r3, #128	; 0x80
 80083f8:	d0ef      	beq.n	80083da <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80083fa:	4b27      	ldr	r3, [pc, #156]	; (8008498 <xPortStartScheduler+0x134>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f1c3 0307 	rsb	r3, r3, #7
 8008402:	2b04      	cmp	r3, #4
 8008404:	d00a      	beq.n	800841c <xPortStartScheduler+0xb8>
        __asm volatile
 8008406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	60bb      	str	r3, [r7, #8]
    }
 8008418:	bf00      	nop
 800841a:	e7fe      	b.n	800841a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800841c:	4b1e      	ldr	r3, [pc, #120]	; (8008498 <xPortStartScheduler+0x134>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	021b      	lsls	r3, r3, #8
 8008422:	4a1d      	ldr	r2, [pc, #116]	; (8008498 <xPortStartScheduler+0x134>)
 8008424:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008426:	4b1c      	ldr	r3, [pc, #112]	; (8008498 <xPortStartScheduler+0x134>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800842e:	4a1a      	ldr	r2, [pc, #104]	; (8008498 <xPortStartScheduler+0x134>)
 8008430:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	b2da      	uxtb	r2, r3
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800843a:	4b18      	ldr	r3, [pc, #96]	; (800849c <xPortStartScheduler+0x138>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a17      	ldr	r2, [pc, #92]	; (800849c <xPortStartScheduler+0x138>)
 8008440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008444:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008446:	4b15      	ldr	r3, [pc, #84]	; (800849c <xPortStartScheduler+0x138>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a14      	ldr	r2, [pc, #80]	; (800849c <xPortStartScheduler+0x138>)
 800844c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008450:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008452:	f000 f8e3 	bl	800861c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008456:	4b12      	ldr	r3, [pc, #72]	; (80084a0 <xPortStartScheduler+0x13c>)
 8008458:	2200      	movs	r2, #0
 800845a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800845c:	f000 f902 	bl	8008664 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008460:	4b10      	ldr	r3, [pc, #64]	; (80084a4 <xPortStartScheduler+0x140>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a0f      	ldr	r2, [pc, #60]	; (80084a4 <xPortStartScheduler+0x140>)
 8008466:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800846a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800846c:	f7ff ff64 	bl	8008338 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008470:	f7ff f856 	bl	8007520 <vTaskSwitchContext>
    prvTaskExitError();
 8008474:	f7ff ff1c 	bl	80082b0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3718      	adds	r7, #24
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	e000ed00 	.word	0xe000ed00
 8008488:	410fc271 	.word	0x410fc271
 800848c:	410fc270 	.word	0x410fc270
 8008490:	e000e400 	.word	0xe000e400
 8008494:	200008b0 	.word	0x200008b0
 8008498:	200008b4 	.word	0x200008b4
 800849c:	e000ed20 	.word	0xe000ed20
 80084a0:	20000010 	.word	0x20000010
 80084a4:	e000ef34 	.word	0xe000ef34

080084a8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
        __asm volatile
 80084ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	607b      	str	r3, [r7, #4]
    }
 80084c0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80084c2:	4b0f      	ldr	r3, [pc, #60]	; (8008500 <vPortEnterCritical+0x58>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	3301      	adds	r3, #1
 80084c8:	4a0d      	ldr	r2, [pc, #52]	; (8008500 <vPortEnterCritical+0x58>)
 80084ca:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80084cc:	4b0c      	ldr	r3, [pc, #48]	; (8008500 <vPortEnterCritical+0x58>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d10f      	bne.n	80084f4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80084d4:	4b0b      	ldr	r3, [pc, #44]	; (8008504 <vPortEnterCritical+0x5c>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00a      	beq.n	80084f4 <vPortEnterCritical+0x4c>
        __asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	603b      	str	r3, [r7, #0]
    }
 80084f0:	bf00      	nop
 80084f2:	e7fe      	b.n	80084f2 <vPortEnterCritical+0x4a>
    }
}
 80084f4:	bf00      	nop
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr
 8008500:	20000010 	.word	0x20000010
 8008504:	e000ed04 	.word	0xe000ed04

08008508 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800850e:	4b12      	ldr	r3, [pc, #72]	; (8008558 <vPortExitCritical+0x50>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10a      	bne.n	800852c <vPortExitCritical+0x24>
        __asm volatile
 8008516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851a:	f383 8811 	msr	BASEPRI, r3
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	607b      	str	r3, [r7, #4]
    }
 8008528:	bf00      	nop
 800852a:	e7fe      	b.n	800852a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800852c:	4b0a      	ldr	r3, [pc, #40]	; (8008558 <vPortExitCritical+0x50>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	3b01      	subs	r3, #1
 8008532:	4a09      	ldr	r2, [pc, #36]	; (8008558 <vPortExitCritical+0x50>)
 8008534:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008536:	4b08      	ldr	r3, [pc, #32]	; (8008558 <vPortExitCritical+0x50>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d105      	bne.n	800854a <vPortExitCritical+0x42>
 800853e:	2300      	movs	r3, #0
 8008540:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8008548:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800854a:	bf00      	nop
 800854c:	370c      	adds	r7, #12
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	20000010 	.word	0x20000010
 800855c:	00000000 	.word	0x00000000

08008560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008560:	f3ef 8009 	mrs	r0, PSP
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	4b15      	ldr	r3, [pc, #84]	; (80085c0 <pxCurrentTCBConst>)
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	f01e 0f10 	tst.w	lr, #16
 8008570:	bf08      	it	eq
 8008572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857a:	6010      	str	r0, [r2, #0]
 800857c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008580:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008584:	f380 8811 	msr	BASEPRI, r0
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	f3bf 8f6f 	isb	sy
 8008590:	f7fe ffc6 	bl	8007520 <vTaskSwitchContext>
 8008594:	f04f 0000 	mov.w	r0, #0
 8008598:	f380 8811 	msr	BASEPRI, r0
 800859c:	bc09      	pop	{r0, r3}
 800859e:	6819      	ldr	r1, [r3, #0]
 80085a0:	6808      	ldr	r0, [r1, #0]
 80085a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a6:	f01e 0f10 	tst.w	lr, #16
 80085aa:	bf08      	it	eq
 80085ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80085b0:	f380 8809 	msr	PSP, r0
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	f3af 8000 	nop.w

080085c0 <pxCurrentTCBConst>:
 80085c0:	20000770 	.word	0x20000770
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80085c4:	bf00      	nop
 80085c6:	bf00      	nop

080085c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
        __asm volatile
 80085ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d2:	f383 8811 	msr	BASEPRI, r3
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	607b      	str	r3, [r7, #4]
    }
 80085e0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80085e2:	f001 fd9b 	bl	800a11c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80085e6:	f7fe fe81 	bl	80072ec <xTaskIncrementTick>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d006      	beq.n	80085fe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80085f0:	f001 fdf2 	bl	800a1d8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80085f4:	4b08      	ldr	r3, [pc, #32]	; (8008618 <SysTick_Handler+0x50>)
 80085f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085fa:	601a      	str	r2, [r3, #0]
 80085fc:	e001      	b.n	8008602 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80085fe:	f001 fdcf 	bl	800a1a0 <SEGGER_SYSVIEW_RecordExitISR>
 8008602:	2300      	movs	r3, #0
 8008604:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	f383 8811 	msr	BASEPRI, r3
    }
 800860c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800860e:	bf00      	nop
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	e000ed04 	.word	0xe000ed04

0800861c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800861c:	b480      	push	{r7}
 800861e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008620:	4b0b      	ldr	r3, [pc, #44]	; (8008650 <vPortSetupTimerInterrupt+0x34>)
 8008622:	2200      	movs	r2, #0
 8008624:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008626:	4b0b      	ldr	r3, [pc, #44]	; (8008654 <vPortSetupTimerInterrupt+0x38>)
 8008628:	2200      	movs	r2, #0
 800862a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800862c:	4b0a      	ldr	r3, [pc, #40]	; (8008658 <vPortSetupTimerInterrupt+0x3c>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a0a      	ldr	r2, [pc, #40]	; (800865c <vPortSetupTimerInterrupt+0x40>)
 8008632:	fba2 2303 	umull	r2, r3, r2, r3
 8008636:	099b      	lsrs	r3, r3, #6
 8008638:	4a09      	ldr	r2, [pc, #36]	; (8008660 <vPortSetupTimerInterrupt+0x44>)
 800863a:	3b01      	subs	r3, #1
 800863c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800863e:	4b04      	ldr	r3, [pc, #16]	; (8008650 <vPortSetupTimerInterrupt+0x34>)
 8008640:	2207      	movs	r2, #7
 8008642:	601a      	str	r2, [r3, #0]
}
 8008644:	bf00      	nop
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	e000e010 	.word	0xe000e010
 8008654:	e000e018 	.word	0xe000e018
 8008658:	20000000 	.word	0x20000000
 800865c:	10624dd3 	.word	0x10624dd3
 8008660:	e000e014 	.word	0xe000e014

08008664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008664:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008674 <vPortEnableVFP+0x10>
 8008668:	6801      	ldr	r1, [r0, #0]
 800866a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800866e:	6001      	str	r1, [r0, #0]
 8008670:	4770      	bx	lr
 8008672:	0000      	.short	0x0000
 8008674:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008678:	bf00      	nop
 800867a:	bf00      	nop

0800867c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008682:	f3ef 8305 	mrs	r3, IPSR
 8008686:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b0f      	cmp	r3, #15
 800868c:	d914      	bls.n	80086b8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800868e:	4a17      	ldr	r2, [pc, #92]	; (80086ec <vPortValidateInterruptPriority+0x70>)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4413      	add	r3, r2
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008698:	4b15      	ldr	r3, [pc, #84]	; (80086f0 <vPortValidateInterruptPriority+0x74>)
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	7afa      	ldrb	r2, [r7, #11]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d20a      	bcs.n	80086b8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80086a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a6:	f383 8811 	msr	BASEPRI, r3
 80086aa:	f3bf 8f6f 	isb	sy
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	607b      	str	r3, [r7, #4]
    }
 80086b4:	bf00      	nop
 80086b6:	e7fe      	b.n	80086b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80086b8:	4b0e      	ldr	r3, [pc, #56]	; (80086f4 <vPortValidateInterruptPriority+0x78>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80086c0:	4b0d      	ldr	r3, [pc, #52]	; (80086f8 <vPortValidateInterruptPriority+0x7c>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d90a      	bls.n	80086de <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80086c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	603b      	str	r3, [r7, #0]
    }
 80086da:	bf00      	nop
 80086dc:	e7fe      	b.n	80086dc <vPortValidateInterruptPriority+0x60>
    }
 80086de:	bf00      	nop
 80086e0:	3714      	adds	r7, #20
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	e000e3f0 	.word	0xe000e3f0
 80086f0:	200008b0 	.word	0x200008b0
 80086f4:	e000ed0c 	.word	0xe000ed0c
 80086f8:	200008b4 	.word	0x200008b4

080086fc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b08a      	sub	sp, #40	; 0x28
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8008704:	2300      	movs	r3, #0
 8008706:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8008708:	f7fe fcc0 	bl	800708c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800870c:	4b53      	ldr	r3, [pc, #332]	; (800885c <pvPortMalloc+0x160>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d101      	bne.n	8008718 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008714:	f000 f908 	bl	8008928 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d012      	beq.n	8008744 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800871e:	2208      	movs	r2, #8
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f003 0307 	and.w	r3, r3, #7
 8008726:	1ad3      	subs	r3, r2, r3
 8008728:	3308      	adds	r3, #8
 800872a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	43db      	mvns	r3, r3
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	429a      	cmp	r2, r3
 8008734:	d804      	bhi.n	8008740 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	4413      	add	r3, r2
 800873c:	607b      	str	r3, [r7, #4]
 800873e:	e001      	b.n	8008744 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8008740:	2300      	movs	r3, #0
 8008742:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	db70      	blt.n	800882c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d06d      	beq.n	800882c <pvPortMalloc+0x130>
 8008750:	4b43      	ldr	r3, [pc, #268]	; (8008860 <pvPortMalloc+0x164>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	429a      	cmp	r2, r3
 8008758:	d868      	bhi.n	800882c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800875a:	4b42      	ldr	r3, [pc, #264]	; (8008864 <pvPortMalloc+0x168>)
 800875c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800875e:	4b41      	ldr	r3, [pc, #260]	; (8008864 <pvPortMalloc+0x168>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008764:	e004      	b.n	8008770 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8008766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008768:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	429a      	cmp	r2, r3
 8008778:	d903      	bls.n	8008782 <pvPortMalloc+0x86>
 800877a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1f1      	bne.n	8008766 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008782:	4b36      	ldr	r3, [pc, #216]	; (800885c <pvPortMalloc+0x160>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008788:	429a      	cmp	r2, r3
 800878a:	d04f      	beq.n	800882c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800878c:	6a3b      	ldr	r3, [r7, #32]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2208      	movs	r2, #8
 8008792:	4413      	add	r3, r2
 8008794:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	6a3b      	ldr	r3, [r7, #32]
 800879c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	1ad2      	subs	r2, r2, r3
 80087a6:	2308      	movs	r3, #8
 80087a8:	005b      	lsls	r3, r3, #1
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d91f      	bls.n	80087ee <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80087ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4413      	add	r3, r2
 80087b4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	f003 0307 	and.w	r3, r3, #7
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00a      	beq.n	80087d6 <pvPortMalloc+0xda>
        __asm volatile
 80087c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c4:	f383 8811 	msr	BASEPRI, r3
 80087c8:	f3bf 8f6f 	isb	sy
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	613b      	str	r3, [r7, #16]
    }
 80087d2:	bf00      	nop
 80087d4:	e7fe      	b.n	80087d4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80087d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d8:	685a      	ldr	r2, [r3, #4]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	1ad2      	subs	r2, r2, r3
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80087e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80087e8:	6978      	ldr	r0, [r7, #20]
 80087ea:	f000 f8f9 	bl	80089e0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80087ee:	4b1c      	ldr	r3, [pc, #112]	; (8008860 <pvPortMalloc+0x164>)
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	4a19      	ldr	r2, [pc, #100]	; (8008860 <pvPortMalloc+0x164>)
 80087fa:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80087fc:	4b18      	ldr	r3, [pc, #96]	; (8008860 <pvPortMalloc+0x164>)
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	4b19      	ldr	r3, [pc, #100]	; (8008868 <pvPortMalloc+0x16c>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	429a      	cmp	r2, r3
 8008806:	d203      	bcs.n	8008810 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008808:	4b15      	ldr	r3, [pc, #84]	; (8008860 <pvPortMalloc+0x164>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a16      	ldr	r2, [pc, #88]	; (8008868 <pvPortMalloc+0x16c>)
 800880e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881e:	2200      	movs	r2, #0
 8008820:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008822:	4b12      	ldr	r3, [pc, #72]	; (800886c <pvPortMalloc+0x170>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3301      	adds	r3, #1
 8008828:	4a10      	ldr	r2, [pc, #64]	; (800886c <pvPortMalloc+0x170>)
 800882a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800882c:	f7fe fc3c 	bl	80070a8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	f003 0307 	and.w	r3, r3, #7
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00a      	beq.n	8008850 <pvPortMalloc+0x154>
        __asm volatile
 800883a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883e:	f383 8811 	msr	BASEPRI, r3
 8008842:	f3bf 8f6f 	isb	sy
 8008846:	f3bf 8f4f 	dsb	sy
 800884a:	60fb      	str	r3, [r7, #12]
    }
 800884c:	bf00      	nop
 800884e:	e7fe      	b.n	800884e <pvPortMalloc+0x152>
    return pvReturn;
 8008850:	69fb      	ldr	r3, [r7, #28]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3728      	adds	r7, #40	; 0x28
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	200134c0 	.word	0x200134c0
 8008860:	200134c4 	.word	0x200134c4
 8008864:	200134b8 	.word	0x200134b8
 8008868:	200134c8 	.word	0x200134c8
 800886c:	200134cc 	.word	0x200134cc

08008870 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d049      	beq.n	8008916 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008882:	2308      	movs	r3, #8
 8008884:	425b      	negs	r3, r3
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	4413      	add	r3, r2
 800888a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	2b00      	cmp	r3, #0
 8008896:	db0a      	blt.n	80088ae <vPortFree+0x3e>
        __asm volatile
 8008898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889c:	f383 8811 	msr	BASEPRI, r3
 80088a0:	f3bf 8f6f 	isb	sy
 80088a4:	f3bf 8f4f 	dsb	sy
 80088a8:	60fb      	str	r3, [r7, #12]
    }
 80088aa:	bf00      	nop
 80088ac:	e7fe      	b.n	80088ac <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00a      	beq.n	80088cc <vPortFree+0x5c>
        __asm volatile
 80088b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ba:	f383 8811 	msr	BASEPRI, r3
 80088be:	f3bf 8f6f 	isb	sy
 80088c2:	f3bf 8f4f 	dsb	sy
 80088c6:	60bb      	str	r3, [r7, #8]
    }
 80088c8:	bf00      	nop
 80088ca:	e7fe      	b.n	80088ca <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	0fdb      	lsrs	r3, r3, #31
 80088d2:	f003 0301 	and.w	r3, r3, #1
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d01c      	beq.n	8008916 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d118      	bne.n	8008916 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80088f0:	f7fe fbcc 	bl	800708c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	685a      	ldr	r2, [r3, #4]
 80088f8:	4b09      	ldr	r3, [pc, #36]	; (8008920 <vPortFree+0xb0>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4413      	add	r3, r2
 80088fe:	4a08      	ldr	r2, [pc, #32]	; (8008920 <vPortFree+0xb0>)
 8008900:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008902:	6938      	ldr	r0, [r7, #16]
 8008904:	f000 f86c 	bl	80089e0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008908:	4b06      	ldr	r3, [pc, #24]	; (8008924 <vPortFree+0xb4>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3301      	adds	r3, #1
 800890e:	4a05      	ldr	r2, [pc, #20]	; (8008924 <vPortFree+0xb4>)
 8008910:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008912:	f7fe fbc9 	bl	80070a8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008916:	bf00      	nop
 8008918:	3718      	adds	r7, #24
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	200134c4 	.word	0x200134c4
 8008924:	200134d0 	.word	0x200134d0

08008928 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800892e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8008932:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008934:	4b25      	ldr	r3, [pc, #148]	; (80089cc <prvHeapInit+0xa4>)
 8008936:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f003 0307 	and.w	r3, r3, #7
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00c      	beq.n	800895c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	3307      	adds	r3, #7
 8008946:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f023 0307 	bic.w	r3, r3, #7
 800894e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008950:	68ba      	ldr	r2, [r7, #8]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	4a1d      	ldr	r2, [pc, #116]	; (80089cc <prvHeapInit+0xa4>)
 8008958:	4413      	add	r3, r2
 800895a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008960:	4a1b      	ldr	r2, [pc, #108]	; (80089d0 <prvHeapInit+0xa8>)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008966:	4b1a      	ldr	r3, [pc, #104]	; (80089d0 <prvHeapInit+0xa8>)
 8008968:	2200      	movs	r2, #0
 800896a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	4413      	add	r3, r2
 8008972:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008974:	2208      	movs	r2, #8
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	1a9b      	subs	r3, r3, r2
 800897a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f023 0307 	bic.w	r3, r3, #7
 8008982:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	4a13      	ldr	r2, [pc, #76]	; (80089d4 <prvHeapInit+0xac>)
 8008988:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800898a:	4b12      	ldr	r3, [pc, #72]	; (80089d4 <prvHeapInit+0xac>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2200      	movs	r2, #0
 8008990:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008992:	4b10      	ldr	r3, [pc, #64]	; (80089d4 <prvHeapInit+0xac>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2200      	movs	r2, #0
 8008998:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	1ad2      	subs	r2, r2, r3
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80089a8:	4b0a      	ldr	r3, [pc, #40]	; (80089d4 <prvHeapInit+0xac>)
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	4a08      	ldr	r2, [pc, #32]	; (80089d8 <prvHeapInit+0xb0>)
 80089b6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	4a07      	ldr	r2, [pc, #28]	; (80089dc <prvHeapInit+0xb4>)
 80089be:	6013      	str	r3, [r2, #0]
}
 80089c0:	bf00      	nop
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr
 80089cc:	200008b8 	.word	0x200008b8
 80089d0:	200134b8 	.word	0x200134b8
 80089d4:	200134c0 	.word	0x200134c0
 80089d8:	200134c8 	.word	0x200134c8
 80089dc:	200134c4 	.word	0x200134c4

080089e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80089e8:	4b28      	ldr	r3, [pc, #160]	; (8008a8c <prvInsertBlockIntoFreeList+0xac>)
 80089ea:	60fb      	str	r3, [r7, #12]
 80089ec:	e002      	b.n	80089f4 <prvInsertBlockIntoFreeList+0x14>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	60fb      	str	r3, [r7, #12]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d8f7      	bhi.n	80089ee <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	4413      	add	r3, r2
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d108      	bne.n	8008a22 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	685a      	ldr	r2, [r3, #4]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	441a      	add	r2, r3
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	68ba      	ldr	r2, [r7, #8]
 8008a2c:	441a      	add	r2, r3
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d118      	bne.n	8008a68 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	4b15      	ldr	r3, [pc, #84]	; (8008a90 <prvInsertBlockIntoFreeList+0xb0>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d00d      	beq.n	8008a5e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	685a      	ldr	r2, [r3, #4]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	441a      	add	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	601a      	str	r2, [r3, #0]
 8008a5c:	e008      	b.n	8008a70 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a5e:	4b0c      	ldr	r3, [pc, #48]	; (8008a90 <prvInsertBlockIntoFreeList+0xb0>)
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	601a      	str	r2, [r3, #0]
 8008a66:	e003      	b.n	8008a70 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d002      	beq.n	8008a7e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008a7e:	bf00      	nop
 8008a80:	3714      	adds	r7, #20
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	200134b8 	.word	0x200134b8
 8008a90:	200134c0 	.word	0x200134c0

08008a94 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8008a94:	b580      	push	{r7, lr}
 8008a96:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8008a98:	4803      	ldr	r0, [pc, #12]	; (8008aa8 <_cbSendSystemDesc+0x14>)
 8008a9a:	f001 fae9 	bl	800a070 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8008a9e:	4803      	ldr	r0, [pc, #12]	; (8008aac <_cbSendSystemDesc+0x18>)
 8008aa0:	f001 fae6 	bl	800a070 <SEGGER_SYSVIEW_SendSysDesc>
}
 8008aa4:	bf00      	nop
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	0800d168 	.word	0x0800d168
 8008aac:	0800d1a0 	.word	0x0800d1a0

08008ab0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8008ab4:	4b06      	ldr	r3, [pc, #24]	; (8008ad0 <SEGGER_SYSVIEW_Conf+0x20>)
 8008ab6:	6818      	ldr	r0, [r3, #0]
 8008ab8:	4b05      	ldr	r3, [pc, #20]	; (8008ad0 <SEGGER_SYSVIEW_Conf+0x20>)
 8008aba:	6819      	ldr	r1, [r3, #0]
 8008abc:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <SEGGER_SYSVIEW_Conf+0x24>)
 8008abe:	4a06      	ldr	r2, [pc, #24]	; (8008ad8 <SEGGER_SYSVIEW_Conf+0x28>)
 8008ac0:	f000 fe54 	bl	800976c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8008ac4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8008ac8:	f000 fe94 	bl	80097f4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8008acc:	bf00      	nop
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	20000000 	.word	0x20000000
 8008ad4:	08008a95 	.word	0x08008a95
 8008ad8:	0800d240 	.word	0x0800d240

08008adc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8008adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	607b      	str	r3, [r7, #4]
 8008ae6:	e033      	b.n	8008b50 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8008ae8:	491e      	ldr	r1, [pc, #120]	; (8008b64 <_cbSendTaskList+0x88>)
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	4613      	mov	r3, r2
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	4413      	add	r3, r2
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	440b      	add	r3, r1
 8008af6:	6818      	ldr	r0, [r3, #0]
 8008af8:	491a      	ldr	r1, [pc, #104]	; (8008b64 <_cbSendTaskList+0x88>)
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	4613      	mov	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	4413      	add	r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	440b      	add	r3, r1
 8008b06:	3304      	adds	r3, #4
 8008b08:	6819      	ldr	r1, [r3, #0]
 8008b0a:	4c16      	ldr	r4, [pc, #88]	; (8008b64 <_cbSendTaskList+0x88>)
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4423      	add	r3, r4
 8008b18:	3308      	adds	r3, #8
 8008b1a:	681c      	ldr	r4, [r3, #0]
 8008b1c:	4d11      	ldr	r5, [pc, #68]	; (8008b64 <_cbSendTaskList+0x88>)
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	4613      	mov	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	442b      	add	r3, r5
 8008b2a:	330c      	adds	r3, #12
 8008b2c:	681d      	ldr	r5, [r3, #0]
 8008b2e:	4e0d      	ldr	r6, [pc, #52]	; (8008b64 <_cbSendTaskList+0x88>)
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	4613      	mov	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4413      	add	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4433      	add	r3, r6
 8008b3c:	3310      	adds	r3, #16
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	462b      	mov	r3, r5
 8008b44:	4622      	mov	r2, r4
 8008b46:	f000 f8bd 	bl	8008cc4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	607b      	str	r3, [r7, #4]
 8008b50:	4b05      	ldr	r3, [pc, #20]	; (8008b68 <_cbSendTaskList+0x8c>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d3c6      	bcc.n	8008ae8 <_cbSendTaskList+0xc>
  }
}
 8008b5a:	bf00      	nop
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b64:	200134d4 	.word	0x200134d4
 8008b68:	20013574 	.word	0x20013574

08008b6c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8008b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b70:	b082      	sub	sp, #8
 8008b72:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8008b74:	f7fe fba8 	bl	80072c8 <xTaskGetTickCountFromISR>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	469a      	mov	sl, r3
 8008b7e:	4693      	mov	fp, r2
 8008b80:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8008b84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b88:	4602      	mov	r2, r0
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	f04f 0a00 	mov.w	sl, #0
 8008b90:	f04f 0b00 	mov.w	fp, #0
 8008b94:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8008b98:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8008b9c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8008ba0:	4652      	mov	r2, sl
 8008ba2:	465b      	mov	r3, fp
 8008ba4:	1a14      	subs	r4, r2, r0
 8008ba6:	eb63 0501 	sbc.w	r5, r3, r1
 8008baa:	f04f 0200 	mov.w	r2, #0
 8008bae:	f04f 0300 	mov.w	r3, #0
 8008bb2:	00ab      	lsls	r3, r5, #2
 8008bb4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8008bb8:	00a2      	lsls	r2, r4, #2
 8008bba:	4614      	mov	r4, r2
 8008bbc:	461d      	mov	r5, r3
 8008bbe:	eb14 0800 	adds.w	r8, r4, r0
 8008bc2:	eb45 0901 	adc.w	r9, r5, r1
 8008bc6:	f04f 0200 	mov.w	r2, #0
 8008bca:	f04f 0300 	mov.w	r3, #0
 8008bce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008bd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008bd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008bda:	4690      	mov	r8, r2
 8008bdc:	4699      	mov	r9, r3
 8008bde:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8008be2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8008be6:	4610      	mov	r0, r2
 8008be8:	4619      	mov	r1, r3
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08008bf4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af02      	add	r7, sp, #8
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	607a      	str	r2, [r7, #4]
 8008c00:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8008c02:	2205      	movs	r2, #5
 8008c04:	492b      	ldr	r1, [pc, #172]	; (8008cb4 <SYSVIEW_AddTask+0xc0>)
 8008c06:	68b8      	ldr	r0, [r7, #8]
 8008c08:	f002 faa9 	bl	800b15e <memcmp>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d04b      	beq.n	8008caa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8008c12:	4b29      	ldr	r3, [pc, #164]	; (8008cb8 <SYSVIEW_AddTask+0xc4>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2b07      	cmp	r3, #7
 8008c18:	d903      	bls.n	8008c22 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8008c1a:	4828      	ldr	r0, [pc, #160]	; (8008cbc <SYSVIEW_AddTask+0xc8>)
 8008c1c:	f001 fcc6 	bl	800a5ac <SEGGER_SYSVIEW_Warn>
    return;
 8008c20:	e044      	b.n	8008cac <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8008c22:	4b25      	ldr	r3, [pc, #148]	; (8008cb8 <SYSVIEW_AddTask+0xc4>)
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	4926      	ldr	r1, [pc, #152]	; (8008cc0 <SYSVIEW_AddTask+0xcc>)
 8008c28:	4613      	mov	r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	4413      	add	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	440b      	add	r3, r1
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8008c36:	4b20      	ldr	r3, [pc, #128]	; (8008cb8 <SYSVIEW_AddTask+0xc4>)
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	4921      	ldr	r1, [pc, #132]	; (8008cc0 <SYSVIEW_AddTask+0xcc>)
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	4413      	add	r3, r2
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	440b      	add	r3, r1
 8008c46:	3304      	adds	r3, #4
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8008c4c:	4b1a      	ldr	r3, [pc, #104]	; (8008cb8 <SYSVIEW_AddTask+0xc4>)
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	491b      	ldr	r1, [pc, #108]	; (8008cc0 <SYSVIEW_AddTask+0xcc>)
 8008c52:	4613      	mov	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4413      	add	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	440b      	add	r3, r1
 8008c5c:	3308      	adds	r3, #8
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8008c62:	4b15      	ldr	r3, [pc, #84]	; (8008cb8 <SYSVIEW_AddTask+0xc4>)
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	4916      	ldr	r1, [pc, #88]	; (8008cc0 <SYSVIEW_AddTask+0xcc>)
 8008c68:	4613      	mov	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4413      	add	r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	440b      	add	r3, r1
 8008c72:	330c      	adds	r3, #12
 8008c74:	683a      	ldr	r2, [r7, #0]
 8008c76:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8008c78:	4b0f      	ldr	r3, [pc, #60]	; (8008cb8 <SYSVIEW_AddTask+0xc4>)
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	4910      	ldr	r1, [pc, #64]	; (8008cc0 <SYSVIEW_AddTask+0xcc>)
 8008c7e:	4613      	mov	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	440b      	add	r3, r1
 8008c88:	3310      	adds	r3, #16
 8008c8a:	69ba      	ldr	r2, [r7, #24]
 8008c8c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8008c8e:	4b0a      	ldr	r3, [pc, #40]	; (8008cb8 <SYSVIEW_AddTask+0xc4>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	3301      	adds	r3, #1
 8008c94:	4a08      	ldr	r2, [pc, #32]	; (8008cb8 <SYSVIEW_AddTask+0xc4>)
 8008c96:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	68b9      	ldr	r1, [r7, #8]
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f000 f80e 	bl	8008cc4 <SYSVIEW_SendTaskInfo>
 8008ca8:	e000      	b.n	8008cac <SYSVIEW_AddTask+0xb8>
    return;
 8008caa:	bf00      	nop

}
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	0800d1b0 	.word	0x0800d1b0
 8008cb8:	20013574 	.word	0x20013574
 8008cbc:	0800d1b8 	.word	0x0800d1b8
 8008cc0:	200134d4 	.word	0x200134d4

08008cc4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b08a      	sub	sp, #40	; 0x28
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
 8008cd0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8008cd2:	f107 0314 	add.w	r3, r7, #20
 8008cd6:	2214      	movs	r2, #20
 8008cd8:	2100      	movs	r1, #0
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f002 fa4f 	bl	800b17e <memset>
  TaskInfo.TaskID     = TaskID;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8008cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8008cf4:	f107 0314 	add.w	r3, r7, #20
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f001 f8c1 	bl	8009e80 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8008cfe:	bf00      	nop
 8008d00:	3728      	adds	r7, #40	; 0x28
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
	...

08008d08 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8008d0e:	4b24      	ldr	r3, [pc, #144]	; (8008da0 <_DoInit+0x98>)
 8008d10:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2203      	movs	r2, #3
 8008d16:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2203      	movs	r2, #3
 8008d1c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a20      	ldr	r2, [pc, #128]	; (8008da4 <_DoInit+0x9c>)
 8008d22:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a20      	ldr	r2, [pc, #128]	; (8008da8 <_DoInit+0xa0>)
 8008d28:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008d30:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a17      	ldr	r2, [pc, #92]	; (8008da4 <_DoInit+0x9c>)
 8008d48:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a17      	ldr	r2, [pc, #92]	; (8008dac <_DoInit+0xa4>)
 8008d4e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2210      	movs	r2, #16
 8008d54:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	3307      	adds	r3, #7
 8008d6c:	4a10      	ldr	r2, [pc, #64]	; (8008db0 <_DoInit+0xa8>)
 8008d6e:	6810      	ldr	r0, [r2, #0]
 8008d70:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8008d72:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a0e      	ldr	r2, [pc, #56]	; (8008db4 <_DoInit+0xac>)
 8008d7a:	6810      	ldr	r0, [r2, #0]
 8008d7c:	6018      	str	r0, [r3, #0]
 8008d7e:	8891      	ldrh	r1, [r2, #4]
 8008d80:	7992      	ldrb	r2, [r2, #6]
 8008d82:	8099      	strh	r1, [r3, #4]
 8008d84:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8008d86:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2220      	movs	r2, #32
 8008d8e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8008d90:	f3bf 8f5f 	dmb	sy
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	20013578 	.word	0x20013578
 8008da4:	0800d208 	.word	0x0800d208
 8008da8:	20013620 	.word	0x20013620
 8008dac:	20013a20 	.word	0x20013a20
 8008db0:	0800d214 	.word	0x0800d214
 8008db4:	0800d218 	.word	0x0800d218

08008db8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b08a      	sub	sp, #40	; 0x28
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8008dd4:	69ba      	ldr	r2, [r7, #24]
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d905      	bls.n	8008de8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8008ddc:	69ba      	ldr	r2, [r7, #24]
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	3b01      	subs	r3, #1
 8008de4:	627b      	str	r3, [r7, #36]	; 0x24
 8008de6:	e007      	b.n	8008df8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	689a      	ldr	r2, [r3, #8]
 8008dec:	69b9      	ldr	r1, [r7, #24]
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	1acb      	subs	r3, r1, r3
 8008df2:	4413      	add	r3, r2
 8008df4:	3b01      	subs	r3, #1
 8008df6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	689a      	ldr	r2, [r3, #8]
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e02:	4293      	cmp	r3, r2
 8008e04:	bf28      	it	cs
 8008e06:	4613      	movcs	r3, r2
 8008e08:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8008e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	bf28      	it	cs
 8008e12:	4613      	movcs	r3, r2
 8008e14:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	685a      	ldr	r2, [r3, #4]
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8008e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e22:	68b9      	ldr	r1, [r7, #8]
 8008e24:	6978      	ldr	r0, [r7, #20]
 8008e26:	f002 fa18 	bl	800b25a <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8008e2a:	6a3a      	ldr	r2, [r7, #32]
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	4413      	add	r3, r2
 8008e30:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e36:	4413      	add	r3, r2
 8008e38:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8008e42:	69fa      	ldr	r2, [r7, #28]
 8008e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e46:	4413      	add	r3, r2
 8008e48:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	69fa      	ldr	r2, [r7, #28]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d101      	bne.n	8008e58 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8008e54:	2300      	movs	r3, #0
 8008e56:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008e58:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	69fa      	ldr	r2, [r7, #28]
 8008e60:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d1b2      	bne.n	8008dce <_WriteBlocking+0x16>
  return NumBytesWritten;
 8008e68:	6a3b      	ldr	r3, [r7, #32]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3728      	adds	r7, #40	; 0x28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b088      	sub	sp, #32
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	60f8      	str	r0, [r7, #12]
 8008e7a:	60b9      	str	r1, [r7, #8]
 8008e7c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	689a      	ldr	r2, [r3, #8]
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8008e8e:	69ba      	ldr	r2, [r7, #24]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d911      	bls.n	8008eba <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	685a      	ldr	r2, [r3, #4]
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	68b9      	ldr	r1, [r7, #8]
 8008ea4:	6938      	ldr	r0, [r7, #16]
 8008ea6:	f002 f9d8 	bl	800b25a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008eaa:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8008eae:	69fa      	ldr	r2, [r7, #28]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	441a      	add	r2, r3
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8008eb8:	e01f      	b.n	8008efa <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	685a      	ldr	r2, [r3, #4]
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8008ec8:	697a      	ldr	r2, [r7, #20]
 8008eca:	68b9      	ldr	r1, [r7, #8]
 8008ecc:	6938      	ldr	r0, [r7, #16]
 8008ece:	f002 f9c4 	bl	800b25a <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	697a      	ldr	r2, [r7, #20]
 8008ee8:	4619      	mov	r1, r3
 8008eea:	6938      	ldr	r0, [r7, #16]
 8008eec:	f002 f9b5 	bl	800b25a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008ef0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	60da      	str	r2, [r3, #12]
}
 8008efa:	bf00      	nop
 8008efc:	3720      	adds	r7, #32
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8008f02:	b480      	push	{r7}
 8008f04:	b087      	sub	sp, #28
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	691b      	ldr	r3, [r3, #16]
 8008f0e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8008f16:	693a      	ldr	r2, [r7, #16]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d808      	bhi.n	8008f30 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	689a      	ldr	r2, [r3, #8]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	1ad2      	subs	r2, r2, r3
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	4413      	add	r3, r2
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	617b      	str	r3, [r7, #20]
 8008f2e:	e004      	b.n	8008f3a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8008f30:	693a      	ldr	r2, [r7, #16]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	3b01      	subs	r3, #1
 8008f38:	617b      	str	r3, [r7, #20]
  }
  return r;
 8008f3a:	697b      	ldr	r3, [r7, #20]
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	371c      	adds	r7, #28
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b08c      	sub	sp, #48	; 0x30
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8008f54:	4b3e      	ldr	r3, [pc, #248]	; (8009050 <SEGGER_RTT_ReadNoLock+0x108>)
 8008f56:	623b      	str	r3, [r7, #32]
 8008f58:	6a3b      	ldr	r3, [r7, #32]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d101      	bne.n	8008f66 <SEGGER_RTT_ReadNoLock+0x1e>
 8008f62:	f7ff fed1 	bl	8008d08 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	4613      	mov	r3, r2
 8008f6a:	005b      	lsls	r3, r3, #1
 8008f6c:	4413      	add	r3, r2
 8008f6e:	00db      	lsls	r3, r3, #3
 8008f70:	3360      	adds	r3, #96	; 0x60
 8008f72:	4a37      	ldr	r2, [pc, #220]	; (8009050 <SEGGER_RTT_ReadNoLock+0x108>)
 8008f74:	4413      	add	r3, r2
 8008f76:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8008f8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d92b      	bls.n	8008fec <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	689a      	ldr	r2, [r3, #8]
 8008f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	bf28      	it	cs
 8008fa6:	4613      	movcs	r3, r2
 8008fa8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	685a      	ldr	r2, [r3, #4]
 8008fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb0:	4413      	add	r3, r2
 8008fb2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008fb4:	697a      	ldr	r2, [r7, #20]
 8008fb6:	6939      	ldr	r1, [r7, #16]
 8008fb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008fba:	f002 f94e 	bl	800b25a <memcpy>
    NumBytesRead += NumBytesRem;
 8008fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8008fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	4413      	add	r3, r2
 8008fcc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	1ad3      	subs	r3, r2, r3
 8008fd4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008fd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	4413      	add	r3, r2
 8008fdc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d101      	bne.n	8008fec <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8008fec:	69ba      	ldr	r2, [r7, #24]
 8008fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8008ff4:	697a      	ldr	r2, [r7, #20]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	bf28      	it	cs
 8008ffc:	4613      	movcs	r3, r2
 8008ffe:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d019      	beq.n	800903a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	685a      	ldr	r2, [r3, #4]
 800900a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900c:	4413      	add	r3, r2
 800900e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8009010:	697a      	ldr	r2, [r7, #20]
 8009012:	6939      	ldr	r1, [r7, #16]
 8009014:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009016:	f002 f920 	bl	800b25a <memcpy>
    NumBytesRead += NumBytesRem;
 800901a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	4413      	add	r3, r2
 8009020:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8009022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	4413      	add	r3, r2
 8009028:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	1ad3      	subs	r3, r2, r3
 8009030:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8009032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	4413      	add	r3, r2
 8009038:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800903a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903c:	2b00      	cmp	r3, #0
 800903e:	d002      	beq.n	8009046 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009044:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8009046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009048:	4618      	mov	r0, r3
 800904a:	3730      	adds	r7, #48	; 0x30
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	20013578 	.word	0x20013578

08009054 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8009054:	b580      	push	{r7, lr}
 8009056:	b088      	sub	sp, #32
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	1c5a      	adds	r2, r3, #1
 8009068:	4613      	mov	r3, r2
 800906a:	005b      	lsls	r3, r3, #1
 800906c:	4413      	add	r3, r2
 800906e:	00db      	lsls	r3, r3, #3
 8009070:	4a1f      	ldr	r2, [pc, #124]	; (80090f0 <SEGGER_RTT_WriteNoLock+0x9c>)
 8009072:	4413      	add	r3, r2
 8009074:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	2b02      	cmp	r3, #2
 800907c:	d029      	beq.n	80090d2 <SEGGER_RTT_WriteNoLock+0x7e>
 800907e:	2b02      	cmp	r3, #2
 8009080:	d82e      	bhi.n	80090e0 <SEGGER_RTT_WriteNoLock+0x8c>
 8009082:	2b00      	cmp	r3, #0
 8009084:	d002      	beq.n	800908c <SEGGER_RTT_WriteNoLock+0x38>
 8009086:	2b01      	cmp	r3, #1
 8009088:	d013      	beq.n	80090b2 <SEGGER_RTT_WriteNoLock+0x5e>
 800908a:	e029      	b.n	80090e0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800908c:	6978      	ldr	r0, [r7, #20]
 800908e:	f7ff ff38 	bl	8008f02 <_GetAvailWriteSpace>
 8009092:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	429a      	cmp	r2, r3
 800909a:	d202      	bcs.n	80090a2 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800909c:	2300      	movs	r3, #0
 800909e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80090a0:	e021      	b.n	80090e6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	69b9      	ldr	r1, [r7, #24]
 80090aa:	6978      	ldr	r0, [r7, #20]
 80090ac:	f7ff fee1 	bl	8008e72 <_WriteNoCheck>
    break;
 80090b0:	e019      	b.n	80090e6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80090b2:	6978      	ldr	r0, [r7, #20]
 80090b4:	f7ff ff25 	bl	8008f02 <_GetAvailWriteSpace>
 80090b8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	4293      	cmp	r3, r2
 80090c0:	bf28      	it	cs
 80090c2:	4613      	movcs	r3, r2
 80090c4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80090c6:	69fa      	ldr	r2, [r7, #28]
 80090c8:	69b9      	ldr	r1, [r7, #24]
 80090ca:	6978      	ldr	r0, [r7, #20]
 80090cc:	f7ff fed1 	bl	8008e72 <_WriteNoCheck>
    break;
 80090d0:	e009      	b.n	80090e6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	69b9      	ldr	r1, [r7, #24]
 80090d6:	6978      	ldr	r0, [r7, #20]
 80090d8:	f7ff fe6e 	bl	8008db8 <_WriteBlocking>
 80090dc:	61f8      	str	r0, [r7, #28]
    break;
 80090de:	e002      	b.n	80090e6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80090e0:	2300      	movs	r3, #0
 80090e2:	61fb      	str	r3, [r7, #28]
    break;
 80090e4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80090e6:	69fb      	ldr	r3, [r7, #28]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3720      	adds	r7, #32
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	20013578 	.word	0x20013578

080090f4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b088      	sub	sp, #32
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8009100:	4b0e      	ldr	r3, [pc, #56]	; (800913c <SEGGER_RTT_Write+0x48>)
 8009102:	61fb      	str	r3, [r7, #28]
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	b2db      	uxtb	r3, r3
 800910a:	2b00      	cmp	r3, #0
 800910c:	d101      	bne.n	8009112 <SEGGER_RTT_Write+0x1e>
 800910e:	f7ff fdfb 	bl	8008d08 <_DoInit>
  SEGGER_RTT_LOCK();
 8009112:	f3ef 8311 	mrs	r3, BASEPRI
 8009116:	f04f 0120 	mov.w	r1, #32
 800911a:	f381 8811 	msr	BASEPRI, r1
 800911e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	68b9      	ldr	r1, [r7, #8]
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	f7ff ff95 	bl	8009054 <SEGGER_RTT_WriteNoLock>
 800912a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800912c:	69bb      	ldr	r3, [r7, #24]
 800912e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8009132:	697b      	ldr	r3, [r7, #20]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3720      	adds	r7, #32
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	20013578 	.word	0x20013578

08009140 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8009140:	b580      	push	{r7, lr}
 8009142:	b088      	sub	sp, #32
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
 800914c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800914e:	4b3d      	ldr	r3, [pc, #244]	; (8009244 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8009150:	61bb      	str	r3, [r7, #24]
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	b2db      	uxtb	r3, r3
 8009158:	2b00      	cmp	r3, #0
 800915a:	d101      	bne.n	8009160 <SEGGER_RTT_AllocUpBuffer+0x20>
 800915c:	f7ff fdd4 	bl	8008d08 <_DoInit>
  SEGGER_RTT_LOCK();
 8009160:	f3ef 8311 	mrs	r3, BASEPRI
 8009164:	f04f 0120 	mov.w	r1, #32
 8009168:	f381 8811 	msr	BASEPRI, r1
 800916c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800916e:	4b35      	ldr	r3, [pc, #212]	; (8009244 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8009170:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8009176:	6939      	ldr	r1, [r7, #16]
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	1c5a      	adds	r2, r3, #1
 800917c:	4613      	mov	r3, r2
 800917e:	005b      	lsls	r3, r3, #1
 8009180:	4413      	add	r3, r2
 8009182:	00db      	lsls	r3, r3, #3
 8009184:	440b      	add	r3, r1
 8009186:	3304      	adds	r3, #4
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d008      	beq.n	80091a0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	3301      	adds	r3, #1
 8009192:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	69fa      	ldr	r2, [r7, #28]
 800919a:	429a      	cmp	r2, r3
 800919c:	dbeb      	blt.n	8009176 <SEGGER_RTT_AllocUpBuffer+0x36>
 800919e:	e000      	b.n	80091a2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80091a0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	69fa      	ldr	r2, [r7, #28]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	da3f      	bge.n	800922c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80091ac:	6939      	ldr	r1, [r7, #16]
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	1c5a      	adds	r2, r3, #1
 80091b2:	4613      	mov	r3, r2
 80091b4:	005b      	lsls	r3, r3, #1
 80091b6:	4413      	add	r3, r2
 80091b8:	00db      	lsls	r3, r3, #3
 80091ba:	440b      	add	r3, r1
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80091c0:	6939      	ldr	r1, [r7, #16]
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	1c5a      	adds	r2, r3, #1
 80091c6:	4613      	mov	r3, r2
 80091c8:	005b      	lsls	r3, r3, #1
 80091ca:	4413      	add	r3, r2
 80091cc:	00db      	lsls	r3, r3, #3
 80091ce:	440b      	add	r3, r1
 80091d0:	3304      	adds	r3, #4
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80091d6:	6939      	ldr	r1, [r7, #16]
 80091d8:	69fa      	ldr	r2, [r7, #28]
 80091da:	4613      	mov	r3, r2
 80091dc:	005b      	lsls	r3, r3, #1
 80091de:	4413      	add	r3, r2
 80091e0:	00db      	lsls	r3, r3, #3
 80091e2:	440b      	add	r3, r1
 80091e4:	3320      	adds	r3, #32
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80091ea:	6939      	ldr	r1, [r7, #16]
 80091ec:	69fa      	ldr	r2, [r7, #28]
 80091ee:	4613      	mov	r3, r2
 80091f0:	005b      	lsls	r3, r3, #1
 80091f2:	4413      	add	r3, r2
 80091f4:	00db      	lsls	r3, r3, #3
 80091f6:	440b      	add	r3, r1
 80091f8:	3328      	adds	r3, #40	; 0x28
 80091fa:	2200      	movs	r2, #0
 80091fc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80091fe:	6939      	ldr	r1, [r7, #16]
 8009200:	69fa      	ldr	r2, [r7, #28]
 8009202:	4613      	mov	r3, r2
 8009204:	005b      	lsls	r3, r3, #1
 8009206:	4413      	add	r3, r2
 8009208:	00db      	lsls	r3, r3, #3
 800920a:	440b      	add	r3, r1
 800920c:	3324      	adds	r3, #36	; 0x24
 800920e:	2200      	movs	r2, #0
 8009210:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8009212:	6939      	ldr	r1, [r7, #16]
 8009214:	69fa      	ldr	r2, [r7, #28]
 8009216:	4613      	mov	r3, r2
 8009218:	005b      	lsls	r3, r3, #1
 800921a:	4413      	add	r3, r2
 800921c:	00db      	lsls	r3, r3, #3
 800921e:	440b      	add	r3, r1
 8009220:	332c      	adds	r3, #44	; 0x2c
 8009222:	683a      	ldr	r2, [r7, #0]
 8009224:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8009226:	f3bf 8f5f 	dmb	sy
 800922a:	e002      	b.n	8009232 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800922c:	f04f 33ff 	mov.w	r3, #4294967295
 8009230:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8009238:	69fb      	ldr	r3, [r7, #28]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3720      	adds	r7, #32
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	20013578 	.word	0x20013578

08009248 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8009248:	b580      	push	{r7, lr}
 800924a:	b088      	sub	sp, #32
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]
 8009254:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8009256:	4b33      	ldr	r3, [pc, #204]	; (8009324 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8009258:	61bb      	str	r3, [r7, #24]
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	b2db      	uxtb	r3, r3
 8009260:	2b00      	cmp	r3, #0
 8009262:	d101      	bne.n	8009268 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8009264:	f7ff fd50 	bl	8008d08 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8009268:	4b2e      	ldr	r3, [pc, #184]	; (8009324 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800926a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	695b      	ldr	r3, [r3, #20]
 8009270:	461a      	mov	r2, r3
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	4293      	cmp	r3, r2
 8009276:	d24d      	bcs.n	8009314 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8009278:	f3ef 8311 	mrs	r3, BASEPRI
 800927c:	f04f 0120 	mov.w	r1, #32
 8009280:	f381 8811 	msr	BASEPRI, r1
 8009284:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d031      	beq.n	80092f0 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 800928c:	6979      	ldr	r1, [r7, #20]
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	4613      	mov	r3, r2
 8009292:	005b      	lsls	r3, r3, #1
 8009294:	4413      	add	r3, r2
 8009296:	00db      	lsls	r3, r3, #3
 8009298:	440b      	add	r3, r1
 800929a:	3360      	adds	r3, #96	; 0x60
 800929c:	68ba      	ldr	r2, [r7, #8]
 800929e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80092a0:	6979      	ldr	r1, [r7, #20]
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	4613      	mov	r3, r2
 80092a6:	005b      	lsls	r3, r3, #1
 80092a8:	4413      	add	r3, r2
 80092aa:	00db      	lsls	r3, r3, #3
 80092ac:	440b      	add	r3, r1
 80092ae:	3364      	adds	r3, #100	; 0x64
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80092b4:	6979      	ldr	r1, [r7, #20]
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	4613      	mov	r3, r2
 80092ba:	005b      	lsls	r3, r3, #1
 80092bc:	4413      	add	r3, r2
 80092be:	00db      	lsls	r3, r3, #3
 80092c0:	440b      	add	r3, r1
 80092c2:	3368      	adds	r3, #104	; 0x68
 80092c4:	683a      	ldr	r2, [r7, #0]
 80092c6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80092c8:	6979      	ldr	r1, [r7, #20]
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	4613      	mov	r3, r2
 80092ce:	005b      	lsls	r3, r3, #1
 80092d0:	4413      	add	r3, r2
 80092d2:	00db      	lsls	r3, r3, #3
 80092d4:	440b      	add	r3, r1
 80092d6:	3370      	adds	r3, #112	; 0x70
 80092d8:	2200      	movs	r2, #0
 80092da:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80092dc:	6979      	ldr	r1, [r7, #20]
 80092de:	68fa      	ldr	r2, [r7, #12]
 80092e0:	4613      	mov	r3, r2
 80092e2:	005b      	lsls	r3, r3, #1
 80092e4:	4413      	add	r3, r2
 80092e6:	00db      	lsls	r3, r3, #3
 80092e8:	440b      	add	r3, r1
 80092ea:	336c      	adds	r3, #108	; 0x6c
 80092ec:	2200      	movs	r2, #0
 80092ee:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80092f0:	6979      	ldr	r1, [r7, #20]
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	4613      	mov	r3, r2
 80092f6:	005b      	lsls	r3, r3, #1
 80092f8:	4413      	add	r3, r2
 80092fa:	00db      	lsls	r3, r3, #3
 80092fc:	440b      	add	r3, r1
 80092fe:	3374      	adds	r3, #116	; 0x74
 8009300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009302:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8009304:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800930e:	2300      	movs	r3, #0
 8009310:	61fb      	str	r3, [r7, #28]
 8009312:	e002      	b.n	800931a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8009314:	f04f 33ff 	mov.w	r3, #4294967295
 8009318:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800931a:	69fb      	ldr	r3, [r7, #28]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3720      	adds	r7, #32
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	20013578 	.word	0x20013578

08009328 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8009328:	b480      	push	{r7}
 800932a:	b087      	sub	sp, #28
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8009334:	2300      	movs	r3, #0
 8009336:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8009338:	e002      	b.n	8009340 <_EncodeStr+0x18>
    Len++;
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	3301      	adds	r3, #1
 800933e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8009340:	68ba      	ldr	r2, [r7, #8]
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	4413      	add	r3, r2
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1f6      	bne.n	800933a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800934c:	693a      	ldr	r2, [r7, #16]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	429a      	cmp	r2, r3
 8009352:	d901      	bls.n	8009358 <_EncodeStr+0x30>
    Len = Limit;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	2bfe      	cmp	r3, #254	; 0xfe
 800935c:	d806      	bhi.n	800936c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	1c5a      	adds	r2, r3, #1
 8009362:	60fa      	str	r2, [r7, #12]
 8009364:	693a      	ldr	r2, [r7, #16]
 8009366:	b2d2      	uxtb	r2, r2
 8009368:	701a      	strb	r2, [r3, #0]
 800936a:	e011      	b.n	8009390 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	1c5a      	adds	r2, r3, #1
 8009370:	60fa      	str	r2, [r7, #12]
 8009372:	22ff      	movs	r2, #255	; 0xff
 8009374:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	1c5a      	adds	r2, r3, #1
 800937a:	60fa      	str	r2, [r7, #12]
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	b2d2      	uxtb	r2, r2
 8009380:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	0a19      	lsrs	r1, r3, #8
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	1c5a      	adds	r2, r3, #1
 800938a:	60fa      	str	r2, [r7, #12]
 800938c:	b2ca      	uxtb	r2, r1
 800938e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8009390:	2300      	movs	r3, #0
 8009392:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8009394:	e00a      	b.n	80093ac <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8009396:	68ba      	ldr	r2, [r7, #8]
 8009398:	1c53      	adds	r3, r2, #1
 800939a:	60bb      	str	r3, [r7, #8]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	1c59      	adds	r1, r3, #1
 80093a0:	60f9      	str	r1, [r7, #12]
 80093a2:	7812      	ldrb	r2, [r2, #0]
 80093a4:	701a      	strb	r2, [r3, #0]
    n++;
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	3301      	adds	r3, #1
 80093aa:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80093ac:	697a      	ldr	r2, [r7, #20]
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d3f0      	bcc.n	8009396 <_EncodeStr+0x6e>
  }
  return pPayload;
 80093b4:	68fb      	ldr	r3, [r7, #12]
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	371c      	adds	r7, #28
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr

080093c2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80093c2:	b480      	push	{r7}
 80093c4:	b083      	sub	sp, #12
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	3304      	adds	r3, #4
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	370c      	adds	r7, #12
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
	...

080093dc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80093e2:	4b35      	ldr	r3, [pc, #212]	; (80094b8 <_HandleIncomingPacket+0xdc>)
 80093e4:	7e1b      	ldrb	r3, [r3, #24]
 80093e6:	4618      	mov	r0, r3
 80093e8:	1cfb      	adds	r3, r7, #3
 80093ea:	2201      	movs	r2, #1
 80093ec:	4619      	mov	r1, r3
 80093ee:	f7ff fdab 	bl	8008f48 <SEGGER_RTT_ReadNoLock>
 80093f2:	4603      	mov	r3, r0
 80093f4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	dd59      	ble.n	80094b0 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 80093fc:	78fb      	ldrb	r3, [r7, #3]
 80093fe:	2b80      	cmp	r3, #128	; 0x80
 8009400:	d032      	beq.n	8009468 <_HandleIncomingPacket+0x8c>
 8009402:	2b80      	cmp	r3, #128	; 0x80
 8009404:	dc42      	bgt.n	800948c <_HandleIncomingPacket+0xb0>
 8009406:	2b07      	cmp	r3, #7
 8009408:	dc16      	bgt.n	8009438 <_HandleIncomingPacket+0x5c>
 800940a:	2b00      	cmp	r3, #0
 800940c:	dd3e      	ble.n	800948c <_HandleIncomingPacket+0xb0>
 800940e:	3b01      	subs	r3, #1
 8009410:	2b06      	cmp	r3, #6
 8009412:	d83b      	bhi.n	800948c <_HandleIncomingPacket+0xb0>
 8009414:	a201      	add	r2, pc, #4	; (adr r2, 800941c <_HandleIncomingPacket+0x40>)
 8009416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800941a:	bf00      	nop
 800941c:	0800943f 	.word	0x0800943f
 8009420:	08009445 	.word	0x08009445
 8009424:	0800944b 	.word	0x0800944b
 8009428:	08009451 	.word	0x08009451
 800942c:	08009457 	.word	0x08009457
 8009430:	0800945d 	.word	0x0800945d
 8009434:	08009463 	.word	0x08009463
 8009438:	2b7f      	cmp	r3, #127	; 0x7f
 800943a:	d034      	beq.n	80094a6 <_HandleIncomingPacket+0xca>
 800943c:	e026      	b.n	800948c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800943e:	f000 fba5 	bl	8009b8c <SEGGER_SYSVIEW_Start>
      break;
 8009442:	e035      	b.n	80094b0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8009444:	f000 fc5c 	bl	8009d00 <SEGGER_SYSVIEW_Stop>
      break;
 8009448:	e032      	b.n	80094b0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800944a:	f000 fe35 	bl	800a0b8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800944e:	e02f      	b.n	80094b0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8009450:	f000 fdfa 	bl	800a048 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8009454:	e02c      	b.n	80094b0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8009456:	f000 fc79 	bl	8009d4c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800945a:	e029      	b.n	80094b0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800945c:	f001 f868 	bl	800a530 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8009460:	e026      	b.n	80094b0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8009462:	f001 f847 	bl	800a4f4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8009466:	e023      	b.n	80094b0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8009468:	4b13      	ldr	r3, [pc, #76]	; (80094b8 <_HandleIncomingPacket+0xdc>)
 800946a:	7e1b      	ldrb	r3, [r3, #24]
 800946c:	4618      	mov	r0, r3
 800946e:	1cfb      	adds	r3, r7, #3
 8009470:	2201      	movs	r2, #1
 8009472:	4619      	mov	r1, r3
 8009474:	f7ff fd68 	bl	8008f48 <SEGGER_RTT_ReadNoLock>
 8009478:	4603      	mov	r3, r0
 800947a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2b00      	cmp	r3, #0
 8009480:	dd13      	ble.n	80094aa <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8009482:	78fb      	ldrb	r3, [r7, #3]
 8009484:	4618      	mov	r0, r3
 8009486:	f000 ffb5 	bl	800a3f4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800948a:	e00e      	b.n	80094aa <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800948c:	78fb      	ldrb	r3, [r7, #3]
 800948e:	b25b      	sxtb	r3, r3
 8009490:	2b00      	cmp	r3, #0
 8009492:	da0c      	bge.n	80094ae <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8009494:	4b08      	ldr	r3, [pc, #32]	; (80094b8 <_HandleIncomingPacket+0xdc>)
 8009496:	7e1b      	ldrb	r3, [r3, #24]
 8009498:	4618      	mov	r0, r3
 800949a:	1cfb      	adds	r3, r7, #3
 800949c:	2201      	movs	r2, #1
 800949e:	4619      	mov	r1, r3
 80094a0:	f7ff fd52 	bl	8008f48 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80094a4:	e003      	b.n	80094ae <_HandleIncomingPacket+0xd2>
      break;
 80094a6:	bf00      	nop
 80094a8:	e002      	b.n	80094b0 <_HandleIncomingPacket+0xd4>
      break;
 80094aa:	bf00      	nop
 80094ac:	e000      	b.n	80094b0 <_HandleIncomingPacket+0xd4>
      break;
 80094ae:	bf00      	nop
    }
  }
}
 80094b0:	bf00      	nop
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	20014a38 	.word	0x20014a38

080094bc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80094bc:	b580      	push	{r7, lr}
 80094be:	b08c      	sub	sp, #48	; 0x30
 80094c0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80094c2:	2301      	movs	r3, #1
 80094c4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80094c6:	1d3b      	adds	r3, r7, #4
 80094c8:	3301      	adds	r3, #1
 80094ca:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094d0:	4b31      	ldr	r3, [pc, #196]	; (8009598 <_TrySendOverflowPacket+0xdc>)
 80094d2:	695b      	ldr	r3, [r3, #20]
 80094d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80094d6:	e00b      	b.n	80094f0 <_TrySendOverflowPacket+0x34>
 80094d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094da:	b2da      	uxtb	r2, r3
 80094dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094de:	1c59      	adds	r1, r3, #1
 80094e0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80094e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80094e6:	b2d2      	uxtb	r2, r2
 80094e8:	701a      	strb	r2, [r3, #0]
 80094ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ec:	09db      	lsrs	r3, r3, #7
 80094ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80094f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f2:	2b7f      	cmp	r3, #127	; 0x7f
 80094f4:	d8f0      	bhi.n	80094d8 <_TrySendOverflowPacket+0x1c>
 80094f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f8:	1c5a      	adds	r2, r3, #1
 80094fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094fe:	b2d2      	uxtb	r2, r2
 8009500:	701a      	strb	r2, [r3, #0]
 8009502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009504:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009506:	4b25      	ldr	r3, [pc, #148]	; (800959c <_TrySendOverflowPacket+0xe0>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800950c:	4b22      	ldr	r3, [pc, #136]	; (8009598 <_TrySendOverflowPacket+0xdc>)
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	69ba      	ldr	r2, [r7, #24]
 8009512:	1ad3      	subs	r3, r2, r3
 8009514:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	627b      	str	r3, [r7, #36]	; 0x24
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	623b      	str	r3, [r7, #32]
 800951e:	e00b      	b.n	8009538 <_TrySendOverflowPacket+0x7c>
 8009520:	6a3b      	ldr	r3, [r7, #32]
 8009522:	b2da      	uxtb	r2, r3
 8009524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009526:	1c59      	adds	r1, r3, #1
 8009528:	6279      	str	r1, [r7, #36]	; 0x24
 800952a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800952e:	b2d2      	uxtb	r2, r2
 8009530:	701a      	strb	r2, [r3, #0]
 8009532:	6a3b      	ldr	r3, [r7, #32]
 8009534:	09db      	lsrs	r3, r3, #7
 8009536:	623b      	str	r3, [r7, #32]
 8009538:	6a3b      	ldr	r3, [r7, #32]
 800953a:	2b7f      	cmp	r3, #127	; 0x7f
 800953c:	d8f0      	bhi.n	8009520 <_TrySendOverflowPacket+0x64>
 800953e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009540:	1c5a      	adds	r2, r3, #1
 8009542:	627a      	str	r2, [r7, #36]	; 0x24
 8009544:	6a3a      	ldr	r2, [r7, #32]
 8009546:	b2d2      	uxtb	r2, r2
 8009548:	701a      	strb	r2, [r3, #0]
 800954a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800954e:	4b12      	ldr	r3, [pc, #72]	; (8009598 <_TrySendOverflowPacket+0xdc>)
 8009550:	785b      	ldrb	r3, [r3, #1]
 8009552:	4618      	mov	r0, r3
 8009554:	1d3b      	adds	r3, r7, #4
 8009556:	69fa      	ldr	r2, [r7, #28]
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	461a      	mov	r2, r3
 800955c:	1d3b      	adds	r3, r7, #4
 800955e:	4619      	mov	r1, r3
 8009560:	f7f6 fe56 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8009564:	4603      	mov	r3, r0
 8009566:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d009      	beq.n	8009582 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800956e:	4a0a      	ldr	r2, [pc, #40]	; (8009598 <_TrySendOverflowPacket+0xdc>)
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8009574:	4b08      	ldr	r3, [pc, #32]	; (8009598 <_TrySendOverflowPacket+0xdc>)
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	3b01      	subs	r3, #1
 800957a:	b2da      	uxtb	r2, r3
 800957c:	4b06      	ldr	r3, [pc, #24]	; (8009598 <_TrySendOverflowPacket+0xdc>)
 800957e:	701a      	strb	r2, [r3, #0]
 8009580:	e004      	b.n	800958c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8009582:	4b05      	ldr	r3, [pc, #20]	; (8009598 <_TrySendOverflowPacket+0xdc>)
 8009584:	695b      	ldr	r3, [r3, #20]
 8009586:	3301      	adds	r3, #1
 8009588:	4a03      	ldr	r2, [pc, #12]	; (8009598 <_TrySendOverflowPacket+0xdc>)
 800958a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800958c:	693b      	ldr	r3, [r7, #16]
}
 800958e:	4618      	mov	r0, r3
 8009590:	3730      	adds	r7, #48	; 0x30
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	20014a38 	.word	0x20014a38
 800959c:	e0001004 	.word	0xe0001004

080095a0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b08a      	sub	sp, #40	; 0x28
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80095ac:	4b6c      	ldr	r3, [pc, #432]	; (8009760 <_SendPacket+0x1c0>)
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d010      	beq.n	80095d6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80095b4:	4b6a      	ldr	r3, [pc, #424]	; (8009760 <_SendPacket+0x1c0>)
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f000 80a3 	beq.w	8009704 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80095be:	4b68      	ldr	r3, [pc, #416]	; (8009760 <_SendPacket+0x1c0>)
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d109      	bne.n	80095da <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80095c6:	f7ff ff79 	bl	80094bc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80095ca:	4b65      	ldr	r3, [pc, #404]	; (8009760 <_SendPacket+0x1c0>)
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	f040 809a 	bne.w	8009708 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80095d4:	e001      	b.n	80095da <_SendPacket+0x3a>
    goto Send;
 80095d6:	bf00      	nop
 80095d8:	e000      	b.n	80095dc <_SendPacket+0x3c>
Send:
 80095da:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b1f      	cmp	r3, #31
 80095e0:	d809      	bhi.n	80095f6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80095e2:	4b5f      	ldr	r3, [pc, #380]	; (8009760 <_SendPacket+0x1c0>)
 80095e4:	69da      	ldr	r2, [r3, #28]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	fa22 f303 	lsr.w	r3, r2, r3
 80095ec:	f003 0301 	and.w	r3, r3, #1
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f040 808b 	bne.w	800970c <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2b17      	cmp	r3, #23
 80095fa:	d807      	bhi.n	800960c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	3b01      	subs	r3, #1
 8009600:	60fb      	str	r3, [r7, #12]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	b2da      	uxtb	r2, r3
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	701a      	strb	r2, [r3, #0]
 800960a:	e03d      	b.n	8009688 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800960c:	68ba      	ldr	r2, [r7, #8]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	1ad3      	subs	r3, r2, r3
 8009612:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	2b7f      	cmp	r3, #127	; 0x7f
 8009618:	d912      	bls.n	8009640 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	09da      	lsrs	r2, r3, #7
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	3b01      	subs	r3, #1
 8009622:	60fb      	str	r3, [r7, #12]
 8009624:	b2d2      	uxtb	r2, r2
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800962a:	69fb      	ldr	r3, [r7, #28]
 800962c:	b2db      	uxtb	r3, r3
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	3a01      	subs	r2, #1
 8009632:	60fa      	str	r2, [r7, #12]
 8009634:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009638:	b2da      	uxtb	r2, r3
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	701a      	strb	r2, [r3, #0]
 800963e:	e006      	b.n	800964e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	3b01      	subs	r3, #1
 8009644:	60fb      	str	r3, [r7, #12]
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	b2da      	uxtb	r2, r3
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2b7f      	cmp	r3, #127	; 0x7f
 8009652:	d912      	bls.n	800967a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	09da      	lsrs	r2, r3, #7
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	3b01      	subs	r3, #1
 800965c:	60fb      	str	r3, [r7, #12]
 800965e:	b2d2      	uxtb	r2, r2
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	b2db      	uxtb	r3, r3
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	3a01      	subs	r2, #1
 800966c:	60fa      	str	r2, [r7, #12]
 800966e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009672:	b2da      	uxtb	r2, r3
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	701a      	strb	r2, [r3, #0]
 8009678:	e006      	b.n	8009688 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	3b01      	subs	r3, #1
 800967e:	60fb      	str	r3, [r7, #12]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	b2da      	uxtb	r2, r3
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009688:	4b36      	ldr	r3, [pc, #216]	; (8009764 <_SendPacket+0x1c4>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800968e:	4b34      	ldr	r3, [pc, #208]	; (8009760 <_SendPacket+0x1c0>)
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	69ba      	ldr	r2, [r7, #24]
 8009694:	1ad3      	subs	r3, r2, r3
 8009696:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	627b      	str	r3, [r7, #36]	; 0x24
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	623b      	str	r3, [r7, #32]
 80096a0:	e00b      	b.n	80096ba <_SendPacket+0x11a>
 80096a2:	6a3b      	ldr	r3, [r7, #32]
 80096a4:	b2da      	uxtb	r2, r3
 80096a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a8:	1c59      	adds	r1, r3, #1
 80096aa:	6279      	str	r1, [r7, #36]	; 0x24
 80096ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80096b0:	b2d2      	uxtb	r2, r2
 80096b2:	701a      	strb	r2, [r3, #0]
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	09db      	lsrs	r3, r3, #7
 80096b8:	623b      	str	r3, [r7, #32]
 80096ba:	6a3b      	ldr	r3, [r7, #32]
 80096bc:	2b7f      	cmp	r3, #127	; 0x7f
 80096be:	d8f0      	bhi.n	80096a2 <_SendPacket+0x102>
 80096c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c2:	1c5a      	adds	r2, r3, #1
 80096c4:	627a      	str	r2, [r7, #36]	; 0x24
 80096c6:	6a3a      	ldr	r2, [r7, #32]
 80096c8:	b2d2      	uxtb	r2, r2
 80096ca:	701a      	strb	r2, [r3, #0]
 80096cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ce:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80096d0:	4b23      	ldr	r3, [pc, #140]	; (8009760 <_SendPacket+0x1c0>)
 80096d2:	785b      	ldrb	r3, [r3, #1]
 80096d4:	4618      	mov	r0, r3
 80096d6:	68ba      	ldr	r2, [r7, #8]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	1ad3      	subs	r3, r2, r3
 80096dc:	461a      	mov	r2, r3
 80096de:	68f9      	ldr	r1, [r7, #12]
 80096e0:	f7f6 fd96 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80096e4:	4603      	mov	r3, r0
 80096e6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d003      	beq.n	80096f6 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80096ee:	4a1c      	ldr	r2, [pc, #112]	; (8009760 <_SendPacket+0x1c0>)
 80096f0:	69bb      	ldr	r3, [r7, #24]
 80096f2:	60d3      	str	r3, [r2, #12]
 80096f4:	e00b      	b.n	800970e <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80096f6:	4b1a      	ldr	r3, [pc, #104]	; (8009760 <_SendPacket+0x1c0>)
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	3301      	adds	r3, #1
 80096fc:	b2da      	uxtb	r2, r3
 80096fe:	4b18      	ldr	r3, [pc, #96]	; (8009760 <_SendPacket+0x1c0>)
 8009700:	701a      	strb	r2, [r3, #0]
 8009702:	e004      	b.n	800970e <_SendPacket+0x16e>
    goto SendDone;
 8009704:	bf00      	nop
 8009706:	e002      	b.n	800970e <_SendPacket+0x16e>
      goto SendDone;
 8009708:	bf00      	nop
 800970a:	e000      	b.n	800970e <_SendPacket+0x16e>
      goto SendDone;
 800970c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800970e:	4b14      	ldr	r3, [pc, #80]	; (8009760 <_SendPacket+0x1c0>)
 8009710:	7e1b      	ldrb	r3, [r3, #24]
 8009712:	4619      	mov	r1, r3
 8009714:	4a14      	ldr	r2, [pc, #80]	; (8009768 <_SendPacket+0x1c8>)
 8009716:	460b      	mov	r3, r1
 8009718:	005b      	lsls	r3, r3, #1
 800971a:	440b      	add	r3, r1
 800971c:	00db      	lsls	r3, r3, #3
 800971e:	4413      	add	r3, r2
 8009720:	336c      	adds	r3, #108	; 0x6c
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	4b0e      	ldr	r3, [pc, #56]	; (8009760 <_SendPacket+0x1c0>)
 8009726:	7e1b      	ldrb	r3, [r3, #24]
 8009728:	4618      	mov	r0, r3
 800972a:	490f      	ldr	r1, [pc, #60]	; (8009768 <_SendPacket+0x1c8>)
 800972c:	4603      	mov	r3, r0
 800972e:	005b      	lsls	r3, r3, #1
 8009730:	4403      	add	r3, r0
 8009732:	00db      	lsls	r3, r3, #3
 8009734:	440b      	add	r3, r1
 8009736:	3370      	adds	r3, #112	; 0x70
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	429a      	cmp	r2, r3
 800973c:	d00b      	beq.n	8009756 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800973e:	4b08      	ldr	r3, [pc, #32]	; (8009760 <_SendPacket+0x1c0>)
 8009740:	789b      	ldrb	r3, [r3, #2]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d107      	bne.n	8009756 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8009746:	4b06      	ldr	r3, [pc, #24]	; (8009760 <_SendPacket+0x1c0>)
 8009748:	2201      	movs	r2, #1
 800974a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800974c:	f7ff fe46 	bl	80093dc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8009750:	4b03      	ldr	r3, [pc, #12]	; (8009760 <_SendPacket+0x1c0>)
 8009752:	2200      	movs	r2, #0
 8009754:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8009756:	bf00      	nop
 8009758:	3728      	adds	r7, #40	; 0x28
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	20014a38 	.word	0x20014a38
 8009764:	e0001004 	.word	0xe0001004
 8009768:	20013578 	.word	0x20013578

0800976c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800976c:	b580      	push	{r7, lr}
 800976e:	b086      	sub	sp, #24
 8009770:	af02      	add	r7, sp, #8
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
 8009778:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800977a:	2300      	movs	r3, #0
 800977c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009780:	4917      	ldr	r1, [pc, #92]	; (80097e0 <SEGGER_SYSVIEW_Init+0x74>)
 8009782:	4818      	ldr	r0, [pc, #96]	; (80097e4 <SEGGER_SYSVIEW_Init+0x78>)
 8009784:	f7ff fcdc 	bl	8009140 <SEGGER_RTT_AllocUpBuffer>
 8009788:	4603      	mov	r3, r0
 800978a:	b2da      	uxtb	r2, r3
 800978c:	4b16      	ldr	r3, [pc, #88]	; (80097e8 <SEGGER_SYSVIEW_Init+0x7c>)
 800978e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8009790:	4b15      	ldr	r3, [pc, #84]	; (80097e8 <SEGGER_SYSVIEW_Init+0x7c>)
 8009792:	785a      	ldrb	r2, [r3, #1]
 8009794:	4b14      	ldr	r3, [pc, #80]	; (80097e8 <SEGGER_SYSVIEW_Init+0x7c>)
 8009796:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8009798:	4b13      	ldr	r3, [pc, #76]	; (80097e8 <SEGGER_SYSVIEW_Init+0x7c>)
 800979a:	7e1b      	ldrb	r3, [r3, #24]
 800979c:	4618      	mov	r0, r3
 800979e:	2300      	movs	r3, #0
 80097a0:	9300      	str	r3, [sp, #0]
 80097a2:	2308      	movs	r3, #8
 80097a4:	4a11      	ldr	r2, [pc, #68]	; (80097ec <SEGGER_SYSVIEW_Init+0x80>)
 80097a6:	490f      	ldr	r1, [pc, #60]	; (80097e4 <SEGGER_SYSVIEW_Init+0x78>)
 80097a8:	f7ff fd4e 	bl	8009248 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80097ac:	4b0e      	ldr	r3, [pc, #56]	; (80097e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80097ae:	2200      	movs	r2, #0
 80097b0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80097b2:	4b0f      	ldr	r3, [pc, #60]	; (80097f0 <SEGGER_SYSVIEW_Init+0x84>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a0c      	ldr	r2, [pc, #48]	; (80097e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80097b8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80097ba:	4a0b      	ldr	r2, [pc, #44]	; (80097e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80097c0:	4a09      	ldr	r2, [pc, #36]	; (80097e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80097c6:	4a08      	ldr	r2, [pc, #32]	; (80097e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80097cc:	4a06      	ldr	r2, [pc, #24]	; (80097e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80097d2:	4b05      	ldr	r3, [pc, #20]	; (80097e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80097d4:	2200      	movs	r2, #0
 80097d6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80097d8:	bf00      	nop
 80097da:	3710      	adds	r7, #16
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	20013a30 	.word	0x20013a30
 80097e4:	0800d220 	.word	0x0800d220
 80097e8:	20014a38 	.word	0x20014a38
 80097ec:	20014a30 	.word	0x20014a30
 80097f0:	e0001004 	.word	0xe0001004

080097f4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80097fc:	4a04      	ldr	r2, [pc, #16]	; (8009810 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6113      	str	r3, [r2, #16]
}
 8009802:	bf00      	nop
 8009804:	370c      	adds	r7, #12
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop
 8009810:	20014a38 	.word	0x20014a38

08009814 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800981c:	f3ef 8311 	mrs	r3, BASEPRI
 8009820:	f04f 0120 	mov.w	r1, #32
 8009824:	f381 8811 	msr	BASEPRI, r1
 8009828:	60fb      	str	r3, [r7, #12]
 800982a:	4808      	ldr	r0, [pc, #32]	; (800984c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800982c:	f7ff fdc9 	bl	80093c2 <_PreparePacket>
 8009830:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	68b9      	ldr	r1, [r7, #8]
 8009836:	68b8      	ldr	r0, [r7, #8]
 8009838:	f7ff feb2 	bl	80095a0 <_SendPacket>
  RECORD_END();
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f383 8811 	msr	BASEPRI, r3
}
 8009842:	bf00      	nop
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	20014a68 	.word	0x20014a68

08009850 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8009850:	b580      	push	{r7, lr}
 8009852:	b088      	sub	sp, #32
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800985a:	f3ef 8311 	mrs	r3, BASEPRI
 800985e:	f04f 0120 	mov.w	r1, #32
 8009862:	f381 8811 	msr	BASEPRI, r1
 8009866:	617b      	str	r3, [r7, #20]
 8009868:	4816      	ldr	r0, [pc, #88]	; (80098c4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800986a:	f7ff fdaa 	bl	80093c2 <_PreparePacket>
 800986e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	61fb      	str	r3, [r7, #28]
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	61bb      	str	r3, [r7, #24]
 800987c:	e00b      	b.n	8009896 <SEGGER_SYSVIEW_RecordU32+0x46>
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	b2da      	uxtb	r2, r3
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	1c59      	adds	r1, r3, #1
 8009886:	61f9      	str	r1, [r7, #28]
 8009888:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800988c:	b2d2      	uxtb	r2, r2
 800988e:	701a      	strb	r2, [r3, #0]
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	09db      	lsrs	r3, r3, #7
 8009894:	61bb      	str	r3, [r7, #24]
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	2b7f      	cmp	r3, #127	; 0x7f
 800989a:	d8f0      	bhi.n	800987e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	1c5a      	adds	r2, r3, #1
 80098a0:	61fa      	str	r2, [r7, #28]
 80098a2:	69ba      	ldr	r2, [r7, #24]
 80098a4:	b2d2      	uxtb	r2, r2
 80098a6:	701a      	strb	r2, [r3, #0]
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	68f9      	ldr	r1, [r7, #12]
 80098b0:	6938      	ldr	r0, [r7, #16]
 80098b2:	f7ff fe75 	bl	80095a0 <_SendPacket>
  RECORD_END();
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	f383 8811 	msr	BASEPRI, r3
}
 80098bc:	bf00      	nop
 80098be:	3720      	adds	r7, #32
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	20014a68 	.word	0x20014a68

080098c8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b08c      	sub	sp, #48	; 0x30
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80098d4:	f3ef 8311 	mrs	r3, BASEPRI
 80098d8:	f04f 0120 	mov.w	r1, #32
 80098dc:	f381 8811 	msr	BASEPRI, r1
 80098e0:	61fb      	str	r3, [r7, #28]
 80098e2:	4825      	ldr	r0, [pc, #148]	; (8009978 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80098e4:	f7ff fd6d 	bl	80093c2 <_PreparePacket>
 80098e8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80098f6:	e00b      	b.n	8009910 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80098f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fa:	b2da      	uxtb	r2, r3
 80098fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098fe:	1c59      	adds	r1, r3, #1
 8009900:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009902:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009906:	b2d2      	uxtb	r2, r2
 8009908:	701a      	strb	r2, [r3, #0]
 800990a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990c:	09db      	lsrs	r3, r3, #7
 800990e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009912:	2b7f      	cmp	r3, #127	; 0x7f
 8009914:	d8f0      	bhi.n	80098f8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8009916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009918:	1c5a      	adds	r2, r3, #1
 800991a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800991c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800991e:	b2d2      	uxtb	r2, r2
 8009920:	701a      	strb	r2, [r3, #0]
 8009922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009924:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	627b      	str	r3, [r7, #36]	; 0x24
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	623b      	str	r3, [r7, #32]
 800992e:	e00b      	b.n	8009948 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8009930:	6a3b      	ldr	r3, [r7, #32]
 8009932:	b2da      	uxtb	r2, r3
 8009934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009936:	1c59      	adds	r1, r3, #1
 8009938:	6279      	str	r1, [r7, #36]	; 0x24
 800993a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800993e:	b2d2      	uxtb	r2, r2
 8009940:	701a      	strb	r2, [r3, #0]
 8009942:	6a3b      	ldr	r3, [r7, #32]
 8009944:	09db      	lsrs	r3, r3, #7
 8009946:	623b      	str	r3, [r7, #32]
 8009948:	6a3b      	ldr	r3, [r7, #32]
 800994a:	2b7f      	cmp	r3, #127	; 0x7f
 800994c:	d8f0      	bhi.n	8009930 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800994e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009950:	1c5a      	adds	r2, r3, #1
 8009952:	627a      	str	r2, [r7, #36]	; 0x24
 8009954:	6a3a      	ldr	r2, [r7, #32]
 8009956:	b2d2      	uxtb	r2, r2
 8009958:	701a      	strb	r2, [r3, #0]
 800995a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	6979      	ldr	r1, [r7, #20]
 8009962:	69b8      	ldr	r0, [r7, #24]
 8009964:	f7ff fe1c 	bl	80095a0 <_SendPacket>
  RECORD_END();
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	f383 8811 	msr	BASEPRI, r3
}
 800996e:	bf00      	nop
 8009970:	3730      	adds	r7, #48	; 0x30
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	20014a68 	.word	0x20014a68

0800997c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800997c:	b580      	push	{r7, lr}
 800997e:	b08e      	sub	sp, #56	; 0x38
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	607a      	str	r2, [r7, #4]
 8009988:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800998a:	f3ef 8311 	mrs	r3, BASEPRI
 800998e:	f04f 0120 	mov.w	r1, #32
 8009992:	f381 8811 	msr	BASEPRI, r1
 8009996:	61fb      	str	r3, [r7, #28]
 8009998:	4832      	ldr	r0, [pc, #200]	; (8009a64 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800999a:	f7ff fd12 	bl	80093c2 <_PreparePacket>
 800999e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	637b      	str	r3, [r7, #52]	; 0x34
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	633b      	str	r3, [r7, #48]	; 0x30
 80099ac:	e00b      	b.n	80099c6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80099ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b0:	b2da      	uxtb	r2, r3
 80099b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b4:	1c59      	adds	r1, r3, #1
 80099b6:	6379      	str	r1, [r7, #52]	; 0x34
 80099b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80099bc:	b2d2      	uxtb	r2, r2
 80099be:	701a      	strb	r2, [r3, #0]
 80099c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c2:	09db      	lsrs	r3, r3, #7
 80099c4:	633b      	str	r3, [r7, #48]	; 0x30
 80099c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c8:	2b7f      	cmp	r3, #127	; 0x7f
 80099ca:	d8f0      	bhi.n	80099ae <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80099cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ce:	1c5a      	adds	r2, r3, #1
 80099d0:	637a      	str	r2, [r7, #52]	; 0x34
 80099d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099d4:	b2d2      	uxtb	r2, r2
 80099d6:	701a      	strb	r2, [r3, #0]
 80099d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80099e4:	e00b      	b.n	80099fe <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80099e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e8:	b2da      	uxtb	r2, r3
 80099ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ec:	1c59      	adds	r1, r3, #1
 80099ee:	62f9      	str	r1, [r7, #44]	; 0x2c
 80099f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80099f4:	b2d2      	uxtb	r2, r2
 80099f6:	701a      	strb	r2, [r3, #0]
 80099f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fa:	09db      	lsrs	r3, r3, #7
 80099fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80099fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a00:	2b7f      	cmp	r3, #127	; 0x7f
 8009a02:	d8f0      	bhi.n	80099e6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8009a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a06:	1c5a      	adds	r2, r3, #1
 8009a08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a0c:	b2d2      	uxtb	r2, r2
 8009a0e:	701a      	strb	r2, [r3, #0]
 8009a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a12:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	627b      	str	r3, [r7, #36]	; 0x24
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	623b      	str	r3, [r7, #32]
 8009a1c:	e00b      	b.n	8009a36 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8009a1e:	6a3b      	ldr	r3, [r7, #32]
 8009a20:	b2da      	uxtb	r2, r3
 8009a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a24:	1c59      	adds	r1, r3, #1
 8009a26:	6279      	str	r1, [r7, #36]	; 0x24
 8009a28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009a2c:	b2d2      	uxtb	r2, r2
 8009a2e:	701a      	strb	r2, [r3, #0]
 8009a30:	6a3b      	ldr	r3, [r7, #32]
 8009a32:	09db      	lsrs	r3, r3, #7
 8009a34:	623b      	str	r3, [r7, #32]
 8009a36:	6a3b      	ldr	r3, [r7, #32]
 8009a38:	2b7f      	cmp	r3, #127	; 0x7f
 8009a3a:	d8f0      	bhi.n	8009a1e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3e:	1c5a      	adds	r2, r3, #1
 8009a40:	627a      	str	r2, [r7, #36]	; 0x24
 8009a42:	6a3a      	ldr	r2, [r7, #32]
 8009a44:	b2d2      	uxtb	r2, r2
 8009a46:	701a      	strb	r2, [r3, #0]
 8009a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	6979      	ldr	r1, [r7, #20]
 8009a50:	69b8      	ldr	r0, [r7, #24]
 8009a52:	f7ff fda5 	bl	80095a0 <_SendPacket>
  RECORD_END();
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	f383 8811 	msr	BASEPRI, r3
}
 8009a5c:	bf00      	nop
 8009a5e:	3738      	adds	r7, #56	; 0x38
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	20014a68 	.word	0x20014a68

08009a68 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b090      	sub	sp, #64	; 0x40
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	607a      	str	r2, [r7, #4]
 8009a74:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009a76:	f3ef 8311 	mrs	r3, BASEPRI
 8009a7a:	f04f 0120 	mov.w	r1, #32
 8009a7e:	f381 8811 	msr	BASEPRI, r1
 8009a82:	61fb      	str	r3, [r7, #28]
 8009a84:	4840      	ldr	r0, [pc, #256]	; (8009b88 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8009a86:	f7ff fc9c 	bl	80093c2 <_PreparePacket>
 8009a8a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a98:	e00b      	b.n	8009ab2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8009a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9c:	b2da      	uxtb	r2, r3
 8009a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aa0:	1c59      	adds	r1, r3, #1
 8009aa2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009aa4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009aa8:	b2d2      	uxtb	r2, r2
 8009aaa:	701a      	strb	r2, [r3, #0]
 8009aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aae:	09db      	lsrs	r3, r3, #7
 8009ab0:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab4:	2b7f      	cmp	r3, #127	; 0x7f
 8009ab6:	d8f0      	bhi.n	8009a9a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8009ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aba:	1c5a      	adds	r2, r3, #1
 8009abc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009abe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ac0:	b2d2      	uxtb	r2, r2
 8009ac2:	701a      	strb	r2, [r3, #0]
 8009ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ac6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	637b      	str	r3, [r7, #52]	; 0x34
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	633b      	str	r3, [r7, #48]	; 0x30
 8009ad0:	e00b      	b.n	8009aea <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8009ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad4:	b2da      	uxtb	r2, r3
 8009ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad8:	1c59      	adds	r1, r3, #1
 8009ada:	6379      	str	r1, [r7, #52]	; 0x34
 8009adc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009ae0:	b2d2      	uxtb	r2, r2
 8009ae2:	701a      	strb	r2, [r3, #0]
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae6:	09db      	lsrs	r3, r3, #7
 8009ae8:	633b      	str	r3, [r7, #48]	; 0x30
 8009aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aec:	2b7f      	cmp	r3, #127	; 0x7f
 8009aee:	d8f0      	bhi.n	8009ad2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8009af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af2:	1c5a      	adds	r2, r3, #1
 8009af4:	637a      	str	r2, [r7, #52]	; 0x34
 8009af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009af8:	b2d2      	uxtb	r2, r2
 8009afa:	701a      	strb	r2, [r3, #0]
 8009afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009afe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b08:	e00b      	b.n	8009b22 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8009b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0c:	b2da      	uxtb	r2, r3
 8009b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b10:	1c59      	adds	r1, r3, #1
 8009b12:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009b14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009b18:	b2d2      	uxtb	r2, r2
 8009b1a:	701a      	strb	r2, [r3, #0]
 8009b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1e:	09db      	lsrs	r3, r3, #7
 8009b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b24:	2b7f      	cmp	r3, #127	; 0x7f
 8009b26:	d8f0      	bhi.n	8009b0a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8009b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b2a:	1c5a      	adds	r2, r3, #1
 8009b2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b30:	b2d2      	uxtb	r2, r2
 8009b32:	701a      	strb	r2, [r3, #0]
 8009b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b36:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8009b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b3e:	623b      	str	r3, [r7, #32]
 8009b40:	e00b      	b.n	8009b5a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8009b42:	6a3b      	ldr	r3, [r7, #32]
 8009b44:	b2da      	uxtb	r2, r3
 8009b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b48:	1c59      	adds	r1, r3, #1
 8009b4a:	6279      	str	r1, [r7, #36]	; 0x24
 8009b4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009b50:	b2d2      	uxtb	r2, r2
 8009b52:	701a      	strb	r2, [r3, #0]
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	09db      	lsrs	r3, r3, #7
 8009b58:	623b      	str	r3, [r7, #32]
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	2b7f      	cmp	r3, #127	; 0x7f
 8009b5e:	d8f0      	bhi.n	8009b42 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	1c5a      	adds	r2, r3, #1
 8009b64:	627a      	str	r2, [r7, #36]	; 0x24
 8009b66:	6a3a      	ldr	r2, [r7, #32]
 8009b68:	b2d2      	uxtb	r2, r2
 8009b6a:	701a      	strb	r2, [r3, #0]
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	6979      	ldr	r1, [r7, #20]
 8009b74:	69b8      	ldr	r0, [r7, #24]
 8009b76:	f7ff fd13 	bl	80095a0 <_SendPacket>
  RECORD_END();
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	f383 8811 	msr	BASEPRI, r3
}
 8009b80:	bf00      	nop
 8009b82:	3740      	adds	r7, #64	; 0x40
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	20014a68 	.word	0x20014a68

08009b8c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b08c      	sub	sp, #48	; 0x30
 8009b90:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8009b92:	4b58      	ldr	r3, [pc, #352]	; (8009cf4 <SEGGER_SYSVIEW_Start+0x168>)
 8009b94:	2201      	movs	r2, #1
 8009b96:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8009b98:	f3ef 8311 	mrs	r3, BASEPRI
 8009b9c:	f04f 0120 	mov.w	r1, #32
 8009ba0:	f381 8811 	msr	BASEPRI, r1
 8009ba4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8009ba6:	4b53      	ldr	r3, [pc, #332]	; (8009cf4 <SEGGER_SYSVIEW_Start+0x168>)
 8009ba8:	785b      	ldrb	r3, [r3, #1]
 8009baa:	220a      	movs	r2, #10
 8009bac:	4952      	ldr	r1, [pc, #328]	; (8009cf8 <SEGGER_SYSVIEW_Start+0x16c>)
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7f6 fb2e 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8009bba:	200a      	movs	r0, #10
 8009bbc:	f7ff fe2a 	bl	8009814 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009bc0:	f3ef 8311 	mrs	r3, BASEPRI
 8009bc4:	f04f 0120 	mov.w	r1, #32
 8009bc8:	f381 8811 	msr	BASEPRI, r1
 8009bcc:	60bb      	str	r3, [r7, #8]
 8009bce:	484b      	ldr	r0, [pc, #300]	; (8009cfc <SEGGER_SYSVIEW_Start+0x170>)
 8009bd0:	f7ff fbf7 	bl	80093c2 <_PreparePacket>
 8009bd4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bde:	4b45      	ldr	r3, [pc, #276]	; (8009cf4 <SEGGER_SYSVIEW_Start+0x168>)
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009be4:	e00b      	b.n	8009bfe <SEGGER_SYSVIEW_Start+0x72>
 8009be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be8:	b2da      	uxtb	r2, r3
 8009bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bec:	1c59      	adds	r1, r3, #1
 8009bee:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009bf0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009bf4:	b2d2      	uxtb	r2, r2
 8009bf6:	701a      	strb	r2, [r3, #0]
 8009bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfa:	09db      	lsrs	r3, r3, #7
 8009bfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c00:	2b7f      	cmp	r3, #127	; 0x7f
 8009c02:	d8f0      	bhi.n	8009be6 <SEGGER_SYSVIEW_Start+0x5a>
 8009c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c06:	1c5a      	adds	r2, r3, #1
 8009c08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c0c:	b2d2      	uxtb	r2, r2
 8009c0e:	701a      	strb	r2, [r3, #0]
 8009c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c12:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	627b      	str	r3, [r7, #36]	; 0x24
 8009c18:	4b36      	ldr	r3, [pc, #216]	; (8009cf4 <SEGGER_SYSVIEW_Start+0x168>)
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	623b      	str	r3, [r7, #32]
 8009c1e:	e00b      	b.n	8009c38 <SEGGER_SYSVIEW_Start+0xac>
 8009c20:	6a3b      	ldr	r3, [r7, #32]
 8009c22:	b2da      	uxtb	r2, r3
 8009c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c26:	1c59      	adds	r1, r3, #1
 8009c28:	6279      	str	r1, [r7, #36]	; 0x24
 8009c2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009c2e:	b2d2      	uxtb	r2, r2
 8009c30:	701a      	strb	r2, [r3, #0]
 8009c32:	6a3b      	ldr	r3, [r7, #32]
 8009c34:	09db      	lsrs	r3, r3, #7
 8009c36:	623b      	str	r3, [r7, #32]
 8009c38:	6a3b      	ldr	r3, [r7, #32]
 8009c3a:	2b7f      	cmp	r3, #127	; 0x7f
 8009c3c:	d8f0      	bhi.n	8009c20 <SEGGER_SYSVIEW_Start+0x94>
 8009c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c40:	1c5a      	adds	r2, r3, #1
 8009c42:	627a      	str	r2, [r7, #36]	; 0x24
 8009c44:	6a3a      	ldr	r2, [r7, #32]
 8009c46:	b2d2      	uxtb	r2, r2
 8009c48:	701a      	strb	r2, [r3, #0]
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	61fb      	str	r3, [r7, #28]
 8009c52:	4b28      	ldr	r3, [pc, #160]	; (8009cf4 <SEGGER_SYSVIEW_Start+0x168>)
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	61bb      	str	r3, [r7, #24]
 8009c58:	e00b      	b.n	8009c72 <SEGGER_SYSVIEW_Start+0xe6>
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	b2da      	uxtb	r2, r3
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	1c59      	adds	r1, r3, #1
 8009c62:	61f9      	str	r1, [r7, #28]
 8009c64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009c68:	b2d2      	uxtb	r2, r2
 8009c6a:	701a      	strb	r2, [r3, #0]
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	09db      	lsrs	r3, r3, #7
 8009c70:	61bb      	str	r3, [r7, #24]
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	2b7f      	cmp	r3, #127	; 0x7f
 8009c76:	d8f0      	bhi.n	8009c5a <SEGGER_SYSVIEW_Start+0xce>
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	1c5a      	adds	r2, r3, #1
 8009c7c:	61fa      	str	r2, [r7, #28]
 8009c7e:	69ba      	ldr	r2, [r7, #24]
 8009c80:	b2d2      	uxtb	r2, r2
 8009c82:	701a      	strb	r2, [r3, #0]
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	617b      	str	r3, [r7, #20]
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	613b      	str	r3, [r7, #16]
 8009c90:	e00b      	b.n	8009caa <SEGGER_SYSVIEW_Start+0x11e>
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	b2da      	uxtb	r2, r3
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	1c59      	adds	r1, r3, #1
 8009c9a:	6179      	str	r1, [r7, #20]
 8009c9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009ca0:	b2d2      	uxtb	r2, r2
 8009ca2:	701a      	strb	r2, [r3, #0]
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	09db      	lsrs	r3, r3, #7
 8009ca8:	613b      	str	r3, [r7, #16]
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	2b7f      	cmp	r3, #127	; 0x7f
 8009cae:	d8f0      	bhi.n	8009c92 <SEGGER_SYSVIEW_Start+0x106>
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	1c5a      	adds	r2, r3, #1
 8009cb4:	617a      	str	r2, [r7, #20]
 8009cb6:	693a      	ldr	r2, [r7, #16]
 8009cb8:	b2d2      	uxtb	r2, r2
 8009cba:	701a      	strb	r2, [r3, #0]
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8009cc0:	2218      	movs	r2, #24
 8009cc2:	6839      	ldr	r1, [r7, #0]
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f7ff fc6b 	bl	80095a0 <_SendPacket>
      RECORD_END();
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009cd0:	4b08      	ldr	r3, [pc, #32]	; (8009cf4 <SEGGER_SYSVIEW_Start+0x168>)
 8009cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d002      	beq.n	8009cde <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8009cd8:	4b06      	ldr	r3, [pc, #24]	; (8009cf4 <SEGGER_SYSVIEW_Start+0x168>)
 8009cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cdc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8009cde:	f000 f9eb 	bl	800a0b8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8009ce2:	f000 f9b1 	bl	800a048 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8009ce6:	f000 fc23 	bl	800a530 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8009cea:	bf00      	nop
 8009cec:	3730      	adds	r7, #48	; 0x30
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	20014a38 	.word	0x20014a38
 8009cf8:	0800d248 	.word	0x0800d248
 8009cfc:	20014a68 	.word	0x20014a68

08009d00 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009d06:	f3ef 8311 	mrs	r3, BASEPRI
 8009d0a:	f04f 0120 	mov.w	r1, #32
 8009d0e:	f381 8811 	msr	BASEPRI, r1
 8009d12:	607b      	str	r3, [r7, #4]
 8009d14:	480b      	ldr	r0, [pc, #44]	; (8009d44 <SEGGER_SYSVIEW_Stop+0x44>)
 8009d16:	f7ff fb54 	bl	80093c2 <_PreparePacket>
 8009d1a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8009d1c:	4b0a      	ldr	r3, [pc, #40]	; (8009d48 <SEGGER_SYSVIEW_Stop+0x48>)
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d007      	beq.n	8009d34 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8009d24:	220b      	movs	r2, #11
 8009d26:	6839      	ldr	r1, [r7, #0]
 8009d28:	6838      	ldr	r0, [r7, #0]
 8009d2a:	f7ff fc39 	bl	80095a0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8009d2e:	4b06      	ldr	r3, [pc, #24]	; (8009d48 <SEGGER_SYSVIEW_Stop+0x48>)
 8009d30:	2200      	movs	r2, #0
 8009d32:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f383 8811 	msr	BASEPRI, r3
}
 8009d3a:	bf00      	nop
 8009d3c:	3708      	adds	r7, #8
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	20014a68 	.word	0x20014a68
 8009d48:	20014a38 	.word	0x20014a38

08009d4c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b08c      	sub	sp, #48	; 0x30
 8009d50:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009d52:	f3ef 8311 	mrs	r3, BASEPRI
 8009d56:	f04f 0120 	mov.w	r1, #32
 8009d5a:	f381 8811 	msr	BASEPRI, r1
 8009d5e:	60fb      	str	r3, [r7, #12]
 8009d60:	4845      	ldr	r0, [pc, #276]	; (8009e78 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8009d62:	f7ff fb2e 	bl	80093c2 <_PreparePacket>
 8009d66:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d70:	4b42      	ldr	r3, [pc, #264]	; (8009e7c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d76:	e00b      	b.n	8009d90 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8009d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7a:	b2da      	uxtb	r2, r3
 8009d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7e:	1c59      	adds	r1, r3, #1
 8009d80:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009d82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009d86:	b2d2      	uxtb	r2, r2
 8009d88:	701a      	strb	r2, [r3, #0]
 8009d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8c:	09db      	lsrs	r3, r3, #7
 8009d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d92:	2b7f      	cmp	r3, #127	; 0x7f
 8009d94:	d8f0      	bhi.n	8009d78 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8009d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d98:	1c5a      	adds	r2, r3, #1
 8009d9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d9e:	b2d2      	uxtb	r2, r2
 8009da0:	701a      	strb	r2, [r3, #0]
 8009da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	627b      	str	r3, [r7, #36]	; 0x24
 8009daa:	4b34      	ldr	r3, [pc, #208]	; (8009e7c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	623b      	str	r3, [r7, #32]
 8009db0:	e00b      	b.n	8009dca <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8009db2:	6a3b      	ldr	r3, [r7, #32]
 8009db4:	b2da      	uxtb	r2, r3
 8009db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db8:	1c59      	adds	r1, r3, #1
 8009dba:	6279      	str	r1, [r7, #36]	; 0x24
 8009dbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009dc0:	b2d2      	uxtb	r2, r2
 8009dc2:	701a      	strb	r2, [r3, #0]
 8009dc4:	6a3b      	ldr	r3, [r7, #32]
 8009dc6:	09db      	lsrs	r3, r3, #7
 8009dc8:	623b      	str	r3, [r7, #32]
 8009dca:	6a3b      	ldr	r3, [r7, #32]
 8009dcc:	2b7f      	cmp	r3, #127	; 0x7f
 8009dce:	d8f0      	bhi.n	8009db2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8009dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd2:	1c5a      	adds	r2, r3, #1
 8009dd4:	627a      	str	r2, [r7, #36]	; 0x24
 8009dd6:	6a3a      	ldr	r2, [r7, #32]
 8009dd8:	b2d2      	uxtb	r2, r2
 8009dda:	701a      	strb	r2, [r3, #0]
 8009ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dde:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	61fb      	str	r3, [r7, #28]
 8009de4:	4b25      	ldr	r3, [pc, #148]	; (8009e7c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009de6:	691b      	ldr	r3, [r3, #16]
 8009de8:	61bb      	str	r3, [r7, #24]
 8009dea:	e00b      	b.n	8009e04 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	b2da      	uxtb	r2, r3
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	1c59      	adds	r1, r3, #1
 8009df4:	61f9      	str	r1, [r7, #28]
 8009df6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009dfa:	b2d2      	uxtb	r2, r2
 8009dfc:	701a      	strb	r2, [r3, #0]
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	09db      	lsrs	r3, r3, #7
 8009e02:	61bb      	str	r3, [r7, #24]
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	2b7f      	cmp	r3, #127	; 0x7f
 8009e08:	d8f0      	bhi.n	8009dec <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	1c5a      	adds	r2, r3, #1
 8009e0e:	61fa      	str	r2, [r7, #28]
 8009e10:	69ba      	ldr	r2, [r7, #24]
 8009e12:	b2d2      	uxtb	r2, r2
 8009e14:	701a      	strb	r2, [r3, #0]
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	617b      	str	r3, [r7, #20]
 8009e1e:	2300      	movs	r3, #0
 8009e20:	613b      	str	r3, [r7, #16]
 8009e22:	e00b      	b.n	8009e3c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	b2da      	uxtb	r2, r3
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	1c59      	adds	r1, r3, #1
 8009e2c:	6179      	str	r1, [r7, #20]
 8009e2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009e32:	b2d2      	uxtb	r2, r2
 8009e34:	701a      	strb	r2, [r3, #0]
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	09db      	lsrs	r3, r3, #7
 8009e3a:	613b      	str	r3, [r7, #16]
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	2b7f      	cmp	r3, #127	; 0x7f
 8009e40:	d8f0      	bhi.n	8009e24 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	1c5a      	adds	r2, r3, #1
 8009e46:	617a      	str	r2, [r7, #20]
 8009e48:	693a      	ldr	r2, [r7, #16]
 8009e4a:	b2d2      	uxtb	r2, r2
 8009e4c:	701a      	strb	r2, [r3, #0]
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8009e52:	2218      	movs	r2, #24
 8009e54:	6879      	ldr	r1, [r7, #4]
 8009e56:	68b8      	ldr	r0, [r7, #8]
 8009e58:	f7ff fba2 	bl	80095a0 <_SendPacket>
  RECORD_END();
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009e62:	4b06      	ldr	r3, [pc, #24]	; (8009e7c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d002      	beq.n	8009e70 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8009e6a:	4b04      	ldr	r3, [pc, #16]	; (8009e7c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6e:	4798      	blx	r3
  }
}
 8009e70:	bf00      	nop
 8009e72:	3730      	adds	r7, #48	; 0x30
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	20014a68 	.word	0x20014a68
 8009e7c:	20014a38 	.word	0x20014a38

08009e80 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b092      	sub	sp, #72	; 0x48
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8009e88:	f3ef 8311 	mrs	r3, BASEPRI
 8009e8c:	f04f 0120 	mov.w	r1, #32
 8009e90:	f381 8811 	msr	BASEPRI, r1
 8009e94:	617b      	str	r3, [r7, #20]
 8009e96:	486a      	ldr	r0, [pc, #424]	; (800a040 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8009e98:	f7ff fa93 	bl	80093c2 <_PreparePacket>
 8009e9c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	647b      	str	r3, [r7, #68]	; 0x44
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	4b66      	ldr	r3, [pc, #408]	; (800a044 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8009eac:	691b      	ldr	r3, [r3, #16]
 8009eae:	1ad3      	subs	r3, r2, r3
 8009eb0:	643b      	str	r3, [r7, #64]	; 0x40
 8009eb2:	e00b      	b.n	8009ecc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8009eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eb6:	b2da      	uxtb	r2, r3
 8009eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eba:	1c59      	adds	r1, r3, #1
 8009ebc:	6479      	str	r1, [r7, #68]	; 0x44
 8009ebe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009ec2:	b2d2      	uxtb	r2, r2
 8009ec4:	701a      	strb	r2, [r3, #0]
 8009ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ec8:	09db      	lsrs	r3, r3, #7
 8009eca:	643b      	str	r3, [r7, #64]	; 0x40
 8009ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ece:	2b7f      	cmp	r3, #127	; 0x7f
 8009ed0:	d8f0      	bhi.n	8009eb4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8009ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ed4:	1c5a      	adds	r2, r3, #1
 8009ed6:	647a      	str	r2, [r7, #68]	; 0x44
 8009ed8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009eda:	b2d2      	uxtb	r2, r2
 8009edc:	701a      	strb	r2, [r3, #0]
 8009ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ee0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	63bb      	str	r3, [r7, #56]	; 0x38
 8009eec:	e00b      	b.n	8009f06 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8009eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef0:	b2da      	uxtb	r2, r3
 8009ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ef4:	1c59      	adds	r1, r3, #1
 8009ef6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009ef8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009efc:	b2d2      	uxtb	r2, r2
 8009efe:	701a      	strb	r2, [r3, #0]
 8009f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f02:	09db      	lsrs	r3, r3, #7
 8009f04:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f08:	2b7f      	cmp	r3, #127	; 0x7f
 8009f0a:	d8f0      	bhi.n	8009eee <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8009f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f0e:	1c5a      	adds	r2, r3, #1
 8009f10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009f12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f14:	b2d2      	uxtb	r2, r2
 8009f16:	701a      	strb	r2, [r3, #0]
 8009f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f1a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	2220      	movs	r2, #32
 8009f22:	4619      	mov	r1, r3
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f7ff f9ff 	bl	8009328 <_EncodeStr>
 8009f2a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8009f2c:	2209      	movs	r2, #9
 8009f2e:	68f9      	ldr	r1, [r7, #12]
 8009f30:	6938      	ldr	r0, [r7, #16]
 8009f32:	f7ff fb35 	bl	80095a0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	4b40      	ldr	r3, [pc, #256]	; (800a044 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8009f44:	691b      	ldr	r3, [r3, #16]
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	633b      	str	r3, [r7, #48]	; 0x30
 8009f4a:	e00b      	b.n	8009f64 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8009f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4e:	b2da      	uxtb	r2, r3
 8009f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f52:	1c59      	adds	r1, r3, #1
 8009f54:	6379      	str	r1, [r7, #52]	; 0x34
 8009f56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009f5a:	b2d2      	uxtb	r2, r2
 8009f5c:	701a      	strb	r2, [r3, #0]
 8009f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f60:	09db      	lsrs	r3, r3, #7
 8009f62:	633b      	str	r3, [r7, #48]	; 0x30
 8009f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f66:	2b7f      	cmp	r3, #127	; 0x7f
 8009f68:	d8f0      	bhi.n	8009f4c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8009f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f6c:	1c5a      	adds	r2, r3, #1
 8009f6e:	637a      	str	r2, [r7, #52]	; 0x34
 8009f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f72:	b2d2      	uxtb	r2, r2
 8009f74:	701a      	strb	r2, [r3, #0]
 8009f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f84:	e00b      	b.n	8009f9e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8009f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f88:	b2da      	uxtb	r2, r3
 8009f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8c:	1c59      	adds	r1, r3, #1
 8009f8e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009f90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009f94:	b2d2      	uxtb	r2, r2
 8009f96:	701a      	strb	r2, [r3, #0]
 8009f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9a:	09db      	lsrs	r3, r3, #7
 8009f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa0:	2b7f      	cmp	r3, #127	; 0x7f
 8009fa2:	d8f0      	bhi.n	8009f86 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8009fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa6:	1c5a      	adds	r2, r3, #1
 8009fa8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fac:	b2d2      	uxtb	r2, r2
 8009fae:	701a      	strb	r2, [r3, #0]
 8009fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	691b      	ldr	r3, [r3, #16]
 8009fbc:	623b      	str	r3, [r7, #32]
 8009fbe:	e00b      	b.n	8009fd8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8009fc0:	6a3b      	ldr	r3, [r7, #32]
 8009fc2:	b2da      	uxtb	r2, r3
 8009fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc6:	1c59      	adds	r1, r3, #1
 8009fc8:	6279      	str	r1, [r7, #36]	; 0x24
 8009fca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009fce:	b2d2      	uxtb	r2, r2
 8009fd0:	701a      	strb	r2, [r3, #0]
 8009fd2:	6a3b      	ldr	r3, [r7, #32]
 8009fd4:	09db      	lsrs	r3, r3, #7
 8009fd6:	623b      	str	r3, [r7, #32]
 8009fd8:	6a3b      	ldr	r3, [r7, #32]
 8009fda:	2b7f      	cmp	r3, #127	; 0x7f
 8009fdc:	d8f0      	bhi.n	8009fc0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	1c5a      	adds	r2, r3, #1
 8009fe2:	627a      	str	r2, [r7, #36]	; 0x24
 8009fe4:	6a3a      	ldr	r2, [r7, #32]
 8009fe6:	b2d2      	uxtb	r2, r2
 8009fe8:	701a      	strb	r2, [r3, #0]
 8009fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	61fb      	str	r3, [r7, #28]
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	61bb      	str	r3, [r7, #24]
 8009ff6:	e00b      	b.n	800a010 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	b2da      	uxtb	r2, r3
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	1c59      	adds	r1, r3, #1
 800a000:	61f9      	str	r1, [r7, #28]
 800a002:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a006:	b2d2      	uxtb	r2, r2
 800a008:	701a      	strb	r2, [r3, #0]
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	09db      	lsrs	r3, r3, #7
 800a00e:	61bb      	str	r3, [r7, #24]
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	2b7f      	cmp	r3, #127	; 0x7f
 800a014:	d8f0      	bhi.n	8009ff8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	1c5a      	adds	r2, r3, #1
 800a01a:	61fa      	str	r2, [r7, #28]
 800a01c:	69ba      	ldr	r2, [r7, #24]
 800a01e:	b2d2      	uxtb	r2, r2
 800a020:	701a      	strb	r2, [r3, #0]
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800a026:	2215      	movs	r2, #21
 800a028:	68f9      	ldr	r1, [r7, #12]
 800a02a:	6938      	ldr	r0, [r7, #16]
 800a02c:	f7ff fab8 	bl	80095a0 <_SendPacket>
  RECORD_END();
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	f383 8811 	msr	BASEPRI, r3
}
 800a036:	bf00      	nop
 800a038:	3748      	adds	r7, #72	; 0x48
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	20014a68 	.word	0x20014a68
 800a044:	20014a38 	.word	0x20014a38

0800a048 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800a048:	b580      	push	{r7, lr}
 800a04a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800a04c:	4b07      	ldr	r3, [pc, #28]	; (800a06c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a04e:	6a1b      	ldr	r3, [r3, #32]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d008      	beq.n	800a066 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800a054:	4b05      	ldr	r3, [pc, #20]	; (800a06c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a056:	6a1b      	ldr	r3, [r3, #32]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d003      	beq.n	800a066 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800a05e:	4b03      	ldr	r3, [pc, #12]	; (800a06c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a060:	6a1b      	ldr	r3, [r3, #32]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	4798      	blx	r3
  }
}
 800a066:	bf00      	nop
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	20014a38 	.word	0x20014a38

0800a070 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a078:	f3ef 8311 	mrs	r3, BASEPRI
 800a07c:	f04f 0120 	mov.w	r1, #32
 800a080:	f381 8811 	msr	BASEPRI, r1
 800a084:	617b      	str	r3, [r7, #20]
 800a086:	480b      	ldr	r0, [pc, #44]	; (800a0b4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800a088:	f7ff f99b 	bl	80093c2 <_PreparePacket>
 800a08c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a08e:	2280      	movs	r2, #128	; 0x80
 800a090:	6879      	ldr	r1, [r7, #4]
 800a092:	6938      	ldr	r0, [r7, #16]
 800a094:	f7ff f948 	bl	8009328 <_EncodeStr>
 800a098:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800a09a:	220e      	movs	r2, #14
 800a09c:	68f9      	ldr	r1, [r7, #12]
 800a09e:	6938      	ldr	r0, [r7, #16]
 800a0a0:	f7ff fa7e 	bl	80095a0 <_SendPacket>
  RECORD_END();
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	f383 8811 	msr	BASEPRI, r3
}
 800a0aa:	bf00      	nop
 800a0ac:	3718      	adds	r7, #24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	20014a68 	.word	0x20014a68

0800a0b8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800a0b8:	b590      	push	{r4, r7, lr}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800a0be:	4b15      	ldr	r3, [pc, #84]	; (800a114 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a0c0:	6a1b      	ldr	r3, [r3, #32]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d01a      	beq.n	800a0fc <SEGGER_SYSVIEW_RecordSystime+0x44>
 800a0c6:	4b13      	ldr	r3, [pc, #76]	; (800a114 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d015      	beq.n	800a0fc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800a0d0:	4b10      	ldr	r3, [pc, #64]	; (800a114 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a0d2:	6a1b      	ldr	r3, [r3, #32]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4798      	blx	r3
 800a0d8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800a0dc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800a0de:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0e2:	f04f 0200 	mov.w	r2, #0
 800a0e6:	f04f 0300 	mov.w	r3, #0
 800a0ea:	000a      	movs	r2, r1
 800a0ec:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	4621      	mov	r1, r4
 800a0f4:	200d      	movs	r0, #13
 800a0f6:	f7ff fbe7 	bl	80098c8 <SEGGER_SYSVIEW_RecordU32x2>
 800a0fa:	e006      	b.n	800a10a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800a0fc:	4b06      	ldr	r3, [pc, #24]	; (800a118 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4619      	mov	r1, r3
 800a102:	200c      	movs	r0, #12
 800a104:	f7ff fba4 	bl	8009850 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800a108:	bf00      	nop
 800a10a:	bf00      	nop
 800a10c:	370c      	adds	r7, #12
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd90      	pop	{r4, r7, pc}
 800a112:	bf00      	nop
 800a114:	20014a38 	.word	0x20014a38
 800a118:	e0001004 	.word	0xe0001004

0800a11c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b086      	sub	sp, #24
 800a120:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a122:	f3ef 8311 	mrs	r3, BASEPRI
 800a126:	f04f 0120 	mov.w	r1, #32
 800a12a:	f381 8811 	msr	BASEPRI, r1
 800a12e:	60fb      	str	r3, [r7, #12]
 800a130:	4819      	ldr	r0, [pc, #100]	; (800a198 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800a132:	f7ff f946 	bl	80093c2 <_PreparePacket>
 800a136:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800a13c:	4b17      	ldr	r3, [pc, #92]	; (800a19c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a144:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	617b      	str	r3, [r7, #20]
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	613b      	str	r3, [r7, #16]
 800a14e:	e00b      	b.n	800a168 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	b2da      	uxtb	r2, r3
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	1c59      	adds	r1, r3, #1
 800a158:	6179      	str	r1, [r7, #20]
 800a15a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a15e:	b2d2      	uxtb	r2, r2
 800a160:	701a      	strb	r2, [r3, #0]
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	09db      	lsrs	r3, r3, #7
 800a166:	613b      	str	r3, [r7, #16]
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	2b7f      	cmp	r3, #127	; 0x7f
 800a16c:	d8f0      	bhi.n	800a150 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	1c5a      	adds	r2, r3, #1
 800a172:	617a      	str	r2, [r7, #20]
 800a174:	693a      	ldr	r2, [r7, #16]
 800a176:	b2d2      	uxtb	r2, r2
 800a178:	701a      	strb	r2, [r3, #0]
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800a17e:	2202      	movs	r2, #2
 800a180:	6879      	ldr	r1, [r7, #4]
 800a182:	68b8      	ldr	r0, [r7, #8]
 800a184:	f7ff fa0c 	bl	80095a0 <_SendPacket>
  RECORD_END();
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f383 8811 	msr	BASEPRI, r3
}
 800a18e:	bf00      	nop
 800a190:	3718      	adds	r7, #24
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	20014a68 	.word	0x20014a68
 800a19c:	e000ed04 	.word	0xe000ed04

0800a1a0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a1a6:	f3ef 8311 	mrs	r3, BASEPRI
 800a1aa:	f04f 0120 	mov.w	r1, #32
 800a1ae:	f381 8811 	msr	BASEPRI, r1
 800a1b2:	607b      	str	r3, [r7, #4]
 800a1b4:	4807      	ldr	r0, [pc, #28]	; (800a1d4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800a1b6:	f7ff f904 	bl	80093c2 <_PreparePacket>
 800a1ba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800a1bc:	2203      	movs	r2, #3
 800a1be:	6839      	ldr	r1, [r7, #0]
 800a1c0:	6838      	ldr	r0, [r7, #0]
 800a1c2:	f7ff f9ed 	bl	80095a0 <_SendPacket>
  RECORD_END();
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f383 8811 	msr	BASEPRI, r3
}
 800a1cc:	bf00      	nop
 800a1ce:	3708      	adds	r7, #8
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	20014a68 	.word	0x20014a68

0800a1d8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a1de:	f3ef 8311 	mrs	r3, BASEPRI
 800a1e2:	f04f 0120 	mov.w	r1, #32
 800a1e6:	f381 8811 	msr	BASEPRI, r1
 800a1ea:	607b      	str	r3, [r7, #4]
 800a1ec:	4807      	ldr	r0, [pc, #28]	; (800a20c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800a1ee:	f7ff f8e8 	bl	80093c2 <_PreparePacket>
 800a1f2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800a1f4:	2212      	movs	r2, #18
 800a1f6:	6839      	ldr	r1, [r7, #0]
 800a1f8:	6838      	ldr	r0, [r7, #0]
 800a1fa:	f7ff f9d1 	bl	80095a0 <_SendPacket>
  RECORD_END();
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f383 8811 	msr	BASEPRI, r3
}
 800a204:	bf00      	nop
 800a206:	3708      	adds	r7, #8
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	20014a68 	.word	0x20014a68

0800a210 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a216:	f3ef 8311 	mrs	r3, BASEPRI
 800a21a:	f04f 0120 	mov.w	r1, #32
 800a21e:	f381 8811 	msr	BASEPRI, r1
 800a222:	607b      	str	r3, [r7, #4]
 800a224:	4807      	ldr	r0, [pc, #28]	; (800a244 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800a226:	f7ff f8cc 	bl	80093c2 <_PreparePacket>
 800a22a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800a22c:	2211      	movs	r2, #17
 800a22e:	6839      	ldr	r1, [r7, #0]
 800a230:	6838      	ldr	r0, [r7, #0]
 800a232:	f7ff f9b5 	bl	80095a0 <_SendPacket>
  RECORD_END();
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f383 8811 	msr	BASEPRI, r3
}
 800a23c:	bf00      	nop
 800a23e:	3708      	adds	r7, #8
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	20014a68 	.word	0x20014a68

0800a248 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800a248:	b580      	push	{r7, lr}
 800a24a:	b088      	sub	sp, #32
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a250:	f3ef 8311 	mrs	r3, BASEPRI
 800a254:	f04f 0120 	mov.w	r1, #32
 800a258:	f381 8811 	msr	BASEPRI, r1
 800a25c:	617b      	str	r3, [r7, #20]
 800a25e:	4819      	ldr	r0, [pc, #100]	; (800a2c4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800a260:	f7ff f8af 	bl	80093c2 <_PreparePacket>
 800a264:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a26a:	4b17      	ldr	r3, [pc, #92]	; (800a2c8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800a26c:	691b      	ldr	r3, [r3, #16]
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	1ad3      	subs	r3, r2, r3
 800a272:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	61fb      	str	r3, [r7, #28]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	61bb      	str	r3, [r7, #24]
 800a27c:	e00b      	b.n	800a296 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	b2da      	uxtb	r2, r3
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	1c59      	adds	r1, r3, #1
 800a286:	61f9      	str	r1, [r7, #28]
 800a288:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a28c:	b2d2      	uxtb	r2, r2
 800a28e:	701a      	strb	r2, [r3, #0]
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	09db      	lsrs	r3, r3, #7
 800a294:	61bb      	str	r3, [r7, #24]
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	2b7f      	cmp	r3, #127	; 0x7f
 800a29a:	d8f0      	bhi.n	800a27e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	1c5a      	adds	r2, r3, #1
 800a2a0:	61fa      	str	r2, [r7, #28]
 800a2a2:	69ba      	ldr	r2, [r7, #24]
 800a2a4:	b2d2      	uxtb	r2, r2
 800a2a6:	701a      	strb	r2, [r3, #0]
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800a2ac:	2208      	movs	r2, #8
 800a2ae:	68f9      	ldr	r1, [r7, #12]
 800a2b0:	6938      	ldr	r0, [r7, #16]
 800a2b2:	f7ff f975 	bl	80095a0 <_SendPacket>
  RECORD_END();
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	f383 8811 	msr	BASEPRI, r3
}
 800a2bc:	bf00      	nop
 800a2be:	3720      	adds	r7, #32
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	20014a68 	.word	0x20014a68
 800a2c8:	20014a38 	.word	0x20014a38

0800a2cc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b088      	sub	sp, #32
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a2d4:	f3ef 8311 	mrs	r3, BASEPRI
 800a2d8:	f04f 0120 	mov.w	r1, #32
 800a2dc:	f381 8811 	msr	BASEPRI, r1
 800a2e0:	617b      	str	r3, [r7, #20]
 800a2e2:	4819      	ldr	r0, [pc, #100]	; (800a348 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800a2e4:	f7ff f86d 	bl	80093c2 <_PreparePacket>
 800a2e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a2ee:	4b17      	ldr	r3, [pc, #92]	; (800a34c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800a2f0:	691b      	ldr	r3, [r3, #16]
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	1ad3      	subs	r3, r2, r3
 800a2f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	61fb      	str	r3, [r7, #28]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	61bb      	str	r3, [r7, #24]
 800a300:	e00b      	b.n	800a31a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	b2da      	uxtb	r2, r3
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	1c59      	adds	r1, r3, #1
 800a30a:	61f9      	str	r1, [r7, #28]
 800a30c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a310:	b2d2      	uxtb	r2, r2
 800a312:	701a      	strb	r2, [r3, #0]
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	09db      	lsrs	r3, r3, #7
 800a318:	61bb      	str	r3, [r7, #24]
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	2b7f      	cmp	r3, #127	; 0x7f
 800a31e:	d8f0      	bhi.n	800a302 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800a320:	69fb      	ldr	r3, [r7, #28]
 800a322:	1c5a      	adds	r2, r3, #1
 800a324:	61fa      	str	r2, [r7, #28]
 800a326:	69ba      	ldr	r2, [r7, #24]
 800a328:	b2d2      	uxtb	r2, r2
 800a32a:	701a      	strb	r2, [r3, #0]
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800a330:	2204      	movs	r2, #4
 800a332:	68f9      	ldr	r1, [r7, #12]
 800a334:	6938      	ldr	r0, [r7, #16]
 800a336:	f7ff f933 	bl	80095a0 <_SendPacket>
  RECORD_END();
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	f383 8811 	msr	BASEPRI, r3
}
 800a340:	bf00      	nop
 800a342:	3720      	adds	r7, #32
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	20014a68 	.word	0x20014a68
 800a34c:	20014a38 	.word	0x20014a38

0800a350 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800a350:	b580      	push	{r7, lr}
 800a352:	b088      	sub	sp, #32
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a358:	f3ef 8311 	mrs	r3, BASEPRI
 800a35c:	f04f 0120 	mov.w	r1, #32
 800a360:	f381 8811 	msr	BASEPRI, r1
 800a364:	617b      	str	r3, [r7, #20]
 800a366:	4819      	ldr	r0, [pc, #100]	; (800a3cc <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800a368:	f7ff f82b 	bl	80093c2 <_PreparePacket>
 800a36c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a372:	4b17      	ldr	r3, [pc, #92]	; (800a3d0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800a374:	691b      	ldr	r3, [r3, #16]
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	1ad3      	subs	r3, r2, r3
 800a37a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	61fb      	str	r3, [r7, #28]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	61bb      	str	r3, [r7, #24]
 800a384:	e00b      	b.n	800a39e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	69fb      	ldr	r3, [r7, #28]
 800a38c:	1c59      	adds	r1, r3, #1
 800a38e:	61f9      	str	r1, [r7, #28]
 800a390:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a394:	b2d2      	uxtb	r2, r2
 800a396:	701a      	strb	r2, [r3, #0]
 800a398:	69bb      	ldr	r3, [r7, #24]
 800a39a:	09db      	lsrs	r3, r3, #7
 800a39c:	61bb      	str	r3, [r7, #24]
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	2b7f      	cmp	r3, #127	; 0x7f
 800a3a2:	d8f0      	bhi.n	800a386 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	1c5a      	adds	r2, r3, #1
 800a3a8:	61fa      	str	r2, [r7, #28]
 800a3aa:	69ba      	ldr	r2, [r7, #24]
 800a3ac:	b2d2      	uxtb	r2, r2
 800a3ae:	701a      	strb	r2, [r3, #0]
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800a3b4:	2206      	movs	r2, #6
 800a3b6:	68f9      	ldr	r1, [r7, #12]
 800a3b8:	6938      	ldr	r0, [r7, #16]
 800a3ba:	f7ff f8f1 	bl	80095a0 <_SendPacket>
  RECORD_END();
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	f383 8811 	msr	BASEPRI, r3
}
 800a3c4:	bf00      	nop
 800a3c6:	3720      	adds	r7, #32
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	20014a68 	.word	0x20014a68
 800a3d0:	20014a38 	.word	0x20014a38

0800a3d4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800a3dc:	4b04      	ldr	r3, [pc, #16]	; (800a3f0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800a3de:	691b      	ldr	r3, [r3, #16]
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	1ad3      	subs	r3, r2, r3
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr
 800a3f0:	20014a38 	.word	0x20014a38

0800a3f4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b08c      	sub	sp, #48	; 0x30
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800a3fe:	4b3b      	ldr	r3, [pc, #236]	; (800a4ec <SEGGER_SYSVIEW_SendModule+0xf8>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d06d      	beq.n	800a4e2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800a406:	4b39      	ldr	r3, [pc, #228]	; (800a4ec <SEGGER_SYSVIEW_SendModule+0xf8>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800a40c:	2300      	movs	r3, #0
 800a40e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a410:	e008      	b.n	800a424 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800a412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a414:	691b      	ldr	r3, [r3, #16]
 800a416:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800a418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d007      	beq.n	800a42e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800a41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a420:	3301      	adds	r3, #1
 800a422:	62bb      	str	r3, [r7, #40]	; 0x28
 800a424:	79fb      	ldrb	r3, [r7, #7]
 800a426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a428:	429a      	cmp	r2, r3
 800a42a:	d3f2      	bcc.n	800a412 <SEGGER_SYSVIEW_SendModule+0x1e>
 800a42c:	e000      	b.n	800a430 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800a42e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800a430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a432:	2b00      	cmp	r3, #0
 800a434:	d055      	beq.n	800a4e2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a436:	f3ef 8311 	mrs	r3, BASEPRI
 800a43a:	f04f 0120 	mov.w	r1, #32
 800a43e:	f381 8811 	msr	BASEPRI, r1
 800a442:	617b      	str	r3, [r7, #20]
 800a444:	482a      	ldr	r0, [pc, #168]	; (800a4f0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800a446:	f7fe ffbc 	bl	80093c2 <_PreparePacket>
 800a44a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	627b      	str	r3, [r7, #36]	; 0x24
 800a454:	79fb      	ldrb	r3, [r7, #7]
 800a456:	623b      	str	r3, [r7, #32]
 800a458:	e00b      	b.n	800a472 <SEGGER_SYSVIEW_SendModule+0x7e>
 800a45a:	6a3b      	ldr	r3, [r7, #32]
 800a45c:	b2da      	uxtb	r2, r3
 800a45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a460:	1c59      	adds	r1, r3, #1
 800a462:	6279      	str	r1, [r7, #36]	; 0x24
 800a464:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a468:	b2d2      	uxtb	r2, r2
 800a46a:	701a      	strb	r2, [r3, #0]
 800a46c:	6a3b      	ldr	r3, [r7, #32]
 800a46e:	09db      	lsrs	r3, r3, #7
 800a470:	623b      	str	r3, [r7, #32]
 800a472:	6a3b      	ldr	r3, [r7, #32]
 800a474:	2b7f      	cmp	r3, #127	; 0x7f
 800a476:	d8f0      	bhi.n	800a45a <SEGGER_SYSVIEW_SendModule+0x66>
 800a478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47a:	1c5a      	adds	r2, r3, #1
 800a47c:	627a      	str	r2, [r7, #36]	; 0x24
 800a47e:	6a3a      	ldr	r2, [r7, #32]
 800a480:	b2d2      	uxtb	r2, r2
 800a482:	701a      	strb	r2, [r3, #0]
 800a484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a486:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	61fb      	str	r3, [r7, #28]
 800a48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	61bb      	str	r3, [r7, #24]
 800a492:	e00b      	b.n	800a4ac <SEGGER_SYSVIEW_SendModule+0xb8>
 800a494:	69bb      	ldr	r3, [r7, #24]
 800a496:	b2da      	uxtb	r2, r3
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	1c59      	adds	r1, r3, #1
 800a49c:	61f9      	str	r1, [r7, #28]
 800a49e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a4a2:	b2d2      	uxtb	r2, r2
 800a4a4:	701a      	strb	r2, [r3, #0]
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	09db      	lsrs	r3, r3, #7
 800a4aa:	61bb      	str	r3, [r7, #24]
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	2b7f      	cmp	r3, #127	; 0x7f
 800a4b0:	d8f0      	bhi.n	800a494 <SEGGER_SYSVIEW_SendModule+0xa0>
 800a4b2:	69fb      	ldr	r3, [r7, #28]
 800a4b4:	1c5a      	adds	r2, r3, #1
 800a4b6:	61fa      	str	r2, [r7, #28]
 800a4b8:	69ba      	ldr	r2, [r7, #24]
 800a4ba:	b2d2      	uxtb	r2, r2
 800a4bc:	701a      	strb	r2, [r3, #0]
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2280      	movs	r2, #128	; 0x80
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f7fe ff2c 	bl	8009328 <_EncodeStr>
 800a4d0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800a4d2:	2216      	movs	r2, #22
 800a4d4:	68f9      	ldr	r1, [r7, #12]
 800a4d6:	6938      	ldr	r0, [r7, #16]
 800a4d8:	f7ff f862 	bl	80095a0 <_SendPacket>
      RECORD_END();
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800a4e2:	bf00      	nop
 800a4e4:	3730      	adds	r7, #48	; 0x30
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	20014a60 	.word	0x20014a60
 800a4f0:	20014a68 	.word	0x20014a68

0800a4f4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800a4fa:	4b0c      	ldr	r3, [pc, #48]	; (800a52c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00f      	beq.n	800a522 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800a502:	4b0a      	ldr	r3, [pc, #40]	; (800a52c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d002      	beq.n	800a516 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1f2      	bne.n	800a508 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800a522:	bf00      	nop
 800a524:	3708      	adds	r7, #8
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	20014a60 	.word	0x20014a60

0800a530 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800a536:	f3ef 8311 	mrs	r3, BASEPRI
 800a53a:	f04f 0120 	mov.w	r1, #32
 800a53e:	f381 8811 	msr	BASEPRI, r1
 800a542:	60fb      	str	r3, [r7, #12]
 800a544:	4817      	ldr	r0, [pc, #92]	; (800a5a4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800a546:	f7fe ff3c 	bl	80093c2 <_PreparePacket>
 800a54a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	617b      	str	r3, [r7, #20]
 800a554:	4b14      	ldr	r3, [pc, #80]	; (800a5a8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	613b      	str	r3, [r7, #16]
 800a55a:	e00b      	b.n	800a574 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	b2da      	uxtb	r2, r3
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	1c59      	adds	r1, r3, #1
 800a564:	6179      	str	r1, [r7, #20]
 800a566:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a56a:	b2d2      	uxtb	r2, r2
 800a56c:	701a      	strb	r2, [r3, #0]
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	09db      	lsrs	r3, r3, #7
 800a572:	613b      	str	r3, [r7, #16]
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	2b7f      	cmp	r3, #127	; 0x7f
 800a578:	d8f0      	bhi.n	800a55c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	1c5a      	adds	r2, r3, #1
 800a57e:	617a      	str	r2, [r7, #20]
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	b2d2      	uxtb	r2, r2
 800a584:	701a      	strb	r2, [r3, #0]
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800a58a:	221b      	movs	r2, #27
 800a58c:	6879      	ldr	r1, [r7, #4]
 800a58e:	68b8      	ldr	r0, [r7, #8]
 800a590:	f7ff f806 	bl	80095a0 <_SendPacket>
  RECORD_END();
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f383 8811 	msr	BASEPRI, r3
}
 800a59a:	bf00      	nop
 800a59c:	3718      	adds	r7, #24
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	20014a68 	.word	0x20014a68
 800a5a8:	20014a64 	.word	0x20014a64

0800a5ac <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b08a      	sub	sp, #40	; 0x28
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a5b4:	f3ef 8311 	mrs	r3, BASEPRI
 800a5b8:	f04f 0120 	mov.w	r1, #32
 800a5bc:	f381 8811 	msr	BASEPRI, r1
 800a5c0:	617b      	str	r3, [r7, #20]
 800a5c2:	4827      	ldr	r0, [pc, #156]	; (800a660 <SEGGER_SYSVIEW_Warn+0xb4>)
 800a5c4:	f7fe fefd 	bl	80093c2 <_PreparePacket>
 800a5c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a5ca:	2280      	movs	r2, #128	; 0x80
 800a5cc:	6879      	ldr	r1, [r7, #4]
 800a5ce:	6938      	ldr	r0, [r7, #16]
 800a5d0:	f7fe feaa 	bl	8009328 <_EncodeStr>
 800a5d4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	627b      	str	r3, [r7, #36]	; 0x24
 800a5da:	2301      	movs	r3, #1
 800a5dc:	623b      	str	r3, [r7, #32]
 800a5de:	e00b      	b.n	800a5f8 <SEGGER_SYSVIEW_Warn+0x4c>
 800a5e0:	6a3b      	ldr	r3, [r7, #32]
 800a5e2:	b2da      	uxtb	r2, r3
 800a5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e6:	1c59      	adds	r1, r3, #1
 800a5e8:	6279      	str	r1, [r7, #36]	; 0x24
 800a5ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a5ee:	b2d2      	uxtb	r2, r2
 800a5f0:	701a      	strb	r2, [r3, #0]
 800a5f2:	6a3b      	ldr	r3, [r7, #32]
 800a5f4:	09db      	lsrs	r3, r3, #7
 800a5f6:	623b      	str	r3, [r7, #32]
 800a5f8:	6a3b      	ldr	r3, [r7, #32]
 800a5fa:	2b7f      	cmp	r3, #127	; 0x7f
 800a5fc:	d8f0      	bhi.n	800a5e0 <SEGGER_SYSVIEW_Warn+0x34>
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a600:	1c5a      	adds	r2, r3, #1
 800a602:	627a      	str	r2, [r7, #36]	; 0x24
 800a604:	6a3a      	ldr	r2, [r7, #32]
 800a606:	b2d2      	uxtb	r2, r2
 800a608:	701a      	strb	r2, [r3, #0]
 800a60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	61fb      	str	r3, [r7, #28]
 800a612:	2300      	movs	r3, #0
 800a614:	61bb      	str	r3, [r7, #24]
 800a616:	e00b      	b.n	800a630 <SEGGER_SYSVIEW_Warn+0x84>
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	b2da      	uxtb	r2, r3
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	1c59      	adds	r1, r3, #1
 800a620:	61f9      	str	r1, [r7, #28]
 800a622:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a626:	b2d2      	uxtb	r2, r2
 800a628:	701a      	strb	r2, [r3, #0]
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	09db      	lsrs	r3, r3, #7
 800a62e:	61bb      	str	r3, [r7, #24]
 800a630:	69bb      	ldr	r3, [r7, #24]
 800a632:	2b7f      	cmp	r3, #127	; 0x7f
 800a634:	d8f0      	bhi.n	800a618 <SEGGER_SYSVIEW_Warn+0x6c>
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	1c5a      	adds	r2, r3, #1
 800a63a:	61fa      	str	r2, [r7, #28]
 800a63c:	69ba      	ldr	r2, [r7, #24]
 800a63e:	b2d2      	uxtb	r2, r2
 800a640:	701a      	strb	r2, [r3, #0]
 800a642:	69fb      	ldr	r3, [r7, #28]
 800a644:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800a646:	221a      	movs	r2, #26
 800a648:	68f9      	ldr	r1, [r7, #12]
 800a64a:	6938      	ldr	r0, [r7, #16]
 800a64c:	f7fe ffa8 	bl	80095a0 <_SendPacket>
  RECORD_END();
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	f383 8811 	msr	BASEPRI, r3
}
 800a656:	bf00      	nop
 800a658:	3728      	adds	r7, #40	; 0x28
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	20014a68 	.word	0x20014a68

0800a664 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	607a      	str	r2, [r7, #4]
 800a670:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800a672:	683a      	ldr	r2, [r7, #0]
 800a674:	6879      	ldr	r1, [r7, #4]
 800a676:	2000      	movs	r0, #0
 800a678:	f7fe fd3c 	bl	80090f4 <SEGGER_RTT_Write>
  return len;
 800a67c:	683b      	ldr	r3, [r7, #0]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <__cvt>:
 800a686:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a68a:	ec55 4b10 	vmov	r4, r5, d0
 800a68e:	2d00      	cmp	r5, #0
 800a690:	460e      	mov	r6, r1
 800a692:	4619      	mov	r1, r3
 800a694:	462b      	mov	r3, r5
 800a696:	bfbb      	ittet	lt
 800a698:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a69c:	461d      	movlt	r5, r3
 800a69e:	2300      	movge	r3, #0
 800a6a0:	232d      	movlt	r3, #45	; 0x2d
 800a6a2:	700b      	strb	r3, [r1, #0]
 800a6a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6a6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a6aa:	4691      	mov	r9, r2
 800a6ac:	f023 0820 	bic.w	r8, r3, #32
 800a6b0:	bfbc      	itt	lt
 800a6b2:	4622      	movlt	r2, r4
 800a6b4:	4614      	movlt	r4, r2
 800a6b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a6ba:	d005      	beq.n	800a6c8 <__cvt+0x42>
 800a6bc:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a6c0:	d100      	bne.n	800a6c4 <__cvt+0x3e>
 800a6c2:	3601      	adds	r6, #1
 800a6c4:	2102      	movs	r1, #2
 800a6c6:	e000      	b.n	800a6ca <__cvt+0x44>
 800a6c8:	2103      	movs	r1, #3
 800a6ca:	ab03      	add	r3, sp, #12
 800a6cc:	9301      	str	r3, [sp, #4]
 800a6ce:	ab02      	add	r3, sp, #8
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	ec45 4b10 	vmov	d0, r4, r5
 800a6d6:	4653      	mov	r3, sl
 800a6d8:	4632      	mov	r2, r6
 800a6da:	f000 fe55 	bl	800b388 <_dtoa_r>
 800a6de:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a6e2:	4607      	mov	r7, r0
 800a6e4:	d102      	bne.n	800a6ec <__cvt+0x66>
 800a6e6:	f019 0f01 	tst.w	r9, #1
 800a6ea:	d022      	beq.n	800a732 <__cvt+0xac>
 800a6ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a6f0:	eb07 0906 	add.w	r9, r7, r6
 800a6f4:	d110      	bne.n	800a718 <__cvt+0x92>
 800a6f6:	783b      	ldrb	r3, [r7, #0]
 800a6f8:	2b30      	cmp	r3, #48	; 0x30
 800a6fa:	d10a      	bne.n	800a712 <__cvt+0x8c>
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	2300      	movs	r3, #0
 800a700:	4620      	mov	r0, r4
 800a702:	4629      	mov	r1, r5
 800a704:	f7f6 fa50 	bl	8000ba8 <__aeabi_dcmpeq>
 800a708:	b918      	cbnz	r0, 800a712 <__cvt+0x8c>
 800a70a:	f1c6 0601 	rsb	r6, r6, #1
 800a70e:	f8ca 6000 	str.w	r6, [sl]
 800a712:	f8da 3000 	ldr.w	r3, [sl]
 800a716:	4499      	add	r9, r3
 800a718:	2200      	movs	r2, #0
 800a71a:	2300      	movs	r3, #0
 800a71c:	4620      	mov	r0, r4
 800a71e:	4629      	mov	r1, r5
 800a720:	f7f6 fa42 	bl	8000ba8 <__aeabi_dcmpeq>
 800a724:	b108      	cbz	r0, 800a72a <__cvt+0xa4>
 800a726:	f8cd 900c 	str.w	r9, [sp, #12]
 800a72a:	2230      	movs	r2, #48	; 0x30
 800a72c:	9b03      	ldr	r3, [sp, #12]
 800a72e:	454b      	cmp	r3, r9
 800a730:	d307      	bcc.n	800a742 <__cvt+0xbc>
 800a732:	9b03      	ldr	r3, [sp, #12]
 800a734:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a736:	1bdb      	subs	r3, r3, r7
 800a738:	4638      	mov	r0, r7
 800a73a:	6013      	str	r3, [r2, #0]
 800a73c:	b004      	add	sp, #16
 800a73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a742:	1c59      	adds	r1, r3, #1
 800a744:	9103      	str	r1, [sp, #12]
 800a746:	701a      	strb	r2, [r3, #0]
 800a748:	e7f0      	b.n	800a72c <__cvt+0xa6>

0800a74a <__exponent>:
 800a74a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a74c:	4603      	mov	r3, r0
 800a74e:	2900      	cmp	r1, #0
 800a750:	bfb8      	it	lt
 800a752:	4249      	neglt	r1, r1
 800a754:	f803 2b02 	strb.w	r2, [r3], #2
 800a758:	bfb4      	ite	lt
 800a75a:	222d      	movlt	r2, #45	; 0x2d
 800a75c:	222b      	movge	r2, #43	; 0x2b
 800a75e:	2909      	cmp	r1, #9
 800a760:	7042      	strb	r2, [r0, #1]
 800a762:	dd2a      	ble.n	800a7ba <__exponent+0x70>
 800a764:	f10d 0207 	add.w	r2, sp, #7
 800a768:	4617      	mov	r7, r2
 800a76a:	260a      	movs	r6, #10
 800a76c:	4694      	mov	ip, r2
 800a76e:	fb91 f5f6 	sdiv	r5, r1, r6
 800a772:	fb06 1415 	mls	r4, r6, r5, r1
 800a776:	3430      	adds	r4, #48	; 0x30
 800a778:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a77c:	460c      	mov	r4, r1
 800a77e:	2c63      	cmp	r4, #99	; 0x63
 800a780:	f102 32ff 	add.w	r2, r2, #4294967295
 800a784:	4629      	mov	r1, r5
 800a786:	dcf1      	bgt.n	800a76c <__exponent+0x22>
 800a788:	3130      	adds	r1, #48	; 0x30
 800a78a:	f1ac 0402 	sub.w	r4, ip, #2
 800a78e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a792:	1c41      	adds	r1, r0, #1
 800a794:	4622      	mov	r2, r4
 800a796:	42ba      	cmp	r2, r7
 800a798:	d30a      	bcc.n	800a7b0 <__exponent+0x66>
 800a79a:	f10d 0209 	add.w	r2, sp, #9
 800a79e:	eba2 020c 	sub.w	r2, r2, ip
 800a7a2:	42bc      	cmp	r4, r7
 800a7a4:	bf88      	it	hi
 800a7a6:	2200      	movhi	r2, #0
 800a7a8:	4413      	add	r3, r2
 800a7aa:	1a18      	subs	r0, r3, r0
 800a7ac:	b003      	add	sp, #12
 800a7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7b0:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a7b4:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a7b8:	e7ed      	b.n	800a796 <__exponent+0x4c>
 800a7ba:	2330      	movs	r3, #48	; 0x30
 800a7bc:	3130      	adds	r1, #48	; 0x30
 800a7be:	7083      	strb	r3, [r0, #2]
 800a7c0:	70c1      	strb	r1, [r0, #3]
 800a7c2:	1d03      	adds	r3, r0, #4
 800a7c4:	e7f1      	b.n	800a7aa <__exponent+0x60>
	...

0800a7c8 <_printf_float>:
 800a7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7cc:	ed2d 8b02 	vpush	{d8}
 800a7d0:	b08d      	sub	sp, #52	; 0x34
 800a7d2:	460c      	mov	r4, r1
 800a7d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a7d8:	4616      	mov	r6, r2
 800a7da:	461f      	mov	r7, r3
 800a7dc:	4605      	mov	r5, r0
 800a7de:	f000 fcd7 	bl	800b190 <_localeconv_r>
 800a7e2:	f8d0 a000 	ldr.w	sl, [r0]
 800a7e6:	4650      	mov	r0, sl
 800a7e8:	f7f5 fdb2 	bl	8000350 <strlen>
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	930a      	str	r3, [sp, #40]	; 0x28
 800a7f0:	6823      	ldr	r3, [r4, #0]
 800a7f2:	9305      	str	r3, [sp, #20]
 800a7f4:	f8d8 3000 	ldr.w	r3, [r8]
 800a7f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a7fc:	3307      	adds	r3, #7
 800a7fe:	f023 0307 	bic.w	r3, r3, #7
 800a802:	f103 0208 	add.w	r2, r3, #8
 800a806:	f8c8 2000 	str.w	r2, [r8]
 800a80a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a80e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a812:	9307      	str	r3, [sp, #28]
 800a814:	f8cd 8018 	str.w	r8, [sp, #24]
 800a818:	ee08 0a10 	vmov	s16, r0
 800a81c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a820:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a824:	4b9e      	ldr	r3, [pc, #632]	; (800aaa0 <_printf_float+0x2d8>)
 800a826:	f04f 32ff 	mov.w	r2, #4294967295
 800a82a:	f7f6 f9ef 	bl	8000c0c <__aeabi_dcmpun>
 800a82e:	bb88      	cbnz	r0, 800a894 <_printf_float+0xcc>
 800a830:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a834:	4b9a      	ldr	r3, [pc, #616]	; (800aaa0 <_printf_float+0x2d8>)
 800a836:	f04f 32ff 	mov.w	r2, #4294967295
 800a83a:	f7f6 f9c9 	bl	8000bd0 <__aeabi_dcmple>
 800a83e:	bb48      	cbnz	r0, 800a894 <_printf_float+0xcc>
 800a840:	2200      	movs	r2, #0
 800a842:	2300      	movs	r3, #0
 800a844:	4640      	mov	r0, r8
 800a846:	4649      	mov	r1, r9
 800a848:	f7f6 f9b8 	bl	8000bbc <__aeabi_dcmplt>
 800a84c:	b110      	cbz	r0, 800a854 <_printf_float+0x8c>
 800a84e:	232d      	movs	r3, #45	; 0x2d
 800a850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a854:	4a93      	ldr	r2, [pc, #588]	; (800aaa4 <_printf_float+0x2dc>)
 800a856:	4b94      	ldr	r3, [pc, #592]	; (800aaa8 <_printf_float+0x2e0>)
 800a858:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a85c:	bf94      	ite	ls
 800a85e:	4690      	movls	r8, r2
 800a860:	4698      	movhi	r8, r3
 800a862:	2303      	movs	r3, #3
 800a864:	6123      	str	r3, [r4, #16]
 800a866:	9b05      	ldr	r3, [sp, #20]
 800a868:	f023 0304 	bic.w	r3, r3, #4
 800a86c:	6023      	str	r3, [r4, #0]
 800a86e:	f04f 0900 	mov.w	r9, #0
 800a872:	9700      	str	r7, [sp, #0]
 800a874:	4633      	mov	r3, r6
 800a876:	aa0b      	add	r2, sp, #44	; 0x2c
 800a878:	4621      	mov	r1, r4
 800a87a:	4628      	mov	r0, r5
 800a87c:	f000 f9da 	bl	800ac34 <_printf_common>
 800a880:	3001      	adds	r0, #1
 800a882:	f040 8090 	bne.w	800a9a6 <_printf_float+0x1de>
 800a886:	f04f 30ff 	mov.w	r0, #4294967295
 800a88a:	b00d      	add	sp, #52	; 0x34
 800a88c:	ecbd 8b02 	vpop	{d8}
 800a890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a894:	4642      	mov	r2, r8
 800a896:	464b      	mov	r3, r9
 800a898:	4640      	mov	r0, r8
 800a89a:	4649      	mov	r1, r9
 800a89c:	f7f6 f9b6 	bl	8000c0c <__aeabi_dcmpun>
 800a8a0:	b140      	cbz	r0, 800a8b4 <_printf_float+0xec>
 800a8a2:	464b      	mov	r3, r9
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	bfbc      	itt	lt
 800a8a8:	232d      	movlt	r3, #45	; 0x2d
 800a8aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a8ae:	4a7f      	ldr	r2, [pc, #508]	; (800aaac <_printf_float+0x2e4>)
 800a8b0:	4b7f      	ldr	r3, [pc, #508]	; (800aab0 <_printf_float+0x2e8>)
 800a8b2:	e7d1      	b.n	800a858 <_printf_float+0x90>
 800a8b4:	6863      	ldr	r3, [r4, #4]
 800a8b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a8ba:	9206      	str	r2, [sp, #24]
 800a8bc:	1c5a      	adds	r2, r3, #1
 800a8be:	d13f      	bne.n	800a940 <_printf_float+0x178>
 800a8c0:	2306      	movs	r3, #6
 800a8c2:	6063      	str	r3, [r4, #4]
 800a8c4:	9b05      	ldr	r3, [sp, #20]
 800a8c6:	6861      	ldr	r1, [r4, #4]
 800a8c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	9303      	str	r3, [sp, #12]
 800a8d0:	ab0a      	add	r3, sp, #40	; 0x28
 800a8d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a8d6:	ab09      	add	r3, sp, #36	; 0x24
 800a8d8:	ec49 8b10 	vmov	d0, r8, r9
 800a8dc:	9300      	str	r3, [sp, #0]
 800a8de:	6022      	str	r2, [r4, #0]
 800a8e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	f7ff fece 	bl	800a686 <__cvt>
 800a8ea:	9b06      	ldr	r3, [sp, #24]
 800a8ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8ee:	2b47      	cmp	r3, #71	; 0x47
 800a8f0:	4680      	mov	r8, r0
 800a8f2:	d108      	bne.n	800a906 <_printf_float+0x13e>
 800a8f4:	1cc8      	adds	r0, r1, #3
 800a8f6:	db02      	blt.n	800a8fe <_printf_float+0x136>
 800a8f8:	6863      	ldr	r3, [r4, #4]
 800a8fa:	4299      	cmp	r1, r3
 800a8fc:	dd41      	ble.n	800a982 <_printf_float+0x1ba>
 800a8fe:	f1ab 0302 	sub.w	r3, fp, #2
 800a902:	fa5f fb83 	uxtb.w	fp, r3
 800a906:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a90a:	d820      	bhi.n	800a94e <_printf_float+0x186>
 800a90c:	3901      	subs	r1, #1
 800a90e:	465a      	mov	r2, fp
 800a910:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a914:	9109      	str	r1, [sp, #36]	; 0x24
 800a916:	f7ff ff18 	bl	800a74a <__exponent>
 800a91a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a91c:	1813      	adds	r3, r2, r0
 800a91e:	2a01      	cmp	r2, #1
 800a920:	4681      	mov	r9, r0
 800a922:	6123      	str	r3, [r4, #16]
 800a924:	dc02      	bgt.n	800a92c <_printf_float+0x164>
 800a926:	6822      	ldr	r2, [r4, #0]
 800a928:	07d2      	lsls	r2, r2, #31
 800a92a:	d501      	bpl.n	800a930 <_printf_float+0x168>
 800a92c:	3301      	adds	r3, #1
 800a92e:	6123      	str	r3, [r4, #16]
 800a930:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a934:	2b00      	cmp	r3, #0
 800a936:	d09c      	beq.n	800a872 <_printf_float+0xaa>
 800a938:	232d      	movs	r3, #45	; 0x2d
 800a93a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a93e:	e798      	b.n	800a872 <_printf_float+0xaa>
 800a940:	9a06      	ldr	r2, [sp, #24]
 800a942:	2a47      	cmp	r2, #71	; 0x47
 800a944:	d1be      	bne.n	800a8c4 <_printf_float+0xfc>
 800a946:	2b00      	cmp	r3, #0
 800a948:	d1bc      	bne.n	800a8c4 <_printf_float+0xfc>
 800a94a:	2301      	movs	r3, #1
 800a94c:	e7b9      	b.n	800a8c2 <_printf_float+0xfa>
 800a94e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a952:	d118      	bne.n	800a986 <_printf_float+0x1be>
 800a954:	2900      	cmp	r1, #0
 800a956:	6863      	ldr	r3, [r4, #4]
 800a958:	dd0b      	ble.n	800a972 <_printf_float+0x1aa>
 800a95a:	6121      	str	r1, [r4, #16]
 800a95c:	b913      	cbnz	r3, 800a964 <_printf_float+0x19c>
 800a95e:	6822      	ldr	r2, [r4, #0]
 800a960:	07d0      	lsls	r0, r2, #31
 800a962:	d502      	bpl.n	800a96a <_printf_float+0x1a2>
 800a964:	3301      	adds	r3, #1
 800a966:	440b      	add	r3, r1
 800a968:	6123      	str	r3, [r4, #16]
 800a96a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a96c:	f04f 0900 	mov.w	r9, #0
 800a970:	e7de      	b.n	800a930 <_printf_float+0x168>
 800a972:	b913      	cbnz	r3, 800a97a <_printf_float+0x1b2>
 800a974:	6822      	ldr	r2, [r4, #0]
 800a976:	07d2      	lsls	r2, r2, #31
 800a978:	d501      	bpl.n	800a97e <_printf_float+0x1b6>
 800a97a:	3302      	adds	r3, #2
 800a97c:	e7f4      	b.n	800a968 <_printf_float+0x1a0>
 800a97e:	2301      	movs	r3, #1
 800a980:	e7f2      	b.n	800a968 <_printf_float+0x1a0>
 800a982:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a988:	4299      	cmp	r1, r3
 800a98a:	db05      	blt.n	800a998 <_printf_float+0x1d0>
 800a98c:	6823      	ldr	r3, [r4, #0]
 800a98e:	6121      	str	r1, [r4, #16]
 800a990:	07d8      	lsls	r0, r3, #31
 800a992:	d5ea      	bpl.n	800a96a <_printf_float+0x1a2>
 800a994:	1c4b      	adds	r3, r1, #1
 800a996:	e7e7      	b.n	800a968 <_printf_float+0x1a0>
 800a998:	2900      	cmp	r1, #0
 800a99a:	bfd4      	ite	le
 800a99c:	f1c1 0202 	rsble	r2, r1, #2
 800a9a0:	2201      	movgt	r2, #1
 800a9a2:	4413      	add	r3, r2
 800a9a4:	e7e0      	b.n	800a968 <_printf_float+0x1a0>
 800a9a6:	6823      	ldr	r3, [r4, #0]
 800a9a8:	055a      	lsls	r2, r3, #21
 800a9aa:	d407      	bmi.n	800a9bc <_printf_float+0x1f4>
 800a9ac:	6923      	ldr	r3, [r4, #16]
 800a9ae:	4642      	mov	r2, r8
 800a9b0:	4631      	mov	r1, r6
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	47b8      	blx	r7
 800a9b6:	3001      	adds	r0, #1
 800a9b8:	d12c      	bne.n	800aa14 <_printf_float+0x24c>
 800a9ba:	e764      	b.n	800a886 <_printf_float+0xbe>
 800a9bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a9c0:	f240 80e0 	bls.w	800ab84 <_printf_float+0x3bc>
 800a9c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	f7f6 f8ec 	bl	8000ba8 <__aeabi_dcmpeq>
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	d034      	beq.n	800aa3e <_printf_float+0x276>
 800a9d4:	4a37      	ldr	r2, [pc, #220]	; (800aab4 <_printf_float+0x2ec>)
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	4631      	mov	r1, r6
 800a9da:	4628      	mov	r0, r5
 800a9dc:	47b8      	blx	r7
 800a9de:	3001      	adds	r0, #1
 800a9e0:	f43f af51 	beq.w	800a886 <_printf_float+0xbe>
 800a9e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	db02      	blt.n	800a9f2 <_printf_float+0x22a>
 800a9ec:	6823      	ldr	r3, [r4, #0]
 800a9ee:	07d8      	lsls	r0, r3, #31
 800a9f0:	d510      	bpl.n	800aa14 <_printf_float+0x24c>
 800a9f2:	ee18 3a10 	vmov	r3, s16
 800a9f6:	4652      	mov	r2, sl
 800a9f8:	4631      	mov	r1, r6
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	47b8      	blx	r7
 800a9fe:	3001      	adds	r0, #1
 800aa00:	f43f af41 	beq.w	800a886 <_printf_float+0xbe>
 800aa04:	f04f 0800 	mov.w	r8, #0
 800aa08:	f104 091a 	add.w	r9, r4, #26
 800aa0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	4543      	cmp	r3, r8
 800aa12:	dc09      	bgt.n	800aa28 <_printf_float+0x260>
 800aa14:	6823      	ldr	r3, [r4, #0]
 800aa16:	079b      	lsls	r3, r3, #30
 800aa18:	f100 8107 	bmi.w	800ac2a <_printf_float+0x462>
 800aa1c:	68e0      	ldr	r0, [r4, #12]
 800aa1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa20:	4298      	cmp	r0, r3
 800aa22:	bfb8      	it	lt
 800aa24:	4618      	movlt	r0, r3
 800aa26:	e730      	b.n	800a88a <_printf_float+0xc2>
 800aa28:	2301      	movs	r3, #1
 800aa2a:	464a      	mov	r2, r9
 800aa2c:	4631      	mov	r1, r6
 800aa2e:	4628      	mov	r0, r5
 800aa30:	47b8      	blx	r7
 800aa32:	3001      	adds	r0, #1
 800aa34:	f43f af27 	beq.w	800a886 <_printf_float+0xbe>
 800aa38:	f108 0801 	add.w	r8, r8, #1
 800aa3c:	e7e6      	b.n	800aa0c <_printf_float+0x244>
 800aa3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	dc39      	bgt.n	800aab8 <_printf_float+0x2f0>
 800aa44:	4a1b      	ldr	r2, [pc, #108]	; (800aab4 <_printf_float+0x2ec>)
 800aa46:	2301      	movs	r3, #1
 800aa48:	4631      	mov	r1, r6
 800aa4a:	4628      	mov	r0, r5
 800aa4c:	47b8      	blx	r7
 800aa4e:	3001      	adds	r0, #1
 800aa50:	f43f af19 	beq.w	800a886 <_printf_float+0xbe>
 800aa54:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	d102      	bne.n	800aa62 <_printf_float+0x29a>
 800aa5c:	6823      	ldr	r3, [r4, #0]
 800aa5e:	07d9      	lsls	r1, r3, #31
 800aa60:	d5d8      	bpl.n	800aa14 <_printf_float+0x24c>
 800aa62:	ee18 3a10 	vmov	r3, s16
 800aa66:	4652      	mov	r2, sl
 800aa68:	4631      	mov	r1, r6
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	47b8      	blx	r7
 800aa6e:	3001      	adds	r0, #1
 800aa70:	f43f af09 	beq.w	800a886 <_printf_float+0xbe>
 800aa74:	f04f 0900 	mov.w	r9, #0
 800aa78:	f104 0a1a 	add.w	sl, r4, #26
 800aa7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa7e:	425b      	negs	r3, r3
 800aa80:	454b      	cmp	r3, r9
 800aa82:	dc01      	bgt.n	800aa88 <_printf_float+0x2c0>
 800aa84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa86:	e792      	b.n	800a9ae <_printf_float+0x1e6>
 800aa88:	2301      	movs	r3, #1
 800aa8a:	4652      	mov	r2, sl
 800aa8c:	4631      	mov	r1, r6
 800aa8e:	4628      	mov	r0, r5
 800aa90:	47b8      	blx	r7
 800aa92:	3001      	adds	r0, #1
 800aa94:	f43f aef7 	beq.w	800a886 <_printf_float+0xbe>
 800aa98:	f109 0901 	add.w	r9, r9, #1
 800aa9c:	e7ee      	b.n	800aa7c <_printf_float+0x2b4>
 800aa9e:	bf00      	nop
 800aaa0:	7fefffff 	.word	0x7fefffff
 800aaa4:	0800d353 	.word	0x0800d353
 800aaa8:	0800d357 	.word	0x0800d357
 800aaac:	0800d35b 	.word	0x0800d35b
 800aab0:	0800d35f 	.word	0x0800d35f
 800aab4:	0800d363 	.word	0x0800d363
 800aab8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aaba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aabc:	429a      	cmp	r2, r3
 800aabe:	bfa8      	it	ge
 800aac0:	461a      	movge	r2, r3
 800aac2:	2a00      	cmp	r2, #0
 800aac4:	4691      	mov	r9, r2
 800aac6:	dc37      	bgt.n	800ab38 <_printf_float+0x370>
 800aac8:	f04f 0b00 	mov.w	fp, #0
 800aacc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aad0:	f104 021a 	add.w	r2, r4, #26
 800aad4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aad6:	9305      	str	r3, [sp, #20]
 800aad8:	eba3 0309 	sub.w	r3, r3, r9
 800aadc:	455b      	cmp	r3, fp
 800aade:	dc33      	bgt.n	800ab48 <_printf_float+0x380>
 800aae0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aae4:	429a      	cmp	r2, r3
 800aae6:	db3b      	blt.n	800ab60 <_printf_float+0x398>
 800aae8:	6823      	ldr	r3, [r4, #0]
 800aaea:	07da      	lsls	r2, r3, #31
 800aaec:	d438      	bmi.n	800ab60 <_printf_float+0x398>
 800aaee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aaf2:	eba2 0903 	sub.w	r9, r2, r3
 800aaf6:	9b05      	ldr	r3, [sp, #20]
 800aaf8:	1ad2      	subs	r2, r2, r3
 800aafa:	4591      	cmp	r9, r2
 800aafc:	bfa8      	it	ge
 800aafe:	4691      	movge	r9, r2
 800ab00:	f1b9 0f00 	cmp.w	r9, #0
 800ab04:	dc35      	bgt.n	800ab72 <_printf_float+0x3aa>
 800ab06:	f04f 0800 	mov.w	r8, #0
 800ab0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab0e:	f104 0a1a 	add.w	sl, r4, #26
 800ab12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab16:	1a9b      	subs	r3, r3, r2
 800ab18:	eba3 0309 	sub.w	r3, r3, r9
 800ab1c:	4543      	cmp	r3, r8
 800ab1e:	f77f af79 	ble.w	800aa14 <_printf_float+0x24c>
 800ab22:	2301      	movs	r3, #1
 800ab24:	4652      	mov	r2, sl
 800ab26:	4631      	mov	r1, r6
 800ab28:	4628      	mov	r0, r5
 800ab2a:	47b8      	blx	r7
 800ab2c:	3001      	adds	r0, #1
 800ab2e:	f43f aeaa 	beq.w	800a886 <_printf_float+0xbe>
 800ab32:	f108 0801 	add.w	r8, r8, #1
 800ab36:	e7ec      	b.n	800ab12 <_printf_float+0x34a>
 800ab38:	4613      	mov	r3, r2
 800ab3a:	4631      	mov	r1, r6
 800ab3c:	4642      	mov	r2, r8
 800ab3e:	4628      	mov	r0, r5
 800ab40:	47b8      	blx	r7
 800ab42:	3001      	adds	r0, #1
 800ab44:	d1c0      	bne.n	800aac8 <_printf_float+0x300>
 800ab46:	e69e      	b.n	800a886 <_printf_float+0xbe>
 800ab48:	2301      	movs	r3, #1
 800ab4a:	4631      	mov	r1, r6
 800ab4c:	4628      	mov	r0, r5
 800ab4e:	9205      	str	r2, [sp, #20]
 800ab50:	47b8      	blx	r7
 800ab52:	3001      	adds	r0, #1
 800ab54:	f43f ae97 	beq.w	800a886 <_printf_float+0xbe>
 800ab58:	9a05      	ldr	r2, [sp, #20]
 800ab5a:	f10b 0b01 	add.w	fp, fp, #1
 800ab5e:	e7b9      	b.n	800aad4 <_printf_float+0x30c>
 800ab60:	ee18 3a10 	vmov	r3, s16
 800ab64:	4652      	mov	r2, sl
 800ab66:	4631      	mov	r1, r6
 800ab68:	4628      	mov	r0, r5
 800ab6a:	47b8      	blx	r7
 800ab6c:	3001      	adds	r0, #1
 800ab6e:	d1be      	bne.n	800aaee <_printf_float+0x326>
 800ab70:	e689      	b.n	800a886 <_printf_float+0xbe>
 800ab72:	9a05      	ldr	r2, [sp, #20]
 800ab74:	464b      	mov	r3, r9
 800ab76:	4442      	add	r2, r8
 800ab78:	4631      	mov	r1, r6
 800ab7a:	4628      	mov	r0, r5
 800ab7c:	47b8      	blx	r7
 800ab7e:	3001      	adds	r0, #1
 800ab80:	d1c1      	bne.n	800ab06 <_printf_float+0x33e>
 800ab82:	e680      	b.n	800a886 <_printf_float+0xbe>
 800ab84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab86:	2a01      	cmp	r2, #1
 800ab88:	dc01      	bgt.n	800ab8e <_printf_float+0x3c6>
 800ab8a:	07db      	lsls	r3, r3, #31
 800ab8c:	d53a      	bpl.n	800ac04 <_printf_float+0x43c>
 800ab8e:	2301      	movs	r3, #1
 800ab90:	4642      	mov	r2, r8
 800ab92:	4631      	mov	r1, r6
 800ab94:	4628      	mov	r0, r5
 800ab96:	47b8      	blx	r7
 800ab98:	3001      	adds	r0, #1
 800ab9a:	f43f ae74 	beq.w	800a886 <_printf_float+0xbe>
 800ab9e:	ee18 3a10 	vmov	r3, s16
 800aba2:	4652      	mov	r2, sl
 800aba4:	4631      	mov	r1, r6
 800aba6:	4628      	mov	r0, r5
 800aba8:	47b8      	blx	r7
 800abaa:	3001      	adds	r0, #1
 800abac:	f43f ae6b 	beq.w	800a886 <_printf_float+0xbe>
 800abb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800abb4:	2200      	movs	r2, #0
 800abb6:	2300      	movs	r3, #0
 800abb8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800abbc:	f7f5 fff4 	bl	8000ba8 <__aeabi_dcmpeq>
 800abc0:	b9d8      	cbnz	r0, 800abfa <_printf_float+0x432>
 800abc2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800abc6:	f108 0201 	add.w	r2, r8, #1
 800abca:	4631      	mov	r1, r6
 800abcc:	4628      	mov	r0, r5
 800abce:	47b8      	blx	r7
 800abd0:	3001      	adds	r0, #1
 800abd2:	d10e      	bne.n	800abf2 <_printf_float+0x42a>
 800abd4:	e657      	b.n	800a886 <_printf_float+0xbe>
 800abd6:	2301      	movs	r3, #1
 800abd8:	4652      	mov	r2, sl
 800abda:	4631      	mov	r1, r6
 800abdc:	4628      	mov	r0, r5
 800abde:	47b8      	blx	r7
 800abe0:	3001      	adds	r0, #1
 800abe2:	f43f ae50 	beq.w	800a886 <_printf_float+0xbe>
 800abe6:	f108 0801 	add.w	r8, r8, #1
 800abea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abec:	3b01      	subs	r3, #1
 800abee:	4543      	cmp	r3, r8
 800abf0:	dcf1      	bgt.n	800abd6 <_printf_float+0x40e>
 800abf2:	464b      	mov	r3, r9
 800abf4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800abf8:	e6da      	b.n	800a9b0 <_printf_float+0x1e8>
 800abfa:	f04f 0800 	mov.w	r8, #0
 800abfe:	f104 0a1a 	add.w	sl, r4, #26
 800ac02:	e7f2      	b.n	800abea <_printf_float+0x422>
 800ac04:	2301      	movs	r3, #1
 800ac06:	4642      	mov	r2, r8
 800ac08:	e7df      	b.n	800abca <_printf_float+0x402>
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	464a      	mov	r2, r9
 800ac0e:	4631      	mov	r1, r6
 800ac10:	4628      	mov	r0, r5
 800ac12:	47b8      	blx	r7
 800ac14:	3001      	adds	r0, #1
 800ac16:	f43f ae36 	beq.w	800a886 <_printf_float+0xbe>
 800ac1a:	f108 0801 	add.w	r8, r8, #1
 800ac1e:	68e3      	ldr	r3, [r4, #12]
 800ac20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac22:	1a5b      	subs	r3, r3, r1
 800ac24:	4543      	cmp	r3, r8
 800ac26:	dcf0      	bgt.n	800ac0a <_printf_float+0x442>
 800ac28:	e6f8      	b.n	800aa1c <_printf_float+0x254>
 800ac2a:	f04f 0800 	mov.w	r8, #0
 800ac2e:	f104 0919 	add.w	r9, r4, #25
 800ac32:	e7f4      	b.n	800ac1e <_printf_float+0x456>

0800ac34 <_printf_common>:
 800ac34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac38:	4616      	mov	r6, r2
 800ac3a:	4699      	mov	r9, r3
 800ac3c:	688a      	ldr	r2, [r1, #8]
 800ac3e:	690b      	ldr	r3, [r1, #16]
 800ac40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac44:	4293      	cmp	r3, r2
 800ac46:	bfb8      	it	lt
 800ac48:	4613      	movlt	r3, r2
 800ac4a:	6033      	str	r3, [r6, #0]
 800ac4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac50:	4607      	mov	r7, r0
 800ac52:	460c      	mov	r4, r1
 800ac54:	b10a      	cbz	r2, 800ac5a <_printf_common+0x26>
 800ac56:	3301      	adds	r3, #1
 800ac58:	6033      	str	r3, [r6, #0]
 800ac5a:	6823      	ldr	r3, [r4, #0]
 800ac5c:	0699      	lsls	r1, r3, #26
 800ac5e:	bf42      	ittt	mi
 800ac60:	6833      	ldrmi	r3, [r6, #0]
 800ac62:	3302      	addmi	r3, #2
 800ac64:	6033      	strmi	r3, [r6, #0]
 800ac66:	6825      	ldr	r5, [r4, #0]
 800ac68:	f015 0506 	ands.w	r5, r5, #6
 800ac6c:	d106      	bne.n	800ac7c <_printf_common+0x48>
 800ac6e:	f104 0a19 	add.w	sl, r4, #25
 800ac72:	68e3      	ldr	r3, [r4, #12]
 800ac74:	6832      	ldr	r2, [r6, #0]
 800ac76:	1a9b      	subs	r3, r3, r2
 800ac78:	42ab      	cmp	r3, r5
 800ac7a:	dc26      	bgt.n	800acca <_printf_common+0x96>
 800ac7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac80:	1e13      	subs	r3, r2, #0
 800ac82:	6822      	ldr	r2, [r4, #0]
 800ac84:	bf18      	it	ne
 800ac86:	2301      	movne	r3, #1
 800ac88:	0692      	lsls	r2, r2, #26
 800ac8a:	d42b      	bmi.n	800ace4 <_printf_common+0xb0>
 800ac8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac90:	4649      	mov	r1, r9
 800ac92:	4638      	mov	r0, r7
 800ac94:	47c0      	blx	r8
 800ac96:	3001      	adds	r0, #1
 800ac98:	d01e      	beq.n	800acd8 <_printf_common+0xa4>
 800ac9a:	6823      	ldr	r3, [r4, #0]
 800ac9c:	6922      	ldr	r2, [r4, #16]
 800ac9e:	f003 0306 	and.w	r3, r3, #6
 800aca2:	2b04      	cmp	r3, #4
 800aca4:	bf02      	ittt	eq
 800aca6:	68e5      	ldreq	r5, [r4, #12]
 800aca8:	6833      	ldreq	r3, [r6, #0]
 800acaa:	1aed      	subeq	r5, r5, r3
 800acac:	68a3      	ldr	r3, [r4, #8]
 800acae:	bf0c      	ite	eq
 800acb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acb4:	2500      	movne	r5, #0
 800acb6:	4293      	cmp	r3, r2
 800acb8:	bfc4      	itt	gt
 800acba:	1a9b      	subgt	r3, r3, r2
 800acbc:	18ed      	addgt	r5, r5, r3
 800acbe:	2600      	movs	r6, #0
 800acc0:	341a      	adds	r4, #26
 800acc2:	42b5      	cmp	r5, r6
 800acc4:	d11a      	bne.n	800acfc <_printf_common+0xc8>
 800acc6:	2000      	movs	r0, #0
 800acc8:	e008      	b.n	800acdc <_printf_common+0xa8>
 800acca:	2301      	movs	r3, #1
 800accc:	4652      	mov	r2, sl
 800acce:	4649      	mov	r1, r9
 800acd0:	4638      	mov	r0, r7
 800acd2:	47c0      	blx	r8
 800acd4:	3001      	adds	r0, #1
 800acd6:	d103      	bne.n	800ace0 <_printf_common+0xac>
 800acd8:	f04f 30ff 	mov.w	r0, #4294967295
 800acdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ace0:	3501      	adds	r5, #1
 800ace2:	e7c6      	b.n	800ac72 <_printf_common+0x3e>
 800ace4:	18e1      	adds	r1, r4, r3
 800ace6:	1c5a      	adds	r2, r3, #1
 800ace8:	2030      	movs	r0, #48	; 0x30
 800acea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800acee:	4422      	add	r2, r4
 800acf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800acf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800acf8:	3302      	adds	r3, #2
 800acfa:	e7c7      	b.n	800ac8c <_printf_common+0x58>
 800acfc:	2301      	movs	r3, #1
 800acfe:	4622      	mov	r2, r4
 800ad00:	4649      	mov	r1, r9
 800ad02:	4638      	mov	r0, r7
 800ad04:	47c0      	blx	r8
 800ad06:	3001      	adds	r0, #1
 800ad08:	d0e6      	beq.n	800acd8 <_printf_common+0xa4>
 800ad0a:	3601      	adds	r6, #1
 800ad0c:	e7d9      	b.n	800acc2 <_printf_common+0x8e>
	...

0800ad10 <_printf_i>:
 800ad10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad14:	7e0f      	ldrb	r7, [r1, #24]
 800ad16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad18:	2f78      	cmp	r7, #120	; 0x78
 800ad1a:	4691      	mov	r9, r2
 800ad1c:	4680      	mov	r8, r0
 800ad1e:	460c      	mov	r4, r1
 800ad20:	469a      	mov	sl, r3
 800ad22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad26:	d807      	bhi.n	800ad38 <_printf_i+0x28>
 800ad28:	2f62      	cmp	r7, #98	; 0x62
 800ad2a:	d80a      	bhi.n	800ad42 <_printf_i+0x32>
 800ad2c:	2f00      	cmp	r7, #0
 800ad2e:	f000 80d4 	beq.w	800aeda <_printf_i+0x1ca>
 800ad32:	2f58      	cmp	r7, #88	; 0x58
 800ad34:	f000 80c0 	beq.w	800aeb8 <_printf_i+0x1a8>
 800ad38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad40:	e03a      	b.n	800adb8 <_printf_i+0xa8>
 800ad42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad46:	2b15      	cmp	r3, #21
 800ad48:	d8f6      	bhi.n	800ad38 <_printf_i+0x28>
 800ad4a:	a101      	add	r1, pc, #4	; (adr r1, 800ad50 <_printf_i+0x40>)
 800ad4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad50:	0800ada9 	.word	0x0800ada9
 800ad54:	0800adbd 	.word	0x0800adbd
 800ad58:	0800ad39 	.word	0x0800ad39
 800ad5c:	0800ad39 	.word	0x0800ad39
 800ad60:	0800ad39 	.word	0x0800ad39
 800ad64:	0800ad39 	.word	0x0800ad39
 800ad68:	0800adbd 	.word	0x0800adbd
 800ad6c:	0800ad39 	.word	0x0800ad39
 800ad70:	0800ad39 	.word	0x0800ad39
 800ad74:	0800ad39 	.word	0x0800ad39
 800ad78:	0800ad39 	.word	0x0800ad39
 800ad7c:	0800aec1 	.word	0x0800aec1
 800ad80:	0800ade9 	.word	0x0800ade9
 800ad84:	0800ae7b 	.word	0x0800ae7b
 800ad88:	0800ad39 	.word	0x0800ad39
 800ad8c:	0800ad39 	.word	0x0800ad39
 800ad90:	0800aee3 	.word	0x0800aee3
 800ad94:	0800ad39 	.word	0x0800ad39
 800ad98:	0800ade9 	.word	0x0800ade9
 800ad9c:	0800ad39 	.word	0x0800ad39
 800ada0:	0800ad39 	.word	0x0800ad39
 800ada4:	0800ae83 	.word	0x0800ae83
 800ada8:	682b      	ldr	r3, [r5, #0]
 800adaa:	1d1a      	adds	r2, r3, #4
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	602a      	str	r2, [r5, #0]
 800adb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800adb8:	2301      	movs	r3, #1
 800adba:	e09f      	b.n	800aefc <_printf_i+0x1ec>
 800adbc:	6820      	ldr	r0, [r4, #0]
 800adbe:	682b      	ldr	r3, [r5, #0]
 800adc0:	0607      	lsls	r7, r0, #24
 800adc2:	f103 0104 	add.w	r1, r3, #4
 800adc6:	6029      	str	r1, [r5, #0]
 800adc8:	d501      	bpl.n	800adce <_printf_i+0xbe>
 800adca:	681e      	ldr	r6, [r3, #0]
 800adcc:	e003      	b.n	800add6 <_printf_i+0xc6>
 800adce:	0646      	lsls	r6, r0, #25
 800add0:	d5fb      	bpl.n	800adca <_printf_i+0xba>
 800add2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800add6:	2e00      	cmp	r6, #0
 800add8:	da03      	bge.n	800ade2 <_printf_i+0xd2>
 800adda:	232d      	movs	r3, #45	; 0x2d
 800addc:	4276      	negs	r6, r6
 800adde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ade2:	485a      	ldr	r0, [pc, #360]	; (800af4c <_printf_i+0x23c>)
 800ade4:	230a      	movs	r3, #10
 800ade6:	e012      	b.n	800ae0e <_printf_i+0xfe>
 800ade8:	682b      	ldr	r3, [r5, #0]
 800adea:	6820      	ldr	r0, [r4, #0]
 800adec:	1d19      	adds	r1, r3, #4
 800adee:	6029      	str	r1, [r5, #0]
 800adf0:	0605      	lsls	r5, r0, #24
 800adf2:	d501      	bpl.n	800adf8 <_printf_i+0xe8>
 800adf4:	681e      	ldr	r6, [r3, #0]
 800adf6:	e002      	b.n	800adfe <_printf_i+0xee>
 800adf8:	0641      	lsls	r1, r0, #25
 800adfa:	d5fb      	bpl.n	800adf4 <_printf_i+0xe4>
 800adfc:	881e      	ldrh	r6, [r3, #0]
 800adfe:	4853      	ldr	r0, [pc, #332]	; (800af4c <_printf_i+0x23c>)
 800ae00:	2f6f      	cmp	r7, #111	; 0x6f
 800ae02:	bf0c      	ite	eq
 800ae04:	2308      	moveq	r3, #8
 800ae06:	230a      	movne	r3, #10
 800ae08:	2100      	movs	r1, #0
 800ae0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae0e:	6865      	ldr	r5, [r4, #4]
 800ae10:	60a5      	str	r5, [r4, #8]
 800ae12:	2d00      	cmp	r5, #0
 800ae14:	bfa2      	ittt	ge
 800ae16:	6821      	ldrge	r1, [r4, #0]
 800ae18:	f021 0104 	bicge.w	r1, r1, #4
 800ae1c:	6021      	strge	r1, [r4, #0]
 800ae1e:	b90e      	cbnz	r6, 800ae24 <_printf_i+0x114>
 800ae20:	2d00      	cmp	r5, #0
 800ae22:	d04b      	beq.n	800aebc <_printf_i+0x1ac>
 800ae24:	4615      	mov	r5, r2
 800ae26:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae2a:	fb03 6711 	mls	r7, r3, r1, r6
 800ae2e:	5dc7      	ldrb	r7, [r0, r7]
 800ae30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae34:	4637      	mov	r7, r6
 800ae36:	42bb      	cmp	r3, r7
 800ae38:	460e      	mov	r6, r1
 800ae3a:	d9f4      	bls.n	800ae26 <_printf_i+0x116>
 800ae3c:	2b08      	cmp	r3, #8
 800ae3e:	d10b      	bne.n	800ae58 <_printf_i+0x148>
 800ae40:	6823      	ldr	r3, [r4, #0]
 800ae42:	07de      	lsls	r6, r3, #31
 800ae44:	d508      	bpl.n	800ae58 <_printf_i+0x148>
 800ae46:	6923      	ldr	r3, [r4, #16]
 800ae48:	6861      	ldr	r1, [r4, #4]
 800ae4a:	4299      	cmp	r1, r3
 800ae4c:	bfde      	ittt	le
 800ae4e:	2330      	movle	r3, #48	; 0x30
 800ae50:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae54:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae58:	1b52      	subs	r2, r2, r5
 800ae5a:	6122      	str	r2, [r4, #16]
 800ae5c:	f8cd a000 	str.w	sl, [sp]
 800ae60:	464b      	mov	r3, r9
 800ae62:	aa03      	add	r2, sp, #12
 800ae64:	4621      	mov	r1, r4
 800ae66:	4640      	mov	r0, r8
 800ae68:	f7ff fee4 	bl	800ac34 <_printf_common>
 800ae6c:	3001      	adds	r0, #1
 800ae6e:	d14a      	bne.n	800af06 <_printf_i+0x1f6>
 800ae70:	f04f 30ff 	mov.w	r0, #4294967295
 800ae74:	b004      	add	sp, #16
 800ae76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae7a:	6823      	ldr	r3, [r4, #0]
 800ae7c:	f043 0320 	orr.w	r3, r3, #32
 800ae80:	6023      	str	r3, [r4, #0]
 800ae82:	4833      	ldr	r0, [pc, #204]	; (800af50 <_printf_i+0x240>)
 800ae84:	2778      	movs	r7, #120	; 0x78
 800ae86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ae8a:	6823      	ldr	r3, [r4, #0]
 800ae8c:	6829      	ldr	r1, [r5, #0]
 800ae8e:	061f      	lsls	r7, r3, #24
 800ae90:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae94:	d402      	bmi.n	800ae9c <_printf_i+0x18c>
 800ae96:	065f      	lsls	r7, r3, #25
 800ae98:	bf48      	it	mi
 800ae9a:	b2b6      	uxthmi	r6, r6
 800ae9c:	07df      	lsls	r7, r3, #31
 800ae9e:	bf48      	it	mi
 800aea0:	f043 0320 	orrmi.w	r3, r3, #32
 800aea4:	6029      	str	r1, [r5, #0]
 800aea6:	bf48      	it	mi
 800aea8:	6023      	strmi	r3, [r4, #0]
 800aeaa:	b91e      	cbnz	r6, 800aeb4 <_printf_i+0x1a4>
 800aeac:	6823      	ldr	r3, [r4, #0]
 800aeae:	f023 0320 	bic.w	r3, r3, #32
 800aeb2:	6023      	str	r3, [r4, #0]
 800aeb4:	2310      	movs	r3, #16
 800aeb6:	e7a7      	b.n	800ae08 <_printf_i+0xf8>
 800aeb8:	4824      	ldr	r0, [pc, #144]	; (800af4c <_printf_i+0x23c>)
 800aeba:	e7e4      	b.n	800ae86 <_printf_i+0x176>
 800aebc:	4615      	mov	r5, r2
 800aebe:	e7bd      	b.n	800ae3c <_printf_i+0x12c>
 800aec0:	682b      	ldr	r3, [r5, #0]
 800aec2:	6826      	ldr	r6, [r4, #0]
 800aec4:	6961      	ldr	r1, [r4, #20]
 800aec6:	1d18      	adds	r0, r3, #4
 800aec8:	6028      	str	r0, [r5, #0]
 800aeca:	0635      	lsls	r5, r6, #24
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	d501      	bpl.n	800aed4 <_printf_i+0x1c4>
 800aed0:	6019      	str	r1, [r3, #0]
 800aed2:	e002      	b.n	800aeda <_printf_i+0x1ca>
 800aed4:	0670      	lsls	r0, r6, #25
 800aed6:	d5fb      	bpl.n	800aed0 <_printf_i+0x1c0>
 800aed8:	8019      	strh	r1, [r3, #0]
 800aeda:	2300      	movs	r3, #0
 800aedc:	6123      	str	r3, [r4, #16]
 800aede:	4615      	mov	r5, r2
 800aee0:	e7bc      	b.n	800ae5c <_printf_i+0x14c>
 800aee2:	682b      	ldr	r3, [r5, #0]
 800aee4:	1d1a      	adds	r2, r3, #4
 800aee6:	602a      	str	r2, [r5, #0]
 800aee8:	681d      	ldr	r5, [r3, #0]
 800aeea:	6862      	ldr	r2, [r4, #4]
 800aeec:	2100      	movs	r1, #0
 800aeee:	4628      	mov	r0, r5
 800aef0:	f7f5 f9de 	bl	80002b0 <memchr>
 800aef4:	b108      	cbz	r0, 800aefa <_printf_i+0x1ea>
 800aef6:	1b40      	subs	r0, r0, r5
 800aef8:	6060      	str	r0, [r4, #4]
 800aefa:	6863      	ldr	r3, [r4, #4]
 800aefc:	6123      	str	r3, [r4, #16]
 800aefe:	2300      	movs	r3, #0
 800af00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af04:	e7aa      	b.n	800ae5c <_printf_i+0x14c>
 800af06:	6923      	ldr	r3, [r4, #16]
 800af08:	462a      	mov	r2, r5
 800af0a:	4649      	mov	r1, r9
 800af0c:	4640      	mov	r0, r8
 800af0e:	47d0      	blx	sl
 800af10:	3001      	adds	r0, #1
 800af12:	d0ad      	beq.n	800ae70 <_printf_i+0x160>
 800af14:	6823      	ldr	r3, [r4, #0]
 800af16:	079b      	lsls	r3, r3, #30
 800af18:	d413      	bmi.n	800af42 <_printf_i+0x232>
 800af1a:	68e0      	ldr	r0, [r4, #12]
 800af1c:	9b03      	ldr	r3, [sp, #12]
 800af1e:	4298      	cmp	r0, r3
 800af20:	bfb8      	it	lt
 800af22:	4618      	movlt	r0, r3
 800af24:	e7a6      	b.n	800ae74 <_printf_i+0x164>
 800af26:	2301      	movs	r3, #1
 800af28:	4632      	mov	r2, r6
 800af2a:	4649      	mov	r1, r9
 800af2c:	4640      	mov	r0, r8
 800af2e:	47d0      	blx	sl
 800af30:	3001      	adds	r0, #1
 800af32:	d09d      	beq.n	800ae70 <_printf_i+0x160>
 800af34:	3501      	adds	r5, #1
 800af36:	68e3      	ldr	r3, [r4, #12]
 800af38:	9903      	ldr	r1, [sp, #12]
 800af3a:	1a5b      	subs	r3, r3, r1
 800af3c:	42ab      	cmp	r3, r5
 800af3e:	dcf2      	bgt.n	800af26 <_printf_i+0x216>
 800af40:	e7eb      	b.n	800af1a <_printf_i+0x20a>
 800af42:	2500      	movs	r5, #0
 800af44:	f104 0619 	add.w	r6, r4, #25
 800af48:	e7f5      	b.n	800af36 <_printf_i+0x226>
 800af4a:	bf00      	nop
 800af4c:	0800d365 	.word	0x0800d365
 800af50:	0800d376 	.word	0x0800d376

0800af54 <std>:
 800af54:	2300      	movs	r3, #0
 800af56:	b510      	push	{r4, lr}
 800af58:	4604      	mov	r4, r0
 800af5a:	e9c0 3300 	strd	r3, r3, [r0]
 800af5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af62:	6083      	str	r3, [r0, #8]
 800af64:	8181      	strh	r1, [r0, #12]
 800af66:	6643      	str	r3, [r0, #100]	; 0x64
 800af68:	81c2      	strh	r2, [r0, #14]
 800af6a:	6183      	str	r3, [r0, #24]
 800af6c:	4619      	mov	r1, r3
 800af6e:	2208      	movs	r2, #8
 800af70:	305c      	adds	r0, #92	; 0x5c
 800af72:	f000 f904 	bl	800b17e <memset>
 800af76:	4b0d      	ldr	r3, [pc, #52]	; (800afac <std+0x58>)
 800af78:	6263      	str	r3, [r4, #36]	; 0x24
 800af7a:	4b0d      	ldr	r3, [pc, #52]	; (800afb0 <std+0x5c>)
 800af7c:	62a3      	str	r3, [r4, #40]	; 0x28
 800af7e:	4b0d      	ldr	r3, [pc, #52]	; (800afb4 <std+0x60>)
 800af80:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af82:	4b0d      	ldr	r3, [pc, #52]	; (800afb8 <std+0x64>)
 800af84:	6323      	str	r3, [r4, #48]	; 0x30
 800af86:	4b0d      	ldr	r3, [pc, #52]	; (800afbc <std+0x68>)
 800af88:	6224      	str	r4, [r4, #32]
 800af8a:	429c      	cmp	r4, r3
 800af8c:	d006      	beq.n	800af9c <std+0x48>
 800af8e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800af92:	4294      	cmp	r4, r2
 800af94:	d002      	beq.n	800af9c <std+0x48>
 800af96:	33d0      	adds	r3, #208	; 0xd0
 800af98:	429c      	cmp	r4, r3
 800af9a:	d105      	bne.n	800afa8 <std+0x54>
 800af9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800afa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afa4:	f000 b956 	b.w	800b254 <__retarget_lock_init_recursive>
 800afa8:	bd10      	pop	{r4, pc}
 800afaa:	bf00      	nop
 800afac:	0800b0d9 	.word	0x0800b0d9
 800afb0:	0800b0fb 	.word	0x0800b0fb
 800afb4:	0800b133 	.word	0x0800b133
 800afb8:	0800b157 	.word	0x0800b157
 800afbc:	20014b4c 	.word	0x20014b4c

0800afc0 <stdio_exit_handler>:
 800afc0:	4a02      	ldr	r2, [pc, #8]	; (800afcc <stdio_exit_handler+0xc>)
 800afc2:	4903      	ldr	r1, [pc, #12]	; (800afd0 <stdio_exit_handler+0x10>)
 800afc4:	4803      	ldr	r0, [pc, #12]	; (800afd4 <stdio_exit_handler+0x14>)
 800afc6:	f000 b869 	b.w	800b09c <_fwalk_sglue>
 800afca:	bf00      	nop
 800afcc:	20000014 	.word	0x20000014
 800afd0:	0800c9b1 	.word	0x0800c9b1
 800afd4:	2000018c 	.word	0x2000018c

0800afd8 <cleanup_stdio>:
 800afd8:	6841      	ldr	r1, [r0, #4]
 800afda:	4b0c      	ldr	r3, [pc, #48]	; (800b00c <cleanup_stdio+0x34>)
 800afdc:	4299      	cmp	r1, r3
 800afde:	b510      	push	{r4, lr}
 800afe0:	4604      	mov	r4, r0
 800afe2:	d001      	beq.n	800afe8 <cleanup_stdio+0x10>
 800afe4:	f001 fce4 	bl	800c9b0 <_fflush_r>
 800afe8:	68a1      	ldr	r1, [r4, #8]
 800afea:	4b09      	ldr	r3, [pc, #36]	; (800b010 <cleanup_stdio+0x38>)
 800afec:	4299      	cmp	r1, r3
 800afee:	d002      	beq.n	800aff6 <cleanup_stdio+0x1e>
 800aff0:	4620      	mov	r0, r4
 800aff2:	f001 fcdd 	bl	800c9b0 <_fflush_r>
 800aff6:	68e1      	ldr	r1, [r4, #12]
 800aff8:	4b06      	ldr	r3, [pc, #24]	; (800b014 <cleanup_stdio+0x3c>)
 800affa:	4299      	cmp	r1, r3
 800affc:	d004      	beq.n	800b008 <cleanup_stdio+0x30>
 800affe:	4620      	mov	r0, r4
 800b000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b004:	f001 bcd4 	b.w	800c9b0 <_fflush_r>
 800b008:	bd10      	pop	{r4, pc}
 800b00a:	bf00      	nop
 800b00c:	20014b4c 	.word	0x20014b4c
 800b010:	20014bb4 	.word	0x20014bb4
 800b014:	20014c1c 	.word	0x20014c1c

0800b018 <global_stdio_init.part.0>:
 800b018:	b510      	push	{r4, lr}
 800b01a:	4b0b      	ldr	r3, [pc, #44]	; (800b048 <global_stdio_init.part.0+0x30>)
 800b01c:	4c0b      	ldr	r4, [pc, #44]	; (800b04c <global_stdio_init.part.0+0x34>)
 800b01e:	4a0c      	ldr	r2, [pc, #48]	; (800b050 <global_stdio_init.part.0+0x38>)
 800b020:	601a      	str	r2, [r3, #0]
 800b022:	4620      	mov	r0, r4
 800b024:	2200      	movs	r2, #0
 800b026:	2104      	movs	r1, #4
 800b028:	f7ff ff94 	bl	800af54 <std>
 800b02c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b030:	2201      	movs	r2, #1
 800b032:	2109      	movs	r1, #9
 800b034:	f7ff ff8e 	bl	800af54 <std>
 800b038:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b03c:	2202      	movs	r2, #2
 800b03e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b042:	2112      	movs	r1, #18
 800b044:	f7ff bf86 	b.w	800af54 <std>
 800b048:	20014c84 	.word	0x20014c84
 800b04c:	20014b4c 	.word	0x20014b4c
 800b050:	0800afc1 	.word	0x0800afc1

0800b054 <__sfp_lock_acquire>:
 800b054:	4801      	ldr	r0, [pc, #4]	; (800b05c <__sfp_lock_acquire+0x8>)
 800b056:	f000 b8fe 	b.w	800b256 <__retarget_lock_acquire_recursive>
 800b05a:	bf00      	nop
 800b05c:	20014c8d 	.word	0x20014c8d

0800b060 <__sfp_lock_release>:
 800b060:	4801      	ldr	r0, [pc, #4]	; (800b068 <__sfp_lock_release+0x8>)
 800b062:	f000 b8f9 	b.w	800b258 <__retarget_lock_release_recursive>
 800b066:	bf00      	nop
 800b068:	20014c8d 	.word	0x20014c8d

0800b06c <__sinit>:
 800b06c:	b510      	push	{r4, lr}
 800b06e:	4604      	mov	r4, r0
 800b070:	f7ff fff0 	bl	800b054 <__sfp_lock_acquire>
 800b074:	6a23      	ldr	r3, [r4, #32]
 800b076:	b11b      	cbz	r3, 800b080 <__sinit+0x14>
 800b078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b07c:	f7ff bff0 	b.w	800b060 <__sfp_lock_release>
 800b080:	4b04      	ldr	r3, [pc, #16]	; (800b094 <__sinit+0x28>)
 800b082:	6223      	str	r3, [r4, #32]
 800b084:	4b04      	ldr	r3, [pc, #16]	; (800b098 <__sinit+0x2c>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d1f5      	bne.n	800b078 <__sinit+0xc>
 800b08c:	f7ff ffc4 	bl	800b018 <global_stdio_init.part.0>
 800b090:	e7f2      	b.n	800b078 <__sinit+0xc>
 800b092:	bf00      	nop
 800b094:	0800afd9 	.word	0x0800afd9
 800b098:	20014c84 	.word	0x20014c84

0800b09c <_fwalk_sglue>:
 800b09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0a0:	4607      	mov	r7, r0
 800b0a2:	4688      	mov	r8, r1
 800b0a4:	4614      	mov	r4, r2
 800b0a6:	2600      	movs	r6, #0
 800b0a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0ac:	f1b9 0901 	subs.w	r9, r9, #1
 800b0b0:	d505      	bpl.n	800b0be <_fwalk_sglue+0x22>
 800b0b2:	6824      	ldr	r4, [r4, #0]
 800b0b4:	2c00      	cmp	r4, #0
 800b0b6:	d1f7      	bne.n	800b0a8 <_fwalk_sglue+0xc>
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0be:	89ab      	ldrh	r3, [r5, #12]
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d907      	bls.n	800b0d4 <_fwalk_sglue+0x38>
 800b0c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	d003      	beq.n	800b0d4 <_fwalk_sglue+0x38>
 800b0cc:	4629      	mov	r1, r5
 800b0ce:	4638      	mov	r0, r7
 800b0d0:	47c0      	blx	r8
 800b0d2:	4306      	orrs	r6, r0
 800b0d4:	3568      	adds	r5, #104	; 0x68
 800b0d6:	e7e9      	b.n	800b0ac <_fwalk_sglue+0x10>

0800b0d8 <__sread>:
 800b0d8:	b510      	push	{r4, lr}
 800b0da:	460c      	mov	r4, r1
 800b0dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0e0:	f000 f87c 	bl	800b1dc <_read_r>
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	bfab      	itete	ge
 800b0e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b0ea:	89a3      	ldrhlt	r3, [r4, #12]
 800b0ec:	181b      	addge	r3, r3, r0
 800b0ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b0f2:	bfac      	ite	ge
 800b0f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b0f6:	81a3      	strhlt	r3, [r4, #12]
 800b0f8:	bd10      	pop	{r4, pc}

0800b0fa <__swrite>:
 800b0fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0fe:	461f      	mov	r7, r3
 800b100:	898b      	ldrh	r3, [r1, #12]
 800b102:	05db      	lsls	r3, r3, #23
 800b104:	4605      	mov	r5, r0
 800b106:	460c      	mov	r4, r1
 800b108:	4616      	mov	r6, r2
 800b10a:	d505      	bpl.n	800b118 <__swrite+0x1e>
 800b10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b110:	2302      	movs	r3, #2
 800b112:	2200      	movs	r2, #0
 800b114:	f000 f850 	bl	800b1b8 <_lseek_r>
 800b118:	89a3      	ldrh	r3, [r4, #12]
 800b11a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b11e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b122:	81a3      	strh	r3, [r4, #12]
 800b124:	4632      	mov	r2, r6
 800b126:	463b      	mov	r3, r7
 800b128:	4628      	mov	r0, r5
 800b12a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b12e:	f7ff ba99 	b.w	800a664 <_write_r>

0800b132 <__sseek>:
 800b132:	b510      	push	{r4, lr}
 800b134:	460c      	mov	r4, r1
 800b136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b13a:	f000 f83d 	bl	800b1b8 <_lseek_r>
 800b13e:	1c43      	adds	r3, r0, #1
 800b140:	89a3      	ldrh	r3, [r4, #12]
 800b142:	bf15      	itete	ne
 800b144:	6560      	strne	r0, [r4, #84]	; 0x54
 800b146:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b14a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b14e:	81a3      	strheq	r3, [r4, #12]
 800b150:	bf18      	it	ne
 800b152:	81a3      	strhne	r3, [r4, #12]
 800b154:	bd10      	pop	{r4, pc}

0800b156 <__sclose>:
 800b156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b15a:	f000 b81d 	b.w	800b198 <_close_r>

0800b15e <memcmp>:
 800b15e:	b510      	push	{r4, lr}
 800b160:	3901      	subs	r1, #1
 800b162:	4402      	add	r2, r0
 800b164:	4290      	cmp	r0, r2
 800b166:	d101      	bne.n	800b16c <memcmp+0xe>
 800b168:	2000      	movs	r0, #0
 800b16a:	e005      	b.n	800b178 <memcmp+0x1a>
 800b16c:	7803      	ldrb	r3, [r0, #0]
 800b16e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b172:	42a3      	cmp	r3, r4
 800b174:	d001      	beq.n	800b17a <memcmp+0x1c>
 800b176:	1b18      	subs	r0, r3, r4
 800b178:	bd10      	pop	{r4, pc}
 800b17a:	3001      	adds	r0, #1
 800b17c:	e7f2      	b.n	800b164 <memcmp+0x6>

0800b17e <memset>:
 800b17e:	4402      	add	r2, r0
 800b180:	4603      	mov	r3, r0
 800b182:	4293      	cmp	r3, r2
 800b184:	d100      	bne.n	800b188 <memset+0xa>
 800b186:	4770      	bx	lr
 800b188:	f803 1b01 	strb.w	r1, [r3], #1
 800b18c:	e7f9      	b.n	800b182 <memset+0x4>
	...

0800b190 <_localeconv_r>:
 800b190:	4800      	ldr	r0, [pc, #0]	; (800b194 <_localeconv_r+0x4>)
 800b192:	4770      	bx	lr
 800b194:	20000110 	.word	0x20000110

0800b198 <_close_r>:
 800b198:	b538      	push	{r3, r4, r5, lr}
 800b19a:	4d06      	ldr	r5, [pc, #24]	; (800b1b4 <_close_r+0x1c>)
 800b19c:	2300      	movs	r3, #0
 800b19e:	4604      	mov	r4, r0
 800b1a0:	4608      	mov	r0, r1
 800b1a2:	602b      	str	r3, [r5, #0]
 800b1a4:	f7f7 fa57 	bl	8002656 <_close>
 800b1a8:	1c43      	adds	r3, r0, #1
 800b1aa:	d102      	bne.n	800b1b2 <_close_r+0x1a>
 800b1ac:	682b      	ldr	r3, [r5, #0]
 800b1ae:	b103      	cbz	r3, 800b1b2 <_close_r+0x1a>
 800b1b0:	6023      	str	r3, [r4, #0]
 800b1b2:	bd38      	pop	{r3, r4, r5, pc}
 800b1b4:	20014c88 	.word	0x20014c88

0800b1b8 <_lseek_r>:
 800b1b8:	b538      	push	{r3, r4, r5, lr}
 800b1ba:	4d07      	ldr	r5, [pc, #28]	; (800b1d8 <_lseek_r+0x20>)
 800b1bc:	4604      	mov	r4, r0
 800b1be:	4608      	mov	r0, r1
 800b1c0:	4611      	mov	r1, r2
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	602a      	str	r2, [r5, #0]
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	f7f7 fa6c 	bl	80026a4 <_lseek>
 800b1cc:	1c43      	adds	r3, r0, #1
 800b1ce:	d102      	bne.n	800b1d6 <_lseek_r+0x1e>
 800b1d0:	682b      	ldr	r3, [r5, #0]
 800b1d2:	b103      	cbz	r3, 800b1d6 <_lseek_r+0x1e>
 800b1d4:	6023      	str	r3, [r4, #0]
 800b1d6:	bd38      	pop	{r3, r4, r5, pc}
 800b1d8:	20014c88 	.word	0x20014c88

0800b1dc <_read_r>:
 800b1dc:	b538      	push	{r3, r4, r5, lr}
 800b1de:	4d07      	ldr	r5, [pc, #28]	; (800b1fc <_read_r+0x20>)
 800b1e0:	4604      	mov	r4, r0
 800b1e2:	4608      	mov	r0, r1
 800b1e4:	4611      	mov	r1, r2
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	602a      	str	r2, [r5, #0]
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	f7f7 fa16 	bl	800261c <_read>
 800b1f0:	1c43      	adds	r3, r0, #1
 800b1f2:	d102      	bne.n	800b1fa <_read_r+0x1e>
 800b1f4:	682b      	ldr	r3, [r5, #0]
 800b1f6:	b103      	cbz	r3, 800b1fa <_read_r+0x1e>
 800b1f8:	6023      	str	r3, [r4, #0]
 800b1fa:	bd38      	pop	{r3, r4, r5, pc}
 800b1fc:	20014c88 	.word	0x20014c88

0800b200 <__errno>:
 800b200:	4b01      	ldr	r3, [pc, #4]	; (800b208 <__errno+0x8>)
 800b202:	6818      	ldr	r0, [r3, #0]
 800b204:	4770      	bx	lr
 800b206:	bf00      	nop
 800b208:	200001d8 	.word	0x200001d8

0800b20c <__libc_init_array>:
 800b20c:	b570      	push	{r4, r5, r6, lr}
 800b20e:	4d0d      	ldr	r5, [pc, #52]	; (800b244 <__libc_init_array+0x38>)
 800b210:	4c0d      	ldr	r4, [pc, #52]	; (800b248 <__libc_init_array+0x3c>)
 800b212:	1b64      	subs	r4, r4, r5
 800b214:	10a4      	asrs	r4, r4, #2
 800b216:	2600      	movs	r6, #0
 800b218:	42a6      	cmp	r6, r4
 800b21a:	d109      	bne.n	800b230 <__libc_init_array+0x24>
 800b21c:	4d0b      	ldr	r5, [pc, #44]	; (800b24c <__libc_init_array+0x40>)
 800b21e:	4c0c      	ldr	r4, [pc, #48]	; (800b250 <__libc_init_array+0x44>)
 800b220:	f001 ff42 	bl	800d0a8 <_init>
 800b224:	1b64      	subs	r4, r4, r5
 800b226:	10a4      	asrs	r4, r4, #2
 800b228:	2600      	movs	r6, #0
 800b22a:	42a6      	cmp	r6, r4
 800b22c:	d105      	bne.n	800b23a <__libc_init_array+0x2e>
 800b22e:	bd70      	pop	{r4, r5, r6, pc}
 800b230:	f855 3b04 	ldr.w	r3, [r5], #4
 800b234:	4798      	blx	r3
 800b236:	3601      	adds	r6, #1
 800b238:	e7ee      	b.n	800b218 <__libc_init_array+0xc>
 800b23a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b23e:	4798      	blx	r3
 800b240:	3601      	adds	r6, #1
 800b242:	e7f2      	b.n	800b22a <__libc_init_array+0x1e>
 800b244:	0800d5cc 	.word	0x0800d5cc
 800b248:	0800d5cc 	.word	0x0800d5cc
 800b24c:	0800d5cc 	.word	0x0800d5cc
 800b250:	0800d5d0 	.word	0x0800d5d0

0800b254 <__retarget_lock_init_recursive>:
 800b254:	4770      	bx	lr

0800b256 <__retarget_lock_acquire_recursive>:
 800b256:	4770      	bx	lr

0800b258 <__retarget_lock_release_recursive>:
 800b258:	4770      	bx	lr

0800b25a <memcpy>:
 800b25a:	440a      	add	r2, r1
 800b25c:	4291      	cmp	r1, r2
 800b25e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b262:	d100      	bne.n	800b266 <memcpy+0xc>
 800b264:	4770      	bx	lr
 800b266:	b510      	push	{r4, lr}
 800b268:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b26c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b270:	4291      	cmp	r1, r2
 800b272:	d1f9      	bne.n	800b268 <memcpy+0xe>
 800b274:	bd10      	pop	{r4, pc}

0800b276 <quorem>:
 800b276:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b27a:	6903      	ldr	r3, [r0, #16]
 800b27c:	690c      	ldr	r4, [r1, #16]
 800b27e:	42a3      	cmp	r3, r4
 800b280:	4607      	mov	r7, r0
 800b282:	db7e      	blt.n	800b382 <quorem+0x10c>
 800b284:	3c01      	subs	r4, #1
 800b286:	f101 0814 	add.w	r8, r1, #20
 800b28a:	f100 0514 	add.w	r5, r0, #20
 800b28e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b292:	9301      	str	r3, [sp, #4]
 800b294:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b298:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b29c:	3301      	adds	r3, #1
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b2a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b2a8:	fbb2 f6f3 	udiv	r6, r2, r3
 800b2ac:	d331      	bcc.n	800b312 <quorem+0x9c>
 800b2ae:	f04f 0e00 	mov.w	lr, #0
 800b2b2:	4640      	mov	r0, r8
 800b2b4:	46ac      	mov	ip, r5
 800b2b6:	46f2      	mov	sl, lr
 800b2b8:	f850 2b04 	ldr.w	r2, [r0], #4
 800b2bc:	b293      	uxth	r3, r2
 800b2be:	fb06 e303 	mla	r3, r6, r3, lr
 800b2c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b2c6:	0c1a      	lsrs	r2, r3, #16
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	ebaa 0303 	sub.w	r3, sl, r3
 800b2ce:	f8dc a000 	ldr.w	sl, [ip]
 800b2d2:	fa13 f38a 	uxtah	r3, r3, sl
 800b2d6:	fb06 220e 	mla	r2, r6, lr, r2
 800b2da:	9300      	str	r3, [sp, #0]
 800b2dc:	9b00      	ldr	r3, [sp, #0]
 800b2de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b2e2:	b292      	uxth	r2, r2
 800b2e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b2e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b2ec:	f8bd 3000 	ldrh.w	r3, [sp]
 800b2f0:	4581      	cmp	r9, r0
 800b2f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2f6:	f84c 3b04 	str.w	r3, [ip], #4
 800b2fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b2fe:	d2db      	bcs.n	800b2b8 <quorem+0x42>
 800b300:	f855 300b 	ldr.w	r3, [r5, fp]
 800b304:	b92b      	cbnz	r3, 800b312 <quorem+0x9c>
 800b306:	9b01      	ldr	r3, [sp, #4]
 800b308:	3b04      	subs	r3, #4
 800b30a:	429d      	cmp	r5, r3
 800b30c:	461a      	mov	r2, r3
 800b30e:	d32c      	bcc.n	800b36a <quorem+0xf4>
 800b310:	613c      	str	r4, [r7, #16]
 800b312:	4638      	mov	r0, r7
 800b314:	f001 f9b8 	bl	800c688 <__mcmp>
 800b318:	2800      	cmp	r0, #0
 800b31a:	db22      	blt.n	800b362 <quorem+0xec>
 800b31c:	3601      	adds	r6, #1
 800b31e:	4629      	mov	r1, r5
 800b320:	2000      	movs	r0, #0
 800b322:	f858 2b04 	ldr.w	r2, [r8], #4
 800b326:	f8d1 c000 	ldr.w	ip, [r1]
 800b32a:	b293      	uxth	r3, r2
 800b32c:	1ac3      	subs	r3, r0, r3
 800b32e:	0c12      	lsrs	r2, r2, #16
 800b330:	fa13 f38c 	uxtah	r3, r3, ip
 800b334:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b338:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b342:	45c1      	cmp	r9, r8
 800b344:	f841 3b04 	str.w	r3, [r1], #4
 800b348:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b34c:	d2e9      	bcs.n	800b322 <quorem+0xac>
 800b34e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b352:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b356:	b922      	cbnz	r2, 800b362 <quorem+0xec>
 800b358:	3b04      	subs	r3, #4
 800b35a:	429d      	cmp	r5, r3
 800b35c:	461a      	mov	r2, r3
 800b35e:	d30a      	bcc.n	800b376 <quorem+0x100>
 800b360:	613c      	str	r4, [r7, #16]
 800b362:	4630      	mov	r0, r6
 800b364:	b003      	add	sp, #12
 800b366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b36a:	6812      	ldr	r2, [r2, #0]
 800b36c:	3b04      	subs	r3, #4
 800b36e:	2a00      	cmp	r2, #0
 800b370:	d1ce      	bne.n	800b310 <quorem+0x9a>
 800b372:	3c01      	subs	r4, #1
 800b374:	e7c9      	b.n	800b30a <quorem+0x94>
 800b376:	6812      	ldr	r2, [r2, #0]
 800b378:	3b04      	subs	r3, #4
 800b37a:	2a00      	cmp	r2, #0
 800b37c:	d1f0      	bne.n	800b360 <quorem+0xea>
 800b37e:	3c01      	subs	r4, #1
 800b380:	e7eb      	b.n	800b35a <quorem+0xe4>
 800b382:	2000      	movs	r0, #0
 800b384:	e7ee      	b.n	800b364 <quorem+0xee>
	...

0800b388 <_dtoa_r>:
 800b388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b38c:	ed2d 8b04 	vpush	{d8-d9}
 800b390:	69c5      	ldr	r5, [r0, #28]
 800b392:	b093      	sub	sp, #76	; 0x4c
 800b394:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b398:	ec57 6b10 	vmov	r6, r7, d0
 800b39c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b3a0:	9107      	str	r1, [sp, #28]
 800b3a2:	4604      	mov	r4, r0
 800b3a4:	920a      	str	r2, [sp, #40]	; 0x28
 800b3a6:	930d      	str	r3, [sp, #52]	; 0x34
 800b3a8:	b975      	cbnz	r5, 800b3c8 <_dtoa_r+0x40>
 800b3aa:	2010      	movs	r0, #16
 800b3ac:	f000 fe2a 	bl	800c004 <malloc>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	61e0      	str	r0, [r4, #28]
 800b3b4:	b920      	cbnz	r0, 800b3c0 <_dtoa_r+0x38>
 800b3b6:	4bae      	ldr	r3, [pc, #696]	; (800b670 <_dtoa_r+0x2e8>)
 800b3b8:	21ef      	movs	r1, #239	; 0xef
 800b3ba:	48ae      	ldr	r0, [pc, #696]	; (800b674 <_dtoa_r+0x2ec>)
 800b3bc:	f001 fb30 	bl	800ca20 <__assert_func>
 800b3c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b3c4:	6005      	str	r5, [r0, #0]
 800b3c6:	60c5      	str	r5, [r0, #12]
 800b3c8:	69e3      	ldr	r3, [r4, #28]
 800b3ca:	6819      	ldr	r1, [r3, #0]
 800b3cc:	b151      	cbz	r1, 800b3e4 <_dtoa_r+0x5c>
 800b3ce:	685a      	ldr	r2, [r3, #4]
 800b3d0:	604a      	str	r2, [r1, #4]
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	4093      	lsls	r3, r2
 800b3d6:	608b      	str	r3, [r1, #8]
 800b3d8:	4620      	mov	r0, r4
 800b3da:	f000 ff19 	bl	800c210 <_Bfree>
 800b3de:	69e3      	ldr	r3, [r4, #28]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	601a      	str	r2, [r3, #0]
 800b3e4:	1e3b      	subs	r3, r7, #0
 800b3e6:	bfbb      	ittet	lt
 800b3e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b3ec:	9303      	strlt	r3, [sp, #12]
 800b3ee:	2300      	movge	r3, #0
 800b3f0:	2201      	movlt	r2, #1
 800b3f2:	bfac      	ite	ge
 800b3f4:	f8c8 3000 	strge.w	r3, [r8]
 800b3f8:	f8c8 2000 	strlt.w	r2, [r8]
 800b3fc:	4b9e      	ldr	r3, [pc, #632]	; (800b678 <_dtoa_r+0x2f0>)
 800b3fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b402:	ea33 0308 	bics.w	r3, r3, r8
 800b406:	d11b      	bne.n	800b440 <_dtoa_r+0xb8>
 800b408:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b40a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b40e:	6013      	str	r3, [r2, #0]
 800b410:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b414:	4333      	orrs	r3, r6
 800b416:	f000 8593 	beq.w	800bf40 <_dtoa_r+0xbb8>
 800b41a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b41c:	b963      	cbnz	r3, 800b438 <_dtoa_r+0xb0>
 800b41e:	4b97      	ldr	r3, [pc, #604]	; (800b67c <_dtoa_r+0x2f4>)
 800b420:	e027      	b.n	800b472 <_dtoa_r+0xea>
 800b422:	4b97      	ldr	r3, [pc, #604]	; (800b680 <_dtoa_r+0x2f8>)
 800b424:	9300      	str	r3, [sp, #0]
 800b426:	3308      	adds	r3, #8
 800b428:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b42a:	6013      	str	r3, [r2, #0]
 800b42c:	9800      	ldr	r0, [sp, #0]
 800b42e:	b013      	add	sp, #76	; 0x4c
 800b430:	ecbd 8b04 	vpop	{d8-d9}
 800b434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b438:	4b90      	ldr	r3, [pc, #576]	; (800b67c <_dtoa_r+0x2f4>)
 800b43a:	9300      	str	r3, [sp, #0]
 800b43c:	3303      	adds	r3, #3
 800b43e:	e7f3      	b.n	800b428 <_dtoa_r+0xa0>
 800b440:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b444:	2200      	movs	r2, #0
 800b446:	ec51 0b17 	vmov	r0, r1, d7
 800b44a:	eeb0 8a47 	vmov.f32	s16, s14
 800b44e:	eef0 8a67 	vmov.f32	s17, s15
 800b452:	2300      	movs	r3, #0
 800b454:	f7f5 fba8 	bl	8000ba8 <__aeabi_dcmpeq>
 800b458:	4681      	mov	r9, r0
 800b45a:	b160      	cbz	r0, 800b476 <_dtoa_r+0xee>
 800b45c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b45e:	2301      	movs	r3, #1
 800b460:	6013      	str	r3, [r2, #0]
 800b462:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b464:	2b00      	cmp	r3, #0
 800b466:	f000 8568 	beq.w	800bf3a <_dtoa_r+0xbb2>
 800b46a:	4b86      	ldr	r3, [pc, #536]	; (800b684 <_dtoa_r+0x2fc>)
 800b46c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b46e:	6013      	str	r3, [r2, #0]
 800b470:	3b01      	subs	r3, #1
 800b472:	9300      	str	r3, [sp, #0]
 800b474:	e7da      	b.n	800b42c <_dtoa_r+0xa4>
 800b476:	aa10      	add	r2, sp, #64	; 0x40
 800b478:	a911      	add	r1, sp, #68	; 0x44
 800b47a:	4620      	mov	r0, r4
 800b47c:	eeb0 0a48 	vmov.f32	s0, s16
 800b480:	eef0 0a68 	vmov.f32	s1, s17
 800b484:	f001 f9a6 	bl	800c7d4 <__d2b>
 800b488:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b48c:	4682      	mov	sl, r0
 800b48e:	2d00      	cmp	r5, #0
 800b490:	d07f      	beq.n	800b592 <_dtoa_r+0x20a>
 800b492:	ee18 3a90 	vmov	r3, s17
 800b496:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b49a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b49e:	ec51 0b18 	vmov	r0, r1, d8
 800b4a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b4a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b4aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	4b75      	ldr	r3, [pc, #468]	; (800b688 <_dtoa_r+0x300>)
 800b4b4:	f7f4 ff58 	bl	8000368 <__aeabi_dsub>
 800b4b8:	a367      	add	r3, pc, #412	; (adr r3, 800b658 <_dtoa_r+0x2d0>)
 800b4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4be:	f7f5 f90b 	bl	80006d8 <__aeabi_dmul>
 800b4c2:	a367      	add	r3, pc, #412	; (adr r3, 800b660 <_dtoa_r+0x2d8>)
 800b4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c8:	f7f4 ff50 	bl	800036c <__adddf3>
 800b4cc:	4606      	mov	r6, r0
 800b4ce:	4628      	mov	r0, r5
 800b4d0:	460f      	mov	r7, r1
 800b4d2:	f7f5 f897 	bl	8000604 <__aeabi_i2d>
 800b4d6:	a364      	add	r3, pc, #400	; (adr r3, 800b668 <_dtoa_r+0x2e0>)
 800b4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4dc:	f7f5 f8fc 	bl	80006d8 <__aeabi_dmul>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	4630      	mov	r0, r6
 800b4e6:	4639      	mov	r1, r7
 800b4e8:	f7f4 ff40 	bl	800036c <__adddf3>
 800b4ec:	4606      	mov	r6, r0
 800b4ee:	460f      	mov	r7, r1
 800b4f0:	f7f5 fba2 	bl	8000c38 <__aeabi_d2iz>
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	4683      	mov	fp, r0
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	4630      	mov	r0, r6
 800b4fc:	4639      	mov	r1, r7
 800b4fe:	f7f5 fb5d 	bl	8000bbc <__aeabi_dcmplt>
 800b502:	b148      	cbz	r0, 800b518 <_dtoa_r+0x190>
 800b504:	4658      	mov	r0, fp
 800b506:	f7f5 f87d 	bl	8000604 <__aeabi_i2d>
 800b50a:	4632      	mov	r2, r6
 800b50c:	463b      	mov	r3, r7
 800b50e:	f7f5 fb4b 	bl	8000ba8 <__aeabi_dcmpeq>
 800b512:	b908      	cbnz	r0, 800b518 <_dtoa_r+0x190>
 800b514:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b518:	f1bb 0f16 	cmp.w	fp, #22
 800b51c:	d857      	bhi.n	800b5ce <_dtoa_r+0x246>
 800b51e:	4b5b      	ldr	r3, [pc, #364]	; (800b68c <_dtoa_r+0x304>)
 800b520:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b528:	ec51 0b18 	vmov	r0, r1, d8
 800b52c:	f7f5 fb46 	bl	8000bbc <__aeabi_dcmplt>
 800b530:	2800      	cmp	r0, #0
 800b532:	d04e      	beq.n	800b5d2 <_dtoa_r+0x24a>
 800b534:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b538:	2300      	movs	r3, #0
 800b53a:	930c      	str	r3, [sp, #48]	; 0x30
 800b53c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b53e:	1b5b      	subs	r3, r3, r5
 800b540:	1e5a      	subs	r2, r3, #1
 800b542:	bf45      	ittet	mi
 800b544:	f1c3 0301 	rsbmi	r3, r3, #1
 800b548:	9305      	strmi	r3, [sp, #20]
 800b54a:	2300      	movpl	r3, #0
 800b54c:	2300      	movmi	r3, #0
 800b54e:	9206      	str	r2, [sp, #24]
 800b550:	bf54      	ite	pl
 800b552:	9305      	strpl	r3, [sp, #20]
 800b554:	9306      	strmi	r3, [sp, #24]
 800b556:	f1bb 0f00 	cmp.w	fp, #0
 800b55a:	db3c      	blt.n	800b5d6 <_dtoa_r+0x24e>
 800b55c:	9b06      	ldr	r3, [sp, #24]
 800b55e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b562:	445b      	add	r3, fp
 800b564:	9306      	str	r3, [sp, #24]
 800b566:	2300      	movs	r3, #0
 800b568:	9308      	str	r3, [sp, #32]
 800b56a:	9b07      	ldr	r3, [sp, #28]
 800b56c:	2b09      	cmp	r3, #9
 800b56e:	d868      	bhi.n	800b642 <_dtoa_r+0x2ba>
 800b570:	2b05      	cmp	r3, #5
 800b572:	bfc4      	itt	gt
 800b574:	3b04      	subgt	r3, #4
 800b576:	9307      	strgt	r3, [sp, #28]
 800b578:	9b07      	ldr	r3, [sp, #28]
 800b57a:	f1a3 0302 	sub.w	r3, r3, #2
 800b57e:	bfcc      	ite	gt
 800b580:	2500      	movgt	r5, #0
 800b582:	2501      	movle	r5, #1
 800b584:	2b03      	cmp	r3, #3
 800b586:	f200 8085 	bhi.w	800b694 <_dtoa_r+0x30c>
 800b58a:	e8df f003 	tbb	[pc, r3]
 800b58e:	3b2e      	.short	0x3b2e
 800b590:	5839      	.short	0x5839
 800b592:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b596:	441d      	add	r5, r3
 800b598:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b59c:	2b20      	cmp	r3, #32
 800b59e:	bfc1      	itttt	gt
 800b5a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b5a4:	fa08 f803 	lslgt.w	r8, r8, r3
 800b5a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b5ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b5b0:	bfd6      	itet	le
 800b5b2:	f1c3 0320 	rsble	r3, r3, #32
 800b5b6:	ea48 0003 	orrgt.w	r0, r8, r3
 800b5ba:	fa06 f003 	lslle.w	r0, r6, r3
 800b5be:	f7f5 f811 	bl	80005e4 <__aeabi_ui2d>
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b5c8:	3d01      	subs	r5, #1
 800b5ca:	920e      	str	r2, [sp, #56]	; 0x38
 800b5cc:	e76f      	b.n	800b4ae <_dtoa_r+0x126>
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e7b3      	b.n	800b53a <_dtoa_r+0x1b2>
 800b5d2:	900c      	str	r0, [sp, #48]	; 0x30
 800b5d4:	e7b2      	b.n	800b53c <_dtoa_r+0x1b4>
 800b5d6:	9b05      	ldr	r3, [sp, #20]
 800b5d8:	eba3 030b 	sub.w	r3, r3, fp
 800b5dc:	9305      	str	r3, [sp, #20]
 800b5de:	f1cb 0300 	rsb	r3, fp, #0
 800b5e2:	9308      	str	r3, [sp, #32]
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5e8:	e7bf      	b.n	800b56a <_dtoa_r+0x1e2>
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b5ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	dc52      	bgt.n	800b69a <_dtoa_r+0x312>
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	9301      	str	r3, [sp, #4]
 800b5f8:	9304      	str	r3, [sp, #16]
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	920a      	str	r2, [sp, #40]	; 0x28
 800b5fe:	e00b      	b.n	800b618 <_dtoa_r+0x290>
 800b600:	2301      	movs	r3, #1
 800b602:	e7f3      	b.n	800b5ec <_dtoa_r+0x264>
 800b604:	2300      	movs	r3, #0
 800b606:	9309      	str	r3, [sp, #36]	; 0x24
 800b608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b60a:	445b      	add	r3, fp
 800b60c:	9301      	str	r3, [sp, #4]
 800b60e:	3301      	adds	r3, #1
 800b610:	2b01      	cmp	r3, #1
 800b612:	9304      	str	r3, [sp, #16]
 800b614:	bfb8      	it	lt
 800b616:	2301      	movlt	r3, #1
 800b618:	69e0      	ldr	r0, [r4, #28]
 800b61a:	2100      	movs	r1, #0
 800b61c:	2204      	movs	r2, #4
 800b61e:	f102 0614 	add.w	r6, r2, #20
 800b622:	429e      	cmp	r6, r3
 800b624:	d93d      	bls.n	800b6a2 <_dtoa_r+0x31a>
 800b626:	6041      	str	r1, [r0, #4]
 800b628:	4620      	mov	r0, r4
 800b62a:	f000 fdb1 	bl	800c190 <_Balloc>
 800b62e:	9000      	str	r0, [sp, #0]
 800b630:	2800      	cmp	r0, #0
 800b632:	d139      	bne.n	800b6a8 <_dtoa_r+0x320>
 800b634:	4b16      	ldr	r3, [pc, #88]	; (800b690 <_dtoa_r+0x308>)
 800b636:	4602      	mov	r2, r0
 800b638:	f240 11af 	movw	r1, #431	; 0x1af
 800b63c:	e6bd      	b.n	800b3ba <_dtoa_r+0x32>
 800b63e:	2301      	movs	r3, #1
 800b640:	e7e1      	b.n	800b606 <_dtoa_r+0x27e>
 800b642:	2501      	movs	r5, #1
 800b644:	2300      	movs	r3, #0
 800b646:	9307      	str	r3, [sp, #28]
 800b648:	9509      	str	r5, [sp, #36]	; 0x24
 800b64a:	f04f 33ff 	mov.w	r3, #4294967295
 800b64e:	9301      	str	r3, [sp, #4]
 800b650:	9304      	str	r3, [sp, #16]
 800b652:	2200      	movs	r2, #0
 800b654:	2312      	movs	r3, #18
 800b656:	e7d1      	b.n	800b5fc <_dtoa_r+0x274>
 800b658:	636f4361 	.word	0x636f4361
 800b65c:	3fd287a7 	.word	0x3fd287a7
 800b660:	8b60c8b3 	.word	0x8b60c8b3
 800b664:	3fc68a28 	.word	0x3fc68a28
 800b668:	509f79fb 	.word	0x509f79fb
 800b66c:	3fd34413 	.word	0x3fd34413
 800b670:	0800d39e 	.word	0x0800d39e
 800b674:	0800d3b5 	.word	0x0800d3b5
 800b678:	7ff00000 	.word	0x7ff00000
 800b67c:	0800d39a 	.word	0x0800d39a
 800b680:	0800d391 	.word	0x0800d391
 800b684:	0800d364 	.word	0x0800d364
 800b688:	3ff80000 	.word	0x3ff80000
 800b68c:	0800d4a0 	.word	0x0800d4a0
 800b690:	0800d40d 	.word	0x0800d40d
 800b694:	2301      	movs	r3, #1
 800b696:	9309      	str	r3, [sp, #36]	; 0x24
 800b698:	e7d7      	b.n	800b64a <_dtoa_r+0x2c2>
 800b69a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b69c:	9301      	str	r3, [sp, #4]
 800b69e:	9304      	str	r3, [sp, #16]
 800b6a0:	e7ba      	b.n	800b618 <_dtoa_r+0x290>
 800b6a2:	3101      	adds	r1, #1
 800b6a4:	0052      	lsls	r2, r2, #1
 800b6a6:	e7ba      	b.n	800b61e <_dtoa_r+0x296>
 800b6a8:	69e3      	ldr	r3, [r4, #28]
 800b6aa:	9a00      	ldr	r2, [sp, #0]
 800b6ac:	601a      	str	r2, [r3, #0]
 800b6ae:	9b04      	ldr	r3, [sp, #16]
 800b6b0:	2b0e      	cmp	r3, #14
 800b6b2:	f200 80a8 	bhi.w	800b806 <_dtoa_r+0x47e>
 800b6b6:	2d00      	cmp	r5, #0
 800b6b8:	f000 80a5 	beq.w	800b806 <_dtoa_r+0x47e>
 800b6bc:	f1bb 0f00 	cmp.w	fp, #0
 800b6c0:	dd38      	ble.n	800b734 <_dtoa_r+0x3ac>
 800b6c2:	4bc0      	ldr	r3, [pc, #768]	; (800b9c4 <_dtoa_r+0x63c>)
 800b6c4:	f00b 020f 	and.w	r2, fp, #15
 800b6c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b6d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b6d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b6d8:	d019      	beq.n	800b70e <_dtoa_r+0x386>
 800b6da:	4bbb      	ldr	r3, [pc, #748]	; (800b9c8 <_dtoa_r+0x640>)
 800b6dc:	ec51 0b18 	vmov	r0, r1, d8
 800b6e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b6e4:	f7f5 f922 	bl	800092c <__aeabi_ddiv>
 800b6e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6ec:	f008 080f 	and.w	r8, r8, #15
 800b6f0:	2503      	movs	r5, #3
 800b6f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b9c8 <_dtoa_r+0x640>
 800b6f6:	f1b8 0f00 	cmp.w	r8, #0
 800b6fa:	d10a      	bne.n	800b712 <_dtoa_r+0x38a>
 800b6fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b700:	4632      	mov	r2, r6
 800b702:	463b      	mov	r3, r7
 800b704:	f7f5 f912 	bl	800092c <__aeabi_ddiv>
 800b708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b70c:	e02b      	b.n	800b766 <_dtoa_r+0x3de>
 800b70e:	2502      	movs	r5, #2
 800b710:	e7ef      	b.n	800b6f2 <_dtoa_r+0x36a>
 800b712:	f018 0f01 	tst.w	r8, #1
 800b716:	d008      	beq.n	800b72a <_dtoa_r+0x3a2>
 800b718:	4630      	mov	r0, r6
 800b71a:	4639      	mov	r1, r7
 800b71c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b720:	f7f4 ffda 	bl	80006d8 <__aeabi_dmul>
 800b724:	3501      	adds	r5, #1
 800b726:	4606      	mov	r6, r0
 800b728:	460f      	mov	r7, r1
 800b72a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b72e:	f109 0908 	add.w	r9, r9, #8
 800b732:	e7e0      	b.n	800b6f6 <_dtoa_r+0x36e>
 800b734:	f000 809f 	beq.w	800b876 <_dtoa_r+0x4ee>
 800b738:	f1cb 0600 	rsb	r6, fp, #0
 800b73c:	4ba1      	ldr	r3, [pc, #644]	; (800b9c4 <_dtoa_r+0x63c>)
 800b73e:	4fa2      	ldr	r7, [pc, #648]	; (800b9c8 <_dtoa_r+0x640>)
 800b740:	f006 020f 	and.w	r2, r6, #15
 800b744:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74c:	ec51 0b18 	vmov	r0, r1, d8
 800b750:	f7f4 ffc2 	bl	80006d8 <__aeabi_dmul>
 800b754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b758:	1136      	asrs	r6, r6, #4
 800b75a:	2300      	movs	r3, #0
 800b75c:	2502      	movs	r5, #2
 800b75e:	2e00      	cmp	r6, #0
 800b760:	d17e      	bne.n	800b860 <_dtoa_r+0x4d8>
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1d0      	bne.n	800b708 <_dtoa_r+0x380>
 800b766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b768:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f000 8084 	beq.w	800b87a <_dtoa_r+0x4f2>
 800b772:	4b96      	ldr	r3, [pc, #600]	; (800b9cc <_dtoa_r+0x644>)
 800b774:	2200      	movs	r2, #0
 800b776:	4640      	mov	r0, r8
 800b778:	4649      	mov	r1, r9
 800b77a:	f7f5 fa1f 	bl	8000bbc <__aeabi_dcmplt>
 800b77e:	2800      	cmp	r0, #0
 800b780:	d07b      	beq.n	800b87a <_dtoa_r+0x4f2>
 800b782:	9b04      	ldr	r3, [sp, #16]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d078      	beq.n	800b87a <_dtoa_r+0x4f2>
 800b788:	9b01      	ldr	r3, [sp, #4]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	dd39      	ble.n	800b802 <_dtoa_r+0x47a>
 800b78e:	4b90      	ldr	r3, [pc, #576]	; (800b9d0 <_dtoa_r+0x648>)
 800b790:	2200      	movs	r2, #0
 800b792:	4640      	mov	r0, r8
 800b794:	4649      	mov	r1, r9
 800b796:	f7f4 ff9f 	bl	80006d8 <__aeabi_dmul>
 800b79a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b79e:	9e01      	ldr	r6, [sp, #4]
 800b7a0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b7a4:	3501      	adds	r5, #1
 800b7a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b7aa:	4628      	mov	r0, r5
 800b7ac:	f7f4 ff2a 	bl	8000604 <__aeabi_i2d>
 800b7b0:	4642      	mov	r2, r8
 800b7b2:	464b      	mov	r3, r9
 800b7b4:	f7f4 ff90 	bl	80006d8 <__aeabi_dmul>
 800b7b8:	4b86      	ldr	r3, [pc, #536]	; (800b9d4 <_dtoa_r+0x64c>)
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f7f4 fdd6 	bl	800036c <__adddf3>
 800b7c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b7c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7c8:	9303      	str	r3, [sp, #12]
 800b7ca:	2e00      	cmp	r6, #0
 800b7cc:	d158      	bne.n	800b880 <_dtoa_r+0x4f8>
 800b7ce:	4b82      	ldr	r3, [pc, #520]	; (800b9d8 <_dtoa_r+0x650>)
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	4640      	mov	r0, r8
 800b7d4:	4649      	mov	r1, r9
 800b7d6:	f7f4 fdc7 	bl	8000368 <__aeabi_dsub>
 800b7da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b7de:	4680      	mov	r8, r0
 800b7e0:	4689      	mov	r9, r1
 800b7e2:	f7f5 fa09 	bl	8000bf8 <__aeabi_dcmpgt>
 800b7e6:	2800      	cmp	r0, #0
 800b7e8:	f040 8296 	bne.w	800bd18 <_dtoa_r+0x990>
 800b7ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b7f0:	4640      	mov	r0, r8
 800b7f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7f6:	4649      	mov	r1, r9
 800b7f8:	f7f5 f9e0 	bl	8000bbc <__aeabi_dcmplt>
 800b7fc:	2800      	cmp	r0, #0
 800b7fe:	f040 8289 	bne.w	800bd14 <_dtoa_r+0x98c>
 800b802:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b806:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b808:	2b00      	cmp	r3, #0
 800b80a:	f2c0 814e 	blt.w	800baaa <_dtoa_r+0x722>
 800b80e:	f1bb 0f0e 	cmp.w	fp, #14
 800b812:	f300 814a 	bgt.w	800baaa <_dtoa_r+0x722>
 800b816:	4b6b      	ldr	r3, [pc, #428]	; (800b9c4 <_dtoa_r+0x63c>)
 800b818:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b81c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b822:	2b00      	cmp	r3, #0
 800b824:	f280 80dc 	bge.w	800b9e0 <_dtoa_r+0x658>
 800b828:	9b04      	ldr	r3, [sp, #16]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	f300 80d8 	bgt.w	800b9e0 <_dtoa_r+0x658>
 800b830:	f040 826f 	bne.w	800bd12 <_dtoa_r+0x98a>
 800b834:	4b68      	ldr	r3, [pc, #416]	; (800b9d8 <_dtoa_r+0x650>)
 800b836:	2200      	movs	r2, #0
 800b838:	4640      	mov	r0, r8
 800b83a:	4649      	mov	r1, r9
 800b83c:	f7f4 ff4c 	bl	80006d8 <__aeabi_dmul>
 800b840:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b844:	f7f5 f9ce 	bl	8000be4 <__aeabi_dcmpge>
 800b848:	9e04      	ldr	r6, [sp, #16]
 800b84a:	4637      	mov	r7, r6
 800b84c:	2800      	cmp	r0, #0
 800b84e:	f040 8245 	bne.w	800bcdc <_dtoa_r+0x954>
 800b852:	9d00      	ldr	r5, [sp, #0]
 800b854:	2331      	movs	r3, #49	; 0x31
 800b856:	f805 3b01 	strb.w	r3, [r5], #1
 800b85a:	f10b 0b01 	add.w	fp, fp, #1
 800b85e:	e241      	b.n	800bce4 <_dtoa_r+0x95c>
 800b860:	07f2      	lsls	r2, r6, #31
 800b862:	d505      	bpl.n	800b870 <_dtoa_r+0x4e8>
 800b864:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b868:	f7f4 ff36 	bl	80006d8 <__aeabi_dmul>
 800b86c:	3501      	adds	r5, #1
 800b86e:	2301      	movs	r3, #1
 800b870:	1076      	asrs	r6, r6, #1
 800b872:	3708      	adds	r7, #8
 800b874:	e773      	b.n	800b75e <_dtoa_r+0x3d6>
 800b876:	2502      	movs	r5, #2
 800b878:	e775      	b.n	800b766 <_dtoa_r+0x3de>
 800b87a:	9e04      	ldr	r6, [sp, #16]
 800b87c:	465f      	mov	r7, fp
 800b87e:	e792      	b.n	800b7a6 <_dtoa_r+0x41e>
 800b880:	9900      	ldr	r1, [sp, #0]
 800b882:	4b50      	ldr	r3, [pc, #320]	; (800b9c4 <_dtoa_r+0x63c>)
 800b884:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b888:	4431      	add	r1, r6
 800b88a:	9102      	str	r1, [sp, #8]
 800b88c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b88e:	eeb0 9a47 	vmov.f32	s18, s14
 800b892:	eef0 9a67 	vmov.f32	s19, s15
 800b896:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b89a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b89e:	2900      	cmp	r1, #0
 800b8a0:	d044      	beq.n	800b92c <_dtoa_r+0x5a4>
 800b8a2:	494e      	ldr	r1, [pc, #312]	; (800b9dc <_dtoa_r+0x654>)
 800b8a4:	2000      	movs	r0, #0
 800b8a6:	f7f5 f841 	bl	800092c <__aeabi_ddiv>
 800b8aa:	ec53 2b19 	vmov	r2, r3, d9
 800b8ae:	f7f4 fd5b 	bl	8000368 <__aeabi_dsub>
 800b8b2:	9d00      	ldr	r5, [sp, #0]
 800b8b4:	ec41 0b19 	vmov	d9, r0, r1
 800b8b8:	4649      	mov	r1, r9
 800b8ba:	4640      	mov	r0, r8
 800b8bc:	f7f5 f9bc 	bl	8000c38 <__aeabi_d2iz>
 800b8c0:	4606      	mov	r6, r0
 800b8c2:	f7f4 fe9f 	bl	8000604 <__aeabi_i2d>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	4640      	mov	r0, r8
 800b8cc:	4649      	mov	r1, r9
 800b8ce:	f7f4 fd4b 	bl	8000368 <__aeabi_dsub>
 800b8d2:	3630      	adds	r6, #48	; 0x30
 800b8d4:	f805 6b01 	strb.w	r6, [r5], #1
 800b8d8:	ec53 2b19 	vmov	r2, r3, d9
 800b8dc:	4680      	mov	r8, r0
 800b8de:	4689      	mov	r9, r1
 800b8e0:	f7f5 f96c 	bl	8000bbc <__aeabi_dcmplt>
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	d164      	bne.n	800b9b2 <_dtoa_r+0x62a>
 800b8e8:	4642      	mov	r2, r8
 800b8ea:	464b      	mov	r3, r9
 800b8ec:	4937      	ldr	r1, [pc, #220]	; (800b9cc <_dtoa_r+0x644>)
 800b8ee:	2000      	movs	r0, #0
 800b8f0:	f7f4 fd3a 	bl	8000368 <__aeabi_dsub>
 800b8f4:	ec53 2b19 	vmov	r2, r3, d9
 800b8f8:	f7f5 f960 	bl	8000bbc <__aeabi_dcmplt>
 800b8fc:	2800      	cmp	r0, #0
 800b8fe:	f040 80b6 	bne.w	800ba6e <_dtoa_r+0x6e6>
 800b902:	9b02      	ldr	r3, [sp, #8]
 800b904:	429d      	cmp	r5, r3
 800b906:	f43f af7c 	beq.w	800b802 <_dtoa_r+0x47a>
 800b90a:	4b31      	ldr	r3, [pc, #196]	; (800b9d0 <_dtoa_r+0x648>)
 800b90c:	ec51 0b19 	vmov	r0, r1, d9
 800b910:	2200      	movs	r2, #0
 800b912:	f7f4 fee1 	bl	80006d8 <__aeabi_dmul>
 800b916:	4b2e      	ldr	r3, [pc, #184]	; (800b9d0 <_dtoa_r+0x648>)
 800b918:	ec41 0b19 	vmov	d9, r0, r1
 800b91c:	2200      	movs	r2, #0
 800b91e:	4640      	mov	r0, r8
 800b920:	4649      	mov	r1, r9
 800b922:	f7f4 fed9 	bl	80006d8 <__aeabi_dmul>
 800b926:	4680      	mov	r8, r0
 800b928:	4689      	mov	r9, r1
 800b92a:	e7c5      	b.n	800b8b8 <_dtoa_r+0x530>
 800b92c:	ec51 0b17 	vmov	r0, r1, d7
 800b930:	f7f4 fed2 	bl	80006d8 <__aeabi_dmul>
 800b934:	9b02      	ldr	r3, [sp, #8]
 800b936:	9d00      	ldr	r5, [sp, #0]
 800b938:	930f      	str	r3, [sp, #60]	; 0x3c
 800b93a:	ec41 0b19 	vmov	d9, r0, r1
 800b93e:	4649      	mov	r1, r9
 800b940:	4640      	mov	r0, r8
 800b942:	f7f5 f979 	bl	8000c38 <__aeabi_d2iz>
 800b946:	4606      	mov	r6, r0
 800b948:	f7f4 fe5c 	bl	8000604 <__aeabi_i2d>
 800b94c:	3630      	adds	r6, #48	; 0x30
 800b94e:	4602      	mov	r2, r0
 800b950:	460b      	mov	r3, r1
 800b952:	4640      	mov	r0, r8
 800b954:	4649      	mov	r1, r9
 800b956:	f7f4 fd07 	bl	8000368 <__aeabi_dsub>
 800b95a:	f805 6b01 	strb.w	r6, [r5], #1
 800b95e:	9b02      	ldr	r3, [sp, #8]
 800b960:	429d      	cmp	r5, r3
 800b962:	4680      	mov	r8, r0
 800b964:	4689      	mov	r9, r1
 800b966:	f04f 0200 	mov.w	r2, #0
 800b96a:	d124      	bne.n	800b9b6 <_dtoa_r+0x62e>
 800b96c:	4b1b      	ldr	r3, [pc, #108]	; (800b9dc <_dtoa_r+0x654>)
 800b96e:	ec51 0b19 	vmov	r0, r1, d9
 800b972:	f7f4 fcfb 	bl	800036c <__adddf3>
 800b976:	4602      	mov	r2, r0
 800b978:	460b      	mov	r3, r1
 800b97a:	4640      	mov	r0, r8
 800b97c:	4649      	mov	r1, r9
 800b97e:	f7f5 f93b 	bl	8000bf8 <__aeabi_dcmpgt>
 800b982:	2800      	cmp	r0, #0
 800b984:	d173      	bne.n	800ba6e <_dtoa_r+0x6e6>
 800b986:	ec53 2b19 	vmov	r2, r3, d9
 800b98a:	4914      	ldr	r1, [pc, #80]	; (800b9dc <_dtoa_r+0x654>)
 800b98c:	2000      	movs	r0, #0
 800b98e:	f7f4 fceb 	bl	8000368 <__aeabi_dsub>
 800b992:	4602      	mov	r2, r0
 800b994:	460b      	mov	r3, r1
 800b996:	4640      	mov	r0, r8
 800b998:	4649      	mov	r1, r9
 800b99a:	f7f5 f90f 	bl	8000bbc <__aeabi_dcmplt>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	f43f af2f 	beq.w	800b802 <_dtoa_r+0x47a>
 800b9a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b9a6:	1e6b      	subs	r3, r5, #1
 800b9a8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b9ae:	2b30      	cmp	r3, #48	; 0x30
 800b9b0:	d0f8      	beq.n	800b9a4 <_dtoa_r+0x61c>
 800b9b2:	46bb      	mov	fp, r7
 800b9b4:	e04a      	b.n	800ba4c <_dtoa_r+0x6c4>
 800b9b6:	4b06      	ldr	r3, [pc, #24]	; (800b9d0 <_dtoa_r+0x648>)
 800b9b8:	f7f4 fe8e 	bl	80006d8 <__aeabi_dmul>
 800b9bc:	4680      	mov	r8, r0
 800b9be:	4689      	mov	r9, r1
 800b9c0:	e7bd      	b.n	800b93e <_dtoa_r+0x5b6>
 800b9c2:	bf00      	nop
 800b9c4:	0800d4a0 	.word	0x0800d4a0
 800b9c8:	0800d478 	.word	0x0800d478
 800b9cc:	3ff00000 	.word	0x3ff00000
 800b9d0:	40240000 	.word	0x40240000
 800b9d4:	401c0000 	.word	0x401c0000
 800b9d8:	40140000 	.word	0x40140000
 800b9dc:	3fe00000 	.word	0x3fe00000
 800b9e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b9e4:	9d00      	ldr	r5, [sp, #0]
 800b9e6:	4642      	mov	r2, r8
 800b9e8:	464b      	mov	r3, r9
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	4639      	mov	r1, r7
 800b9ee:	f7f4 ff9d 	bl	800092c <__aeabi_ddiv>
 800b9f2:	f7f5 f921 	bl	8000c38 <__aeabi_d2iz>
 800b9f6:	9001      	str	r0, [sp, #4]
 800b9f8:	f7f4 fe04 	bl	8000604 <__aeabi_i2d>
 800b9fc:	4642      	mov	r2, r8
 800b9fe:	464b      	mov	r3, r9
 800ba00:	f7f4 fe6a 	bl	80006d8 <__aeabi_dmul>
 800ba04:	4602      	mov	r2, r0
 800ba06:	460b      	mov	r3, r1
 800ba08:	4630      	mov	r0, r6
 800ba0a:	4639      	mov	r1, r7
 800ba0c:	f7f4 fcac 	bl	8000368 <__aeabi_dsub>
 800ba10:	9e01      	ldr	r6, [sp, #4]
 800ba12:	9f04      	ldr	r7, [sp, #16]
 800ba14:	3630      	adds	r6, #48	; 0x30
 800ba16:	f805 6b01 	strb.w	r6, [r5], #1
 800ba1a:	9e00      	ldr	r6, [sp, #0]
 800ba1c:	1bae      	subs	r6, r5, r6
 800ba1e:	42b7      	cmp	r7, r6
 800ba20:	4602      	mov	r2, r0
 800ba22:	460b      	mov	r3, r1
 800ba24:	d134      	bne.n	800ba90 <_dtoa_r+0x708>
 800ba26:	f7f4 fca1 	bl	800036c <__adddf3>
 800ba2a:	4642      	mov	r2, r8
 800ba2c:	464b      	mov	r3, r9
 800ba2e:	4606      	mov	r6, r0
 800ba30:	460f      	mov	r7, r1
 800ba32:	f7f5 f8e1 	bl	8000bf8 <__aeabi_dcmpgt>
 800ba36:	b9c8      	cbnz	r0, 800ba6c <_dtoa_r+0x6e4>
 800ba38:	4642      	mov	r2, r8
 800ba3a:	464b      	mov	r3, r9
 800ba3c:	4630      	mov	r0, r6
 800ba3e:	4639      	mov	r1, r7
 800ba40:	f7f5 f8b2 	bl	8000ba8 <__aeabi_dcmpeq>
 800ba44:	b110      	cbz	r0, 800ba4c <_dtoa_r+0x6c4>
 800ba46:	9b01      	ldr	r3, [sp, #4]
 800ba48:	07db      	lsls	r3, r3, #31
 800ba4a:	d40f      	bmi.n	800ba6c <_dtoa_r+0x6e4>
 800ba4c:	4651      	mov	r1, sl
 800ba4e:	4620      	mov	r0, r4
 800ba50:	f000 fbde 	bl	800c210 <_Bfree>
 800ba54:	2300      	movs	r3, #0
 800ba56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba58:	702b      	strb	r3, [r5, #0]
 800ba5a:	f10b 0301 	add.w	r3, fp, #1
 800ba5e:	6013      	str	r3, [r2, #0]
 800ba60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	f43f ace2 	beq.w	800b42c <_dtoa_r+0xa4>
 800ba68:	601d      	str	r5, [r3, #0]
 800ba6a:	e4df      	b.n	800b42c <_dtoa_r+0xa4>
 800ba6c:	465f      	mov	r7, fp
 800ba6e:	462b      	mov	r3, r5
 800ba70:	461d      	mov	r5, r3
 800ba72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba76:	2a39      	cmp	r2, #57	; 0x39
 800ba78:	d106      	bne.n	800ba88 <_dtoa_r+0x700>
 800ba7a:	9a00      	ldr	r2, [sp, #0]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d1f7      	bne.n	800ba70 <_dtoa_r+0x6e8>
 800ba80:	9900      	ldr	r1, [sp, #0]
 800ba82:	2230      	movs	r2, #48	; 0x30
 800ba84:	3701      	adds	r7, #1
 800ba86:	700a      	strb	r2, [r1, #0]
 800ba88:	781a      	ldrb	r2, [r3, #0]
 800ba8a:	3201      	adds	r2, #1
 800ba8c:	701a      	strb	r2, [r3, #0]
 800ba8e:	e790      	b.n	800b9b2 <_dtoa_r+0x62a>
 800ba90:	4ba3      	ldr	r3, [pc, #652]	; (800bd20 <_dtoa_r+0x998>)
 800ba92:	2200      	movs	r2, #0
 800ba94:	f7f4 fe20 	bl	80006d8 <__aeabi_dmul>
 800ba98:	2200      	movs	r2, #0
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	4606      	mov	r6, r0
 800ba9e:	460f      	mov	r7, r1
 800baa0:	f7f5 f882 	bl	8000ba8 <__aeabi_dcmpeq>
 800baa4:	2800      	cmp	r0, #0
 800baa6:	d09e      	beq.n	800b9e6 <_dtoa_r+0x65e>
 800baa8:	e7d0      	b.n	800ba4c <_dtoa_r+0x6c4>
 800baaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baac:	2a00      	cmp	r2, #0
 800baae:	f000 80ca 	beq.w	800bc46 <_dtoa_r+0x8be>
 800bab2:	9a07      	ldr	r2, [sp, #28]
 800bab4:	2a01      	cmp	r2, #1
 800bab6:	f300 80ad 	bgt.w	800bc14 <_dtoa_r+0x88c>
 800baba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800babc:	2a00      	cmp	r2, #0
 800babe:	f000 80a5 	beq.w	800bc0c <_dtoa_r+0x884>
 800bac2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bac6:	9e08      	ldr	r6, [sp, #32]
 800bac8:	9d05      	ldr	r5, [sp, #20]
 800baca:	9a05      	ldr	r2, [sp, #20]
 800bacc:	441a      	add	r2, r3
 800bace:	9205      	str	r2, [sp, #20]
 800bad0:	9a06      	ldr	r2, [sp, #24]
 800bad2:	2101      	movs	r1, #1
 800bad4:	441a      	add	r2, r3
 800bad6:	4620      	mov	r0, r4
 800bad8:	9206      	str	r2, [sp, #24]
 800bada:	f000 fc4f 	bl	800c37c <__i2b>
 800bade:	4607      	mov	r7, r0
 800bae0:	b165      	cbz	r5, 800bafc <_dtoa_r+0x774>
 800bae2:	9b06      	ldr	r3, [sp, #24]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	dd09      	ble.n	800bafc <_dtoa_r+0x774>
 800bae8:	42ab      	cmp	r3, r5
 800baea:	9a05      	ldr	r2, [sp, #20]
 800baec:	bfa8      	it	ge
 800baee:	462b      	movge	r3, r5
 800baf0:	1ad2      	subs	r2, r2, r3
 800baf2:	9205      	str	r2, [sp, #20]
 800baf4:	9a06      	ldr	r2, [sp, #24]
 800baf6:	1aed      	subs	r5, r5, r3
 800baf8:	1ad3      	subs	r3, r2, r3
 800bafa:	9306      	str	r3, [sp, #24]
 800bafc:	9b08      	ldr	r3, [sp, #32]
 800bafe:	b1f3      	cbz	r3, 800bb3e <_dtoa_r+0x7b6>
 800bb00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	f000 80a3 	beq.w	800bc4e <_dtoa_r+0x8c6>
 800bb08:	2e00      	cmp	r6, #0
 800bb0a:	dd10      	ble.n	800bb2e <_dtoa_r+0x7a6>
 800bb0c:	4639      	mov	r1, r7
 800bb0e:	4632      	mov	r2, r6
 800bb10:	4620      	mov	r0, r4
 800bb12:	f000 fcf3 	bl	800c4fc <__pow5mult>
 800bb16:	4652      	mov	r2, sl
 800bb18:	4601      	mov	r1, r0
 800bb1a:	4607      	mov	r7, r0
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	f000 fc43 	bl	800c3a8 <__multiply>
 800bb22:	4651      	mov	r1, sl
 800bb24:	4680      	mov	r8, r0
 800bb26:	4620      	mov	r0, r4
 800bb28:	f000 fb72 	bl	800c210 <_Bfree>
 800bb2c:	46c2      	mov	sl, r8
 800bb2e:	9b08      	ldr	r3, [sp, #32]
 800bb30:	1b9a      	subs	r2, r3, r6
 800bb32:	d004      	beq.n	800bb3e <_dtoa_r+0x7b6>
 800bb34:	4651      	mov	r1, sl
 800bb36:	4620      	mov	r0, r4
 800bb38:	f000 fce0 	bl	800c4fc <__pow5mult>
 800bb3c:	4682      	mov	sl, r0
 800bb3e:	2101      	movs	r1, #1
 800bb40:	4620      	mov	r0, r4
 800bb42:	f000 fc1b 	bl	800c37c <__i2b>
 800bb46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	4606      	mov	r6, r0
 800bb4c:	f340 8081 	ble.w	800bc52 <_dtoa_r+0x8ca>
 800bb50:	461a      	mov	r2, r3
 800bb52:	4601      	mov	r1, r0
 800bb54:	4620      	mov	r0, r4
 800bb56:	f000 fcd1 	bl	800c4fc <__pow5mult>
 800bb5a:	9b07      	ldr	r3, [sp, #28]
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	4606      	mov	r6, r0
 800bb60:	dd7a      	ble.n	800bc58 <_dtoa_r+0x8d0>
 800bb62:	f04f 0800 	mov.w	r8, #0
 800bb66:	6933      	ldr	r3, [r6, #16]
 800bb68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bb6c:	6918      	ldr	r0, [r3, #16]
 800bb6e:	f000 fbb7 	bl	800c2e0 <__hi0bits>
 800bb72:	f1c0 0020 	rsb	r0, r0, #32
 800bb76:	9b06      	ldr	r3, [sp, #24]
 800bb78:	4418      	add	r0, r3
 800bb7a:	f010 001f 	ands.w	r0, r0, #31
 800bb7e:	f000 8094 	beq.w	800bcaa <_dtoa_r+0x922>
 800bb82:	f1c0 0320 	rsb	r3, r0, #32
 800bb86:	2b04      	cmp	r3, #4
 800bb88:	f340 8085 	ble.w	800bc96 <_dtoa_r+0x90e>
 800bb8c:	9b05      	ldr	r3, [sp, #20]
 800bb8e:	f1c0 001c 	rsb	r0, r0, #28
 800bb92:	4403      	add	r3, r0
 800bb94:	9305      	str	r3, [sp, #20]
 800bb96:	9b06      	ldr	r3, [sp, #24]
 800bb98:	4403      	add	r3, r0
 800bb9a:	4405      	add	r5, r0
 800bb9c:	9306      	str	r3, [sp, #24]
 800bb9e:	9b05      	ldr	r3, [sp, #20]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	dd05      	ble.n	800bbb0 <_dtoa_r+0x828>
 800bba4:	4651      	mov	r1, sl
 800bba6:	461a      	mov	r2, r3
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f000 fd01 	bl	800c5b0 <__lshift>
 800bbae:	4682      	mov	sl, r0
 800bbb0:	9b06      	ldr	r3, [sp, #24]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	dd05      	ble.n	800bbc2 <_dtoa_r+0x83a>
 800bbb6:	4631      	mov	r1, r6
 800bbb8:	461a      	mov	r2, r3
 800bbba:	4620      	mov	r0, r4
 800bbbc:	f000 fcf8 	bl	800c5b0 <__lshift>
 800bbc0:	4606      	mov	r6, r0
 800bbc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d072      	beq.n	800bcae <_dtoa_r+0x926>
 800bbc8:	4631      	mov	r1, r6
 800bbca:	4650      	mov	r0, sl
 800bbcc:	f000 fd5c 	bl	800c688 <__mcmp>
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	da6c      	bge.n	800bcae <_dtoa_r+0x926>
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	4651      	mov	r1, sl
 800bbd8:	220a      	movs	r2, #10
 800bbda:	4620      	mov	r0, r4
 800bbdc:	f000 fb3a 	bl	800c254 <__multadd>
 800bbe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbe2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bbe6:	4682      	mov	sl, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	f000 81b0 	beq.w	800bf4e <_dtoa_r+0xbc6>
 800bbee:	2300      	movs	r3, #0
 800bbf0:	4639      	mov	r1, r7
 800bbf2:	220a      	movs	r2, #10
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	f000 fb2d 	bl	800c254 <__multadd>
 800bbfa:	9b01      	ldr	r3, [sp, #4]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	4607      	mov	r7, r0
 800bc00:	f300 8096 	bgt.w	800bd30 <_dtoa_r+0x9a8>
 800bc04:	9b07      	ldr	r3, [sp, #28]
 800bc06:	2b02      	cmp	r3, #2
 800bc08:	dc59      	bgt.n	800bcbe <_dtoa_r+0x936>
 800bc0a:	e091      	b.n	800bd30 <_dtoa_r+0x9a8>
 800bc0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bc12:	e758      	b.n	800bac6 <_dtoa_r+0x73e>
 800bc14:	9b04      	ldr	r3, [sp, #16]
 800bc16:	1e5e      	subs	r6, r3, #1
 800bc18:	9b08      	ldr	r3, [sp, #32]
 800bc1a:	42b3      	cmp	r3, r6
 800bc1c:	bfbf      	itttt	lt
 800bc1e:	9b08      	ldrlt	r3, [sp, #32]
 800bc20:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800bc22:	9608      	strlt	r6, [sp, #32]
 800bc24:	1af3      	sublt	r3, r6, r3
 800bc26:	bfb4      	ite	lt
 800bc28:	18d2      	addlt	r2, r2, r3
 800bc2a:	1b9e      	subge	r6, r3, r6
 800bc2c:	9b04      	ldr	r3, [sp, #16]
 800bc2e:	bfbc      	itt	lt
 800bc30:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800bc32:	2600      	movlt	r6, #0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	bfb7      	itett	lt
 800bc38:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800bc3c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800bc40:	1a9d      	sublt	r5, r3, r2
 800bc42:	2300      	movlt	r3, #0
 800bc44:	e741      	b.n	800baca <_dtoa_r+0x742>
 800bc46:	9e08      	ldr	r6, [sp, #32]
 800bc48:	9d05      	ldr	r5, [sp, #20]
 800bc4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bc4c:	e748      	b.n	800bae0 <_dtoa_r+0x758>
 800bc4e:	9a08      	ldr	r2, [sp, #32]
 800bc50:	e770      	b.n	800bb34 <_dtoa_r+0x7ac>
 800bc52:	9b07      	ldr	r3, [sp, #28]
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	dc19      	bgt.n	800bc8c <_dtoa_r+0x904>
 800bc58:	9b02      	ldr	r3, [sp, #8]
 800bc5a:	b9bb      	cbnz	r3, 800bc8c <_dtoa_r+0x904>
 800bc5c:	9b03      	ldr	r3, [sp, #12]
 800bc5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc62:	b99b      	cbnz	r3, 800bc8c <_dtoa_r+0x904>
 800bc64:	9b03      	ldr	r3, [sp, #12]
 800bc66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc6a:	0d1b      	lsrs	r3, r3, #20
 800bc6c:	051b      	lsls	r3, r3, #20
 800bc6e:	b183      	cbz	r3, 800bc92 <_dtoa_r+0x90a>
 800bc70:	9b05      	ldr	r3, [sp, #20]
 800bc72:	3301      	adds	r3, #1
 800bc74:	9305      	str	r3, [sp, #20]
 800bc76:	9b06      	ldr	r3, [sp, #24]
 800bc78:	3301      	adds	r3, #1
 800bc7a:	9306      	str	r3, [sp, #24]
 800bc7c:	f04f 0801 	mov.w	r8, #1
 800bc80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	f47f af6f 	bne.w	800bb66 <_dtoa_r+0x7de>
 800bc88:	2001      	movs	r0, #1
 800bc8a:	e774      	b.n	800bb76 <_dtoa_r+0x7ee>
 800bc8c:	f04f 0800 	mov.w	r8, #0
 800bc90:	e7f6      	b.n	800bc80 <_dtoa_r+0x8f8>
 800bc92:	4698      	mov	r8, r3
 800bc94:	e7f4      	b.n	800bc80 <_dtoa_r+0x8f8>
 800bc96:	d082      	beq.n	800bb9e <_dtoa_r+0x816>
 800bc98:	9a05      	ldr	r2, [sp, #20]
 800bc9a:	331c      	adds	r3, #28
 800bc9c:	441a      	add	r2, r3
 800bc9e:	9205      	str	r2, [sp, #20]
 800bca0:	9a06      	ldr	r2, [sp, #24]
 800bca2:	441a      	add	r2, r3
 800bca4:	441d      	add	r5, r3
 800bca6:	9206      	str	r2, [sp, #24]
 800bca8:	e779      	b.n	800bb9e <_dtoa_r+0x816>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	e7f4      	b.n	800bc98 <_dtoa_r+0x910>
 800bcae:	9b04      	ldr	r3, [sp, #16]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	dc37      	bgt.n	800bd24 <_dtoa_r+0x99c>
 800bcb4:	9b07      	ldr	r3, [sp, #28]
 800bcb6:	2b02      	cmp	r3, #2
 800bcb8:	dd34      	ble.n	800bd24 <_dtoa_r+0x99c>
 800bcba:	9b04      	ldr	r3, [sp, #16]
 800bcbc:	9301      	str	r3, [sp, #4]
 800bcbe:	9b01      	ldr	r3, [sp, #4]
 800bcc0:	b963      	cbnz	r3, 800bcdc <_dtoa_r+0x954>
 800bcc2:	4631      	mov	r1, r6
 800bcc4:	2205      	movs	r2, #5
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	f000 fac4 	bl	800c254 <__multadd>
 800bccc:	4601      	mov	r1, r0
 800bcce:	4606      	mov	r6, r0
 800bcd0:	4650      	mov	r0, sl
 800bcd2:	f000 fcd9 	bl	800c688 <__mcmp>
 800bcd6:	2800      	cmp	r0, #0
 800bcd8:	f73f adbb 	bgt.w	800b852 <_dtoa_r+0x4ca>
 800bcdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcde:	9d00      	ldr	r5, [sp, #0]
 800bce0:	ea6f 0b03 	mvn.w	fp, r3
 800bce4:	f04f 0800 	mov.w	r8, #0
 800bce8:	4631      	mov	r1, r6
 800bcea:	4620      	mov	r0, r4
 800bcec:	f000 fa90 	bl	800c210 <_Bfree>
 800bcf0:	2f00      	cmp	r7, #0
 800bcf2:	f43f aeab 	beq.w	800ba4c <_dtoa_r+0x6c4>
 800bcf6:	f1b8 0f00 	cmp.w	r8, #0
 800bcfa:	d005      	beq.n	800bd08 <_dtoa_r+0x980>
 800bcfc:	45b8      	cmp	r8, r7
 800bcfe:	d003      	beq.n	800bd08 <_dtoa_r+0x980>
 800bd00:	4641      	mov	r1, r8
 800bd02:	4620      	mov	r0, r4
 800bd04:	f000 fa84 	bl	800c210 <_Bfree>
 800bd08:	4639      	mov	r1, r7
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	f000 fa80 	bl	800c210 <_Bfree>
 800bd10:	e69c      	b.n	800ba4c <_dtoa_r+0x6c4>
 800bd12:	2600      	movs	r6, #0
 800bd14:	4637      	mov	r7, r6
 800bd16:	e7e1      	b.n	800bcdc <_dtoa_r+0x954>
 800bd18:	46bb      	mov	fp, r7
 800bd1a:	4637      	mov	r7, r6
 800bd1c:	e599      	b.n	800b852 <_dtoa_r+0x4ca>
 800bd1e:	bf00      	nop
 800bd20:	40240000 	.word	0x40240000
 800bd24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	f000 80c8 	beq.w	800bebc <_dtoa_r+0xb34>
 800bd2c:	9b04      	ldr	r3, [sp, #16]
 800bd2e:	9301      	str	r3, [sp, #4]
 800bd30:	2d00      	cmp	r5, #0
 800bd32:	dd05      	ble.n	800bd40 <_dtoa_r+0x9b8>
 800bd34:	4639      	mov	r1, r7
 800bd36:	462a      	mov	r2, r5
 800bd38:	4620      	mov	r0, r4
 800bd3a:	f000 fc39 	bl	800c5b0 <__lshift>
 800bd3e:	4607      	mov	r7, r0
 800bd40:	f1b8 0f00 	cmp.w	r8, #0
 800bd44:	d05b      	beq.n	800bdfe <_dtoa_r+0xa76>
 800bd46:	6879      	ldr	r1, [r7, #4]
 800bd48:	4620      	mov	r0, r4
 800bd4a:	f000 fa21 	bl	800c190 <_Balloc>
 800bd4e:	4605      	mov	r5, r0
 800bd50:	b928      	cbnz	r0, 800bd5e <_dtoa_r+0x9d6>
 800bd52:	4b83      	ldr	r3, [pc, #524]	; (800bf60 <_dtoa_r+0xbd8>)
 800bd54:	4602      	mov	r2, r0
 800bd56:	f240 21ef 	movw	r1, #751	; 0x2ef
 800bd5a:	f7ff bb2e 	b.w	800b3ba <_dtoa_r+0x32>
 800bd5e:	693a      	ldr	r2, [r7, #16]
 800bd60:	3202      	adds	r2, #2
 800bd62:	0092      	lsls	r2, r2, #2
 800bd64:	f107 010c 	add.w	r1, r7, #12
 800bd68:	300c      	adds	r0, #12
 800bd6a:	f7ff fa76 	bl	800b25a <memcpy>
 800bd6e:	2201      	movs	r2, #1
 800bd70:	4629      	mov	r1, r5
 800bd72:	4620      	mov	r0, r4
 800bd74:	f000 fc1c 	bl	800c5b0 <__lshift>
 800bd78:	9b00      	ldr	r3, [sp, #0]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	9304      	str	r3, [sp, #16]
 800bd7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd82:	4413      	add	r3, r2
 800bd84:	9308      	str	r3, [sp, #32]
 800bd86:	9b02      	ldr	r3, [sp, #8]
 800bd88:	f003 0301 	and.w	r3, r3, #1
 800bd8c:	46b8      	mov	r8, r7
 800bd8e:	9306      	str	r3, [sp, #24]
 800bd90:	4607      	mov	r7, r0
 800bd92:	9b04      	ldr	r3, [sp, #16]
 800bd94:	4631      	mov	r1, r6
 800bd96:	3b01      	subs	r3, #1
 800bd98:	4650      	mov	r0, sl
 800bd9a:	9301      	str	r3, [sp, #4]
 800bd9c:	f7ff fa6b 	bl	800b276 <quorem>
 800bda0:	4641      	mov	r1, r8
 800bda2:	9002      	str	r0, [sp, #8]
 800bda4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bda8:	4650      	mov	r0, sl
 800bdaa:	f000 fc6d 	bl	800c688 <__mcmp>
 800bdae:	463a      	mov	r2, r7
 800bdb0:	9005      	str	r0, [sp, #20]
 800bdb2:	4631      	mov	r1, r6
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	f000 fc83 	bl	800c6c0 <__mdiff>
 800bdba:	68c2      	ldr	r2, [r0, #12]
 800bdbc:	4605      	mov	r5, r0
 800bdbe:	bb02      	cbnz	r2, 800be02 <_dtoa_r+0xa7a>
 800bdc0:	4601      	mov	r1, r0
 800bdc2:	4650      	mov	r0, sl
 800bdc4:	f000 fc60 	bl	800c688 <__mcmp>
 800bdc8:	4602      	mov	r2, r0
 800bdca:	4629      	mov	r1, r5
 800bdcc:	4620      	mov	r0, r4
 800bdce:	9209      	str	r2, [sp, #36]	; 0x24
 800bdd0:	f000 fa1e 	bl	800c210 <_Bfree>
 800bdd4:	9b07      	ldr	r3, [sp, #28]
 800bdd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdd8:	9d04      	ldr	r5, [sp, #16]
 800bdda:	ea43 0102 	orr.w	r1, r3, r2
 800bdde:	9b06      	ldr	r3, [sp, #24]
 800bde0:	4319      	orrs	r1, r3
 800bde2:	d110      	bne.n	800be06 <_dtoa_r+0xa7e>
 800bde4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bde8:	d029      	beq.n	800be3e <_dtoa_r+0xab6>
 800bdea:	9b05      	ldr	r3, [sp, #20]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	dd02      	ble.n	800bdf6 <_dtoa_r+0xa6e>
 800bdf0:	9b02      	ldr	r3, [sp, #8]
 800bdf2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800bdf6:	9b01      	ldr	r3, [sp, #4]
 800bdf8:	f883 9000 	strb.w	r9, [r3]
 800bdfc:	e774      	b.n	800bce8 <_dtoa_r+0x960>
 800bdfe:	4638      	mov	r0, r7
 800be00:	e7ba      	b.n	800bd78 <_dtoa_r+0x9f0>
 800be02:	2201      	movs	r2, #1
 800be04:	e7e1      	b.n	800bdca <_dtoa_r+0xa42>
 800be06:	9b05      	ldr	r3, [sp, #20]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	db04      	blt.n	800be16 <_dtoa_r+0xa8e>
 800be0c:	9907      	ldr	r1, [sp, #28]
 800be0e:	430b      	orrs	r3, r1
 800be10:	9906      	ldr	r1, [sp, #24]
 800be12:	430b      	orrs	r3, r1
 800be14:	d120      	bne.n	800be58 <_dtoa_r+0xad0>
 800be16:	2a00      	cmp	r2, #0
 800be18:	dded      	ble.n	800bdf6 <_dtoa_r+0xa6e>
 800be1a:	4651      	mov	r1, sl
 800be1c:	2201      	movs	r2, #1
 800be1e:	4620      	mov	r0, r4
 800be20:	f000 fbc6 	bl	800c5b0 <__lshift>
 800be24:	4631      	mov	r1, r6
 800be26:	4682      	mov	sl, r0
 800be28:	f000 fc2e 	bl	800c688 <__mcmp>
 800be2c:	2800      	cmp	r0, #0
 800be2e:	dc03      	bgt.n	800be38 <_dtoa_r+0xab0>
 800be30:	d1e1      	bne.n	800bdf6 <_dtoa_r+0xa6e>
 800be32:	f019 0f01 	tst.w	r9, #1
 800be36:	d0de      	beq.n	800bdf6 <_dtoa_r+0xa6e>
 800be38:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800be3c:	d1d8      	bne.n	800bdf0 <_dtoa_r+0xa68>
 800be3e:	9a01      	ldr	r2, [sp, #4]
 800be40:	2339      	movs	r3, #57	; 0x39
 800be42:	7013      	strb	r3, [r2, #0]
 800be44:	462b      	mov	r3, r5
 800be46:	461d      	mov	r5, r3
 800be48:	3b01      	subs	r3, #1
 800be4a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800be4e:	2a39      	cmp	r2, #57	; 0x39
 800be50:	d06c      	beq.n	800bf2c <_dtoa_r+0xba4>
 800be52:	3201      	adds	r2, #1
 800be54:	701a      	strb	r2, [r3, #0]
 800be56:	e747      	b.n	800bce8 <_dtoa_r+0x960>
 800be58:	2a00      	cmp	r2, #0
 800be5a:	dd07      	ble.n	800be6c <_dtoa_r+0xae4>
 800be5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800be60:	d0ed      	beq.n	800be3e <_dtoa_r+0xab6>
 800be62:	9a01      	ldr	r2, [sp, #4]
 800be64:	f109 0301 	add.w	r3, r9, #1
 800be68:	7013      	strb	r3, [r2, #0]
 800be6a:	e73d      	b.n	800bce8 <_dtoa_r+0x960>
 800be6c:	9b04      	ldr	r3, [sp, #16]
 800be6e:	9a08      	ldr	r2, [sp, #32]
 800be70:	f803 9c01 	strb.w	r9, [r3, #-1]
 800be74:	4293      	cmp	r3, r2
 800be76:	d043      	beq.n	800bf00 <_dtoa_r+0xb78>
 800be78:	4651      	mov	r1, sl
 800be7a:	2300      	movs	r3, #0
 800be7c:	220a      	movs	r2, #10
 800be7e:	4620      	mov	r0, r4
 800be80:	f000 f9e8 	bl	800c254 <__multadd>
 800be84:	45b8      	cmp	r8, r7
 800be86:	4682      	mov	sl, r0
 800be88:	f04f 0300 	mov.w	r3, #0
 800be8c:	f04f 020a 	mov.w	r2, #10
 800be90:	4641      	mov	r1, r8
 800be92:	4620      	mov	r0, r4
 800be94:	d107      	bne.n	800bea6 <_dtoa_r+0xb1e>
 800be96:	f000 f9dd 	bl	800c254 <__multadd>
 800be9a:	4680      	mov	r8, r0
 800be9c:	4607      	mov	r7, r0
 800be9e:	9b04      	ldr	r3, [sp, #16]
 800bea0:	3301      	adds	r3, #1
 800bea2:	9304      	str	r3, [sp, #16]
 800bea4:	e775      	b.n	800bd92 <_dtoa_r+0xa0a>
 800bea6:	f000 f9d5 	bl	800c254 <__multadd>
 800beaa:	4639      	mov	r1, r7
 800beac:	4680      	mov	r8, r0
 800beae:	2300      	movs	r3, #0
 800beb0:	220a      	movs	r2, #10
 800beb2:	4620      	mov	r0, r4
 800beb4:	f000 f9ce 	bl	800c254 <__multadd>
 800beb8:	4607      	mov	r7, r0
 800beba:	e7f0      	b.n	800be9e <_dtoa_r+0xb16>
 800bebc:	9b04      	ldr	r3, [sp, #16]
 800bebe:	9301      	str	r3, [sp, #4]
 800bec0:	9d00      	ldr	r5, [sp, #0]
 800bec2:	4631      	mov	r1, r6
 800bec4:	4650      	mov	r0, sl
 800bec6:	f7ff f9d6 	bl	800b276 <quorem>
 800beca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bece:	9b00      	ldr	r3, [sp, #0]
 800bed0:	f805 9b01 	strb.w	r9, [r5], #1
 800bed4:	1aea      	subs	r2, r5, r3
 800bed6:	9b01      	ldr	r3, [sp, #4]
 800bed8:	4293      	cmp	r3, r2
 800beda:	dd07      	ble.n	800beec <_dtoa_r+0xb64>
 800bedc:	4651      	mov	r1, sl
 800bede:	2300      	movs	r3, #0
 800bee0:	220a      	movs	r2, #10
 800bee2:	4620      	mov	r0, r4
 800bee4:	f000 f9b6 	bl	800c254 <__multadd>
 800bee8:	4682      	mov	sl, r0
 800beea:	e7ea      	b.n	800bec2 <_dtoa_r+0xb3a>
 800beec:	9b01      	ldr	r3, [sp, #4]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	bfc8      	it	gt
 800bef2:	461d      	movgt	r5, r3
 800bef4:	9b00      	ldr	r3, [sp, #0]
 800bef6:	bfd8      	it	le
 800bef8:	2501      	movle	r5, #1
 800befa:	441d      	add	r5, r3
 800befc:	f04f 0800 	mov.w	r8, #0
 800bf00:	4651      	mov	r1, sl
 800bf02:	2201      	movs	r2, #1
 800bf04:	4620      	mov	r0, r4
 800bf06:	f000 fb53 	bl	800c5b0 <__lshift>
 800bf0a:	4631      	mov	r1, r6
 800bf0c:	4682      	mov	sl, r0
 800bf0e:	f000 fbbb 	bl	800c688 <__mcmp>
 800bf12:	2800      	cmp	r0, #0
 800bf14:	dc96      	bgt.n	800be44 <_dtoa_r+0xabc>
 800bf16:	d102      	bne.n	800bf1e <_dtoa_r+0xb96>
 800bf18:	f019 0f01 	tst.w	r9, #1
 800bf1c:	d192      	bne.n	800be44 <_dtoa_r+0xabc>
 800bf1e:	462b      	mov	r3, r5
 800bf20:	461d      	mov	r5, r3
 800bf22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf26:	2a30      	cmp	r2, #48	; 0x30
 800bf28:	d0fa      	beq.n	800bf20 <_dtoa_r+0xb98>
 800bf2a:	e6dd      	b.n	800bce8 <_dtoa_r+0x960>
 800bf2c:	9a00      	ldr	r2, [sp, #0]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d189      	bne.n	800be46 <_dtoa_r+0xabe>
 800bf32:	f10b 0b01 	add.w	fp, fp, #1
 800bf36:	2331      	movs	r3, #49	; 0x31
 800bf38:	e796      	b.n	800be68 <_dtoa_r+0xae0>
 800bf3a:	4b0a      	ldr	r3, [pc, #40]	; (800bf64 <_dtoa_r+0xbdc>)
 800bf3c:	f7ff ba99 	b.w	800b472 <_dtoa_r+0xea>
 800bf40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f47f aa6d 	bne.w	800b422 <_dtoa_r+0x9a>
 800bf48:	4b07      	ldr	r3, [pc, #28]	; (800bf68 <_dtoa_r+0xbe0>)
 800bf4a:	f7ff ba92 	b.w	800b472 <_dtoa_r+0xea>
 800bf4e:	9b01      	ldr	r3, [sp, #4]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	dcb5      	bgt.n	800bec0 <_dtoa_r+0xb38>
 800bf54:	9b07      	ldr	r3, [sp, #28]
 800bf56:	2b02      	cmp	r3, #2
 800bf58:	f73f aeb1 	bgt.w	800bcbe <_dtoa_r+0x936>
 800bf5c:	e7b0      	b.n	800bec0 <_dtoa_r+0xb38>
 800bf5e:	bf00      	nop
 800bf60:	0800d40d 	.word	0x0800d40d
 800bf64:	0800d363 	.word	0x0800d363
 800bf68:	0800d391 	.word	0x0800d391

0800bf6c <_free_r>:
 800bf6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf6e:	2900      	cmp	r1, #0
 800bf70:	d044      	beq.n	800bffc <_free_r+0x90>
 800bf72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf76:	9001      	str	r0, [sp, #4]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	f1a1 0404 	sub.w	r4, r1, #4
 800bf7e:	bfb8      	it	lt
 800bf80:	18e4      	addlt	r4, r4, r3
 800bf82:	f000 f8f9 	bl	800c178 <__malloc_lock>
 800bf86:	4a1e      	ldr	r2, [pc, #120]	; (800c000 <_free_r+0x94>)
 800bf88:	9801      	ldr	r0, [sp, #4]
 800bf8a:	6813      	ldr	r3, [r2, #0]
 800bf8c:	b933      	cbnz	r3, 800bf9c <_free_r+0x30>
 800bf8e:	6063      	str	r3, [r4, #4]
 800bf90:	6014      	str	r4, [r2, #0]
 800bf92:	b003      	add	sp, #12
 800bf94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf98:	f000 b8f4 	b.w	800c184 <__malloc_unlock>
 800bf9c:	42a3      	cmp	r3, r4
 800bf9e:	d908      	bls.n	800bfb2 <_free_r+0x46>
 800bfa0:	6825      	ldr	r5, [r4, #0]
 800bfa2:	1961      	adds	r1, r4, r5
 800bfa4:	428b      	cmp	r3, r1
 800bfa6:	bf01      	itttt	eq
 800bfa8:	6819      	ldreq	r1, [r3, #0]
 800bfaa:	685b      	ldreq	r3, [r3, #4]
 800bfac:	1949      	addeq	r1, r1, r5
 800bfae:	6021      	streq	r1, [r4, #0]
 800bfb0:	e7ed      	b.n	800bf8e <_free_r+0x22>
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	b10b      	cbz	r3, 800bfbc <_free_r+0x50>
 800bfb8:	42a3      	cmp	r3, r4
 800bfba:	d9fa      	bls.n	800bfb2 <_free_r+0x46>
 800bfbc:	6811      	ldr	r1, [r2, #0]
 800bfbe:	1855      	adds	r5, r2, r1
 800bfc0:	42a5      	cmp	r5, r4
 800bfc2:	d10b      	bne.n	800bfdc <_free_r+0x70>
 800bfc4:	6824      	ldr	r4, [r4, #0]
 800bfc6:	4421      	add	r1, r4
 800bfc8:	1854      	adds	r4, r2, r1
 800bfca:	42a3      	cmp	r3, r4
 800bfcc:	6011      	str	r1, [r2, #0]
 800bfce:	d1e0      	bne.n	800bf92 <_free_r+0x26>
 800bfd0:	681c      	ldr	r4, [r3, #0]
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	6053      	str	r3, [r2, #4]
 800bfd6:	440c      	add	r4, r1
 800bfd8:	6014      	str	r4, [r2, #0]
 800bfda:	e7da      	b.n	800bf92 <_free_r+0x26>
 800bfdc:	d902      	bls.n	800bfe4 <_free_r+0x78>
 800bfde:	230c      	movs	r3, #12
 800bfe0:	6003      	str	r3, [r0, #0]
 800bfe2:	e7d6      	b.n	800bf92 <_free_r+0x26>
 800bfe4:	6825      	ldr	r5, [r4, #0]
 800bfe6:	1961      	adds	r1, r4, r5
 800bfe8:	428b      	cmp	r3, r1
 800bfea:	bf04      	itt	eq
 800bfec:	6819      	ldreq	r1, [r3, #0]
 800bfee:	685b      	ldreq	r3, [r3, #4]
 800bff0:	6063      	str	r3, [r4, #4]
 800bff2:	bf04      	itt	eq
 800bff4:	1949      	addeq	r1, r1, r5
 800bff6:	6021      	streq	r1, [r4, #0]
 800bff8:	6054      	str	r4, [r2, #4]
 800bffa:	e7ca      	b.n	800bf92 <_free_r+0x26>
 800bffc:	b003      	add	sp, #12
 800bffe:	bd30      	pop	{r4, r5, pc}
 800c000:	20014c90 	.word	0x20014c90

0800c004 <malloc>:
 800c004:	4b02      	ldr	r3, [pc, #8]	; (800c010 <malloc+0xc>)
 800c006:	4601      	mov	r1, r0
 800c008:	6818      	ldr	r0, [r3, #0]
 800c00a:	f000 b823 	b.w	800c054 <_malloc_r>
 800c00e:	bf00      	nop
 800c010:	200001d8 	.word	0x200001d8

0800c014 <sbrk_aligned>:
 800c014:	b570      	push	{r4, r5, r6, lr}
 800c016:	4e0e      	ldr	r6, [pc, #56]	; (800c050 <sbrk_aligned+0x3c>)
 800c018:	460c      	mov	r4, r1
 800c01a:	6831      	ldr	r1, [r6, #0]
 800c01c:	4605      	mov	r5, r0
 800c01e:	b911      	cbnz	r1, 800c026 <sbrk_aligned+0x12>
 800c020:	f000 fcee 	bl	800ca00 <_sbrk_r>
 800c024:	6030      	str	r0, [r6, #0]
 800c026:	4621      	mov	r1, r4
 800c028:	4628      	mov	r0, r5
 800c02a:	f000 fce9 	bl	800ca00 <_sbrk_r>
 800c02e:	1c43      	adds	r3, r0, #1
 800c030:	d00a      	beq.n	800c048 <sbrk_aligned+0x34>
 800c032:	1cc4      	adds	r4, r0, #3
 800c034:	f024 0403 	bic.w	r4, r4, #3
 800c038:	42a0      	cmp	r0, r4
 800c03a:	d007      	beq.n	800c04c <sbrk_aligned+0x38>
 800c03c:	1a21      	subs	r1, r4, r0
 800c03e:	4628      	mov	r0, r5
 800c040:	f000 fcde 	bl	800ca00 <_sbrk_r>
 800c044:	3001      	adds	r0, #1
 800c046:	d101      	bne.n	800c04c <sbrk_aligned+0x38>
 800c048:	f04f 34ff 	mov.w	r4, #4294967295
 800c04c:	4620      	mov	r0, r4
 800c04e:	bd70      	pop	{r4, r5, r6, pc}
 800c050:	20014c94 	.word	0x20014c94

0800c054 <_malloc_r>:
 800c054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c058:	1ccd      	adds	r5, r1, #3
 800c05a:	f025 0503 	bic.w	r5, r5, #3
 800c05e:	3508      	adds	r5, #8
 800c060:	2d0c      	cmp	r5, #12
 800c062:	bf38      	it	cc
 800c064:	250c      	movcc	r5, #12
 800c066:	2d00      	cmp	r5, #0
 800c068:	4607      	mov	r7, r0
 800c06a:	db01      	blt.n	800c070 <_malloc_r+0x1c>
 800c06c:	42a9      	cmp	r1, r5
 800c06e:	d905      	bls.n	800c07c <_malloc_r+0x28>
 800c070:	230c      	movs	r3, #12
 800c072:	603b      	str	r3, [r7, #0]
 800c074:	2600      	movs	r6, #0
 800c076:	4630      	mov	r0, r6
 800c078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c07c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c150 <_malloc_r+0xfc>
 800c080:	f000 f87a 	bl	800c178 <__malloc_lock>
 800c084:	f8d8 3000 	ldr.w	r3, [r8]
 800c088:	461c      	mov	r4, r3
 800c08a:	bb5c      	cbnz	r4, 800c0e4 <_malloc_r+0x90>
 800c08c:	4629      	mov	r1, r5
 800c08e:	4638      	mov	r0, r7
 800c090:	f7ff ffc0 	bl	800c014 <sbrk_aligned>
 800c094:	1c43      	adds	r3, r0, #1
 800c096:	4604      	mov	r4, r0
 800c098:	d155      	bne.n	800c146 <_malloc_r+0xf2>
 800c09a:	f8d8 4000 	ldr.w	r4, [r8]
 800c09e:	4626      	mov	r6, r4
 800c0a0:	2e00      	cmp	r6, #0
 800c0a2:	d145      	bne.n	800c130 <_malloc_r+0xdc>
 800c0a4:	2c00      	cmp	r4, #0
 800c0a6:	d048      	beq.n	800c13a <_malloc_r+0xe6>
 800c0a8:	6823      	ldr	r3, [r4, #0]
 800c0aa:	4631      	mov	r1, r6
 800c0ac:	4638      	mov	r0, r7
 800c0ae:	eb04 0903 	add.w	r9, r4, r3
 800c0b2:	f000 fca5 	bl	800ca00 <_sbrk_r>
 800c0b6:	4581      	cmp	r9, r0
 800c0b8:	d13f      	bne.n	800c13a <_malloc_r+0xe6>
 800c0ba:	6821      	ldr	r1, [r4, #0]
 800c0bc:	1a6d      	subs	r5, r5, r1
 800c0be:	4629      	mov	r1, r5
 800c0c0:	4638      	mov	r0, r7
 800c0c2:	f7ff ffa7 	bl	800c014 <sbrk_aligned>
 800c0c6:	3001      	adds	r0, #1
 800c0c8:	d037      	beq.n	800c13a <_malloc_r+0xe6>
 800c0ca:	6823      	ldr	r3, [r4, #0]
 800c0cc:	442b      	add	r3, r5
 800c0ce:	6023      	str	r3, [r4, #0]
 800c0d0:	f8d8 3000 	ldr.w	r3, [r8]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d038      	beq.n	800c14a <_malloc_r+0xf6>
 800c0d8:	685a      	ldr	r2, [r3, #4]
 800c0da:	42a2      	cmp	r2, r4
 800c0dc:	d12b      	bne.n	800c136 <_malloc_r+0xe2>
 800c0de:	2200      	movs	r2, #0
 800c0e0:	605a      	str	r2, [r3, #4]
 800c0e2:	e00f      	b.n	800c104 <_malloc_r+0xb0>
 800c0e4:	6822      	ldr	r2, [r4, #0]
 800c0e6:	1b52      	subs	r2, r2, r5
 800c0e8:	d41f      	bmi.n	800c12a <_malloc_r+0xd6>
 800c0ea:	2a0b      	cmp	r2, #11
 800c0ec:	d917      	bls.n	800c11e <_malloc_r+0xca>
 800c0ee:	1961      	adds	r1, r4, r5
 800c0f0:	42a3      	cmp	r3, r4
 800c0f2:	6025      	str	r5, [r4, #0]
 800c0f4:	bf18      	it	ne
 800c0f6:	6059      	strne	r1, [r3, #4]
 800c0f8:	6863      	ldr	r3, [r4, #4]
 800c0fa:	bf08      	it	eq
 800c0fc:	f8c8 1000 	streq.w	r1, [r8]
 800c100:	5162      	str	r2, [r4, r5]
 800c102:	604b      	str	r3, [r1, #4]
 800c104:	4638      	mov	r0, r7
 800c106:	f104 060b 	add.w	r6, r4, #11
 800c10a:	f000 f83b 	bl	800c184 <__malloc_unlock>
 800c10e:	f026 0607 	bic.w	r6, r6, #7
 800c112:	1d23      	adds	r3, r4, #4
 800c114:	1af2      	subs	r2, r6, r3
 800c116:	d0ae      	beq.n	800c076 <_malloc_r+0x22>
 800c118:	1b9b      	subs	r3, r3, r6
 800c11a:	50a3      	str	r3, [r4, r2]
 800c11c:	e7ab      	b.n	800c076 <_malloc_r+0x22>
 800c11e:	42a3      	cmp	r3, r4
 800c120:	6862      	ldr	r2, [r4, #4]
 800c122:	d1dd      	bne.n	800c0e0 <_malloc_r+0x8c>
 800c124:	f8c8 2000 	str.w	r2, [r8]
 800c128:	e7ec      	b.n	800c104 <_malloc_r+0xb0>
 800c12a:	4623      	mov	r3, r4
 800c12c:	6864      	ldr	r4, [r4, #4]
 800c12e:	e7ac      	b.n	800c08a <_malloc_r+0x36>
 800c130:	4634      	mov	r4, r6
 800c132:	6876      	ldr	r6, [r6, #4]
 800c134:	e7b4      	b.n	800c0a0 <_malloc_r+0x4c>
 800c136:	4613      	mov	r3, r2
 800c138:	e7cc      	b.n	800c0d4 <_malloc_r+0x80>
 800c13a:	230c      	movs	r3, #12
 800c13c:	603b      	str	r3, [r7, #0]
 800c13e:	4638      	mov	r0, r7
 800c140:	f000 f820 	bl	800c184 <__malloc_unlock>
 800c144:	e797      	b.n	800c076 <_malloc_r+0x22>
 800c146:	6025      	str	r5, [r4, #0]
 800c148:	e7dc      	b.n	800c104 <_malloc_r+0xb0>
 800c14a:	605b      	str	r3, [r3, #4]
 800c14c:	deff      	udf	#255	; 0xff
 800c14e:	bf00      	nop
 800c150:	20014c90 	.word	0x20014c90

0800c154 <__ascii_mbtowc>:
 800c154:	b082      	sub	sp, #8
 800c156:	b901      	cbnz	r1, 800c15a <__ascii_mbtowc+0x6>
 800c158:	a901      	add	r1, sp, #4
 800c15a:	b142      	cbz	r2, 800c16e <__ascii_mbtowc+0x1a>
 800c15c:	b14b      	cbz	r3, 800c172 <__ascii_mbtowc+0x1e>
 800c15e:	7813      	ldrb	r3, [r2, #0]
 800c160:	600b      	str	r3, [r1, #0]
 800c162:	7812      	ldrb	r2, [r2, #0]
 800c164:	1e10      	subs	r0, r2, #0
 800c166:	bf18      	it	ne
 800c168:	2001      	movne	r0, #1
 800c16a:	b002      	add	sp, #8
 800c16c:	4770      	bx	lr
 800c16e:	4610      	mov	r0, r2
 800c170:	e7fb      	b.n	800c16a <__ascii_mbtowc+0x16>
 800c172:	f06f 0001 	mvn.w	r0, #1
 800c176:	e7f8      	b.n	800c16a <__ascii_mbtowc+0x16>

0800c178 <__malloc_lock>:
 800c178:	4801      	ldr	r0, [pc, #4]	; (800c180 <__malloc_lock+0x8>)
 800c17a:	f7ff b86c 	b.w	800b256 <__retarget_lock_acquire_recursive>
 800c17e:	bf00      	nop
 800c180:	20014c8c 	.word	0x20014c8c

0800c184 <__malloc_unlock>:
 800c184:	4801      	ldr	r0, [pc, #4]	; (800c18c <__malloc_unlock+0x8>)
 800c186:	f7ff b867 	b.w	800b258 <__retarget_lock_release_recursive>
 800c18a:	bf00      	nop
 800c18c:	20014c8c 	.word	0x20014c8c

0800c190 <_Balloc>:
 800c190:	b570      	push	{r4, r5, r6, lr}
 800c192:	69c6      	ldr	r6, [r0, #28]
 800c194:	4604      	mov	r4, r0
 800c196:	460d      	mov	r5, r1
 800c198:	b976      	cbnz	r6, 800c1b8 <_Balloc+0x28>
 800c19a:	2010      	movs	r0, #16
 800c19c:	f7ff ff32 	bl	800c004 <malloc>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	61e0      	str	r0, [r4, #28]
 800c1a4:	b920      	cbnz	r0, 800c1b0 <_Balloc+0x20>
 800c1a6:	4b18      	ldr	r3, [pc, #96]	; (800c208 <_Balloc+0x78>)
 800c1a8:	4818      	ldr	r0, [pc, #96]	; (800c20c <_Balloc+0x7c>)
 800c1aa:	216b      	movs	r1, #107	; 0x6b
 800c1ac:	f000 fc38 	bl	800ca20 <__assert_func>
 800c1b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1b4:	6006      	str	r6, [r0, #0]
 800c1b6:	60c6      	str	r6, [r0, #12]
 800c1b8:	69e6      	ldr	r6, [r4, #28]
 800c1ba:	68f3      	ldr	r3, [r6, #12]
 800c1bc:	b183      	cbz	r3, 800c1e0 <_Balloc+0x50>
 800c1be:	69e3      	ldr	r3, [r4, #28]
 800c1c0:	68db      	ldr	r3, [r3, #12]
 800c1c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c1c6:	b9b8      	cbnz	r0, 800c1f8 <_Balloc+0x68>
 800c1c8:	2101      	movs	r1, #1
 800c1ca:	fa01 f605 	lsl.w	r6, r1, r5
 800c1ce:	1d72      	adds	r2, r6, #5
 800c1d0:	0092      	lsls	r2, r2, #2
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	f000 fc42 	bl	800ca5c <_calloc_r>
 800c1d8:	b160      	cbz	r0, 800c1f4 <_Balloc+0x64>
 800c1da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c1de:	e00e      	b.n	800c1fe <_Balloc+0x6e>
 800c1e0:	2221      	movs	r2, #33	; 0x21
 800c1e2:	2104      	movs	r1, #4
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	f000 fc39 	bl	800ca5c <_calloc_r>
 800c1ea:	69e3      	ldr	r3, [r4, #28]
 800c1ec:	60f0      	str	r0, [r6, #12]
 800c1ee:	68db      	ldr	r3, [r3, #12]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d1e4      	bne.n	800c1be <_Balloc+0x2e>
 800c1f4:	2000      	movs	r0, #0
 800c1f6:	bd70      	pop	{r4, r5, r6, pc}
 800c1f8:	6802      	ldr	r2, [r0, #0]
 800c1fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c1fe:	2300      	movs	r3, #0
 800c200:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c204:	e7f7      	b.n	800c1f6 <_Balloc+0x66>
 800c206:	bf00      	nop
 800c208:	0800d39e 	.word	0x0800d39e
 800c20c:	0800d41e 	.word	0x0800d41e

0800c210 <_Bfree>:
 800c210:	b570      	push	{r4, r5, r6, lr}
 800c212:	69c6      	ldr	r6, [r0, #28]
 800c214:	4605      	mov	r5, r0
 800c216:	460c      	mov	r4, r1
 800c218:	b976      	cbnz	r6, 800c238 <_Bfree+0x28>
 800c21a:	2010      	movs	r0, #16
 800c21c:	f7ff fef2 	bl	800c004 <malloc>
 800c220:	4602      	mov	r2, r0
 800c222:	61e8      	str	r0, [r5, #28]
 800c224:	b920      	cbnz	r0, 800c230 <_Bfree+0x20>
 800c226:	4b09      	ldr	r3, [pc, #36]	; (800c24c <_Bfree+0x3c>)
 800c228:	4809      	ldr	r0, [pc, #36]	; (800c250 <_Bfree+0x40>)
 800c22a:	218f      	movs	r1, #143	; 0x8f
 800c22c:	f000 fbf8 	bl	800ca20 <__assert_func>
 800c230:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c234:	6006      	str	r6, [r0, #0]
 800c236:	60c6      	str	r6, [r0, #12]
 800c238:	b13c      	cbz	r4, 800c24a <_Bfree+0x3a>
 800c23a:	69eb      	ldr	r3, [r5, #28]
 800c23c:	6862      	ldr	r2, [r4, #4]
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c244:	6021      	str	r1, [r4, #0]
 800c246:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c24a:	bd70      	pop	{r4, r5, r6, pc}
 800c24c:	0800d39e 	.word	0x0800d39e
 800c250:	0800d41e 	.word	0x0800d41e

0800c254 <__multadd>:
 800c254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c258:	690d      	ldr	r5, [r1, #16]
 800c25a:	4607      	mov	r7, r0
 800c25c:	460c      	mov	r4, r1
 800c25e:	461e      	mov	r6, r3
 800c260:	f101 0c14 	add.w	ip, r1, #20
 800c264:	2000      	movs	r0, #0
 800c266:	f8dc 3000 	ldr.w	r3, [ip]
 800c26a:	b299      	uxth	r1, r3
 800c26c:	fb02 6101 	mla	r1, r2, r1, r6
 800c270:	0c1e      	lsrs	r6, r3, #16
 800c272:	0c0b      	lsrs	r3, r1, #16
 800c274:	fb02 3306 	mla	r3, r2, r6, r3
 800c278:	b289      	uxth	r1, r1
 800c27a:	3001      	adds	r0, #1
 800c27c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c280:	4285      	cmp	r5, r0
 800c282:	f84c 1b04 	str.w	r1, [ip], #4
 800c286:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c28a:	dcec      	bgt.n	800c266 <__multadd+0x12>
 800c28c:	b30e      	cbz	r6, 800c2d2 <__multadd+0x7e>
 800c28e:	68a3      	ldr	r3, [r4, #8]
 800c290:	42ab      	cmp	r3, r5
 800c292:	dc19      	bgt.n	800c2c8 <__multadd+0x74>
 800c294:	6861      	ldr	r1, [r4, #4]
 800c296:	4638      	mov	r0, r7
 800c298:	3101      	adds	r1, #1
 800c29a:	f7ff ff79 	bl	800c190 <_Balloc>
 800c29e:	4680      	mov	r8, r0
 800c2a0:	b928      	cbnz	r0, 800c2ae <__multadd+0x5a>
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	4b0c      	ldr	r3, [pc, #48]	; (800c2d8 <__multadd+0x84>)
 800c2a6:	480d      	ldr	r0, [pc, #52]	; (800c2dc <__multadd+0x88>)
 800c2a8:	21ba      	movs	r1, #186	; 0xba
 800c2aa:	f000 fbb9 	bl	800ca20 <__assert_func>
 800c2ae:	6922      	ldr	r2, [r4, #16]
 800c2b0:	3202      	adds	r2, #2
 800c2b2:	f104 010c 	add.w	r1, r4, #12
 800c2b6:	0092      	lsls	r2, r2, #2
 800c2b8:	300c      	adds	r0, #12
 800c2ba:	f7fe ffce 	bl	800b25a <memcpy>
 800c2be:	4621      	mov	r1, r4
 800c2c0:	4638      	mov	r0, r7
 800c2c2:	f7ff ffa5 	bl	800c210 <_Bfree>
 800c2c6:	4644      	mov	r4, r8
 800c2c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c2cc:	3501      	adds	r5, #1
 800c2ce:	615e      	str	r6, [r3, #20]
 800c2d0:	6125      	str	r5, [r4, #16]
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2d8:	0800d40d 	.word	0x0800d40d
 800c2dc:	0800d41e 	.word	0x0800d41e

0800c2e0 <__hi0bits>:
 800c2e0:	0c03      	lsrs	r3, r0, #16
 800c2e2:	041b      	lsls	r3, r3, #16
 800c2e4:	b9d3      	cbnz	r3, 800c31c <__hi0bits+0x3c>
 800c2e6:	0400      	lsls	r0, r0, #16
 800c2e8:	2310      	movs	r3, #16
 800c2ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c2ee:	bf04      	itt	eq
 800c2f0:	0200      	lsleq	r0, r0, #8
 800c2f2:	3308      	addeq	r3, #8
 800c2f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c2f8:	bf04      	itt	eq
 800c2fa:	0100      	lsleq	r0, r0, #4
 800c2fc:	3304      	addeq	r3, #4
 800c2fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c302:	bf04      	itt	eq
 800c304:	0080      	lsleq	r0, r0, #2
 800c306:	3302      	addeq	r3, #2
 800c308:	2800      	cmp	r0, #0
 800c30a:	db05      	blt.n	800c318 <__hi0bits+0x38>
 800c30c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c310:	f103 0301 	add.w	r3, r3, #1
 800c314:	bf08      	it	eq
 800c316:	2320      	moveq	r3, #32
 800c318:	4618      	mov	r0, r3
 800c31a:	4770      	bx	lr
 800c31c:	2300      	movs	r3, #0
 800c31e:	e7e4      	b.n	800c2ea <__hi0bits+0xa>

0800c320 <__lo0bits>:
 800c320:	6803      	ldr	r3, [r0, #0]
 800c322:	f013 0207 	ands.w	r2, r3, #7
 800c326:	d00c      	beq.n	800c342 <__lo0bits+0x22>
 800c328:	07d9      	lsls	r1, r3, #31
 800c32a:	d422      	bmi.n	800c372 <__lo0bits+0x52>
 800c32c:	079a      	lsls	r2, r3, #30
 800c32e:	bf49      	itett	mi
 800c330:	085b      	lsrmi	r3, r3, #1
 800c332:	089b      	lsrpl	r3, r3, #2
 800c334:	6003      	strmi	r3, [r0, #0]
 800c336:	2201      	movmi	r2, #1
 800c338:	bf5c      	itt	pl
 800c33a:	6003      	strpl	r3, [r0, #0]
 800c33c:	2202      	movpl	r2, #2
 800c33e:	4610      	mov	r0, r2
 800c340:	4770      	bx	lr
 800c342:	b299      	uxth	r1, r3
 800c344:	b909      	cbnz	r1, 800c34a <__lo0bits+0x2a>
 800c346:	0c1b      	lsrs	r3, r3, #16
 800c348:	2210      	movs	r2, #16
 800c34a:	b2d9      	uxtb	r1, r3
 800c34c:	b909      	cbnz	r1, 800c352 <__lo0bits+0x32>
 800c34e:	3208      	adds	r2, #8
 800c350:	0a1b      	lsrs	r3, r3, #8
 800c352:	0719      	lsls	r1, r3, #28
 800c354:	bf04      	itt	eq
 800c356:	091b      	lsreq	r3, r3, #4
 800c358:	3204      	addeq	r2, #4
 800c35a:	0799      	lsls	r1, r3, #30
 800c35c:	bf04      	itt	eq
 800c35e:	089b      	lsreq	r3, r3, #2
 800c360:	3202      	addeq	r2, #2
 800c362:	07d9      	lsls	r1, r3, #31
 800c364:	d403      	bmi.n	800c36e <__lo0bits+0x4e>
 800c366:	085b      	lsrs	r3, r3, #1
 800c368:	f102 0201 	add.w	r2, r2, #1
 800c36c:	d003      	beq.n	800c376 <__lo0bits+0x56>
 800c36e:	6003      	str	r3, [r0, #0]
 800c370:	e7e5      	b.n	800c33e <__lo0bits+0x1e>
 800c372:	2200      	movs	r2, #0
 800c374:	e7e3      	b.n	800c33e <__lo0bits+0x1e>
 800c376:	2220      	movs	r2, #32
 800c378:	e7e1      	b.n	800c33e <__lo0bits+0x1e>
	...

0800c37c <__i2b>:
 800c37c:	b510      	push	{r4, lr}
 800c37e:	460c      	mov	r4, r1
 800c380:	2101      	movs	r1, #1
 800c382:	f7ff ff05 	bl	800c190 <_Balloc>
 800c386:	4602      	mov	r2, r0
 800c388:	b928      	cbnz	r0, 800c396 <__i2b+0x1a>
 800c38a:	4b05      	ldr	r3, [pc, #20]	; (800c3a0 <__i2b+0x24>)
 800c38c:	4805      	ldr	r0, [pc, #20]	; (800c3a4 <__i2b+0x28>)
 800c38e:	f240 1145 	movw	r1, #325	; 0x145
 800c392:	f000 fb45 	bl	800ca20 <__assert_func>
 800c396:	2301      	movs	r3, #1
 800c398:	6144      	str	r4, [r0, #20]
 800c39a:	6103      	str	r3, [r0, #16]
 800c39c:	bd10      	pop	{r4, pc}
 800c39e:	bf00      	nop
 800c3a0:	0800d40d 	.word	0x0800d40d
 800c3a4:	0800d41e 	.word	0x0800d41e

0800c3a8 <__multiply>:
 800c3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ac:	4691      	mov	r9, r2
 800c3ae:	690a      	ldr	r2, [r1, #16]
 800c3b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	bfb8      	it	lt
 800c3b8:	460b      	movlt	r3, r1
 800c3ba:	460c      	mov	r4, r1
 800c3bc:	bfbc      	itt	lt
 800c3be:	464c      	movlt	r4, r9
 800c3c0:	4699      	movlt	r9, r3
 800c3c2:	6927      	ldr	r7, [r4, #16]
 800c3c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c3c8:	68a3      	ldr	r3, [r4, #8]
 800c3ca:	6861      	ldr	r1, [r4, #4]
 800c3cc:	eb07 060a 	add.w	r6, r7, sl
 800c3d0:	42b3      	cmp	r3, r6
 800c3d2:	b085      	sub	sp, #20
 800c3d4:	bfb8      	it	lt
 800c3d6:	3101      	addlt	r1, #1
 800c3d8:	f7ff feda 	bl	800c190 <_Balloc>
 800c3dc:	b930      	cbnz	r0, 800c3ec <__multiply+0x44>
 800c3de:	4602      	mov	r2, r0
 800c3e0:	4b44      	ldr	r3, [pc, #272]	; (800c4f4 <__multiply+0x14c>)
 800c3e2:	4845      	ldr	r0, [pc, #276]	; (800c4f8 <__multiply+0x150>)
 800c3e4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c3e8:	f000 fb1a 	bl	800ca20 <__assert_func>
 800c3ec:	f100 0514 	add.w	r5, r0, #20
 800c3f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c3f4:	462b      	mov	r3, r5
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	4543      	cmp	r3, r8
 800c3fa:	d321      	bcc.n	800c440 <__multiply+0x98>
 800c3fc:	f104 0314 	add.w	r3, r4, #20
 800c400:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c404:	f109 0314 	add.w	r3, r9, #20
 800c408:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c40c:	9202      	str	r2, [sp, #8]
 800c40e:	1b3a      	subs	r2, r7, r4
 800c410:	3a15      	subs	r2, #21
 800c412:	f022 0203 	bic.w	r2, r2, #3
 800c416:	3204      	adds	r2, #4
 800c418:	f104 0115 	add.w	r1, r4, #21
 800c41c:	428f      	cmp	r7, r1
 800c41e:	bf38      	it	cc
 800c420:	2204      	movcc	r2, #4
 800c422:	9201      	str	r2, [sp, #4]
 800c424:	9a02      	ldr	r2, [sp, #8]
 800c426:	9303      	str	r3, [sp, #12]
 800c428:	429a      	cmp	r2, r3
 800c42a:	d80c      	bhi.n	800c446 <__multiply+0x9e>
 800c42c:	2e00      	cmp	r6, #0
 800c42e:	dd03      	ble.n	800c438 <__multiply+0x90>
 800c430:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c434:	2b00      	cmp	r3, #0
 800c436:	d05b      	beq.n	800c4f0 <__multiply+0x148>
 800c438:	6106      	str	r6, [r0, #16]
 800c43a:	b005      	add	sp, #20
 800c43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c440:	f843 2b04 	str.w	r2, [r3], #4
 800c444:	e7d8      	b.n	800c3f8 <__multiply+0x50>
 800c446:	f8b3 a000 	ldrh.w	sl, [r3]
 800c44a:	f1ba 0f00 	cmp.w	sl, #0
 800c44e:	d024      	beq.n	800c49a <__multiply+0xf2>
 800c450:	f104 0e14 	add.w	lr, r4, #20
 800c454:	46a9      	mov	r9, r5
 800c456:	f04f 0c00 	mov.w	ip, #0
 800c45a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c45e:	f8d9 1000 	ldr.w	r1, [r9]
 800c462:	fa1f fb82 	uxth.w	fp, r2
 800c466:	b289      	uxth	r1, r1
 800c468:	fb0a 110b 	mla	r1, sl, fp, r1
 800c46c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c470:	f8d9 2000 	ldr.w	r2, [r9]
 800c474:	4461      	add	r1, ip
 800c476:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c47a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c47e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c482:	b289      	uxth	r1, r1
 800c484:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c488:	4577      	cmp	r7, lr
 800c48a:	f849 1b04 	str.w	r1, [r9], #4
 800c48e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c492:	d8e2      	bhi.n	800c45a <__multiply+0xb2>
 800c494:	9a01      	ldr	r2, [sp, #4]
 800c496:	f845 c002 	str.w	ip, [r5, r2]
 800c49a:	9a03      	ldr	r2, [sp, #12]
 800c49c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c4a0:	3304      	adds	r3, #4
 800c4a2:	f1b9 0f00 	cmp.w	r9, #0
 800c4a6:	d021      	beq.n	800c4ec <__multiply+0x144>
 800c4a8:	6829      	ldr	r1, [r5, #0]
 800c4aa:	f104 0c14 	add.w	ip, r4, #20
 800c4ae:	46ae      	mov	lr, r5
 800c4b0:	f04f 0a00 	mov.w	sl, #0
 800c4b4:	f8bc b000 	ldrh.w	fp, [ip]
 800c4b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c4bc:	fb09 220b 	mla	r2, r9, fp, r2
 800c4c0:	4452      	add	r2, sl
 800c4c2:	b289      	uxth	r1, r1
 800c4c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c4c8:	f84e 1b04 	str.w	r1, [lr], #4
 800c4cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c4d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c4d4:	f8be 1000 	ldrh.w	r1, [lr]
 800c4d8:	fb09 110a 	mla	r1, r9, sl, r1
 800c4dc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c4e0:	4567      	cmp	r7, ip
 800c4e2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c4e6:	d8e5      	bhi.n	800c4b4 <__multiply+0x10c>
 800c4e8:	9a01      	ldr	r2, [sp, #4]
 800c4ea:	50a9      	str	r1, [r5, r2]
 800c4ec:	3504      	adds	r5, #4
 800c4ee:	e799      	b.n	800c424 <__multiply+0x7c>
 800c4f0:	3e01      	subs	r6, #1
 800c4f2:	e79b      	b.n	800c42c <__multiply+0x84>
 800c4f4:	0800d40d 	.word	0x0800d40d
 800c4f8:	0800d41e 	.word	0x0800d41e

0800c4fc <__pow5mult>:
 800c4fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c500:	4615      	mov	r5, r2
 800c502:	f012 0203 	ands.w	r2, r2, #3
 800c506:	4606      	mov	r6, r0
 800c508:	460f      	mov	r7, r1
 800c50a:	d007      	beq.n	800c51c <__pow5mult+0x20>
 800c50c:	4c25      	ldr	r4, [pc, #148]	; (800c5a4 <__pow5mult+0xa8>)
 800c50e:	3a01      	subs	r2, #1
 800c510:	2300      	movs	r3, #0
 800c512:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c516:	f7ff fe9d 	bl	800c254 <__multadd>
 800c51a:	4607      	mov	r7, r0
 800c51c:	10ad      	asrs	r5, r5, #2
 800c51e:	d03d      	beq.n	800c59c <__pow5mult+0xa0>
 800c520:	69f4      	ldr	r4, [r6, #28]
 800c522:	b97c      	cbnz	r4, 800c544 <__pow5mult+0x48>
 800c524:	2010      	movs	r0, #16
 800c526:	f7ff fd6d 	bl	800c004 <malloc>
 800c52a:	4602      	mov	r2, r0
 800c52c:	61f0      	str	r0, [r6, #28]
 800c52e:	b928      	cbnz	r0, 800c53c <__pow5mult+0x40>
 800c530:	4b1d      	ldr	r3, [pc, #116]	; (800c5a8 <__pow5mult+0xac>)
 800c532:	481e      	ldr	r0, [pc, #120]	; (800c5ac <__pow5mult+0xb0>)
 800c534:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c538:	f000 fa72 	bl	800ca20 <__assert_func>
 800c53c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c540:	6004      	str	r4, [r0, #0]
 800c542:	60c4      	str	r4, [r0, #12]
 800c544:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c548:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c54c:	b94c      	cbnz	r4, 800c562 <__pow5mult+0x66>
 800c54e:	f240 2171 	movw	r1, #625	; 0x271
 800c552:	4630      	mov	r0, r6
 800c554:	f7ff ff12 	bl	800c37c <__i2b>
 800c558:	2300      	movs	r3, #0
 800c55a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c55e:	4604      	mov	r4, r0
 800c560:	6003      	str	r3, [r0, #0]
 800c562:	f04f 0900 	mov.w	r9, #0
 800c566:	07eb      	lsls	r3, r5, #31
 800c568:	d50a      	bpl.n	800c580 <__pow5mult+0x84>
 800c56a:	4639      	mov	r1, r7
 800c56c:	4622      	mov	r2, r4
 800c56e:	4630      	mov	r0, r6
 800c570:	f7ff ff1a 	bl	800c3a8 <__multiply>
 800c574:	4639      	mov	r1, r7
 800c576:	4680      	mov	r8, r0
 800c578:	4630      	mov	r0, r6
 800c57a:	f7ff fe49 	bl	800c210 <_Bfree>
 800c57e:	4647      	mov	r7, r8
 800c580:	106d      	asrs	r5, r5, #1
 800c582:	d00b      	beq.n	800c59c <__pow5mult+0xa0>
 800c584:	6820      	ldr	r0, [r4, #0]
 800c586:	b938      	cbnz	r0, 800c598 <__pow5mult+0x9c>
 800c588:	4622      	mov	r2, r4
 800c58a:	4621      	mov	r1, r4
 800c58c:	4630      	mov	r0, r6
 800c58e:	f7ff ff0b 	bl	800c3a8 <__multiply>
 800c592:	6020      	str	r0, [r4, #0]
 800c594:	f8c0 9000 	str.w	r9, [r0]
 800c598:	4604      	mov	r4, r0
 800c59a:	e7e4      	b.n	800c566 <__pow5mult+0x6a>
 800c59c:	4638      	mov	r0, r7
 800c59e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5a2:	bf00      	nop
 800c5a4:	0800d568 	.word	0x0800d568
 800c5a8:	0800d39e 	.word	0x0800d39e
 800c5ac:	0800d41e 	.word	0x0800d41e

0800c5b0 <__lshift>:
 800c5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5b4:	460c      	mov	r4, r1
 800c5b6:	6849      	ldr	r1, [r1, #4]
 800c5b8:	6923      	ldr	r3, [r4, #16]
 800c5ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c5be:	68a3      	ldr	r3, [r4, #8]
 800c5c0:	4607      	mov	r7, r0
 800c5c2:	4691      	mov	r9, r2
 800c5c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c5c8:	f108 0601 	add.w	r6, r8, #1
 800c5cc:	42b3      	cmp	r3, r6
 800c5ce:	db0b      	blt.n	800c5e8 <__lshift+0x38>
 800c5d0:	4638      	mov	r0, r7
 800c5d2:	f7ff fddd 	bl	800c190 <_Balloc>
 800c5d6:	4605      	mov	r5, r0
 800c5d8:	b948      	cbnz	r0, 800c5ee <__lshift+0x3e>
 800c5da:	4602      	mov	r2, r0
 800c5dc:	4b28      	ldr	r3, [pc, #160]	; (800c680 <__lshift+0xd0>)
 800c5de:	4829      	ldr	r0, [pc, #164]	; (800c684 <__lshift+0xd4>)
 800c5e0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c5e4:	f000 fa1c 	bl	800ca20 <__assert_func>
 800c5e8:	3101      	adds	r1, #1
 800c5ea:	005b      	lsls	r3, r3, #1
 800c5ec:	e7ee      	b.n	800c5cc <__lshift+0x1c>
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	f100 0114 	add.w	r1, r0, #20
 800c5f4:	f100 0210 	add.w	r2, r0, #16
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	4553      	cmp	r3, sl
 800c5fc:	db33      	blt.n	800c666 <__lshift+0xb6>
 800c5fe:	6920      	ldr	r0, [r4, #16]
 800c600:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c604:	f104 0314 	add.w	r3, r4, #20
 800c608:	f019 091f 	ands.w	r9, r9, #31
 800c60c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c610:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c614:	d02b      	beq.n	800c66e <__lshift+0xbe>
 800c616:	f1c9 0e20 	rsb	lr, r9, #32
 800c61a:	468a      	mov	sl, r1
 800c61c:	2200      	movs	r2, #0
 800c61e:	6818      	ldr	r0, [r3, #0]
 800c620:	fa00 f009 	lsl.w	r0, r0, r9
 800c624:	4310      	orrs	r0, r2
 800c626:	f84a 0b04 	str.w	r0, [sl], #4
 800c62a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c62e:	459c      	cmp	ip, r3
 800c630:	fa22 f20e 	lsr.w	r2, r2, lr
 800c634:	d8f3      	bhi.n	800c61e <__lshift+0x6e>
 800c636:	ebac 0304 	sub.w	r3, ip, r4
 800c63a:	3b15      	subs	r3, #21
 800c63c:	f023 0303 	bic.w	r3, r3, #3
 800c640:	3304      	adds	r3, #4
 800c642:	f104 0015 	add.w	r0, r4, #21
 800c646:	4584      	cmp	ip, r0
 800c648:	bf38      	it	cc
 800c64a:	2304      	movcc	r3, #4
 800c64c:	50ca      	str	r2, [r1, r3]
 800c64e:	b10a      	cbz	r2, 800c654 <__lshift+0xa4>
 800c650:	f108 0602 	add.w	r6, r8, #2
 800c654:	3e01      	subs	r6, #1
 800c656:	4638      	mov	r0, r7
 800c658:	612e      	str	r6, [r5, #16]
 800c65a:	4621      	mov	r1, r4
 800c65c:	f7ff fdd8 	bl	800c210 <_Bfree>
 800c660:	4628      	mov	r0, r5
 800c662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c666:	f842 0f04 	str.w	r0, [r2, #4]!
 800c66a:	3301      	adds	r3, #1
 800c66c:	e7c5      	b.n	800c5fa <__lshift+0x4a>
 800c66e:	3904      	subs	r1, #4
 800c670:	f853 2b04 	ldr.w	r2, [r3], #4
 800c674:	f841 2f04 	str.w	r2, [r1, #4]!
 800c678:	459c      	cmp	ip, r3
 800c67a:	d8f9      	bhi.n	800c670 <__lshift+0xc0>
 800c67c:	e7ea      	b.n	800c654 <__lshift+0xa4>
 800c67e:	bf00      	nop
 800c680:	0800d40d 	.word	0x0800d40d
 800c684:	0800d41e 	.word	0x0800d41e

0800c688 <__mcmp>:
 800c688:	b530      	push	{r4, r5, lr}
 800c68a:	6902      	ldr	r2, [r0, #16]
 800c68c:	690c      	ldr	r4, [r1, #16]
 800c68e:	1b12      	subs	r2, r2, r4
 800c690:	d10e      	bne.n	800c6b0 <__mcmp+0x28>
 800c692:	f100 0314 	add.w	r3, r0, #20
 800c696:	3114      	adds	r1, #20
 800c698:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c69c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c6a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c6a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c6a8:	42a5      	cmp	r5, r4
 800c6aa:	d003      	beq.n	800c6b4 <__mcmp+0x2c>
 800c6ac:	d305      	bcc.n	800c6ba <__mcmp+0x32>
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	4610      	mov	r0, r2
 800c6b2:	bd30      	pop	{r4, r5, pc}
 800c6b4:	4283      	cmp	r3, r0
 800c6b6:	d3f3      	bcc.n	800c6a0 <__mcmp+0x18>
 800c6b8:	e7fa      	b.n	800c6b0 <__mcmp+0x28>
 800c6ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c6be:	e7f7      	b.n	800c6b0 <__mcmp+0x28>

0800c6c0 <__mdiff>:
 800c6c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c4:	460c      	mov	r4, r1
 800c6c6:	4606      	mov	r6, r0
 800c6c8:	4611      	mov	r1, r2
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	4690      	mov	r8, r2
 800c6ce:	f7ff ffdb 	bl	800c688 <__mcmp>
 800c6d2:	1e05      	subs	r5, r0, #0
 800c6d4:	d110      	bne.n	800c6f8 <__mdiff+0x38>
 800c6d6:	4629      	mov	r1, r5
 800c6d8:	4630      	mov	r0, r6
 800c6da:	f7ff fd59 	bl	800c190 <_Balloc>
 800c6de:	b930      	cbnz	r0, 800c6ee <__mdiff+0x2e>
 800c6e0:	4b3a      	ldr	r3, [pc, #232]	; (800c7cc <__mdiff+0x10c>)
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	f240 2137 	movw	r1, #567	; 0x237
 800c6e8:	4839      	ldr	r0, [pc, #228]	; (800c7d0 <__mdiff+0x110>)
 800c6ea:	f000 f999 	bl	800ca20 <__assert_func>
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c6f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6f8:	bfa4      	itt	ge
 800c6fa:	4643      	movge	r3, r8
 800c6fc:	46a0      	movge	r8, r4
 800c6fe:	4630      	mov	r0, r6
 800c700:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c704:	bfa6      	itte	ge
 800c706:	461c      	movge	r4, r3
 800c708:	2500      	movge	r5, #0
 800c70a:	2501      	movlt	r5, #1
 800c70c:	f7ff fd40 	bl	800c190 <_Balloc>
 800c710:	b920      	cbnz	r0, 800c71c <__mdiff+0x5c>
 800c712:	4b2e      	ldr	r3, [pc, #184]	; (800c7cc <__mdiff+0x10c>)
 800c714:	4602      	mov	r2, r0
 800c716:	f240 2145 	movw	r1, #581	; 0x245
 800c71a:	e7e5      	b.n	800c6e8 <__mdiff+0x28>
 800c71c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c720:	6926      	ldr	r6, [r4, #16]
 800c722:	60c5      	str	r5, [r0, #12]
 800c724:	f104 0914 	add.w	r9, r4, #20
 800c728:	f108 0514 	add.w	r5, r8, #20
 800c72c:	f100 0e14 	add.w	lr, r0, #20
 800c730:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c734:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c738:	f108 0210 	add.w	r2, r8, #16
 800c73c:	46f2      	mov	sl, lr
 800c73e:	2100      	movs	r1, #0
 800c740:	f859 3b04 	ldr.w	r3, [r9], #4
 800c744:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c748:	fa11 f88b 	uxtah	r8, r1, fp
 800c74c:	b299      	uxth	r1, r3
 800c74e:	0c1b      	lsrs	r3, r3, #16
 800c750:	eba8 0801 	sub.w	r8, r8, r1
 800c754:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c758:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c75c:	fa1f f888 	uxth.w	r8, r8
 800c760:	1419      	asrs	r1, r3, #16
 800c762:	454e      	cmp	r6, r9
 800c764:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c768:	f84a 3b04 	str.w	r3, [sl], #4
 800c76c:	d8e8      	bhi.n	800c740 <__mdiff+0x80>
 800c76e:	1b33      	subs	r3, r6, r4
 800c770:	3b15      	subs	r3, #21
 800c772:	f023 0303 	bic.w	r3, r3, #3
 800c776:	3304      	adds	r3, #4
 800c778:	3415      	adds	r4, #21
 800c77a:	42a6      	cmp	r6, r4
 800c77c:	bf38      	it	cc
 800c77e:	2304      	movcc	r3, #4
 800c780:	441d      	add	r5, r3
 800c782:	4473      	add	r3, lr
 800c784:	469e      	mov	lr, r3
 800c786:	462e      	mov	r6, r5
 800c788:	4566      	cmp	r6, ip
 800c78a:	d30e      	bcc.n	800c7aa <__mdiff+0xea>
 800c78c:	f10c 0203 	add.w	r2, ip, #3
 800c790:	1b52      	subs	r2, r2, r5
 800c792:	f022 0203 	bic.w	r2, r2, #3
 800c796:	3d03      	subs	r5, #3
 800c798:	45ac      	cmp	ip, r5
 800c79a:	bf38      	it	cc
 800c79c:	2200      	movcc	r2, #0
 800c79e:	4413      	add	r3, r2
 800c7a0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c7a4:	b17a      	cbz	r2, 800c7c6 <__mdiff+0x106>
 800c7a6:	6107      	str	r7, [r0, #16]
 800c7a8:	e7a4      	b.n	800c6f4 <__mdiff+0x34>
 800c7aa:	f856 8b04 	ldr.w	r8, [r6], #4
 800c7ae:	fa11 f288 	uxtah	r2, r1, r8
 800c7b2:	1414      	asrs	r4, r2, #16
 800c7b4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c7b8:	b292      	uxth	r2, r2
 800c7ba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c7be:	f84e 2b04 	str.w	r2, [lr], #4
 800c7c2:	1421      	asrs	r1, r4, #16
 800c7c4:	e7e0      	b.n	800c788 <__mdiff+0xc8>
 800c7c6:	3f01      	subs	r7, #1
 800c7c8:	e7ea      	b.n	800c7a0 <__mdiff+0xe0>
 800c7ca:	bf00      	nop
 800c7cc:	0800d40d 	.word	0x0800d40d
 800c7d0:	0800d41e 	.word	0x0800d41e

0800c7d4 <__d2b>:
 800c7d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c7d8:	460f      	mov	r7, r1
 800c7da:	2101      	movs	r1, #1
 800c7dc:	ec59 8b10 	vmov	r8, r9, d0
 800c7e0:	4616      	mov	r6, r2
 800c7e2:	f7ff fcd5 	bl	800c190 <_Balloc>
 800c7e6:	4604      	mov	r4, r0
 800c7e8:	b930      	cbnz	r0, 800c7f8 <__d2b+0x24>
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	4b24      	ldr	r3, [pc, #144]	; (800c880 <__d2b+0xac>)
 800c7ee:	4825      	ldr	r0, [pc, #148]	; (800c884 <__d2b+0xb0>)
 800c7f0:	f240 310f 	movw	r1, #783	; 0x30f
 800c7f4:	f000 f914 	bl	800ca20 <__assert_func>
 800c7f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c7fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c800:	bb2d      	cbnz	r5, 800c84e <__d2b+0x7a>
 800c802:	9301      	str	r3, [sp, #4]
 800c804:	f1b8 0300 	subs.w	r3, r8, #0
 800c808:	d026      	beq.n	800c858 <__d2b+0x84>
 800c80a:	4668      	mov	r0, sp
 800c80c:	9300      	str	r3, [sp, #0]
 800c80e:	f7ff fd87 	bl	800c320 <__lo0bits>
 800c812:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c816:	b1e8      	cbz	r0, 800c854 <__d2b+0x80>
 800c818:	f1c0 0320 	rsb	r3, r0, #32
 800c81c:	fa02 f303 	lsl.w	r3, r2, r3
 800c820:	430b      	orrs	r3, r1
 800c822:	40c2      	lsrs	r2, r0
 800c824:	6163      	str	r3, [r4, #20]
 800c826:	9201      	str	r2, [sp, #4]
 800c828:	9b01      	ldr	r3, [sp, #4]
 800c82a:	61a3      	str	r3, [r4, #24]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	bf14      	ite	ne
 800c830:	2202      	movne	r2, #2
 800c832:	2201      	moveq	r2, #1
 800c834:	6122      	str	r2, [r4, #16]
 800c836:	b1bd      	cbz	r5, 800c868 <__d2b+0x94>
 800c838:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c83c:	4405      	add	r5, r0
 800c83e:	603d      	str	r5, [r7, #0]
 800c840:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c844:	6030      	str	r0, [r6, #0]
 800c846:	4620      	mov	r0, r4
 800c848:	b003      	add	sp, #12
 800c84a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c84e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c852:	e7d6      	b.n	800c802 <__d2b+0x2e>
 800c854:	6161      	str	r1, [r4, #20]
 800c856:	e7e7      	b.n	800c828 <__d2b+0x54>
 800c858:	a801      	add	r0, sp, #4
 800c85a:	f7ff fd61 	bl	800c320 <__lo0bits>
 800c85e:	9b01      	ldr	r3, [sp, #4]
 800c860:	6163      	str	r3, [r4, #20]
 800c862:	3020      	adds	r0, #32
 800c864:	2201      	movs	r2, #1
 800c866:	e7e5      	b.n	800c834 <__d2b+0x60>
 800c868:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c86c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c870:	6038      	str	r0, [r7, #0]
 800c872:	6918      	ldr	r0, [r3, #16]
 800c874:	f7ff fd34 	bl	800c2e0 <__hi0bits>
 800c878:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c87c:	e7e2      	b.n	800c844 <__d2b+0x70>
 800c87e:	bf00      	nop
 800c880:	0800d40d 	.word	0x0800d40d
 800c884:	0800d41e 	.word	0x0800d41e

0800c888 <__ascii_wctomb>:
 800c888:	b149      	cbz	r1, 800c89e <__ascii_wctomb+0x16>
 800c88a:	2aff      	cmp	r2, #255	; 0xff
 800c88c:	bf85      	ittet	hi
 800c88e:	238a      	movhi	r3, #138	; 0x8a
 800c890:	6003      	strhi	r3, [r0, #0]
 800c892:	700a      	strbls	r2, [r1, #0]
 800c894:	f04f 30ff 	movhi.w	r0, #4294967295
 800c898:	bf98      	it	ls
 800c89a:	2001      	movls	r0, #1
 800c89c:	4770      	bx	lr
 800c89e:	4608      	mov	r0, r1
 800c8a0:	4770      	bx	lr
	...

0800c8a4 <__sflush_r>:
 800c8a4:	898a      	ldrh	r2, [r1, #12]
 800c8a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8aa:	4605      	mov	r5, r0
 800c8ac:	0710      	lsls	r0, r2, #28
 800c8ae:	460c      	mov	r4, r1
 800c8b0:	d458      	bmi.n	800c964 <__sflush_r+0xc0>
 800c8b2:	684b      	ldr	r3, [r1, #4]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	dc05      	bgt.n	800c8c4 <__sflush_r+0x20>
 800c8b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	dc02      	bgt.n	800c8c4 <__sflush_r+0x20>
 800c8be:	2000      	movs	r0, #0
 800c8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8c6:	2e00      	cmp	r6, #0
 800c8c8:	d0f9      	beq.n	800c8be <__sflush_r+0x1a>
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c8d0:	682f      	ldr	r7, [r5, #0]
 800c8d2:	6a21      	ldr	r1, [r4, #32]
 800c8d4:	602b      	str	r3, [r5, #0]
 800c8d6:	d032      	beq.n	800c93e <__sflush_r+0x9a>
 800c8d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c8da:	89a3      	ldrh	r3, [r4, #12]
 800c8dc:	075a      	lsls	r2, r3, #29
 800c8de:	d505      	bpl.n	800c8ec <__sflush_r+0x48>
 800c8e0:	6863      	ldr	r3, [r4, #4]
 800c8e2:	1ac0      	subs	r0, r0, r3
 800c8e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c8e6:	b10b      	cbz	r3, 800c8ec <__sflush_r+0x48>
 800c8e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c8ea:	1ac0      	subs	r0, r0, r3
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	4602      	mov	r2, r0
 800c8f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8f2:	6a21      	ldr	r1, [r4, #32]
 800c8f4:	4628      	mov	r0, r5
 800c8f6:	47b0      	blx	r6
 800c8f8:	1c43      	adds	r3, r0, #1
 800c8fa:	89a3      	ldrh	r3, [r4, #12]
 800c8fc:	d106      	bne.n	800c90c <__sflush_r+0x68>
 800c8fe:	6829      	ldr	r1, [r5, #0]
 800c900:	291d      	cmp	r1, #29
 800c902:	d82b      	bhi.n	800c95c <__sflush_r+0xb8>
 800c904:	4a29      	ldr	r2, [pc, #164]	; (800c9ac <__sflush_r+0x108>)
 800c906:	410a      	asrs	r2, r1
 800c908:	07d6      	lsls	r6, r2, #31
 800c90a:	d427      	bmi.n	800c95c <__sflush_r+0xb8>
 800c90c:	2200      	movs	r2, #0
 800c90e:	6062      	str	r2, [r4, #4]
 800c910:	04d9      	lsls	r1, r3, #19
 800c912:	6922      	ldr	r2, [r4, #16]
 800c914:	6022      	str	r2, [r4, #0]
 800c916:	d504      	bpl.n	800c922 <__sflush_r+0x7e>
 800c918:	1c42      	adds	r2, r0, #1
 800c91a:	d101      	bne.n	800c920 <__sflush_r+0x7c>
 800c91c:	682b      	ldr	r3, [r5, #0]
 800c91e:	b903      	cbnz	r3, 800c922 <__sflush_r+0x7e>
 800c920:	6560      	str	r0, [r4, #84]	; 0x54
 800c922:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c924:	602f      	str	r7, [r5, #0]
 800c926:	2900      	cmp	r1, #0
 800c928:	d0c9      	beq.n	800c8be <__sflush_r+0x1a>
 800c92a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c92e:	4299      	cmp	r1, r3
 800c930:	d002      	beq.n	800c938 <__sflush_r+0x94>
 800c932:	4628      	mov	r0, r5
 800c934:	f7ff fb1a 	bl	800bf6c <_free_r>
 800c938:	2000      	movs	r0, #0
 800c93a:	6360      	str	r0, [r4, #52]	; 0x34
 800c93c:	e7c0      	b.n	800c8c0 <__sflush_r+0x1c>
 800c93e:	2301      	movs	r3, #1
 800c940:	4628      	mov	r0, r5
 800c942:	47b0      	blx	r6
 800c944:	1c41      	adds	r1, r0, #1
 800c946:	d1c8      	bne.n	800c8da <__sflush_r+0x36>
 800c948:	682b      	ldr	r3, [r5, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d0c5      	beq.n	800c8da <__sflush_r+0x36>
 800c94e:	2b1d      	cmp	r3, #29
 800c950:	d001      	beq.n	800c956 <__sflush_r+0xb2>
 800c952:	2b16      	cmp	r3, #22
 800c954:	d101      	bne.n	800c95a <__sflush_r+0xb6>
 800c956:	602f      	str	r7, [r5, #0]
 800c958:	e7b1      	b.n	800c8be <__sflush_r+0x1a>
 800c95a:	89a3      	ldrh	r3, [r4, #12]
 800c95c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c960:	81a3      	strh	r3, [r4, #12]
 800c962:	e7ad      	b.n	800c8c0 <__sflush_r+0x1c>
 800c964:	690f      	ldr	r7, [r1, #16]
 800c966:	2f00      	cmp	r7, #0
 800c968:	d0a9      	beq.n	800c8be <__sflush_r+0x1a>
 800c96a:	0793      	lsls	r3, r2, #30
 800c96c:	680e      	ldr	r6, [r1, #0]
 800c96e:	bf08      	it	eq
 800c970:	694b      	ldreq	r3, [r1, #20]
 800c972:	600f      	str	r7, [r1, #0]
 800c974:	bf18      	it	ne
 800c976:	2300      	movne	r3, #0
 800c978:	eba6 0807 	sub.w	r8, r6, r7
 800c97c:	608b      	str	r3, [r1, #8]
 800c97e:	f1b8 0f00 	cmp.w	r8, #0
 800c982:	dd9c      	ble.n	800c8be <__sflush_r+0x1a>
 800c984:	6a21      	ldr	r1, [r4, #32]
 800c986:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c988:	4643      	mov	r3, r8
 800c98a:	463a      	mov	r2, r7
 800c98c:	4628      	mov	r0, r5
 800c98e:	47b0      	blx	r6
 800c990:	2800      	cmp	r0, #0
 800c992:	dc06      	bgt.n	800c9a2 <__sflush_r+0xfe>
 800c994:	89a3      	ldrh	r3, [r4, #12]
 800c996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c99a:	81a3      	strh	r3, [r4, #12]
 800c99c:	f04f 30ff 	mov.w	r0, #4294967295
 800c9a0:	e78e      	b.n	800c8c0 <__sflush_r+0x1c>
 800c9a2:	4407      	add	r7, r0
 800c9a4:	eba8 0800 	sub.w	r8, r8, r0
 800c9a8:	e7e9      	b.n	800c97e <__sflush_r+0xda>
 800c9aa:	bf00      	nop
 800c9ac:	dfbffffe 	.word	0xdfbffffe

0800c9b0 <_fflush_r>:
 800c9b0:	b538      	push	{r3, r4, r5, lr}
 800c9b2:	690b      	ldr	r3, [r1, #16]
 800c9b4:	4605      	mov	r5, r0
 800c9b6:	460c      	mov	r4, r1
 800c9b8:	b913      	cbnz	r3, 800c9c0 <_fflush_r+0x10>
 800c9ba:	2500      	movs	r5, #0
 800c9bc:	4628      	mov	r0, r5
 800c9be:	bd38      	pop	{r3, r4, r5, pc}
 800c9c0:	b118      	cbz	r0, 800c9ca <_fflush_r+0x1a>
 800c9c2:	6a03      	ldr	r3, [r0, #32]
 800c9c4:	b90b      	cbnz	r3, 800c9ca <_fflush_r+0x1a>
 800c9c6:	f7fe fb51 	bl	800b06c <__sinit>
 800c9ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d0f3      	beq.n	800c9ba <_fflush_r+0xa>
 800c9d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c9d4:	07d0      	lsls	r0, r2, #31
 800c9d6:	d404      	bmi.n	800c9e2 <_fflush_r+0x32>
 800c9d8:	0599      	lsls	r1, r3, #22
 800c9da:	d402      	bmi.n	800c9e2 <_fflush_r+0x32>
 800c9dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9de:	f7fe fc3a 	bl	800b256 <__retarget_lock_acquire_recursive>
 800c9e2:	4628      	mov	r0, r5
 800c9e4:	4621      	mov	r1, r4
 800c9e6:	f7ff ff5d 	bl	800c8a4 <__sflush_r>
 800c9ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9ec:	07da      	lsls	r2, r3, #31
 800c9ee:	4605      	mov	r5, r0
 800c9f0:	d4e4      	bmi.n	800c9bc <_fflush_r+0xc>
 800c9f2:	89a3      	ldrh	r3, [r4, #12]
 800c9f4:	059b      	lsls	r3, r3, #22
 800c9f6:	d4e1      	bmi.n	800c9bc <_fflush_r+0xc>
 800c9f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9fa:	f7fe fc2d 	bl	800b258 <__retarget_lock_release_recursive>
 800c9fe:	e7dd      	b.n	800c9bc <_fflush_r+0xc>

0800ca00 <_sbrk_r>:
 800ca00:	b538      	push	{r3, r4, r5, lr}
 800ca02:	4d06      	ldr	r5, [pc, #24]	; (800ca1c <_sbrk_r+0x1c>)
 800ca04:	2300      	movs	r3, #0
 800ca06:	4604      	mov	r4, r0
 800ca08:	4608      	mov	r0, r1
 800ca0a:	602b      	str	r3, [r5, #0]
 800ca0c:	f000 fb3e 	bl	800d08c <_sbrk>
 800ca10:	1c43      	adds	r3, r0, #1
 800ca12:	d102      	bne.n	800ca1a <_sbrk_r+0x1a>
 800ca14:	682b      	ldr	r3, [r5, #0]
 800ca16:	b103      	cbz	r3, 800ca1a <_sbrk_r+0x1a>
 800ca18:	6023      	str	r3, [r4, #0]
 800ca1a:	bd38      	pop	{r3, r4, r5, pc}
 800ca1c:	20014c88 	.word	0x20014c88

0800ca20 <__assert_func>:
 800ca20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca22:	4614      	mov	r4, r2
 800ca24:	461a      	mov	r2, r3
 800ca26:	4b09      	ldr	r3, [pc, #36]	; (800ca4c <__assert_func+0x2c>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4605      	mov	r5, r0
 800ca2c:	68d8      	ldr	r0, [r3, #12]
 800ca2e:	b14c      	cbz	r4, 800ca44 <__assert_func+0x24>
 800ca30:	4b07      	ldr	r3, [pc, #28]	; (800ca50 <__assert_func+0x30>)
 800ca32:	9100      	str	r1, [sp, #0]
 800ca34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca38:	4906      	ldr	r1, [pc, #24]	; (800ca54 <__assert_func+0x34>)
 800ca3a:	462b      	mov	r3, r5
 800ca3c:	f000 f824 	bl	800ca88 <fiprintf>
 800ca40:	f000 f834 	bl	800caac <abort>
 800ca44:	4b04      	ldr	r3, [pc, #16]	; (800ca58 <__assert_func+0x38>)
 800ca46:	461c      	mov	r4, r3
 800ca48:	e7f3      	b.n	800ca32 <__assert_func+0x12>
 800ca4a:	bf00      	nop
 800ca4c:	200001d8 	.word	0x200001d8
 800ca50:	0800d574 	.word	0x0800d574
 800ca54:	0800d581 	.word	0x0800d581
 800ca58:	0800d5af 	.word	0x0800d5af

0800ca5c <_calloc_r>:
 800ca5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca5e:	fba1 2402 	umull	r2, r4, r1, r2
 800ca62:	b94c      	cbnz	r4, 800ca78 <_calloc_r+0x1c>
 800ca64:	4611      	mov	r1, r2
 800ca66:	9201      	str	r2, [sp, #4]
 800ca68:	f7ff faf4 	bl	800c054 <_malloc_r>
 800ca6c:	9a01      	ldr	r2, [sp, #4]
 800ca6e:	4605      	mov	r5, r0
 800ca70:	b930      	cbnz	r0, 800ca80 <_calloc_r+0x24>
 800ca72:	4628      	mov	r0, r5
 800ca74:	b003      	add	sp, #12
 800ca76:	bd30      	pop	{r4, r5, pc}
 800ca78:	220c      	movs	r2, #12
 800ca7a:	6002      	str	r2, [r0, #0]
 800ca7c:	2500      	movs	r5, #0
 800ca7e:	e7f8      	b.n	800ca72 <_calloc_r+0x16>
 800ca80:	4621      	mov	r1, r4
 800ca82:	f7fe fb7c 	bl	800b17e <memset>
 800ca86:	e7f4      	b.n	800ca72 <_calloc_r+0x16>

0800ca88 <fiprintf>:
 800ca88:	b40e      	push	{r1, r2, r3}
 800ca8a:	b503      	push	{r0, r1, lr}
 800ca8c:	4601      	mov	r1, r0
 800ca8e:	ab03      	add	r3, sp, #12
 800ca90:	4805      	ldr	r0, [pc, #20]	; (800caa8 <fiprintf+0x20>)
 800ca92:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca96:	6800      	ldr	r0, [r0, #0]
 800ca98:	9301      	str	r3, [sp, #4]
 800ca9a:	f000 f837 	bl	800cb0c <_vfiprintf_r>
 800ca9e:	b002      	add	sp, #8
 800caa0:	f85d eb04 	ldr.w	lr, [sp], #4
 800caa4:	b003      	add	sp, #12
 800caa6:	4770      	bx	lr
 800caa8:	200001d8 	.word	0x200001d8

0800caac <abort>:
 800caac:	b508      	push	{r3, lr}
 800caae:	2006      	movs	r0, #6
 800cab0:	f000 fa04 	bl	800cebc <raise>
 800cab4:	2001      	movs	r0, #1
 800cab6:	f7f5 fda7 	bl	8002608 <_exit>

0800caba <__sfputc_r>:
 800caba:	6893      	ldr	r3, [r2, #8]
 800cabc:	3b01      	subs	r3, #1
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	b410      	push	{r4}
 800cac2:	6093      	str	r3, [r2, #8]
 800cac4:	da08      	bge.n	800cad8 <__sfputc_r+0x1e>
 800cac6:	6994      	ldr	r4, [r2, #24]
 800cac8:	42a3      	cmp	r3, r4
 800caca:	db01      	blt.n	800cad0 <__sfputc_r+0x16>
 800cacc:	290a      	cmp	r1, #10
 800cace:	d103      	bne.n	800cad8 <__sfputc_r+0x1e>
 800cad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cad4:	f000 b934 	b.w	800cd40 <__swbuf_r>
 800cad8:	6813      	ldr	r3, [r2, #0]
 800cada:	1c58      	adds	r0, r3, #1
 800cadc:	6010      	str	r0, [r2, #0]
 800cade:	7019      	strb	r1, [r3, #0]
 800cae0:	4608      	mov	r0, r1
 800cae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cae6:	4770      	bx	lr

0800cae8 <__sfputs_r>:
 800cae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caea:	4606      	mov	r6, r0
 800caec:	460f      	mov	r7, r1
 800caee:	4614      	mov	r4, r2
 800caf0:	18d5      	adds	r5, r2, r3
 800caf2:	42ac      	cmp	r4, r5
 800caf4:	d101      	bne.n	800cafa <__sfputs_r+0x12>
 800caf6:	2000      	movs	r0, #0
 800caf8:	e007      	b.n	800cb0a <__sfputs_r+0x22>
 800cafa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cafe:	463a      	mov	r2, r7
 800cb00:	4630      	mov	r0, r6
 800cb02:	f7ff ffda 	bl	800caba <__sfputc_r>
 800cb06:	1c43      	adds	r3, r0, #1
 800cb08:	d1f3      	bne.n	800caf2 <__sfputs_r+0xa>
 800cb0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cb0c <_vfiprintf_r>:
 800cb0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb10:	460d      	mov	r5, r1
 800cb12:	b09d      	sub	sp, #116	; 0x74
 800cb14:	4614      	mov	r4, r2
 800cb16:	4698      	mov	r8, r3
 800cb18:	4606      	mov	r6, r0
 800cb1a:	b118      	cbz	r0, 800cb24 <_vfiprintf_r+0x18>
 800cb1c:	6a03      	ldr	r3, [r0, #32]
 800cb1e:	b90b      	cbnz	r3, 800cb24 <_vfiprintf_r+0x18>
 800cb20:	f7fe faa4 	bl	800b06c <__sinit>
 800cb24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb26:	07d9      	lsls	r1, r3, #31
 800cb28:	d405      	bmi.n	800cb36 <_vfiprintf_r+0x2a>
 800cb2a:	89ab      	ldrh	r3, [r5, #12]
 800cb2c:	059a      	lsls	r2, r3, #22
 800cb2e:	d402      	bmi.n	800cb36 <_vfiprintf_r+0x2a>
 800cb30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb32:	f7fe fb90 	bl	800b256 <__retarget_lock_acquire_recursive>
 800cb36:	89ab      	ldrh	r3, [r5, #12]
 800cb38:	071b      	lsls	r3, r3, #28
 800cb3a:	d501      	bpl.n	800cb40 <_vfiprintf_r+0x34>
 800cb3c:	692b      	ldr	r3, [r5, #16]
 800cb3e:	b99b      	cbnz	r3, 800cb68 <_vfiprintf_r+0x5c>
 800cb40:	4629      	mov	r1, r5
 800cb42:	4630      	mov	r0, r6
 800cb44:	f000 f93a 	bl	800cdbc <__swsetup_r>
 800cb48:	b170      	cbz	r0, 800cb68 <_vfiprintf_r+0x5c>
 800cb4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb4c:	07dc      	lsls	r4, r3, #31
 800cb4e:	d504      	bpl.n	800cb5a <_vfiprintf_r+0x4e>
 800cb50:	f04f 30ff 	mov.w	r0, #4294967295
 800cb54:	b01d      	add	sp, #116	; 0x74
 800cb56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb5a:	89ab      	ldrh	r3, [r5, #12]
 800cb5c:	0598      	lsls	r0, r3, #22
 800cb5e:	d4f7      	bmi.n	800cb50 <_vfiprintf_r+0x44>
 800cb60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb62:	f7fe fb79 	bl	800b258 <__retarget_lock_release_recursive>
 800cb66:	e7f3      	b.n	800cb50 <_vfiprintf_r+0x44>
 800cb68:	2300      	movs	r3, #0
 800cb6a:	9309      	str	r3, [sp, #36]	; 0x24
 800cb6c:	2320      	movs	r3, #32
 800cb6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb72:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb76:	2330      	movs	r3, #48	; 0x30
 800cb78:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cd2c <_vfiprintf_r+0x220>
 800cb7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb80:	f04f 0901 	mov.w	r9, #1
 800cb84:	4623      	mov	r3, r4
 800cb86:	469a      	mov	sl, r3
 800cb88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb8c:	b10a      	cbz	r2, 800cb92 <_vfiprintf_r+0x86>
 800cb8e:	2a25      	cmp	r2, #37	; 0x25
 800cb90:	d1f9      	bne.n	800cb86 <_vfiprintf_r+0x7a>
 800cb92:	ebba 0b04 	subs.w	fp, sl, r4
 800cb96:	d00b      	beq.n	800cbb0 <_vfiprintf_r+0xa4>
 800cb98:	465b      	mov	r3, fp
 800cb9a:	4622      	mov	r2, r4
 800cb9c:	4629      	mov	r1, r5
 800cb9e:	4630      	mov	r0, r6
 800cba0:	f7ff ffa2 	bl	800cae8 <__sfputs_r>
 800cba4:	3001      	adds	r0, #1
 800cba6:	f000 80a9 	beq.w	800ccfc <_vfiprintf_r+0x1f0>
 800cbaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbac:	445a      	add	r2, fp
 800cbae:	9209      	str	r2, [sp, #36]	; 0x24
 800cbb0:	f89a 3000 	ldrb.w	r3, [sl]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	f000 80a1 	beq.w	800ccfc <_vfiprintf_r+0x1f0>
 800cbba:	2300      	movs	r3, #0
 800cbbc:	f04f 32ff 	mov.w	r2, #4294967295
 800cbc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbc4:	f10a 0a01 	add.w	sl, sl, #1
 800cbc8:	9304      	str	r3, [sp, #16]
 800cbca:	9307      	str	r3, [sp, #28]
 800cbcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbd0:	931a      	str	r3, [sp, #104]	; 0x68
 800cbd2:	4654      	mov	r4, sl
 800cbd4:	2205      	movs	r2, #5
 800cbd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbda:	4854      	ldr	r0, [pc, #336]	; (800cd2c <_vfiprintf_r+0x220>)
 800cbdc:	f7f3 fb68 	bl	80002b0 <memchr>
 800cbe0:	9a04      	ldr	r2, [sp, #16]
 800cbe2:	b9d8      	cbnz	r0, 800cc1c <_vfiprintf_r+0x110>
 800cbe4:	06d1      	lsls	r1, r2, #27
 800cbe6:	bf44      	itt	mi
 800cbe8:	2320      	movmi	r3, #32
 800cbea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbee:	0713      	lsls	r3, r2, #28
 800cbf0:	bf44      	itt	mi
 800cbf2:	232b      	movmi	r3, #43	; 0x2b
 800cbf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbf8:	f89a 3000 	ldrb.w	r3, [sl]
 800cbfc:	2b2a      	cmp	r3, #42	; 0x2a
 800cbfe:	d015      	beq.n	800cc2c <_vfiprintf_r+0x120>
 800cc00:	9a07      	ldr	r2, [sp, #28]
 800cc02:	4654      	mov	r4, sl
 800cc04:	2000      	movs	r0, #0
 800cc06:	f04f 0c0a 	mov.w	ip, #10
 800cc0a:	4621      	mov	r1, r4
 800cc0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc10:	3b30      	subs	r3, #48	; 0x30
 800cc12:	2b09      	cmp	r3, #9
 800cc14:	d94d      	bls.n	800ccb2 <_vfiprintf_r+0x1a6>
 800cc16:	b1b0      	cbz	r0, 800cc46 <_vfiprintf_r+0x13a>
 800cc18:	9207      	str	r2, [sp, #28]
 800cc1a:	e014      	b.n	800cc46 <_vfiprintf_r+0x13a>
 800cc1c:	eba0 0308 	sub.w	r3, r0, r8
 800cc20:	fa09 f303 	lsl.w	r3, r9, r3
 800cc24:	4313      	orrs	r3, r2
 800cc26:	9304      	str	r3, [sp, #16]
 800cc28:	46a2      	mov	sl, r4
 800cc2a:	e7d2      	b.n	800cbd2 <_vfiprintf_r+0xc6>
 800cc2c:	9b03      	ldr	r3, [sp, #12]
 800cc2e:	1d19      	adds	r1, r3, #4
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	9103      	str	r1, [sp, #12]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	bfbb      	ittet	lt
 800cc38:	425b      	neglt	r3, r3
 800cc3a:	f042 0202 	orrlt.w	r2, r2, #2
 800cc3e:	9307      	strge	r3, [sp, #28]
 800cc40:	9307      	strlt	r3, [sp, #28]
 800cc42:	bfb8      	it	lt
 800cc44:	9204      	strlt	r2, [sp, #16]
 800cc46:	7823      	ldrb	r3, [r4, #0]
 800cc48:	2b2e      	cmp	r3, #46	; 0x2e
 800cc4a:	d10c      	bne.n	800cc66 <_vfiprintf_r+0x15a>
 800cc4c:	7863      	ldrb	r3, [r4, #1]
 800cc4e:	2b2a      	cmp	r3, #42	; 0x2a
 800cc50:	d134      	bne.n	800ccbc <_vfiprintf_r+0x1b0>
 800cc52:	9b03      	ldr	r3, [sp, #12]
 800cc54:	1d1a      	adds	r2, r3, #4
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	9203      	str	r2, [sp, #12]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	bfb8      	it	lt
 800cc5e:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc62:	3402      	adds	r4, #2
 800cc64:	9305      	str	r3, [sp, #20]
 800cc66:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cd3c <_vfiprintf_r+0x230>
 800cc6a:	7821      	ldrb	r1, [r4, #0]
 800cc6c:	2203      	movs	r2, #3
 800cc6e:	4650      	mov	r0, sl
 800cc70:	f7f3 fb1e 	bl	80002b0 <memchr>
 800cc74:	b138      	cbz	r0, 800cc86 <_vfiprintf_r+0x17a>
 800cc76:	9b04      	ldr	r3, [sp, #16]
 800cc78:	eba0 000a 	sub.w	r0, r0, sl
 800cc7c:	2240      	movs	r2, #64	; 0x40
 800cc7e:	4082      	lsls	r2, r0
 800cc80:	4313      	orrs	r3, r2
 800cc82:	3401      	adds	r4, #1
 800cc84:	9304      	str	r3, [sp, #16]
 800cc86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc8a:	4829      	ldr	r0, [pc, #164]	; (800cd30 <_vfiprintf_r+0x224>)
 800cc8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc90:	2206      	movs	r2, #6
 800cc92:	f7f3 fb0d 	bl	80002b0 <memchr>
 800cc96:	2800      	cmp	r0, #0
 800cc98:	d03f      	beq.n	800cd1a <_vfiprintf_r+0x20e>
 800cc9a:	4b26      	ldr	r3, [pc, #152]	; (800cd34 <_vfiprintf_r+0x228>)
 800cc9c:	bb1b      	cbnz	r3, 800cce6 <_vfiprintf_r+0x1da>
 800cc9e:	9b03      	ldr	r3, [sp, #12]
 800cca0:	3307      	adds	r3, #7
 800cca2:	f023 0307 	bic.w	r3, r3, #7
 800cca6:	3308      	adds	r3, #8
 800cca8:	9303      	str	r3, [sp, #12]
 800ccaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccac:	443b      	add	r3, r7
 800ccae:	9309      	str	r3, [sp, #36]	; 0x24
 800ccb0:	e768      	b.n	800cb84 <_vfiprintf_r+0x78>
 800ccb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800ccb6:	460c      	mov	r4, r1
 800ccb8:	2001      	movs	r0, #1
 800ccba:	e7a6      	b.n	800cc0a <_vfiprintf_r+0xfe>
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	3401      	adds	r4, #1
 800ccc0:	9305      	str	r3, [sp, #20]
 800ccc2:	4619      	mov	r1, r3
 800ccc4:	f04f 0c0a 	mov.w	ip, #10
 800ccc8:	4620      	mov	r0, r4
 800ccca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccce:	3a30      	subs	r2, #48	; 0x30
 800ccd0:	2a09      	cmp	r2, #9
 800ccd2:	d903      	bls.n	800ccdc <_vfiprintf_r+0x1d0>
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d0c6      	beq.n	800cc66 <_vfiprintf_r+0x15a>
 800ccd8:	9105      	str	r1, [sp, #20]
 800ccda:	e7c4      	b.n	800cc66 <_vfiprintf_r+0x15a>
 800ccdc:	fb0c 2101 	mla	r1, ip, r1, r2
 800cce0:	4604      	mov	r4, r0
 800cce2:	2301      	movs	r3, #1
 800cce4:	e7f0      	b.n	800ccc8 <_vfiprintf_r+0x1bc>
 800cce6:	ab03      	add	r3, sp, #12
 800cce8:	9300      	str	r3, [sp, #0]
 800ccea:	462a      	mov	r2, r5
 800ccec:	4b12      	ldr	r3, [pc, #72]	; (800cd38 <_vfiprintf_r+0x22c>)
 800ccee:	a904      	add	r1, sp, #16
 800ccf0:	4630      	mov	r0, r6
 800ccf2:	f7fd fd69 	bl	800a7c8 <_printf_float>
 800ccf6:	4607      	mov	r7, r0
 800ccf8:	1c78      	adds	r0, r7, #1
 800ccfa:	d1d6      	bne.n	800ccaa <_vfiprintf_r+0x19e>
 800ccfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccfe:	07d9      	lsls	r1, r3, #31
 800cd00:	d405      	bmi.n	800cd0e <_vfiprintf_r+0x202>
 800cd02:	89ab      	ldrh	r3, [r5, #12]
 800cd04:	059a      	lsls	r2, r3, #22
 800cd06:	d402      	bmi.n	800cd0e <_vfiprintf_r+0x202>
 800cd08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd0a:	f7fe faa5 	bl	800b258 <__retarget_lock_release_recursive>
 800cd0e:	89ab      	ldrh	r3, [r5, #12]
 800cd10:	065b      	lsls	r3, r3, #25
 800cd12:	f53f af1d 	bmi.w	800cb50 <_vfiprintf_r+0x44>
 800cd16:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd18:	e71c      	b.n	800cb54 <_vfiprintf_r+0x48>
 800cd1a:	ab03      	add	r3, sp, #12
 800cd1c:	9300      	str	r3, [sp, #0]
 800cd1e:	462a      	mov	r2, r5
 800cd20:	4b05      	ldr	r3, [pc, #20]	; (800cd38 <_vfiprintf_r+0x22c>)
 800cd22:	a904      	add	r1, sp, #16
 800cd24:	4630      	mov	r0, r6
 800cd26:	f7fd fff3 	bl	800ad10 <_printf_i>
 800cd2a:	e7e4      	b.n	800ccf6 <_vfiprintf_r+0x1ea>
 800cd2c:	0800d5b0 	.word	0x0800d5b0
 800cd30:	0800d5ba 	.word	0x0800d5ba
 800cd34:	0800a7c9 	.word	0x0800a7c9
 800cd38:	0800cae9 	.word	0x0800cae9
 800cd3c:	0800d5b6 	.word	0x0800d5b6

0800cd40 <__swbuf_r>:
 800cd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd42:	460e      	mov	r6, r1
 800cd44:	4614      	mov	r4, r2
 800cd46:	4605      	mov	r5, r0
 800cd48:	b118      	cbz	r0, 800cd52 <__swbuf_r+0x12>
 800cd4a:	6a03      	ldr	r3, [r0, #32]
 800cd4c:	b90b      	cbnz	r3, 800cd52 <__swbuf_r+0x12>
 800cd4e:	f7fe f98d 	bl	800b06c <__sinit>
 800cd52:	69a3      	ldr	r3, [r4, #24]
 800cd54:	60a3      	str	r3, [r4, #8]
 800cd56:	89a3      	ldrh	r3, [r4, #12]
 800cd58:	071a      	lsls	r2, r3, #28
 800cd5a:	d525      	bpl.n	800cda8 <__swbuf_r+0x68>
 800cd5c:	6923      	ldr	r3, [r4, #16]
 800cd5e:	b31b      	cbz	r3, 800cda8 <__swbuf_r+0x68>
 800cd60:	6823      	ldr	r3, [r4, #0]
 800cd62:	6922      	ldr	r2, [r4, #16]
 800cd64:	1a98      	subs	r0, r3, r2
 800cd66:	6963      	ldr	r3, [r4, #20]
 800cd68:	b2f6      	uxtb	r6, r6
 800cd6a:	4283      	cmp	r3, r0
 800cd6c:	4637      	mov	r7, r6
 800cd6e:	dc04      	bgt.n	800cd7a <__swbuf_r+0x3a>
 800cd70:	4621      	mov	r1, r4
 800cd72:	4628      	mov	r0, r5
 800cd74:	f7ff fe1c 	bl	800c9b0 <_fflush_r>
 800cd78:	b9e0      	cbnz	r0, 800cdb4 <__swbuf_r+0x74>
 800cd7a:	68a3      	ldr	r3, [r4, #8]
 800cd7c:	3b01      	subs	r3, #1
 800cd7e:	60a3      	str	r3, [r4, #8]
 800cd80:	6823      	ldr	r3, [r4, #0]
 800cd82:	1c5a      	adds	r2, r3, #1
 800cd84:	6022      	str	r2, [r4, #0]
 800cd86:	701e      	strb	r6, [r3, #0]
 800cd88:	6962      	ldr	r2, [r4, #20]
 800cd8a:	1c43      	adds	r3, r0, #1
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d004      	beq.n	800cd9a <__swbuf_r+0x5a>
 800cd90:	89a3      	ldrh	r3, [r4, #12]
 800cd92:	07db      	lsls	r3, r3, #31
 800cd94:	d506      	bpl.n	800cda4 <__swbuf_r+0x64>
 800cd96:	2e0a      	cmp	r6, #10
 800cd98:	d104      	bne.n	800cda4 <__swbuf_r+0x64>
 800cd9a:	4621      	mov	r1, r4
 800cd9c:	4628      	mov	r0, r5
 800cd9e:	f7ff fe07 	bl	800c9b0 <_fflush_r>
 800cda2:	b938      	cbnz	r0, 800cdb4 <__swbuf_r+0x74>
 800cda4:	4638      	mov	r0, r7
 800cda6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cda8:	4621      	mov	r1, r4
 800cdaa:	4628      	mov	r0, r5
 800cdac:	f000 f806 	bl	800cdbc <__swsetup_r>
 800cdb0:	2800      	cmp	r0, #0
 800cdb2:	d0d5      	beq.n	800cd60 <__swbuf_r+0x20>
 800cdb4:	f04f 37ff 	mov.w	r7, #4294967295
 800cdb8:	e7f4      	b.n	800cda4 <__swbuf_r+0x64>
	...

0800cdbc <__swsetup_r>:
 800cdbc:	b538      	push	{r3, r4, r5, lr}
 800cdbe:	4b2a      	ldr	r3, [pc, #168]	; (800ce68 <__swsetup_r+0xac>)
 800cdc0:	4605      	mov	r5, r0
 800cdc2:	6818      	ldr	r0, [r3, #0]
 800cdc4:	460c      	mov	r4, r1
 800cdc6:	b118      	cbz	r0, 800cdd0 <__swsetup_r+0x14>
 800cdc8:	6a03      	ldr	r3, [r0, #32]
 800cdca:	b90b      	cbnz	r3, 800cdd0 <__swsetup_r+0x14>
 800cdcc:	f7fe f94e 	bl	800b06c <__sinit>
 800cdd0:	89a3      	ldrh	r3, [r4, #12]
 800cdd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cdd6:	0718      	lsls	r0, r3, #28
 800cdd8:	d422      	bmi.n	800ce20 <__swsetup_r+0x64>
 800cdda:	06d9      	lsls	r1, r3, #27
 800cddc:	d407      	bmi.n	800cdee <__swsetup_r+0x32>
 800cdde:	2309      	movs	r3, #9
 800cde0:	602b      	str	r3, [r5, #0]
 800cde2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cde6:	81a3      	strh	r3, [r4, #12]
 800cde8:	f04f 30ff 	mov.w	r0, #4294967295
 800cdec:	e034      	b.n	800ce58 <__swsetup_r+0x9c>
 800cdee:	0758      	lsls	r0, r3, #29
 800cdf0:	d512      	bpl.n	800ce18 <__swsetup_r+0x5c>
 800cdf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdf4:	b141      	cbz	r1, 800ce08 <__swsetup_r+0x4c>
 800cdf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cdfa:	4299      	cmp	r1, r3
 800cdfc:	d002      	beq.n	800ce04 <__swsetup_r+0x48>
 800cdfe:	4628      	mov	r0, r5
 800ce00:	f7ff f8b4 	bl	800bf6c <_free_r>
 800ce04:	2300      	movs	r3, #0
 800ce06:	6363      	str	r3, [r4, #52]	; 0x34
 800ce08:	89a3      	ldrh	r3, [r4, #12]
 800ce0a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ce0e:	81a3      	strh	r3, [r4, #12]
 800ce10:	2300      	movs	r3, #0
 800ce12:	6063      	str	r3, [r4, #4]
 800ce14:	6923      	ldr	r3, [r4, #16]
 800ce16:	6023      	str	r3, [r4, #0]
 800ce18:	89a3      	ldrh	r3, [r4, #12]
 800ce1a:	f043 0308 	orr.w	r3, r3, #8
 800ce1e:	81a3      	strh	r3, [r4, #12]
 800ce20:	6923      	ldr	r3, [r4, #16]
 800ce22:	b94b      	cbnz	r3, 800ce38 <__swsetup_r+0x7c>
 800ce24:	89a3      	ldrh	r3, [r4, #12]
 800ce26:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ce2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce2e:	d003      	beq.n	800ce38 <__swsetup_r+0x7c>
 800ce30:	4621      	mov	r1, r4
 800ce32:	4628      	mov	r0, r5
 800ce34:	f000 f884 	bl	800cf40 <__smakebuf_r>
 800ce38:	89a0      	ldrh	r0, [r4, #12]
 800ce3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce3e:	f010 0301 	ands.w	r3, r0, #1
 800ce42:	d00a      	beq.n	800ce5a <__swsetup_r+0x9e>
 800ce44:	2300      	movs	r3, #0
 800ce46:	60a3      	str	r3, [r4, #8]
 800ce48:	6963      	ldr	r3, [r4, #20]
 800ce4a:	425b      	negs	r3, r3
 800ce4c:	61a3      	str	r3, [r4, #24]
 800ce4e:	6923      	ldr	r3, [r4, #16]
 800ce50:	b943      	cbnz	r3, 800ce64 <__swsetup_r+0xa8>
 800ce52:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ce56:	d1c4      	bne.n	800cde2 <__swsetup_r+0x26>
 800ce58:	bd38      	pop	{r3, r4, r5, pc}
 800ce5a:	0781      	lsls	r1, r0, #30
 800ce5c:	bf58      	it	pl
 800ce5e:	6963      	ldrpl	r3, [r4, #20]
 800ce60:	60a3      	str	r3, [r4, #8]
 800ce62:	e7f4      	b.n	800ce4e <__swsetup_r+0x92>
 800ce64:	2000      	movs	r0, #0
 800ce66:	e7f7      	b.n	800ce58 <__swsetup_r+0x9c>
 800ce68:	200001d8 	.word	0x200001d8

0800ce6c <_raise_r>:
 800ce6c:	291f      	cmp	r1, #31
 800ce6e:	b538      	push	{r3, r4, r5, lr}
 800ce70:	4604      	mov	r4, r0
 800ce72:	460d      	mov	r5, r1
 800ce74:	d904      	bls.n	800ce80 <_raise_r+0x14>
 800ce76:	2316      	movs	r3, #22
 800ce78:	6003      	str	r3, [r0, #0]
 800ce7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce7e:	bd38      	pop	{r3, r4, r5, pc}
 800ce80:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ce82:	b112      	cbz	r2, 800ce8a <_raise_r+0x1e>
 800ce84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce88:	b94b      	cbnz	r3, 800ce9e <_raise_r+0x32>
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	f000 f830 	bl	800cef0 <_getpid_r>
 800ce90:	462a      	mov	r2, r5
 800ce92:	4601      	mov	r1, r0
 800ce94:	4620      	mov	r0, r4
 800ce96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce9a:	f000 b817 	b.w	800cecc <_kill_r>
 800ce9e:	2b01      	cmp	r3, #1
 800cea0:	d00a      	beq.n	800ceb8 <_raise_r+0x4c>
 800cea2:	1c59      	adds	r1, r3, #1
 800cea4:	d103      	bne.n	800ceae <_raise_r+0x42>
 800cea6:	2316      	movs	r3, #22
 800cea8:	6003      	str	r3, [r0, #0]
 800ceaa:	2001      	movs	r0, #1
 800ceac:	e7e7      	b.n	800ce7e <_raise_r+0x12>
 800ceae:	2400      	movs	r4, #0
 800ceb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ceb4:	4628      	mov	r0, r5
 800ceb6:	4798      	blx	r3
 800ceb8:	2000      	movs	r0, #0
 800ceba:	e7e0      	b.n	800ce7e <_raise_r+0x12>

0800cebc <raise>:
 800cebc:	4b02      	ldr	r3, [pc, #8]	; (800cec8 <raise+0xc>)
 800cebe:	4601      	mov	r1, r0
 800cec0:	6818      	ldr	r0, [r3, #0]
 800cec2:	f7ff bfd3 	b.w	800ce6c <_raise_r>
 800cec6:	bf00      	nop
 800cec8:	200001d8 	.word	0x200001d8

0800cecc <_kill_r>:
 800cecc:	b538      	push	{r3, r4, r5, lr}
 800cece:	4d07      	ldr	r5, [pc, #28]	; (800ceec <_kill_r+0x20>)
 800ced0:	2300      	movs	r3, #0
 800ced2:	4604      	mov	r4, r0
 800ced4:	4608      	mov	r0, r1
 800ced6:	4611      	mov	r1, r2
 800ced8:	602b      	str	r3, [r5, #0]
 800ceda:	f7f5 fb85 	bl	80025e8 <_kill>
 800cede:	1c43      	adds	r3, r0, #1
 800cee0:	d102      	bne.n	800cee8 <_kill_r+0x1c>
 800cee2:	682b      	ldr	r3, [r5, #0]
 800cee4:	b103      	cbz	r3, 800cee8 <_kill_r+0x1c>
 800cee6:	6023      	str	r3, [r4, #0]
 800cee8:	bd38      	pop	{r3, r4, r5, pc}
 800ceea:	bf00      	nop
 800ceec:	20014c88 	.word	0x20014c88

0800cef0 <_getpid_r>:
 800cef0:	f7f5 bb72 	b.w	80025d8 <_getpid>

0800cef4 <__swhatbuf_r>:
 800cef4:	b570      	push	{r4, r5, r6, lr}
 800cef6:	460c      	mov	r4, r1
 800cef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cefc:	2900      	cmp	r1, #0
 800cefe:	b096      	sub	sp, #88	; 0x58
 800cf00:	4615      	mov	r5, r2
 800cf02:	461e      	mov	r6, r3
 800cf04:	da0d      	bge.n	800cf22 <__swhatbuf_r+0x2e>
 800cf06:	89a3      	ldrh	r3, [r4, #12]
 800cf08:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cf0c:	f04f 0100 	mov.w	r1, #0
 800cf10:	bf0c      	ite	eq
 800cf12:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cf16:	2340      	movne	r3, #64	; 0x40
 800cf18:	2000      	movs	r0, #0
 800cf1a:	6031      	str	r1, [r6, #0]
 800cf1c:	602b      	str	r3, [r5, #0]
 800cf1e:	b016      	add	sp, #88	; 0x58
 800cf20:	bd70      	pop	{r4, r5, r6, pc}
 800cf22:	466a      	mov	r2, sp
 800cf24:	f000 f848 	bl	800cfb8 <_fstat_r>
 800cf28:	2800      	cmp	r0, #0
 800cf2a:	dbec      	blt.n	800cf06 <__swhatbuf_r+0x12>
 800cf2c:	9901      	ldr	r1, [sp, #4]
 800cf2e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cf32:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cf36:	4259      	negs	r1, r3
 800cf38:	4159      	adcs	r1, r3
 800cf3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf3e:	e7eb      	b.n	800cf18 <__swhatbuf_r+0x24>

0800cf40 <__smakebuf_r>:
 800cf40:	898b      	ldrh	r3, [r1, #12]
 800cf42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf44:	079d      	lsls	r5, r3, #30
 800cf46:	4606      	mov	r6, r0
 800cf48:	460c      	mov	r4, r1
 800cf4a:	d507      	bpl.n	800cf5c <__smakebuf_r+0x1c>
 800cf4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cf50:	6023      	str	r3, [r4, #0]
 800cf52:	6123      	str	r3, [r4, #16]
 800cf54:	2301      	movs	r3, #1
 800cf56:	6163      	str	r3, [r4, #20]
 800cf58:	b002      	add	sp, #8
 800cf5a:	bd70      	pop	{r4, r5, r6, pc}
 800cf5c:	ab01      	add	r3, sp, #4
 800cf5e:	466a      	mov	r2, sp
 800cf60:	f7ff ffc8 	bl	800cef4 <__swhatbuf_r>
 800cf64:	9900      	ldr	r1, [sp, #0]
 800cf66:	4605      	mov	r5, r0
 800cf68:	4630      	mov	r0, r6
 800cf6a:	f7ff f873 	bl	800c054 <_malloc_r>
 800cf6e:	b948      	cbnz	r0, 800cf84 <__smakebuf_r+0x44>
 800cf70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf74:	059a      	lsls	r2, r3, #22
 800cf76:	d4ef      	bmi.n	800cf58 <__smakebuf_r+0x18>
 800cf78:	f023 0303 	bic.w	r3, r3, #3
 800cf7c:	f043 0302 	orr.w	r3, r3, #2
 800cf80:	81a3      	strh	r3, [r4, #12]
 800cf82:	e7e3      	b.n	800cf4c <__smakebuf_r+0xc>
 800cf84:	89a3      	ldrh	r3, [r4, #12]
 800cf86:	6020      	str	r0, [r4, #0]
 800cf88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf8c:	81a3      	strh	r3, [r4, #12]
 800cf8e:	9b00      	ldr	r3, [sp, #0]
 800cf90:	6163      	str	r3, [r4, #20]
 800cf92:	9b01      	ldr	r3, [sp, #4]
 800cf94:	6120      	str	r0, [r4, #16]
 800cf96:	b15b      	cbz	r3, 800cfb0 <__smakebuf_r+0x70>
 800cf98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf9c:	4630      	mov	r0, r6
 800cf9e:	f000 f81d 	bl	800cfdc <_isatty_r>
 800cfa2:	b128      	cbz	r0, 800cfb0 <__smakebuf_r+0x70>
 800cfa4:	89a3      	ldrh	r3, [r4, #12]
 800cfa6:	f023 0303 	bic.w	r3, r3, #3
 800cfaa:	f043 0301 	orr.w	r3, r3, #1
 800cfae:	81a3      	strh	r3, [r4, #12]
 800cfb0:	89a3      	ldrh	r3, [r4, #12]
 800cfb2:	431d      	orrs	r5, r3
 800cfb4:	81a5      	strh	r5, [r4, #12]
 800cfb6:	e7cf      	b.n	800cf58 <__smakebuf_r+0x18>

0800cfb8 <_fstat_r>:
 800cfb8:	b538      	push	{r3, r4, r5, lr}
 800cfba:	4d07      	ldr	r5, [pc, #28]	; (800cfd8 <_fstat_r+0x20>)
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	4604      	mov	r4, r0
 800cfc0:	4608      	mov	r0, r1
 800cfc2:	4611      	mov	r1, r2
 800cfc4:	602b      	str	r3, [r5, #0]
 800cfc6:	f7f5 fb52 	bl	800266e <_fstat>
 800cfca:	1c43      	adds	r3, r0, #1
 800cfcc:	d102      	bne.n	800cfd4 <_fstat_r+0x1c>
 800cfce:	682b      	ldr	r3, [r5, #0]
 800cfd0:	b103      	cbz	r3, 800cfd4 <_fstat_r+0x1c>
 800cfd2:	6023      	str	r3, [r4, #0]
 800cfd4:	bd38      	pop	{r3, r4, r5, pc}
 800cfd6:	bf00      	nop
 800cfd8:	20014c88 	.word	0x20014c88

0800cfdc <_isatty_r>:
 800cfdc:	b538      	push	{r3, r4, r5, lr}
 800cfde:	4d06      	ldr	r5, [pc, #24]	; (800cff8 <_isatty_r+0x1c>)
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	4604      	mov	r4, r0
 800cfe4:	4608      	mov	r0, r1
 800cfe6:	602b      	str	r3, [r5, #0]
 800cfe8:	f7f5 fb51 	bl	800268e <_isatty>
 800cfec:	1c43      	adds	r3, r0, #1
 800cfee:	d102      	bne.n	800cff6 <_isatty_r+0x1a>
 800cff0:	682b      	ldr	r3, [r5, #0]
 800cff2:	b103      	cbz	r3, 800cff6 <_isatty_r+0x1a>
 800cff4:	6023      	str	r3, [r4, #0]
 800cff6:	bd38      	pop	{r3, r4, r5, pc}
 800cff8:	20014c88 	.word	0x20014c88

0800cffc <round>:
 800cffc:	ec53 2b10 	vmov	r2, r3, d0
 800d000:	b570      	push	{r4, r5, r6, lr}
 800d002:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800d006:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800d00a:	2813      	cmp	r0, #19
 800d00c:	ee10 5a10 	vmov	r5, s0
 800d010:	4619      	mov	r1, r3
 800d012:	dc18      	bgt.n	800d046 <round+0x4a>
 800d014:	2800      	cmp	r0, #0
 800d016:	da09      	bge.n	800d02c <round+0x30>
 800d018:	3001      	adds	r0, #1
 800d01a:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800d01e:	d103      	bne.n	800d028 <round+0x2c>
 800d020:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800d024:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d028:	2300      	movs	r3, #0
 800d02a:	e02a      	b.n	800d082 <round+0x86>
 800d02c:	4c16      	ldr	r4, [pc, #88]	; (800d088 <round+0x8c>)
 800d02e:	4104      	asrs	r4, r0
 800d030:	ea03 0604 	and.w	r6, r3, r4
 800d034:	4316      	orrs	r6, r2
 800d036:	d011      	beq.n	800d05c <round+0x60>
 800d038:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d03c:	4103      	asrs	r3, r0
 800d03e:	440b      	add	r3, r1
 800d040:	ea23 0104 	bic.w	r1, r3, r4
 800d044:	e7f0      	b.n	800d028 <round+0x2c>
 800d046:	2833      	cmp	r0, #51	; 0x33
 800d048:	dd0b      	ble.n	800d062 <round+0x66>
 800d04a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800d04e:	d105      	bne.n	800d05c <round+0x60>
 800d050:	ee10 0a10 	vmov	r0, s0
 800d054:	f7f3 f98a 	bl	800036c <__adddf3>
 800d058:	4602      	mov	r2, r0
 800d05a:	460b      	mov	r3, r1
 800d05c:	ec43 2b10 	vmov	d0, r2, r3
 800d060:	bd70      	pop	{r4, r5, r6, pc}
 800d062:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800d066:	f04f 34ff 	mov.w	r4, #4294967295
 800d06a:	40f4      	lsrs	r4, r6
 800d06c:	4214      	tst	r4, r2
 800d06e:	d0f5      	beq.n	800d05c <round+0x60>
 800d070:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800d074:	2301      	movs	r3, #1
 800d076:	4083      	lsls	r3, r0
 800d078:	195b      	adds	r3, r3, r5
 800d07a:	bf28      	it	cs
 800d07c:	3101      	addcs	r1, #1
 800d07e:	ea23 0304 	bic.w	r3, r3, r4
 800d082:	461a      	mov	r2, r3
 800d084:	460b      	mov	r3, r1
 800d086:	e7e9      	b.n	800d05c <round+0x60>
 800d088:	000fffff 	.word	0x000fffff

0800d08c <_sbrk>:
 800d08c:	4a04      	ldr	r2, [pc, #16]	; (800d0a0 <_sbrk+0x14>)
 800d08e:	6811      	ldr	r1, [r2, #0]
 800d090:	4603      	mov	r3, r0
 800d092:	b909      	cbnz	r1, 800d098 <_sbrk+0xc>
 800d094:	4903      	ldr	r1, [pc, #12]	; (800d0a4 <_sbrk+0x18>)
 800d096:	6011      	str	r1, [r2, #0]
 800d098:	6810      	ldr	r0, [r2, #0]
 800d09a:	4403      	add	r3, r0
 800d09c:	6013      	str	r3, [r2, #0]
 800d09e:	4770      	bx	lr
 800d0a0:	20014c98 	.word	0x20014c98
 800d0a4:	20014ca0 	.word	0x20014ca0

0800d0a8 <_init>:
 800d0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0aa:	bf00      	nop
 800d0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0ae:	bc08      	pop	{r3}
 800d0b0:	469e      	mov	lr, r3
 800d0b2:	4770      	bx	lr

0800d0b4 <_fini>:
 800d0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0b6:	bf00      	nop
 800d0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0ba:	bc08      	pop	{r3}
 800d0bc:	469e      	mov	lr, r3
 800d0be:	4770      	bx	lr
