
Sec_car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000108f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  08010ac8  08010ac8  00020ac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011060  08011060  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08011060  08011060  00021060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011068  08011068  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011068  08011068  00021068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801106c  0801106c  0002106c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08011070  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013c40  200001f8  08011268  000301f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20013e38  08011268  00033e38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021974  00000000  00000000  0003026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005198  00000000  00000000  00051bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001de0  00000000  00000000  00056d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001728  00000000  00000000  00058b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027fb8  00000000  00000000  0005a280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002705a  00000000  00000000  00082238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e66b0  00000000  00000000  000a9292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009058  00000000  00000000  0018f944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0019899c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010ab0 	.word	0x08010ab0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	08010ab0 	.word	0x08010ab0

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	2001371c 	.word	0x2001371c
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <strlen>:
 8000350:	4603      	mov	r3, r0
 8000352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000356:	2a00      	cmp	r2, #0
 8000358:	d1fb      	bne.n	8000352 <strlen+0x2>
 800035a:	1a18      	subs	r0, r3, r0
 800035c:	3801      	subs	r0, #1
 800035e:	4770      	bx	lr

08000360 <__aeabi_drsub>:
 8000360:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000364:	e002      	b.n	800036c <__adddf3>
 8000366:	bf00      	nop

08000368 <__aeabi_dsub>:
 8000368:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800036c <__adddf3>:
 800036c:	b530      	push	{r4, r5, lr}
 800036e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000372:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	bf1f      	itttt	ne
 8000382:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000386:	ea55 0c02 	orrsne.w	ip, r5, r2
 800038a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800038e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000392:	f000 80e2 	beq.w	800055a <__adddf3+0x1ee>
 8000396:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800039a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800039e:	bfb8      	it	lt
 80003a0:	426d      	neglt	r5, r5
 80003a2:	dd0c      	ble.n	80003be <__adddf3+0x52>
 80003a4:	442c      	add	r4, r5
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	ea82 0000 	eor.w	r0, r2, r0
 80003b2:	ea83 0101 	eor.w	r1, r3, r1
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	2d36      	cmp	r5, #54	; 0x36
 80003c0:	bf88      	it	hi
 80003c2:	bd30      	pophi	{r4, r5, pc}
 80003c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003d4:	d002      	beq.n	80003dc <__adddf3+0x70>
 80003d6:	4240      	negs	r0, r0
 80003d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003e8:	d002      	beq.n	80003f0 <__adddf3+0x84>
 80003ea:	4252      	negs	r2, r2
 80003ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003f0:	ea94 0f05 	teq	r4, r5
 80003f4:	f000 80a7 	beq.w	8000546 <__adddf3+0x1da>
 80003f8:	f1a4 0401 	sub.w	r4, r4, #1
 80003fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000400:	db0d      	blt.n	800041e <__adddf3+0xb2>
 8000402:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000406:	fa22 f205 	lsr.w	r2, r2, r5
 800040a:	1880      	adds	r0, r0, r2
 800040c:	f141 0100 	adc.w	r1, r1, #0
 8000410:	fa03 f20e 	lsl.w	r2, r3, lr
 8000414:	1880      	adds	r0, r0, r2
 8000416:	fa43 f305 	asr.w	r3, r3, r5
 800041a:	4159      	adcs	r1, r3
 800041c:	e00e      	b.n	800043c <__adddf3+0xd0>
 800041e:	f1a5 0520 	sub.w	r5, r5, #32
 8000422:	f10e 0e20 	add.w	lr, lr, #32
 8000426:	2a01      	cmp	r2, #1
 8000428:	fa03 fc0e 	lsl.w	ip, r3, lr
 800042c:	bf28      	it	cs
 800042e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000432:	fa43 f305 	asr.w	r3, r3, r5
 8000436:	18c0      	adds	r0, r0, r3
 8000438:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800043c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000440:	d507      	bpl.n	8000452 <__adddf3+0xe6>
 8000442:	f04f 0e00 	mov.w	lr, #0
 8000446:	f1dc 0c00 	rsbs	ip, ip, #0
 800044a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800044e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000452:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000456:	d31b      	bcc.n	8000490 <__adddf3+0x124>
 8000458:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800045c:	d30c      	bcc.n	8000478 <__adddf3+0x10c>
 800045e:	0849      	lsrs	r1, r1, #1
 8000460:	ea5f 0030 	movs.w	r0, r0, rrx
 8000464:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000468:	f104 0401 	add.w	r4, r4, #1
 800046c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000470:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000474:	f080 809a 	bcs.w	80005ac <__adddf3+0x240>
 8000478:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800047c:	bf08      	it	eq
 800047e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000482:	f150 0000 	adcs.w	r0, r0, #0
 8000486:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800048a:	ea41 0105 	orr.w	r1, r1, r5
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000494:	4140      	adcs	r0, r0
 8000496:	eb41 0101 	adc.w	r1, r1, r1
 800049a:	3c01      	subs	r4, #1
 800049c:	bf28      	it	cs
 800049e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004a2:	d2e9      	bcs.n	8000478 <__adddf3+0x10c>
 80004a4:	f091 0f00 	teq	r1, #0
 80004a8:	bf04      	itt	eq
 80004aa:	4601      	moveq	r1, r0
 80004ac:	2000      	moveq	r0, #0
 80004ae:	fab1 f381 	clz	r3, r1
 80004b2:	bf08      	it	eq
 80004b4:	3320      	addeq	r3, #32
 80004b6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ba:	f1b3 0220 	subs.w	r2, r3, #32
 80004be:	da0c      	bge.n	80004da <__adddf3+0x16e>
 80004c0:	320c      	adds	r2, #12
 80004c2:	dd08      	ble.n	80004d6 <__adddf3+0x16a>
 80004c4:	f102 0c14 	add.w	ip, r2, #20
 80004c8:	f1c2 020c 	rsb	r2, r2, #12
 80004cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004d0:	fa21 f102 	lsr.w	r1, r1, r2
 80004d4:	e00c      	b.n	80004f0 <__adddf3+0x184>
 80004d6:	f102 0214 	add.w	r2, r2, #20
 80004da:	bfd8      	it	le
 80004dc:	f1c2 0c20 	rsble	ip, r2, #32
 80004e0:	fa01 f102 	lsl.w	r1, r1, r2
 80004e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004e8:	bfdc      	itt	le
 80004ea:	ea41 010c 	orrle.w	r1, r1, ip
 80004ee:	4090      	lslle	r0, r2
 80004f0:	1ae4      	subs	r4, r4, r3
 80004f2:	bfa2      	ittt	ge
 80004f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004f8:	4329      	orrge	r1, r5
 80004fa:	bd30      	popge	{r4, r5, pc}
 80004fc:	ea6f 0404 	mvn.w	r4, r4
 8000500:	3c1f      	subs	r4, #31
 8000502:	da1c      	bge.n	800053e <__adddf3+0x1d2>
 8000504:	340c      	adds	r4, #12
 8000506:	dc0e      	bgt.n	8000526 <__adddf3+0x1ba>
 8000508:	f104 0414 	add.w	r4, r4, #20
 800050c:	f1c4 0220 	rsb	r2, r4, #32
 8000510:	fa20 f004 	lsr.w	r0, r0, r4
 8000514:	fa01 f302 	lsl.w	r3, r1, r2
 8000518:	ea40 0003 	orr.w	r0, r0, r3
 800051c:	fa21 f304 	lsr.w	r3, r1, r4
 8000520:	ea45 0103 	orr.w	r1, r5, r3
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f1c4 040c 	rsb	r4, r4, #12
 800052a:	f1c4 0220 	rsb	r2, r4, #32
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 f304 	lsl.w	r3, r1, r4
 8000536:	ea40 0003 	orr.w	r0, r0, r3
 800053a:	4629      	mov	r1, r5
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	fa21 f004 	lsr.w	r0, r1, r4
 8000542:	4629      	mov	r1, r5
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f094 0f00 	teq	r4, #0
 800054a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800054e:	bf06      	itte	eq
 8000550:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000554:	3401      	addeq	r4, #1
 8000556:	3d01      	subne	r5, #1
 8000558:	e74e      	b.n	80003f8 <__adddf3+0x8c>
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf18      	it	ne
 8000560:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000564:	d029      	beq.n	80005ba <__adddf3+0x24e>
 8000566:	ea94 0f05 	teq	r4, r5
 800056a:	bf08      	it	eq
 800056c:	ea90 0f02 	teqeq	r0, r2
 8000570:	d005      	beq.n	800057e <__adddf3+0x212>
 8000572:	ea54 0c00 	orrs.w	ip, r4, r0
 8000576:	bf04      	itt	eq
 8000578:	4619      	moveq	r1, r3
 800057a:	4610      	moveq	r0, r2
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	ea91 0f03 	teq	r1, r3
 8000582:	bf1e      	ittt	ne
 8000584:	2100      	movne	r1, #0
 8000586:	2000      	movne	r0, #0
 8000588:	bd30      	popne	{r4, r5, pc}
 800058a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800058e:	d105      	bne.n	800059c <__adddf3+0x230>
 8000590:	0040      	lsls	r0, r0, #1
 8000592:	4149      	adcs	r1, r1
 8000594:	bf28      	it	cs
 8000596:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005a0:	bf3c      	itt	cc
 80005a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005a6:	bd30      	popcc	{r4, r5, pc}
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005b4:	f04f 0000 	mov.w	r0, #0
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf1a      	itte	ne
 80005c0:	4619      	movne	r1, r3
 80005c2:	4610      	movne	r0, r2
 80005c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005c8:	bf1c      	itt	ne
 80005ca:	460b      	movne	r3, r1
 80005cc:	4602      	movne	r2, r0
 80005ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005d2:	bf06      	itte	eq
 80005d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005d8:	ea91 0f03 	teqeq	r1, r3
 80005dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	bf00      	nop

080005e4 <__aeabi_ui2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f04f 0500 	mov.w	r5, #0
 80005fc:	f04f 0100 	mov.w	r1, #0
 8000600:	e750      	b.n	80004a4 <__adddf3+0x138>
 8000602:	bf00      	nop

08000604 <__aeabi_i2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800061c:	bf48      	it	mi
 800061e:	4240      	negmi	r0, r0
 8000620:	f04f 0100 	mov.w	r1, #0
 8000624:	e73e      	b.n	80004a4 <__adddf3+0x138>
 8000626:	bf00      	nop

08000628 <__aeabi_f2d>:
 8000628:	0042      	lsls	r2, r0, #1
 800062a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800062e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000632:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000636:	bf1f      	itttt	ne
 8000638:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800063c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000640:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000644:	4770      	bxne	lr
 8000646:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800064a:	bf08      	it	eq
 800064c:	4770      	bxeq	lr
 800064e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000652:	bf04      	itt	eq
 8000654:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000658:	4770      	bxeq	lr
 800065a:	b530      	push	{r4, r5, lr}
 800065c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000660:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	e71c      	b.n	80004a4 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_ul2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	e00a      	b.n	8000692 <__aeabi_l2d+0x16>

0800067c <__aeabi_l2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800068a:	d502      	bpl.n	8000692 <__aeabi_l2d+0x16>
 800068c:	4240      	negs	r0, r0
 800068e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000692:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000696:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800069a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800069e:	f43f aed8 	beq.w	8000452 <__adddf3+0xe6>
 80006a2:	f04f 0203 	mov.w	r2, #3
 80006a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006aa:	bf18      	it	ne
 80006ac:	3203      	addne	r2, #3
 80006ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006b2:	bf18      	it	ne
 80006b4:	3203      	addne	r2, #3
 80006b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ba:	f1c2 0320 	rsb	r3, r2, #32
 80006be:	fa00 fc03 	lsl.w	ip, r0, r3
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ca:	ea40 000e 	orr.w	r0, r0, lr
 80006ce:	fa21 f102 	lsr.w	r1, r1, r2
 80006d2:	4414      	add	r4, r2
 80006d4:	e6bd      	b.n	8000452 <__adddf3+0xe6>
 80006d6:	bf00      	nop

080006d8 <__aeabi_dmul>:
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006e6:	bf1d      	ittte	ne
 80006e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006ec:	ea94 0f0c 	teqne	r4, ip
 80006f0:	ea95 0f0c 	teqne	r5, ip
 80006f4:	f000 f8de 	bleq	80008b4 <__aeabi_dmul+0x1dc>
 80006f8:	442c      	add	r4, r5
 80006fa:	ea81 0603 	eor.w	r6, r1, r3
 80006fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000702:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000706:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800070a:	bf18      	it	ne
 800070c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000718:	d038      	beq.n	800078c <__aeabi_dmul+0xb4>
 800071a:	fba0 ce02 	umull	ip, lr, r0, r2
 800071e:	f04f 0500 	mov.w	r5, #0
 8000722:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000726:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800072a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800072e:	f04f 0600 	mov.w	r6, #0
 8000732:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000736:	f09c 0f00 	teq	ip, #0
 800073a:	bf18      	it	ne
 800073c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000740:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000744:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000748:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800074c:	d204      	bcs.n	8000758 <__aeabi_dmul+0x80>
 800074e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000752:	416d      	adcs	r5, r5
 8000754:	eb46 0606 	adc.w	r6, r6, r6
 8000758:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800075c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000760:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000764:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000768:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800076c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000770:	bf88      	it	hi
 8000772:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000776:	d81e      	bhi.n	80007b6 <__aeabi_dmul+0xde>
 8000778:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800077c:	bf08      	it	eq
 800077e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000782:	f150 0000 	adcs.w	r0, r0, #0
 8000786:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000790:	ea46 0101 	orr.w	r1, r6, r1
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007a0:	bfc2      	ittt	gt
 80007a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	popgt	{r4, r5, r6, pc}
 80007ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007b0:	f04f 0e00 	mov.w	lr, #0
 80007b4:	3c01      	subs	r4, #1
 80007b6:	f300 80ab 	bgt.w	8000910 <__aeabi_dmul+0x238>
 80007ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007be:	bfde      	ittt	le
 80007c0:	2000      	movle	r0, #0
 80007c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007c6:	bd70      	pople	{r4, r5, r6, pc}
 80007c8:	f1c4 0400 	rsb	r4, r4, #0
 80007cc:	3c20      	subs	r4, #32
 80007ce:	da35      	bge.n	800083c <__aeabi_dmul+0x164>
 80007d0:	340c      	adds	r4, #12
 80007d2:	dc1b      	bgt.n	800080c <__aeabi_dmul+0x134>
 80007d4:	f104 0414 	add.w	r4, r4, #20
 80007d8:	f1c4 0520 	rsb	r5, r4, #32
 80007dc:	fa00 f305 	lsl.w	r3, r0, r5
 80007e0:	fa20 f004 	lsr.w	r0, r0, r4
 80007e4:	fa01 f205 	lsl.w	r2, r1, r5
 80007e8:	ea40 0002 	orr.w	r0, r0, r2
 80007ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007f8:	fa21 f604 	lsr.w	r6, r1, r4
 80007fc:	eb42 0106 	adc.w	r1, r2, r6
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 040c 	rsb	r4, r4, #12
 8000810:	f1c4 0520 	rsb	r5, r4, #32
 8000814:	fa00 f304 	lsl.w	r3, r0, r4
 8000818:	fa20 f005 	lsr.w	r0, r0, r5
 800081c:	fa01 f204 	lsl.w	r2, r1, r4
 8000820:	ea40 0002 	orr.w	r0, r0, r2
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800082c:	f141 0100 	adc.w	r1, r1, #0
 8000830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000834:	bf08      	it	eq
 8000836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f1c4 0520 	rsb	r5, r4, #32
 8000840:	fa00 f205 	lsl.w	r2, r0, r5
 8000844:	ea4e 0e02 	orr.w	lr, lr, r2
 8000848:	fa20 f304 	lsr.w	r3, r0, r4
 800084c:	fa01 f205 	lsl.w	r2, r1, r5
 8000850:	ea43 0302 	orr.w	r3, r3, r2
 8000854:	fa21 f004 	lsr.w	r0, r1, r4
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	fa21 f204 	lsr.w	r2, r1, r4
 8000860:	ea20 0002 	bic.w	r0, r0, r2
 8000864:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000868:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800086c:	bf08      	it	eq
 800086e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f094 0f00 	teq	r4, #0
 8000878:	d10f      	bne.n	800089a <__aeabi_dmul+0x1c2>
 800087a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800087e:	0040      	lsls	r0, r0, #1
 8000880:	eb41 0101 	adc.w	r1, r1, r1
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3c01      	subeq	r4, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1a6>
 800088e:	ea41 0106 	orr.w	r1, r1, r6
 8000892:	f095 0f00 	teq	r5, #0
 8000896:	bf18      	it	ne
 8000898:	4770      	bxne	lr
 800089a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800089e:	0052      	lsls	r2, r2, #1
 80008a0:	eb43 0303 	adc.w	r3, r3, r3
 80008a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3d01      	subeq	r5, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1c6>
 80008ae:	ea43 0306 	orr.w	r3, r3, r6
 80008b2:	4770      	bx	lr
 80008b4:	ea94 0f0c 	teq	r4, ip
 80008b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008bc:	bf18      	it	ne
 80008be:	ea95 0f0c 	teqne	r5, ip
 80008c2:	d00c      	beq.n	80008de <__aeabi_dmul+0x206>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	d1d1      	bne.n	8000874 <__aeabi_dmul+0x19c>
 80008d0:	ea81 0103 	eor.w	r1, r1, r3
 80008d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008d8:	f04f 0000 	mov.w	r0, #0
 80008dc:	bd70      	pop	{r4, r5, r6, pc}
 80008de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e2:	bf06      	itte	eq
 80008e4:	4610      	moveq	r0, r2
 80008e6:	4619      	moveq	r1, r3
 80008e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ec:	d019      	beq.n	8000922 <__aeabi_dmul+0x24a>
 80008ee:	ea94 0f0c 	teq	r4, ip
 80008f2:	d102      	bne.n	80008fa <__aeabi_dmul+0x222>
 80008f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008f8:	d113      	bne.n	8000922 <__aeabi_dmul+0x24a>
 80008fa:	ea95 0f0c 	teq	r5, ip
 80008fe:	d105      	bne.n	800090c <__aeabi_dmul+0x234>
 8000900:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000904:	bf1c      	itt	ne
 8000906:	4610      	movne	r0, r2
 8000908:	4619      	movne	r1, r3
 800090a:	d10a      	bne.n	8000922 <__aeabi_dmul+0x24a>
 800090c:	ea81 0103 	eor.w	r1, r1, r3
 8000910:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000914:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000918:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	bd70      	pop	{r4, r5, r6, pc}
 8000922:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000926:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800092a:	bd70      	pop	{r4, r5, r6, pc}

0800092c <__aeabi_ddiv>:
 800092c:	b570      	push	{r4, r5, r6, lr}
 800092e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000932:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000936:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800093a:	bf1d      	ittte	ne
 800093c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000940:	ea94 0f0c 	teqne	r4, ip
 8000944:	ea95 0f0c 	teqne	r5, ip
 8000948:	f000 f8a7 	bleq	8000a9a <__aeabi_ddiv+0x16e>
 800094c:	eba4 0405 	sub.w	r4, r4, r5
 8000950:	ea81 0e03 	eor.w	lr, r1, r3
 8000954:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000958:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800095c:	f000 8088 	beq.w	8000a70 <__aeabi_ddiv+0x144>
 8000960:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000964:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000968:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800096c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000970:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000974:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000978:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800097c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000980:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000984:	429d      	cmp	r5, r3
 8000986:	bf08      	it	eq
 8000988:	4296      	cmpeq	r6, r2
 800098a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800098e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000992:	d202      	bcs.n	800099a <__aeabi_ddiv+0x6e>
 8000994:	085b      	lsrs	r3, r3, #1
 8000996:	ea4f 0232 	mov.w	r2, r2, rrx
 800099a:	1ab6      	subs	r6, r6, r2
 800099c:	eb65 0503 	sbc.w	r5, r5, r3
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009d8:	085b      	lsrs	r3, r3, #1
 80009da:	ea4f 0232 	mov.w	r2, r2, rrx
 80009de:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e6:	bf22      	ittt	cs
 80009e8:	1ab6      	subcs	r6, r6, r2
 80009ea:	4675      	movcs	r5, lr
 80009ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a08:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a0c:	d018      	beq.n	8000a40 <__aeabi_ddiv+0x114>
 8000a0e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a12:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a16:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a1a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a1e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a26:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a2a:	d1c0      	bne.n	80009ae <__aeabi_ddiv+0x82>
 8000a2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a30:	d10b      	bne.n	8000a4a <__aeabi_ddiv+0x11e>
 8000a32:	ea41 0100 	orr.w	r1, r1, r0
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a3e:	e7b6      	b.n	80009ae <__aeabi_ddiv+0x82>
 8000a40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a44:	bf04      	itt	eq
 8000a46:	4301      	orreq	r1, r0
 8000a48:	2000      	moveq	r0, #0
 8000a4a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a4e:	bf88      	it	hi
 8000a50:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a54:	f63f aeaf 	bhi.w	80007b6 <__aeabi_dmul+0xde>
 8000a58:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a5c:	bf04      	itt	eq
 8000a5e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a66:	f150 0000 	adcs.w	r0, r0, #0
 8000a6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a74:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a78:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a7c:	bfc2      	ittt	gt
 8000a7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a86:	bd70      	popgt	{r4, r5, r6, pc}
 8000a88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a8c:	f04f 0e00 	mov.w	lr, #0
 8000a90:	3c01      	subs	r4, #1
 8000a92:	e690      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a94:	ea45 0e06 	orr.w	lr, r5, r6
 8000a98:	e68d      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a9a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a9e:	ea94 0f0c 	teq	r4, ip
 8000aa2:	bf08      	it	eq
 8000aa4:	ea95 0f0c 	teqeq	r5, ip
 8000aa8:	f43f af3b 	beq.w	8000922 <__aeabi_dmul+0x24a>
 8000aac:	ea94 0f0c 	teq	r4, ip
 8000ab0:	d10a      	bne.n	8000ac8 <__aeabi_ddiv+0x19c>
 8000ab2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ab6:	f47f af34 	bne.w	8000922 <__aeabi_dmul+0x24a>
 8000aba:	ea95 0f0c 	teq	r5, ip
 8000abe:	f47f af25 	bne.w	800090c <__aeabi_dmul+0x234>
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	e72c      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000ac8:	ea95 0f0c 	teq	r5, ip
 8000acc:	d106      	bne.n	8000adc <__aeabi_ddiv+0x1b0>
 8000ace:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ad2:	f43f aefd 	beq.w	80008d0 <__aeabi_dmul+0x1f8>
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	e722      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000adc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ae0:	bf18      	it	ne
 8000ae2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ae6:	f47f aec5 	bne.w	8000874 <__aeabi_dmul+0x19c>
 8000aea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000aee:	f47f af0d 	bne.w	800090c <__aeabi_dmul+0x234>
 8000af2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000af6:	f47f aeeb 	bne.w	80008d0 <__aeabi_dmul+0x1f8>
 8000afa:	e712      	b.n	8000922 <__aeabi_dmul+0x24a>

08000afc <__gedf2>:
 8000afc:	f04f 3cff 	mov.w	ip, #4294967295
 8000b00:	e006      	b.n	8000b10 <__cmpdf2+0x4>
 8000b02:	bf00      	nop

08000b04 <__ledf2>:
 8000b04:	f04f 0c01 	mov.w	ip, #1
 8000b08:	e002      	b.n	8000b10 <__cmpdf2+0x4>
 8000b0a:	bf00      	nop

08000b0c <__cmpdf2>:
 8000b0c:	f04f 0c01 	mov.w	ip, #1
 8000b10:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b26:	d01b      	beq.n	8000b60 <__cmpdf2+0x54>
 8000b28:	b001      	add	sp, #4
 8000b2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b2e:	bf0c      	ite	eq
 8000b30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b34:	ea91 0f03 	teqne	r1, r3
 8000b38:	bf02      	ittt	eq
 8000b3a:	ea90 0f02 	teqeq	r0, r2
 8000b3e:	2000      	moveq	r0, #0
 8000b40:	4770      	bxeq	lr
 8000b42:	f110 0f00 	cmn.w	r0, #0
 8000b46:	ea91 0f03 	teq	r1, r3
 8000b4a:	bf58      	it	pl
 8000b4c:	4299      	cmppl	r1, r3
 8000b4e:	bf08      	it	eq
 8000b50:	4290      	cmpeq	r0, r2
 8000b52:	bf2c      	ite	cs
 8000b54:	17d8      	asrcs	r0, r3, #31
 8000b56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b5a:	f040 0001 	orr.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__cmpdf2+0x64>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d107      	bne.n	8000b80 <__cmpdf2+0x74>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d1d6      	bne.n	8000b28 <__cmpdf2+0x1c>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d0d3      	beq.n	8000b28 <__cmpdf2+0x1c>
 8000b80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_cdrcmple>:
 8000b88:	4684      	mov	ip, r0
 8000b8a:	4610      	mov	r0, r2
 8000b8c:	4662      	mov	r2, ip
 8000b8e:	468c      	mov	ip, r1
 8000b90:	4619      	mov	r1, r3
 8000b92:	4663      	mov	r3, ip
 8000b94:	e000      	b.n	8000b98 <__aeabi_cdcmpeq>
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdcmpeq>:
 8000b98:	b501      	push	{r0, lr}
 8000b9a:	f7ff ffb7 	bl	8000b0c <__cmpdf2>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	bf48      	it	mi
 8000ba2:	f110 0f00 	cmnmi.w	r0, #0
 8000ba6:	bd01      	pop	{r0, pc}

08000ba8 <__aeabi_dcmpeq>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff fff4 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bb0:	bf0c      	ite	eq
 8000bb2:	2001      	moveq	r0, #1
 8000bb4:	2000      	movne	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_dcmplt>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff ffea 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bc4:	bf34      	ite	cc
 8000bc6:	2001      	movcc	r0, #1
 8000bc8:	2000      	movcs	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_dcmple>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffe0 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bd8:	bf94      	ite	ls
 8000bda:	2001      	movls	r0, #1
 8000bdc:	2000      	movhi	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_dcmpge>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffce 	bl	8000b88 <__aeabi_cdrcmple>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_dcmpgt>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffc4 	bl	8000b88 <__aeabi_cdrcmple>
 8000c00:	bf34      	ite	cc
 8000c02:	2001      	movcc	r0, #1
 8000c04:	2000      	movcs	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_dcmpun>:
 8000c0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c14:	d102      	bne.n	8000c1c <__aeabi_dcmpun+0x10>
 8000c16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c1a:	d10a      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x20>
 8000c26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c2c:	f04f 0000 	mov.w	r0, #0
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0001 	mov.w	r0, #1
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2iz>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c40:	d215      	bcs.n	8000c6e <__aeabi_d2iz+0x36>
 8000c42:	d511      	bpl.n	8000c68 <__aeabi_d2iz+0x30>
 8000c44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c4c:	d912      	bls.n	8000c74 <__aeabi_d2iz+0x3c>
 8000c4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c62:	bf18      	it	ne
 8000c64:	4240      	negne	r0, r0
 8000c66:	4770      	bx	lr
 8000c68:	f04f 0000 	mov.w	r0, #0
 8000c6c:	4770      	bx	lr
 8000c6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c72:	d105      	bne.n	8000c80 <__aeabi_d2iz+0x48>
 8000c74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	bf08      	it	eq
 8000c7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c7e:	4770      	bx	lr
 8000c80:	f04f 0000 	mov.w	r0, #0
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2uiz>:
 8000c88:	004a      	lsls	r2, r1, #1
 8000c8a:	d211      	bcs.n	8000cb0 <__aeabi_d2uiz+0x28>
 8000c8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c90:	d211      	bcs.n	8000cb6 <__aeabi_d2uiz+0x2e>
 8000c92:	d50d      	bpl.n	8000cb0 <__aeabi_d2uiz+0x28>
 8000c94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c9c:	d40e      	bmi.n	8000cbc <__aeabi_d2uiz+0x34>
 8000c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000caa:	fa23 f002 	lsr.w	r0, r3, r2
 8000cae:	4770      	bx	lr
 8000cb0:	f04f 0000 	mov.w	r0, #0
 8000cb4:	4770      	bx	lr
 8000cb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cba:	d102      	bne.n	8000cc2 <__aeabi_d2uiz+0x3a>
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	4770      	bx	lr
 8000cc2:	f04f 0000 	mov.w	r0, #0
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2f>:
 8000cc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ccc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cd0:	bf24      	itt	cs
 8000cd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cda:	d90d      	bls.n	8000cf8 <__aeabi_d2f+0x30>
 8000cdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ce0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ce4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ce8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cf0:	bf08      	it	eq
 8000cf2:	f020 0001 	biceq.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cfc:	d121      	bne.n	8000d42 <__aeabi_d2f+0x7a>
 8000cfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d02:	bfbc      	itt	lt
 8000d04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d08:	4770      	bxlt	lr
 8000d0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d12:	f1c2 0218 	rsb	r2, r2, #24
 8000d16:	f1c2 0c20 	rsb	ip, r2, #32
 8000d1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d22:	bf18      	it	ne
 8000d24:	f040 0001 	orrne.w	r0, r0, #1
 8000d28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d34:	ea40 000c 	orr.w	r0, r0, ip
 8000d38:	fa23 f302 	lsr.w	r3, r3, r2
 8000d3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d40:	e7cc      	b.n	8000cdc <__aeabi_d2f+0x14>
 8000d42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d46:	d107      	bne.n	8000d58 <__aeabi_d2f+0x90>
 8000d48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d56:	4770      	bxne	lr
 8000d58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b970 	b.w	8001060 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f806 	bl	8000d98 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__udivmoddi4>:
 8000d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d9c:	9e08      	ldr	r6, [sp, #32]
 8000d9e:	460d      	mov	r5, r1
 8000da0:	4604      	mov	r4, r0
 8000da2:	460f      	mov	r7, r1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d14a      	bne.n	8000e3e <__udivmoddi4+0xa6>
 8000da8:	428a      	cmp	r2, r1
 8000daa:	4694      	mov	ip, r2
 8000dac:	d965      	bls.n	8000e7a <__udivmoddi4+0xe2>
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	b143      	cbz	r3, 8000dc6 <__udivmoddi4+0x2e>
 8000db4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000db8:	f1c3 0220 	rsb	r2, r3, #32
 8000dbc:	409f      	lsls	r7, r3
 8000dbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc2:	4317      	orrs	r7, r2
 8000dc4:	409c      	lsls	r4, r3
 8000dc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dca:	fa1f f58c 	uxth.w	r5, ip
 8000dce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dd2:	0c22      	lsrs	r2, r4, #16
 8000dd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ddc:	fb01 f005 	mul.w	r0, r1, r5
 8000de0:	4290      	cmp	r0, r2
 8000de2:	d90a      	bls.n	8000dfa <__udivmoddi4+0x62>
 8000de4:	eb1c 0202 	adds.w	r2, ip, r2
 8000de8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dec:	f080 811c 	bcs.w	8001028 <__udivmoddi4+0x290>
 8000df0:	4290      	cmp	r0, r2
 8000df2:	f240 8119 	bls.w	8001028 <__udivmoddi4+0x290>
 8000df6:	3902      	subs	r1, #2
 8000df8:	4462      	add	r2, ip
 8000dfa:	1a12      	subs	r2, r2, r0
 8000dfc:	b2a4      	uxth	r4, r4
 8000dfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0a:	fb00 f505 	mul.w	r5, r0, r5
 8000e0e:	42a5      	cmp	r5, r4
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x90>
 8000e12:	eb1c 0404 	adds.w	r4, ip, r4
 8000e16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e1a:	f080 8107 	bcs.w	800102c <__udivmoddi4+0x294>
 8000e1e:	42a5      	cmp	r5, r4
 8000e20:	f240 8104 	bls.w	800102c <__udivmoddi4+0x294>
 8000e24:	4464      	add	r4, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e2c:	1b64      	subs	r4, r4, r5
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11e      	cbz	r6, 8000e3a <__udivmoddi4+0xa2>
 8000e32:	40dc      	lsrs	r4, r3
 8000e34:	2300      	movs	r3, #0
 8000e36:	e9c6 4300 	strd	r4, r3, [r6]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0xbc>
 8000e42:	2e00      	cmp	r6, #0
 8000e44:	f000 80ed 	beq.w	8001022 <__udivmoddi4+0x28a>
 8000e48:	2100      	movs	r1, #0
 8000e4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e4e:	4608      	mov	r0, r1
 8000e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e54:	fab3 f183 	clz	r1, r3
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	d149      	bne.n	8000ef0 <__udivmoddi4+0x158>
 8000e5c:	42ab      	cmp	r3, r5
 8000e5e:	d302      	bcc.n	8000e66 <__udivmoddi4+0xce>
 8000e60:	4282      	cmp	r2, r0
 8000e62:	f200 80f8 	bhi.w	8001056 <__udivmoddi4+0x2be>
 8000e66:	1a84      	subs	r4, r0, r2
 8000e68:	eb65 0203 	sbc.w	r2, r5, r3
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	4617      	mov	r7, r2
 8000e70:	2e00      	cmp	r6, #0
 8000e72:	d0e2      	beq.n	8000e3a <__udivmoddi4+0xa2>
 8000e74:	e9c6 4700 	strd	r4, r7, [r6]
 8000e78:	e7df      	b.n	8000e3a <__udivmoddi4+0xa2>
 8000e7a:	b902      	cbnz	r2, 8000e7e <__udivmoddi4+0xe6>
 8000e7c:	deff      	udf	#255	; 0xff
 8000e7e:	fab2 f382 	clz	r3, r2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f040 8090 	bne.w	8000fa8 <__udivmoddi4+0x210>
 8000e88:	1a8a      	subs	r2, r1, r2
 8000e8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e8e:	fa1f fe8c 	uxth.w	lr, ip
 8000e92:	2101      	movs	r1, #1
 8000e94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e98:	fb07 2015 	mls	r0, r7, r5, r2
 8000e9c:	0c22      	lsrs	r2, r4, #16
 8000e9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ea2:	fb0e f005 	mul.w	r0, lr, r5
 8000ea6:	4290      	cmp	r0, r2
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x124>
 8000eaa:	eb1c 0202 	adds.w	r2, ip, r2
 8000eae:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x122>
 8000eb4:	4290      	cmp	r0, r2
 8000eb6:	f200 80cb 	bhi.w	8001050 <__udivmoddi4+0x2b8>
 8000eba:	4645      	mov	r5, r8
 8000ebc:	1a12      	subs	r2, r2, r0
 8000ebe:	b2a4      	uxth	r4, r4
 8000ec0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ec4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ec8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ecc:	fb0e fe00 	mul.w	lr, lr, r0
 8000ed0:	45a6      	cmp	lr, r4
 8000ed2:	d908      	bls.n	8000ee6 <__udivmoddi4+0x14e>
 8000ed4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000edc:	d202      	bcs.n	8000ee4 <__udivmoddi4+0x14c>
 8000ede:	45a6      	cmp	lr, r4
 8000ee0:	f200 80bb 	bhi.w	800105a <__udivmoddi4+0x2c2>
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	eba4 040e 	sub.w	r4, r4, lr
 8000eea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eee:	e79f      	b.n	8000e30 <__udivmoddi4+0x98>
 8000ef0:	f1c1 0720 	rsb	r7, r1, #32
 8000ef4:	408b      	lsls	r3, r1
 8000ef6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000efa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000efe:	fa05 f401 	lsl.w	r4, r5, r1
 8000f02:	fa20 f307 	lsr.w	r3, r0, r7
 8000f06:	40fd      	lsrs	r5, r7
 8000f08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f0c:	4323      	orrs	r3, r4
 8000f0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f12:	fa1f fe8c 	uxth.w	lr, ip
 8000f16:	fb09 5518 	mls	r5, r9, r8, r5
 8000f1a:	0c1c      	lsrs	r4, r3, #16
 8000f1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f20:	fb08 f50e 	mul.w	r5, r8, lr
 8000f24:	42a5      	cmp	r5, r4
 8000f26:	fa02 f201 	lsl.w	r2, r2, r1
 8000f2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000f2e:	d90b      	bls.n	8000f48 <__udivmoddi4+0x1b0>
 8000f30:	eb1c 0404 	adds.w	r4, ip, r4
 8000f34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f38:	f080 8088 	bcs.w	800104c <__udivmoddi4+0x2b4>
 8000f3c:	42a5      	cmp	r5, r4
 8000f3e:	f240 8085 	bls.w	800104c <__udivmoddi4+0x2b4>
 8000f42:	f1a8 0802 	sub.w	r8, r8, #2
 8000f46:	4464      	add	r4, ip
 8000f48:	1b64      	subs	r4, r4, r5
 8000f4a:	b29d      	uxth	r5, r3
 8000f4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f50:	fb09 4413 	mls	r4, r9, r3, r4
 8000f54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f5c:	45a6      	cmp	lr, r4
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x1da>
 8000f60:	eb1c 0404 	adds.w	r4, ip, r4
 8000f64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f68:	d26c      	bcs.n	8001044 <__udivmoddi4+0x2ac>
 8000f6a:	45a6      	cmp	lr, r4
 8000f6c:	d96a      	bls.n	8001044 <__udivmoddi4+0x2ac>
 8000f6e:	3b02      	subs	r3, #2
 8000f70:	4464      	add	r4, ip
 8000f72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f76:	fba3 9502 	umull	r9, r5, r3, r2
 8000f7a:	eba4 040e 	sub.w	r4, r4, lr
 8000f7e:	42ac      	cmp	r4, r5
 8000f80:	46c8      	mov	r8, r9
 8000f82:	46ae      	mov	lr, r5
 8000f84:	d356      	bcc.n	8001034 <__udivmoddi4+0x29c>
 8000f86:	d053      	beq.n	8001030 <__udivmoddi4+0x298>
 8000f88:	b156      	cbz	r6, 8000fa0 <__udivmoddi4+0x208>
 8000f8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f92:	fa04 f707 	lsl.w	r7, r4, r7
 8000f96:	40ca      	lsrs	r2, r1
 8000f98:	40cc      	lsrs	r4, r1
 8000f9a:	4317      	orrs	r7, r2
 8000f9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa8:	f1c3 0120 	rsb	r1, r3, #32
 8000fac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000fb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000fb8:	409d      	lsls	r5, r3
 8000fba:	432a      	orrs	r2, r5
 8000fbc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc0:	fa1f fe8c 	uxth.w	lr, ip
 8000fc4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fc8:	fb07 1510 	mls	r5, r7, r0, r1
 8000fcc:	0c11      	lsrs	r1, r2, #16
 8000fce:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fd2:	fb00 f50e 	mul.w	r5, r0, lr
 8000fd6:	428d      	cmp	r5, r1
 8000fd8:	fa04 f403 	lsl.w	r4, r4, r3
 8000fdc:	d908      	bls.n	8000ff0 <__udivmoddi4+0x258>
 8000fde:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fe6:	d22f      	bcs.n	8001048 <__udivmoddi4+0x2b0>
 8000fe8:	428d      	cmp	r5, r1
 8000fea:	d92d      	bls.n	8001048 <__udivmoddi4+0x2b0>
 8000fec:	3802      	subs	r0, #2
 8000fee:	4461      	add	r1, ip
 8000ff0:	1b49      	subs	r1, r1, r5
 8000ff2:	b292      	uxth	r2, r2
 8000ff4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ff8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	fb05 f10e 	mul.w	r1, r5, lr
 8001004:	4291      	cmp	r1, r2
 8001006:	d908      	bls.n	800101a <__udivmoddi4+0x282>
 8001008:	eb1c 0202 	adds.w	r2, ip, r2
 800100c:	f105 38ff 	add.w	r8, r5, #4294967295
 8001010:	d216      	bcs.n	8001040 <__udivmoddi4+0x2a8>
 8001012:	4291      	cmp	r1, r2
 8001014:	d914      	bls.n	8001040 <__udivmoddi4+0x2a8>
 8001016:	3d02      	subs	r5, #2
 8001018:	4462      	add	r2, ip
 800101a:	1a52      	subs	r2, r2, r1
 800101c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001020:	e738      	b.n	8000e94 <__udivmoddi4+0xfc>
 8001022:	4631      	mov	r1, r6
 8001024:	4630      	mov	r0, r6
 8001026:	e708      	b.n	8000e3a <__udivmoddi4+0xa2>
 8001028:	4639      	mov	r1, r7
 800102a:	e6e6      	b.n	8000dfa <__udivmoddi4+0x62>
 800102c:	4610      	mov	r0, r2
 800102e:	e6fb      	b.n	8000e28 <__udivmoddi4+0x90>
 8001030:	4548      	cmp	r0, r9
 8001032:	d2a9      	bcs.n	8000f88 <__udivmoddi4+0x1f0>
 8001034:	ebb9 0802 	subs.w	r8, r9, r2
 8001038:	eb65 0e0c 	sbc.w	lr, r5, ip
 800103c:	3b01      	subs	r3, #1
 800103e:	e7a3      	b.n	8000f88 <__udivmoddi4+0x1f0>
 8001040:	4645      	mov	r5, r8
 8001042:	e7ea      	b.n	800101a <__udivmoddi4+0x282>
 8001044:	462b      	mov	r3, r5
 8001046:	e794      	b.n	8000f72 <__udivmoddi4+0x1da>
 8001048:	4640      	mov	r0, r8
 800104a:	e7d1      	b.n	8000ff0 <__udivmoddi4+0x258>
 800104c:	46d0      	mov	r8, sl
 800104e:	e77b      	b.n	8000f48 <__udivmoddi4+0x1b0>
 8001050:	3d02      	subs	r5, #2
 8001052:	4462      	add	r2, ip
 8001054:	e732      	b.n	8000ebc <__udivmoddi4+0x124>
 8001056:	4608      	mov	r0, r1
 8001058:	e70a      	b.n	8000e70 <__udivmoddi4+0xd8>
 800105a:	4464      	add	r4, ip
 800105c:	3802      	subs	r0, #2
 800105e:	e742      	b.n	8000ee6 <__udivmoddi4+0x14e>

08001060 <__aeabi_idiv0>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <GPSSPEED_voidBuildMsg>:
#include <stdio.h>
#include "Build_msg.h"


void GPSSPEED_voidBuildMsg(uint8_t* Msg_Array,double Copy_doubleGPS_Longitude,double Copy_doubleGPS_Latitude,uint16_t Copy_uint16Speed)
{
 8001064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001068:	b092      	sub	sp, #72	; 0x48
 800106a:	af02      	add	r7, sp, #8
 800106c:	6178      	str	r0, [r7, #20]
 800106e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001072:	ed87 1b00 	vstr	d1, [r7]
 8001076:	460b      	mov	r3, r1
 8001078:	827b      	strh	r3, [r7, #18]
 800107a:	466b      	mov	r3, sp
 800107c:	469a      	mov	sl, r3

	uint8_t Local_uint8LatitudeArr[11];
	uint8_t Local_uint8LongitudeArr[11];
	uint8_t Local_uint8SpeedElements;

	uint8_t Local_uint8Counter=0;
 800107e:	2300      	movs	r3, #0
 8001080:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if(Copy_uint16Speed<10)
 8001084:	8a7b      	ldrh	r3, [r7, #18]
 8001086:	2b09      	cmp	r3, #9
 8001088:	d803      	bhi.n	8001092 <GPSSPEED_voidBuildMsg+0x2e>
	{
		Local_uint8SpeedElements=1;
 800108a:	2301      	movs	r3, #1
 800108c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001090:	e014      	b.n	80010bc <GPSSPEED_voidBuildMsg+0x58>
	}
	else if(Copy_uint16Speed<100)
 8001092:	8a7b      	ldrh	r3, [r7, #18]
 8001094:	2b63      	cmp	r3, #99	; 0x63
 8001096:	d803      	bhi.n	80010a0 <GPSSPEED_voidBuildMsg+0x3c>
	{
		Local_uint8SpeedElements=2;
 8001098:	2302      	movs	r3, #2
 800109a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800109e:	e00d      	b.n	80010bc <GPSSPEED_voidBuildMsg+0x58>
	}
	else if((Copy_uint16Speed>100) && (Copy_uint16Speed<1000))
 80010a0:	8a7b      	ldrh	r3, [r7, #18]
 80010a2:	2b64      	cmp	r3, #100	; 0x64
 80010a4:	d907      	bls.n	80010b6 <GPSSPEED_voidBuildMsg+0x52>
 80010a6:	8a7b      	ldrh	r3, [r7, #18]
 80010a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010ac:	d203      	bcs.n	80010b6 <GPSSPEED_voidBuildMsg+0x52>
	{
		Local_uint8SpeedElements=3;
 80010ae:	2303      	movs	r3, #3
 80010b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80010b4:	e002      	b.n	80010bc <GPSSPEED_voidBuildMsg+0x58>
	}
	else
	{
		Local_uint8SpeedElements=4;
 80010b6:	2304      	movs	r3, #4
 80010b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}
	uint8_t Local_uint8SpeedArr[Local_uint8SpeedElements+1];
 80010bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010c0:	1c5e      	adds	r6, r3, #1
 80010c2:	1e73      	subs	r3, r6, #1
 80010c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80010c6:	4632      	mov	r2, r6
 80010c8:	2300      	movs	r3, #0
 80010ca:	4690      	mov	r8, r2
 80010cc:	4699      	mov	r9, r3
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010e2:	4632      	mov	r2, r6
 80010e4:	2300      	movs	r3, #0
 80010e6:	4614      	mov	r4, r2
 80010e8:	461d      	mov	r5, r3
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	f04f 0300 	mov.w	r3, #0
 80010f2:	00eb      	lsls	r3, r5, #3
 80010f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80010f8:	00e2      	lsls	r2, r4, #3
 80010fa:	4633      	mov	r3, r6
 80010fc:	3307      	adds	r3, #7
 80010fe:	08db      	lsrs	r3, r3, #3
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	ebad 0d03 	sub.w	sp, sp, r3
 8001106:	ab02      	add	r3, sp, #8
 8001108:	3300      	adds	r3, #0
 800110a:	637b      	str	r3, [r7, #52]	; 0x34

	/*Putting the lat and lon in a string form to be sent to the esp*/
	snprintf(&Local_uint8LongitudeArr,sizeof(Local_uint8LongitudeArr),"%.6f",Copy_doubleGPS_Longitude);
 800110c:	f107 001c 	add.w	r0, r7, #28
 8001110:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001114:	e9cd 2300 	strd	r2, r3, [sp]
 8001118:	4a50      	ldr	r2, [pc, #320]	; (800125c <GPSSPEED_voidBuildMsg+0x1f8>)
 800111a:	210b      	movs	r1, #11
 800111c:	f00c fbc6 	bl	800d8ac <sniprintf>
	snprintf(&Local_uint8LatitudeArr,sizeof(Local_uint8LatitudeArr),"%.6f",Copy_doubleGPS_Latitude);
 8001120:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001124:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001128:	e9cd 2300 	strd	r2, r3, [sp]
 800112c:	4a4b      	ldr	r2, [pc, #300]	; (800125c <GPSSPEED_voidBuildMsg+0x1f8>)
 800112e:	210b      	movs	r1, #11
 8001130:	f00c fbbc 	bl	800d8ac <sniprintf>

	snprintf(&Local_uint8SpeedArr,sizeof(Local_uint8SpeedArr),"%d",Copy_uint16Speed);
 8001134:	4631      	mov	r1, r6
 8001136:	8a7b      	ldrh	r3, [r7, #18]
 8001138:	4a49      	ldr	r2, [pc, #292]	; (8001260 <GPSSPEED_voidBuildMsg+0x1fc>)
 800113a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800113c:	f00c fbb6 	bl	800d8ac <sniprintf>

	Msg_Array[0]='#';
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	2223      	movs	r2, #35	; 0x23
 8001144:	701a      	strb	r2, [r3, #0]
	Msg_Array[1]=Local_uint8LongitudeArr[0];
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	3301      	adds	r3, #1
 800114a:	7f3a      	ldrb	r2, [r7, #28]
 800114c:	701a      	strb	r2, [r3, #0]
	Msg_Array[2]=Local_uint8LongitudeArr[1];
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3302      	adds	r3, #2
 8001152:	7f7a      	ldrb	r2, [r7, #29]
 8001154:	701a      	strb	r2, [r3, #0]
	Msg_Array[3]=Local_uint8LongitudeArr[2];
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	3303      	adds	r3, #3
 800115a:	7fba      	ldrb	r2, [r7, #30]
 800115c:	701a      	strb	r2, [r3, #0]
	Msg_Array[4]=Local_uint8LongitudeArr[3];
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	3304      	adds	r3, #4
 8001162:	7ffa      	ldrb	r2, [r7, #31]
 8001164:	701a      	strb	r2, [r3, #0]

	Msg_Array[5]=Local_uint8LongitudeArr[4];
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	3305      	adds	r3, #5
 800116a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800116e:	701a      	strb	r2, [r3, #0]
	Msg_Array[6]=Local_uint8LongitudeArr[5];
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	3306      	adds	r3, #6
 8001174:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001178:	701a      	strb	r2, [r3, #0]
	Msg_Array[7]=Local_uint8LongitudeArr[6];
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3307      	adds	r3, #7
 800117e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001182:	701a      	strb	r2, [r3, #0]
	Msg_Array[8]=Local_uint8LongitudeArr[7];
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3308      	adds	r3, #8
 8001188:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800118c:	701a      	strb	r2, [r3, #0]
	Msg_Array[9]=Local_uint8LongitudeArr[8];
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3309      	adds	r3, #9
 8001192:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001196:	701a      	strb	r2, [r3, #0]

	Msg_Array[10]='*';
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	330a      	adds	r3, #10
 800119c:	222a      	movs	r2, #42	; 0x2a
 800119e:	701a      	strb	r2, [r3, #0]

	Msg_Array[11]= Local_uint8LatitudeArr[0];
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	330b      	adds	r3, #11
 80011a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80011a8:	701a      	strb	r2, [r3, #0]
	Msg_Array[12]= Local_uint8LatitudeArr[1];
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	330c      	adds	r3, #12
 80011ae:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80011b2:	701a      	strb	r2, [r3, #0]
	Msg_Array[13]= Local_uint8LatitudeArr[2];
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	330d      	adds	r3, #13
 80011b8:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80011bc:	701a      	strb	r2, [r3, #0]
	Msg_Array[14]= Local_uint8LatitudeArr[3];
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	330e      	adds	r3, #14
 80011c2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80011c6:	701a      	strb	r2, [r3, #0]
	Msg_Array[15]= Local_uint8LatitudeArr[4];
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	330f      	adds	r3, #15
 80011cc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80011d0:	701a      	strb	r2, [r3, #0]
	Msg_Array[16]= Local_uint8LatitudeArr[5];
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	3310      	adds	r3, #16
 80011d6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80011da:	701a      	strb	r2, [r3, #0]
	Msg_Array[17]= Local_uint8LatitudeArr[6];
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	3311      	adds	r3, #17
 80011e0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80011e4:	701a      	strb	r2, [r3, #0]
	Msg_Array[18]= Local_uint8LatitudeArr[7];
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3312      	adds	r3, #18
 80011ea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80011ee:	701a      	strb	r2, [r3, #0]
	Msg_Array[19]= Local_uint8LatitudeArr[8];
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	3313      	adds	r3, #19
 80011f4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80011f8:	701a      	strb	r2, [r3, #0]

	Msg_Array[20]= '&';
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	3314      	adds	r3, #20
 80011fe:	2226      	movs	r2, #38	; 0x26
 8001200:	701a      	strb	r2, [r3, #0]


	for(Local_uint8Counter;Local_uint8Counter<Local_uint8SpeedElements;Local_uint8Counter++)
 8001202:	e00f      	b.n	8001224 <GPSSPEED_voidBuildMsg+0x1c0>
	{
		Msg_Array[21+Local_uint8Counter]=Local_uint8SpeedArr[Local_uint8Counter];
 8001204:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001208:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800120c:	3315      	adds	r3, #21
 800120e:	4619      	mov	r1, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	440b      	add	r3, r1
 8001214:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001216:	5c8a      	ldrb	r2, [r1, r2]
 8001218:	701a      	strb	r2, [r3, #0]
	for(Local_uint8Counter;Local_uint8Counter<Local_uint8SpeedElements;Local_uint8Counter++)
 800121a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800121e:	3301      	adds	r3, #1
 8001220:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001224:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001228:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800122c:	429a      	cmp	r2, r3
 800122e:	d3e9      	bcc.n	8001204 <GPSSPEED_voidBuildMsg+0x1a0>
	}

	Msg_Array[21+Local_uint8Counter]='^';
 8001230:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001234:	3315      	adds	r3, #21
 8001236:	461a      	mov	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	4413      	add	r3, r2
 800123c:	225e      	movs	r2, #94	; 0x5e
 800123e:	701a      	strb	r2, [r3, #0]
	Msg_Array[22+Local_uint8Counter]='!';
 8001240:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001244:	3316      	adds	r3, #22
 8001246:	461a      	mov	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	4413      	add	r3, r2
 800124c:	2221      	movs	r2, #33	; 0x21
 800124e:	701a      	strb	r2, [r3, #0]
 8001250:	46d5      	mov	sp, sl

}
 8001252:	bf00      	nop
 8001254:	3740      	adds	r7, #64	; 0x40
 8001256:	46bd      	mov	sp, r7
 8001258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800125c:	08010ac8 	.word	0x08010ac8
 8001260:	08010ad0 	.word	0x08010ad0

08001264 <Buzzer_voidHighSound>:
#endif


}
void Buzzer_voidHighSound(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0


#endif
#elif Buzzer_Timer_Connected == TIMER12
#if Buzzer_TimerChannel_Connected == TIMER_CHANNEL_1
	TIM12->CCR1=99;
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <Buzzer_voidHighSound+0x18>)
 800126a:	2263      	movs	r2, #99	; 0x63
 800126c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);
 800126e:	2100      	movs	r1, #0
 8001270:	4803      	ldr	r0, [pc, #12]	; (8001280 <Buzzer_voidHighSound+0x1c>)
 8001272:	f004 fdb5 	bl	8005de0 <HAL_TIM_PWM_Start>

#endif



}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40001800 	.word	0x40001800
 8001280:	200006b4 	.word	0x200006b4

08001284 <Buzzer_voidStop>:

void Buzzer_voidStop(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
#endif

#elif Buzzer_Timer_Connected == TIMER12
#if Buzzer_TimerChannel_Connected == TIMER_CHANNEL_1

	HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 8001288:	2100      	movs	r1, #0
 800128a:	4802      	ldr	r0, [pc, #8]	; (8001294 <Buzzer_voidStop+0x10>)
 800128c:	f004 fe70 	bl	8005f70 <HAL_TIM_PWM_Stop>




#endif
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200006b4 	.word	0x200006b4

08001298 <HAL_TIM_IC_CaptureCallback>:

uint32_t edges_counter = 0;

/***************************************Interrupts_Call_Backs********************************************************/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 || htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012a8:	d10c      	bne.n	80012c4 <HAL_TIM_IC_CaptureCallback+0x2c>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7f1b      	ldrb	r3, [r3, #28]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d003      	beq.n	80012ba <HAL_TIM_IC_CaptureCallback+0x22>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	7f1b      	ldrb	r3, [r3, #28]
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d104      	bne.n	80012c4 <HAL_TIM_IC_CaptureCallback+0x2c>
	{
		edges_counter++;
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <HAL_TIM_IC_CaptureCallback+0x38>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	3301      	adds	r3, #1
 80012c0:	4a03      	ldr	r2, [pc, #12]	; (80012d0 <HAL_TIM_IC_CaptureCallback+0x38>)
 80012c2:	6013      	str	r3, [r2, #0]
	}
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	20000214 	.word	0x20000214

080012d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af02      	add	r7, sp, #8
 80012da:	6078      	str	r0, [r7, #4]
	/*BT interrupt*/
	if(huart->Instance==USART3)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a21      	ldr	r2, [pc, #132]	; (8001368 <HAL_UART_RxCpltCallback+0x94>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d110      	bne.n	8001308 <HAL_UART_RxCpltCallback+0x34>
	{
		/* Reactivating the interrupt */
		HAL_UART_Receive_IT(&huart3, &received_char, 1);
 80012e6:	2201      	movs	r2, #1
 80012e8:	4920      	ldr	r1, [pc, #128]	; (800136c <HAL_UART_RxCpltCallback+0x98>)
 80012ea:	4821      	ldr	r0, [pc, #132]	; (8001370 <HAL_UART_RxCpltCallback+0x9c>)
 80012ec:	f005 ffbb 	bl	8007266 <HAL_UART_Receive_IT>

		/*Give the Notification to the CarControl task*/
		xTaskNotifyFromISR(Handle_CarControl,NULL,eNoAction,NULL);
 80012f0:	4b20      	ldr	r3, [pc, #128]	; (8001374 <HAL_UART_RxCpltCallback+0xa0>)
 80012f2:	6818      	ldr	r0, [r3, #0]
 80012f4:	2300      	movs	r3, #0
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	2300      	movs	r3, #0
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2300      	movs	r3, #0
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	f008 ff4d 	bl	800a1a0 <xTaskGenericNotifyFromISR>
		/* Give the Notification to the Receive Raspberry task */
		xTaskNotifyFromISR(Handle_Rasp_ReceiveData,NULL,eNoAction,NULL);
	}
	else{/* Do Nothing */}

}
 8001306:	e02a      	b.n	800135e <HAL_UART_RxCpltCallback+0x8a>
	else if(huart->Instance==UART5)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a1a      	ldr	r2, [pc, #104]	; (8001378 <HAL_UART_RxCpltCallback+0xa4>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d110      	bne.n	8001334 <HAL_UART_RxCpltCallback+0x60>
		HAL_UART_Receive_IT(&huart5,&ESP_Recieved_Char,2);
 8001312:	2202      	movs	r2, #2
 8001314:	4919      	ldr	r1, [pc, #100]	; (800137c <HAL_UART_RxCpltCallback+0xa8>)
 8001316:	481a      	ldr	r0, [pc, #104]	; (8001380 <HAL_UART_RxCpltCallback+0xac>)
 8001318:	f005 ffa5 	bl	8007266 <HAL_UART_Receive_IT>
		xTaskNotifyFromISR(Handle_ESP_Receive,NULL,eNoAction,NULL);
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <HAL_UART_RxCpltCallback+0xb0>)
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	2300      	movs	r3, #0
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	2300      	movs	r3, #0
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2300      	movs	r3, #0
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	f008 ff37 	bl	800a1a0 <xTaskGenericNotifyFromISR>
}
 8001332:	e014      	b.n	800135e <HAL_UART_RxCpltCallback+0x8a>
	else if (huart->Instance==USART6)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a13      	ldr	r2, [pc, #76]	; (8001388 <HAL_UART_RxCpltCallback+0xb4>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d10f      	bne.n	800135e <HAL_UART_RxCpltCallback+0x8a>
		HAL_UART_Receive_IT(&huart6,&Rasp_Recieved_Char,1);
 800133e:	2201      	movs	r2, #1
 8001340:	4912      	ldr	r1, [pc, #72]	; (800138c <HAL_UART_RxCpltCallback+0xb8>)
 8001342:	4813      	ldr	r0, [pc, #76]	; (8001390 <HAL_UART_RxCpltCallback+0xbc>)
 8001344:	f005 ff8f 	bl	8007266 <HAL_UART_Receive_IT>
		xTaskNotifyFromISR(Handle_Rasp_ReceiveData,NULL,eNoAction,NULL);
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_UART_RxCpltCallback+0xc0>)
 800134a:	6818      	ldr	r0, [r3, #0]
 800134c:	2300      	movs	r3, #0
 800134e:	9301      	str	r3, [sp, #4]
 8001350:	2300      	movs	r3, #0
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2300      	movs	r3, #0
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	f008 ff21 	bl	800a1a0 <xTaskGenericNotifyFromISR>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40004800 	.word	0x40004800
 800136c:	20000850 	.word	0x20000850
 8001370:	200007c8 	.word	0x200007c8
 8001374:	20000854 	.word	0x20000854
 8001378:	40005000 	.word	0x40005000
 800137c:	20000851 	.word	0x20000851
 8001380:	20000740 	.word	0x20000740
 8001384:	20000864 	.word	0x20000864
 8001388:	40011400 	.word	0x40011400
 800138c:	20000852 	.word	0x20000852
 8001390:	2000080c 	.word	0x2000080c
 8001394:	20000868 	.word	0x20000868

08001398 <vApplicationIdleHook>:

/*********************************************Application_Hook*************************************************************/
void vApplicationIdleHook(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	/*The processor will go to sleep in the IDLE Task*/
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800139c:	2101      	movs	r1, #1
 800139e:	2000      	movs	r0, #0
 80013a0:	f003 fe5e 	bl	8005060 <HAL_PWR_EnterSLEEPMode>

}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <CallBack_TimerLightStop>:

/*********************************************SW_Timers_CallBacks*********************************************************/
void CallBack_TimerLightStop(TimerHandle_t xTimer)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	if(Global_LightStatus == LIGHT_ON_STATUS)
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <CallBack_TimerLightStop+0x34>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d106      	bne.n	80013c6 <CallBack_TimerLightStop+0x1e>
	{
		/* If the still the user didn't turn off the light source it will turn off automatically */

		/* Taking the action of Turning the light beam off */
		Light_OFF();
 80013b8:	f000 f94a 	bl	8001650 <Light_OFF>

		/* Stopping the buzzer */
		Buzzer_voidStop();
 80013bc:	f7ff ff62 	bl	8001284 <Buzzer_voidStop>

		/* Clearing the LCD */
		LCD_voidClearDisplay();
 80013c0:	f000 fc58 	bl	8001c74 <LCD_voidClearDisplay>

	}



}
 80013c4:	e005      	b.n	80013d2 <CallBack_TimerLightStop+0x2a>
		Light_OFF();
 80013c6:	f000 f943 	bl	8001650 <Light_OFF>
		Buzzer_voidStop();
 80013ca:	f7ff ff5b 	bl	8001284 <Buzzer_voidStop>
		LCD_voidClearDisplay();
 80013ce:	f000 fc51 	bl	8001c74 <LCD_voidClearDisplay>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000323 	.word	0x20000323

080013e0 <Car_Move_Forward_High_Speed>:

void Motor4_Rotate_CW(void);
void Motor4_Rotate_CCW(void);


void Car_Move_Forward_High_Speed(void){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	/*First Disabling the two motors*/
	Motors_Disabling();
 80013e4:	f000 f940 	bl	8001668 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Assigning the duty cycle*/
	PWM_Motor_1=HIGH_SPEED;
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <Car_Move_Forward_High_Speed+0x54>)
 80013ea:	2220      	movs	r2, #32
 80013ec:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=HIGH_SPEED;
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <Car_Move_Forward_High_Speed+0x54>)
 80013f0:	2220      	movs	r2, #32
 80013f2:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=HIGH_SPEED;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <Car_Move_Forward_High_Speed+0x54>)
 80013f6:	2220      	movs	r2, #32
 80013f8:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=HIGH_SPEED;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <Car_Move_Forward_High_Speed+0x54>)
 80013fc:	2220      	movs	r2, #32
 80013fe:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/
	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 8001400:	2100      	movs	r1, #0
 8001402:	480d      	ldr	r0, [pc, #52]	; (8001438 <Car_Move_Forward_High_Speed+0x58>)
 8001404:	f004 fcec 	bl	8005de0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 8001408:	2104      	movs	r1, #4
 800140a:	480b      	ldr	r0, [pc, #44]	; (8001438 <Car_Move_Forward_High_Speed+0x58>)
 800140c:	f004 fce8 	bl	8005de0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 8001410:	2108      	movs	r1, #8
 8001412:	4809      	ldr	r0, [pc, #36]	; (8001438 <Car_Move_Forward_High_Speed+0x58>)
 8001414:	f004 fce4 	bl	8005de0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 8001418:	210c      	movs	r1, #12
 800141a:	4807      	ldr	r0, [pc, #28]	; (8001438 <Car_Move_Forward_High_Speed+0x58>)
 800141c:	f004 fce0 	bl	8005de0 <HAL_TIM_PWM_Start>

	/*Making Both motors rotate at the same direction*/
	Motor1_Rotate_CW();
 8001420:	f000 f956 	bl	80016d0 <Motor1_Rotate_CW>
	Motor2_Rotate_CW();
 8001424:	f000 f978 	bl	8001718 <Motor2_Rotate_CW>
	Motor3_Rotate_CW();
 8001428:	f000 f996 	bl	8001758 <Motor3_Rotate_CW>
	Motor4_Rotate_CW();
 800142c:	f000 f9b8 	bl	80017a0 <Motor4_Rotate_CW>
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40000400 	.word	0x40000400
 8001438:	20000624 	.word	0x20000624

0800143c <Car_Move_Backward>:
	Motor2_Rotate_CW();
	Motor3_Rotate_CW();
	Motor4_Rotate_CW();
}
void Car_Move_Backward(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	/*First Disabling the two motors*/
	Motors_Disabling();
 8001440:	f000 f912 	bl	8001668 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Assigning the duty cycle*/
	PWM_Motor_1=HIGH_SPEED;
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <Car_Move_Backward+0x54>)
 8001446:	2220      	movs	r2, #32
 8001448:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=HIGH_SPEED;
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <Car_Move_Backward+0x54>)
 800144c:	2220      	movs	r2, #32
 800144e:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=HIGH_SPEED;
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <Car_Move_Backward+0x54>)
 8001452:	2220      	movs	r2, #32
 8001454:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=HIGH_SPEED;
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <Car_Move_Backward+0x54>)
 8001458:	2220      	movs	r2, #32
 800145a:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/
	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 800145c:	2100      	movs	r1, #0
 800145e:	480d      	ldr	r0, [pc, #52]	; (8001494 <Car_Move_Backward+0x58>)
 8001460:	f004 fcbe 	bl	8005de0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 8001464:	2104      	movs	r1, #4
 8001466:	480b      	ldr	r0, [pc, #44]	; (8001494 <Car_Move_Backward+0x58>)
 8001468:	f004 fcba 	bl	8005de0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 800146c:	2108      	movs	r1, #8
 800146e:	4809      	ldr	r0, [pc, #36]	; (8001494 <Car_Move_Backward+0x58>)
 8001470:	f004 fcb6 	bl	8005de0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 8001474:	210c      	movs	r1, #12
 8001476:	4807      	ldr	r0, [pc, #28]	; (8001494 <Car_Move_Backward+0x58>)
 8001478:	f004 fcb2 	bl	8005de0 <HAL_TIM_PWM_Start>

	/*Making Both motors rotate at the same  direction*/
	Motor1_Rotate_CCW();
 800147c:	f000 f93a 	bl	80016f4 <Motor1_Rotate_CCW>
	Motor2_Rotate_CCW();
 8001480:	f000 f95a 	bl	8001738 <Motor2_Rotate_CCW>
	Motor3_Rotate_CCW();
 8001484:	f000 f97a 	bl	800177c <Motor3_Rotate_CCW>
	Motor4_Rotate_CCW();
 8001488:	f000 f99c 	bl	80017c4 <Motor4_Rotate_CCW>
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40000400 	.word	0x40000400
 8001494:	20000624 	.word	0x20000624

08001498 <Car_Rotate_Right>:

void Car_Rotate_Right(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
	/*First Disabling the two motors*/
	Motors_Disabling();
 800149c:	f000 f8e4 	bl	8001668 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Assigning the duty cycle*/
	PWM_Motor_1=HIGH_SPEED;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <Car_Rotate_Right+0x54>)
 80014a2:	2220      	movs	r2, #32
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=HIGH_SPEED;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <Car_Rotate_Right+0x54>)
 80014a8:	2220      	movs	r2, #32
 80014aa:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=HIGH_SPEED;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <Car_Rotate_Right+0x54>)
 80014ae:	2220      	movs	r2, #32
 80014b0:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=HIGH_SPEED;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <Car_Rotate_Right+0x54>)
 80014b4:	2220      	movs	r2, #32
 80014b6:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/
	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 80014b8:	2100      	movs	r1, #0
 80014ba:	480d      	ldr	r0, [pc, #52]	; (80014f0 <Car_Rotate_Right+0x58>)
 80014bc:	f004 fc90 	bl	8005de0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 80014c0:	2104      	movs	r1, #4
 80014c2:	480b      	ldr	r0, [pc, #44]	; (80014f0 <Car_Rotate_Right+0x58>)
 80014c4:	f004 fc8c 	bl	8005de0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 80014c8:	2108      	movs	r1, #8
 80014ca:	4809      	ldr	r0, [pc, #36]	; (80014f0 <Car_Rotate_Right+0x58>)
 80014cc:	f004 fc88 	bl	8005de0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 80014d0:	210c      	movs	r1, #12
 80014d2:	4807      	ldr	r0, [pc, #28]	; (80014f0 <Car_Rotate_Right+0x58>)
 80014d4:	f004 fc84 	bl	8005de0 <HAL_TIM_PWM_Start>

	/*Making Both motors rotate at opposite direction*/
	Motor1_Rotate_CW();
 80014d8:	f000 f8fa 	bl	80016d0 <Motor1_Rotate_CW>
	Motor2_Rotate_CCW();
 80014dc:	f000 f92c 	bl	8001738 <Motor2_Rotate_CCW>
	Motor3_Rotate_CW();
 80014e0:	f000 f93a 	bl	8001758 <Motor3_Rotate_CW>
	Motor4_Rotate_CCW();
 80014e4:	f000 f96e 	bl	80017c4 <Motor4_Rotate_CCW>
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40000400 	.word	0x40000400
 80014f0:	20000624 	.word	0x20000624

080014f4 <Car_Rotate_Left>:
void Car_Rotate_Left(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	/*First Disabling the two motors*/
	Motors_Disabling();
 80014f8:	f000 f8b6 	bl	8001668 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Assigning the duty cycle*/
	PWM_Motor_1=LOW_SPEED;
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <Car_Rotate_Left+0x54>)
 80014fe:	221e      	movs	r2, #30
 8001500:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=LOW_SPEED;
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <Car_Rotate_Left+0x54>)
 8001504:	221e      	movs	r2, #30
 8001506:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=LOW_SPEED;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <Car_Rotate_Left+0x54>)
 800150a:	221e      	movs	r2, #30
 800150c:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=LOW_SPEED;
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <Car_Rotate_Left+0x54>)
 8001510:	221e      	movs	r2, #30
 8001512:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/
	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 8001514:	2100      	movs	r1, #0
 8001516:	480d      	ldr	r0, [pc, #52]	; (800154c <Car_Rotate_Left+0x58>)
 8001518:	f004 fc62 	bl	8005de0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 800151c:	2104      	movs	r1, #4
 800151e:	480b      	ldr	r0, [pc, #44]	; (800154c <Car_Rotate_Left+0x58>)
 8001520:	f004 fc5e 	bl	8005de0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 8001524:	2108      	movs	r1, #8
 8001526:	4809      	ldr	r0, [pc, #36]	; (800154c <Car_Rotate_Left+0x58>)
 8001528:	f004 fc5a 	bl	8005de0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 800152c:	210c      	movs	r1, #12
 800152e:	4807      	ldr	r0, [pc, #28]	; (800154c <Car_Rotate_Left+0x58>)
 8001530:	f004 fc56 	bl	8005de0 <HAL_TIM_PWM_Start>

	/*Making Both motors rotate at opposite direction*/
	Motor1_Rotate_CCW();
 8001534:	f000 f8de 	bl	80016f4 <Motor1_Rotate_CCW>
	Motor2_Rotate_CW();
 8001538:	f000 f8ee 	bl	8001718 <Motor2_Rotate_CW>
	Motor3_Rotate_CCW();
 800153c:	f000 f91e 	bl	800177c <Motor3_Rotate_CCW>
	Motor4_Rotate_CW();
 8001540:	f000 f92e 	bl	80017a0 <Motor4_Rotate_CW>

}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40000400 	.word	0x40000400
 800154c:	20000624 	.word	0x20000624

08001550 <Car_Rotate_RightForward>:
void Car_Rotate_RightForward(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	/*First Disabling the Four motors*/
	Motors_Disabling();
 8001554:	f000 f888 	bl	8001668 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Right motors rotate high speed and the Left with low speed*/
	/*Assigning the duty cycle*/

	PWM_Motor_1=LOW_SPEED;
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <Car_Rotate_RightForward+0x54>)
 800155a:	221e      	movs	r2, #30
 800155c:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=HIGH_SPEED;
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <Car_Rotate_RightForward+0x54>)
 8001560:	2220      	movs	r2, #32
 8001562:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=LOW_SPEED;
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <Car_Rotate_RightForward+0x54>)
 8001566:	221e      	movs	r2, #30
 8001568:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=HIGH_SPEED;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <Car_Rotate_RightForward+0x54>)
 800156c:	2220      	movs	r2, #32
 800156e:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/

	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 8001570:	2100      	movs	r1, #0
 8001572:	480d      	ldr	r0, [pc, #52]	; (80015a8 <Car_Rotate_RightForward+0x58>)
 8001574:	f004 fc34 	bl	8005de0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 8001578:	2104      	movs	r1, #4
 800157a:	480b      	ldr	r0, [pc, #44]	; (80015a8 <Car_Rotate_RightForward+0x58>)
 800157c:	f004 fc30 	bl	8005de0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 8001580:	2108      	movs	r1, #8
 8001582:	4809      	ldr	r0, [pc, #36]	; (80015a8 <Car_Rotate_RightForward+0x58>)
 8001584:	f004 fc2c 	bl	8005de0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 8001588:	210c      	movs	r1, #12
 800158a:	4807      	ldr	r0, [pc, #28]	; (80015a8 <Car_Rotate_RightForward+0x58>)
 800158c:	f004 fc28 	bl	8005de0 <HAL_TIM_PWM_Start>

	/*Making  motors rotate at opposite direction*/
	Motor1_Rotate_CW();
 8001590:	f000 f89e 	bl	80016d0 <Motor1_Rotate_CW>
	Motor2_Rotate_CW();
 8001594:	f000 f8c0 	bl	8001718 <Motor2_Rotate_CW>
	Motor3_Rotate_CW();
 8001598:	f000 f8de 	bl	8001758 <Motor3_Rotate_CW>
	Motor4_Rotate_CW();
 800159c:	f000 f900 	bl	80017a0 <Motor4_Rotate_CW>



}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40000400 	.word	0x40000400
 80015a8:	20000624 	.word	0x20000624

080015ac <Car_Rotate_LeftForward>:
void Car_Rotate_LeftForward(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0

	/*First Disabling the Four motors*/
	Motors_Disabling();
 80015b0:	f000 f85a 	bl	8001668 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Right motors rotate high speed and the Left with low speed*/
	/*Assigning the duty cycle*/

	PWM_Motor_1=HIGH_SPEED;
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <Car_Rotate_LeftForward+0x54>)
 80015b6:	2220      	movs	r2, #32
 80015b8:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=LOW_SPEED;
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <Car_Rotate_LeftForward+0x54>)
 80015bc:	221e      	movs	r2, #30
 80015be:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=HIGH_SPEED;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <Car_Rotate_LeftForward+0x54>)
 80015c2:	2220      	movs	r2, #32
 80015c4:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=LOW_SPEED;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <Car_Rotate_LeftForward+0x54>)
 80015c8:	221e      	movs	r2, #30
 80015ca:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/

	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 80015cc:	2100      	movs	r1, #0
 80015ce:	480d      	ldr	r0, [pc, #52]	; (8001604 <Car_Rotate_LeftForward+0x58>)
 80015d0:	f004 fc06 	bl	8005de0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 80015d4:	2104      	movs	r1, #4
 80015d6:	480b      	ldr	r0, [pc, #44]	; (8001604 <Car_Rotate_LeftForward+0x58>)
 80015d8:	f004 fc02 	bl	8005de0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 80015dc:	2108      	movs	r1, #8
 80015de:	4809      	ldr	r0, [pc, #36]	; (8001604 <Car_Rotate_LeftForward+0x58>)
 80015e0:	f004 fbfe 	bl	8005de0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 80015e4:	210c      	movs	r1, #12
 80015e6:	4807      	ldr	r0, [pc, #28]	; (8001604 <Car_Rotate_LeftForward+0x58>)
 80015e8:	f004 fbfa 	bl	8005de0 <HAL_TIM_PWM_Start>

	/*Making  motors rotate at opposite direction*/
	Motor1_Rotate_CW();
 80015ec:	f000 f870 	bl	80016d0 <Motor1_Rotate_CW>
	Motor2_Rotate_CW();
 80015f0:	f000 f892 	bl	8001718 <Motor2_Rotate_CW>
	Motor3_Rotate_CW();
 80015f4:	f000 f8b0 	bl	8001758 <Motor3_Rotate_CW>
	Motor4_Rotate_CW();
 80015f8:	f000 f8d2 	bl	80017a0 <Motor4_Rotate_CW>




}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40000400 	.word	0x40000400
 8001604:	20000624 	.word	0x20000624

08001608 <Car_Stop>:
void Car_Stop(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	/*Stopping the PWM generation on both motors*/
	HAL_TIM_PWM_Stop(Motor1_Timer, Motor1_Channel);
 800160c:	2100      	movs	r1, #0
 800160e:	4809      	ldr	r0, [pc, #36]	; (8001634 <Car_Stop+0x2c>)
 8001610:	f004 fcae 	bl	8005f70 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(Motor2_Timer, Motor2_Channel);
 8001614:	2104      	movs	r1, #4
 8001616:	4807      	ldr	r0, [pc, #28]	; (8001634 <Car_Stop+0x2c>)
 8001618:	f004 fcaa 	bl	8005f70 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(Motor3_Timer, Motor3_Channel);
 800161c:	2108      	movs	r1, #8
 800161e:	4805      	ldr	r0, [pc, #20]	; (8001634 <Car_Stop+0x2c>)
 8001620:	f004 fca6 	bl	8005f70 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(Motor4_Timer, Motor4_Channel);
 8001624:	210c      	movs	r1, #12
 8001626:	4803      	ldr	r0, [pc, #12]	; (8001634 <Car_Stop+0x2c>)
 8001628:	f004 fca2 	bl	8005f70 <HAL_TIM_PWM_Stop>
	/*Disabling both motors*/
	Motors_Disabling();
 800162c:	f000 f81c 	bl	8001668 <Motors_Disabling>

}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000624 	.word	0x20000624

08001638 <Light_On>:

void Light_On(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11 ,GPIO_PIN_SET);
 800163c:	2201      	movs	r2, #1
 800163e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001642:	4802      	ldr	r0, [pc, #8]	; (800164c <Light_On+0x14>)
 8001644:	f003 f8a6 	bl	8004794 <HAL_GPIO_WritePin>
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40020000 	.word	0x40020000

08001650 <Light_OFF>:
void Light_OFF(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800165a:	4802      	ldr	r0, [pc, #8]	; (8001664 <Light_OFF+0x14>)
 800165c:	f003 f89a 	bl	8004794 <HAL_GPIO_WritePin>
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40020000 	.word	0x40020000

08001668 <Motors_Disabling>:



static void Motors_Disabling(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor1_Port, IN1, GPIO_PIN_RESET);
 800166c:	2200      	movs	r2, #0
 800166e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001672:	4815      	ldr	r0, [pc, #84]	; (80016c8 <Motors_Disabling+0x60>)
 8001674:	f003 f88e 	bl	8004794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor1_Port, IN2, GPIO_PIN_RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800167e:	4812      	ldr	r0, [pc, #72]	; (80016c8 <Motors_Disabling+0x60>)
 8001680:	f003 f888 	bl	8004794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_Port, IN3, GPIO_PIN_RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	2104      	movs	r1, #4
 8001688:	480f      	ldr	r0, [pc, #60]	; (80016c8 <Motors_Disabling+0x60>)
 800168a:	f003 f883 	bl	8004794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_Port, IN4, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	2108      	movs	r1, #8
 8001692:	480d      	ldr	r0, [pc, #52]	; (80016c8 <Motors_Disabling+0x60>)
 8001694:	f003 f87e 	bl	8004794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3_Port, IN5, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800169e:	480a      	ldr	r0, [pc, #40]	; (80016c8 <Motors_Disabling+0x60>)
 80016a0:	f003 f878 	bl	8004794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3_Port, IN6, GPIO_PIN_RESET);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2110      	movs	r1, #16
 80016a8:	4807      	ldr	r0, [pc, #28]	; (80016c8 <Motors_Disabling+0x60>)
 80016aa:	f003 f873 	bl	8004794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4_Port, IN7, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2120      	movs	r1, #32
 80016b2:	4806      	ldr	r0, [pc, #24]	; (80016cc <Motors_Disabling+0x64>)
 80016b4:	f003 f86e 	bl	8004794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4_Port, IN8, GPIO_PIN_RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016be:	4803      	ldr	r0, [pc, #12]	; (80016cc <Motors_Disabling+0x64>)
 80016c0:	f003 f868 	bl	8004794 <HAL_GPIO_WritePin>
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40020800 	.word	0x40020800
 80016cc:	40020400 	.word	0x40020400

080016d0 <Motor1_Rotate_CW>:
void Motor1_Rotate_CW(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Motor1_Port,IN1, GPIO_PIN_SET);
 80016d4:	2201      	movs	r2, #1
 80016d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <Motor1_Rotate_CW+0x20>)
 80016dc:	f003 f85a 	bl	8004794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor1_Port,IN2, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016e6:	4802      	ldr	r0, [pc, #8]	; (80016f0 <Motor1_Rotate_CW+0x20>)
 80016e8:	f003 f854 	bl	8004794 <HAL_GPIO_WritePin>
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40020800 	.word	0x40020800

080016f4 <Motor1_Rotate_CCW>:
void Motor1_Rotate_CCW(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor1_Port,IN1, GPIO_PIN_RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <Motor1_Rotate_CCW+0x20>)
 8001700:	f003 f848 	bl	8004794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor1_Port,IN2, GPIO_PIN_SET);
 8001704:	2201      	movs	r2, #1
 8001706:	f44f 7100 	mov.w	r1, #512	; 0x200
 800170a:	4802      	ldr	r0, [pc, #8]	; (8001714 <Motor1_Rotate_CCW+0x20>)
 800170c:	f003 f842 	bl	8004794 <HAL_GPIO_WritePin>
}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40020800 	.word	0x40020800

08001718 <Motor2_Rotate_CW>:
void Motor2_Rotate_CW(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Motor2_Port,IN3, GPIO_PIN_SET);
 800171c:	2201      	movs	r2, #1
 800171e:	2104      	movs	r1, #4
 8001720:	4804      	ldr	r0, [pc, #16]	; (8001734 <Motor2_Rotate_CW+0x1c>)
 8001722:	f003 f837 	bl	8004794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_Port,IN4, GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	2108      	movs	r1, #8
 800172a:	4802      	ldr	r0, [pc, #8]	; (8001734 <Motor2_Rotate_CW+0x1c>)
 800172c:	f003 f832 	bl	8004794 <HAL_GPIO_WritePin>
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40020800 	.word	0x40020800

08001738 <Motor2_Rotate_CCW>:
void Motor2_Rotate_CCW(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor2_Port,IN3, GPIO_PIN_RESET);
 800173c:	2200      	movs	r2, #0
 800173e:	2104      	movs	r1, #4
 8001740:	4804      	ldr	r0, [pc, #16]	; (8001754 <Motor2_Rotate_CCW+0x1c>)
 8001742:	f003 f827 	bl	8004794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_Port,IN4, GPIO_PIN_SET);
 8001746:	2201      	movs	r2, #1
 8001748:	2108      	movs	r1, #8
 800174a:	4802      	ldr	r0, [pc, #8]	; (8001754 <Motor2_Rotate_CCW+0x1c>)
 800174c:	f003 f822 	bl	8004794 <HAL_GPIO_WritePin>
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40020800 	.word	0x40020800

08001758 <Motor3_Rotate_CW>:




void Motor3_Rotate_CW(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Motor3_Port,IN5, GPIO_PIN_RESET);
 800175c:	2200      	movs	r2, #0
 800175e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <Motor3_Rotate_CW+0x20>)
 8001764:	f003 f816 	bl	8004794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3_Port,IN6, GPIO_PIN_SET);
 8001768:	2201      	movs	r2, #1
 800176a:	2110      	movs	r1, #16
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <Motor3_Rotate_CW+0x20>)
 800176e:	f003 f811 	bl	8004794 <HAL_GPIO_WritePin>
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40020800 	.word	0x40020800

0800177c <Motor3_Rotate_CCW>:
void Motor3_Rotate_CCW(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor3_Port,IN5, GPIO_PIN_SET);
 8001780:	2201      	movs	r2, #1
 8001782:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001786:	4805      	ldr	r0, [pc, #20]	; (800179c <Motor3_Rotate_CCW+0x20>)
 8001788:	f003 f804 	bl	8004794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3_Port,IN6, GPIO_PIN_RESET);
 800178c:	2200      	movs	r2, #0
 800178e:	2110      	movs	r1, #16
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <Motor3_Rotate_CCW+0x20>)
 8001792:	f002 ffff 	bl	8004794 <HAL_GPIO_WritePin>
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40020800 	.word	0x40020800

080017a0 <Motor4_Rotate_CW>:



void Motor4_Rotate_CW(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Motor4_Port,IN7, GPIO_PIN_RESET);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2120      	movs	r1, #32
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <Motor4_Rotate_CW+0x20>)
 80017aa:	f002 fff3 	bl	8004794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4_Port,IN8, GPIO_PIN_SET);
 80017ae:	2201      	movs	r2, #1
 80017b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <Motor4_Rotate_CW+0x20>)
 80017b6:	f002 ffed 	bl	8004794 <HAL_GPIO_WritePin>
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40020400 	.word	0x40020400

080017c4 <Motor4_Rotate_CCW>:
void Motor4_Rotate_CCW(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor4_Port,IN7, GPIO_PIN_SET);
 80017c8:	2201      	movs	r2, #1
 80017ca:	2120      	movs	r1, #32
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <Motor4_Rotate_CCW+0x20>)
 80017ce:	f002 ffe1 	bl	8004794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4_Port,IN8, GPIO_PIN_RESET);
 80017d2:	2200      	movs	r2, #0
 80017d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <Motor4_Rotate_CCW+0x20>)
 80017da:	f002 ffdb 	bl	8004794 <HAL_GPIO_WritePin>
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40020400 	.word	0x40020400

080017e8 <GPS_uint8DecodeGGAData>:
/*Decode the message and puts the important information in the global variables
 * like: longitude, latitude, North/south , East/west*/

/*Returns 1 in success and 2 if the decoding process failed*/
uint8_t GPS_uint8DecodeGGAData()
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
	uint8_t Local_uint8ErrorCode=0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	71fb      	strb	r3, [r7, #7]

	if (Wait_for("GGA") == 1)
 80017f2:	4829      	ldr	r0, [pc, #164]	; (8001898 <GPS_uint8DecodeGGAData+0xb0>)
 80017f4:	f001 f926 	bl	8002a44 <Wait_for>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d111      	bne.n	8001822 <GPS_uint8DecodeGGAData+0x3a>
	{
		Copy_upto("*", GGA);
 80017fe:	4927      	ldr	r1, [pc, #156]	; (800189c <GPS_uint8DecodeGGAData+0xb4>)
 8001800:	4827      	ldr	r0, [pc, #156]	; (80018a0 <GPS_uint8DecodeGGAData+0xb8>)
 8001802:	f001 f89f 	bl	8002944 <Copy_upto>
		if (decodeGGA(GGA, &GPS_NMEA_DATA.ggastruct) == 0) flagGGA = Valid_Data;  // 2 indicates the data is valid
 8001806:	4927      	ldr	r1, [pc, #156]	; (80018a4 <GPS_uint8DecodeGGAData+0xbc>)
 8001808:	4824      	ldr	r0, [pc, #144]	; (800189c <GPS_uint8DecodeGGAData+0xb4>)
 800180a:	f000 fa71 	bl	8001cf0 <decodeGGA>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d103      	bne.n	800181c <GPS_uint8DecodeGGAData+0x34>
 8001814:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <GPS_uint8DecodeGGAData+0xc0>)
 8001816:	2202      	movs	r2, #2
 8001818:	701a      	strb	r2, [r3, #0]
 800181a:	e002      	b.n	8001822 <GPS_uint8DecodeGGAData+0x3a>
		else flagGGA = unValid_Data;  // 1 indicates the data is invalid
 800181c:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <GPS_uint8DecodeGGAData+0xc0>)
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]
	}

	if(flagGGA==Valid_Data)
 8001822:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <GPS_uint8DecodeGGAData+0xc0>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d12e      	bne.n	8001888 <GPS_uint8DecodeGGAData+0xa0>
	{
		Local_uint8ErrorCode=Decode_Success;
 800182a:	2301      	movs	r3, #1
 800182c:	71fb      	strb	r3, [r7, #7]
		GPS_Data.Latitude    =    GPS_doubleLongLat_Calculation(GPS_NMEA_DATA.ggastruct.lcation.latitude);
 800182e:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <GPS_uint8DecodeGGAData+0xbc>)
 8001830:	ed93 7b00 	vldr	d7, [r3]
 8001834:	eeb0 0a47 	vmov.f32	s0, s14
 8001838:	eef0 0a67 	vmov.f32	s1, s15
 800183c:	f000 f838 	bl	80018b0 <GPS_doubleLongLat_Calculation>
 8001840:	ec53 2b10 	vmov	r2, r3, d0
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f7ff fa3e 	bl	8000cc8 <__aeabi_d2f>
 800184c:	4603      	mov	r3, r0
 800184e:	4a17      	ldr	r2, [pc, #92]	; (80018ac <GPS_uint8DecodeGGAData+0xc4>)
 8001850:	6013      	str	r3, [r2, #0]
		GPS_Data.Longitude   =    GPS_doubleLongLat_Calculation(GPS_NMEA_DATA.ggastruct.lcation.longitude);
 8001852:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <GPS_uint8DecodeGGAData+0xbc>)
 8001854:	ed93 7b04 	vldr	d7, [r3, #16]
 8001858:	eeb0 0a47 	vmov.f32	s0, s14
 800185c:	eef0 0a67 	vmov.f32	s1, s15
 8001860:	f000 f826 	bl	80018b0 <GPS_doubleLongLat_Calculation>
 8001864:	ec53 2b10 	vmov	r2, r3, d0
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	f7ff fa2c 	bl	8000cc8 <__aeabi_d2f>
 8001870:	4603      	mov	r3, r0
 8001872:	4a0e      	ldr	r2, [pc, #56]	; (80018ac <GPS_uint8DecodeGGAData+0xc4>)
 8001874:	6053      	str	r3, [r2, #4]

		GPS_Data.East_West = GPS_NMEA_DATA.ggastruct.lcation.EW;
 8001876:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <GPS_uint8DecodeGGAData+0xbc>)
 8001878:	7e1a      	ldrb	r2, [r3, #24]
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <GPS_uint8DecodeGGAData+0xc4>)
 800187c:	721a      	strb	r2, [r3, #8]
		GPS_Data.North_South = GPS_NMEA_DATA.ggastruct.lcation.NS;
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <GPS_uint8DecodeGGAData+0xbc>)
 8001880:	7a1a      	ldrb	r2, [r3, #8]
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <GPS_uint8DecodeGGAData+0xc4>)
 8001884:	725a      	strb	r2, [r3, #9]
 8001886:	e001      	b.n	800188c <GPS_uint8DecodeGGAData+0xa4>
	}
	else
	{
		Local_uint8ErrorCode=Decode_Failed;
 8001888:	2302      	movs	r3, #2
 800188a:	71fb      	strb	r3, [r7, #7]
	}


	return Local_uint8ErrorCode;
 800188c:	79fb      	ldrb	r3, [r7, #7]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	08010ae4 	.word	0x08010ae4
 800189c:	20000218 	.word	0x20000218
 80018a0:	08010ae8 	.word	0x08010ae8
 80018a4:	20000280 	.word	0x20000280
 80018a8:	200002e0 	.word	0x200002e0
 80018ac:	200002e4 	.word	0x200002e4

080018b0 <GPS_doubleLongLat_Calculation>:


}

double GPS_doubleLongLat_Calculation(double lat)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	ed87 0b00 	vstr	d0, [r7]
	uint8_t intValue ;
	double fraction;
	intValue = lat; //intValue = 31 instead of 31.39049
 80018ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018be:	f7ff f9e3 	bl	8000c88 <__aeabi_d2uiz>
 80018c2:	4603      	mov	r3, r0
 80018c4:	75fb      	strb	r3, [r7, #23]
	fraction = lat - intValue; // fraction = 0.39049
 80018c6:	7dfb      	ldrb	r3, [r7, #23]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe9b 	bl	8000604 <__aeabi_i2d>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018d6:	f7fe fd47 	bl	8000368 <__aeabi_dsub>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	e9c7 2302 	strd	r2, r3, [r7, #8]
	fraction = (double) ((fraction * 100.0) / 60.0) ; //fraction = (39.049)/60 = 0.6532
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <GPS_doubleLongLat_Calculation+0x80>)
 80018e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018ec:	f7fe fef4 	bl	80006d8 <__aeabi_dmul>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <GPS_doubleLongLat_Calculation+0x84>)
 80018fe:	f7ff f815 	bl	800092c <__aeabi_ddiv>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return (double) (intValue + fraction); // return value = 31 + 0.6532 = 31.6532
 800190a:	7dfb      	ldrb	r3, [r7, #23]
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fe79 	bl	8000604 <__aeabi_i2d>
 8001912:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001916:	f7fe fd29 	bl	800036c <__adddf3>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001922:	eeb0 0a47 	vmov.f32	s0, s14
 8001926:	eef0 0a67 	vmov.f32	s1, s15
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40590000 	.word	0x40590000
 8001934:	404e0000 	.word	0x404e0000

08001938 <LCD_HighLightIntensity_Warning>:

/***************************************Static Functions Definition***********************************************/
static void LCD_Print_WarningSign(void);

void LCD_HighLightIntensity_Warning()
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0

	/*Printing the warning sign*/
	LCD_Print_WarningSign();
 800193c:	f000 f814 	bl	8001968 <LCD_Print_WarningSign>

	/*Printing the warning message to the driver*/
	LCD_voidSetPositionXY(1,0);
 8001940:	2100      	movs	r1, #0
 8001942:	2001      	movs	r0, #1
 8001944:	f000 f950 	bl	8001be8 <LCD_voidSetPositionXY>
	LCD_voidSendString("Dim your");
 8001948:	4805      	ldr	r0, [pc, #20]	; (8001960 <LCD_HighLightIntensity_Warning+0x28>)
 800194a:	f000 f931 	bl	8001bb0 <LCD_voidSendString>

	LCD_voidSetPositionXY(2,0);
 800194e:	2100      	movs	r1, #0
 8001950:	2002      	movs	r0, #2
 8001952:	f000 f949 	bl	8001be8 <LCD_voidSetPositionXY>
	LCD_voidSendString("Light ASAP!");
 8001956:	4803      	ldr	r0, [pc, #12]	; (8001964 <LCD_HighLightIntensity_Warning+0x2c>)
 8001958:	f000 f92a 	bl	8001bb0 <LCD_voidSendString>

}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	08010b24 	.word	0x08010b24
 8001964:	08010b30 	.word	0x08010b30

08001968 <LCD_Print_WarningSign>:
	LCD_voidSendString("Slow Down");


}
static void LCD_Print_WarningSign(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b094      	sub	sp, #80	; 0x50
 800196c:	af00      	add	r7, sp, #0
	/*Saving the elemetents of each block of the LCD in multiple arrays to be sent to the special charachter function*/

	uint8_t LCD_R1_C16_Array[8] =
 800196e:	4a40      	ldr	r2, [pc, #256]	; (8001a70 <LCD_Print_WarningSign+0x108>)
 8001970:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001974:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001978:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00001110,
			0b00001110,
			0b00001110
	};

	uint8_t LCD_R1_C17_Array[8] =
 800197c:	4a3d      	ldr	r2, [pc, #244]	; (8001a74 <LCD_Print_WarningSign+0x10c>)
 800197e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001982:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001986:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00001000,
			0b00000100,
			0b00000010,
			0b00000001
	};
	uint8_t LCD_R1_C15_Array[8] =
 800198a:	4a3b      	ldr	r2, [pc, #236]	; (8001a78 <LCD_Print_WarningSign+0x110>)
 800198c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001990:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001994:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000100,
			0b00001000,
			0b00010000
	};

	uint8_t LCD_R2_C14_Array[8] =
 8001998:	4a38      	ldr	r2, [pc, #224]	; (8001a7c <LCD_Print_WarningSign+0x114>)
 800199a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800199e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019a2:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00011111
	};

	uint8_t LCD_R2_C18_Array[8] =
 80019a6:	4a36      	ldr	r2, [pc, #216]	; (8001a80 <LCD_Print_WarningSign+0x118>)
 80019a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019b0:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C13_Array[8] =
 80019b4:	4a33      	ldr	r2, [pc, #204]	; (8001a84 <LCD_Print_WarningSign+0x11c>)
 80019b6:	f107 0320 	add.w	r3, r7, #32
 80019ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019be:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000001,
			0b00000010,
			0b00000100,
			0b00011111
	};
	uint8_t LCD_R2_C19_Array[8] =
 80019c2:	4a31      	ldr	r2, [pc, #196]	; (8001a88 <LCD_Print_WarningSign+0x120>)
 80019c4:	f107 0318 	add.w	r3, r7, #24
 80019c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019cc:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00001000,
			0b00000100,
			0b00000010,
			0b00011111
	};
	uint8_t LCD_R2_C15_Array[8] =
 80019d0:	4a2e      	ldr	r2, [pc, #184]	; (8001a8c <LCD_Print_WarningSign+0x124>)
 80019d2:	f107 0310 	add.w	r3, r7, #16
 80019d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019da:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C17_Array[8] =
 80019de:	4a2b      	ldr	r2, [pc, #172]	; (8001a8c <LCD_Print_WarningSign+0x124>)
 80019e0:	f107 0308 	add.w	r3, r7, #8
 80019e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019e8:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C16_Array[8] =
 80019ec:	4a28      	ldr	r2, [pc, #160]	; (8001a90 <LCD_Print_WarningSign+0x128>)
 80019ee:	463b      	mov	r3, r7
 80019f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019f4:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00011111
	};


	LCD_voidDrawSpecialCharachter(&LCD_R1_C15_Array, 0, 1, 15);
 80019f8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80019fc:	230f      	movs	r3, #15
 80019fe:	2201      	movs	r2, #1
 8001a00:	2100      	movs	r1, #0
 8001a02:	f000 f93e 	bl	8001c82 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R1_C16_Array, 1, 1, 16);
 8001a06:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001a0a:	2310      	movs	r3, #16
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	2101      	movs	r1, #1
 8001a10:	f000 f937 	bl	8001c82 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R1_C17_Array, 2, 1, 17);
 8001a14:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001a18:	2311      	movs	r3, #17
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	f000 f930 	bl	8001c82 <LCD_voidDrawSpecialCharachter>

	LCD_voidDrawSpecialCharachter(&LCD_R2_C14_Array, 3, 2, 14);
 8001a22:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001a26:	230e      	movs	r3, #14
 8001a28:	2202      	movs	r2, #2
 8001a2a:	2103      	movs	r1, #3
 8001a2c:	f000 f929 	bl	8001c82 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C15_Array, 4, 2, 15);
 8001a30:	f107 0010 	add.w	r0, r7, #16
 8001a34:	230f      	movs	r3, #15
 8001a36:	2202      	movs	r2, #2
 8001a38:	2104      	movs	r1, #4
 8001a3a:	f000 f922 	bl	8001c82 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C16_Array, 5, 2, 16);
 8001a3e:	4638      	mov	r0, r7
 8001a40:	2310      	movs	r3, #16
 8001a42:	2202      	movs	r2, #2
 8001a44:	2105      	movs	r1, #5
 8001a46:	f000 f91c 	bl	8001c82 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C17_Array, 6, 2, 17);
 8001a4a:	f107 0008 	add.w	r0, r7, #8
 8001a4e:	2311      	movs	r3, #17
 8001a50:	2202      	movs	r2, #2
 8001a52:	2106      	movs	r1, #6
 8001a54:	f000 f915 	bl	8001c82 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C18_Array, 7, 2, 18);
 8001a58:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001a5c:	2312      	movs	r3, #18
 8001a5e:	2202      	movs	r2, #2
 8001a60:	2107      	movs	r1, #7
 8001a62:	f000 f90e 	bl	8001c82 <LCD_voidDrawSpecialCharachter>




}
 8001a66:	bf00      	nop
 8001a68:	3750      	adds	r7, #80	; 0x50
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	08010b70 	.word	0x08010b70
 8001a74:	08010b78 	.word	0x08010b78
 8001a78:	08010b80 	.word	0x08010b80
 8001a7c:	08010b88 	.word	0x08010b88
 8001a80:	08010b90 	.word	0x08010b90
 8001a84:	08010b98 	.word	0x08010b98
 8001a88:	08010ba0 	.word	0x08010ba0
 8001a8c:	08010ba8 	.word	0x08010ba8
 8001a90:	08010bb0 	.word	0x08010bb0

08001a94 <LCD_voidInit>:
#define LCD_SLAVE_ADDRESS 0b01001110

extern I2C_HandleTypeDef hi2c1;

void LCD_voidInit(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	/*Setting 4 bits interface(Twice as the datasheet specefies)*/
	LCD_voidSendCommand(0b00110011);
 8001a98:	2033      	movs	r0, #51	; 0x33
 8001a9a:	f000 f829 	bl	8001af0 <LCD_voidSendCommand>
	LCD_voidSendCommand(0b00110010);
 8001a9e:	2032      	movs	r0, #50	; 0x32
 8001aa0:	f000 f826 	bl	8001af0 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001aa4:	2032      	movs	r0, #50	; 0x32
 8001aa6:	f002 fb49 	bl	800413c <HAL_Delay>
	/*Setting the LCD Function*/
	LCD_voidSendCommand(0b00101000);
 8001aaa:	2028      	movs	r0, #40	; 0x28
 8001aac:	f000 f820 	bl	8001af0 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001ab0:	2032      	movs	r0, #50	; 0x32
 8001ab2:	f002 fb43 	bl	800413c <HAL_Delay>
	/*Clearing the display*/
	LCD_voidSendCommand(0b00000001);
 8001ab6:	2001      	movs	r0, #1
 8001ab8:	f000 f81a 	bl	8001af0 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001abc:	2032      	movs	r0, #50	; 0x32
 8001abe:	f002 fb3d 	bl	800413c <HAL_Delay>
	/*Set the entry mode*/
	LCD_voidSendCommand(0b00000110);
 8001ac2:	2006      	movs	r0, #6
 8001ac4:	f000 f814 	bl	8001af0 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001ac8:	2032      	movs	r0, #50	; 0x32
 8001aca:	f002 fb37 	bl	800413c <HAL_Delay>
	/*Set the display to on*/
	LCD_voidSendCommand(0b00001100);
 8001ace:	200c      	movs	r0, #12
 8001ad0:	f000 f80e 	bl	8001af0 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001ad4:	2032      	movs	r0, #50	; 0x32
 8001ad6:	f002 fb31 	bl	800413c <HAL_Delay>
	/*Set the cursor to home */
	LCD_voidSendCommand(0b00000010);
 8001ada:	2002      	movs	r0, #2
 8001adc:	f000 f808 	bl	8001af0 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001ae0:	2032      	movs	r0, #50	; 0x32
 8001ae2:	f002 fb2b 	bl	800413c <HAL_Delay>
	/*and the Data address to 0*/
	LCD_voidSendCommand(0b10000000);
 8001ae6:	2080      	movs	r0, #128	; 0x80
 8001ae8:	f000 f802 	bl	8001af0 <LCD_voidSendCommand>

}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <LCD_voidSendCommand>:
void LCD_voidSendCommand(uint8_t Copy_uint8Command)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af02      	add	r7, sp, #8
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
 *
 *
 * 0b00000001 --> DataU --> 0b000000000-->0b00000001100
 *
 * */
	Local_uint8Local_uint8DataU=(Copy_uint8Command&0b11110000);
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	f023 030f 	bic.w	r3, r3, #15
 8001b00:	73fb      	strb	r3, [r7, #15]
	Local_uint8Local_uint8DataL=((Copy_uint8Command<<4)&0b11110000);
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	73bb      	strb	r3, [r7, #14]

	Local_uint8Local_uint8DataT[0]=Local_uint8Local_uint8DataU|0b00001100; //EN=1 RS=0
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	f043 030c 	orr.w	r3, r3, #12
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	723b      	strb	r3, [r7, #8]
	Local_uint8Local_uint8DataT[1]=Local_uint8Local_uint8DataU|0b00001000; //EN=0 RS=0
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	f043 0308 	orr.w	r3, r3, #8
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	727b      	strb	r3, [r7, #9]
	Local_uint8Local_uint8DataT[2]=Local_uint8Local_uint8DataL|0b00001100; //EN=1 RS=0
 8001b1c:	7bbb      	ldrb	r3, [r7, #14]
 8001b1e:	f043 030c 	orr.w	r3, r3, #12
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	72bb      	strb	r3, [r7, #10]
	Local_uint8Local_uint8DataT[3]=Local_uint8Local_uint8DataL|0b00001000; //EN=0 RS=0
 8001b26:	7bbb      	ldrb	r3, [r7, #14]
 8001b28:	f043 0308 	orr.w	r3, r3, #8
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDRESS,(uint8_t*)Local_uint8Local_uint8DataT , 4, 100);
 8001b30:	f107 0208 	add.w	r2, r7, #8
 8001b34:	2364      	movs	r3, #100	; 0x64
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2304      	movs	r3, #4
 8001b3a:	214e      	movs	r1, #78	; 0x4e
 8001b3c:	4803      	ldr	r0, [pc, #12]	; (8001b4c <LCD_voidSendCommand+0x5c>)
 8001b3e:	f002 ff87 	bl	8004a50 <HAL_I2C_Master_Transmit>
}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000534 	.word	0x20000534

08001b50 <LCD_voidSendCharachter>:

void LCD_voidSendCharachter(uint8_t Copy_uint8Charachter)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_uint8Local_uint8DataU,Local_uint8Local_uint8DataL;
	uint8_t Local_uint8Local_uint8DataT[4];
	Local_uint8Local_uint8DataU=(Copy_uint8Charachter&0b11110000);
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	f023 030f 	bic.w	r3, r3, #15
 8001b60:	73fb      	strb	r3, [r7, #15]
	Local_uint8Local_uint8DataL=((Copy_uint8Charachter<<4)&0b11110000);
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	73bb      	strb	r3, [r7, #14]

	Local_uint8Local_uint8DataT[0]=Local_uint8Local_uint8DataU|0b00001101; //EN=1 RS=0
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	f043 030d 	orr.w	r3, r3, #13
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	723b      	strb	r3, [r7, #8]
	Local_uint8Local_uint8DataT[1]=Local_uint8Local_uint8DataU|0b00001001; //EN=0 RS=0
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	f043 0309 	orr.w	r3, r3, #9
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	727b      	strb	r3, [r7, #9]
	Local_uint8Local_uint8DataT[2]=Local_uint8Local_uint8DataL|0b00001101; //EN=1 RS=0
 8001b7c:	7bbb      	ldrb	r3, [r7, #14]
 8001b7e:	f043 030d 	orr.w	r3, r3, #13
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	72bb      	strb	r3, [r7, #10]
	Local_uint8Local_uint8DataT[3]=Local_uint8Local_uint8DataL|0b00001001; //EN=0 RS=0
 8001b86:	7bbb      	ldrb	r3, [r7, #14]
 8001b88:	f043 0309 	orr.w	r3, r3, #9
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDRESS,(uint8_t*)Local_uint8Local_uint8DataT , 4, 100);
 8001b90:	f107 0208 	add.w	r2, r7, #8
 8001b94:	2364      	movs	r3, #100	; 0x64
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2304      	movs	r3, #4
 8001b9a:	214e      	movs	r1, #78	; 0x4e
 8001b9c:	4803      	ldr	r0, [pc, #12]	; (8001bac <LCD_voidSendCharachter+0x5c>)
 8001b9e:	f002 ff57 	bl	8004a50 <HAL_I2C_Master_Transmit>

}
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000534 	.word	0x20000534

08001bb0 <LCD_voidSendString>:

void LCD_voidSendString (uint8_t *Copy_pu8StringOfCharachters)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8Counter=0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8StringOfCharachters[Local_uint8Counter] !='\0')
 8001bbc:	e009      	b.n	8001bd2 <LCD_voidSendString+0x22>
	{
		LCD_voidSendCharachter(Copy_pu8StringOfCharachters[Local_uint8Counter]);
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff ffc2 	bl	8001b50 <LCD_voidSendCharachter>
		Local_uint8Counter++;
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8StringOfCharachters[Local_uint8Counter] !='\0')
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1ef      	bne.n	8001bbe <LCD_voidSendString+0xe>
	}


}
 8001bde:	bf00      	nop
 8001be0:	bf00      	nop
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <LCD_voidSetPositionXY>:
void LCD_voidSetPositionXY(uint8_t Copy_uint8Row,uint8_t Copy_uint8Column)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	460a      	mov	r2, r1
 8001bf2:	71fb      	strb	r3, [r7, #7]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	71bb      	strb	r3, [r7, #6]
	//1,add,add,add,add,add,add,add,0,0
	uint8_t Local_uint8PositionAddress = 0b10000000;
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	73fb      	strb	r3, [r7, #15]
	switch(Copy_uint8Row){
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d82d      	bhi.n	8001c5e <LCD_voidSetPositionXY+0x76>
 8001c02:	a201      	add	r2, pc, #4	; (adr r2, 8001c08 <LCD_voidSetPositionXY+0x20>)
 8001c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c08:	08001c19 	.word	0x08001c19
 8001c0c:	08001c23 	.word	0x08001c23
 8001c10:	08001c37 	.word	0x08001c37
 8001c14:	08001c4b 	.word	0x08001c4b
	case 0:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 0);
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	79bb      	ldrb	r3, [r7, #6]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	73fb      	strb	r3, [r7, #15]
		break;
 8001c20:	e01d      	b.n	8001c5e <LCD_voidSetPositionXY+0x76>
	case 1:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 64);
 8001c22:	79bb      	ldrb	r3, [r7, #6]
 8001c24:	3340      	adds	r3, #64	; 0x40
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	b25a      	sxtb	r2, r3
 8001c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	b25b      	sxtb	r3, r3
 8001c32:	73fb      	strb	r3, [r7, #15]
		break;
 8001c34:	e013      	b.n	8001c5e <LCD_voidSetPositionXY+0x76>
	case 2:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 20);
 8001c36:	79bb      	ldrb	r3, [r7, #6]
 8001c38:	3314      	adds	r3, #20
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	b25a      	sxtb	r2, r3
 8001c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	b25b      	sxtb	r3, r3
 8001c46:	73fb      	strb	r3, [r7, #15]
		break;
 8001c48:	e009      	b.n	8001c5e <LCD_voidSetPositionXY+0x76>
	case 3:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 84);
 8001c4a:	79bb      	ldrb	r3, [r7, #6]
 8001c4c:	3354      	adds	r3, #84	; 0x54
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	b25a      	sxtb	r2, r3
 8001c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	b25b      	sxtb	r3, r3
 8001c5a:	73fb      	strb	r3, [r7, #15]
		break;
 8001c5c:	bf00      	nop
	}
		LCD_voidSendCommand(Local_uint8PositionAddress);
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff45 	bl	8001af0 <LCD_voidSendCommand>
		HAL_Delay(1);
 8001c66:	2001      	movs	r0, #1
 8001c68:	f002 fa68 	bl	800413c <HAL_Delay>

}
 8001c6c:	bf00      	nop
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <LCD_voidClearDisplay>:

void LCD_voidClearDisplay(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
	/*Clearing the display by command 0b00000001*/
	LCD_voidSendCommand(0b00000001);
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f7ff ff39 	bl	8001af0 <LCD_voidSendCommand>
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <LCD_voidDrawSpecialCharachter>:
		}
	}
}

void LCD_voidDrawSpecialCharachter(uint8_t*Copy_puint8Pattern,uint8_t Copy_uint8LocationNum,uint8_t Copy_uint8RowNum,uint8_t Copy_uint8ColNum)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b084      	sub	sp, #16
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	4608      	mov	r0, r1
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4603      	mov	r3, r0
 8001c92:	70fb      	strb	r3, [r7, #3]
 8001c94:	460b      	mov	r3, r1
 8001c96:	70bb      	strb	r3, [r7, #2]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	707b      	strb	r3, [r7, #1]
	/*Accessing the CGRAM address*/
	uint8_t Local_uint8CGRAMAddress,Local_uint8Counter;
	Local_uint8CGRAMAddress=Copy_uint8LocationNum*8;
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	73bb      	strb	r3, [r7, #14]
	/*Accessing CGRAM of lcd by command 0b01xxxxxx*/
	LCD_voidSendCommand(Local_uint8CGRAMAddress+64);
 8001ca2:	7bbb      	ldrb	r3, [r7, #14]
 8001ca4:	3340      	adds	r3, #64	; 0x40
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff21 	bl	8001af0 <LCD_voidSendCommand>
	/*Write the pattern on CGRAM*/
	/*zy makont ba3mel fel string ha3mel hena , bas al fekra ane hawa2f al loop 3nd (((8))) ale howa max bytes
	 * in a location in the CGRAM fal user masaln e5tar location 0 fa2a5ro feh 8 charachters ale homa 8 bytes*/
	for(Local_uint8Counter=0;Local_uint8Counter<8;Local_uint8Counter++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	73fb      	strb	r3, [r7, #15]
 8001cb2:	e009      	b.n	8001cc8 <LCD_voidDrawSpecialCharachter+0x46>
	{
		LCD_voidSendCharachter(Copy_puint8Pattern[Local_uint8Counter]);
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff47 	bl	8001b50 <LCD_voidSendCharachter>
	for(Local_uint8Counter=0;Local_uint8Counter<8;Local_uint8Counter++)
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	2b07      	cmp	r3, #7
 8001ccc:	d9f2      	bls.n	8001cb4 <LCD_voidDrawSpecialCharachter+0x32>
	}
	/*Keda e7na 7atena al pattern fe location mo3yn fel CGRAM, fa na2esna bas neb3at al pattern lel DDRAM 34an n7oto fel LCD */
	/*kona fo2 3malna command 34an ne access al CGRAM 34an ne access al DDRAM lazem command tany
	 * wel set position feha asln al command dah*/
	LCD_voidSetPositionXY(Copy_uint8RowNum,Copy_uint8ColNum);
 8001cce:	787a      	ldrb	r2, [r7, #1]
 8001cd0:	78bb      	ldrb	r3, [r7, #2]
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff87 	bl	8001be8 <LCD_voidSetPositionXY>
	LCD_voidSendCharachter(Copy_uint8LocationNum);
 8001cda:	78fb      	ldrb	r3, [r7, #3]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff37 	bl	8001b50 <LCD_voidSendCharachter>
}
 8001ce2:	bf00      	nop
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	0000      	movs	r0, r0
 8001cec:	0000      	movs	r0, r0
	...

08001cf0 <decodeGGA>:
 GGAbuffer is the buffer which stores the GGA Data
 GGASTRUCT is the pointer to the GGA Structure (in the GPS Structure)
 Returns 0 on success
 */

int decodeGGA(char *GGAbuffer, GGASTRUCT *gga) {
 8001cf0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cf4:	b08e      	sub	sp, #56	; 0x38
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001cfc:	4b5b      	ldr	r3, [pc, #364]	; (8001e6c <decodeGGA+0x17c>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',')
 8001d06:	e004      	b.n	8001d12 <decodeGGA+0x22>
		inx++;  // 1st ','
 8001d08:	4b58      	ldr	r3, [pc, #352]	; (8001e6c <decodeGGA+0x17c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	4a57      	ldr	r2, [pc, #348]	; (8001e6c <decodeGGA+0x17c>)
 8001d10:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001d12:	4b56      	ldr	r3, [pc, #344]	; (8001e6c <decodeGGA+0x17c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b2c      	cmp	r3, #44	; 0x2c
 8001d20:	d1f2      	bne.n	8001d08 <decodeGGA+0x18>
	inx++;
 8001d22:	4b52      	ldr	r3, [pc, #328]	; (8001e6c <decodeGGA+0x17c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	3301      	adds	r3, #1
 8001d28:	4a50      	ldr	r2, [pc, #320]	; (8001e6c <decodeGGA+0x17c>)
 8001d2a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001d2c:	e004      	b.n	8001d38 <decodeGGA+0x48>
		inx++;  // After time ','
 8001d2e:	4b4f      	ldr	r3, [pc, #316]	; (8001e6c <decodeGGA+0x17c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	3301      	adds	r3, #1
 8001d34:	4a4d      	ldr	r2, [pc, #308]	; (8001e6c <decodeGGA+0x17c>)
 8001d36:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001d38:	4b4c      	ldr	r3, [pc, #304]	; (8001e6c <decodeGGA+0x17c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b2c      	cmp	r3, #44	; 0x2c
 8001d46:	d1f2      	bne.n	8001d2e <decodeGGA+0x3e>
	inx++;
 8001d48:	4b48      	ldr	r3, [pc, #288]	; (8001e6c <decodeGGA+0x17c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	4a47      	ldr	r2, [pc, #284]	; (8001e6c <decodeGGA+0x17c>)
 8001d50:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001d52:	e004      	b.n	8001d5e <decodeGGA+0x6e>
		inx++;  // after latitude ','
 8001d54:	4b45      	ldr	r3, [pc, #276]	; (8001e6c <decodeGGA+0x17c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	4a44      	ldr	r2, [pc, #272]	; (8001e6c <decodeGGA+0x17c>)
 8001d5c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001d5e:	4b43      	ldr	r3, [pc, #268]	; (8001e6c <decodeGGA+0x17c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b2c      	cmp	r3, #44	; 0x2c
 8001d6c:	d1f2      	bne.n	8001d54 <decodeGGA+0x64>
	inx++;
 8001d6e:	4b3f      	ldr	r3, [pc, #252]	; (8001e6c <decodeGGA+0x17c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	3301      	adds	r3, #1
 8001d74:	4a3d      	ldr	r2, [pc, #244]	; (8001e6c <decodeGGA+0x17c>)
 8001d76:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001d78:	e004      	b.n	8001d84 <decodeGGA+0x94>
		inx++;  // after NS ','
 8001d7a:	4b3c      	ldr	r3, [pc, #240]	; (8001e6c <decodeGGA+0x17c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	4a3a      	ldr	r2, [pc, #232]	; (8001e6c <decodeGGA+0x17c>)
 8001d82:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001d84:	4b39      	ldr	r3, [pc, #228]	; (8001e6c <decodeGGA+0x17c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b2c      	cmp	r3, #44	; 0x2c
 8001d92:	d1f2      	bne.n	8001d7a <decodeGGA+0x8a>
	inx++;
 8001d94:	4b35      	ldr	r3, [pc, #212]	; (8001e6c <decodeGGA+0x17c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	4a34      	ldr	r2, [pc, #208]	; (8001e6c <decodeGGA+0x17c>)
 8001d9c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001d9e:	e004      	b.n	8001daa <decodeGGA+0xba>
		inx++;  // after longitude ','
 8001da0:	4b32      	ldr	r3, [pc, #200]	; (8001e6c <decodeGGA+0x17c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	3301      	adds	r3, #1
 8001da6:	4a31      	ldr	r2, [pc, #196]	; (8001e6c <decodeGGA+0x17c>)
 8001da8:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001daa:	4b30      	ldr	r3, [pc, #192]	; (8001e6c <decodeGGA+0x17c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4413      	add	r3, r2
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b2c      	cmp	r3, #44	; 0x2c
 8001db8:	d1f2      	bne.n	8001da0 <decodeGGA+0xb0>
	inx++;
 8001dba:	4b2c      	ldr	r3, [pc, #176]	; (8001e6c <decodeGGA+0x17c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	4a2a      	ldr	r2, [pc, #168]	; (8001e6c <decodeGGA+0x17c>)
 8001dc2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001dc4:	e004      	b.n	8001dd0 <decodeGGA+0xe0>
		inx++;  // after EW ','
 8001dc6:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <decodeGGA+0x17c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	4a27      	ldr	r2, [pc, #156]	; (8001e6c <decodeGGA+0x17c>)
 8001dce:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001dd0:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <decodeGGA+0x17c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b2c      	cmp	r3, #44	; 0x2c
 8001dde:	d1f2      	bne.n	8001dc6 <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8001de0:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <decodeGGA+0x17c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	3301      	adds	r3, #1
 8001de6:	4a21      	ldr	r2, [pc, #132]	; (8001e6c <decodeGGA+0x17c>)
 8001de8:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2')
 8001dea:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <decodeGGA+0x17c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4413      	add	r3, r2
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b31      	cmp	r3, #49	; 0x31
 8001df8:	d00f      	beq.n	8001e1a <decodeGGA+0x12a>
 8001dfa:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <decodeGGA+0x17c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4413      	add	r3, r2
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b32      	cmp	r3, #50	; 0x32
 8001e08:	d007      	beq.n	8001e1a <decodeGGA+0x12a>
			|| (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8001e0a:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <decodeGGA+0x17c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4413      	add	r3, r2
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b36      	cmp	r3, #54	; 0x36
 8001e18:	d106      	bne.n	8001e28 <decodeGGA+0x138>
			{
		gga->isfixValid = 1;   // fix available
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	62da      	str	r2, [r3, #44]	; 0x2c
		inx = 0; // reset the index. We will start from the inx=0 and extract information now
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <decodeGGA+0x17c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
	} else {
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',')
 8001e26:	e009      	b.n	8001e3c <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	62da      	str	r2, [r3, #44]	; 0x2c
		return 1;  // return error
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e2f3      	b.n	800241a <decodeGGA+0x72a>
		inx++;  // 1st ','
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <decodeGGA+0x17c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	3301      	adds	r3, #1
 8001e38:	4a0c      	ldr	r2, [pc, #48]	; (8001e6c <decodeGGA+0x17c>)
 8001e3a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <decodeGGA+0x17c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b2c      	cmp	r3, #44	; 0x2c
 8001e4a:	d1f2      	bne.n	8001e32 <decodeGGA+0x142>

	/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)
	inx++;   // reach the first number in time
 8001e4c:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <decodeGGA+0x17c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	3301      	adds	r3, #1
 8001e52:	4a06      	ldr	r2, [pc, #24]	; (8001e6c <decodeGGA+0x17c>)
 8001e54:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001e56:	f107 030c 	add.w	r3, r7, #12
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f00b fdab 	bl	800d9ba <memset>
	i = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001e68:	e016      	b.n	8001e98 <decodeGGA+0x1a8>
 8001e6a:	bf00      	nop
 8001e6c:	200002f0 	.word	0x200002f0
	{
		buffer[i] = GGAbuffer[inx];
 8001e70:	4ba9      	ldr	r3, [pc, #676]	; (8002118 <decodeGGA+0x428>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	7819      	ldrb	r1, [r3, #0]
 8001e7c:	f107 020c 	add.w	r2, r7, #12
 8001e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e82:	4413      	add	r3, r2
 8001e84:	460a      	mov	r2, r1
 8001e86:	701a      	strb	r2, [r3, #0]
		i++;
 8001e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 8001e8e:	4ba2      	ldr	r3, [pc, #648]	; (8002118 <decodeGGA+0x428>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	3301      	adds	r3, #1
 8001e94:	4aa0      	ldr	r2, [pc, #640]	; (8002118 <decodeGGA+0x428>)
 8001e96:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001e98:	4b9f      	ldr	r3, [pc, #636]	; (8002118 <decodeGGA+0x428>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b2c      	cmp	r3, #44	; 0x2c
 8001ea6:	d1e3      	bne.n	8001e70 <decodeGGA+0x180>
	}

	hr = (atoi(buffer) / 10000) + GMT / 100; // get the hours from the 6 digit number
 8001ea8:	f107 030c 	add.w	r3, r7, #12
 8001eac:	4618      	mov	r0, r3
 8001eae:	f00a ff44 	bl	800cd3a <atoi>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4a99      	ldr	r2, [pc, #612]	; (800211c <decodeGGA+0x42c>)
 8001eb6:	fb82 1203 	smull	r1, r2, r2, r3
 8001eba:	1312      	asrs	r2, r2, #12
 8001ebc:	17db      	asrs	r3, r3, #31
 8001ebe:	1ad2      	subs	r2, r2, r3
 8001ec0:	4b97      	ldr	r3, [pc, #604]	; (8002120 <decodeGGA+0x430>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4997      	ldr	r1, [pc, #604]	; (8002124 <decodeGGA+0x434>)
 8001ec6:	fb81 0103 	smull	r0, r1, r1, r3
 8001eca:	1149      	asrs	r1, r1, #5
 8001ecc:	17db      	asrs	r3, r3, #31
 8001ece:	1acb      	subs	r3, r1, r3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	4a95      	ldr	r2, [pc, #596]	; (8002128 <decodeGGA+0x438>)
 8001ed4:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer) / 100) % 100) + GMT % 100; // get the minutes from the 6 digit number
 8001ed6:	f107 030c 	add.w	r3, r7, #12
 8001eda:	4618      	mov	r0, r3
 8001edc:	f00a ff2d 	bl	800cd3a <atoi>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	4a90      	ldr	r2, [pc, #576]	; (8002124 <decodeGGA+0x434>)
 8001ee4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ee8:	1152      	asrs	r2, r2, #5
 8001eea:	17db      	asrs	r3, r3, #31
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	4a8d      	ldr	r2, [pc, #564]	; (8002124 <decodeGGA+0x434>)
 8001ef0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ef4:	1151      	asrs	r1, r2, #5
 8001ef6:	17da      	asrs	r2, r3, #31
 8001ef8:	1a8a      	subs	r2, r1, r2
 8001efa:	2164      	movs	r1, #100	; 0x64
 8001efc:	fb01 f202 	mul.w	r2, r1, r2
 8001f00:	1a9a      	subs	r2, r3, r2
 8001f02:	4b87      	ldr	r3, [pc, #540]	; (8002120 <decodeGGA+0x430>)
 8001f04:	6819      	ldr	r1, [r3, #0]
 8001f06:	4b87      	ldr	r3, [pc, #540]	; (8002124 <decodeGGA+0x434>)
 8001f08:	fb83 0301 	smull	r0, r3, r3, r1
 8001f0c:	1158      	asrs	r0, r3, #5
 8001f0e:	17cb      	asrs	r3, r1, #31
 8001f10:	1ac3      	subs	r3, r0, r3
 8001f12:	2064      	movs	r0, #100	; 0x64
 8001f14:	fb00 f303 	mul.w	r3, r0, r3
 8001f18:	1acb      	subs	r3, r1, r3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	4a83      	ldr	r2, [pc, #524]	; (800212c <decodeGGA+0x43c>)
 8001f1e:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) {
 8001f20:	4b82      	ldr	r3, [pc, #520]	; (800212c <decodeGGA+0x43c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b3b      	cmp	r3, #59	; 0x3b
 8001f26:	dd09      	ble.n	8001f3c <decodeGGA+0x24c>
		min = min - 60;
 8001f28:	4b80      	ldr	r3, [pc, #512]	; (800212c <decodeGGA+0x43c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	3b3c      	subs	r3, #60	; 0x3c
 8001f2e:	4a7f      	ldr	r2, [pc, #508]	; (800212c <decodeGGA+0x43c>)
 8001f30:	6013      	str	r3, [r2, #0]
		hr++;
 8001f32:	4b7d      	ldr	r3, [pc, #500]	; (8002128 <decodeGGA+0x438>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	3301      	adds	r3, #1
 8001f38:	4a7b      	ldr	r2, [pc, #492]	; (8002128 <decodeGGA+0x438>)
 8001f3a:	6013      	str	r3, [r2, #0]
	}
	if (hr < 0) {
 8001f3c:	4b7a      	ldr	r3, [pc, #488]	; (8002128 <decodeGGA+0x438>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	da09      	bge.n	8001f58 <decodeGGA+0x268>
		hr = 24 + hr;
 8001f44:	4b78      	ldr	r3, [pc, #480]	; (8002128 <decodeGGA+0x438>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	3318      	adds	r3, #24
 8001f4a:	4a77      	ldr	r2, [pc, #476]	; (8002128 <decodeGGA+0x438>)
 8001f4c:	6013      	str	r3, [r2, #0]
		daychange--;
 8001f4e:	4b78      	ldr	r3, [pc, #480]	; (8002130 <decodeGGA+0x440>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	4a76      	ldr	r2, [pc, #472]	; (8002130 <decodeGGA+0x440>)
 8001f56:	6013      	str	r3, [r2, #0]
	}
	if (hr >= 24) {
 8001f58:	4b73      	ldr	r3, [pc, #460]	; (8002128 <decodeGGA+0x438>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b17      	cmp	r3, #23
 8001f5e:	dd09      	ble.n	8001f74 <decodeGGA+0x284>
		hr = hr - 24;
 8001f60:	4b71      	ldr	r3, [pc, #452]	; (8002128 <decodeGGA+0x438>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	3b18      	subs	r3, #24
 8001f66:	4a70      	ldr	r2, [pc, #448]	; (8002128 <decodeGGA+0x438>)
 8001f68:	6013      	str	r3, [r2, #0]
		daychange++;
 8001f6a:	4b71      	ldr	r3, [pc, #452]	; (8002130 <decodeGGA+0x440>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	4a6f      	ldr	r2, [pc, #444]	; (8002130 <decodeGGA+0x440>)
 8001f72:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8001f74:	4b6c      	ldr	r3, [pc, #432]	; (8002128 <decodeGGA+0x438>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	621a      	str	r2, [r3, #32]
	gga->tim.min = min;
 8001f7c:	4b6b      	ldr	r3, [pc, #428]	; (800212c <decodeGGA+0x43c>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	625a      	str	r2, [r3, #36]	; 0x24
	gga->tim.sec = atoi(buffer) % 100;
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f00a fed6 	bl	800cd3a <atoi>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	4b64      	ldr	r3, [pc, #400]	; (8002124 <decodeGGA+0x434>)
 8001f92:	fb83 1302 	smull	r1, r3, r3, r2
 8001f96:	1159      	asrs	r1, r3, #5
 8001f98:	17d3      	asrs	r3, r2, #31
 8001f9a:	1acb      	subs	r3, r1, r3
 8001f9c:	2164      	movs	r1, #100	; 0x64
 8001f9e:	fb01 f303 	mul.w	r3, r1, r3
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	6293      	str	r3, [r2, #40]	; 0x28

	/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the latitude
 8001fa8:	4b5b      	ldr	r3, [pc, #364]	; (8002118 <decodeGGA+0x428>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	3301      	adds	r3, #1
 8001fae:	4a5a      	ldr	r2, [pc, #360]	; (8002118 <decodeGGA+0x428>)
 8001fb0:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001fb2:	f107 030c 	add.w	r3, r7, #12
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f00b fcfd 	bl	800d9ba <memset>
	i = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') // copy up to the we reach the after latitude ','
 8001fc4:	e013      	b.n	8001fee <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 8001fc6:	4b54      	ldr	r3, [pc, #336]	; (8002118 <decodeGGA+0x428>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4413      	add	r3, r2
 8001fd0:	7819      	ldrb	r1, [r3, #0]
 8001fd2:	f107 020c 	add.w	r2, r7, #12
 8001fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd8:	4413      	add	r3, r2
 8001fda:	460a      	mov	r2, r1
 8001fdc:	701a      	strb	r2, [r3, #0]
		i++;
 8001fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 8001fe4:	4b4c      	ldr	r3, [pc, #304]	; (8002118 <decodeGGA+0x428>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	4a4b      	ldr	r2, [pc, #300]	; (8002118 <decodeGGA+0x428>)
 8001fec:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy up to the we reach the after latitude ','
 8001fee:	4b4a      	ldr	r3, [pc, #296]	; (8002118 <decodeGGA+0x428>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b2c      	cmp	r3, #44	; 0x2c
 8001ffc:	d1e3      	bne.n	8001fc6 <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6)
 8001ffe:	f107 030c 	add.w	r3, r7, #12
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe f9a4 	bl	8000350 <strlen>
 8002008:	4603      	mov	r3, r0
 800200a:	2b05      	cmp	r3, #5
 800200c:	d801      	bhi.n	8002012 <decodeGGA+0x322>
		return 2;  // If the buffer length is not appropriate, return error
 800200e:	2302      	movs	r3, #2
 8002010:	e203      	b.n	800241a <decodeGGA+0x72a>
	int16_t num = (atoi(buffer)); // change the buffer to the number. It will only convert upto decimal
 8002012:	f107 030c 	add.w	r3, r7, #12
 8002016:	4618      	mov	r0, r3
 8002018:	f00a fe8f 	bl	800cd3a <atoi>
 800201c:	4603      	mov	r3, r0
 800201e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int j = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 8002024:	e002      	b.n	800202c <decodeGGA+0x33c>
		j++;   // Figure out how many digits before the decimal
 8002026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002028:	3301      	adds	r3, #1
 800202a:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 800202c:	f107 020c 	add.w	r2, r7, #12
 8002030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002032:	4413      	add	r3, r2
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b2e      	cmp	r3, #46	; 0x2e
 8002038:	d1f5      	bne.n	8002026 <decodeGGA+0x336>
	j++;
 800203a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203c:	3301      	adds	r3, #1
 800203e:	633b      	str	r3, [r7, #48]	; 0x30
	int declen = (strlen(buffer)) - j; // calculate the number of digit after decimal
 8002040:	f107 030c 	add.w	r3, r7, #12
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe f983 	bl	8000350 <strlen>
 800204a:	4602      	mov	r2, r0
 800204c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	62bb      	str	r3, [r7, #40]	; 0x28
	int dec = atoi((char*) buffer + j); // convert the decimal part a a separate number
 8002052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002054:	f107 020c 	add.w	r2, r7, #12
 8002058:	4413      	add	r3, r2
 800205a:	4618      	mov	r0, r3
 800205c:	f00a fe6d 	bl	800cd3a <atoi>
 8002060:	6278      	str	r0, [r7, #36]	; 0x24
	double lat = (num / 100.0) + (dec / pow(10, (declen + 2))); // 1234.56789 = 12.3456789
 8002062:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe facc 	bl	8000604 <__aeabi_i2d>
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	4b30      	ldr	r3, [pc, #192]	; (8002134 <decodeGGA+0x444>)
 8002072:	f7fe fc5b 	bl	800092c <__aeabi_ddiv>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4690      	mov	r8, r2
 800207c:	4699      	mov	r9, r3
 800207e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002080:	f7fe fac0 	bl	8000604 <__aeabi_i2d>
 8002084:	4604      	mov	r4, r0
 8002086:	460d      	mov	r5, r1
 8002088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208a:	3302      	adds	r3, #2
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fab9 	bl	8000604 <__aeabi_i2d>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	ec43 2b11 	vmov	d1, r2, r3
 800209a:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8002110 <decodeGGA+0x420>
 800209e:	f00d fd77 	bl	800fb90 <pow>
 80020a2:	ec53 2b10 	vmov	r2, r3, d0
 80020a6:	4620      	mov	r0, r4
 80020a8:	4629      	mov	r1, r5
 80020aa:	f7fe fc3f 	bl	800092c <__aeabi_ddiv>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4640      	mov	r0, r8
 80020b4:	4649      	mov	r1, r9
 80020b6:	f7fe f959 	bl	800036c <__adddf3>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	e9c7 2306 	strd	r2, r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the latitude data into the structure
 80020c2:	6839      	ldr	r1, [r7, #0]
 80020c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020c8:	e9c1 2300 	strd	r2, r3, [r1]
	inx++;
 80020cc:	4b12      	ldr	r3, [pc, #72]	; (8002118 <decodeGGA+0x428>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	3301      	adds	r3, #1
 80020d2:	4a11      	ldr	r2, [pc, #68]	; (8002118 <decodeGGA+0x428>)
 80020d4:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <decodeGGA+0x428>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4413      	add	r3, r2
 80020e0:	781a      	ldrb	r2, [r3, #0]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	721a      	strb	r2, [r3, #8]

	/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 80020e6:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <decodeGGA+0x428>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	3301      	adds	r3, #1
 80020ec:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <decodeGGA+0x428>)
 80020ee:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 80020f0:	4b09      	ldr	r3, [pc, #36]	; (8002118 <decodeGGA+0x428>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	3301      	adds	r3, #1
 80020f6:	4a08      	ldr	r2, [pc, #32]	; (8002118 <decodeGGA+0x428>)
 80020f8:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80020fa:	f107 030c 	add.w	r3, r7, #12
 80020fe:	220c      	movs	r2, #12
 8002100:	2100      	movs	r1, #0
 8002102:	4618      	mov	r0, r3
 8002104:	f00b fc59 	bl	800d9ba <memset>
	i = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after longitude ','
 800210c:	e028      	b.n	8002160 <decodeGGA+0x470>
 800210e:	bf00      	nop
 8002110:	00000000 	.word	0x00000000
 8002114:	40240000 	.word	0x40240000
 8002118:	200002f0 	.word	0x200002f0
 800211c:	68db8bad 	.word	0x68db8bad
 8002120:	20000000 	.word	0x20000000
 8002124:	51eb851f 	.word	0x51eb851f
 8002128:	200002f4 	.word	0x200002f4
 800212c:	200002f8 	.word	0x200002f8
 8002130:	200002fc 	.word	0x200002fc
 8002134:	40590000 	.word	0x40590000
	{
		buffer[i] = GGAbuffer[inx];
 8002138:	4b89      	ldr	r3, [pc, #548]	; (8002360 <decodeGGA+0x670>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	461a      	mov	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	7819      	ldrb	r1, [r3, #0]
 8002144:	f107 020c 	add.w	r2, r7, #12
 8002148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800214a:	4413      	add	r3, r2
 800214c:	460a      	mov	r2, r1
 800214e:	701a      	strb	r2, [r3, #0]
		i++;
 8002150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002152:	3301      	adds	r3, #1
 8002154:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 8002156:	4b82      	ldr	r3, [pc, #520]	; (8002360 <decodeGGA+0x670>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	3301      	adds	r3, #1
 800215c:	4a80      	ldr	r2, [pc, #512]	; (8002360 <decodeGGA+0x670>)
 800215e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after longitude ','
 8002160:	4b7f      	ldr	r3, [pc, #508]	; (8002360 <decodeGGA+0x670>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b2c      	cmp	r3, #44	; 0x2c
 800216e:	d1e3      	bne.n	8002138 <decodeGGA+0x448>
	}
	num = (atoi(buffer)); // change the buffer to the number. It will only convert upto decimal
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	4618      	mov	r0, r3
 8002176:	f00a fde0 	bl	800cd3a <atoi>
 800217a:	4603      	mov	r3, r0
 800217c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	j = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 8002182:	e002      	b.n	800218a <decodeGGA+0x49a>
		j++;  // Figure out how many digits before the decimal
 8002184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002186:	3301      	adds	r3, #1
 8002188:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 800218a:	f107 020c 	add.w	r2, r7, #12
 800218e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002190:	4413      	add	r3, r2
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b2e      	cmp	r3, #46	; 0x2e
 8002196:	d1f5      	bne.n	8002184 <decodeGGA+0x494>
	j++;
 8002198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219a:	3301      	adds	r3, #1
 800219c:	633b      	str	r3, [r7, #48]	; 0x30
	declen = (strlen(buffer)) - j; // calculate the number of digit after decimal
 800219e:	f107 030c 	add.w	r3, r7, #12
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe f8d4 	bl	8000350 <strlen>
 80021a8:	4602      	mov	r2, r0
 80021aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	62bb      	str	r3, [r7, #40]	; 0x28
	dec = atoi((char*) buffer + j); // convert the decimal part a a separate number
 80021b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b2:	f107 020c 	add.w	r2, r7, #12
 80021b6:	4413      	add	r3, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f00a fdbe 	bl	800cd3a <atoi>
 80021be:	6278      	str	r0, [r7, #36]	; 0x24
	lat = (num / 100.0) + (dec / pow(10, (declen + 2))); // 1234.56789 = 12.3456789
 80021c0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe fa1d 	bl	8000604 <__aeabi_i2d>
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	4b65      	ldr	r3, [pc, #404]	; (8002364 <decodeGGA+0x674>)
 80021d0:	f7fe fbac 	bl	800092c <__aeabi_ddiv>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4690      	mov	r8, r2
 80021da:	4699      	mov	r9, r3
 80021dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021de:	f7fe fa11 	bl	8000604 <__aeabi_i2d>
 80021e2:	4604      	mov	r4, r0
 80021e4:	460d      	mov	r5, r1
 80021e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e8:	3302      	adds	r3, #2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe fa0a 	bl	8000604 <__aeabi_i2d>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	ec43 2b11 	vmov	d1, r2, r3
 80021f8:	ed9f 0b57 	vldr	d0, [pc, #348]	; 8002358 <decodeGGA+0x668>
 80021fc:	f00d fcc8 	bl	800fb90 <pow>
 8002200:	ec53 2b10 	vmov	r2, r3, d0
 8002204:	4620      	mov	r0, r4
 8002206:	4629      	mov	r1, r5
 8002208:	f7fe fb90 	bl	800092c <__aeabi_ddiv>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4640      	mov	r0, r8
 8002212:	4649      	mov	r1, r9
 8002214:	f7fe f8aa 	bl	800036c <__adddf3>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8002220:	6839      	ldr	r1, [r7, #0]
 8002222:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002226:	e9c1 2304 	strd	r2, r3, [r1, #16]
	inx++;
 800222a:	4b4d      	ldr	r3, [pc, #308]	; (8002360 <decodeGGA+0x670>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	3301      	adds	r3, #1
 8002230:	4a4b      	ldr	r2, [pc, #300]	; (8002360 <decodeGGA+0x670>)
 8002232:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8002234:	4b4a      	ldr	r3, [pc, #296]	; (8002360 <decodeGGA+0x670>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	781a      	ldrb	r2, [r3, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	761a      	strb	r2, [r3, #24]

	/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 8002244:	4b46      	ldr	r3, [pc, #280]	; (8002360 <decodeGGA+0x670>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	3301      	adds	r3, #1
 800224a:	4a45      	ldr	r2, [pc, #276]	; (8002360 <decodeGGA+0x670>)
 800224c:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 800224e:	4b44      	ldr	r3, [pc, #272]	; (8002360 <decodeGGA+0x670>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	3301      	adds	r3, #1
 8002254:	4a42      	ldr	r2, [pc, #264]	; (8002360 <decodeGGA+0x670>)
 8002256:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 8002258:	4b41      	ldr	r3, [pc, #260]	; (8002360 <decodeGGA+0x670>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	3301      	adds	r3, #1
 800225e:	4a40      	ldr	r2, [pc, #256]	; (8002360 <decodeGGA+0x670>)
 8002260:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8002262:	4b3f      	ldr	r3, [pc, #252]	; (8002360 <decodeGGA+0x670>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	3301      	adds	r3, #1
 8002268:	4a3d      	ldr	r2, [pc, #244]	; (8002360 <decodeGGA+0x670>)
 800226a:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	220c      	movs	r2, #12
 8002272:	2100      	movs	r1, #0
 8002274:	4618      	mov	r0, r3
 8002276:	f00b fba0 	bl	800d9ba <memset>
	i = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') // copy upto the ',' after number of satellites
 800227e:	e013      	b.n	80022a8 <decodeGGA+0x5b8>
	{
		buffer[i] = GGAbuffer[inx];
 8002280:	4b37      	ldr	r3, [pc, #220]	; (8002360 <decodeGGA+0x670>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	7819      	ldrb	r1, [r3, #0]
 800228c:	f107 020c 	add.w	r2, r7, #12
 8002290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002292:	4413      	add	r3, r2
 8002294:	460a      	mov	r2, r1
 8002296:	701a      	strb	r2, [r3, #0]
		i++;
 8002298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229a:	3301      	adds	r3, #1
 800229c:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 800229e:	4b30      	ldr	r3, [pc, #192]	; (8002360 <decodeGGA+0x670>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3301      	adds	r3, #1
 80022a4:	4a2e      	ldr	r2, [pc, #184]	; (8002360 <decodeGGA+0x670>)
 80022a6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the ',' after number of satellites
 80022a8:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <decodeGGA+0x670>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b2c      	cmp	r3, #44	; 0x2c
 80022b6:	d1e3      	bne.n	8002280 <decodeGGA+0x590>
	}
	gga->numofsat = atoi(buffer); // convert the buffer to number and save into the structure
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	4618      	mov	r0, r3
 80022be:	f00a fd3c 	bl	800cd3a <atoi>
 80022c2:	4602      	mov	r2, r0
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	641a      	str	r2, [r3, #64]	; 0x40

	/***************** skip HDOP  *********************/
	inx++;
 80022c8:	4b25      	ldr	r3, [pc, #148]	; (8002360 <decodeGGA+0x670>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3301      	adds	r3, #1
 80022ce:	4a24      	ldr	r2, [pc, #144]	; (8002360 <decodeGGA+0x670>)
 80022d0:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80022d2:	e004      	b.n	80022de <decodeGGA+0x5ee>
		inx++;
 80022d4:	4b22      	ldr	r3, [pc, #136]	; (8002360 <decodeGGA+0x670>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	3301      	adds	r3, #1
 80022da:	4a21      	ldr	r2, [pc, #132]	; (8002360 <decodeGGA+0x670>)
 80022dc:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80022de:	4b20      	ldr	r3, [pc, #128]	; (8002360 <decodeGGA+0x670>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4413      	add	r3, r2
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b2c      	cmp	r3, #44	; 0x2c
 80022ec:	d1f2      	bne.n	80022d4 <decodeGGA+0x5e4>

	/*************** Altitude calculation ********************/
	inx++;
 80022ee:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <decodeGGA+0x670>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	3301      	adds	r3, #1
 80022f4:	4a1a      	ldr	r2, [pc, #104]	; (8002360 <decodeGGA+0x670>)
 80022f6:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80022f8:	f107 030c 	add.w	r3, r7, #12
 80022fc:	220c      	movs	r2, #12
 80022fe:	2100      	movs	r1, #0
 8002300:	4618      	mov	r0, r3
 8002302:	f00b fb5a 	bl	800d9ba <memset>
	i = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') {
 800230a:	e013      	b.n	8002334 <decodeGGA+0x644>
		buffer[i] = GGAbuffer[inx];
 800230c:	4b14      	ldr	r3, [pc, #80]	; (8002360 <decodeGGA+0x670>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	7819      	ldrb	r1, [r3, #0]
 8002318:	f107 020c 	add.w	r2, r7, #12
 800231c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800231e:	4413      	add	r3, r2
 8002320:	460a      	mov	r2, r1
 8002322:	701a      	strb	r2, [r3, #0]
		i++;
 8002324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002326:	3301      	adds	r3, #1
 8002328:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 800232a:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <decodeGGA+0x670>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	3301      	adds	r3, #1
 8002330:	4a0b      	ldr	r2, [pc, #44]	; (8002360 <decodeGGA+0x670>)
 8002332:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') {
 8002334:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <decodeGGA+0x670>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b2c      	cmp	r3, #44	; 0x2c
 8002342:	d1e3      	bne.n	800230c <decodeGGA+0x61c>
	}
	num = (atoi(buffer));
 8002344:	f107 030c 	add.w	r3, r7, #12
 8002348:	4618      	mov	r0, r3
 800234a:	f00a fcf6 	bl	800cd3a <atoi>
 800234e:	4603      	mov	r3, r0
 8002350:	85fb      	strh	r3, [r7, #46]	; 0x2e
	j = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 8002356:	e00a      	b.n	800236e <decodeGGA+0x67e>
 8002358:	00000000 	.word	0x00000000
 800235c:	40240000 	.word	0x40240000
 8002360:	200002f0 	.word	0x200002f0
 8002364:	40590000 	.word	0x40590000
		j++;
 8002368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236a:	3301      	adds	r3, #1
 800236c:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 800236e:	f107 020c 	add.w	r2, r7, #12
 8002372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002374:	4413      	add	r3, r2
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b2e      	cmp	r3, #46	; 0x2e
 800237a:	d1f5      	bne.n	8002368 <decodeGGA+0x678>
	j++;
 800237c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237e:	3301      	adds	r3, #1
 8002380:	633b      	str	r3, [r7, #48]	; 0x30
	declen = (strlen(buffer)) - j;
 8002382:	f107 030c 	add.w	r3, r7, #12
 8002386:	4618      	mov	r0, r3
 8002388:	f7fd ffe2 	bl	8000350 <strlen>
 800238c:	4602      	mov	r2, r0
 800238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
	dec = atoi((char*) buffer + j);
 8002394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002396:	f107 020c 	add.w	r2, r7, #12
 800239a:	4413      	add	r3, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f00a fccc 	bl	800cd3a <atoi>
 80023a2:	6278      	str	r0, [r7, #36]	; 0x24
	lat = (num) + (dec / pow(10, (declen)));
 80023a4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe f92b 	bl	8000604 <__aeabi_i2d>
 80023ae:	4604      	mov	r4, r0
 80023b0:	460d      	mov	r5, r1
 80023b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023b4:	f7fe f926 	bl	8000604 <__aeabi_i2d>
 80023b8:	4680      	mov	r8, r0
 80023ba:	4689      	mov	r9, r1
 80023bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023be:	f7fe f921 	bl	8000604 <__aeabi_i2d>
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	ec43 2b11 	vmov	d1, r2, r3
 80023ca:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8002428 <decodeGGA+0x738>
 80023ce:	f00d fbdf 	bl	800fb90 <pow>
 80023d2:	ec53 2b10 	vmov	r2, r3, d0
 80023d6:	4640      	mov	r0, r8
 80023d8:	4649      	mov	r1, r9
 80023da:	f7fe faa7 	bl	800092c <__aeabi_ddiv>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4620      	mov	r0, r4
 80023e4:	4629      	mov	r1, r5
 80023e6:	f7fd ffc1 	bl	800036c <__adddf3>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
	gga->alt.altitude = lat;
 80023f2:	6839      	ldr	r1, [r7, #0]
 80023f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023f8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	inx++;
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <decodeGGA+0x740>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	3301      	adds	r3, #1
 8002402:	4a0b      	ldr	r2, [pc, #44]	; (8002430 <decodeGGA+0x740>)
 8002404:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8002406:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <decodeGGA+0x740>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4413      	add	r3, r2
 8002410:	781a      	ldrb	r2, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	return 0;
 8002418:	2300      	movs	r3, #0

}
 800241a:	4618      	mov	r0, r3
 800241c:	3738      	adds	r7, #56	; 0x38
 800241e:	46bd      	mov	sp, r7
 8002420:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002424:	f3af 8000 	nop.w
 8002428:	00000000 	.word	0x00000000
 800242c:	40240000 	.word	0x40240000
 8002430:	200002f0 	.word	0x200002f0

08002434 <TASK_GPS>:
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart6;

void TASK_GPS        (void *pvParameters)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af02      	add	r7, sp, #8
 800243a:	6078      	str	r0, [r7, #4]
	uint8_t Decode_Error_Code;
	while(1)
	{
		/*Update the GPS Data*/
		Decode_Error_Code = GPS_uint8DecodeGGAData();
 800243c:	f7ff f9d4 	bl	80017e8 <GPS_uint8DecodeGGAData>
 8002440:	4603      	mov	r3, r0
 8002442:	73fb      	strb	r3, [r7, #15]
		if(Decode_Error_Code==Decode_Success)
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d1f8      	bne.n	800243c <TASK_GPS+0x8>
		{
			/*Update the completetion flag to activate the sendESP_Periodic task*/
			if(Global_GPS_Speed_Completetion==Nothing_Completed)
 800244a:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <TASK_GPS+0x50>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d103      	bne.n	800245a <TASK_GPS+0x26>
			{
				/* Updating the variable to notify the speed algorithm that the gps has
				 * done decoding and it can puplish the periodic data to the WIFI module */
				Global_GPS_Speed_Completetion = Half_Completed_GPS;
 8002452:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <TASK_GPS+0x50>)
 8002454:	2202      	movs	r2, #2
 8002456:	701a      	strb	r2, [r3, #0]
 8002458:	e00f      	b.n	800247a <TASK_GPS+0x46>

			}
			else if(Global_GPS_Speed_Completetion==Half_Completed_Speed)
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <TASK_GPS+0x50>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d10b      	bne.n	800247a <TASK_GPS+0x46>
			{
				/* Reseting the variable for the next update cycle */
				Global_GPS_Speed_Completetion = Nothing_Completed;
 8002462:	4b08      	ldr	r3, [pc, #32]	; (8002484 <TASK_GPS+0x50>)
 8002464:	2200      	movs	r2, #0
 8002466:	701a      	strb	r2, [r3, #0]


				/*Activate the ESPTask*/
				xTaskNotify(Handle_ESP_Periodic,0,eNoAction);
 8002468:	4b07      	ldr	r3, [pc, #28]	; (8002488 <TASK_GPS+0x54>)
 800246a:	6818      	ldr	r0, [r3, #0]
 800246c:	2300      	movs	r3, #0
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2300      	movs	r3, #0
 8002472:	2200      	movs	r2, #0
 8002474:	2100      	movs	r1, #0
 8002476:	f007 fd5f 	bl	8009f38 <xTaskGenericNotify>
			}
			/*Stopping the task for 1 second to free the processor*/
			vTaskDelay(pdMS_TO_TICKS(1500));
 800247a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800247e:	f006 fe41 	bl	8009104 <vTaskDelay>
		Decode_Error_Code = GPS_uint8DecodeGGAData();
 8002482:	e7db      	b.n	800243c <TASK_GPS+0x8>
 8002484:	20000300 	.word	0x20000300
 8002488:	2000085c 	.word	0x2000085c

0800248c <TASK_CarControl>:


}

void TASK_CarControl(void *pvParameters)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af02      	add	r7, sp, #8
 8002492:	6078      	str	r0, [r7, #4]
	uint32_t Local_Notification_Value;
	BaseType_t Notify_Status;
	for (;;) {
		/*Waiting to be notified from the BT ISR */
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,&Local_Notification_Value,portMAX_DELAY);
 8002494:	f107 0308 	add.w	r3, r7, #8
 8002498:	f04f 32ff 	mov.w	r2, #4294967295
 800249c:	9200      	str	r2, [sp, #0]
 800249e:	2200      	movs	r2, #0
 80024a0:	2100      	movs	r1, #0
 80024a2:	2000      	movs	r0, #0
 80024a4:	f007 fcc0 	bl	8009e28 <xTaskGenericNotifyWait>
 80024a8:	60f8      	str	r0, [r7, #12]

		if(Notify_Status == pdTRUE)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d1f1      	bne.n	8002494 <TASK_CarControl+0x8>
		{
			// Read data from UART
			switch (received_char)
 80024b0:	4b5c      	ldr	r3, [pc, #368]	; (8002624 <TASK_CarControl+0x198>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	3b31      	subs	r3, #49	; 0x31
 80024b6:	2b3b      	cmp	r3, #59	; 0x3b
 80024b8:	d8ec      	bhi.n	8002494 <TASK_CarControl+0x8>
 80024ba:	a201      	add	r2, pc, #4	; (adr r2, 80024c0 <TASK_CarControl+0x34>)
 80024bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c0:	080025b1 	.word	0x080025b1
 80024c4:	080025b7 	.word	0x080025b7
 80024c8:	08002495 	.word	0x08002495
 80024cc:	080025bd 	.word	0x080025bd
 80024d0:	080025c3 	.word	0x080025c3
 80024d4:	080025db 	.word	0x080025db
 80024d8:	080025e1 	.word	0x080025e1
 80024dc:	080025e7 	.word	0x080025e7
 80024e0:	08002495 	.word	0x08002495
 80024e4:	08002495 	.word	0x08002495
 80024e8:	08002495 	.word	0x08002495
 80024ec:	08002495 	.word	0x08002495
 80024f0:	08002495 	.word	0x08002495
 80024f4:	08002495 	.word	0x08002495
 80024f8:	08002495 	.word	0x08002495
 80024fc:	08002495 	.word	0x08002495
 8002500:	08002495 	.word	0x08002495
 8002504:	08002495 	.word	0x08002495
 8002508:	08002495 	.word	0x08002495
 800250c:	08002495 	.word	0x08002495
 8002510:	08002495 	.word	0x08002495
 8002514:	08002495 	.word	0x08002495
 8002518:	08002495 	.word	0x08002495
 800251c:	08002495 	.word	0x08002495
 8002520:	08002495 	.word	0x08002495
 8002524:	08002495 	.word	0x08002495
 8002528:	08002495 	.word	0x08002495
 800252c:	08002495 	.word	0x08002495
 8002530:	08002495 	.word	0x08002495
 8002534:	08002495 	.word	0x08002495
 8002538:	08002495 	.word	0x08002495
 800253c:	08002495 	.word	0x08002495
 8002540:	08002495 	.word	0x08002495
 8002544:	08002495 	.word	0x08002495
 8002548:	08002495 	.word	0x08002495
 800254c:	08002495 	.word	0x08002495
 8002550:	08002495 	.word	0x08002495
 8002554:	08002495 	.word	0x08002495
 8002558:	08002495 	.word	0x08002495
 800255c:	08002495 	.word	0x08002495
 8002560:	08002495 	.word	0x08002495
 8002564:	08002495 	.word	0x08002495
 8002568:	08002495 	.word	0x08002495
 800256c:	08002495 	.word	0x08002495
 8002570:	08002495 	.word	0x08002495
 8002574:	08002495 	.word	0x08002495
 8002578:	08002495 	.word	0x08002495
 800257c:	08002495 	.word	0x08002495
 8002580:	08002495 	.word	0x08002495
 8002584:	08002495 	.word	0x08002495
 8002588:	08002495 	.word	0x08002495
 800258c:	08002495 	.word	0x08002495
 8002590:	08002495 	.word	0x08002495
 8002594:	080025f9 	.word	0x080025f9
 8002598:	08002495 	.word	0x08002495
 800259c:	08002495 	.word	0x08002495
 80025a0:	08002495 	.word	0x08002495
 80025a4:	08002495 	.word	0x08002495
 80025a8:	08002495 	.word	0x08002495
 80025ac:	080025ed 	.word	0x080025ed
			{
			case '1':
				Car_Rotate_LeftForward();
 80025b0:	f7fe fffc 	bl	80015ac <Car_Rotate_LeftForward>
				break;
 80025b4:	e035      	b.n	8002622 <TASK_CarControl+0x196>
			case '2':
				Car_Rotate_Left();
 80025b6:	f7fe ff9d 	bl	80014f4 <Car_Rotate_Left>
				break;
 80025ba:	e032      	b.n	8002622 <TASK_CarControl+0x196>
			case '4':
				Car_Move_Forward_High_Speed();
 80025bc:	f7fe ff10 	bl	80013e0 <Car_Move_Forward_High_Speed>
				break;
 80025c0:	e02f      	b.n	8002622 <TASK_CarControl+0x196>
			case '5':
				Car_Stop();
 80025c2:	f7ff f821 	bl	8001608 <Car_Stop>

				/*Notify the sendEspStatus task*/
				xTaskNotify(Handle_ESP_Status,Notify_TASK_ESPStatus_HardBreaking,eSetValueWithOverwrite);
 80025c6:	4b18      	ldr	r3, [pc, #96]	; (8002628 <TASK_CarControl+0x19c>)
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	2300      	movs	r3, #0
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	2303      	movs	r3, #3
 80025d0:	2205      	movs	r2, #5
 80025d2:	2100      	movs	r1, #0
 80025d4:	f007 fcb0 	bl	8009f38 <xTaskGenericNotify>

				break;
 80025d8:	e023      	b.n	8002622 <TASK_CarControl+0x196>
			case '6':
				Car_Move_Backward();
 80025da:	f7fe ff2f 	bl	800143c <Car_Move_Backward>
				break;
 80025de:	e020      	b.n	8002622 <TASK_CarControl+0x196>
			case '7':
				Car_Rotate_RightForward();
 80025e0:	f7fe ffb6 	bl	8001550 <Car_Rotate_RightForward>
				break;
 80025e4:	e01d      	b.n	8002622 <TASK_CarControl+0x196>
			case '8':
				Car_Rotate_Right();
 80025e6:	f7fe ff57 	bl	8001498 <Car_Rotate_Right>
				break;
 80025ea:	e01a      	b.n	8002622 <TASK_CarControl+0x196>
			case 'l':
				Light_On();
 80025ec:	f7ff f824 	bl	8001638 <Light_On>

				/* Updating the car light source status*/
				Global_LightStatus = LIGHT_ON_STATUS;
 80025f0:	4b0e      	ldr	r3, [pc, #56]	; (800262c <TASK_CarControl+0x1a0>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	701a      	strb	r2, [r3, #0]

				break;
 80025f6:	e014      	b.n	8002622 <TASK_CarControl+0x196>
			case 'f':
				Light_OFF();
 80025f8:	f7ff f82a 	bl	8001650 <Light_OFF>

				/* Updating the car light source status*/
				Global_LightStatus = LIGHT_OFF_STATUS;
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <TASK_CarControl+0x1a0>)
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]

				/* Stopping the unnecessary warning */
				Buzzer_voidStop();
 8002602:	f7fe fe3f 	bl	8001284 <Buzzer_voidStop>
				LCD_voidClearDisplay();
 8002606:	f7ff fb35 	bl	8001c74 <LCD_voidClearDisplay>

				/* Stop the unnecessary timer because the user already reacted */
				xTimerStop(Handle_Timer_LightStop,1000);
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <TASK_CarControl+0x1a4>)
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	2300      	movs	r3, #0
 8002616:	2200      	movs	r2, #0
 8002618:	2103      	movs	r1, #3
 800261a:	f008 f83b 	bl	800a694 <xTimerGenericCommand>

				break;
 800261e:	bf00      	nop
 8002620:	e738      	b.n	8002494 <TASK_CarControl+0x8>
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,&Local_Notification_Value,portMAX_DELAY);
 8002622:	e737      	b.n	8002494 <TASK_CarControl+0x8>
 8002624:	20000850 	.word	0x20000850
 8002628:	20000860 	.word	0x20000860
 800262c:	20000323 	.word	0x20000323
 8002630:	20000884 	.word	0x20000884

08002634 <TASK_ESPSend_PeriodicData>:
			}
		}
	}
}
void TASK_ESPSend_PeriodicData (void *pvParameters)
{
 8002634:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af02      	add	r7, sp, #8
 800263c:	6078      	str	r0, [r7, #4]
	uint32_t Local_uint32NotificationValue;
	while(1)
	{

		/*Reading done from GPS and Speed sensor*/
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,0xFFFFFFFF,&Local_uint32NotificationValue, portMAX_DELAY);
 800263e:	f107 0308 	add.w	r3, r7, #8
 8002642:	f04f 32ff 	mov.w	r2, #4294967295
 8002646:	9200      	str	r2, [sp, #0]
 8002648:	f04f 32ff 	mov.w	r2, #4294967295
 800264c:	2100      	movs	r1, #0
 800264e:	2000      	movs	r0, #0
 8002650:	f007 fbea 	bl	8009e28 <xTaskGenericNotifyWait>
 8002654:	60f8      	str	r0, [r7, #12]
		if(Notify_Status == pdTRUE)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d1f0      	bne.n	800263e <TASK_ESPSend_PeriodicData+0xa>
		{
			/*Updating the transmission buffer*/
			GPSSPEED_voidBuildMsg(ESP_TX_Buffer_Periodic, GPS_Data.Longitude,GPS_Data.Latitude , Global_Speed);
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <TASK_ESPSend_PeriodicData+0x68>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4618      	mov	r0, r3
 8002662:	f7fd ffe1 	bl	8000628 <__aeabi_f2d>
 8002666:	4604      	mov	r4, r0
 8002668:	460d      	mov	r5, r1
 800266a:	4b0c      	ldr	r3, [pc, #48]	; (800269c <TASK_ESPSend_PeriodicData+0x68>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7fd ffda 	bl	8000628 <__aeabi_f2d>
 8002674:	4680      	mov	r8, r0
 8002676:	4689      	mov	r9, r1
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <TASK_ESPSend_PeriodicData+0x6c>)
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	4619      	mov	r1, r3
 800267e:	ec49 8b11 	vmov	d1, r8, r9
 8002682:	ec45 4b10 	vmov	d0, r4, r5
 8002686:	4807      	ldr	r0, [pc, #28]	; (80026a4 <TASK_ESPSend_PeriodicData+0x70>)
 8002688:	f7fe fcec 	bl	8001064 <GPSSPEED_voidBuildMsg>

			/*Transmitting the GPS, SPEED elements */
			HAL_UART_Transmit(&huart5,ESP_TX_Buffer_Periodic, sizeof(ESP_TX_Buffer_Periodic), 1500);
 800268c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002690:	221b      	movs	r2, #27
 8002692:	4904      	ldr	r1, [pc, #16]	; (80026a4 <TASK_ESPSend_PeriodicData+0x70>)
 8002694:	4804      	ldr	r0, [pc, #16]	; (80026a8 <TASK_ESPSend_PeriodicData+0x74>)
 8002696:	f004 fd54 	bl	8007142 <HAL_UART_Transmit>
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,0xFFFFFFFF,&Local_uint32NotificationValue, portMAX_DELAY);
 800269a:	e7d0      	b.n	800263e <TASK_ESPSend_PeriodicData+0xa>
 800269c:	200002e4 	.word	0x200002e4
 80026a0:	20000324 	.word	0x20000324
 80026a4:	20000308 	.word	0x20000308
 80026a8:	20000740 	.word	0x20000740

080026ac <TASK_ESP_SendStatus>:
	}

}

void TASK_ESP_SendStatus (void *pvParameters)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af02      	add	r7, sp, #8
 80026b2:	6078      	str	r0, [r7, #4]
	uint32_t Local_Notification_Value;

	BaseType_t Notify_Status;
	ESP_TX_Buffer_Status[0] = '%';
 80026b4:	4b22      	ldr	r3, [pc, #136]	; (8002740 <TASK_ESP_SendStatus+0x94>)
 80026b6:	2225      	movs	r2, #37	; 0x25
 80026b8:	701a      	strb	r2, [r3, #0]
	ESP_TX_Buffer_Status[2] = '^';
 80026ba:	4b21      	ldr	r3, [pc, #132]	; (8002740 <TASK_ESP_SendStatus+0x94>)
 80026bc:	225e      	movs	r2, #94	; 0x5e
 80026be:	709a      	strb	r2, [r3, #2]
	ESP_TX_Buffer_Status[3] = '!';
 80026c0:	4b1f      	ldr	r3, [pc, #124]	; (8002740 <TASK_ESP_SendStatus+0x94>)
 80026c2:	2221      	movs	r2, #33	; 0x21
 80026c4:	70da      	strb	r2, [r3, #3]
	while(1)
	{

		/*Waiting to be notified from the TASK_LightSensor */
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,0xffffffff,&Local_Notification_Value,portMAX_DELAY);
 80026c6:	f107 0308 	add.w	r3, r7, #8
 80026ca:	f04f 32ff 	mov.w	r2, #4294967295
 80026ce:	9200      	str	r2, [sp, #0]
 80026d0:	f04f 32ff 	mov.w	r2, #4294967295
 80026d4:	2100      	movs	r1, #0
 80026d6:	2000      	movs	r0, #0
 80026d8:	f007 fba6 	bl	8009e28 <xTaskGenericNotifyWait>
 80026dc:	60f8      	str	r0, [r7, #12]
		if(Notify_Status == pdTRUE)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d1f0      	bne.n	80026c6 <TASK_ESP_SendStatus+0x1a>
		{

			// Read data from Light_Sensor_Task
			switch (Local_Notification_Value)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2b54      	cmp	r3, #84	; 0x54
 80026e8:	d01c      	beq.n	8002724 <TASK_ESP_SendStatus+0x78>
 80026ea:	2b54      	cmp	r3, #84	; 0x54
 80026ec:	d825      	bhi.n	800273a <TASK_ESP_SendStatus+0x8e>
 80026ee:	2b05      	cmp	r3, #5
 80026f0:	d002      	beq.n	80026f8 <TASK_ESP_SendStatus+0x4c>
 80026f2:	2b46      	cmp	r3, #70	; 0x46
 80026f4:	d00b      	beq.n	800270e <TASK_ESP_SendStatus+0x62>
				/* Transmitting the Car status to the ESP32 */
				HAL_UART_Transmit(&huart5,ESP_TX_Buffer_Status, sizeof(ESP_TX_Buffer_Status), 1500);

				break;

			default: break;
 80026f6:	e020      	b.n	800273a <TASK_ESP_SendStatus+0x8e>
				ESP_TX_Buffer_Status[1] = 'B';
 80026f8:	4b11      	ldr	r3, [pc, #68]	; (8002740 <TASK_ESP_SendStatus+0x94>)
 80026fa:	2242      	movs	r2, #66	; 0x42
 80026fc:	705a      	strb	r2, [r3, #1]
				HAL_UART_Transmit(&huart5,ESP_TX_Buffer_Status, sizeof(ESP_TX_Buffer_Status), 1500);
 80026fe:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002702:	2204      	movs	r2, #4
 8002704:	490e      	ldr	r1, [pc, #56]	; (8002740 <TASK_ESP_SendStatus+0x94>)
 8002706:	480f      	ldr	r0, [pc, #60]	; (8002744 <TASK_ESP_SendStatus+0x98>)
 8002708:	f004 fd1b 	bl	8007142 <HAL_UART_Transmit>
				break;
 800270c:	e016      	b.n	800273c <TASK_ESP_SendStatus+0x90>
				ESP_TX_Buffer_Status[1] = 'F';
 800270e:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <TASK_ESP_SendStatus+0x94>)
 8002710:	2246      	movs	r2, #70	; 0x46
 8002712:	705a      	strb	r2, [r3, #1]
				HAL_UART_Transmit(&huart5,ESP_TX_Buffer_Status, sizeof(ESP_TX_Buffer_Status), 1500);
 8002714:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002718:	2204      	movs	r2, #4
 800271a:	4909      	ldr	r1, [pc, #36]	; (8002740 <TASK_ESP_SendStatus+0x94>)
 800271c:	4809      	ldr	r0, [pc, #36]	; (8002744 <TASK_ESP_SendStatus+0x98>)
 800271e:	f004 fd10 	bl	8007142 <HAL_UART_Transmit>
				break;
 8002722:	e00b      	b.n	800273c <TASK_ESP_SendStatus+0x90>
				ESP_TX_Buffer_Status[1] = 'T';
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <TASK_ESP_SendStatus+0x94>)
 8002726:	2254      	movs	r2, #84	; 0x54
 8002728:	705a      	strb	r2, [r3, #1]
				HAL_UART_Transmit(&huart5,ESP_TX_Buffer_Status, sizeof(ESP_TX_Buffer_Status), 1500);
 800272a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800272e:	2204      	movs	r2, #4
 8002730:	4903      	ldr	r1, [pc, #12]	; (8002740 <TASK_ESP_SendStatus+0x94>)
 8002732:	4804      	ldr	r0, [pc, #16]	; (8002744 <TASK_ESP_SendStatus+0x98>)
 8002734:	f004 fd05 	bl	8007142 <HAL_UART_Transmit>
				break;
 8002738:	e000      	b.n	800273c <TASK_ESP_SendStatus+0x90>
			default: break;
 800273a:	bf00      	nop
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,0xffffffff,&Local_Notification_Value,portMAX_DELAY);
 800273c:	e7c3      	b.n	80026c6 <TASK_ESP_SendStatus+0x1a>
 800273e:	bf00      	nop
 8002740:	20000304 	.word	0x20000304
 8002744:	20000740 	.word	0x20000740

08002748 <TASK_ESP_Receive>:
		}
	}
}

void TASK_ESP_Receive (void *pvParameters)
{
 8002748:	b590      	push	{r4, r7, lr}
 800274a:	b087      	sub	sp, #28
 800274c:	af02      	add	r7, sp, #8
 800274e:	6078      	str	r0, [r7, #4]
	BaseType_t Notify_Status;
	uint32_t Local_uint32NotificationValue;
	while(1)
	{
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,&Local_uint32NotificationValue, portMAX_DELAY);
 8002750:	f107 0308 	add.w	r3, r7, #8
 8002754:	f04f 32ff 	mov.w	r2, #4294967295
 8002758:	9200      	str	r2, [sp, #0]
 800275a:	2200      	movs	r2, #0
 800275c:	2100      	movs	r1, #0
 800275e:	2000      	movs	r0, #0
 8002760:	f007 fb62 	bl	8009e28 <xTaskGenericNotifyWait>
 8002764:	60f8      	str	r0, [r7, #12]
		if(Notify_Status == pdTRUE)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d1f1      	bne.n	8002750 <TASK_ESP_Receive+0x8>
		{
			switch(ESP_Recieved_Char)
 800276c:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <TASK_ESP_Receive+0x78>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b47      	cmp	r3, #71	; 0x47
 8002772:	d017      	beq.n	80027a4 <TASK_ESP_Receive+0x5c>
 8002774:	2b4c      	cmp	r3, #76	; 0x4c
 8002776:	d121      	bne.n	80027bc <TASK_ESP_Receive+0x74>
			{
			case Notify_TASK_ESPRecieve_Light:

				/*Stopping preemption of other tasks in this critical section*/
				vTaskSuspendAll();
 8002778:	f006 fd5e 	bl	8009238 <vTaskSuspendAll>

				/*Activating the warning message and the buzzer to alert the driver*/
				Buzzer_voidHighSound();
 800277c:	f7fe fd72 	bl	8001264 <Buzzer_voidHighSound>
				LCD_HighLightIntensity_Warning();
 8002780:	f7ff f8da 	bl	8001938 <LCD_HighLightIntensity_Warning>

				/* Start the timer to autonomously turn off the light source if the user didn't
				 * & to stop the buzzer and clear LCD after period of specified time */
				xTimerStart(Handle_Timer_LightStop,1000);
 8002784:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <TASK_ESP_Receive+0x7c>)
 8002786:	681c      	ldr	r4, [r3, #0]
 8002788:	f006 fe64 	bl	8009454 <xTaskGetTickCount>
 800278c:	4602      	mov	r2, r0
 800278e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	2300      	movs	r3, #0
 8002796:	2101      	movs	r1, #1
 8002798:	4620      	mov	r0, r4
 800279a:	f007 ff7b 	bl	800a694 <xTimerGenericCommand>

				/*Resuming the tasks*/
				xTaskResumeAll();
 800279e:	f006 fd59 	bl	8009254 <xTaskResumeAll>

				break;
 80027a2:	e00c      	b.n	80027be <TASK_ESP_Receive+0x76>

			case Notify_TASK_ESPRecieve_BeingOvertaken:

				/* Stopping preemption of other tasks in this critical section */
				vTaskSuspendAll();
 80027a4:	f006 fd48 	bl	8009238 <vTaskSuspendAll>

				/* Sending the request to the raspberry pi */
				HAL_UART_Transmit(&huart6,&ESP_Recieved_Char, sizeof(ESP_Recieved_Char), 1500);
 80027a8:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80027ac:	2201      	movs	r2, #1
 80027ae:	4904      	ldr	r1, [pc, #16]	; (80027c0 <TASK_ESP_Receive+0x78>)
 80027b0:	4805      	ldr	r0, [pc, #20]	; (80027c8 <TASK_ESP_Receive+0x80>)
 80027b2:	f004 fcc6 	bl	8007142 <HAL_UART_Transmit>

				/* Resuming the tasks */
				xTaskResumeAll();
 80027b6:	f006 fd4d 	bl	8009254 <xTaskResumeAll>

				break;
 80027ba:	e000      	b.n	80027be <TASK_ESP_Receive+0x76>

			default:
				break;
 80027bc:	bf00      	nop
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,&Local_uint32NotificationValue, portMAX_DELAY);
 80027be:	e7c7      	b.n	8002750 <TASK_ESP_Receive+0x8>
 80027c0:	20000851 	.word	0x20000851
 80027c4:	20000884 	.word	0x20000884
 80027c8:	2000080c 	.word	0x2000080c

080027cc <TASK_Rasp_Receive>:


}

void TASK_Rasp_Receive(void *pvParameters)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	6078      	str	r0, [r7, #4]
	BaseType_t Notify_Status;
	uint32_t Local_uint32NotificationValue;
	uint32_t Local_uint32Timeout = 0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
	while(1)
	{
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,&Local_uint32NotificationValue, portMAX_DELAY);
 80027d8:	f107 030c 	add.w	r3, r7, #12
 80027dc:	f04f 32ff 	mov.w	r2, #4294967295
 80027e0:	9200      	str	r2, [sp, #0]
 80027e2:	2200      	movs	r2, #0
 80027e4:	2100      	movs	r1, #0
 80027e6:	2000      	movs	r0, #0
 80027e8:	f007 fb1e 	bl	8009e28 <xTaskGenericNotifyWait>
 80027ec:	6138      	str	r0, [r7, #16]
		if(Notify_Status == pdTRUE)
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d1f1      	bne.n	80027d8 <TASK_Rasp_Receive+0xc>
		{
			switch(Rasp_Recieved_Char)
 80027f4:	4b0d      	ldr	r3, [pc, #52]	; (800282c <TASK_Rasp_Receive+0x60>)
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	2b46      	cmp	r3, #70	; 0x46
 80027fa:	d00b      	beq.n	8002814 <TASK_Rasp_Receive+0x48>
 80027fc:	2b54      	cmp	r3, #84	; 0x54
 80027fe:	d113      	bne.n	8002828 <TASK_Rasp_Receive+0x5c>
			{
			case Notify_TASK_RaspReceieve_Overtake_Clear :

				/* Notify the sendEspStatus task */
				xTaskNotify(Handle_ESP_Status,Notify_TASK_ESPStatus_Overtake_Clear,eSetValueWithOverwrite);
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <TASK_Rasp_Receive+0x64>)
 8002802:	6818      	ldr	r0, [r3, #0]
 8002804:	2300      	movs	r3, #0
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	2303      	movs	r3, #3
 800280a:	2254      	movs	r2, #84	; 0x54
 800280c:	2100      	movs	r1, #0
 800280e:	f007 fb93 	bl	8009f38 <xTaskGenericNotify>

				break;
 8002812:	e00a      	b.n	800282a <TASK_Rasp_Receive+0x5e>

			case Notify_TASK_RaspReceieve_Overtake_NotClear:

				/* Notify the sendEspStatus task */
				xTaskNotify(Handle_ESP_Status,Notify_TASK_ESPStatus_Overtake_NotClear,eSetValueWithOverwrite);
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <TASK_Rasp_Receive+0x64>)
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	2300      	movs	r3, #0
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	2303      	movs	r3, #3
 800281e:	2246      	movs	r2, #70	; 0x46
 8002820:	2100      	movs	r1, #0
 8002822:	f007 fb89 	bl	8009f38 <xTaskGenericNotify>


				break;
 8002826:	e000      	b.n	800282a <TASK_Rasp_Receive+0x5e>

			default:	break;
 8002828:	bf00      	nop
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,&Local_uint32NotificationValue, portMAX_DELAY);
 800282a:	e7d5      	b.n	80027d8 <TASK_Rasp_Receive+0xc>
 800282c:	20000852 	.word	0x20000852
 8002830:	20000860 	.word	0x20000860

08002834 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	6039      	str	r1, [r7, #0]
 800283e:	71fb      	strb	r3, [r7, #7]
	 * increments by 1 for future storing, it doesnt coincide with the tail
	 * the % UART_BUFFER_SIZE checking if the index of the next storing procedure
	 * is bigger than the buffer size(ex this iteration stores in 512 byte and the next one
	 * will be in the 513 so i should reset the (i) to zero to repeat again)*/

  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002846:	3301      	adds	r3, #1
 8002848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800284c:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	429a      	cmp	r2, r3
 8002858:	d009      	beq.n	800286e <store_char+0x3a>
  {
	  /*Storing the charachter in the recent head pointed location*/
    buffer->buffer[buffer->head] = c;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	79f9      	ldrb	r1, [r7, #7]
 8002864:	54d1      	strb	r1, [r2, r3]

    /*After storing the character, incrementing the head for the next storing */
    buffer->head = i;
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 800286e:	bf00      	nop
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8002882:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <Uart_read+0x54>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800288a:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <Uart_read+0x54>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002892:	429a      	cmp	r2, r3
 8002894:	d102      	bne.n	800289c <Uart_read+0x20>
  {
    return -1;
 8002896:	f04f 33ff 	mov.w	r3, #4294967295
 800289a:	e013      	b.n	80028c4 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 800289c:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <Uart_read+0x54>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <Uart_read+0x54>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80028a8:	5cd3      	ldrb	r3, [r2, r3]
 80028aa:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80028ac:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <Uart_read+0x54>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <Uart_read+0x54>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 80028c2:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	20000530 	.word	0x20000530

080028d4 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80028d8:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <IsDataAvailable+0x30>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	4b08      	ldr	r3, [pc, #32]	; (8002904 <IsDataAvailable+0x30>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	20000530 	.word	0x20000530

08002908 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <Uart_peek+0x38>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002914:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <Uart_peek+0x38>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800291c:	429a      	cmp	r2, r3
 800291e:	d102      	bne.n	8002926 <Uart_peek+0x1e>
  {
    return -1;
 8002920:	f04f 33ff 	mov.w	r3, #4294967295
 8002924:	e006      	b.n	8002934 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <Uart_peek+0x38>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	4b05      	ldr	r3, [pc, #20]	; (8002940 <Uart_peek+0x38>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002932:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8002934:	4618      	mov	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	20000530 	.word	0x20000530

08002944 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
	int so_far =0;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7fd fcfc 	bl	8000350 <strlen>
 8002958:	4603      	mov	r3, r0
 800295a:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8002960:	e01e      	b.n	80029a0 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8002962:	4b36      	ldr	r3, [pc, #216]	; (8002a3c <Copy_upto+0xf8>)
 8002964:	6819      	ldr	r1, [r3, #0]
 8002966:	4b35      	ldr	r3, [pc, #212]	; (8002a3c <Copy_upto+0xf8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	6838      	ldr	r0, [r7, #0]
 8002972:	4403      	add	r3, r0
 8002974:	5c8a      	ldrb	r2, [r1, r2]
 8002976:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002978:	4b30      	ldr	r3, [pc, #192]	; (8002a3c <Copy_upto+0xf8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	4b2e      	ldr	r3, [pc, #184]	; (8002a3c <Copy_upto+0xf8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800298a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	3301      	adds	r3, #1
 8002992:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8002994:	bf00      	nop
 8002996:	f7ff ff9d 	bl	80028d4 <IsDataAvailable>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0fa      	beq.n	8002996 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 80029a0:	f7ff ffb2 	bl	8002908 <Uart_peek>
 80029a4:	4601      	mov	r1, r0
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	4413      	add	r3, r2
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	4299      	cmp	r1, r3
 80029b0:	d1d7      	bne.n	8002962 <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 80029b2:	e027      	b.n	8002a04 <Copy_upto+0xc0>
	{
		so_far++;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	3301      	adds	r3, #1
 80029b8:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 80029ba:	f7ff ff5f 	bl	800287c <Uart_read>
 80029be:	4601      	mov	r1, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	613a      	str	r2, [r7, #16]
 80029c6:	461a      	mov	r2, r3
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	4413      	add	r3, r2
 80029cc:	b2ca      	uxtb	r2, r1
 80029ce:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d101      	bne.n	80029dc <Copy_upto+0x98>
 80029d8:	2301      	movs	r3, #1
 80029da:	e02a      	b.n	8002a32 <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 80029dc:	4b18      	ldr	r3, [pc, #96]	; (8002a40 <Copy_upto+0xfc>)
 80029de:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80029e2:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 80029e4:	bf00      	nop
 80029e6:	f7ff ff75 	bl	80028d4 <IsDataAvailable>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d103      	bne.n	80029f8 <Copy_upto+0xb4>
 80029f0:	4b13      	ldr	r3, [pc, #76]	; (8002a40 <Copy_upto+0xfc>)
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f6      	bne.n	80029e6 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 80029f8:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <Copy_upto+0xfc>)
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <Copy_upto+0xc0>
 8002a00:	2300      	movs	r3, #0
 8002a02:	e016      	b.n	8002a32 <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 8002a04:	f7ff ff80 	bl	8002908 <Uart_peek>
 8002a08:	4601      	mov	r1, r0
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	4413      	add	r3, r2
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	4299      	cmp	r1, r3
 8002a14:	d0ce      	beq.n	80029b4 <Copy_upto+0x70>
	}

	if (so_far != len)
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d002      	beq.n	8002a24 <Copy_upto+0xe0>
	{
		so_far = 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
		goto again;
 8002a22:	e79d      	b.n	8002960 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d101      	bne.n	8002a30 <Copy_upto+0xec>
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e000      	b.n	8002a32 <Copy_upto+0xee>
	else return 0;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000530 	.word	0x20000530
 8002a40:	20000326 	.word	0x20000326

08002a44 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7fd fc7d 	bl	8000350 <strlen>
 8002a56:	4603      	mov	r3, r0
 8002a58:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8002a5a:	4b3c      	ldr	r3, [pc, #240]	; (8002b4c <Wait_for+0x108>)
 8002a5c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002a60:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8002a62:	bf00      	nop
 8002a64:	f7ff ff36 	bl	80028d4 <IsDataAvailable>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d103      	bne.n	8002a76 <Wait_for+0x32>
 8002a6e:	4b37      	ldr	r3, [pc, #220]	; (8002b4c <Wait_for+0x108>)
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f6      	bne.n	8002a64 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8002a76:	4b35      	ldr	r3, [pc, #212]	; (8002b4c <Wait_for+0x108>)
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d119      	bne.n	8002ab2 <Wait_for+0x6e>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	e060      	b.n	8002b44 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8002a82:	4b33      	ldr	r3, [pc, #204]	; (8002b50 <Wait_for+0x10c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a8a:	4b31      	ldr	r3, [pc, #196]	; (8002b50 <Wait_for+0x10c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d00b      	beq.n	8002aae <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002a96:	4b2e      	ldr	r3, [pc, #184]	; (8002b50 <Wait_for+0x10c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <Wait_for+0x10c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aa8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002aac:	e001      	b.n	8002ab2 <Wait_for+0x6e>
		}

		else
		{
			return 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e048      	b.n	8002b44 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8002ab2:	f7ff ff29 	bl	8002908 <Uart_peek>
 8002ab6:	4601      	mov	r1, r0
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	4413      	add	r3, r2
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	4299      	cmp	r1, r3
 8002ac2:	d1de      	bne.n	8002a82 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002ac4:	e027      	b.n	8002b16 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002acc:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <Wait_for+0x10c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	4b1e      	ldr	r3, [pc, #120]	; (8002b50 <Wait_for+0x10c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ade:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d101      	bne.n	8002aee <Wait_for+0xaa>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e02a      	b.n	8002b44 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8002aee:	4b17      	ldr	r3, [pc, #92]	; (8002b4c <Wait_for+0x108>)
 8002af0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002af4:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8002af6:	bf00      	nop
 8002af8:	f7ff feec 	bl	80028d4 <IsDataAvailable>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d103      	bne.n	8002b0a <Wait_for+0xc6>
 8002b02:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <Wait_for+0x108>)
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f6      	bne.n	8002af8 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8002b0a:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <Wait_for+0x108>)
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <Wait_for+0xd2>
 8002b12:	2300      	movs	r3, #0
 8002b14:	e016      	b.n	8002b44 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002b16:	f7ff fef7 	bl	8002908 <Uart_peek>
 8002b1a:	4601      	mov	r1, r0
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	4413      	add	r3, r2
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	4299      	cmp	r1, r3
 8002b26:	d0ce      	beq.n	8002ac6 <Wait_for+0x82>
	}

	if (so_far != len)
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d002      	beq.n	8002b36 <Wait_for+0xf2>
	{
		so_far = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]
		goto again;
 8002b34:	e791      	b.n	8002a5a <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d101      	bne.n	8002b42 <Wait_for+0xfe>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <Wait_for+0x100>
	else return 0;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20000326 	.word	0x20000326
 8002b50:	20000530 	.word	0x20000530

08002b54 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d013      	beq.n	8002b9e <Uart_isr+0x4a>
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f003 0320 	and.w	r3, r3, #32
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00e      	beq.n	8002b9e <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8002b8e:	4b1e      	ldr	r3, [pc, #120]	; (8002c08 <Uart_isr+0xb4>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	4611      	mov	r1, r2
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fe4c 	bl	8002834 <store_char>
        return;
 8002b9c:	e031      	b.n	8002c02 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d02c      	beq.n	8002c02 <Uart_isr+0xae>
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d027      	beq.n	8002c02 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8002bb2:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <Uart_isr+0xb8>)
 8002bb4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002bb8:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <Uart_isr+0xb8>)
 8002bba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d108      	bne.n	8002bd4 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bd0:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8002bd2:	e015      	b.n	8002c00 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8002bd4:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <Uart_isr+0xb8>)
 8002bd6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002bda:	4a0c      	ldr	r2, [pc, #48]	; (8002c0c <Uart_isr+0xb8>)
 8002bdc:	5cd3      	ldrb	r3, [r2, r3]
 8002bde:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8002be0:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <Uart_isr+0xb8>)
 8002be2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002be6:	3301      	adds	r3, #1
 8002be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bec:	4a07      	ldr	r2, [pc, #28]	; (8002c0c <Uart_isr+0xb8>)
 8002bee:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	7bba      	ldrb	r2, [r7, #14]
 8002bfe:	605a      	str	r2, [r3, #4]
    	return;
 8002c00:	bf00      	nop
    }
}
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20000530 	.word	0x20000530
 8002c0c:	20000328 	.word	0x20000328

08002c10 <Calculate_Car_Speed>:
#include "LCD_I2C.h"

extern uint32_t edges_counter;

float Calculate_Car_Speed()
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
	float Local_uint16Speed;
	Local_uint16Speed = (edges_counter * 360 /50) * 2 * 3.14 * 0.03;
 8002c16:	4b26      	ldr	r3, [pc, #152]	; (8002cb0 <Calculate_Car_Speed+0xa0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8002c1e:	fb02 f303 	mul.w	r3, r2, r3
 8002c22:	4a24      	ldr	r2, [pc, #144]	; (8002cb4 <Calculate_Car_Speed+0xa4>)
 8002c24:	fba2 2303 	umull	r2, r3, r2, r3
 8002c28:	091b      	lsrs	r3, r3, #4
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fd fcd9 	bl	80005e4 <__aeabi_ui2d>
 8002c32:	a319      	add	r3, pc, #100	; (adr r3, 8002c98 <Calculate_Car_Speed+0x88>)
 8002c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c38:	f7fd fd4e 	bl	80006d8 <__aeabi_dmul>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	a316      	add	r3, pc, #88	; (adr r3, 8002ca0 <Calculate_Car_Speed+0x90>)
 8002c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4a:	f7fd fd45 	bl	80006d8 <__aeabi_dmul>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	f7fe f837 	bl	8000cc8 <__aeabi_d2f>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	607b      	str	r3, [r7, #4]
	Local_uint16Speed = Local_uint16Speed * 3.6 ;
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fd fce2 	bl	8000628 <__aeabi_f2d>
 8002c64:	a310      	add	r3, pc, #64	; (adr r3, 8002ca8 <Calculate_Car_Speed+0x98>)
 8002c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6a:	f7fd fd35 	bl	80006d8 <__aeabi_dmul>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4610      	mov	r0, r2
 8002c74:	4619      	mov	r1, r3
 8002c76:	f7fe f827 	bl	8000cc8 <__aeabi_d2f>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	607b      	str	r3, [r7, #4]
	edges_counter=0;
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <Calculate_Car_Speed+0xa0>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
	return Local_uint16Speed;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	ee07 3a90 	vmov	s15, r3
}
 8002c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	f3af 8000 	nop.w
 8002c98:	51eb851f 	.word	0x51eb851f
 8002c9c:	40091eb8 	.word	0x40091eb8
 8002ca0:	eb851eb8 	.word	0xeb851eb8
 8002ca4:	3f9eb851 	.word	0x3f9eb851
 8002ca8:	cccccccd 	.word	0xcccccccd
 8002cac:	400ccccc 	.word	0x400ccccc
 8002cb0:	20000214 	.word	0x20000214
 8002cb4:	51eb851f 	.word	0x51eb851f

08002cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cbe:	f001 f9fb 	bl	80040b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cc2:	f000 f937 	bl	8002f34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cc6:	f000 fc17 	bl	80034f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002cca:	f000 f993 	bl	8002ff4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002cce:	f000 fb95 	bl	80033fc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002cd2:	f000 fbbd 	bl	8003450 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8002cd6:	f000 f9e9 	bl	80030ac <MX_TIM2_Init>
  MX_I2C3_Init();
 8002cda:	f000 f9b9 	bl	8003050 <MX_I2C3_Init>
  MX_TIM3_Init();
 8002cde:	f000 fa45 	bl	800316c <MX_TIM3_Init>
  MX_TIM6_Init();
 8002ce2:	f000 fabd 	bl	8003260 <MX_TIM6_Init>
  MX_TIM12_Init();
 8002ce6:	f000 faf1 	bl	80032cc <MX_TIM12_Init>
  MX_USART6_UART_Init();
 8002cea:	f000 fbdb 	bl	80034a4 <MX_USART6_UART_Init>
  MX_UART4_Init();
 8002cee:	f000 fb31 	bl	8003354 <MX_UART4_Init>
  MX_UART5_Init();
 8002cf2:	f000 fb59 	bl	80033a8 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
	/********************************Hardware_Initializing*********************************************/
	//GPS_voidInit();
	LCD_voidInit();
 8002cf6:	f7fe fecd 	bl	8001a94 <LCD_voidInit>

	/********************************Interrupts_Starting***********************************************/
	HAL_UART_Receive_IT(&huart5,&ESP_Recieved_Char,2);                   //ESP
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	496a      	ldr	r1, [pc, #424]	; (8002ea8 <main+0x1f0>)
 8002cfe:	486b      	ldr	r0, [pc, #428]	; (8002eac <main+0x1f4>)
 8002d00:	f004 fab1 	bl	8007266 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart6,&Rasp_Recieved_Char,1);				 	 //Raspberry
 8002d04:	2201      	movs	r2, #1
 8002d06:	496a      	ldr	r1, [pc, #424]	; (8002eb0 <main+0x1f8>)
 8002d08:	486a      	ldr	r0, [pc, #424]	; (8002eb4 <main+0x1fc>)
 8002d0a:	f004 faac 	bl	8007266 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3,&received_char ,1);                      //Blue tooth
 8002d0e:	2201      	movs	r2, #1
 8002d10:	4969      	ldr	r1, [pc, #420]	; (8002eb8 <main+0x200>)
 8002d12:	486a      	ldr	r0, [pc, #424]	; (8002ebc <main+0x204>)
 8002d14:	f004 faa7 	bl	8007266 <HAL_UART_Receive_IT>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);                          //Speed
 8002d18:	4b69      	ldr	r3, [pc, #420]	; (8002ec0 <main+0x208>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	4b68      	ldr	r3, [pc, #416]	; (8002ec0 <main+0x208>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	60da      	str	r2, [r3, #12]
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);                          //Speed
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4865      	ldr	r0, [pc, #404]	; (8002ec0 <main+0x208>)
 8002d2c:	f003 f9e0 	bl	80060f0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);							 //Speed
 8002d30:	2104      	movs	r1, #4
 8002d32:	4863      	ldr	r0, [pc, #396]	; (8002ec0 <main+0x208>)
 8002d34:	f003 f9dc 	bl	80060f0 <HAL_TIM_IC_Start_IT>
	//		SEGGER_SYSVIEW_Conf();
	//
	//		SEGGER_SYSVIEW_Start();

		/************************************SW_Timers-Creation********************************************/
		Handle_Timer_LightStop = xTimerCreate("Timer_LightStop", pdMS_TO_TICKS(5000), pdFALSE, &ID_TImer_LightStop, CallBack_TimerLightStop);
 8002d38:	4b62      	ldr	r3, [pc, #392]	; (8002ec4 <main+0x20c>)
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	4b62      	ldr	r3, [pc, #392]	; (8002ec8 <main+0x210>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f241 3188 	movw	r1, #5000	; 0x1388
 8002d44:	4861      	ldr	r0, [pc, #388]	; (8002ecc <main+0x214>)
 8002d46:	f007 fc4b 	bl	800a5e0 <xTimerCreate>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	4a60      	ldr	r2, [pc, #384]	; (8002ed0 <main+0x218>)
 8002d4e:	6013      	str	r3, [r2, #0]

		/************************************TASKS_Creation************************************************/
		Status_GPS = xTaskCreate(TASK_GPS, "GPS", 150, NULL, Priority_TASK_GPS, &Handle_GPS);
 8002d50:	4b60      	ldr	r3, [pc, #384]	; (8002ed4 <main+0x21c>)
 8002d52:	9301      	str	r3, [sp, #4]
 8002d54:	2302      	movs	r3, #2
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	2296      	movs	r2, #150	; 0x96
 8002d5c:	495e      	ldr	r1, [pc, #376]	; (8002ed8 <main+0x220>)
 8002d5e:	485f      	ldr	r0, [pc, #380]	; (8002edc <main+0x224>)
 8002d60:	f006 f848 	bl	8008df4 <xTaskCreate>
 8002d64:	4603      	mov	r3, r0
 8002d66:	4a5e      	ldr	r2, [pc, #376]	; (8002ee0 <main+0x228>)
 8002d68:	6013      	str	r3, [r2, #0]

		configASSERT(Status_GPS==pdPASS);
 8002d6a:	4b5d      	ldr	r3, [pc, #372]	; (8002ee0 <main+0x228>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d00a      	beq.n	8002d88 <main+0xd0>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d76:	f383 8811 	msr	BASEPRI, r3
 8002d7a:	f3bf 8f6f 	isb	sy
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002d84:	bf00      	nop
 8002d86:	e7fe      	b.n	8002d86 <main+0xce>

		Status_CarControl = xTaskCreate(TASK_CarControl, "CarControl", 200, NULL, Priority_TASK_CarControl, &Handle_CarControl);
 8002d88:	4b56      	ldr	r3, [pc, #344]	; (8002ee4 <main+0x22c>)
 8002d8a:	9301      	str	r3, [sp, #4]
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	2300      	movs	r3, #0
 8002d92:	22c8      	movs	r2, #200	; 0xc8
 8002d94:	4954      	ldr	r1, [pc, #336]	; (8002ee8 <main+0x230>)
 8002d96:	4855      	ldr	r0, [pc, #340]	; (8002eec <main+0x234>)
 8002d98:	f006 f82c 	bl	8008df4 <xTaskCreate>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	4a54      	ldr	r2, [pc, #336]	; (8002ef0 <main+0x238>)
 8002da0:	6013      	str	r3, [r2, #0]

		configASSERT(Status_CarControl==pdPASS);
 8002da2:	4b53      	ldr	r3, [pc, #332]	; (8002ef0 <main+0x238>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d00a      	beq.n	8002dc0 <main+0x108>
        __asm volatile
 8002daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dae:	f383 8811 	msr	BASEPRI, r3
 8002db2:	f3bf 8f6f 	isb	sy
 8002db6:	f3bf 8f4f 	dsb	sy
 8002dba:	613b      	str	r3, [r7, #16]
    }
 8002dbc:	bf00      	nop
 8002dbe:	e7fe      	b.n	8002dbe <main+0x106>

		Status_ESP_Periodic = xTaskCreate(TASK_ESPSend_PeriodicData, "ESP_Periodic", 200, NULL, Priority_TASK_ESP_Periodic, &Handle_ESP_Periodic);
 8002dc0:	4b4c      	ldr	r3, [pc, #304]	; (8002ef4 <main+0x23c>)
 8002dc2:	9301      	str	r3, [sp, #4]
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	22c8      	movs	r2, #200	; 0xc8
 8002dcc:	494a      	ldr	r1, [pc, #296]	; (8002ef8 <main+0x240>)
 8002dce:	484b      	ldr	r0, [pc, #300]	; (8002efc <main+0x244>)
 8002dd0:	f006 f810 	bl	8008df4 <xTaskCreate>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	4a4a      	ldr	r2, [pc, #296]	; (8002f00 <main+0x248>)
 8002dd8:	6013      	str	r3, [r2, #0]

		configASSERT(Status_ESP_Periodic==pdPASS);
 8002dda:	4b49      	ldr	r3, [pc, #292]	; (8002f00 <main+0x248>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d00a      	beq.n	8002df8 <main+0x140>
        __asm volatile
 8002de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de6:	f383 8811 	msr	BASEPRI, r3
 8002dea:	f3bf 8f6f 	isb	sy
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	60fb      	str	r3, [r7, #12]
    }
 8002df4:	bf00      	nop
 8002df6:	e7fe      	b.n	8002df6 <main+0x13e>

		Status_ESP_Status = xTaskCreate(TASK_ESP_SendStatus, "ESP_Status", 200, NULL, Priority_TASK_ESP_Status, &Handle_ESP_Status);
 8002df8:	4b42      	ldr	r3, [pc, #264]	; (8002f04 <main+0x24c>)
 8002dfa:	9301      	str	r3, [sp, #4]
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	2300      	movs	r3, #0
 8002e02:	22c8      	movs	r2, #200	; 0xc8
 8002e04:	4940      	ldr	r1, [pc, #256]	; (8002f08 <main+0x250>)
 8002e06:	4841      	ldr	r0, [pc, #260]	; (8002f0c <main+0x254>)
 8002e08:	f005 fff4 	bl	8008df4 <xTaskCreate>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	4a40      	ldr	r2, [pc, #256]	; (8002f10 <main+0x258>)
 8002e10:	6013      	str	r3, [r2, #0]

		configASSERT(Status_ESP_Status==pdPASS);
 8002e12:	4b3f      	ldr	r3, [pc, #252]	; (8002f10 <main+0x258>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d00a      	beq.n	8002e30 <main+0x178>
        __asm volatile
 8002e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1e:	f383 8811 	msr	BASEPRI, r3
 8002e22:	f3bf 8f6f 	isb	sy
 8002e26:	f3bf 8f4f 	dsb	sy
 8002e2a:	60bb      	str	r3, [r7, #8]
    }
 8002e2c:	bf00      	nop
 8002e2e:	e7fe      	b.n	8002e2e <main+0x176>

		Status_ESP_Receive = xTaskCreate(TASK_ESP_Receive, "ESP_Receive", 200, NULL, Priority_TASK_ESP_Receive, &Handle_ESP_Receive);
 8002e30:	4b38      	ldr	r3, [pc, #224]	; (8002f14 <main+0x25c>)
 8002e32:	9301      	str	r3, [sp, #4]
 8002e34:	2303      	movs	r3, #3
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	2300      	movs	r3, #0
 8002e3a:	22c8      	movs	r2, #200	; 0xc8
 8002e3c:	4936      	ldr	r1, [pc, #216]	; (8002f18 <main+0x260>)
 8002e3e:	4837      	ldr	r0, [pc, #220]	; (8002f1c <main+0x264>)
 8002e40:	f005 ffd8 	bl	8008df4 <xTaskCreate>
 8002e44:	4603      	mov	r3, r0
 8002e46:	4a36      	ldr	r2, [pc, #216]	; (8002f20 <main+0x268>)
 8002e48:	6013      	str	r3, [r2, #0]

		configASSERT(Status_ESP_Receive==pdPASS);
 8002e4a:	4b35      	ldr	r3, [pc, #212]	; (8002f20 <main+0x268>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d00a      	beq.n	8002e68 <main+0x1b0>
        __asm volatile
 8002e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e56:	f383 8811 	msr	BASEPRI, r3
 8002e5a:	f3bf 8f6f 	isb	sy
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	607b      	str	r3, [r7, #4]
    }
 8002e64:	bf00      	nop
 8002e66:	e7fe      	b.n	8002e66 <main+0x1ae>

		Status_Rasp_Receive = xTaskCreate(TASK_Rasp_Receive, "Rasp_Recieve", 200, NULL ,Priority_TASK_Rasp_Recieve, &Handle_Rasp_ReceiveData);
 8002e68:	4b2e      	ldr	r3, [pc, #184]	; (8002f24 <main+0x26c>)
 8002e6a:	9301      	str	r3, [sp, #4]
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	2300      	movs	r3, #0
 8002e72:	22c8      	movs	r2, #200	; 0xc8
 8002e74:	492c      	ldr	r1, [pc, #176]	; (8002f28 <main+0x270>)
 8002e76:	482d      	ldr	r0, [pc, #180]	; (8002f2c <main+0x274>)
 8002e78:	f005 ffbc 	bl	8008df4 <xTaskCreate>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	4a2c      	ldr	r2, [pc, #176]	; (8002f30 <main+0x278>)
 8002e80:	6013      	str	r3, [r2, #0]

		configASSERT(Status_Rasp_Receive == pdPASS);
 8002e82:	4b2b      	ldr	r3, [pc, #172]	; (8002f30 <main+0x278>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d00a      	beq.n	8002ea0 <main+0x1e8>
        __asm volatile
 8002e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8e:	f383 8811 	msr	BASEPRI, r3
 8002e92:	f3bf 8f6f 	isb	sy
 8002e96:	f3bf 8f4f 	dsb	sy
 8002e9a:	603b      	str	r3, [r7, #0]
    }
 8002e9c:	bf00      	nop
 8002e9e:	e7fe      	b.n	8002e9e <main+0x1e6>

		/**********************************Schedular_Starting********************************************/
		vTaskStartScheduler();
 8002ea0:	f006 f968 	bl	8009174 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8002ea4:	e7fe      	b.n	8002ea4 <main+0x1ec>
 8002ea6:	bf00      	nop
 8002ea8:	20000851 	.word	0x20000851
 8002eac:	20000740 	.word	0x20000740
 8002eb0:	20000852 	.word	0x20000852
 8002eb4:	2000080c 	.word	0x2000080c
 8002eb8:	20000850 	.word	0x20000850
 8002ebc:	200007c8 	.word	0x200007c8
 8002ec0:	200005dc 	.word	0x200005dc
 8002ec4:	080013a9 	.word	0x080013a9
 8002ec8:	20000004 	.word	0x20000004
 8002ecc:	08010bb8 	.word	0x08010bb8
 8002ed0:	20000884 	.word	0x20000884
 8002ed4:	20000858 	.word	0x20000858
 8002ed8:	08010bc8 	.word	0x08010bc8
 8002edc:	08002435 	.word	0x08002435
 8002ee0:	20000870 	.word	0x20000870
 8002ee4:	20000854 	.word	0x20000854
 8002ee8:	08010bcc 	.word	0x08010bcc
 8002eec:	0800248d 	.word	0x0800248d
 8002ef0:	2000086c 	.word	0x2000086c
 8002ef4:	2000085c 	.word	0x2000085c
 8002ef8:	08010bd8 	.word	0x08010bd8
 8002efc:	08002635 	.word	0x08002635
 8002f00:	20000874 	.word	0x20000874
 8002f04:	20000860 	.word	0x20000860
 8002f08:	08010be8 	.word	0x08010be8
 8002f0c:	080026ad 	.word	0x080026ad
 8002f10:	20000878 	.word	0x20000878
 8002f14:	20000864 	.word	0x20000864
 8002f18:	08010bf4 	.word	0x08010bf4
 8002f1c:	08002749 	.word	0x08002749
 8002f20:	2000087c 	.word	0x2000087c
 8002f24:	20000868 	.word	0x20000868
 8002f28:	08010c00 	.word	0x08010c00
 8002f2c:	080027cd 	.word	0x080027cd
 8002f30:	20000880 	.word	0x20000880

08002f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b094      	sub	sp, #80	; 0x50
 8002f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f3a:	f107 031c 	add.w	r3, r7, #28
 8002f3e:	2234      	movs	r2, #52	; 0x34
 8002f40:	2100      	movs	r1, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	f00a fd39 	bl	800d9ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f48:	f107 0308 	add.w	r3, r7, #8
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	60da      	str	r2, [r3, #12]
 8002f56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f58:	2300      	movs	r3, #0
 8002f5a:	607b      	str	r3, [r7, #4]
 8002f5c:	4b23      	ldr	r3, [pc, #140]	; (8002fec <SystemClock_Config+0xb8>)
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	4a22      	ldr	r2, [pc, #136]	; (8002fec <SystemClock_Config+0xb8>)
 8002f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f66:	6413      	str	r3, [r2, #64]	; 0x40
 8002f68:	4b20      	ldr	r3, [pc, #128]	; (8002fec <SystemClock_Config+0xb8>)
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f70:	607b      	str	r3, [r7, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002f74:	2300      	movs	r3, #0
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	4b1d      	ldr	r3, [pc, #116]	; (8002ff0 <SystemClock_Config+0xbc>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002f80:	4a1b      	ldr	r2, [pc, #108]	; (8002ff0 <SystemClock_Config+0xbc>)
 8002f82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <SystemClock_Config+0xbc>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f90:	603b      	str	r3, [r7, #0]
 8002f92:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f94:	2302      	movs	r3, #2
 8002f96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f9c:	2310      	movs	r3, #16
 8002f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fa4:	f107 031c 	add.w	r3, r7, #28
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f002 fb6b 	bl	8005684 <HAL_RCC_OscConfig>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002fb4:	f000 fb40 	bl	8003638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fb8:	230f      	movs	r3, #15
 8002fba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002fcc:	f107 0308 	add.w	r3, r7, #8
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f002 f860 	bl	8005098 <HAL_RCC_ClockConfig>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002fde:	f000 fb2b 	bl	8003638 <Error_Handler>
  }
}
 8002fe2:	bf00      	nop
 8002fe4:	3750      	adds	r7, #80	; 0x50
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40007000 	.word	0x40007000

08002ff4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ff8:	4b13      	ldr	r3, [pc, #76]	; (8003048 <MX_I2C1_Init+0x54>)
 8002ffa:	4a14      	ldr	r2, [pc, #80]	; (800304c <MX_I2C1_Init+0x58>)
 8002ffc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 1000;
 8002ffe:	4b12      	ldr	r3, [pc, #72]	; (8003048 <MX_I2C1_Init+0x54>)
 8003000:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003004:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003006:	4b10      	ldr	r3, [pc, #64]	; (8003048 <MX_I2C1_Init+0x54>)
 8003008:	2200      	movs	r2, #0
 800300a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800300c:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <MX_I2C1_Init+0x54>)
 800300e:	2200      	movs	r2, #0
 8003010:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003012:	4b0d      	ldr	r3, [pc, #52]	; (8003048 <MX_I2C1_Init+0x54>)
 8003014:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003018:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800301a:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <MX_I2C1_Init+0x54>)
 800301c:	2200      	movs	r2, #0
 800301e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003020:	4b09      	ldr	r3, [pc, #36]	; (8003048 <MX_I2C1_Init+0x54>)
 8003022:	2200      	movs	r2, #0
 8003024:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003026:	4b08      	ldr	r3, [pc, #32]	; (8003048 <MX_I2C1_Init+0x54>)
 8003028:	2200      	movs	r2, #0
 800302a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800302c:	4b06      	ldr	r3, [pc, #24]	; (8003048 <MX_I2C1_Init+0x54>)
 800302e:	2200      	movs	r2, #0
 8003030:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003032:	4805      	ldr	r0, [pc, #20]	; (8003048 <MX_I2C1_Init+0x54>)
 8003034:	f001 fbc8 	bl	80047c8 <HAL_I2C_Init>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800303e:	f000 fafb 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20000534 	.word	0x20000534
 800304c:	40005400 	.word	0x40005400

08003050 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003054:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <MX_I2C3_Init+0x50>)
 8003056:	4a13      	ldr	r2, [pc, #76]	; (80030a4 <MX_I2C3_Init+0x54>)
 8003058:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800305a:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <MX_I2C3_Init+0x50>)
 800305c:	4a12      	ldr	r2, [pc, #72]	; (80030a8 <MX_I2C3_Init+0x58>)
 800305e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003060:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <MX_I2C3_Init+0x50>)
 8003062:	2200      	movs	r2, #0
 8003064:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003066:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <MX_I2C3_Init+0x50>)
 8003068:	2200      	movs	r2, #0
 800306a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <MX_I2C3_Init+0x50>)
 800306e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003072:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003074:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <MX_I2C3_Init+0x50>)
 8003076:	2200      	movs	r2, #0
 8003078:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800307a:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <MX_I2C3_Init+0x50>)
 800307c:	2200      	movs	r2, #0
 800307e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003080:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <MX_I2C3_Init+0x50>)
 8003082:	2200      	movs	r2, #0
 8003084:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003086:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <MX_I2C3_Init+0x50>)
 8003088:	2200      	movs	r2, #0
 800308a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800308c:	4804      	ldr	r0, [pc, #16]	; (80030a0 <MX_I2C3_Init+0x50>)
 800308e:	f001 fb9b 	bl	80047c8 <HAL_I2C_Init>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003098:	f000 face 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800309c:	bf00      	nop
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20000588 	.word	0x20000588
 80030a4:	40005c00 	.word	0x40005c00
 80030a8:	000186a0 	.word	0x000186a0

080030ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030b2:	f107 0310 	add.w	r3, r7, #16
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80030bc:	463b      	mov	r3, r7
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	605a      	str	r2, [r3, #4]
 80030c4:	609a      	str	r2, [r3, #8]
 80030c6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80030c8:	4b27      	ldr	r3, [pc, #156]	; (8003168 <MX_TIM2_Init+0xbc>)
 80030ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 80030d0:	4b25      	ldr	r3, [pc, #148]	; (8003168 <MX_TIM2_Init+0xbc>)
 80030d2:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80030d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030d8:	4b23      	ldr	r3, [pc, #140]	; (8003168 <MX_TIM2_Init+0xbc>)
 80030da:	2200      	movs	r2, #0
 80030dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80030de:	4b22      	ldr	r3, [pc, #136]	; (8003168 <MX_TIM2_Init+0xbc>)
 80030e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030e6:	4b20      	ldr	r3, [pc, #128]	; (8003168 <MX_TIM2_Init+0xbc>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ec:	4b1e      	ldr	r3, [pc, #120]	; (8003168 <MX_TIM2_Init+0xbc>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80030f2:	481d      	ldr	r0, [pc, #116]	; (8003168 <MX_TIM2_Init+0xbc>)
 80030f4:	f002 ffac 	bl	8006050 <HAL_TIM_IC_Init>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80030fe:	f000 fa9b 	bl	8003638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003102:	2300      	movs	r3, #0
 8003104:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800310a:	f107 0310 	add.w	r3, r7, #16
 800310e:	4619      	mov	r1, r3
 8003110:	4815      	ldr	r0, [pc, #84]	; (8003168 <MX_TIM2_Init+0xbc>)
 8003112:	f003 ff39 	bl	8006f88 <HAL_TIMEx_MasterConfigSynchronization>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800311c:	f000 fa8c 	bl	8003638 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003120:	230a      	movs	r3, #10
 8003122:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003124:	2301      	movs	r3, #1
 8003126:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003128:	2300      	movs	r3, #0
 800312a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003130:	463b      	mov	r3, r7
 8003132:	2200      	movs	r2, #0
 8003134:	4619      	mov	r1, r3
 8003136:	480c      	ldr	r0, [pc, #48]	; (8003168 <MX_TIM2_Init+0xbc>)
 8003138:	f003 fa0a 	bl	8006550 <HAL_TIM_IC_ConfigChannel>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003142:	f000 fa79 	bl	8003638 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003146:	2300      	movs	r3, #0
 8003148:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800314a:	463b      	mov	r3, r7
 800314c:	2204      	movs	r2, #4
 800314e:	4619      	mov	r1, r3
 8003150:	4805      	ldr	r0, [pc, #20]	; (8003168 <MX_TIM2_Init+0xbc>)
 8003152:	f003 f9fd 	bl	8006550 <HAL_TIM_IC_ConfigChannel>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800315c:	f000 fa6c 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003160:	bf00      	nop
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	200005dc 	.word	0x200005dc

0800316c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08a      	sub	sp, #40	; 0x28
 8003170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003172:	f107 0320 	add.w	r3, r7, #32
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800317c:	1d3b      	adds	r3, r7, #4
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	605a      	str	r2, [r3, #4]
 8003184:	609a      	str	r2, [r3, #8]
 8003186:	60da      	str	r2, [r3, #12]
 8003188:	611a      	str	r2, [r3, #16]
 800318a:	615a      	str	r2, [r3, #20]
 800318c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800318e:	4b32      	ldr	r3, [pc, #200]	; (8003258 <MX_TIM3_Init+0xec>)
 8003190:	4a32      	ldr	r2, [pc, #200]	; (800325c <MX_TIM3_Init+0xf0>)
 8003192:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160-1;
 8003194:	4b30      	ldr	r3, [pc, #192]	; (8003258 <MX_TIM3_Init+0xec>)
 8003196:	229f      	movs	r2, #159	; 0x9f
 8003198:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800319a:	4b2f      	ldr	r3, [pc, #188]	; (8003258 <MX_TIM3_Init+0xec>)
 800319c:	2200      	movs	r2, #0
 800319e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80031a0:	4b2d      	ldr	r3, [pc, #180]	; (8003258 <MX_TIM3_Init+0xec>)
 80031a2:	2263      	movs	r2, #99	; 0x63
 80031a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031a6:	4b2c      	ldr	r3, [pc, #176]	; (8003258 <MX_TIM3_Init+0xec>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031ac:	4b2a      	ldr	r3, [pc, #168]	; (8003258 <MX_TIM3_Init+0xec>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80031b2:	4829      	ldr	r0, [pc, #164]	; (8003258 <MX_TIM3_Init+0xec>)
 80031b4:	f002 fdc4 	bl	8005d40 <HAL_TIM_PWM_Init>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80031be:	f000 fa3b 	bl	8003638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031c2:	2300      	movs	r3, #0
 80031c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031c6:	2300      	movs	r3, #0
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80031ca:	f107 0320 	add.w	r3, r7, #32
 80031ce:	4619      	mov	r1, r3
 80031d0:	4821      	ldr	r0, [pc, #132]	; (8003258 <MX_TIM3_Init+0xec>)
 80031d2:	f003 fed9 	bl	8006f88 <HAL_TIMEx_MasterConfigSynchronization>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80031dc:	f000 fa2c 	bl	8003638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031e0:	2360      	movs	r3, #96	; 0x60
 80031e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031f0:	1d3b      	adds	r3, r7, #4
 80031f2:	2200      	movs	r2, #0
 80031f4:	4619      	mov	r1, r3
 80031f6:	4818      	ldr	r0, [pc, #96]	; (8003258 <MX_TIM3_Init+0xec>)
 80031f8:	f003 fa46 	bl	8006688 <HAL_TIM_PWM_ConfigChannel>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003202:	f000 fa19 	bl	8003638 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003206:	1d3b      	adds	r3, r7, #4
 8003208:	2204      	movs	r2, #4
 800320a:	4619      	mov	r1, r3
 800320c:	4812      	ldr	r0, [pc, #72]	; (8003258 <MX_TIM3_Init+0xec>)
 800320e:	f003 fa3b 	bl	8006688 <HAL_TIM_PWM_ConfigChannel>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003218:	f000 fa0e 	bl	8003638 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800321c:	1d3b      	adds	r3, r7, #4
 800321e:	2208      	movs	r2, #8
 8003220:	4619      	mov	r1, r3
 8003222:	480d      	ldr	r0, [pc, #52]	; (8003258 <MX_TIM3_Init+0xec>)
 8003224:	f003 fa30 	bl	8006688 <HAL_TIM_PWM_ConfigChannel>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 800322e:	f000 fa03 	bl	8003638 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003232:	1d3b      	adds	r3, r7, #4
 8003234:	220c      	movs	r2, #12
 8003236:	4619      	mov	r1, r3
 8003238:	4807      	ldr	r0, [pc, #28]	; (8003258 <MX_TIM3_Init+0xec>)
 800323a:	f003 fa25 	bl	8006688 <HAL_TIM_PWM_ConfigChannel>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8003244:	f000 f9f8 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003248:	4803      	ldr	r0, [pc, #12]	; (8003258 <MX_TIM3_Init+0xec>)
 800324a:	f000 fb67 	bl	800391c <HAL_TIM_MspPostInit>

}
 800324e:	bf00      	nop
 8003250:	3728      	adds	r7, #40	; 0x28
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000624 	.word	0x20000624
 800325c:	40000400 	.word	0x40000400

08003260 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003266:	463b      	mov	r3, r7
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800326e:	4b15      	ldr	r3, [pc, #84]	; (80032c4 <MX_TIM6_Init+0x64>)
 8003270:	4a15      	ldr	r2, [pc, #84]	; (80032c8 <MX_TIM6_Init+0x68>)
 8003272:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8003274:	4b13      	ldr	r3, [pc, #76]	; (80032c4 <MX_TIM6_Init+0x64>)
 8003276:	2200      	movs	r2, #0
 8003278:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800327a:	4b12      	ldr	r3, [pc, #72]	; (80032c4 <MX_TIM6_Init+0x64>)
 800327c:	2200      	movs	r2, #0
 800327e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003280:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <MX_TIM6_Init+0x64>)
 8003282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003286:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003288:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <MX_TIM6_Init+0x64>)
 800328a:	2200      	movs	r2, #0
 800328c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800328e:	480d      	ldr	r0, [pc, #52]	; (80032c4 <MX_TIM6_Init+0x64>)
 8003290:	f002 fc96 	bl	8005bc0 <HAL_TIM_Base_Init>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800329a:	f000 f9cd 	bl	8003638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800329e:	2300      	movs	r3, #0
 80032a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032a2:	2300      	movs	r3, #0
 80032a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80032a6:	463b      	mov	r3, r7
 80032a8:	4619      	mov	r1, r3
 80032aa:	4806      	ldr	r0, [pc, #24]	; (80032c4 <MX_TIM6_Init+0x64>)
 80032ac:	f003 fe6c 	bl	8006f88 <HAL_TIMEx_MasterConfigSynchronization>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80032b6:	f000 f9bf 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	2000066c 	.word	0x2000066c
 80032c8:	40001000 	.word	0x40001000

080032cc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80032d2:	1d3b      	adds	r3, r7, #4
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	611a      	str	r2, [r3, #16]
 80032e0:	615a      	str	r2, [r3, #20]
 80032e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80032e4:	4b19      	ldr	r3, [pc, #100]	; (800334c <MX_TIM12_Init+0x80>)
 80032e6:	4a1a      	ldr	r2, [pc, #104]	; (8003350 <MX_TIM12_Init+0x84>)
 80032e8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 80-1;
 80032ea:	4b18      	ldr	r3, [pc, #96]	; (800334c <MX_TIM12_Init+0x80>)
 80032ec:	224f      	movs	r2, #79	; 0x4f
 80032ee:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032f0:	4b16      	ldr	r3, [pc, #88]	; (800334c <MX_TIM12_Init+0x80>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 100-1;
 80032f6:	4b15      	ldr	r3, [pc, #84]	; (800334c <MX_TIM12_Init+0x80>)
 80032f8:	2263      	movs	r2, #99	; 0x63
 80032fa:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032fc:	4b13      	ldr	r3, [pc, #76]	; (800334c <MX_TIM12_Init+0x80>)
 80032fe:	2200      	movs	r2, #0
 8003300:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003302:	4b12      	ldr	r3, [pc, #72]	; (800334c <MX_TIM12_Init+0x80>)
 8003304:	2200      	movs	r2, #0
 8003306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8003308:	4810      	ldr	r0, [pc, #64]	; (800334c <MX_TIM12_Init+0x80>)
 800330a:	f002 fd19 	bl	8005d40 <HAL_TIM_PWM_Init>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8003314:	f000 f990 	bl	8003638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003318:	2360      	movs	r3, #96	; 0x60
 800331a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800331c:	2300      	movs	r3, #0
 800331e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003320:	2300      	movs	r3, #0
 8003322:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003328:	1d3b      	adds	r3, r7, #4
 800332a:	2200      	movs	r2, #0
 800332c:	4619      	mov	r1, r3
 800332e:	4807      	ldr	r0, [pc, #28]	; (800334c <MX_TIM12_Init+0x80>)
 8003330:	f003 f9aa 	bl	8006688 <HAL_TIM_PWM_ConfigChannel>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 800333a:	f000 f97d 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800333e:	4803      	ldr	r0, [pc, #12]	; (800334c <MX_TIM12_Init+0x80>)
 8003340:	f000 faec 	bl	800391c <HAL_TIM_MspPostInit>

}
 8003344:	bf00      	nop
 8003346:	3720      	adds	r7, #32
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	200006b4 	.word	0x200006b4
 8003350:	40001800 	.word	0x40001800

08003354 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003358:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <MX_UART4_Init+0x4c>)
 800335a:	4a12      	ldr	r2, [pc, #72]	; (80033a4 <MX_UART4_Init+0x50>)
 800335c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800335e:	4b10      	ldr	r3, [pc, #64]	; (80033a0 <MX_UART4_Init+0x4c>)
 8003360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003364:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003366:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <MX_UART4_Init+0x4c>)
 8003368:	2200      	movs	r2, #0
 800336a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800336c:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <MX_UART4_Init+0x4c>)
 800336e:	2200      	movs	r2, #0
 8003370:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003372:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <MX_UART4_Init+0x4c>)
 8003374:	2200      	movs	r2, #0
 8003376:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003378:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <MX_UART4_Init+0x4c>)
 800337a:	220c      	movs	r2, #12
 800337c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800337e:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <MX_UART4_Init+0x4c>)
 8003380:	2200      	movs	r2, #0
 8003382:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003384:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <MX_UART4_Init+0x4c>)
 8003386:	2200      	movs	r2, #0
 8003388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800338a:	4805      	ldr	r0, [pc, #20]	; (80033a0 <MX_UART4_Init+0x4c>)
 800338c:	f003 fe8c 	bl	80070a8 <HAL_UART_Init>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003396:	f000 f94f 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800339a:	bf00      	nop
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	200006fc 	.word	0x200006fc
 80033a4:	40004c00 	.word	0x40004c00

080033a8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80033ac:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <MX_UART5_Init+0x4c>)
 80033ae:	4a12      	ldr	r2, [pc, #72]	; (80033f8 <MX_UART5_Init+0x50>)
 80033b0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80033b2:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <MX_UART5_Init+0x4c>)
 80033b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033b8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80033ba:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <MX_UART5_Init+0x4c>)
 80033bc:	2200      	movs	r2, #0
 80033be:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80033c0:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <MX_UART5_Init+0x4c>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80033c6:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <MX_UART5_Init+0x4c>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80033cc:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <MX_UART5_Init+0x4c>)
 80033ce:	220c      	movs	r2, #12
 80033d0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033d2:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <MX_UART5_Init+0x4c>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <MX_UART5_Init+0x4c>)
 80033da:	2200      	movs	r2, #0
 80033dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80033de:	4805      	ldr	r0, [pc, #20]	; (80033f4 <MX_UART5_Init+0x4c>)
 80033e0:	f003 fe62 	bl	80070a8 <HAL_UART_Init>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80033ea:	f000 f925 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000740 	.word	0x20000740
 80033f8:	40005000 	.word	0x40005000

080033fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003400:	4b11      	ldr	r3, [pc, #68]	; (8003448 <MX_USART1_UART_Init+0x4c>)
 8003402:	4a12      	ldr	r2, [pc, #72]	; (800344c <MX_USART1_UART_Init+0x50>)
 8003404:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003406:	4b10      	ldr	r3, [pc, #64]	; (8003448 <MX_USART1_UART_Init+0x4c>)
 8003408:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800340c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800340e:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <MX_USART1_UART_Init+0x4c>)
 8003410:	2200      	movs	r2, #0
 8003412:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <MX_USART1_UART_Init+0x4c>)
 8003416:	2200      	movs	r2, #0
 8003418:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800341a:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <MX_USART1_UART_Init+0x4c>)
 800341c:	2200      	movs	r2, #0
 800341e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003420:	4b09      	ldr	r3, [pc, #36]	; (8003448 <MX_USART1_UART_Init+0x4c>)
 8003422:	220c      	movs	r2, #12
 8003424:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003426:	4b08      	ldr	r3, [pc, #32]	; (8003448 <MX_USART1_UART_Init+0x4c>)
 8003428:	2200      	movs	r2, #0
 800342a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <MX_USART1_UART_Init+0x4c>)
 800342e:	2200      	movs	r2, #0
 8003430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003432:	4805      	ldr	r0, [pc, #20]	; (8003448 <MX_USART1_UART_Init+0x4c>)
 8003434:	f003 fe38 	bl	80070a8 <HAL_UART_Init>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800343e:	f000 f8fb 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20000784 	.word	0x20000784
 800344c:	40011000 	.word	0x40011000

08003450 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003454:	4b11      	ldr	r3, [pc, #68]	; (800349c <MX_USART3_UART_Init+0x4c>)
 8003456:	4a12      	ldr	r2, [pc, #72]	; (80034a0 <MX_USART3_UART_Init+0x50>)
 8003458:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800345a:	4b10      	ldr	r3, [pc, #64]	; (800349c <MX_USART3_UART_Init+0x4c>)
 800345c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003460:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003462:	4b0e      	ldr	r3, [pc, #56]	; (800349c <MX_USART3_UART_Init+0x4c>)
 8003464:	2200      	movs	r2, #0
 8003466:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003468:	4b0c      	ldr	r3, [pc, #48]	; (800349c <MX_USART3_UART_Init+0x4c>)
 800346a:	2200      	movs	r2, #0
 800346c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800346e:	4b0b      	ldr	r3, [pc, #44]	; (800349c <MX_USART3_UART_Init+0x4c>)
 8003470:	2200      	movs	r2, #0
 8003472:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003474:	4b09      	ldr	r3, [pc, #36]	; (800349c <MX_USART3_UART_Init+0x4c>)
 8003476:	220c      	movs	r2, #12
 8003478:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800347a:	4b08      	ldr	r3, [pc, #32]	; (800349c <MX_USART3_UART_Init+0x4c>)
 800347c:	2200      	movs	r2, #0
 800347e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003480:	4b06      	ldr	r3, [pc, #24]	; (800349c <MX_USART3_UART_Init+0x4c>)
 8003482:	2200      	movs	r2, #0
 8003484:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003486:	4805      	ldr	r0, [pc, #20]	; (800349c <MX_USART3_UART_Init+0x4c>)
 8003488:	f003 fe0e 	bl	80070a8 <HAL_UART_Init>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003492:	f000 f8d1 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003496:	bf00      	nop
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	200007c8 	.word	0x200007c8
 80034a0:	40004800 	.word	0x40004800

080034a4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80034a8:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <MX_USART6_UART_Init+0x4c>)
 80034aa:	4a12      	ldr	r2, [pc, #72]	; (80034f4 <MX_USART6_UART_Init+0x50>)
 80034ac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80034ae:	4b10      	ldr	r3, [pc, #64]	; (80034f0 <MX_USART6_UART_Init+0x4c>)
 80034b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034b4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80034b6:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <MX_USART6_UART_Init+0x4c>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80034bc:	4b0c      	ldr	r3, [pc, #48]	; (80034f0 <MX_USART6_UART_Init+0x4c>)
 80034be:	2200      	movs	r2, #0
 80034c0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80034c2:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <MX_USART6_UART_Init+0x4c>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80034c8:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <MX_USART6_UART_Init+0x4c>)
 80034ca:	220c      	movs	r2, #12
 80034cc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034ce:	4b08      	ldr	r3, [pc, #32]	; (80034f0 <MX_USART6_UART_Init+0x4c>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80034d4:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <MX_USART6_UART_Init+0x4c>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80034da:	4805      	ldr	r0, [pc, #20]	; (80034f0 <MX_USART6_UART_Init+0x4c>)
 80034dc:	f003 fde4 	bl	80070a8 <HAL_UART_Init>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80034e6:	f000 f8a7 	bl	8003638 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	2000080c 	.word	0x2000080c
 80034f4:	40011400 	.word	0x40011400

080034f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08a      	sub	sp, #40	; 0x28
 80034fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034fe:	f107 0314 	add.w	r3, r7, #20
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	605a      	str	r2, [r3, #4]
 8003508:	609a      	str	r2, [r3, #8]
 800350a:	60da      	str	r2, [r3, #12]
 800350c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	4b3c      	ldr	r3, [pc, #240]	; (8003604 <MX_GPIO_Init+0x10c>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	4a3b      	ldr	r2, [pc, #236]	; (8003604 <MX_GPIO_Init+0x10c>)
 8003518:	f043 0304 	orr.w	r3, r3, #4
 800351c:	6313      	str	r3, [r2, #48]	; 0x30
 800351e:	4b39      	ldr	r3, [pc, #228]	; (8003604 <MX_GPIO_Init+0x10c>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	4b35      	ldr	r3, [pc, #212]	; (8003604 <MX_GPIO_Init+0x10c>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	4a34      	ldr	r2, [pc, #208]	; (8003604 <MX_GPIO_Init+0x10c>)
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	6313      	str	r3, [r2, #48]	; 0x30
 800353a:	4b32      	ldr	r3, [pc, #200]	; (8003604 <MX_GPIO_Init+0x10c>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	4b2e      	ldr	r3, [pc, #184]	; (8003604 <MX_GPIO_Init+0x10c>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	4a2d      	ldr	r2, [pc, #180]	; (8003604 <MX_GPIO_Init+0x10c>)
 8003550:	f043 0302 	orr.w	r3, r3, #2
 8003554:	6313      	str	r3, [r2, #48]	; 0x30
 8003556:	4b2b      	ldr	r3, [pc, #172]	; (8003604 <MX_GPIO_Init+0x10c>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	60bb      	str	r3, [r7, #8]
 8003560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	607b      	str	r3, [r7, #4]
 8003566:	4b27      	ldr	r3, [pc, #156]	; (8003604 <MX_GPIO_Init+0x10c>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	4a26      	ldr	r2, [pc, #152]	; (8003604 <MX_GPIO_Init+0x10c>)
 800356c:	f043 0308 	orr.w	r3, r3, #8
 8003570:	6313      	str	r3, [r2, #48]	; 0x30
 8003572:	4b24      	ldr	r3, [pc, #144]	; (8003604 <MX_GPIO_Init+0x10c>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	607b      	str	r3, [r7, #4]
 800357c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800357e:	2200      	movs	r2, #0
 8003580:	f242 311c 	movw	r1, #8988	; 0x231c
 8003584:	4820      	ldr	r0, [pc, #128]	; (8003608 <MX_GPIO_Init+0x110>)
 8003586:	f001 f905 	bl	8004794 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800358a:	2200      	movs	r2, #0
 800358c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003590:	481e      	ldr	r0, [pc, #120]	; (800360c <MX_GPIO_Init+0x114>)
 8003592:	f001 f8ff 	bl	8004794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 8003596:	2200      	movs	r2, #0
 8003598:	f44f 7108 	mov.w	r1, #544	; 0x220
 800359c:	481c      	ldr	r0, [pc, #112]	; (8003610 <MX_GPIO_Init+0x118>)
 800359e:	f001 f8f9 	bl	8004794 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 PC4
                           PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80035a2:	f242 331c 	movw	r3, #8988	; 0x231c
 80035a6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035a8:	2301      	movs	r3, #1
 80035aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b0:	2300      	movs	r3, #0
 80035b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035b4:	f107 0314 	add.w	r3, r7, #20
 80035b8:	4619      	mov	r1, r3
 80035ba:	4813      	ldr	r0, [pc, #76]	; (8003608 <MX_GPIO_Init+0x110>)
 80035bc:	f000 ff56 	bl	800446c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80035c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035c6:	2301      	movs	r3, #1
 80035c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ce:	2300      	movs	r3, #0
 80035d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d2:	f107 0314 	add.w	r3, r7, #20
 80035d6:	4619      	mov	r1, r3
 80035d8:	480c      	ldr	r0, [pc, #48]	; (800360c <MX_GPIO_Init+0x114>)
 80035da:	f000 ff47 	bl	800446c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 80035de:	f44f 7308 	mov.w	r3, #544	; 0x220
 80035e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035e4:	2301      	movs	r3, #1
 80035e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ec:	2300      	movs	r3, #0
 80035ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035f0:	f107 0314 	add.w	r3, r7, #20
 80035f4:	4619      	mov	r1, r3
 80035f6:	4806      	ldr	r0, [pc, #24]	; (8003610 <MX_GPIO_Init+0x118>)
 80035f8:	f000 ff38 	bl	800446c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80035fc:	bf00      	nop
 80035fe:	3728      	adds	r7, #40	; 0x28
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40023800 	.word	0x40023800
 8003608:	40020800 	.word	0x40020800
 800360c:	40020000 	.word	0x40020000
 8003610:	40020400 	.word	0x40020400

08003614 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a04      	ldr	r2, [pc, #16]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d101      	bne.n	800362a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003626:	f000 fd69 	bl	80040fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800362a:	bf00      	nop
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40001400 	.word	0x40001400

08003638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800363c:	b672      	cpsid	i
}
 800363e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003640:	e7fe      	b.n	8003640 <Error_Handler+0x8>
	...

08003644 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	607b      	str	r3, [r7, #4]
 800364e:	4b10      	ldr	r3, [pc, #64]	; (8003690 <HAL_MspInit+0x4c>)
 8003650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003652:	4a0f      	ldr	r2, [pc, #60]	; (8003690 <HAL_MspInit+0x4c>)
 8003654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003658:	6453      	str	r3, [r2, #68]	; 0x44
 800365a:	4b0d      	ldr	r3, [pc, #52]	; (8003690 <HAL_MspInit+0x4c>)
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003662:	607b      	str	r3, [r7, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	603b      	str	r3, [r7, #0]
 800366a:	4b09      	ldr	r3, [pc, #36]	; (8003690 <HAL_MspInit+0x4c>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	4a08      	ldr	r2, [pc, #32]	; (8003690 <HAL_MspInit+0x4c>)
 8003670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003674:	6413      	str	r3, [r2, #64]	; 0x40
 8003676:	4b06      	ldr	r3, [pc, #24]	; (8003690 <HAL_MspInit+0x4c>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367e:	603b      	str	r3, [r7, #0]
 8003680:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40023800 	.word	0x40023800

08003694 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08c      	sub	sp, #48	; 0x30
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800369c:	f107 031c 	add.w	r3, r7, #28
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	60da      	str	r2, [r3, #12]
 80036aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a41      	ldr	r2, [pc, #260]	; (80037b8 <HAL_I2C_MspInit+0x124>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d12c      	bne.n	8003710 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036b6:	2300      	movs	r3, #0
 80036b8:	61bb      	str	r3, [r7, #24]
 80036ba:	4b40      	ldr	r3, [pc, #256]	; (80037bc <HAL_I2C_MspInit+0x128>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	4a3f      	ldr	r2, [pc, #252]	; (80037bc <HAL_I2C_MspInit+0x128>)
 80036c0:	f043 0302 	orr.w	r3, r3, #2
 80036c4:	6313      	str	r3, [r2, #48]	; 0x30
 80036c6:	4b3d      	ldr	r3, [pc, #244]	; (80037bc <HAL_I2C_MspInit+0x128>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	61bb      	str	r3, [r7, #24]
 80036d0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036d2:	23c0      	movs	r3, #192	; 0xc0
 80036d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036d6:	2312      	movs	r3, #18
 80036d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036de:	2303      	movs	r3, #3
 80036e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80036e2:	2304      	movs	r3, #4
 80036e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036e6:	f107 031c 	add.w	r3, r7, #28
 80036ea:	4619      	mov	r1, r3
 80036ec:	4834      	ldr	r0, [pc, #208]	; (80037c0 <HAL_I2C_MspInit+0x12c>)
 80036ee:	f000 febd 	bl	800446c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
 80036f6:	4b31      	ldr	r3, [pc, #196]	; (80037bc <HAL_I2C_MspInit+0x128>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	4a30      	ldr	r2, [pc, #192]	; (80037bc <HAL_I2C_MspInit+0x128>)
 80036fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003700:	6413      	str	r3, [r2, #64]	; 0x40
 8003702:	4b2e      	ldr	r3, [pc, #184]	; (80037bc <HAL_I2C_MspInit+0x128>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800370e:	e04f      	b.n	80037b0 <HAL_I2C_MspInit+0x11c>
  else if(hi2c->Instance==I2C3)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a2b      	ldr	r2, [pc, #172]	; (80037c4 <HAL_I2C_MspInit+0x130>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d14a      	bne.n	80037b0 <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	4b27      	ldr	r3, [pc, #156]	; (80037bc <HAL_I2C_MspInit+0x128>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	4a26      	ldr	r2, [pc, #152]	; (80037bc <HAL_I2C_MspInit+0x128>)
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	6313      	str	r3, [r2, #48]	; 0x30
 800372a:	4b24      	ldr	r3, [pc, #144]	; (80037bc <HAL_I2C_MspInit+0x128>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	4b20      	ldr	r3, [pc, #128]	; (80037bc <HAL_I2C_MspInit+0x128>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	4a1f      	ldr	r2, [pc, #124]	; (80037bc <HAL_I2C_MspInit+0x128>)
 8003740:	f043 0302 	orr.w	r3, r3, #2
 8003744:	6313      	str	r3, [r2, #48]	; 0x30
 8003746:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <HAL_I2C_MspInit+0x128>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003758:	2312      	movs	r3, #18
 800375a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375c:	2300      	movs	r3, #0
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003760:	2303      	movs	r3, #3
 8003762:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003764:	2304      	movs	r3, #4
 8003766:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003768:	f107 031c 	add.w	r3, r7, #28
 800376c:	4619      	mov	r1, r3
 800376e:	4816      	ldr	r0, [pc, #88]	; (80037c8 <HAL_I2C_MspInit+0x134>)
 8003770:	f000 fe7c 	bl	800446c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003774:	2310      	movs	r3, #16
 8003776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003778:	2312      	movs	r3, #18
 800377a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377c:	2300      	movs	r3, #0
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003780:	2303      	movs	r3, #3
 8003782:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003784:	2304      	movs	r3, #4
 8003786:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003788:	f107 031c 	add.w	r3, r7, #28
 800378c:	4619      	mov	r1, r3
 800378e:	480c      	ldr	r0, [pc, #48]	; (80037c0 <HAL_I2C_MspInit+0x12c>)
 8003790:	f000 fe6c 	bl	800446c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003794:	2300      	movs	r3, #0
 8003796:	60bb      	str	r3, [r7, #8]
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <HAL_I2C_MspInit+0x128>)
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	4a07      	ldr	r2, [pc, #28]	; (80037bc <HAL_I2C_MspInit+0x128>)
 800379e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037a2:	6413      	str	r3, [r2, #64]	; 0x40
 80037a4:	4b05      	ldr	r3, [pc, #20]	; (80037bc <HAL_I2C_MspInit+0x128>)
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	68bb      	ldr	r3, [r7, #8]
}
 80037b0:	bf00      	nop
 80037b2:	3730      	adds	r7, #48	; 0x30
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40005400 	.word	0x40005400
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40020400 	.word	0x40020400
 80037c4:	40005c00 	.word	0x40005c00
 80037c8:	40020000 	.word	0x40020000

080037cc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08a      	sub	sp, #40	; 0x28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d4:	f107 0314 	add.w	r3, r7, #20
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	605a      	str	r2, [r3, #4]
 80037de:	609a      	str	r2, [r3, #8]
 80037e0:	60da      	str	r2, [r3, #12]
 80037e2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ec:	d133      	bne.n	8003856 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	613b      	str	r3, [r7, #16]
 80037f2:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <HAL_TIM_IC_MspInit+0x94>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	4a1a      	ldr	r2, [pc, #104]	; (8003860 <HAL_TIM_IC_MspInit+0x94>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	6413      	str	r3, [r2, #64]	; 0x40
 80037fe:	4b18      	ldr	r3, [pc, #96]	; (8003860 <HAL_TIM_IC_MspInit+0x94>)
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	4b14      	ldr	r3, [pc, #80]	; (8003860 <HAL_TIM_IC_MspInit+0x94>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	4a13      	ldr	r2, [pc, #76]	; (8003860 <HAL_TIM_IC_MspInit+0x94>)
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	6313      	str	r3, [r2, #48]	; 0x30
 800381a:	4b11      	ldr	r3, [pc, #68]	; (8003860 <HAL_TIM_IC_MspInit+0x94>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003826:	2303      	movs	r3, #3
 8003828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382a:	2302      	movs	r3, #2
 800382c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382e:	2300      	movs	r3, #0
 8003830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003832:	2300      	movs	r3, #0
 8003834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003836:	2301      	movs	r3, #1
 8003838:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800383a:	f107 0314 	add.w	r3, r7, #20
 800383e:	4619      	mov	r1, r3
 8003840:	4808      	ldr	r0, [pc, #32]	; (8003864 <HAL_TIM_IC_MspInit+0x98>)
 8003842:	f000 fe13 	bl	800446c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003846:	2200      	movs	r2, #0
 8003848:	2100      	movs	r1, #0
 800384a:	201c      	movs	r0, #28
 800384c:	f000 fd52 	bl	80042f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003850:	201c      	movs	r0, #28
 8003852:	f000 fd6b 	bl	800432c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003856:	bf00      	nop
 8003858:	3728      	adds	r7, #40	; 0x28
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40023800 	.word	0x40023800
 8003864:	40020000 	.word	0x40020000

08003868 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a15      	ldr	r2, [pc, #84]	; (80038cc <HAL_TIM_PWM_MspInit+0x64>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d10e      	bne.n	8003898 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	4b14      	ldr	r3, [pc, #80]	; (80038d0 <HAL_TIM_PWM_MspInit+0x68>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	4a13      	ldr	r2, [pc, #76]	; (80038d0 <HAL_TIM_PWM_MspInit+0x68>)
 8003884:	f043 0302 	orr.w	r3, r3, #2
 8003888:	6413      	str	r3, [r2, #64]	; 0x40
 800388a:	4b11      	ldr	r3, [pc, #68]	; (80038d0 <HAL_TIM_PWM_MspInit+0x68>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003896:	e012      	b.n	80038be <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a0d      	ldr	r2, [pc, #52]	; (80038d4 <HAL_TIM_PWM_MspInit+0x6c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d10d      	bne.n	80038be <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <HAL_TIM_PWM_MspInit+0x68>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	4a09      	ldr	r2, [pc, #36]	; (80038d0 <HAL_TIM_PWM_MspInit+0x68>)
 80038ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038b0:	6413      	str	r3, [r2, #64]	; 0x40
 80038b2:	4b07      	ldr	r3, [pc, #28]	; (80038d0 <HAL_TIM_PWM_MspInit+0x68>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	68bb      	ldr	r3, [r7, #8]
}
 80038be:	bf00      	nop
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40000400 	.word	0x40000400
 80038d0:	40023800 	.word	0x40023800
 80038d4:	40001800 	.word	0x40001800

080038d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a0b      	ldr	r2, [pc, #44]	; (8003914 <HAL_TIM_Base_MspInit+0x3c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d10d      	bne.n	8003906 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <HAL_TIM_Base_MspInit+0x40>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	4a09      	ldr	r2, [pc, #36]	; (8003918 <HAL_TIM_Base_MspInit+0x40>)
 80038f4:	f043 0310 	orr.w	r3, r3, #16
 80038f8:	6413      	str	r3, [r2, #64]	; 0x40
 80038fa:	4b07      	ldr	r3, [pc, #28]	; (8003918 <HAL_TIM_Base_MspInit+0x40>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f003 0310 	and.w	r3, r3, #16
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003906:	bf00      	nop
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40001000 	.word	0x40001000
 8003918:	40023800 	.word	0x40023800

0800391c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08a      	sub	sp, #40	; 0x28
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003924:	f107 0314 	add.w	r3, r7, #20
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	605a      	str	r2, [r3, #4]
 800392e:	609a      	str	r2, [r3, #8]
 8003930:	60da      	str	r2, [r3, #12]
 8003932:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a33      	ldr	r2, [pc, #204]	; (8003a08 <HAL_TIM_MspPostInit+0xec>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d13c      	bne.n	80039b8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800393e:	2300      	movs	r3, #0
 8003940:	613b      	str	r3, [r7, #16]
 8003942:	4b32      	ldr	r3, [pc, #200]	; (8003a0c <HAL_TIM_MspPostInit+0xf0>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	4a31      	ldr	r2, [pc, #196]	; (8003a0c <HAL_TIM_MspPostInit+0xf0>)
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	6313      	str	r3, [r2, #48]	; 0x30
 800394e:	4b2f      	ldr	r3, [pc, #188]	; (8003a0c <HAL_TIM_MspPostInit+0xf0>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	4b2b      	ldr	r3, [pc, #172]	; (8003a0c <HAL_TIM_MspPostInit+0xf0>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	4a2a      	ldr	r2, [pc, #168]	; (8003a0c <HAL_TIM_MspPostInit+0xf0>)
 8003964:	f043 0302 	orr.w	r3, r3, #2
 8003968:	6313      	str	r3, [r2, #48]	; 0x30
 800396a:	4b28      	ldr	r3, [pc, #160]	; (8003a0c <HAL_TIM_MspPostInit+0xf0>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003976:	23c0      	movs	r3, #192	; 0xc0
 8003978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397a:	2302      	movs	r3, #2
 800397c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397e:	2300      	movs	r3, #0
 8003980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003982:	2300      	movs	r3, #0
 8003984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003986:	2302      	movs	r3, #2
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800398a:	f107 0314 	add.w	r3, r7, #20
 800398e:	4619      	mov	r1, r3
 8003990:	481f      	ldr	r0, [pc, #124]	; (8003a10 <HAL_TIM_MspPostInit+0xf4>)
 8003992:	f000 fd6b 	bl	800446c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003996:	2303      	movs	r3, #3
 8003998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399a:	2302      	movs	r3, #2
 800399c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039a2:	2300      	movs	r3, #0
 80039a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80039a6:	2302      	movs	r3, #2
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039aa:	f107 0314 	add.w	r3, r7, #20
 80039ae:	4619      	mov	r1, r3
 80039b0:	4818      	ldr	r0, [pc, #96]	; (8003a14 <HAL_TIM_MspPostInit+0xf8>)
 80039b2:	f000 fd5b 	bl	800446c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80039b6:	e023      	b.n	8003a00 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM12)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a16      	ldr	r2, [pc, #88]	; (8003a18 <HAL_TIM_MspPostInit+0xfc>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d11e      	bne.n	8003a00 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	4b11      	ldr	r3, [pc, #68]	; (8003a0c <HAL_TIM_MspPostInit+0xf0>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	4a10      	ldr	r2, [pc, #64]	; (8003a0c <HAL_TIM_MspPostInit+0xf0>)
 80039cc:	f043 0302 	orr.w	r3, r3, #2
 80039d0:	6313      	str	r3, [r2, #48]	; 0x30
 80039d2:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <HAL_TIM_MspPostInit+0xf0>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	60bb      	str	r3, [r7, #8]
 80039dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80039de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80039e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e4:	2302      	movs	r3, #2
 80039e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ec:	2300      	movs	r3, #0
 80039ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80039f0:	2309      	movs	r3, #9
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039f4:	f107 0314 	add.w	r3, r7, #20
 80039f8:	4619      	mov	r1, r3
 80039fa:	4806      	ldr	r0, [pc, #24]	; (8003a14 <HAL_TIM_MspPostInit+0xf8>)
 80039fc:	f000 fd36 	bl	800446c <HAL_GPIO_Init>
}
 8003a00:	bf00      	nop
 8003a02:	3728      	adds	r7, #40	; 0x28
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40000400 	.word	0x40000400
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40020000 	.word	0x40020000
 8003a14:	40020400 	.word	0x40020400
 8003a18:	40001800 	.word	0x40001800

08003a1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b094      	sub	sp, #80	; 0x50
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a24:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	605a      	str	r2, [r3, #4]
 8003a2e:	609a      	str	r2, [r3, #8]
 8003a30:	60da      	str	r2, [r3, #12]
 8003a32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a92      	ldr	r2, [pc, #584]	; (8003c84 <HAL_UART_MspInit+0x268>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d135      	bne.n	8003aaa <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003a3e:	2300      	movs	r3, #0
 8003a40:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a42:	4b91      	ldr	r3, [pc, #580]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	4a90      	ldr	r2, [pc, #576]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003a48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a4e:	4b8e      	ldr	r3, [pc, #568]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a56:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a5e:	4b8a      	ldr	r3, [pc, #552]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	4a89      	ldr	r2, [pc, #548]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003a64:	f043 0304 	orr.w	r3, r3, #4
 8003a68:	6313      	str	r3, [r2, #48]	; 0x30
 8003a6a:	4b87      	ldr	r3, [pc, #540]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	f003 0304 	and.w	r3, r3, #4
 8003a72:	637b      	str	r3, [r7, #52]	; 0x34
 8003a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003a76:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a80:	2300      	movs	r3, #0
 8003a82:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a84:	2303      	movs	r3, #3
 8003a86:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003a88:	2308      	movs	r3, #8
 8003a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a90:	4619      	mov	r1, r3
 8003a92:	487e      	ldr	r0, [pc, #504]	; (8003c8c <HAL_UART_MspInit+0x270>)
 8003a94:	f000 fcea 	bl	800446c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2106      	movs	r1, #6
 8003a9c:	2034      	movs	r0, #52	; 0x34
 8003a9e:	f000 fc29 	bl	80042f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003aa2:	2034      	movs	r0, #52	; 0x34
 8003aa4:	f000 fc42 	bl	800432c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003aa8:	e137      	b.n	8003d1a <HAL_UART_MspInit+0x2fe>
  else if(huart->Instance==UART5)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a78      	ldr	r2, [pc, #480]	; (8003c90 <HAL_UART_MspInit+0x274>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d153      	bne.n	8003b5c <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	633b      	str	r3, [r7, #48]	; 0x30
 8003ab8:	4b73      	ldr	r3, [pc, #460]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	4a72      	ldr	r2, [pc, #456]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ac2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ac4:	4b70      	ldr	r3, [pc, #448]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003acc:	633b      	str	r3, [r7, #48]	; 0x30
 8003ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ad4:	4b6c      	ldr	r3, [pc, #432]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad8:	4a6b      	ldr	r2, [pc, #428]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003ada:	f043 0304 	orr.w	r3, r3, #4
 8003ade:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae0:	4b69      	ldr	r3, [pc, #420]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003aec:	2300      	movs	r3, #0
 8003aee:	62bb      	str	r3, [r7, #40]	; 0x28
 8003af0:	4b65      	ldr	r3, [pc, #404]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af4:	4a64      	ldr	r2, [pc, #400]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003af6:	f043 0308 	orr.w	r3, r3, #8
 8003afa:	6313      	str	r3, [r2, #48]	; 0x30
 8003afc:	4b62      	ldr	r3, [pc, #392]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b00:	f003 0308 	and.w	r3, r3, #8
 8003b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b16:	2303      	movs	r3, #3
 8003b18:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003b1a:	2308      	movs	r3, #8
 8003b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b22:	4619      	mov	r1, r3
 8003b24:	4859      	ldr	r0, [pc, #356]	; (8003c8c <HAL_UART_MspInit+0x270>)
 8003b26:	f000 fca1 	bl	800446c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b2a:	2304      	movs	r3, #4
 8003b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b36:	2303      	movs	r3, #3
 8003b38:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003b3a:	2308      	movs	r3, #8
 8003b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b42:	4619      	mov	r1, r3
 8003b44:	4853      	ldr	r0, [pc, #332]	; (8003c94 <HAL_UART_MspInit+0x278>)
 8003b46:	f000 fc91 	bl	800446c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 6, 0);
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	2106      	movs	r1, #6
 8003b4e:	2035      	movs	r0, #53	; 0x35
 8003b50:	f000 fbd0 	bl	80042f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003b54:	2035      	movs	r0, #53	; 0x35
 8003b56:	f000 fbe9 	bl	800432c <HAL_NVIC_EnableIRQ>
}
 8003b5a:	e0de      	b.n	8003d1a <HAL_UART_MspInit+0x2fe>
  else if(huart->Instance==USART1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a4d      	ldr	r2, [pc, #308]	; (8003c98 <HAL_UART_MspInit+0x27c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d135      	bne.n	8003bd2 <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6a:	4b47      	ldr	r3, [pc, #284]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6e:	4a46      	ldr	r2, [pc, #280]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003b70:	f043 0310 	orr.w	r3, r3, #16
 8003b74:	6453      	str	r3, [r2, #68]	; 0x44
 8003b76:	4b44      	ldr	r3, [pc, #272]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b82:	2300      	movs	r3, #0
 8003b84:	623b      	str	r3, [r7, #32]
 8003b86:	4b40      	ldr	r3, [pc, #256]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	4a3f      	ldr	r2, [pc, #252]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003b8c:	f043 0301 	orr.w	r3, r3, #1
 8003b90:	6313      	str	r3, [r2, #48]	; 0x30
 8003b92:	4b3d      	ldr	r3, [pc, #244]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	623b      	str	r3, [r7, #32]
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003b9e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bac:	2303      	movs	r3, #3
 8003bae:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003bb0:	2307      	movs	r3, #7
 8003bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bb4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4838      	ldr	r0, [pc, #224]	; (8003c9c <HAL_UART_MspInit+0x280>)
 8003bbc:	f000 fc56 	bl	800446c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 8, 0);
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2108      	movs	r1, #8
 8003bc4:	2025      	movs	r0, #37	; 0x25
 8003bc6:	f000 fb95 	bl	80042f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003bca:	2025      	movs	r0, #37	; 0x25
 8003bcc:	f000 fbae 	bl	800432c <HAL_NVIC_EnableIRQ>
}
 8003bd0:	e0a3      	b.n	8003d1a <HAL_UART_MspInit+0x2fe>
  else if(huart->Instance==USART3)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a32      	ldr	r2, [pc, #200]	; (8003ca0 <HAL_UART_MspInit+0x284>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d165      	bne.n	8003ca8 <HAL_UART_MspInit+0x28c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61fb      	str	r3, [r7, #28]
 8003be0:	4b29      	ldr	r3, [pc, #164]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be4:	4a28      	ldr	r2, [pc, #160]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003be6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bea:	6413      	str	r3, [r2, #64]	; 0x40
 8003bec:	4b26      	ldr	r3, [pc, #152]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bf4:	61fb      	str	r3, [r7, #28]
 8003bf6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	61bb      	str	r3, [r7, #24]
 8003bfc:	4b22      	ldr	r3, [pc, #136]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c00:	4a21      	ldr	r2, [pc, #132]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003c02:	f043 0304 	orr.w	r3, r3, #4
 8003c06:	6313      	str	r3, [r2, #48]	; 0x30
 8003c08:	4b1f      	ldr	r3, [pc, #124]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	61bb      	str	r3, [r7, #24]
 8003c12:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	4b1b      	ldr	r3, [pc, #108]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1c:	4a1a      	ldr	r2, [pc, #104]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003c1e:	f043 0302 	orr.w	r3, r3, #2
 8003c22:	6313      	str	r3, [r2, #48]	; 0x30
 8003c24:	4b18      	ldr	r3, [pc, #96]	; (8003c88 <HAL_UART_MspInit+0x26c>)
 8003c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003c30:	2320      	movs	r3, #32
 8003c32:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c34:	2302      	movs	r3, #2
 8003c36:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c40:	2307      	movs	r3, #7
 8003c42:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c44:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4810      	ldr	r0, [pc, #64]	; (8003c8c <HAL_UART_MspInit+0x270>)
 8003c4c:	f000 fc0e 	bl	800446c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c54:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c56:	2302      	movs	r3, #2
 8003c58:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c62:	2307      	movs	r3, #7
 8003c64:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	480d      	ldr	r0, [pc, #52]	; (8003ca4 <HAL_UART_MspInit+0x288>)
 8003c6e:	f000 fbfd 	bl	800446c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 7, 0);
 8003c72:	2200      	movs	r2, #0
 8003c74:	2107      	movs	r1, #7
 8003c76:	2027      	movs	r0, #39	; 0x27
 8003c78:	f000 fb3c 	bl	80042f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003c7c:	2027      	movs	r0, #39	; 0x27
 8003c7e:	f000 fb55 	bl	800432c <HAL_NVIC_EnableIRQ>
}
 8003c82:	e04a      	b.n	8003d1a <HAL_UART_MspInit+0x2fe>
 8003c84:	40004c00 	.word	0x40004c00
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	40020800 	.word	0x40020800
 8003c90:	40005000 	.word	0x40005000
 8003c94:	40020c00 	.word	0x40020c00
 8003c98:	40011000 	.word	0x40011000
 8003c9c:	40020000 	.word	0x40020000
 8003ca0:	40004800 	.word	0x40004800
 8003ca4:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1d      	ldr	r2, [pc, #116]	; (8003d24 <HAL_UART_MspInit+0x308>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d133      	bne.n	8003d1a <HAL_UART_MspInit+0x2fe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	4b1c      	ldr	r3, [pc, #112]	; (8003d28 <HAL_UART_MspInit+0x30c>)
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	4a1b      	ldr	r2, [pc, #108]	; (8003d28 <HAL_UART_MspInit+0x30c>)
 8003cbc:	f043 0320 	orr.w	r3, r3, #32
 8003cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8003cc2:	4b19      	ldr	r3, [pc, #100]	; (8003d28 <HAL_UART_MspInit+0x30c>)
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	f003 0320 	and.w	r3, r3, #32
 8003cca:	613b      	str	r3, [r7, #16]
 8003ccc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	4b15      	ldr	r3, [pc, #84]	; (8003d28 <HAL_UART_MspInit+0x30c>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	4a14      	ldr	r2, [pc, #80]	; (8003d28 <HAL_UART_MspInit+0x30c>)
 8003cd8:	f043 0304 	orr.w	r3, r3, #4
 8003cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cde:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <HAL_UART_MspInit+0x30c>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003cea:	23c0      	movs	r3, #192	; 0xc0
 8003cec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cee:	2302      	movs	r3, #2
 8003cf0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003cfa:	2308      	movs	r3, #8
 8003cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cfe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d02:	4619      	mov	r1, r3
 8003d04:	4809      	ldr	r0, [pc, #36]	; (8003d2c <HAL_UART_MspInit+0x310>)
 8003d06:	f000 fbb1 	bl	800446c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2106      	movs	r1, #6
 8003d0e:	2047      	movs	r0, #71	; 0x47
 8003d10:	f000 faf0 	bl	80042f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003d14:	2047      	movs	r0, #71	; 0x47
 8003d16:	f000 fb09 	bl	800432c <HAL_NVIC_EnableIRQ>
}
 8003d1a:	bf00      	nop
 8003d1c:	3750      	adds	r7, #80	; 0x50
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40011400 	.word	0x40011400
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	40020800 	.word	0x40020800

08003d30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08e      	sub	sp, #56	; 0x38
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	4b33      	ldr	r3, [pc, #204]	; (8003e14 <HAL_InitTick+0xe4>)
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	4a32      	ldr	r2, [pc, #200]	; (8003e14 <HAL_InitTick+0xe4>)
 8003d4a:	f043 0320 	orr.w	r3, r3, #32
 8003d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8003d50:	4b30      	ldr	r3, [pc, #192]	; (8003e14 <HAL_InitTick+0xe4>)
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	f003 0320 	and.w	r3, r3, #32
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d5c:	f107 0210 	add.w	r2, r7, #16
 8003d60:	f107 0314 	add.w	r3, r7, #20
 8003d64:	4611      	mov	r1, r2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f001 fab0 	bl	80052cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d103      	bne.n	8003d7e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003d76:	f001 fa81 	bl	800527c <HAL_RCC_GetPCLK1Freq>
 8003d7a:	6378      	str	r0, [r7, #52]	; 0x34
 8003d7c:	e004      	b.n	8003d88 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003d7e:	f001 fa7d 	bl	800527c <HAL_RCC_GetPCLK1Freq>
 8003d82:	4603      	mov	r3, r0
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8a:	4a23      	ldr	r2, [pc, #140]	; (8003e18 <HAL_InitTick+0xe8>)
 8003d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d90:	0c9b      	lsrs	r3, r3, #18
 8003d92:	3b01      	subs	r3, #1
 8003d94:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8003d96:	4b21      	ldr	r3, [pc, #132]	; (8003e1c <HAL_InitTick+0xec>)
 8003d98:	4a21      	ldr	r2, [pc, #132]	; (8003e20 <HAL_InitTick+0xf0>)
 8003d9a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8003d9c:	4b1f      	ldr	r3, [pc, #124]	; (8003e1c <HAL_InitTick+0xec>)
 8003d9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003da2:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8003da4:	4a1d      	ldr	r2, [pc, #116]	; (8003e1c <HAL_InitTick+0xec>)
 8003da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da8:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8003daa:	4b1c      	ldr	r3, [pc, #112]	; (8003e1c <HAL_InitTick+0xec>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003db0:	4b1a      	ldr	r3, [pc, #104]	; (8003e1c <HAL_InitTick+0xec>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003db6:	4b19      	ldr	r3, [pc, #100]	; (8003e1c <HAL_InitTick+0xec>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8003dbc:	4817      	ldr	r0, [pc, #92]	; (8003e1c <HAL_InitTick+0xec>)
 8003dbe:	f001 feff 	bl	8005bc0 <HAL_TIM_Base_Init>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003dc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d11b      	bne.n	8003e08 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8003dd0:	4812      	ldr	r0, [pc, #72]	; (8003e1c <HAL_InitTick+0xec>)
 8003dd2:	f001 ff45 	bl	8005c60 <HAL_TIM_Base_Start_IT>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003ddc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d111      	bne.n	8003e08 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003de4:	2037      	movs	r0, #55	; 0x37
 8003de6:	f000 faa1 	bl	800432c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b0f      	cmp	r3, #15
 8003dee:	d808      	bhi.n	8003e02 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8003df0:	2200      	movs	r2, #0
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	2037      	movs	r0, #55	; 0x37
 8003df6:	f000 fa7d 	bl	80042f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003dfa:	4a0a      	ldr	r2, [pc, #40]	; (8003e24 <HAL_InitTick+0xf4>)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	e002      	b.n	8003e08 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003e08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3738      	adds	r7, #56	; 0x38
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40023800 	.word	0x40023800
 8003e18:	431bde83 	.word	0x431bde83
 8003e1c:	20000888 	.word	0x20000888
 8003e20:	40001400 	.word	0x40001400
 8003e24:	2000000c 	.word	0x2000000c

08003e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e2c:	e7fe      	b.n	8003e2c <NMI_Handler+0x4>

08003e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e32:	e7fe      	b.n	8003e32 <HardFault_Handler+0x4>

08003e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e38:	e7fe      	b.n	8003e38 <MemManage_Handler+0x4>

08003e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e3e:	e7fe      	b.n	8003e3e <BusFault_Handler+0x4>

08003e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e44:	e7fe      	b.n	8003e44 <UsageFault_Handler+0x4>
	...

08003e48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM2_IRQn 0 */
  if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_UPDATE) != RESET) {
 8003e4e:	4b1f      	ldr	r3, [pc, #124]	; (8003ecc <TIM2_IRQHandler+0x84>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d130      	bne.n	8003ebe <TIM2_IRQHandler+0x76>

		// Timer overflow interrupt
		Global_Speed = round(Calculate_Car_Speed());
 8003e5c:	f7fe fed8 	bl	8002c10 <Calculate_Car_Speed>
 8003e60:	ee10 3a10 	vmov	r3, s0
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fc fbdf 	bl	8000628 <__aeabi_f2d>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	ec43 2b10 	vmov	d0, r2, r3
 8003e72:	f00b ffe3 	bl	800fe3c <round>
 8003e76:	ec53 2b10 	vmov	r2, r3, d0
 8003e7a:	4610      	mov	r0, r2
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	f7fc ff03 	bl	8000c88 <__aeabi_d2uiz>
 8003e82:	4603      	mov	r3, r0
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	4b12      	ldr	r3, [pc, #72]	; (8003ed0 <TIM2_IRQHandler+0x88>)
 8003e88:	801a      	strh	r2, [r3, #0]



        if(Global_GPS_Speed_Completetion==Nothing_Completed)
 8003e8a:	4b12      	ldr	r3, [pc, #72]	; (8003ed4 <TIM2_IRQHandler+0x8c>)
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d103      	bne.n	8003e9a <TIM2_IRQHandler+0x52>
        {
        	Global_GPS_Speed_Completetion=Half_Completed_Speed;
 8003e92:	4b10      	ldr	r3, [pc, #64]	; (8003ed4 <TIM2_IRQHandler+0x8c>)
 8003e94:	2201      	movs	r2, #1
 8003e96:	701a      	strb	r2, [r3, #0]
 8003e98:	e011      	b.n	8003ebe <TIM2_IRQHandler+0x76>

        }
        else if(Global_GPS_Speed_Completetion==Half_Completed_GPS)
 8003e9a:	4b0e      	ldr	r3, [pc, #56]	; (8003ed4 <TIM2_IRQHandler+0x8c>)
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d10d      	bne.n	8003ebe <TIM2_IRQHandler+0x76>
        {
        	Global_GPS_Speed_Completetion=Nothing_Completed;
 8003ea2:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <TIM2_IRQHandler+0x8c>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	701a      	strb	r2, [r3, #0]

        	/*Notify the ESPPeriodicTask*/
        	xTaskNotifyFromISR(Handle_ESP_Periodic,0,eNoAction,NULL);
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <TIM2_IRQHandler+0x90>)
 8003eaa:	6818      	ldr	r0, [r3, #0]
 8003eac:	2300      	movs	r3, #0
 8003eae:	9301      	str	r3, [sp, #4]
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	2100      	movs	r1, #0
 8003eba:	f006 f971 	bl	800a1a0 <xTaskGenericNotifyFromISR>
    {
	/* Do Nothing */
	}
  
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003ebe:	4803      	ldr	r0, [pc, #12]	; (8003ecc <TIM2_IRQHandler+0x84>)
 8003ec0:	f002 fa3e 	bl	8006340 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003ec4:	bf00      	nop
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	200005dc 	.word	0x200005dc
 8003ed0:	20000324 	.word	0x20000324
 8003ed4:	20000300 	.word	0x20000300
 8003ed8:	2000085c 	.word	0x2000085c

08003edc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8003ee0:	4803      	ldr	r0, [pc, #12]	; (8003ef0 <USART1_IRQHandler+0x14>)
 8003ee2:	f7fe fe37 	bl	8002b54 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ee6:	4802      	ldr	r0, [pc, #8]	; (8003ef0 <USART1_IRQHandler+0x14>)
 8003ee8:	f003 f9ee 	bl	80072c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003eec:	bf00      	nop
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	20000784 	.word	0x20000784

08003ef4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003ef8:	4802      	ldr	r0, [pc, #8]	; (8003f04 <USART3_IRQHandler+0x10>)
 8003efa:	f003 f9e5 	bl	80072c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	200007c8 	.word	0x200007c8

08003f08 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003f0c:	4802      	ldr	r0, [pc, #8]	; (8003f18 <UART4_IRQHandler+0x10>)
 8003f0e:	f003 f9db 	bl	80072c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003f12:	bf00      	nop
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	200006fc 	.word	0x200006fc

08003f1c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003f20:	4802      	ldr	r0, [pc, #8]	; (8003f2c <UART5_IRQHandler+0x10>)
 8003f22:	f003 f9d1 	bl	80072c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003f26:	bf00      	nop
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000740 	.word	0x20000740

08003f30 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003f34:	4802      	ldr	r0, [pc, #8]	; (8003f40 <TIM7_IRQHandler+0x10>)
 8003f36:	f002 fa03 	bl	8006340 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003f3a:	bf00      	nop
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	20000888 	.word	0x20000888

08003f44 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003f48:	4802      	ldr	r0, [pc, #8]	; (8003f54 <USART6_IRQHandler+0x10>)
 8003f4a:	f003 f9bd 	bl	80072c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	2000080c 	.word	0x2000080c

08003f58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  return 1;
 8003f5c:	2301      	movs	r3, #1
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <_kill>:

int _kill(int pid, int sig)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f72:	f009 fd63 	bl	800da3c <__errno>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2216      	movs	r2, #22
 8003f7a:	601a      	str	r2, [r3, #0]
  return -1;
 8003f7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <_exit>:

void _exit (int status)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f90:	f04f 31ff 	mov.w	r1, #4294967295
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff ffe7 	bl	8003f68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f9a:	e7fe      	b.n	8003f9a <_exit+0x12>

08003f9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fa8:	2300      	movs	r3, #0
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	e00a      	b.n	8003fc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003fae:	f3af 8000 	nop.w
 8003fb2:	4601      	mov	r1, r0
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	60ba      	str	r2, [r7, #8]
 8003fba:	b2ca      	uxtb	r2, r1
 8003fbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	dbf0      	blt.n	8003fae <_read+0x12>
  }

  return len;
 8003fcc:	687b      	ldr	r3, [r7, #4]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003fde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
 8003ff6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ffe:	605a      	str	r2, [r3, #4]
  return 0;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <_isatty>:

int _isatty(int file)
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004016:	2301      	movs	r3, #1
}
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
	...

08004040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004044:	4b06      	ldr	r3, [pc, #24]	; (8004060 <SystemInit+0x20>)
 8004046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404a:	4a05      	ldr	r2, [pc, #20]	; (8004060 <SystemInit+0x20>)
 800404c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004054:	bf00      	nop
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	e000ed00 	.word	0xe000ed00

08004064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800409c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004068:	480d      	ldr	r0, [pc, #52]	; (80040a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800406a:	490e      	ldr	r1, [pc, #56]	; (80040a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800406c:	4a0e      	ldr	r2, [pc, #56]	; (80040a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800406e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004070:	e002      	b.n	8004078 <LoopCopyDataInit>

08004072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004076:	3304      	adds	r3, #4

08004078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800407a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800407c:	d3f9      	bcc.n	8004072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800407e:	4a0b      	ldr	r2, [pc, #44]	; (80040ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004080:	4c0b      	ldr	r4, [pc, #44]	; (80040b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004084:	e001      	b.n	800408a <LoopFillZerobss>

08004086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004088:	3204      	adds	r2, #4

0800408a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800408a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800408c:	d3fb      	bcc.n	8004086 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800408e:	f7ff ffd7 	bl	8004040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004092:	f009 fcd9 	bl	800da48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004096:	f7fe fe0f 	bl	8002cb8 <main>
  bx  lr    
 800409a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800409c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80040a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040a4:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80040a8:	08011070 	.word	0x08011070
  ldr r2, =_sbss
 80040ac:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80040b0:	20013e38 	.word	0x20013e38

080040b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040b4:	e7fe      	b.n	80040b4 <ADC_IRQHandler>
	...

080040b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040bc:	4b0e      	ldr	r3, [pc, #56]	; (80040f8 <HAL_Init+0x40>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a0d      	ldr	r2, [pc, #52]	; (80040f8 <HAL_Init+0x40>)
 80040c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040c8:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <HAL_Init+0x40>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a0a      	ldr	r2, [pc, #40]	; (80040f8 <HAL_Init+0x40>)
 80040ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040d4:	4b08      	ldr	r3, [pc, #32]	; (80040f8 <HAL_Init+0x40>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a07      	ldr	r2, [pc, #28]	; (80040f8 <HAL_Init+0x40>)
 80040da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040e0:	2003      	movs	r0, #3
 80040e2:	f000 f8fc 	bl	80042de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040e6:	200f      	movs	r0, #15
 80040e8:	f7ff fe22 	bl	8003d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040ec:	f7ff faaa 	bl	8003644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40023c00 	.word	0x40023c00

080040fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004100:	4b06      	ldr	r3, [pc, #24]	; (800411c <HAL_IncTick+0x20>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	461a      	mov	r2, r3
 8004106:	4b06      	ldr	r3, [pc, #24]	; (8004120 <HAL_IncTick+0x24>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4413      	add	r3, r2
 800410c:	4a04      	ldr	r2, [pc, #16]	; (8004120 <HAL_IncTick+0x24>)
 800410e:	6013      	str	r3, [r2, #0]
}
 8004110:	bf00      	nop
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	20000010 	.word	0x20000010
 8004120:	200008d0 	.word	0x200008d0

08004124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  return uwTick;
 8004128:	4b03      	ldr	r3, [pc, #12]	; (8004138 <HAL_GetTick+0x14>)
 800412a:	681b      	ldr	r3, [r3, #0]
}
 800412c:	4618      	mov	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	200008d0 	.word	0x200008d0

0800413c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004144:	f7ff ffee 	bl	8004124 <HAL_GetTick>
 8004148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004154:	d005      	beq.n	8004162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004156:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <HAL_Delay+0x44>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	461a      	mov	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4413      	add	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004162:	bf00      	nop
 8004164:	f7ff ffde 	bl	8004124 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	429a      	cmp	r2, r3
 8004172:	d8f7      	bhi.n	8004164 <HAL_Delay+0x28>
  {
  }
}
 8004174:	bf00      	nop
 8004176:	bf00      	nop
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20000010 	.word	0x20000010

08004184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004194:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <__NVIC_SetPriorityGrouping+0x44>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041a0:	4013      	ands	r3, r2
 80041a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041b6:	4a04      	ldr	r2, [pc, #16]	; (80041c8 <__NVIC_SetPriorityGrouping+0x44>)
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	60d3      	str	r3, [r2, #12]
}
 80041bc:	bf00      	nop
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	e000ed00 	.word	0xe000ed00

080041cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041d0:	4b04      	ldr	r3, [pc, #16]	; (80041e4 <__NVIC_GetPriorityGrouping+0x18>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	0a1b      	lsrs	r3, r3, #8
 80041d6:	f003 0307 	and.w	r3, r3, #7
}
 80041da:	4618      	mov	r0, r3
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	e000ed00 	.word	0xe000ed00

080041e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4603      	mov	r3, r0
 80041f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	db0b      	blt.n	8004212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	f003 021f 	and.w	r2, r3, #31
 8004200:	4907      	ldr	r1, [pc, #28]	; (8004220 <__NVIC_EnableIRQ+0x38>)
 8004202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004206:	095b      	lsrs	r3, r3, #5
 8004208:	2001      	movs	r0, #1
 800420a:	fa00 f202 	lsl.w	r2, r0, r2
 800420e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	e000e100 	.word	0xe000e100

08004224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	4603      	mov	r3, r0
 800422c:	6039      	str	r1, [r7, #0]
 800422e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004234:	2b00      	cmp	r3, #0
 8004236:	db0a      	blt.n	800424e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	b2da      	uxtb	r2, r3
 800423c:	490c      	ldr	r1, [pc, #48]	; (8004270 <__NVIC_SetPriority+0x4c>)
 800423e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004242:	0112      	lsls	r2, r2, #4
 8004244:	b2d2      	uxtb	r2, r2
 8004246:	440b      	add	r3, r1
 8004248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800424c:	e00a      	b.n	8004264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	b2da      	uxtb	r2, r3
 8004252:	4908      	ldr	r1, [pc, #32]	; (8004274 <__NVIC_SetPriority+0x50>)
 8004254:	79fb      	ldrb	r3, [r7, #7]
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	3b04      	subs	r3, #4
 800425c:	0112      	lsls	r2, r2, #4
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	440b      	add	r3, r1
 8004262:	761a      	strb	r2, [r3, #24]
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	e000e100 	.word	0xe000e100
 8004274:	e000ed00 	.word	0xe000ed00

08004278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004278:	b480      	push	{r7}
 800427a:	b089      	sub	sp, #36	; 0x24
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	f1c3 0307 	rsb	r3, r3, #7
 8004292:	2b04      	cmp	r3, #4
 8004294:	bf28      	it	cs
 8004296:	2304      	movcs	r3, #4
 8004298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	3304      	adds	r3, #4
 800429e:	2b06      	cmp	r3, #6
 80042a0:	d902      	bls.n	80042a8 <NVIC_EncodePriority+0x30>
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	3b03      	subs	r3, #3
 80042a6:	e000      	b.n	80042aa <NVIC_EncodePriority+0x32>
 80042a8:	2300      	movs	r3, #0
 80042aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042ac:	f04f 32ff 	mov.w	r2, #4294967295
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	43da      	mvns	r2, r3
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	401a      	ands	r2, r3
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042c0:	f04f 31ff 	mov.w	r1, #4294967295
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ca:	43d9      	mvns	r1, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d0:	4313      	orrs	r3, r2
         );
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3724      	adds	r7, #36	; 0x24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b082      	sub	sp, #8
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff ff4c 	bl	8004184 <__NVIC_SetPriorityGrouping>
}
 80042ec:	bf00      	nop
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004306:	f7ff ff61 	bl	80041cc <__NVIC_GetPriorityGrouping>
 800430a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	68b9      	ldr	r1, [r7, #8]
 8004310:	6978      	ldr	r0, [r7, #20]
 8004312:	f7ff ffb1 	bl	8004278 <NVIC_EncodePriority>
 8004316:	4602      	mov	r2, r0
 8004318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800431c:	4611      	mov	r1, r2
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff ff80 	bl	8004224 <__NVIC_SetPriority>
}
 8004324:	bf00      	nop
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	4603      	mov	r3, r0
 8004334:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff ff54 	bl	80041e8 <__NVIC_EnableIRQ>
}
 8004340:	bf00      	nop
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004354:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004356:	f7ff fee5 	bl	8004124 <HAL_GetTick>
 800435a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d008      	beq.n	800437a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2280      	movs	r2, #128	; 0x80
 800436c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e052      	b.n	8004420 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 0216 	bic.w	r2, r2, #22
 8004388:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695a      	ldr	r2, [r3, #20]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004398:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d103      	bne.n	80043aa <HAL_DMA_Abort+0x62>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d007      	beq.n	80043ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0208 	bic.w	r2, r2, #8
 80043b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0201 	bic.w	r2, r2, #1
 80043c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043ca:	e013      	b.n	80043f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043cc:	f7ff feaa 	bl	8004124 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b05      	cmp	r3, #5
 80043d8:	d90c      	bls.n	80043f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2220      	movs	r2, #32
 80043de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2203      	movs	r2, #3
 80043e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e015      	b.n	8004420 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1e4      	bne.n	80043cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004406:	223f      	movs	r2, #63	; 0x3f
 8004408:	409a      	lsls	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d004      	beq.n	8004446 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2280      	movs	r2, #128	; 0x80
 8004440:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e00c      	b.n	8004460 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2205      	movs	r2, #5
 800444a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0201 	bic.w	r2, r2, #1
 800445c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800446c:	b480      	push	{r7}
 800446e:	b089      	sub	sp, #36	; 0x24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004476:	2300      	movs	r3, #0
 8004478:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800447a:	2300      	movs	r3, #0
 800447c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800447e:	2300      	movs	r3, #0
 8004480:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004482:	2300      	movs	r3, #0
 8004484:	61fb      	str	r3, [r7, #28]
 8004486:	e165      	b.n	8004754 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004488:	2201      	movs	r2, #1
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4013      	ands	r3, r2
 800449a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	f040 8154 	bne.w	800474e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d005      	beq.n	80044be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d130      	bne.n	8004520 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	2203      	movs	r2, #3
 80044ca:	fa02 f303 	lsl.w	r3, r2, r3
 80044ce:	43db      	mvns	r3, r3
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	4013      	ands	r3, r2
 80044d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	fa02 f303 	lsl.w	r3, r2, r3
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044f4:	2201      	movs	r2, #1
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	43db      	mvns	r3, r3
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	4013      	ands	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	091b      	lsrs	r3, r3, #4
 800450a:	f003 0201 	and.w	r2, r3, #1
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	4313      	orrs	r3, r2
 8004518:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	2b03      	cmp	r3, #3
 800452a:	d017      	beq.n	800455c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	2203      	movs	r2, #3
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	43db      	mvns	r3, r3
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	4013      	ands	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	4313      	orrs	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f003 0303 	and.w	r3, r3, #3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d123      	bne.n	80045b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	08da      	lsrs	r2, r3, #3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3208      	adds	r2, #8
 8004570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004574:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	220f      	movs	r2, #15
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	43db      	mvns	r3, r3
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4013      	ands	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	4313      	orrs	r3, r2
 80045a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	08da      	lsrs	r2, r3, #3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	3208      	adds	r2, #8
 80045aa:	69b9      	ldr	r1, [r7, #24]
 80045ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	2203      	movs	r2, #3
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	43db      	mvns	r3, r3
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4013      	ands	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f003 0203 	and.w	r2, r3, #3
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	4313      	orrs	r3, r2
 80045dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80ae 	beq.w	800474e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	4b5d      	ldr	r3, [pc, #372]	; (800476c <HAL_GPIO_Init+0x300>)
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	4a5c      	ldr	r2, [pc, #368]	; (800476c <HAL_GPIO_Init+0x300>)
 80045fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004600:	6453      	str	r3, [r2, #68]	; 0x44
 8004602:	4b5a      	ldr	r3, [pc, #360]	; (800476c <HAL_GPIO_Init+0x300>)
 8004604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800460e:	4a58      	ldr	r2, [pc, #352]	; (8004770 <HAL_GPIO_Init+0x304>)
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	089b      	lsrs	r3, r3, #2
 8004614:	3302      	adds	r3, #2
 8004616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800461a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	220f      	movs	r2, #15
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	43db      	mvns	r3, r3
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	4013      	ands	r3, r2
 8004630:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a4f      	ldr	r2, [pc, #316]	; (8004774 <HAL_GPIO_Init+0x308>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d025      	beq.n	8004686 <HAL_GPIO_Init+0x21a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a4e      	ldr	r2, [pc, #312]	; (8004778 <HAL_GPIO_Init+0x30c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d01f      	beq.n	8004682 <HAL_GPIO_Init+0x216>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a4d      	ldr	r2, [pc, #308]	; (800477c <HAL_GPIO_Init+0x310>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d019      	beq.n	800467e <HAL_GPIO_Init+0x212>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a4c      	ldr	r2, [pc, #304]	; (8004780 <HAL_GPIO_Init+0x314>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d013      	beq.n	800467a <HAL_GPIO_Init+0x20e>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a4b      	ldr	r2, [pc, #300]	; (8004784 <HAL_GPIO_Init+0x318>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d00d      	beq.n	8004676 <HAL_GPIO_Init+0x20a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a4a      	ldr	r2, [pc, #296]	; (8004788 <HAL_GPIO_Init+0x31c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d007      	beq.n	8004672 <HAL_GPIO_Init+0x206>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a49      	ldr	r2, [pc, #292]	; (800478c <HAL_GPIO_Init+0x320>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d101      	bne.n	800466e <HAL_GPIO_Init+0x202>
 800466a:	2306      	movs	r3, #6
 800466c:	e00c      	b.n	8004688 <HAL_GPIO_Init+0x21c>
 800466e:	2307      	movs	r3, #7
 8004670:	e00a      	b.n	8004688 <HAL_GPIO_Init+0x21c>
 8004672:	2305      	movs	r3, #5
 8004674:	e008      	b.n	8004688 <HAL_GPIO_Init+0x21c>
 8004676:	2304      	movs	r3, #4
 8004678:	e006      	b.n	8004688 <HAL_GPIO_Init+0x21c>
 800467a:	2303      	movs	r3, #3
 800467c:	e004      	b.n	8004688 <HAL_GPIO_Init+0x21c>
 800467e:	2302      	movs	r3, #2
 8004680:	e002      	b.n	8004688 <HAL_GPIO_Init+0x21c>
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <HAL_GPIO_Init+0x21c>
 8004686:	2300      	movs	r3, #0
 8004688:	69fa      	ldr	r2, [r7, #28]
 800468a:	f002 0203 	and.w	r2, r2, #3
 800468e:	0092      	lsls	r2, r2, #2
 8004690:	4093      	lsls	r3, r2
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	4313      	orrs	r3, r2
 8004696:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004698:	4935      	ldr	r1, [pc, #212]	; (8004770 <HAL_GPIO_Init+0x304>)
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	089b      	lsrs	r3, r3, #2
 800469e:	3302      	adds	r3, #2
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046a6:	4b3a      	ldr	r3, [pc, #232]	; (8004790 <HAL_GPIO_Init+0x324>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	43db      	mvns	r3, r3
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	4013      	ands	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046ca:	4a31      	ldr	r2, [pc, #196]	; (8004790 <HAL_GPIO_Init+0x324>)
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046d0:	4b2f      	ldr	r3, [pc, #188]	; (8004790 <HAL_GPIO_Init+0x324>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	43db      	mvns	r3, r3
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	4013      	ands	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046f4:	4a26      	ldr	r2, [pc, #152]	; (8004790 <HAL_GPIO_Init+0x324>)
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046fa:	4b25      	ldr	r3, [pc, #148]	; (8004790 <HAL_GPIO_Init+0x324>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	43db      	mvns	r3, r3
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	4013      	ands	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800471e:	4a1c      	ldr	r2, [pc, #112]	; (8004790 <HAL_GPIO_Init+0x324>)
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004724:	4b1a      	ldr	r3, [pc, #104]	; (8004790 <HAL_GPIO_Init+0x324>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	43db      	mvns	r3, r3
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	4013      	ands	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004748:	4a11      	ldr	r2, [pc, #68]	; (8004790 <HAL_GPIO_Init+0x324>)
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	3301      	adds	r3, #1
 8004752:	61fb      	str	r3, [r7, #28]
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	2b0f      	cmp	r3, #15
 8004758:	f67f ae96 	bls.w	8004488 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800475c:	bf00      	nop
 800475e:	bf00      	nop
 8004760:	3724      	adds	r7, #36	; 0x24
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	40023800 	.word	0x40023800
 8004770:	40013800 	.word	0x40013800
 8004774:	40020000 	.word	0x40020000
 8004778:	40020400 	.word	0x40020400
 800477c:	40020800 	.word	0x40020800
 8004780:	40020c00 	.word	0x40020c00
 8004784:	40021000 	.word	0x40021000
 8004788:	40021400 	.word	0x40021400
 800478c:	40021800 	.word	0x40021800
 8004790:	40013c00 	.word	0x40013c00

08004794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	807b      	strh	r3, [r7, #2]
 80047a0:	4613      	mov	r3, r2
 80047a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047a4:	787b      	ldrb	r3, [r7, #1]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047aa:	887a      	ldrh	r2, [r7, #2]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047b0:	e003      	b.n	80047ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047b2:	887b      	ldrh	r3, [r7, #2]
 80047b4:	041a      	lsls	r2, r3, #16
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	619a      	str	r2, [r3, #24]
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
	...

080047c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e12b      	b.n	8004a32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fe ff50 	bl	8003694 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2224      	movs	r2, #36	; 0x24
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0201 	bic.w	r2, r2, #1
 800480a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800481a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800482a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800482c:	f000 fd26 	bl	800527c <HAL_RCC_GetPCLK1Freq>
 8004830:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	4a81      	ldr	r2, [pc, #516]	; (8004a3c <HAL_I2C_Init+0x274>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d807      	bhi.n	800484c <HAL_I2C_Init+0x84>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4a80      	ldr	r2, [pc, #512]	; (8004a40 <HAL_I2C_Init+0x278>)
 8004840:	4293      	cmp	r3, r2
 8004842:	bf94      	ite	ls
 8004844:	2301      	movls	r3, #1
 8004846:	2300      	movhi	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	e006      	b.n	800485a <HAL_I2C_Init+0x92>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4a7d      	ldr	r2, [pc, #500]	; (8004a44 <HAL_I2C_Init+0x27c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	bf94      	ite	ls
 8004854:	2301      	movls	r3, #1
 8004856:	2300      	movhi	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e0e7      	b.n	8004a32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4a78      	ldr	r2, [pc, #480]	; (8004a48 <HAL_I2C_Init+0x280>)
 8004866:	fba2 2303 	umull	r2, r3, r2, r3
 800486a:	0c9b      	lsrs	r3, r3, #18
 800486c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	430a      	orrs	r2, r1
 8004880:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	4a6a      	ldr	r2, [pc, #424]	; (8004a3c <HAL_I2C_Init+0x274>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d802      	bhi.n	800489c <HAL_I2C_Init+0xd4>
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	3301      	adds	r3, #1
 800489a:	e009      	b.n	80048b0 <HAL_I2C_Init+0xe8>
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048a2:	fb02 f303 	mul.w	r3, r2, r3
 80048a6:	4a69      	ldr	r2, [pc, #420]	; (8004a4c <HAL_I2C_Init+0x284>)
 80048a8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ac:	099b      	lsrs	r3, r3, #6
 80048ae:	3301      	adds	r3, #1
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6812      	ldr	r2, [r2, #0]
 80048b4:	430b      	orrs	r3, r1
 80048b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	495c      	ldr	r1, [pc, #368]	; (8004a3c <HAL_I2C_Init+0x274>)
 80048cc:	428b      	cmp	r3, r1
 80048ce:	d819      	bhi.n	8004904 <HAL_I2C_Init+0x13c>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	1e59      	subs	r1, r3, #1
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	fbb1 f3f3 	udiv	r3, r1, r3
 80048de:	1c59      	adds	r1, r3, #1
 80048e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80048e4:	400b      	ands	r3, r1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <HAL_I2C_Init+0x138>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	1e59      	subs	r1, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80048f8:	3301      	adds	r3, #1
 80048fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048fe:	e051      	b.n	80049a4 <HAL_I2C_Init+0x1dc>
 8004900:	2304      	movs	r3, #4
 8004902:	e04f      	b.n	80049a4 <HAL_I2C_Init+0x1dc>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d111      	bne.n	8004930 <HAL_I2C_Init+0x168>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	1e58      	subs	r0, r3, #1
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6859      	ldr	r1, [r3, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	440b      	add	r3, r1
 800491a:	fbb0 f3f3 	udiv	r3, r0, r3
 800491e:	3301      	adds	r3, #1
 8004920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004924:	2b00      	cmp	r3, #0
 8004926:	bf0c      	ite	eq
 8004928:	2301      	moveq	r3, #1
 800492a:	2300      	movne	r3, #0
 800492c:	b2db      	uxtb	r3, r3
 800492e:	e012      	b.n	8004956 <HAL_I2C_Init+0x18e>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	1e58      	subs	r0, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6859      	ldr	r1, [r3, #4]
 8004938:	460b      	mov	r3, r1
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	440b      	add	r3, r1
 800493e:	0099      	lsls	r1, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	fbb0 f3f3 	udiv	r3, r0, r3
 8004946:	3301      	adds	r3, #1
 8004948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800494c:	2b00      	cmp	r3, #0
 800494e:	bf0c      	ite	eq
 8004950:	2301      	moveq	r3, #1
 8004952:	2300      	movne	r3, #0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <HAL_I2C_Init+0x196>
 800495a:	2301      	movs	r3, #1
 800495c:	e022      	b.n	80049a4 <HAL_I2C_Init+0x1dc>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10e      	bne.n	8004984 <HAL_I2C_Init+0x1bc>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	1e58      	subs	r0, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6859      	ldr	r1, [r3, #4]
 800496e:	460b      	mov	r3, r1
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	440b      	add	r3, r1
 8004974:	fbb0 f3f3 	udiv	r3, r0, r3
 8004978:	3301      	adds	r3, #1
 800497a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800497e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004982:	e00f      	b.n	80049a4 <HAL_I2C_Init+0x1dc>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	1e58      	subs	r0, r3, #1
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6859      	ldr	r1, [r3, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	440b      	add	r3, r1
 8004992:	0099      	lsls	r1, r3, #2
 8004994:	440b      	add	r3, r1
 8004996:	fbb0 f3f3 	udiv	r3, r0, r3
 800499a:	3301      	adds	r3, #1
 800499c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049a4:	6879      	ldr	r1, [r7, #4]
 80049a6:	6809      	ldr	r1, [r1, #0]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69da      	ldr	r2, [r3, #28]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6911      	ldr	r1, [r2, #16]
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	68d2      	ldr	r2, [r2, #12]
 80049de:	4311      	orrs	r1, r2
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6812      	ldr	r2, [r2, #0]
 80049e4:	430b      	orrs	r3, r1
 80049e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695a      	ldr	r2, [r3, #20]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 0201 	orr.w	r2, r2, #1
 8004a12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	000186a0 	.word	0x000186a0
 8004a40:	001e847f 	.word	0x001e847f
 8004a44:	003d08ff 	.word	0x003d08ff
 8004a48:	431bde83 	.word	0x431bde83
 8004a4c:	10624dd3 	.word	0x10624dd3

08004a50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b088      	sub	sp, #32
 8004a54:	af02      	add	r7, sp, #8
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	607a      	str	r2, [r7, #4]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	817b      	strh	r3, [r7, #10]
 8004a60:	4613      	mov	r3, r2
 8004a62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a64:	f7ff fb5e 	bl	8004124 <HAL_GetTick>
 8004a68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b20      	cmp	r3, #32
 8004a74:	f040 80e0 	bne.w	8004c38 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	2319      	movs	r3, #25
 8004a7e:	2201      	movs	r2, #1
 8004a80:	4970      	ldr	r1, [pc, #448]	; (8004c44 <HAL_I2C_Master_Transmit+0x1f4>)
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f964 	bl	8004d50 <I2C_WaitOnFlagUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e0d3      	b.n	8004c3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <HAL_I2C_Master_Transmit+0x50>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e0cc      	b.n	8004c3a <HAL_I2C_Master_Transmit+0x1ea>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d007      	beq.n	8004ac6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f042 0201 	orr.w	r2, r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ad4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2221      	movs	r2, #33	; 0x21
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2210      	movs	r2, #16
 8004ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	893a      	ldrh	r2, [r7, #8]
 8004af6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4a50      	ldr	r2, [pc, #320]	; (8004c48 <HAL_I2C_Master_Transmit+0x1f8>)
 8004b06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b08:	8979      	ldrh	r1, [r7, #10]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	6a3a      	ldr	r2, [r7, #32]
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 f89c 	bl	8004c4c <I2C_MasterRequestWrite>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e08d      	b.n	8004c3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b1e:	2300      	movs	r3, #0
 8004b20:	613b      	str	r3, [r7, #16]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	613b      	str	r3, [r7, #16]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	613b      	str	r3, [r7, #16]
 8004b32:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004b34:	e066      	b.n	8004c04 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	6a39      	ldr	r1, [r7, #32]
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 f9de 	bl	8004efc <I2C_WaitOnTXEFlagUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00d      	beq.n	8004b62 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d107      	bne.n	8004b5e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e06b      	b.n	8004c3a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	781a      	ldrb	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d11b      	bne.n	8004bd8 <HAL_I2C_Master_Transmit+0x188>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d017      	beq.n	8004bd8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	781a      	ldrb	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	6a39      	ldr	r1, [r7, #32]
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 f9ce 	bl	8004f7e <I2C_WaitOnBTFFlagUntilTimeout>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00d      	beq.n	8004c04 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d107      	bne.n	8004c00 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bfe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e01a      	b.n	8004c3a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d194      	bne.n	8004b36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	e000      	b.n	8004c3a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004c38:	2302      	movs	r3, #2
  }
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	00100002 	.word	0x00100002
 8004c48:	ffff0000 	.word	0xffff0000

08004c4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af02      	add	r7, sp, #8
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	607a      	str	r2, [r7, #4]
 8004c56:	603b      	str	r3, [r7, #0]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d006      	beq.n	8004c76 <I2C_MasterRequestWrite+0x2a>
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d003      	beq.n	8004c76 <I2C_MasterRequestWrite+0x2a>
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c74:	d108      	bne.n	8004c88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	e00b      	b.n	8004ca0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8c:	2b12      	cmp	r3, #18
 8004c8e:	d107      	bne.n	8004ca0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 f84f 	bl	8004d50 <I2C_WaitOnFlagUntilTimeout>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00d      	beq.n	8004cd4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc6:	d103      	bne.n	8004cd0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e035      	b.n	8004d40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cdc:	d108      	bne.n	8004cf0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cde:	897b      	ldrh	r3, [r7, #10]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004cec:	611a      	str	r2, [r3, #16]
 8004cee:	e01b      	b.n	8004d28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004cf0:	897b      	ldrh	r3, [r7, #10]
 8004cf2:	11db      	asrs	r3, r3, #7
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	f003 0306 	and.w	r3, r3, #6
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	f063 030f 	orn	r3, r3, #15
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	490e      	ldr	r1, [pc, #56]	; (8004d48 <I2C_MasterRequestWrite+0xfc>)
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 f875 	bl	8004dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e010      	b.n	8004d40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d1e:	897b      	ldrh	r3, [r7, #10]
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	4907      	ldr	r1, [pc, #28]	; (8004d4c <I2C_MasterRequestWrite+0x100>)
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 f865 	bl	8004dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	00010008 	.word	0x00010008
 8004d4c:	00010002 	.word	0x00010002

08004d50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	603b      	str	r3, [r7, #0]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d60:	e025      	b.n	8004dae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d68:	d021      	beq.n	8004dae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6a:	f7ff f9db 	bl	8004124 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d302      	bcc.n	8004d80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d116      	bne.n	8004dae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	f043 0220 	orr.w	r2, r3, #32
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e023      	b.n	8004df6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	0c1b      	lsrs	r3, r3, #16
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d10d      	bne.n	8004dd4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	43da      	mvns	r2, r3
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	bf0c      	ite	eq
 8004dca:	2301      	moveq	r3, #1
 8004dcc:	2300      	movne	r3, #0
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	e00c      	b.n	8004dee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	43da      	mvns	r2, r3
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	4013      	ands	r3, r2
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	bf0c      	ite	eq
 8004de6:	2301      	moveq	r3, #1
 8004de8:	2300      	movne	r3, #0
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	461a      	mov	r2, r3
 8004dee:	79fb      	ldrb	r3, [r7, #7]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d0b6      	beq.n	8004d62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b084      	sub	sp, #16
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	60f8      	str	r0, [r7, #12]
 8004e06:	60b9      	str	r1, [r7, #8]
 8004e08:	607a      	str	r2, [r7, #4]
 8004e0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e0c:	e051      	b.n	8004eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e1c:	d123      	bne.n	8004e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	f043 0204 	orr.w	r2, r3, #4
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e046      	b.n	8004ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6c:	d021      	beq.n	8004eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e6e:	f7ff f959 	bl	8004124 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d302      	bcc.n	8004e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d116      	bne.n	8004eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	f043 0220 	orr.w	r2, r3, #32
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e020      	b.n	8004ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	0c1b      	lsrs	r3, r3, #16
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d10c      	bne.n	8004ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	43da      	mvns	r2, r3
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	bf14      	ite	ne
 8004ece:	2301      	movne	r3, #1
 8004ed0:	2300      	moveq	r3, #0
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	e00b      	b.n	8004eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	43da      	mvns	r2, r3
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	bf14      	ite	ne
 8004ee8:	2301      	movne	r3, #1
 8004eea:	2300      	moveq	r3, #0
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d18d      	bne.n	8004e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f08:	e02d      	b.n	8004f66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 f878 	bl	8005000 <I2C_IsAcknowledgeFailed>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e02d      	b.n	8004f76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f20:	d021      	beq.n	8004f66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f22:	f7ff f8ff 	bl	8004124 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d302      	bcc.n	8004f38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d116      	bne.n	8004f66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	f043 0220 	orr.w	r2, r3, #32
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e007      	b.n	8004f76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f70:	2b80      	cmp	r3, #128	; 0x80
 8004f72:	d1ca      	bne.n	8004f0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b084      	sub	sp, #16
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	60b9      	str	r1, [r7, #8]
 8004f88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f8a:	e02d      	b.n	8004fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 f837 	bl	8005000 <I2C_IsAcknowledgeFailed>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e02d      	b.n	8004ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa2:	d021      	beq.n	8004fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa4:	f7ff f8be 	bl	8004124 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d302      	bcc.n	8004fba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d116      	bne.n	8004fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd4:	f043 0220 	orr.w	r2, r3, #32
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e007      	b.n	8004ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d1ca      	bne.n	8004f8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005016:	d11b      	bne.n	8005050 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005020:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503c:	f043 0204 	orr.w	r2, r3, #4
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e000      	b.n	8005052 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
	...

08005060 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800506c:	4b09      	ldr	r3, [pc, #36]	; (8005094 <HAL_PWR_EnterSLEEPMode+0x34>)
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	4a08      	ldr	r2, [pc, #32]	; (8005094 <HAL_PWR_EnterSLEEPMode+0x34>)
 8005072:	f023 0304 	bic.w	r3, r3, #4
 8005076:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005078:	78fb      	ldrb	r3, [r7, #3]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d101      	bne.n	8005082 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800507e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8005080:	e002      	b.n	8005088 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8005082:	bf40      	sev
    __WFE();
 8005084:	bf20      	wfe
    __WFE();
 8005086:	bf20      	wfe
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	e000ed00 	.word	0xe000ed00

08005098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e0cc      	b.n	8005246 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050ac:	4b68      	ldr	r3, [pc, #416]	; (8005250 <HAL_RCC_ClockConfig+0x1b8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 030f 	and.w	r3, r3, #15
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d90c      	bls.n	80050d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ba:	4b65      	ldr	r3, [pc, #404]	; (8005250 <HAL_RCC_ClockConfig+0x1b8>)
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c2:	4b63      	ldr	r3, [pc, #396]	; (8005250 <HAL_RCC_ClockConfig+0x1b8>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d001      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e0b8      	b.n	8005246 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d020      	beq.n	8005122 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d005      	beq.n	80050f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050ec:	4b59      	ldr	r3, [pc, #356]	; (8005254 <HAL_RCC_ClockConfig+0x1bc>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	4a58      	ldr	r2, [pc, #352]	; (8005254 <HAL_RCC_ClockConfig+0x1bc>)
 80050f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0308 	and.w	r3, r3, #8
 8005100:	2b00      	cmp	r3, #0
 8005102:	d005      	beq.n	8005110 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005104:	4b53      	ldr	r3, [pc, #332]	; (8005254 <HAL_RCC_ClockConfig+0x1bc>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	4a52      	ldr	r2, [pc, #328]	; (8005254 <HAL_RCC_ClockConfig+0x1bc>)
 800510a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800510e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005110:	4b50      	ldr	r3, [pc, #320]	; (8005254 <HAL_RCC_ClockConfig+0x1bc>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	494d      	ldr	r1, [pc, #308]	; (8005254 <HAL_RCC_ClockConfig+0x1bc>)
 800511e:	4313      	orrs	r3, r2
 8005120:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d044      	beq.n	80051b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d107      	bne.n	8005146 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005136:	4b47      	ldr	r3, [pc, #284]	; (8005254 <HAL_RCC_ClockConfig+0x1bc>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d119      	bne.n	8005176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e07f      	b.n	8005246 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	2b02      	cmp	r3, #2
 800514c:	d003      	beq.n	8005156 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005152:	2b03      	cmp	r3, #3
 8005154:	d107      	bne.n	8005166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005156:	4b3f      	ldr	r3, [pc, #252]	; (8005254 <HAL_RCC_ClockConfig+0x1bc>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d109      	bne.n	8005176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e06f      	b.n	8005246 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005166:	4b3b      	ldr	r3, [pc, #236]	; (8005254 <HAL_RCC_ClockConfig+0x1bc>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e067      	b.n	8005246 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005176:	4b37      	ldr	r3, [pc, #220]	; (8005254 <HAL_RCC_ClockConfig+0x1bc>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f023 0203 	bic.w	r2, r3, #3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	4934      	ldr	r1, [pc, #208]	; (8005254 <HAL_RCC_ClockConfig+0x1bc>)
 8005184:	4313      	orrs	r3, r2
 8005186:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005188:	f7fe ffcc 	bl	8004124 <HAL_GetTick>
 800518c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800518e:	e00a      	b.n	80051a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005190:	f7fe ffc8 	bl	8004124 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	f241 3288 	movw	r2, #5000	; 0x1388
 800519e:	4293      	cmp	r3, r2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e04f      	b.n	8005246 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051a6:	4b2b      	ldr	r3, [pc, #172]	; (8005254 <HAL_RCC_ClockConfig+0x1bc>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f003 020c 	and.w	r2, r3, #12
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d1eb      	bne.n	8005190 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051b8:	4b25      	ldr	r3, [pc, #148]	; (8005250 <HAL_RCC_ClockConfig+0x1b8>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 030f 	and.w	r3, r3, #15
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d20c      	bcs.n	80051e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051c6:	4b22      	ldr	r3, [pc, #136]	; (8005250 <HAL_RCC_ClockConfig+0x1b8>)
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ce:	4b20      	ldr	r3, [pc, #128]	; (8005250 <HAL_RCC_ClockConfig+0x1b8>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d001      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e032      	b.n	8005246 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d008      	beq.n	80051fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051ec:	4b19      	ldr	r3, [pc, #100]	; (8005254 <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	4916      	ldr	r1, [pc, #88]	; (8005254 <HAL_RCC_ClockConfig+0x1bc>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0308 	and.w	r3, r3, #8
 8005206:	2b00      	cmp	r3, #0
 8005208:	d009      	beq.n	800521e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800520a:	4b12      	ldr	r3, [pc, #72]	; (8005254 <HAL_RCC_ClockConfig+0x1bc>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	490e      	ldr	r1, [pc, #56]	; (8005254 <HAL_RCC_ClockConfig+0x1bc>)
 800521a:	4313      	orrs	r3, r2
 800521c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800521e:	f000 f887 	bl	8005330 <HAL_RCC_GetSysClockFreq>
 8005222:	4602      	mov	r2, r0
 8005224:	4b0b      	ldr	r3, [pc, #44]	; (8005254 <HAL_RCC_ClockConfig+0x1bc>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	091b      	lsrs	r3, r3, #4
 800522a:	f003 030f 	and.w	r3, r3, #15
 800522e:	490a      	ldr	r1, [pc, #40]	; (8005258 <HAL_RCC_ClockConfig+0x1c0>)
 8005230:	5ccb      	ldrb	r3, [r1, r3]
 8005232:	fa22 f303 	lsr.w	r3, r2, r3
 8005236:	4a09      	ldr	r2, [pc, #36]	; (800525c <HAL_RCC_ClockConfig+0x1c4>)
 8005238:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800523a:	4b09      	ldr	r3, [pc, #36]	; (8005260 <HAL_RCC_ClockConfig+0x1c8>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4618      	mov	r0, r3
 8005240:	f7fe fd76 	bl	8003d30 <HAL_InitTick>

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	40023c00 	.word	0x40023c00
 8005254:	40023800 	.word	0x40023800
 8005258:	08010c98 	.word	0x08010c98
 800525c:	20000008 	.word	0x20000008
 8005260:	2000000c 	.word	0x2000000c

08005264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005264:	b480      	push	{r7}
 8005266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005268:	4b03      	ldr	r3, [pc, #12]	; (8005278 <HAL_RCC_GetHCLKFreq+0x14>)
 800526a:	681b      	ldr	r3, [r3, #0]
}
 800526c:	4618      	mov	r0, r3
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	20000008 	.word	0x20000008

0800527c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005280:	f7ff fff0 	bl	8005264 <HAL_RCC_GetHCLKFreq>
 8005284:	4602      	mov	r2, r0
 8005286:	4b05      	ldr	r3, [pc, #20]	; (800529c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	0a9b      	lsrs	r3, r3, #10
 800528c:	f003 0307 	and.w	r3, r3, #7
 8005290:	4903      	ldr	r1, [pc, #12]	; (80052a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005292:	5ccb      	ldrb	r3, [r1, r3]
 8005294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005298:	4618      	mov	r0, r3
 800529a:	bd80      	pop	{r7, pc}
 800529c:	40023800 	.word	0x40023800
 80052a0:	08010ca8 	.word	0x08010ca8

080052a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052a8:	f7ff ffdc 	bl	8005264 <HAL_RCC_GetHCLKFreq>
 80052ac:	4602      	mov	r2, r0
 80052ae:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	0b5b      	lsrs	r3, r3, #13
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	4903      	ldr	r1, [pc, #12]	; (80052c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052ba:	5ccb      	ldrb	r3, [r1, r3]
 80052bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	40023800 	.word	0x40023800
 80052c8:	08010ca8 	.word	0x08010ca8

080052cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	220f      	movs	r2, #15
 80052da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80052dc:	4b12      	ldr	r3, [pc, #72]	; (8005328 <HAL_RCC_GetClockConfig+0x5c>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f003 0203 	and.w	r2, r3, #3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80052e8:	4b0f      	ldr	r3, [pc, #60]	; (8005328 <HAL_RCC_GetClockConfig+0x5c>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80052f4:	4b0c      	ldr	r3, [pc, #48]	; (8005328 <HAL_RCC_GetClockConfig+0x5c>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005300:	4b09      	ldr	r3, [pc, #36]	; (8005328 <HAL_RCC_GetClockConfig+0x5c>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	08db      	lsrs	r3, r3, #3
 8005306:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800530e:	4b07      	ldr	r3, [pc, #28]	; (800532c <HAL_RCC_GetClockConfig+0x60>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 020f 	and.w	r2, r3, #15
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	601a      	str	r2, [r3, #0]
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40023800 	.word	0x40023800
 800532c:	40023c00 	.word	0x40023c00

08005330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005334:	b0a6      	sub	sp, #152	; 0x98
 8005336:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800533e:	2300      	movs	r3, #0
 8005340:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800534a:	2300      	movs	r3, #0
 800534c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005356:	4bc8      	ldr	r3, [pc, #800]	; (8005678 <HAL_RCC_GetSysClockFreq+0x348>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f003 030c 	and.w	r3, r3, #12
 800535e:	2b0c      	cmp	r3, #12
 8005360:	f200 817e 	bhi.w	8005660 <HAL_RCC_GetSysClockFreq+0x330>
 8005364:	a201      	add	r2, pc, #4	; (adr r2, 800536c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536a:	bf00      	nop
 800536c:	080053a1 	.word	0x080053a1
 8005370:	08005661 	.word	0x08005661
 8005374:	08005661 	.word	0x08005661
 8005378:	08005661 	.word	0x08005661
 800537c:	080053a9 	.word	0x080053a9
 8005380:	08005661 	.word	0x08005661
 8005384:	08005661 	.word	0x08005661
 8005388:	08005661 	.word	0x08005661
 800538c:	080053b1 	.word	0x080053b1
 8005390:	08005661 	.word	0x08005661
 8005394:	08005661 	.word	0x08005661
 8005398:	08005661 	.word	0x08005661
 800539c:	0800551b 	.word	0x0800551b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053a0:	4bb6      	ldr	r3, [pc, #728]	; (800567c <HAL_RCC_GetSysClockFreq+0x34c>)
 80053a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80053a6:	e15f      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053a8:	4bb5      	ldr	r3, [pc, #724]	; (8005680 <HAL_RCC_GetSysClockFreq+0x350>)
 80053aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80053ae:	e15b      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053b0:	4bb1      	ldr	r3, [pc, #708]	; (8005678 <HAL_RCC_GetSysClockFreq+0x348>)
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053bc:	4bae      	ldr	r3, [pc, #696]	; (8005678 <HAL_RCC_GetSysClockFreq+0x348>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d031      	beq.n	800542c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053c8:	4bab      	ldr	r3, [pc, #684]	; (8005678 <HAL_RCC_GetSysClockFreq+0x348>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	099b      	lsrs	r3, r3, #6
 80053ce:	2200      	movs	r2, #0
 80053d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80053d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80053d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053da:	663b      	str	r3, [r7, #96]	; 0x60
 80053dc:	2300      	movs	r3, #0
 80053de:	667b      	str	r3, [r7, #100]	; 0x64
 80053e0:	4ba7      	ldr	r3, [pc, #668]	; (8005680 <HAL_RCC_GetSysClockFreq+0x350>)
 80053e2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80053e6:	462a      	mov	r2, r5
 80053e8:	fb03 f202 	mul.w	r2, r3, r2
 80053ec:	2300      	movs	r3, #0
 80053ee:	4621      	mov	r1, r4
 80053f0:	fb01 f303 	mul.w	r3, r1, r3
 80053f4:	4413      	add	r3, r2
 80053f6:	4aa2      	ldr	r2, [pc, #648]	; (8005680 <HAL_RCC_GetSysClockFreq+0x350>)
 80053f8:	4621      	mov	r1, r4
 80053fa:	fba1 1202 	umull	r1, r2, r1, r2
 80053fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005400:	460a      	mov	r2, r1
 8005402:	67ba      	str	r2, [r7, #120]	; 0x78
 8005404:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005406:	4413      	add	r3, r2
 8005408:	67fb      	str	r3, [r7, #124]	; 0x7c
 800540a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800540e:	2200      	movs	r2, #0
 8005410:	65bb      	str	r3, [r7, #88]	; 0x58
 8005412:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005414:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005418:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800541c:	f7fb fca4 	bl	8000d68 <__aeabi_uldivmod>
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	4613      	mov	r3, r2
 8005426:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800542a:	e064      	b.n	80054f6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800542c:	4b92      	ldr	r3, [pc, #584]	; (8005678 <HAL_RCC_GetSysClockFreq+0x348>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	099b      	lsrs	r3, r3, #6
 8005432:	2200      	movs	r2, #0
 8005434:	653b      	str	r3, [r7, #80]	; 0x50
 8005436:	657a      	str	r2, [r7, #84]	; 0x54
 8005438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800543a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800543e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005440:	2300      	movs	r3, #0
 8005442:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005444:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8005448:	4622      	mov	r2, r4
 800544a:	462b      	mov	r3, r5
 800544c:	f04f 0000 	mov.w	r0, #0
 8005450:	f04f 0100 	mov.w	r1, #0
 8005454:	0159      	lsls	r1, r3, #5
 8005456:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800545a:	0150      	lsls	r0, r2, #5
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	4621      	mov	r1, r4
 8005462:	1a51      	subs	r1, r2, r1
 8005464:	6139      	str	r1, [r7, #16]
 8005466:	4629      	mov	r1, r5
 8005468:	eb63 0301 	sbc.w	r3, r3, r1
 800546c:	617b      	str	r3, [r7, #20]
 800546e:	f04f 0200 	mov.w	r2, #0
 8005472:	f04f 0300 	mov.w	r3, #0
 8005476:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800547a:	4659      	mov	r1, fp
 800547c:	018b      	lsls	r3, r1, #6
 800547e:	4651      	mov	r1, sl
 8005480:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005484:	4651      	mov	r1, sl
 8005486:	018a      	lsls	r2, r1, #6
 8005488:	4651      	mov	r1, sl
 800548a:	ebb2 0801 	subs.w	r8, r2, r1
 800548e:	4659      	mov	r1, fp
 8005490:	eb63 0901 	sbc.w	r9, r3, r1
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	f04f 0300 	mov.w	r3, #0
 800549c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054a8:	4690      	mov	r8, r2
 80054aa:	4699      	mov	r9, r3
 80054ac:	4623      	mov	r3, r4
 80054ae:	eb18 0303 	adds.w	r3, r8, r3
 80054b2:	60bb      	str	r3, [r7, #8]
 80054b4:	462b      	mov	r3, r5
 80054b6:	eb49 0303 	adc.w	r3, r9, r3
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	f04f 0300 	mov.w	r3, #0
 80054c4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054c8:	4629      	mov	r1, r5
 80054ca:	028b      	lsls	r3, r1, #10
 80054cc:	4621      	mov	r1, r4
 80054ce:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054d2:	4621      	mov	r1, r4
 80054d4:	028a      	lsls	r2, r1, #10
 80054d6:	4610      	mov	r0, r2
 80054d8:	4619      	mov	r1, r3
 80054da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054de:	2200      	movs	r2, #0
 80054e0:	643b      	str	r3, [r7, #64]	; 0x40
 80054e2:	647a      	str	r2, [r7, #68]	; 0x44
 80054e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054e8:	f7fb fc3e 	bl	8000d68 <__aeabi_uldivmod>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4613      	mov	r3, r2
 80054f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054f6:	4b60      	ldr	r3, [pc, #384]	; (8005678 <HAL_RCC_GetSysClockFreq+0x348>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	0c1b      	lsrs	r3, r3, #16
 80054fc:	f003 0303 	and.w	r3, r3, #3
 8005500:	3301      	adds	r3, #1
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8005508:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800550c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005510:	fbb2 f3f3 	udiv	r3, r2, r3
 8005514:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005518:	e0a6      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800551a:	4b57      	ldr	r3, [pc, #348]	; (8005678 <HAL_RCC_GetSysClockFreq+0x348>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005522:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005526:	4b54      	ldr	r3, [pc, #336]	; (8005678 <HAL_RCC_GetSysClockFreq+0x348>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d02a      	beq.n	8005588 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005532:	4b51      	ldr	r3, [pc, #324]	; (8005678 <HAL_RCC_GetSysClockFreq+0x348>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	099b      	lsrs	r3, r3, #6
 8005538:	2200      	movs	r2, #0
 800553a:	63bb      	str	r3, [r7, #56]	; 0x38
 800553c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800553e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005540:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005544:	2100      	movs	r1, #0
 8005546:	4b4e      	ldr	r3, [pc, #312]	; (8005680 <HAL_RCC_GetSysClockFreq+0x350>)
 8005548:	fb03 f201 	mul.w	r2, r3, r1
 800554c:	2300      	movs	r3, #0
 800554e:	fb00 f303 	mul.w	r3, r0, r3
 8005552:	4413      	add	r3, r2
 8005554:	4a4a      	ldr	r2, [pc, #296]	; (8005680 <HAL_RCC_GetSysClockFreq+0x350>)
 8005556:	fba0 1202 	umull	r1, r2, r0, r2
 800555a:	677a      	str	r2, [r7, #116]	; 0x74
 800555c:	460a      	mov	r2, r1
 800555e:	673a      	str	r2, [r7, #112]	; 0x70
 8005560:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005562:	4413      	add	r3, r2
 8005564:	677b      	str	r3, [r7, #116]	; 0x74
 8005566:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800556a:	2200      	movs	r2, #0
 800556c:	633b      	str	r3, [r7, #48]	; 0x30
 800556e:	637a      	str	r2, [r7, #52]	; 0x34
 8005570:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005574:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005578:	f7fb fbf6 	bl	8000d68 <__aeabi_uldivmod>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4613      	mov	r3, r2
 8005582:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005586:	e05b      	b.n	8005640 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005588:	4b3b      	ldr	r3, [pc, #236]	; (8005678 <HAL_RCC_GetSysClockFreq+0x348>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	099b      	lsrs	r3, r3, #6
 800558e:	2200      	movs	r2, #0
 8005590:	62bb      	str	r3, [r7, #40]	; 0x28
 8005592:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800559a:	623b      	str	r3, [r7, #32]
 800559c:	2300      	movs	r3, #0
 800559e:	627b      	str	r3, [r7, #36]	; 0x24
 80055a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055a4:	4642      	mov	r2, r8
 80055a6:	464b      	mov	r3, r9
 80055a8:	f04f 0000 	mov.w	r0, #0
 80055ac:	f04f 0100 	mov.w	r1, #0
 80055b0:	0159      	lsls	r1, r3, #5
 80055b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055b6:	0150      	lsls	r0, r2, #5
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	4641      	mov	r1, r8
 80055be:	ebb2 0a01 	subs.w	sl, r2, r1
 80055c2:	4649      	mov	r1, r9
 80055c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80055c8:	f04f 0200 	mov.w	r2, #0
 80055cc:	f04f 0300 	mov.w	r3, #0
 80055d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055dc:	ebb2 040a 	subs.w	r4, r2, sl
 80055e0:	eb63 050b 	sbc.w	r5, r3, fp
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	00eb      	lsls	r3, r5, #3
 80055ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055f2:	00e2      	lsls	r2, r4, #3
 80055f4:	4614      	mov	r4, r2
 80055f6:	461d      	mov	r5, r3
 80055f8:	4643      	mov	r3, r8
 80055fa:	18e3      	adds	r3, r4, r3
 80055fc:	603b      	str	r3, [r7, #0]
 80055fe:	464b      	mov	r3, r9
 8005600:	eb45 0303 	adc.w	r3, r5, r3
 8005604:	607b      	str	r3, [r7, #4]
 8005606:	f04f 0200 	mov.w	r2, #0
 800560a:	f04f 0300 	mov.w	r3, #0
 800560e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005612:	4629      	mov	r1, r5
 8005614:	028b      	lsls	r3, r1, #10
 8005616:	4621      	mov	r1, r4
 8005618:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800561c:	4621      	mov	r1, r4
 800561e:	028a      	lsls	r2, r1, #10
 8005620:	4610      	mov	r0, r2
 8005622:	4619      	mov	r1, r3
 8005624:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005628:	2200      	movs	r2, #0
 800562a:	61bb      	str	r3, [r7, #24]
 800562c:	61fa      	str	r2, [r7, #28]
 800562e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005632:	f7fb fb99 	bl	8000d68 <__aeabi_uldivmod>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	4613      	mov	r3, r2
 800563c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005640:	4b0d      	ldr	r3, [pc, #52]	; (8005678 <HAL_RCC_GetSysClockFreq+0x348>)
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	0f1b      	lsrs	r3, r3, #28
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800564e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005652:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005656:	fbb2 f3f3 	udiv	r3, r2, r3
 800565a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800565e:	e003      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005660:	4b06      	ldr	r3, [pc, #24]	; (800567c <HAL_RCC_GetSysClockFreq+0x34c>)
 8005662:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005666:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005668:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 800566c:	4618      	mov	r0, r3
 800566e:	3798      	adds	r7, #152	; 0x98
 8005670:	46bd      	mov	sp, r7
 8005672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005676:	bf00      	nop
 8005678:	40023800 	.word	0x40023800
 800567c:	00f42400 	.word	0x00f42400
 8005680:	017d7840 	.word	0x017d7840

08005684 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e28d      	b.n	8005bb2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 8083 	beq.w	80057aa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80056a4:	4b94      	ldr	r3, [pc, #592]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f003 030c 	and.w	r3, r3, #12
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d019      	beq.n	80056e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80056b0:	4b91      	ldr	r3, [pc, #580]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d106      	bne.n	80056ca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80056bc:	4b8e      	ldr	r3, [pc, #568]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056c8:	d00c      	beq.n	80056e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056ca:	4b8b      	ldr	r3, [pc, #556]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80056d2:	2b0c      	cmp	r3, #12
 80056d4:	d112      	bne.n	80056fc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056d6:	4b88      	ldr	r3, [pc, #544]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056e2:	d10b      	bne.n	80056fc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056e4:	4b84      	ldr	r3, [pc, #528]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d05b      	beq.n	80057a8 <HAL_RCC_OscConfig+0x124>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d157      	bne.n	80057a8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e25a      	b.n	8005bb2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005704:	d106      	bne.n	8005714 <HAL_RCC_OscConfig+0x90>
 8005706:	4b7c      	ldr	r3, [pc, #496]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a7b      	ldr	r2, [pc, #492]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 800570c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	e01d      	b.n	8005750 <HAL_RCC_OscConfig+0xcc>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800571c:	d10c      	bne.n	8005738 <HAL_RCC_OscConfig+0xb4>
 800571e:	4b76      	ldr	r3, [pc, #472]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a75      	ldr	r2, [pc, #468]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 8005724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005728:	6013      	str	r3, [r2, #0]
 800572a:	4b73      	ldr	r3, [pc, #460]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a72      	ldr	r2, [pc, #456]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 8005730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	e00b      	b.n	8005750 <HAL_RCC_OscConfig+0xcc>
 8005738:	4b6f      	ldr	r3, [pc, #444]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a6e      	ldr	r2, [pc, #440]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 800573e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	4b6c      	ldr	r3, [pc, #432]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a6b      	ldr	r2, [pc, #428]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 800574a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800574e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d013      	beq.n	8005780 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005758:	f7fe fce4 	bl	8004124 <HAL_GetTick>
 800575c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800575e:	e008      	b.n	8005772 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005760:	f7fe fce0 	bl	8004124 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b64      	cmp	r3, #100	; 0x64
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e21f      	b.n	8005bb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005772:	4b61      	ldr	r3, [pc, #388]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0f0      	beq.n	8005760 <HAL_RCC_OscConfig+0xdc>
 800577e:	e014      	b.n	80057aa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005780:	f7fe fcd0 	bl	8004124 <HAL_GetTick>
 8005784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005786:	e008      	b.n	800579a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005788:	f7fe fccc 	bl	8004124 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b64      	cmp	r3, #100	; 0x64
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e20b      	b.n	8005bb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800579a:	4b57      	ldr	r3, [pc, #348]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1f0      	bne.n	8005788 <HAL_RCC_OscConfig+0x104>
 80057a6:	e000      	b.n	80057aa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d06f      	beq.n	8005896 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80057b6:	4b50      	ldr	r3, [pc, #320]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f003 030c 	and.w	r3, r3, #12
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d017      	beq.n	80057f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80057c2:	4b4d      	ldr	r3, [pc, #308]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d105      	bne.n	80057da <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80057ce:	4b4a      	ldr	r3, [pc, #296]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00b      	beq.n	80057f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057da:	4b47      	ldr	r3, [pc, #284]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80057e2:	2b0c      	cmp	r3, #12
 80057e4:	d11c      	bne.n	8005820 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057e6:	4b44      	ldr	r3, [pc, #272]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d116      	bne.n	8005820 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057f2:	4b41      	ldr	r3, [pc, #260]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d005      	beq.n	800580a <HAL_RCC_OscConfig+0x186>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d001      	beq.n	800580a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e1d3      	b.n	8005bb2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800580a:	4b3b      	ldr	r3, [pc, #236]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	4937      	ldr	r1, [pc, #220]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 800581a:	4313      	orrs	r3, r2
 800581c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800581e:	e03a      	b.n	8005896 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d020      	beq.n	800586a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005828:	4b34      	ldr	r3, [pc, #208]	; (80058fc <HAL_RCC_OscConfig+0x278>)
 800582a:	2201      	movs	r2, #1
 800582c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800582e:	f7fe fc79 	bl	8004124 <HAL_GetTick>
 8005832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005834:	e008      	b.n	8005848 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005836:	f7fe fc75 	bl	8004124 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d901      	bls.n	8005848 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e1b4      	b.n	8005bb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005848:	4b2b      	ldr	r3, [pc, #172]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0f0      	beq.n	8005836 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005854:	4b28      	ldr	r3, [pc, #160]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	4925      	ldr	r1, [pc, #148]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 8005864:	4313      	orrs	r3, r2
 8005866:	600b      	str	r3, [r1, #0]
 8005868:	e015      	b.n	8005896 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800586a:	4b24      	ldr	r3, [pc, #144]	; (80058fc <HAL_RCC_OscConfig+0x278>)
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005870:	f7fe fc58 	bl	8004124 <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005876:	e008      	b.n	800588a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005878:	f7fe fc54 	bl	8004124 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b02      	cmp	r3, #2
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e193      	b.n	8005bb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800588a:	4b1b      	ldr	r3, [pc, #108]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1f0      	bne.n	8005878 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d036      	beq.n	8005910 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d016      	beq.n	80058d8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058aa:	4b15      	ldr	r3, [pc, #84]	; (8005900 <HAL_RCC_OscConfig+0x27c>)
 80058ac:	2201      	movs	r2, #1
 80058ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b0:	f7fe fc38 	bl	8004124 <HAL_GetTick>
 80058b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058b6:	e008      	b.n	80058ca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058b8:	f7fe fc34 	bl	8004124 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e173      	b.n	8005bb2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ca:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <HAL_RCC_OscConfig+0x274>)
 80058cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d0f0      	beq.n	80058b8 <HAL_RCC_OscConfig+0x234>
 80058d6:	e01b      	b.n	8005910 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058d8:	4b09      	ldr	r3, [pc, #36]	; (8005900 <HAL_RCC_OscConfig+0x27c>)
 80058da:	2200      	movs	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058de:	f7fe fc21 	bl	8004124 <HAL_GetTick>
 80058e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058e4:	e00e      	b.n	8005904 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058e6:	f7fe fc1d 	bl	8004124 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d907      	bls.n	8005904 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e15c      	b.n	8005bb2 <HAL_RCC_OscConfig+0x52e>
 80058f8:	40023800 	.word	0x40023800
 80058fc:	42470000 	.word	0x42470000
 8005900:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005904:	4b8a      	ldr	r3, [pc, #552]	; (8005b30 <HAL_RCC_OscConfig+0x4ac>)
 8005906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1ea      	bne.n	80058e6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 8097 	beq.w	8005a4c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800591e:	2300      	movs	r3, #0
 8005920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005922:	4b83      	ldr	r3, [pc, #524]	; (8005b30 <HAL_RCC_OscConfig+0x4ac>)
 8005924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10f      	bne.n	800594e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800592e:	2300      	movs	r3, #0
 8005930:	60bb      	str	r3, [r7, #8]
 8005932:	4b7f      	ldr	r3, [pc, #508]	; (8005b30 <HAL_RCC_OscConfig+0x4ac>)
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	4a7e      	ldr	r2, [pc, #504]	; (8005b30 <HAL_RCC_OscConfig+0x4ac>)
 8005938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800593c:	6413      	str	r3, [r2, #64]	; 0x40
 800593e:	4b7c      	ldr	r3, [pc, #496]	; (8005b30 <HAL_RCC_OscConfig+0x4ac>)
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005946:	60bb      	str	r3, [r7, #8]
 8005948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800594a:	2301      	movs	r3, #1
 800594c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800594e:	4b79      	ldr	r3, [pc, #484]	; (8005b34 <HAL_RCC_OscConfig+0x4b0>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005956:	2b00      	cmp	r3, #0
 8005958:	d118      	bne.n	800598c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800595a:	4b76      	ldr	r3, [pc, #472]	; (8005b34 <HAL_RCC_OscConfig+0x4b0>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a75      	ldr	r2, [pc, #468]	; (8005b34 <HAL_RCC_OscConfig+0x4b0>)
 8005960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005966:	f7fe fbdd 	bl	8004124 <HAL_GetTick>
 800596a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800596c:	e008      	b.n	8005980 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800596e:	f7fe fbd9 	bl	8004124 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d901      	bls.n	8005980 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e118      	b.n	8005bb2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005980:	4b6c      	ldr	r3, [pc, #432]	; (8005b34 <HAL_RCC_OscConfig+0x4b0>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0f0      	beq.n	800596e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d106      	bne.n	80059a2 <HAL_RCC_OscConfig+0x31e>
 8005994:	4b66      	ldr	r3, [pc, #408]	; (8005b30 <HAL_RCC_OscConfig+0x4ac>)
 8005996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005998:	4a65      	ldr	r2, [pc, #404]	; (8005b30 <HAL_RCC_OscConfig+0x4ac>)
 800599a:	f043 0301 	orr.w	r3, r3, #1
 800599e:	6713      	str	r3, [r2, #112]	; 0x70
 80059a0:	e01c      	b.n	80059dc <HAL_RCC_OscConfig+0x358>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	2b05      	cmp	r3, #5
 80059a8:	d10c      	bne.n	80059c4 <HAL_RCC_OscConfig+0x340>
 80059aa:	4b61      	ldr	r3, [pc, #388]	; (8005b30 <HAL_RCC_OscConfig+0x4ac>)
 80059ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ae:	4a60      	ldr	r2, [pc, #384]	; (8005b30 <HAL_RCC_OscConfig+0x4ac>)
 80059b0:	f043 0304 	orr.w	r3, r3, #4
 80059b4:	6713      	str	r3, [r2, #112]	; 0x70
 80059b6:	4b5e      	ldr	r3, [pc, #376]	; (8005b30 <HAL_RCC_OscConfig+0x4ac>)
 80059b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ba:	4a5d      	ldr	r2, [pc, #372]	; (8005b30 <HAL_RCC_OscConfig+0x4ac>)
 80059bc:	f043 0301 	orr.w	r3, r3, #1
 80059c0:	6713      	str	r3, [r2, #112]	; 0x70
 80059c2:	e00b      	b.n	80059dc <HAL_RCC_OscConfig+0x358>
 80059c4:	4b5a      	ldr	r3, [pc, #360]	; (8005b30 <HAL_RCC_OscConfig+0x4ac>)
 80059c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c8:	4a59      	ldr	r2, [pc, #356]	; (8005b30 <HAL_RCC_OscConfig+0x4ac>)
 80059ca:	f023 0301 	bic.w	r3, r3, #1
 80059ce:	6713      	str	r3, [r2, #112]	; 0x70
 80059d0:	4b57      	ldr	r3, [pc, #348]	; (8005b30 <HAL_RCC_OscConfig+0x4ac>)
 80059d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d4:	4a56      	ldr	r2, [pc, #344]	; (8005b30 <HAL_RCC_OscConfig+0x4ac>)
 80059d6:	f023 0304 	bic.w	r3, r3, #4
 80059da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d015      	beq.n	8005a10 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e4:	f7fe fb9e 	bl	8004124 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ea:	e00a      	b.n	8005a02 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059ec:	f7fe fb9a 	bl	8004124 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e0d7      	b.n	8005bb2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a02:	4b4b      	ldr	r3, [pc, #300]	; (8005b30 <HAL_RCC_OscConfig+0x4ac>)
 8005a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d0ee      	beq.n	80059ec <HAL_RCC_OscConfig+0x368>
 8005a0e:	e014      	b.n	8005a3a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a10:	f7fe fb88 	bl	8004124 <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a16:	e00a      	b.n	8005a2e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a18:	f7fe fb84 	bl	8004124 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e0c1      	b.n	8005bb2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a2e:	4b40      	ldr	r3, [pc, #256]	; (8005b30 <HAL_RCC_OscConfig+0x4ac>)
 8005a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1ee      	bne.n	8005a18 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a3a:	7dfb      	ldrb	r3, [r7, #23]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d105      	bne.n	8005a4c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a40:	4b3b      	ldr	r3, [pc, #236]	; (8005b30 <HAL_RCC_OscConfig+0x4ac>)
 8005a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a44:	4a3a      	ldr	r2, [pc, #232]	; (8005b30 <HAL_RCC_OscConfig+0x4ac>)
 8005a46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 80ad 	beq.w	8005bb0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a56:	4b36      	ldr	r3, [pc, #216]	; (8005b30 <HAL_RCC_OscConfig+0x4ac>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 030c 	and.w	r3, r3, #12
 8005a5e:	2b08      	cmp	r3, #8
 8005a60:	d060      	beq.n	8005b24 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d145      	bne.n	8005af6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a6a:	4b33      	ldr	r3, [pc, #204]	; (8005b38 <HAL_RCC_OscConfig+0x4b4>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a70:	f7fe fb58 	bl	8004124 <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a78:	f7fe fb54 	bl	8004124 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e093      	b.n	8005bb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a8a:	4b29      	ldr	r3, [pc, #164]	; (8005b30 <HAL_RCC_OscConfig+0x4ac>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1f0      	bne.n	8005a78 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	69da      	ldr	r2, [r3, #28]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	019b      	lsls	r3, r3, #6
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aac:	085b      	lsrs	r3, r3, #1
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	041b      	lsls	r3, r3, #16
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	061b      	lsls	r3, r3, #24
 8005aba:	431a      	orrs	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac0:	071b      	lsls	r3, r3, #28
 8005ac2:	491b      	ldr	r1, [pc, #108]	; (8005b30 <HAL_RCC_OscConfig+0x4ac>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ac8:	4b1b      	ldr	r3, [pc, #108]	; (8005b38 <HAL_RCC_OscConfig+0x4b4>)
 8005aca:	2201      	movs	r2, #1
 8005acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ace:	f7fe fb29 	bl	8004124 <HAL_GetTick>
 8005ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ad4:	e008      	b.n	8005ae8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ad6:	f7fe fb25 	bl	8004124 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e064      	b.n	8005bb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ae8:	4b11      	ldr	r3, [pc, #68]	; (8005b30 <HAL_RCC_OscConfig+0x4ac>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0f0      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x452>
 8005af4:	e05c      	b.n	8005bb0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af6:	4b10      	ldr	r3, [pc, #64]	; (8005b38 <HAL_RCC_OscConfig+0x4b4>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005afc:	f7fe fb12 	bl	8004124 <HAL_GetTick>
 8005b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b02:	e008      	b.n	8005b16 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b04:	f7fe fb0e 	bl	8004124 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e04d      	b.n	8005bb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b16:	4b06      	ldr	r3, [pc, #24]	; (8005b30 <HAL_RCC_OscConfig+0x4ac>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1f0      	bne.n	8005b04 <HAL_RCC_OscConfig+0x480>
 8005b22:	e045      	b.n	8005bb0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d107      	bne.n	8005b3c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e040      	b.n	8005bb2 <HAL_RCC_OscConfig+0x52e>
 8005b30:	40023800 	.word	0x40023800
 8005b34:	40007000 	.word	0x40007000
 8005b38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b3c:	4b1f      	ldr	r3, [pc, #124]	; (8005bbc <HAL_RCC_OscConfig+0x538>)
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d030      	beq.n	8005bac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d129      	bne.n	8005bac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d122      	bne.n	8005bac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d119      	bne.n	8005bac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b82:	085b      	lsrs	r3, r3, #1
 8005b84:	3b01      	subs	r3, #1
 8005b86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d10f      	bne.n	8005bac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d107      	bne.n	8005bac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d001      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e000      	b.n	8005bb2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	40023800 	.word	0x40023800

08005bc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e041      	b.n	8005c56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d106      	bne.n	8005bec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7fd fe76 	bl	80038d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3304      	adds	r3, #4
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	4610      	mov	r0, r2
 8005c00:	f000 fe22 	bl	8006848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
	...

08005c60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d001      	beq.n	8005c78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e04e      	b.n	8005d16 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0201 	orr.w	r2, r2, #1
 8005c8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a23      	ldr	r2, [pc, #140]	; (8005d24 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d022      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca2:	d01d      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a1f      	ldr	r2, [pc, #124]	; (8005d28 <HAL_TIM_Base_Start_IT+0xc8>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d018      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a1e      	ldr	r2, [pc, #120]	; (8005d2c <HAL_TIM_Base_Start_IT+0xcc>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d013      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a1c      	ldr	r2, [pc, #112]	; (8005d30 <HAL_TIM_Base_Start_IT+0xd0>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00e      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a1b      	ldr	r2, [pc, #108]	; (8005d34 <HAL_TIM_Base_Start_IT+0xd4>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d009      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a19      	ldr	r2, [pc, #100]	; (8005d38 <HAL_TIM_Base_Start_IT+0xd8>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d004      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a18      	ldr	r2, [pc, #96]	; (8005d3c <HAL_TIM_Base_Start_IT+0xdc>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d111      	bne.n	8005d04 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b06      	cmp	r3, #6
 8005cf0:	d010      	beq.n	8005d14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f042 0201 	orr.w	r2, r2, #1
 8005d00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d02:	e007      	b.n	8005d14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0201 	orr.w	r2, r2, #1
 8005d12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	40010000 	.word	0x40010000
 8005d28:	40000400 	.word	0x40000400
 8005d2c:	40000800 	.word	0x40000800
 8005d30:	40000c00 	.word	0x40000c00
 8005d34:	40010400 	.word	0x40010400
 8005d38:	40014000 	.word	0x40014000
 8005d3c:	40001800 	.word	0x40001800

08005d40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e041      	b.n	8005dd6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d106      	bne.n	8005d6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fd fd7e 	bl	8003868 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4610      	mov	r0, r2
 8005d80:	f000 fd62 	bl	8006848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
	...

08005de0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d109      	bne.n	8005e04 <HAL_TIM_PWM_Start+0x24>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	bf14      	ite	ne
 8005dfc:	2301      	movne	r3, #1
 8005dfe:	2300      	moveq	r3, #0
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	e022      	b.n	8005e4a <HAL_TIM_PWM_Start+0x6a>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	d109      	bne.n	8005e1e <HAL_TIM_PWM_Start+0x3e>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	bf14      	ite	ne
 8005e16:	2301      	movne	r3, #1
 8005e18:	2300      	moveq	r3, #0
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	e015      	b.n	8005e4a <HAL_TIM_PWM_Start+0x6a>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d109      	bne.n	8005e38 <HAL_TIM_PWM_Start+0x58>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	bf14      	ite	ne
 8005e30:	2301      	movne	r3, #1
 8005e32:	2300      	moveq	r3, #0
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	e008      	b.n	8005e4a <HAL_TIM_PWM_Start+0x6a>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	bf14      	ite	ne
 8005e44:	2301      	movne	r3, #1
 8005e46:	2300      	moveq	r3, #0
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e07c      	b.n	8005f4c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d104      	bne.n	8005e62 <HAL_TIM_PWM_Start+0x82>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e60:	e013      	b.n	8005e8a <HAL_TIM_PWM_Start+0xaa>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b04      	cmp	r3, #4
 8005e66:	d104      	bne.n	8005e72 <HAL_TIM_PWM_Start+0x92>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e70:	e00b      	b.n	8005e8a <HAL_TIM_PWM_Start+0xaa>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d104      	bne.n	8005e82 <HAL_TIM_PWM_Start+0xa2>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e80:	e003      	b.n	8005e8a <HAL_TIM_PWM_Start+0xaa>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2202      	movs	r2, #2
 8005e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	6839      	ldr	r1, [r7, #0]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f001 f852 	bl	8006f3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a2d      	ldr	r2, [pc, #180]	; (8005f54 <HAL_TIM_PWM_Start+0x174>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d004      	beq.n	8005eac <HAL_TIM_PWM_Start+0xcc>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a2c      	ldr	r2, [pc, #176]	; (8005f58 <HAL_TIM_PWM_Start+0x178>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d101      	bne.n	8005eb0 <HAL_TIM_PWM_Start+0xd0>
 8005eac:	2301      	movs	r3, #1
 8005eae:	e000      	b.n	8005eb2 <HAL_TIM_PWM_Start+0xd2>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d007      	beq.n	8005ec6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ec4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a22      	ldr	r2, [pc, #136]	; (8005f54 <HAL_TIM_PWM_Start+0x174>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d022      	beq.n	8005f16 <HAL_TIM_PWM_Start+0x136>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed8:	d01d      	beq.n	8005f16 <HAL_TIM_PWM_Start+0x136>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a1f      	ldr	r2, [pc, #124]	; (8005f5c <HAL_TIM_PWM_Start+0x17c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d018      	beq.n	8005f16 <HAL_TIM_PWM_Start+0x136>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a1d      	ldr	r2, [pc, #116]	; (8005f60 <HAL_TIM_PWM_Start+0x180>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d013      	beq.n	8005f16 <HAL_TIM_PWM_Start+0x136>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a1c      	ldr	r2, [pc, #112]	; (8005f64 <HAL_TIM_PWM_Start+0x184>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d00e      	beq.n	8005f16 <HAL_TIM_PWM_Start+0x136>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a16      	ldr	r2, [pc, #88]	; (8005f58 <HAL_TIM_PWM_Start+0x178>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d009      	beq.n	8005f16 <HAL_TIM_PWM_Start+0x136>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a18      	ldr	r2, [pc, #96]	; (8005f68 <HAL_TIM_PWM_Start+0x188>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d004      	beq.n	8005f16 <HAL_TIM_PWM_Start+0x136>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a16      	ldr	r2, [pc, #88]	; (8005f6c <HAL_TIM_PWM_Start+0x18c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d111      	bne.n	8005f3a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f003 0307 	and.w	r3, r3, #7
 8005f20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2b06      	cmp	r3, #6
 8005f26:	d010      	beq.n	8005f4a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0201 	orr.w	r2, r2, #1
 8005f36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f38:	e007      	b.n	8005f4a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f042 0201 	orr.w	r2, r2, #1
 8005f48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	40010000 	.word	0x40010000
 8005f58:	40010400 	.word	0x40010400
 8005f5c:	40000400 	.word	0x40000400
 8005f60:	40000800 	.word	0x40000800
 8005f64:	40000c00 	.word	0x40000c00
 8005f68:	40014000 	.word	0x40014000
 8005f6c:	40001800 	.word	0x40001800

08005f70 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	6839      	ldr	r1, [r7, #0]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 ffda 	bl	8006f3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a2e      	ldr	r2, [pc, #184]	; (8006048 <HAL_TIM_PWM_Stop+0xd8>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d004      	beq.n	8005f9c <HAL_TIM_PWM_Stop+0x2c>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a2d      	ldr	r2, [pc, #180]	; (800604c <HAL_TIM_PWM_Stop+0xdc>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d101      	bne.n	8005fa0 <HAL_TIM_PWM_Stop+0x30>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e000      	b.n	8005fa2 <HAL_TIM_PWM_Stop+0x32>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d017      	beq.n	8005fd6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6a1a      	ldr	r2, [r3, #32]
 8005fac:	f241 1311 	movw	r3, #4369	; 0x1111
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10f      	bne.n	8005fd6 <HAL_TIM_PWM_Stop+0x66>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6a1a      	ldr	r2, [r3, #32]
 8005fbc:	f240 4344 	movw	r3, #1092	; 0x444
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d107      	bne.n	8005fd6 <HAL_TIM_PWM_Stop+0x66>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6a1a      	ldr	r2, [r3, #32]
 8005fdc:	f241 1311 	movw	r3, #4369	; 0x1111
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10f      	bne.n	8006006 <HAL_TIM_PWM_Stop+0x96>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6a1a      	ldr	r2, [r3, #32]
 8005fec:	f240 4344 	movw	r3, #1092	; 0x444
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d107      	bne.n	8006006 <HAL_TIM_PWM_Stop+0x96>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0201 	bic.w	r2, r2, #1
 8006004:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d104      	bne.n	8006016 <HAL_TIM_PWM_Stop+0xa6>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006014:	e013      	b.n	800603e <HAL_TIM_PWM_Stop+0xce>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b04      	cmp	r3, #4
 800601a:	d104      	bne.n	8006026 <HAL_TIM_PWM_Stop+0xb6>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006024:	e00b      	b.n	800603e <HAL_TIM_PWM_Stop+0xce>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b08      	cmp	r3, #8
 800602a:	d104      	bne.n	8006036 <HAL_TIM_PWM_Stop+0xc6>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006034:	e003      	b.n	800603e <HAL_TIM_PWM_Stop+0xce>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	40010000 	.word	0x40010000
 800604c:	40010400 	.word	0x40010400

08006050 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e041      	b.n	80060e6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d106      	bne.n	800607c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7fd fba8 	bl	80037cc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	3304      	adds	r3, #4
 800608c:	4619      	mov	r1, r3
 800608e:	4610      	mov	r0, r2
 8006090:	f000 fbda 	bl	8006848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
	...

080060f0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060fa:	2300      	movs	r3, #0
 80060fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d104      	bne.n	800610e <HAL_TIM_IC_Start_IT+0x1e>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800610a:	b2db      	uxtb	r3, r3
 800610c:	e013      	b.n	8006136 <HAL_TIM_IC_Start_IT+0x46>
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b04      	cmp	r3, #4
 8006112:	d104      	bne.n	800611e <HAL_TIM_IC_Start_IT+0x2e>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800611a:	b2db      	uxtb	r3, r3
 800611c:	e00b      	b.n	8006136 <HAL_TIM_IC_Start_IT+0x46>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b08      	cmp	r3, #8
 8006122:	d104      	bne.n	800612e <HAL_TIM_IC_Start_IT+0x3e>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800612a:	b2db      	uxtb	r3, r3
 800612c:	e003      	b.n	8006136 <HAL_TIM_IC_Start_IT+0x46>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006134:	b2db      	uxtb	r3, r3
 8006136:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d104      	bne.n	8006148 <HAL_TIM_IC_Start_IT+0x58>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006144:	b2db      	uxtb	r3, r3
 8006146:	e013      	b.n	8006170 <HAL_TIM_IC_Start_IT+0x80>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	2b04      	cmp	r3, #4
 800614c:	d104      	bne.n	8006158 <HAL_TIM_IC_Start_IT+0x68>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006154:	b2db      	uxtb	r3, r3
 8006156:	e00b      	b.n	8006170 <HAL_TIM_IC_Start_IT+0x80>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2b08      	cmp	r3, #8
 800615c:	d104      	bne.n	8006168 <HAL_TIM_IC_Start_IT+0x78>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006164:	b2db      	uxtb	r3, r3
 8006166:	e003      	b.n	8006170 <HAL_TIM_IC_Start_IT+0x80>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800616e:	b2db      	uxtb	r3, r3
 8006170:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006172:	7bbb      	ldrb	r3, [r7, #14]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d102      	bne.n	800617e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006178:	7b7b      	ldrb	r3, [r7, #13]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d001      	beq.n	8006182 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e0cc      	b.n	800631c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d104      	bne.n	8006192 <HAL_TIM_IC_Start_IT+0xa2>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2202      	movs	r2, #2
 800618c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006190:	e013      	b.n	80061ba <HAL_TIM_IC_Start_IT+0xca>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b04      	cmp	r3, #4
 8006196:	d104      	bne.n	80061a2 <HAL_TIM_IC_Start_IT+0xb2>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2202      	movs	r2, #2
 800619c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061a0:	e00b      	b.n	80061ba <HAL_TIM_IC_Start_IT+0xca>
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	d104      	bne.n	80061b2 <HAL_TIM_IC_Start_IT+0xc2>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2202      	movs	r2, #2
 80061ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061b0:	e003      	b.n	80061ba <HAL_TIM_IC_Start_IT+0xca>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2202      	movs	r2, #2
 80061b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d104      	bne.n	80061ca <HAL_TIM_IC_Start_IT+0xda>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061c8:	e013      	b.n	80061f2 <HAL_TIM_IC_Start_IT+0x102>
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b04      	cmp	r3, #4
 80061ce:	d104      	bne.n	80061da <HAL_TIM_IC_Start_IT+0xea>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061d8:	e00b      	b.n	80061f2 <HAL_TIM_IC_Start_IT+0x102>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d104      	bne.n	80061ea <HAL_TIM_IC_Start_IT+0xfa>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061e8:	e003      	b.n	80061f2 <HAL_TIM_IC_Start_IT+0x102>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2202      	movs	r2, #2
 80061ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b0c      	cmp	r3, #12
 80061f6:	d841      	bhi.n	800627c <HAL_TIM_IC_Start_IT+0x18c>
 80061f8:	a201      	add	r2, pc, #4	; (adr r2, 8006200 <HAL_TIM_IC_Start_IT+0x110>)
 80061fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fe:	bf00      	nop
 8006200:	08006235 	.word	0x08006235
 8006204:	0800627d 	.word	0x0800627d
 8006208:	0800627d 	.word	0x0800627d
 800620c:	0800627d 	.word	0x0800627d
 8006210:	08006247 	.word	0x08006247
 8006214:	0800627d 	.word	0x0800627d
 8006218:	0800627d 	.word	0x0800627d
 800621c:	0800627d 	.word	0x0800627d
 8006220:	08006259 	.word	0x08006259
 8006224:	0800627d 	.word	0x0800627d
 8006228:	0800627d 	.word	0x0800627d
 800622c:	0800627d 	.word	0x0800627d
 8006230:	0800626b 	.word	0x0800626b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f042 0202 	orr.w	r2, r2, #2
 8006242:	60da      	str	r2, [r3, #12]
      break;
 8006244:	e01d      	b.n	8006282 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68da      	ldr	r2, [r3, #12]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f042 0204 	orr.w	r2, r2, #4
 8006254:	60da      	str	r2, [r3, #12]
      break;
 8006256:	e014      	b.n	8006282 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 0208 	orr.w	r2, r2, #8
 8006266:	60da      	str	r2, [r3, #12]
      break;
 8006268:	e00b      	b.n	8006282 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68da      	ldr	r2, [r3, #12]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f042 0210 	orr.w	r2, r2, #16
 8006278:	60da      	str	r2, [r3, #12]
      break;
 800627a:	e002      	b.n	8006282 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	73fb      	strb	r3, [r7, #15]
      break;
 8006280:	bf00      	nop
  }

  if (status == HAL_OK)
 8006282:	7bfb      	ldrb	r3, [r7, #15]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d148      	bne.n	800631a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2201      	movs	r2, #1
 800628e:	6839      	ldr	r1, [r7, #0]
 8006290:	4618      	mov	r0, r3
 8006292:	f000 fe53 	bl	8006f3c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a22      	ldr	r2, [pc, #136]	; (8006324 <HAL_TIM_IC_Start_IT+0x234>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d022      	beq.n	80062e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a8:	d01d      	beq.n	80062e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a1e      	ldr	r2, [pc, #120]	; (8006328 <HAL_TIM_IC_Start_IT+0x238>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d018      	beq.n	80062e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a1c      	ldr	r2, [pc, #112]	; (800632c <HAL_TIM_IC_Start_IT+0x23c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d013      	beq.n	80062e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a1b      	ldr	r2, [pc, #108]	; (8006330 <HAL_TIM_IC_Start_IT+0x240>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d00e      	beq.n	80062e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a19      	ldr	r2, [pc, #100]	; (8006334 <HAL_TIM_IC_Start_IT+0x244>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d009      	beq.n	80062e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a18      	ldr	r2, [pc, #96]	; (8006338 <HAL_TIM_IC_Start_IT+0x248>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d004      	beq.n	80062e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a16      	ldr	r2, [pc, #88]	; (800633c <HAL_TIM_IC_Start_IT+0x24c>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d111      	bne.n	800630a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f003 0307 	and.w	r3, r3, #7
 80062f0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2b06      	cmp	r3, #6
 80062f6:	d010      	beq.n	800631a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f042 0201 	orr.w	r2, r2, #1
 8006306:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006308:	e007      	b.n	800631a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f042 0201 	orr.w	r2, r2, #1
 8006318:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800631a:	7bfb      	ldrb	r3, [r7, #15]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	40010000 	.word	0x40010000
 8006328:	40000400 	.word	0x40000400
 800632c:	40000800 	.word	0x40000800
 8006330:	40000c00 	.word	0x40000c00
 8006334:	40010400 	.word	0x40010400
 8006338:	40014000 	.word	0x40014000
 800633c:	40001800 	.word	0x40001800

08006340 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b02      	cmp	r3, #2
 8006354:	d122      	bne.n	800639c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b02      	cmp	r3, #2
 8006362:	d11b      	bne.n	800639c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f06f 0202 	mvn.w	r2, #2
 800636c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	f003 0303 	and.w	r3, r3, #3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7fa ff88 	bl	8001298 <HAL_TIM_IC_CaptureCallback>
 8006388:	e005      	b.n	8006396 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fa3e 	bl	800680c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fa45 	bl	8006820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	f003 0304 	and.w	r3, r3, #4
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	d122      	bne.n	80063f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	d11b      	bne.n	80063f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f06f 0204 	mvn.w	r2, #4
 80063c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2202      	movs	r2, #2
 80063c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7fa ff5e 	bl	8001298 <HAL_TIM_IC_CaptureCallback>
 80063dc:	e005      	b.n	80063ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fa14 	bl	800680c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fa1b 	bl	8006820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	f003 0308 	and.w	r3, r3, #8
 80063fa:	2b08      	cmp	r3, #8
 80063fc:	d122      	bne.n	8006444 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	f003 0308 	and.w	r3, r3, #8
 8006408:	2b08      	cmp	r3, #8
 800640a:	d11b      	bne.n	8006444 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f06f 0208 	mvn.w	r2, #8
 8006414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2204      	movs	r2, #4
 800641a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	f003 0303 	and.w	r3, r3, #3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7fa ff34 	bl	8001298 <HAL_TIM_IC_CaptureCallback>
 8006430:	e005      	b.n	800643e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f9ea 	bl	800680c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f9f1 	bl	8006820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	f003 0310 	and.w	r3, r3, #16
 800644e:	2b10      	cmp	r3, #16
 8006450:	d122      	bne.n	8006498 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	f003 0310 	and.w	r3, r3, #16
 800645c:	2b10      	cmp	r3, #16
 800645e:	d11b      	bne.n	8006498 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f06f 0210 	mvn.w	r2, #16
 8006468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2208      	movs	r2, #8
 800646e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7fa ff0a 	bl	8001298 <HAL_TIM_IC_CaptureCallback>
 8006484:	e005      	b.n	8006492 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f9c0 	bl	800680c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 f9c7 	bl	8006820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d10e      	bne.n	80064c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d107      	bne.n	80064c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f06f 0201 	mvn.w	r2, #1
 80064bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7fd f8a8 	bl	8003614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ce:	2b80      	cmp	r3, #128	; 0x80
 80064d0:	d10e      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064dc:	2b80      	cmp	r3, #128	; 0x80
 80064de:	d107      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fdd2 	bl	8007094 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fa:	2b40      	cmp	r3, #64	; 0x40
 80064fc:	d10e      	bne.n	800651c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006508:	2b40      	cmp	r3, #64	; 0x40
 800650a:	d107      	bne.n	800651c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f98c 	bl	8006834 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f003 0320 	and.w	r3, r3, #32
 8006526:	2b20      	cmp	r3, #32
 8006528:	d10e      	bne.n	8006548 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f003 0320 	and.w	r3, r3, #32
 8006534:	2b20      	cmp	r3, #32
 8006536:	d107      	bne.n	8006548 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f06f 0220 	mvn.w	r2, #32
 8006540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fd9c 	bl	8007080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006548:	bf00      	nop
 800654a:	3708      	adds	r7, #8
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800655c:	2300      	movs	r3, #0
 800655e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006566:	2b01      	cmp	r3, #1
 8006568:	d101      	bne.n	800656e <HAL_TIM_IC_ConfigChannel+0x1e>
 800656a:	2302      	movs	r3, #2
 800656c:	e088      	b.n	8006680 <HAL_TIM_IC_ConfigChannel+0x130>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d11b      	bne.n	80065b4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6818      	ldr	r0, [r3, #0]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	6819      	ldr	r1, [r3, #0]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	685a      	ldr	r2, [r3, #4]
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	f000 fbac 	bl	8006ce8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	699a      	ldr	r2, [r3, #24]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 020c 	bic.w	r2, r2, #12
 800659e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6999      	ldr	r1, [r3, #24]
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	689a      	ldr	r2, [r3, #8]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	619a      	str	r2, [r3, #24]
 80065b2:	e060      	b.n	8006676 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d11c      	bne.n	80065f4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6818      	ldr	r0, [r3, #0]
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	6819      	ldr	r1, [r3, #0]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	685a      	ldr	r2, [r3, #4]
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	f000 fc01 	bl	8006dd0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	699a      	ldr	r2, [r3, #24]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80065dc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6999      	ldr	r1, [r3, #24]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	021a      	lsls	r2, r3, #8
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	619a      	str	r2, [r3, #24]
 80065f2:	e040      	b.n	8006676 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b08      	cmp	r3, #8
 80065f8:	d11b      	bne.n	8006632 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6818      	ldr	r0, [r3, #0]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	6819      	ldr	r1, [r3, #0]
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	f000 fc1e 	bl	8006e4a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69da      	ldr	r2, [r3, #28]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 020c 	bic.w	r2, r2, #12
 800661c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	69d9      	ldr	r1, [r3, #28]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	430a      	orrs	r2, r1
 800662e:	61da      	str	r2, [r3, #28]
 8006630:	e021      	b.n	8006676 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2b0c      	cmp	r3, #12
 8006636:	d11c      	bne.n	8006672 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6818      	ldr	r0, [r3, #0]
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	6819      	ldr	r1, [r3, #0]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	f000 fc3b 	bl	8006ec2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	69da      	ldr	r2, [r3, #28]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800665a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	69d9      	ldr	r1, [r3, #28]
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	021a      	lsls	r2, r3, #8
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	430a      	orrs	r2, r1
 800666e:	61da      	str	r2, [r3, #28]
 8006670:	e001      	b.n	8006676 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800667e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006680:	4618      	mov	r0, r3
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006694:	2300      	movs	r3, #0
 8006696:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d101      	bne.n	80066a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066a2:	2302      	movs	r3, #2
 80066a4:	e0ae      	b.n	8006804 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b0c      	cmp	r3, #12
 80066b2:	f200 809f 	bhi.w	80067f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80066b6:	a201      	add	r2, pc, #4	; (adr r2, 80066bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066bc:	080066f1 	.word	0x080066f1
 80066c0:	080067f5 	.word	0x080067f5
 80066c4:	080067f5 	.word	0x080067f5
 80066c8:	080067f5 	.word	0x080067f5
 80066cc:	08006731 	.word	0x08006731
 80066d0:	080067f5 	.word	0x080067f5
 80066d4:	080067f5 	.word	0x080067f5
 80066d8:	080067f5 	.word	0x080067f5
 80066dc:	08006773 	.word	0x08006773
 80066e0:	080067f5 	.word	0x080067f5
 80066e4:	080067f5 	.word	0x080067f5
 80066e8:	080067f5 	.word	0x080067f5
 80066ec:	080067b3 	.word	0x080067b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68b9      	ldr	r1, [r7, #8]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 f946 	bl	8006988 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	699a      	ldr	r2, [r3, #24]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f042 0208 	orr.w	r2, r2, #8
 800670a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	699a      	ldr	r2, [r3, #24]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 0204 	bic.w	r2, r2, #4
 800671a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6999      	ldr	r1, [r3, #24]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	691a      	ldr	r2, [r3, #16]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	619a      	str	r2, [r3, #24]
      break;
 800672e:	e064      	b.n	80067fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68b9      	ldr	r1, [r7, #8]
 8006736:	4618      	mov	r0, r3
 8006738:	f000 f996 	bl	8006a68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	699a      	ldr	r2, [r3, #24]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800674a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	699a      	ldr	r2, [r3, #24]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800675a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6999      	ldr	r1, [r3, #24]
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	021a      	lsls	r2, r3, #8
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	619a      	str	r2, [r3, #24]
      break;
 8006770:	e043      	b.n	80067fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68b9      	ldr	r1, [r7, #8]
 8006778:	4618      	mov	r0, r3
 800677a:	f000 f9eb 	bl	8006b54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	69da      	ldr	r2, [r3, #28]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f042 0208 	orr.w	r2, r2, #8
 800678c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	69da      	ldr	r2, [r3, #28]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0204 	bic.w	r2, r2, #4
 800679c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	69d9      	ldr	r1, [r3, #28]
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	691a      	ldr	r2, [r3, #16]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	430a      	orrs	r2, r1
 80067ae:	61da      	str	r2, [r3, #28]
      break;
 80067b0:	e023      	b.n	80067fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68b9      	ldr	r1, [r7, #8]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 fa3f 	bl	8006c3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	69da      	ldr	r2, [r3, #28]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	69da      	ldr	r2, [r3, #28]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69d9      	ldr	r1, [r3, #28]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	021a      	lsls	r2, r3, #8
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	61da      	str	r2, [r3, #28]
      break;
 80067f2:	e002      	b.n	80067fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	75fb      	strb	r3, [r7, #23]
      break;
 80067f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006802:	7dfb      	ldrb	r3, [r7, #23]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3718      	adds	r7, #24
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a40      	ldr	r2, [pc, #256]	; (800695c <TIM_Base_SetConfig+0x114>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d013      	beq.n	8006888 <TIM_Base_SetConfig+0x40>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006866:	d00f      	beq.n	8006888 <TIM_Base_SetConfig+0x40>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a3d      	ldr	r2, [pc, #244]	; (8006960 <TIM_Base_SetConfig+0x118>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00b      	beq.n	8006888 <TIM_Base_SetConfig+0x40>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a3c      	ldr	r2, [pc, #240]	; (8006964 <TIM_Base_SetConfig+0x11c>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d007      	beq.n	8006888 <TIM_Base_SetConfig+0x40>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a3b      	ldr	r2, [pc, #236]	; (8006968 <TIM_Base_SetConfig+0x120>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d003      	beq.n	8006888 <TIM_Base_SetConfig+0x40>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a3a      	ldr	r2, [pc, #232]	; (800696c <TIM_Base_SetConfig+0x124>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d108      	bne.n	800689a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a2f      	ldr	r2, [pc, #188]	; (800695c <TIM_Base_SetConfig+0x114>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d02b      	beq.n	80068fa <TIM_Base_SetConfig+0xb2>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a8:	d027      	beq.n	80068fa <TIM_Base_SetConfig+0xb2>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a2c      	ldr	r2, [pc, #176]	; (8006960 <TIM_Base_SetConfig+0x118>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d023      	beq.n	80068fa <TIM_Base_SetConfig+0xb2>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a2b      	ldr	r2, [pc, #172]	; (8006964 <TIM_Base_SetConfig+0x11c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d01f      	beq.n	80068fa <TIM_Base_SetConfig+0xb2>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a2a      	ldr	r2, [pc, #168]	; (8006968 <TIM_Base_SetConfig+0x120>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d01b      	beq.n	80068fa <TIM_Base_SetConfig+0xb2>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a29      	ldr	r2, [pc, #164]	; (800696c <TIM_Base_SetConfig+0x124>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d017      	beq.n	80068fa <TIM_Base_SetConfig+0xb2>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a28      	ldr	r2, [pc, #160]	; (8006970 <TIM_Base_SetConfig+0x128>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d013      	beq.n	80068fa <TIM_Base_SetConfig+0xb2>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a27      	ldr	r2, [pc, #156]	; (8006974 <TIM_Base_SetConfig+0x12c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d00f      	beq.n	80068fa <TIM_Base_SetConfig+0xb2>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a26      	ldr	r2, [pc, #152]	; (8006978 <TIM_Base_SetConfig+0x130>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d00b      	beq.n	80068fa <TIM_Base_SetConfig+0xb2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a25      	ldr	r2, [pc, #148]	; (800697c <TIM_Base_SetConfig+0x134>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d007      	beq.n	80068fa <TIM_Base_SetConfig+0xb2>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a24      	ldr	r2, [pc, #144]	; (8006980 <TIM_Base_SetConfig+0x138>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d003      	beq.n	80068fa <TIM_Base_SetConfig+0xb2>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a23      	ldr	r2, [pc, #140]	; (8006984 <TIM_Base_SetConfig+0x13c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d108      	bne.n	800690c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	4313      	orrs	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a0a      	ldr	r2, [pc, #40]	; (800695c <TIM_Base_SetConfig+0x114>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d003      	beq.n	8006940 <TIM_Base_SetConfig+0xf8>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a0c      	ldr	r2, [pc, #48]	; (800696c <TIM_Base_SetConfig+0x124>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d103      	bne.n	8006948 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	691a      	ldr	r2, [r3, #16]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	615a      	str	r2, [r3, #20]
}
 800694e:	bf00      	nop
 8006950:	3714      	adds	r7, #20
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	40010000 	.word	0x40010000
 8006960:	40000400 	.word	0x40000400
 8006964:	40000800 	.word	0x40000800
 8006968:	40000c00 	.word	0x40000c00
 800696c:	40010400 	.word	0x40010400
 8006970:	40014000 	.word	0x40014000
 8006974:	40014400 	.word	0x40014400
 8006978:	40014800 	.word	0x40014800
 800697c:	40001800 	.word	0x40001800
 8006980:	40001c00 	.word	0x40001c00
 8006984:	40002000 	.word	0x40002000

08006988 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006988:	b480      	push	{r7}
 800698a:	b087      	sub	sp, #28
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	f023 0201 	bic.w	r2, r3, #1
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f023 0303 	bic.w	r3, r3, #3
 80069be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f023 0302 	bic.w	r3, r3, #2
 80069d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	4313      	orrs	r3, r2
 80069da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a20      	ldr	r2, [pc, #128]	; (8006a60 <TIM_OC1_SetConfig+0xd8>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d003      	beq.n	80069ec <TIM_OC1_SetConfig+0x64>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a1f      	ldr	r2, [pc, #124]	; (8006a64 <TIM_OC1_SetConfig+0xdc>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d10c      	bne.n	8006a06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f023 0308 	bic.w	r3, r3, #8
 80069f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	f023 0304 	bic.w	r3, r3, #4
 8006a04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a15      	ldr	r2, [pc, #84]	; (8006a60 <TIM_OC1_SetConfig+0xd8>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d003      	beq.n	8006a16 <TIM_OC1_SetConfig+0x8e>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a14      	ldr	r2, [pc, #80]	; (8006a64 <TIM_OC1_SetConfig+0xdc>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d111      	bne.n	8006a3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	621a      	str	r2, [r3, #32]
}
 8006a54:	bf00      	nop
 8006a56:	371c      	adds	r7, #28
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	40010000 	.word	0x40010000
 8006a64:	40010400 	.word	0x40010400

08006a68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	f023 0210 	bic.w	r2, r3, #16
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	021b      	lsls	r3, r3, #8
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f023 0320 	bic.w	r3, r3, #32
 8006ab2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	011b      	lsls	r3, r3, #4
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a22      	ldr	r2, [pc, #136]	; (8006b4c <TIM_OC2_SetConfig+0xe4>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d003      	beq.n	8006ad0 <TIM_OC2_SetConfig+0x68>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a21      	ldr	r2, [pc, #132]	; (8006b50 <TIM_OC2_SetConfig+0xe8>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d10d      	bne.n	8006aec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	011b      	lsls	r3, r3, #4
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a17      	ldr	r2, [pc, #92]	; (8006b4c <TIM_OC2_SetConfig+0xe4>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d003      	beq.n	8006afc <TIM_OC2_SetConfig+0x94>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a16      	ldr	r2, [pc, #88]	; (8006b50 <TIM_OC2_SetConfig+0xe8>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d113      	bne.n	8006b24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	621a      	str	r2, [r3, #32]
}
 8006b3e:	bf00      	nop
 8006b40:	371c      	adds	r7, #28
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	40010000 	.word	0x40010000
 8006b50:	40010400 	.word	0x40010400

08006b54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f023 0303 	bic.w	r3, r3, #3
 8006b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	021b      	lsls	r3, r3, #8
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a21      	ldr	r2, [pc, #132]	; (8006c34 <TIM_OC3_SetConfig+0xe0>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d003      	beq.n	8006bba <TIM_OC3_SetConfig+0x66>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a20      	ldr	r2, [pc, #128]	; (8006c38 <TIM_OC3_SetConfig+0xe4>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d10d      	bne.n	8006bd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	021b      	lsls	r3, r3, #8
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a16      	ldr	r2, [pc, #88]	; (8006c34 <TIM_OC3_SetConfig+0xe0>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d003      	beq.n	8006be6 <TIM_OC3_SetConfig+0x92>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a15      	ldr	r2, [pc, #84]	; (8006c38 <TIM_OC3_SetConfig+0xe4>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d113      	bne.n	8006c0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	011b      	lsls	r3, r3, #4
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	011b      	lsls	r3, r3, #4
 8006c08:	693a      	ldr	r2, [r7, #16]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	621a      	str	r2, [r3, #32]
}
 8006c28:	bf00      	nop
 8006c2a:	371c      	adds	r7, #28
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr
 8006c34:	40010000 	.word	0x40010000
 8006c38:	40010400 	.word	0x40010400

08006c3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b087      	sub	sp, #28
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	69db      	ldr	r3, [r3, #28]
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	021b      	lsls	r3, r3, #8
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	031b      	lsls	r3, r3, #12
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a12      	ldr	r2, [pc, #72]	; (8006ce0 <TIM_OC4_SetConfig+0xa4>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d003      	beq.n	8006ca4 <TIM_OC4_SetConfig+0x68>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a11      	ldr	r2, [pc, #68]	; (8006ce4 <TIM_OC4_SetConfig+0xa8>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d109      	bne.n	8006cb8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006caa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	695b      	ldr	r3, [r3, #20]
 8006cb0:	019b      	lsls	r3, r3, #6
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	621a      	str	r2, [r3, #32]
}
 8006cd2:	bf00      	nop
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	40010000 	.word	0x40010000
 8006ce4:	40010400 	.word	0x40010400

08006ce8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b087      	sub	sp, #28
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
 8006cf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	f023 0201 	bic.w	r2, r3, #1
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	4a28      	ldr	r2, [pc, #160]	; (8006db4 <TIM_TI1_SetConfig+0xcc>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d01b      	beq.n	8006d4e <TIM_TI1_SetConfig+0x66>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d1c:	d017      	beq.n	8006d4e <TIM_TI1_SetConfig+0x66>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	4a25      	ldr	r2, [pc, #148]	; (8006db8 <TIM_TI1_SetConfig+0xd0>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d013      	beq.n	8006d4e <TIM_TI1_SetConfig+0x66>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	4a24      	ldr	r2, [pc, #144]	; (8006dbc <TIM_TI1_SetConfig+0xd4>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d00f      	beq.n	8006d4e <TIM_TI1_SetConfig+0x66>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	4a23      	ldr	r2, [pc, #140]	; (8006dc0 <TIM_TI1_SetConfig+0xd8>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d00b      	beq.n	8006d4e <TIM_TI1_SetConfig+0x66>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	4a22      	ldr	r2, [pc, #136]	; (8006dc4 <TIM_TI1_SetConfig+0xdc>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d007      	beq.n	8006d4e <TIM_TI1_SetConfig+0x66>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	4a21      	ldr	r2, [pc, #132]	; (8006dc8 <TIM_TI1_SetConfig+0xe0>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d003      	beq.n	8006d4e <TIM_TI1_SetConfig+0x66>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4a20      	ldr	r2, [pc, #128]	; (8006dcc <TIM_TI1_SetConfig+0xe4>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d101      	bne.n	8006d52 <TIM_TI1_SetConfig+0x6a>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e000      	b.n	8006d54 <TIM_TI1_SetConfig+0x6c>
 8006d52:	2300      	movs	r3, #0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d008      	beq.n	8006d6a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f023 0303 	bic.w	r3, r3, #3
 8006d5e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	e003      	b.n	8006d72 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	f043 0301 	orr.w	r3, r3, #1
 8006d70:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	011b      	lsls	r3, r3, #4
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	f023 030a 	bic.w	r3, r3, #10
 8006d8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	f003 030a 	and.w	r3, r3, #10
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	693a      	ldr	r2, [r7, #16]
 8006da4:	621a      	str	r2, [r3, #32]
}
 8006da6:	bf00      	nop
 8006da8:	371c      	adds	r7, #28
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	40010000 	.word	0x40010000
 8006db8:	40000400 	.word	0x40000400
 8006dbc:	40000800 	.word	0x40000800
 8006dc0:	40000c00 	.word	0x40000c00
 8006dc4:	40010400 	.word	0x40010400
 8006dc8:	40014000 	.word	0x40014000
 8006dcc:	40001800 	.word	0x40001800

08006dd0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
 8006ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	f023 0210 	bic.w	r2, r3, #16
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	021b      	lsls	r3, r3, #8
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	031b      	lsls	r3, r3, #12
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e22:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	011b      	lsls	r3, r3, #4
 8006e28:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	621a      	str	r2, [r3, #32]
}
 8006e3e:	bf00      	nop
 8006e40:	371c      	adds	r7, #28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b087      	sub	sp, #28
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	60f8      	str	r0, [r7, #12]
 8006e52:	60b9      	str	r1, [r7, #8]
 8006e54:	607a      	str	r2, [r7, #4]
 8006e56:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6a1b      	ldr	r3, [r3, #32]
 8006e5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	69db      	ldr	r3, [r3, #28]
 8006e68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	f023 0303 	bic.w	r3, r3, #3
 8006e76:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e86:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	011b      	lsls	r3, r3, #4
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006e9a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	021b      	lsls	r3, r3, #8
 8006ea0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	621a      	str	r2, [r3, #32]
}
 8006eb6:	bf00      	nop
 8006eb8:	371c      	adds	r7, #28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b087      	sub	sp, #28
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	60f8      	str	r0, [r7, #12]
 8006eca:	60b9      	str	r1, [r7, #8]
 8006ecc:	607a      	str	r2, [r7, #4]
 8006ece:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	69db      	ldr	r3, [r3, #28]
 8006ee0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	021b      	lsls	r3, r3, #8
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	031b      	lsls	r3, r3, #12
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006f14:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	031b      	lsls	r3, r3, #12
 8006f1a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	621a      	str	r2, [r3, #32]
}
 8006f30:	bf00      	nop
 8006f32:	371c      	adds	r7, #28
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b087      	sub	sp, #28
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f003 031f 	and.w	r3, r3, #31
 8006f4e:	2201      	movs	r2, #1
 8006f50:	fa02 f303 	lsl.w	r3, r2, r3
 8006f54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6a1a      	ldr	r2, [r3, #32]
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	43db      	mvns	r3, r3
 8006f5e:	401a      	ands	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6a1a      	ldr	r2, [r3, #32]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f003 031f 	and.w	r3, r3, #31
 8006f6e:	6879      	ldr	r1, [r7, #4]
 8006f70:	fa01 f303 	lsl.w	r3, r1, r3
 8006f74:	431a      	orrs	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	621a      	str	r2, [r3, #32]
}
 8006f7a:	bf00      	nop
 8006f7c:	371c      	adds	r7, #28
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
	...

08006f88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d101      	bne.n	8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	e05a      	b.n	8007056 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2202      	movs	r2, #2
 8006fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a21      	ldr	r2, [pc, #132]	; (8007064 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d022      	beq.n	800702a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fec:	d01d      	beq.n	800702a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a1d      	ldr	r2, [pc, #116]	; (8007068 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d018      	beq.n	800702a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a1b      	ldr	r2, [pc, #108]	; (800706c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d013      	beq.n	800702a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a1a      	ldr	r2, [pc, #104]	; (8007070 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d00e      	beq.n	800702a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a18      	ldr	r2, [pc, #96]	; (8007074 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d009      	beq.n	800702a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a17      	ldr	r2, [pc, #92]	; (8007078 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d004      	beq.n	800702a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a15      	ldr	r2, [pc, #84]	; (800707c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d10c      	bne.n	8007044 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007030:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	4313      	orrs	r3, r2
 800703a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	40010000 	.word	0x40010000
 8007068:	40000400 	.word	0x40000400
 800706c:	40000800 	.word	0x40000800
 8007070:	40000c00 	.word	0x40000c00
 8007074:	40010400 	.word	0x40010400
 8007078:	40014000 	.word	0x40014000
 800707c:	40001800 	.word	0x40001800

08007080 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e03f      	b.n	800713a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d106      	bne.n	80070d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7fc fca4 	bl	8003a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2224      	movs	r2, #36	; 0x24
 80070d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fddf 	bl	8007cb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	691a      	ldr	r2, [r3, #16]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007100:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	695a      	ldr	r2, [r3, #20]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007110:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68da      	ldr	r2, [r3, #12]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007120:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2220      	movs	r2, #32
 800712c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2220      	movs	r2, #32
 8007134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b08a      	sub	sp, #40	; 0x28
 8007146:	af02      	add	r7, sp, #8
 8007148:	60f8      	str	r0, [r7, #12]
 800714a:	60b9      	str	r1, [r7, #8]
 800714c:	603b      	str	r3, [r7, #0]
 800714e:	4613      	mov	r3, r2
 8007150:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007152:	2300      	movs	r3, #0
 8007154:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800715c:	b2db      	uxtb	r3, r3
 800715e:	2b20      	cmp	r3, #32
 8007160:	d17c      	bne.n	800725c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d002      	beq.n	800716e <HAL_UART_Transmit+0x2c>
 8007168:	88fb      	ldrh	r3, [r7, #6]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d101      	bne.n	8007172 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e075      	b.n	800725e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007178:	2b01      	cmp	r3, #1
 800717a:	d101      	bne.n	8007180 <HAL_UART_Transmit+0x3e>
 800717c:	2302      	movs	r3, #2
 800717e:	e06e      	b.n	800725e <HAL_UART_Transmit+0x11c>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2221      	movs	r2, #33	; 0x21
 8007192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007196:	f7fc ffc5 	bl	8004124 <HAL_GetTick>
 800719a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	88fa      	ldrh	r2, [r7, #6]
 80071a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	88fa      	ldrh	r2, [r7, #6]
 80071a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071b0:	d108      	bne.n	80071c4 <HAL_UART_Transmit+0x82>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d104      	bne.n	80071c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80071ba:	2300      	movs	r3, #0
 80071bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	61bb      	str	r3, [r7, #24]
 80071c2:	e003      	b.n	80071cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071c8:	2300      	movs	r3, #0
 80071ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80071d4:	e02a      	b.n	800722c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2200      	movs	r2, #0
 80071de:	2180      	movs	r1, #128	; 0x80
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f000 fb1f 	bl	8007824 <UART_WaitOnFlagUntilTimeout>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d001      	beq.n	80071f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e036      	b.n	800725e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10b      	bne.n	800720e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	881b      	ldrh	r3, [r3, #0]
 80071fa:	461a      	mov	r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007204:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	3302      	adds	r3, #2
 800720a:	61bb      	str	r3, [r7, #24]
 800720c:	e007      	b.n	800721e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	781a      	ldrb	r2, [r3, #0]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	3301      	adds	r3, #1
 800721c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007222:	b29b      	uxth	r3, r3
 8007224:	3b01      	subs	r3, #1
 8007226:	b29a      	uxth	r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007230:	b29b      	uxth	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1cf      	bne.n	80071d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	2200      	movs	r2, #0
 800723e:	2140      	movs	r1, #64	; 0x40
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 faef 	bl	8007824 <UART_WaitOnFlagUntilTimeout>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e006      	b.n	800725e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2220      	movs	r2, #32
 8007254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007258:	2300      	movs	r3, #0
 800725a:	e000      	b.n	800725e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800725c:	2302      	movs	r3, #2
  }
}
 800725e:	4618      	mov	r0, r3
 8007260:	3720      	adds	r7, #32
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b084      	sub	sp, #16
 800726a:	af00      	add	r7, sp, #0
 800726c:	60f8      	str	r0, [r7, #12]
 800726e:	60b9      	str	r1, [r7, #8]
 8007270:	4613      	mov	r3, r2
 8007272:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b20      	cmp	r3, #32
 800727e:	d11d      	bne.n	80072bc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d002      	beq.n	800728c <HAL_UART_Receive_IT+0x26>
 8007286:	88fb      	ldrh	r3, [r7, #6]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e016      	b.n	80072be <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007296:	2b01      	cmp	r3, #1
 8007298:	d101      	bne.n	800729e <HAL_UART_Receive_IT+0x38>
 800729a:	2302      	movs	r3, #2
 800729c:	e00f      	b.n	80072be <HAL_UART_Receive_IT+0x58>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80072ac:	88fb      	ldrh	r3, [r7, #6]
 80072ae:	461a      	mov	r2, r3
 80072b0:	68b9      	ldr	r1, [r7, #8]
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 fb24 	bl	8007900 <UART_Start_Receive_IT>
 80072b8:	4603      	mov	r3, r0
 80072ba:	e000      	b.n	80072be <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80072bc:	2302      	movs	r3, #2
  }
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
	...

080072c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b0ba      	sub	sp, #232	; 0xe8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80072ee:	2300      	movs	r3, #0
 80072f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80072fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072fe:	f003 030f 	and.w	r3, r3, #15
 8007302:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007306:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10f      	bne.n	800732e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800730e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007312:	f003 0320 	and.w	r3, r3, #32
 8007316:	2b00      	cmp	r3, #0
 8007318:	d009      	beq.n	800732e <HAL_UART_IRQHandler+0x66>
 800731a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800731e:	f003 0320 	and.w	r3, r3, #32
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 fc07 	bl	8007b3a <UART_Receive_IT>
      return;
 800732c:	e256      	b.n	80077dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800732e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 80de 	beq.w	80074f4 <HAL_UART_IRQHandler+0x22c>
 8007338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	2b00      	cmp	r3, #0
 8007342:	d106      	bne.n	8007352 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007348:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 80d1 	beq.w	80074f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00b      	beq.n	8007376 <HAL_UART_IRQHandler+0xae>
 800735e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007366:	2b00      	cmp	r3, #0
 8007368:	d005      	beq.n	8007376 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	f043 0201 	orr.w	r2, r3, #1
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800737a:	f003 0304 	and.w	r3, r3, #4
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00b      	beq.n	800739a <HAL_UART_IRQHandler+0xd2>
 8007382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	2b00      	cmp	r3, #0
 800738c:	d005      	beq.n	800739a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007392:	f043 0202 	orr.w	r2, r3, #2
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800739a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800739e:	f003 0302 	and.w	r3, r3, #2
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00b      	beq.n	80073be <HAL_UART_IRQHandler+0xf6>
 80073a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d005      	beq.n	80073be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b6:	f043 0204 	orr.w	r2, r3, #4
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80073be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073c2:	f003 0308 	and.w	r3, r3, #8
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d011      	beq.n	80073ee <HAL_UART_IRQHandler+0x126>
 80073ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ce:	f003 0320 	and.w	r3, r3, #32
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d105      	bne.n	80073e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80073d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073da:	f003 0301 	and.w	r3, r3, #1
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d005      	beq.n	80073ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e6:	f043 0208 	orr.w	r2, r3, #8
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 81ed 	beq.w	80077d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073fc:	f003 0320 	and.w	r3, r3, #32
 8007400:	2b00      	cmp	r3, #0
 8007402:	d008      	beq.n	8007416 <HAL_UART_IRQHandler+0x14e>
 8007404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007408:	f003 0320 	and.w	r3, r3, #32
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fb92 	bl	8007b3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007420:	2b40      	cmp	r3, #64	; 0x40
 8007422:	bf0c      	ite	eq
 8007424:	2301      	moveq	r3, #1
 8007426:	2300      	movne	r3, #0
 8007428:	b2db      	uxtb	r3, r3
 800742a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	f003 0308 	and.w	r3, r3, #8
 8007436:	2b00      	cmp	r3, #0
 8007438:	d103      	bne.n	8007442 <HAL_UART_IRQHandler+0x17a>
 800743a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800743e:	2b00      	cmp	r3, #0
 8007440:	d04f      	beq.n	80074e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fa9a 	bl	800797c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007452:	2b40      	cmp	r3, #64	; 0x40
 8007454:	d141      	bne.n	80074da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3314      	adds	r3, #20
 800745c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007464:	e853 3f00 	ldrex	r3, [r3]
 8007468:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800746c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007474:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	3314      	adds	r3, #20
 800747e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007482:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007486:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800748e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007492:	e841 2300 	strex	r3, r2, [r1]
 8007496:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800749a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1d9      	bne.n	8007456 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d013      	beq.n	80074d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ae:	4a7d      	ldr	r2, [pc, #500]	; (80076a4 <HAL_UART_IRQHandler+0x3dc>)
 80074b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fc ffb6 	bl	8004428 <HAL_DMA_Abort_IT>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d016      	beq.n	80074f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074cc:	4610      	mov	r0, r2
 80074ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074d0:	e00e      	b.n	80074f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f990 	bl	80077f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074d8:	e00a      	b.n	80074f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f98c 	bl	80077f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074e0:	e006      	b.n	80074f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f988 	bl	80077f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80074ee:	e170      	b.n	80077d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074f0:	bf00      	nop
    return;
 80074f2:	e16e      	b.n	80077d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	f040 814a 	bne.w	8007792 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80074fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007502:	f003 0310 	and.w	r3, r3, #16
 8007506:	2b00      	cmp	r3, #0
 8007508:	f000 8143 	beq.w	8007792 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800750c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007510:	f003 0310 	and.w	r3, r3, #16
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 813c 	beq.w	8007792 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800751a:	2300      	movs	r3, #0
 800751c:	60bb      	str	r3, [r7, #8]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	60bb      	str	r3, [r7, #8]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	60bb      	str	r3, [r7, #8]
 800752e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753a:	2b40      	cmp	r3, #64	; 0x40
 800753c:	f040 80b4 	bne.w	80076a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800754c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 8140 	beq.w	80077d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800755a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800755e:	429a      	cmp	r2, r3
 8007560:	f080 8139 	bcs.w	80077d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800756a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007570:	69db      	ldr	r3, [r3, #28]
 8007572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007576:	f000 8088 	beq.w	800768a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	330c      	adds	r3, #12
 8007580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007584:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007588:	e853 3f00 	ldrex	r3, [r3]
 800758c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007590:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007598:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	330c      	adds	r3, #12
 80075a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80075a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80075aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80075b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80075b6:	e841 2300 	strex	r3, r2, [r1]
 80075ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80075be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1d9      	bne.n	800757a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3314      	adds	r3, #20
 80075cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075d0:	e853 3f00 	ldrex	r3, [r3]
 80075d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80075d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075d8:	f023 0301 	bic.w	r3, r3, #1
 80075dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	3314      	adds	r3, #20
 80075e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80075ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80075ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80075f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80075f6:	e841 2300 	strex	r3, r2, [r1]
 80075fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80075fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1e1      	bne.n	80075c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	3314      	adds	r3, #20
 8007608:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800760c:	e853 3f00 	ldrex	r3, [r3]
 8007610:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007618:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3314      	adds	r3, #20
 8007622:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007626:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007628:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800762c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800762e:	e841 2300 	strex	r3, r2, [r1]
 8007632:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1e3      	bne.n	8007602 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2220      	movs	r2, #32
 800763e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	330c      	adds	r3, #12
 800764e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007652:	e853 3f00 	ldrex	r3, [r3]
 8007656:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800765a:	f023 0310 	bic.w	r3, r3, #16
 800765e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	330c      	adds	r3, #12
 8007668:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800766c:	65ba      	str	r2, [r7, #88]	; 0x58
 800766e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007670:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007672:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007674:	e841 2300 	strex	r3, r2, [r1]
 8007678:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800767a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1e3      	bne.n	8007648 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007684:	4618      	mov	r0, r3
 8007686:	f7fc fe5f 	bl	8004348 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007692:	b29b      	uxth	r3, r3
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	b29b      	uxth	r3, r3
 8007698:	4619      	mov	r1, r3
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f8b6 	bl	800780c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076a0:	e099      	b.n	80077d6 <HAL_UART_IRQHandler+0x50e>
 80076a2:	bf00      	nop
 80076a4:	08007a43 	.word	0x08007a43
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076bc:	b29b      	uxth	r3, r3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f000 808b 	beq.w	80077da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80076c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 8086 	beq.w	80077da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	330c      	adds	r3, #12
 80076d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d8:	e853 3f00 	ldrex	r3, [r3]
 80076dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	330c      	adds	r3, #12
 80076ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80076f2:	647a      	str	r2, [r7, #68]	; 0x44
 80076f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076fa:	e841 2300 	strex	r3, r2, [r1]
 80076fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1e3      	bne.n	80076ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3314      	adds	r3, #20
 800770c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007710:	e853 3f00 	ldrex	r3, [r3]
 8007714:	623b      	str	r3, [r7, #32]
   return(result);
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	f023 0301 	bic.w	r3, r3, #1
 800771c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3314      	adds	r3, #20
 8007726:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800772a:	633a      	str	r2, [r7, #48]	; 0x30
 800772c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007732:	e841 2300 	strex	r3, r2, [r1]
 8007736:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1e3      	bne.n	8007706 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2220      	movs	r2, #32
 8007742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	330c      	adds	r3, #12
 8007752:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	e853 3f00 	ldrex	r3, [r3]
 800775a:	60fb      	str	r3, [r7, #12]
   return(result);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f023 0310 	bic.w	r3, r3, #16
 8007762:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	330c      	adds	r3, #12
 800776c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007770:	61fa      	str	r2, [r7, #28]
 8007772:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007774:	69b9      	ldr	r1, [r7, #24]
 8007776:	69fa      	ldr	r2, [r7, #28]
 8007778:	e841 2300 	strex	r3, r2, [r1]
 800777c:	617b      	str	r3, [r7, #20]
   return(result);
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1e3      	bne.n	800774c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007784:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007788:	4619      	mov	r1, r3
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f83e 	bl	800780c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007790:	e023      	b.n	80077da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800779a:	2b00      	cmp	r3, #0
 800779c:	d009      	beq.n	80077b2 <HAL_UART_IRQHandler+0x4ea>
 800779e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f95d 	bl	8007a6a <UART_Transmit_IT>
    return;
 80077b0:	e014      	b.n	80077dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80077b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00e      	beq.n	80077dc <HAL_UART_IRQHandler+0x514>
 80077be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d008      	beq.n	80077dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f99d 	bl	8007b0a <UART_EndTransmit_IT>
    return;
 80077d0:	e004      	b.n	80077dc <HAL_UART_IRQHandler+0x514>
    return;
 80077d2:	bf00      	nop
 80077d4:	e002      	b.n	80077dc <HAL_UART_IRQHandler+0x514>
      return;
 80077d6:	bf00      	nop
 80077d8:	e000      	b.n	80077dc <HAL_UART_IRQHandler+0x514>
      return;
 80077da:	bf00      	nop
  }
}
 80077dc:	37e8      	adds	r7, #232	; 0xe8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop

080077e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	460b      	mov	r3, r1
 8007816:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b090      	sub	sp, #64	; 0x40
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	603b      	str	r3, [r7, #0]
 8007830:	4613      	mov	r3, r2
 8007832:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007834:	e050      	b.n	80078d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800783c:	d04c      	beq.n	80078d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800783e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007840:	2b00      	cmp	r3, #0
 8007842:	d007      	beq.n	8007854 <UART_WaitOnFlagUntilTimeout+0x30>
 8007844:	f7fc fc6e 	bl	8004124 <HAL_GetTick>
 8007848:	4602      	mov	r2, r0
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007850:	429a      	cmp	r2, r3
 8007852:	d241      	bcs.n	80078d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	330c      	adds	r3, #12
 800785a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785e:	e853 3f00 	ldrex	r3, [r3]
 8007862:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800786a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	330c      	adds	r3, #12
 8007872:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007874:	637a      	str	r2, [r7, #52]	; 0x34
 8007876:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007878:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800787a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800787c:	e841 2300 	strex	r3, r2, [r1]
 8007880:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1e5      	bne.n	8007854 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3314      	adds	r3, #20
 800788e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	e853 3f00 	ldrex	r3, [r3]
 8007896:	613b      	str	r3, [r7, #16]
   return(result);
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	f023 0301 	bic.w	r3, r3, #1
 800789e:	63bb      	str	r3, [r7, #56]	; 0x38
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3314      	adds	r3, #20
 80078a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078a8:	623a      	str	r2, [r7, #32]
 80078aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ac:	69f9      	ldr	r1, [r7, #28]
 80078ae:	6a3a      	ldr	r2, [r7, #32]
 80078b0:	e841 2300 	strex	r3, r2, [r1]
 80078b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e5      	bne.n	8007888 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2220      	movs	r2, #32
 80078c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2220      	movs	r2, #32
 80078c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e00f      	b.n	80078f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	4013      	ands	r3, r2
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	bf0c      	ite	eq
 80078e8:	2301      	moveq	r3, #1
 80078ea:	2300      	movne	r3, #0
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	461a      	mov	r2, r3
 80078f0:	79fb      	ldrb	r3, [r7, #7]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d09f      	beq.n	8007836 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3740      	adds	r7, #64	; 0x40
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	4613      	mov	r3, r2
 800790c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	88fa      	ldrh	r2, [r7, #6]
 8007918:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	88fa      	ldrh	r2, [r7, #6]
 800791e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2222      	movs	r2, #34	; 0x22
 800792a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d007      	beq.n	800794e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68da      	ldr	r2, [r3, #12]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800794c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	695a      	ldr	r2, [r3, #20]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f042 0201 	orr.w	r2, r2, #1
 800795c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68da      	ldr	r2, [r3, #12]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f042 0220 	orr.w	r2, r2, #32
 800796c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3714      	adds	r7, #20
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800797c:	b480      	push	{r7}
 800797e:	b095      	sub	sp, #84	; 0x54
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	330c      	adds	r3, #12
 800798a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798e:	e853 3f00 	ldrex	r3, [r3]
 8007992:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007996:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800799a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	330c      	adds	r3, #12
 80079a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079a4:	643a      	str	r2, [r7, #64]	; 0x40
 80079a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079ac:	e841 2300 	strex	r3, r2, [r1]
 80079b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d1e5      	bne.n	8007984 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3314      	adds	r3, #20
 80079be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	e853 3f00 	ldrex	r3, [r3]
 80079c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	f023 0301 	bic.w	r3, r3, #1
 80079ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3314      	adds	r3, #20
 80079d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079e0:	e841 2300 	strex	r3, r2, [r1]
 80079e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1e5      	bne.n	80079b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d119      	bne.n	8007a28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	330c      	adds	r3, #12
 80079fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	e853 3f00 	ldrex	r3, [r3]
 8007a02:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	f023 0310 	bic.w	r3, r3, #16
 8007a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	330c      	adds	r3, #12
 8007a12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a14:	61ba      	str	r2, [r7, #24]
 8007a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a18:	6979      	ldr	r1, [r7, #20]
 8007a1a:	69ba      	ldr	r2, [r7, #24]
 8007a1c:	e841 2300 	strex	r3, r2, [r1]
 8007a20:	613b      	str	r3, [r7, #16]
   return(result);
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1e5      	bne.n	80079f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2220      	movs	r2, #32
 8007a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007a36:	bf00      	nop
 8007a38:	3754      	adds	r7, #84	; 0x54
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b084      	sub	sp, #16
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f7ff fecb 	bl	80077f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a62:	bf00      	nop
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	b085      	sub	sp, #20
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b21      	cmp	r3, #33	; 0x21
 8007a7c:	d13e      	bne.n	8007afc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a86:	d114      	bne.n	8007ab2 <UART_Transmit_IT+0x48>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d110      	bne.n	8007ab2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a1b      	ldr	r3, [r3, #32]
 8007a94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	881b      	ldrh	r3, [r3, #0]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007aa4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	1c9a      	adds	r2, r3, #2
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	621a      	str	r2, [r3, #32]
 8007ab0:	e008      	b.n	8007ac4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	1c59      	adds	r1, r3, #1
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	6211      	str	r1, [r2, #32]
 8007abc:	781a      	ldrb	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	3b01      	subs	r3, #1
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10f      	bne.n	8007af8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68da      	ldr	r2, [r3, #12]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ae6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68da      	ldr	r2, [r3, #12]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007af6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	e000      	b.n	8007afe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007afc:	2302      	movs	r3, #2
  }
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3714      	adds	r7, #20
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b082      	sub	sp, #8
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68da      	ldr	r2, [r3, #12]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2220      	movs	r2, #32
 8007b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7ff fe5a 	bl	80077e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b08c      	sub	sp, #48	; 0x30
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b22      	cmp	r3, #34	; 0x22
 8007b4c:	f040 80ab 	bne.w	8007ca6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b58:	d117      	bne.n	8007b8a <UART_Receive_IT+0x50>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d113      	bne.n	8007b8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b62:	2300      	movs	r3, #0
 8007b64:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b82:	1c9a      	adds	r2, r3, #2
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	629a      	str	r2, [r3, #40]	; 0x28
 8007b88:	e026      	b.n	8007bd8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007b90:	2300      	movs	r3, #0
 8007b92:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b9c:	d007      	beq.n	8007bae <UART_Receive_IT+0x74>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10a      	bne.n	8007bbc <UART_Receive_IT+0x82>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d106      	bne.n	8007bbc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	b2da      	uxtb	r2, r3
 8007bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb8:	701a      	strb	r2, [r3, #0]
 8007bba:	e008      	b.n	8007bce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bcc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd2:	1c5a      	adds	r2, r3, #1
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	3b01      	subs	r3, #1
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	4619      	mov	r1, r3
 8007be6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d15a      	bne.n	8007ca2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68da      	ldr	r2, [r3, #12]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f022 0220 	bic.w	r2, r2, #32
 8007bfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68da      	ldr	r2, [r3, #12]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	695a      	ldr	r2, [r3, #20]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f022 0201 	bic.w	r2, r2, #1
 8007c1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d135      	bne.n	8007c98 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	330c      	adds	r3, #12
 8007c38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	e853 3f00 	ldrex	r3, [r3]
 8007c40:	613b      	str	r3, [r7, #16]
   return(result);
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f023 0310 	bic.w	r3, r3, #16
 8007c48:	627b      	str	r3, [r7, #36]	; 0x24
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	330c      	adds	r3, #12
 8007c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c52:	623a      	str	r2, [r7, #32]
 8007c54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c56:	69f9      	ldr	r1, [r7, #28]
 8007c58:	6a3a      	ldr	r2, [r7, #32]
 8007c5a:	e841 2300 	strex	r3, r2, [r1]
 8007c5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1e5      	bne.n	8007c32 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0310 	and.w	r3, r3, #16
 8007c70:	2b10      	cmp	r3, #16
 8007c72:	d10a      	bne.n	8007c8a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c74:	2300      	movs	r3, #0
 8007c76:	60fb      	str	r3, [r7, #12]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	60fb      	str	r3, [r7, #12]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	60fb      	str	r3, [r7, #12]
 8007c88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f7ff fdbb 	bl	800780c <HAL_UARTEx_RxEventCallback>
 8007c96:	e002      	b.n	8007c9e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7f9 fb1b 	bl	80012d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	e002      	b.n	8007ca8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	e000      	b.n	8007ca8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007ca6:	2302      	movs	r3, #2
  }
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3730      	adds	r7, #48	; 0x30
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cb4:	b0c0      	sub	sp, #256	; 0x100
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ccc:	68d9      	ldr	r1, [r3, #12]
 8007cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	ea40 0301 	orr.w	r3, r0, r1
 8007cd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cde:	689a      	ldr	r2, [r3, #8]
 8007ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cec:	695b      	ldr	r3, [r3, #20]
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf4:	69db      	ldr	r3, [r3, #28]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d08:	f021 010c 	bic.w	r1, r1, #12
 8007d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d16:	430b      	orrs	r3, r1
 8007d18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d2a:	6999      	ldr	r1, [r3, #24]
 8007d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	ea40 0301 	orr.w	r3, r0, r1
 8007d36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	4b8f      	ldr	r3, [pc, #572]	; (8007f7c <UART_SetConfig+0x2cc>)
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d005      	beq.n	8007d50 <UART_SetConfig+0xa0>
 8007d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	4b8d      	ldr	r3, [pc, #564]	; (8007f80 <UART_SetConfig+0x2d0>)
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d104      	bne.n	8007d5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d50:	f7fd faa8 	bl	80052a4 <HAL_RCC_GetPCLK2Freq>
 8007d54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007d58:	e003      	b.n	8007d62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d5a:	f7fd fa8f 	bl	800527c <HAL_RCC_GetPCLK1Freq>
 8007d5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d66:	69db      	ldr	r3, [r3, #28]
 8007d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d6c:	f040 810c 	bne.w	8007f88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d74:	2200      	movs	r2, #0
 8007d76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007d7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007d82:	4622      	mov	r2, r4
 8007d84:	462b      	mov	r3, r5
 8007d86:	1891      	adds	r1, r2, r2
 8007d88:	65b9      	str	r1, [r7, #88]	; 0x58
 8007d8a:	415b      	adcs	r3, r3
 8007d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007d92:	4621      	mov	r1, r4
 8007d94:	eb12 0801 	adds.w	r8, r2, r1
 8007d98:	4629      	mov	r1, r5
 8007d9a:	eb43 0901 	adc.w	r9, r3, r1
 8007d9e:	f04f 0200 	mov.w	r2, #0
 8007da2:	f04f 0300 	mov.w	r3, #0
 8007da6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007daa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007dae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007db2:	4690      	mov	r8, r2
 8007db4:	4699      	mov	r9, r3
 8007db6:	4623      	mov	r3, r4
 8007db8:	eb18 0303 	adds.w	r3, r8, r3
 8007dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007dc0:	462b      	mov	r3, r5
 8007dc2:	eb49 0303 	adc.w	r3, r9, r3
 8007dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007dd6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007dda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007dde:	460b      	mov	r3, r1
 8007de0:	18db      	adds	r3, r3, r3
 8007de2:	653b      	str	r3, [r7, #80]	; 0x50
 8007de4:	4613      	mov	r3, r2
 8007de6:	eb42 0303 	adc.w	r3, r2, r3
 8007dea:	657b      	str	r3, [r7, #84]	; 0x54
 8007dec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007df0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007df4:	f7f8 ffb8 	bl	8000d68 <__aeabi_uldivmod>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	4b61      	ldr	r3, [pc, #388]	; (8007f84 <UART_SetConfig+0x2d4>)
 8007dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8007e02:	095b      	lsrs	r3, r3, #5
 8007e04:	011c      	lsls	r4, r3, #4
 8007e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007e14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007e18:	4642      	mov	r2, r8
 8007e1a:	464b      	mov	r3, r9
 8007e1c:	1891      	adds	r1, r2, r2
 8007e1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007e20:	415b      	adcs	r3, r3
 8007e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007e28:	4641      	mov	r1, r8
 8007e2a:	eb12 0a01 	adds.w	sl, r2, r1
 8007e2e:	4649      	mov	r1, r9
 8007e30:	eb43 0b01 	adc.w	fp, r3, r1
 8007e34:	f04f 0200 	mov.w	r2, #0
 8007e38:	f04f 0300 	mov.w	r3, #0
 8007e3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e48:	4692      	mov	sl, r2
 8007e4a:	469b      	mov	fp, r3
 8007e4c:	4643      	mov	r3, r8
 8007e4e:	eb1a 0303 	adds.w	r3, sl, r3
 8007e52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e56:	464b      	mov	r3, r9
 8007e58:	eb4b 0303 	adc.w	r3, fp, r3
 8007e5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007e70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007e74:	460b      	mov	r3, r1
 8007e76:	18db      	adds	r3, r3, r3
 8007e78:	643b      	str	r3, [r7, #64]	; 0x40
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	eb42 0303 	adc.w	r3, r2, r3
 8007e80:	647b      	str	r3, [r7, #68]	; 0x44
 8007e82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007e8a:	f7f8 ff6d 	bl	8000d68 <__aeabi_uldivmod>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	460b      	mov	r3, r1
 8007e92:	4611      	mov	r1, r2
 8007e94:	4b3b      	ldr	r3, [pc, #236]	; (8007f84 <UART_SetConfig+0x2d4>)
 8007e96:	fba3 2301 	umull	r2, r3, r3, r1
 8007e9a:	095b      	lsrs	r3, r3, #5
 8007e9c:	2264      	movs	r2, #100	; 0x64
 8007e9e:	fb02 f303 	mul.w	r3, r2, r3
 8007ea2:	1acb      	subs	r3, r1, r3
 8007ea4:	00db      	lsls	r3, r3, #3
 8007ea6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007eaa:	4b36      	ldr	r3, [pc, #216]	; (8007f84 <UART_SetConfig+0x2d4>)
 8007eac:	fba3 2302 	umull	r2, r3, r3, r2
 8007eb0:	095b      	lsrs	r3, r3, #5
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007eb8:	441c      	add	r4, r3
 8007eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ec4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007ec8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007ecc:	4642      	mov	r2, r8
 8007ece:	464b      	mov	r3, r9
 8007ed0:	1891      	adds	r1, r2, r2
 8007ed2:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ed4:	415b      	adcs	r3, r3
 8007ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ed8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007edc:	4641      	mov	r1, r8
 8007ede:	1851      	adds	r1, r2, r1
 8007ee0:	6339      	str	r1, [r7, #48]	; 0x30
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	414b      	adcs	r3, r1
 8007ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ee8:	f04f 0200 	mov.w	r2, #0
 8007eec:	f04f 0300 	mov.w	r3, #0
 8007ef0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007ef4:	4659      	mov	r1, fp
 8007ef6:	00cb      	lsls	r3, r1, #3
 8007ef8:	4651      	mov	r1, sl
 8007efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007efe:	4651      	mov	r1, sl
 8007f00:	00ca      	lsls	r2, r1, #3
 8007f02:	4610      	mov	r0, r2
 8007f04:	4619      	mov	r1, r3
 8007f06:	4603      	mov	r3, r0
 8007f08:	4642      	mov	r2, r8
 8007f0a:	189b      	adds	r3, r3, r2
 8007f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f10:	464b      	mov	r3, r9
 8007f12:	460a      	mov	r2, r1
 8007f14:	eb42 0303 	adc.w	r3, r2, r3
 8007f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007f2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007f30:	460b      	mov	r3, r1
 8007f32:	18db      	adds	r3, r3, r3
 8007f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f36:	4613      	mov	r3, r2
 8007f38:	eb42 0303 	adc.w	r3, r2, r3
 8007f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007f46:	f7f8 ff0f 	bl	8000d68 <__aeabi_uldivmod>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	4b0d      	ldr	r3, [pc, #52]	; (8007f84 <UART_SetConfig+0x2d4>)
 8007f50:	fba3 1302 	umull	r1, r3, r3, r2
 8007f54:	095b      	lsrs	r3, r3, #5
 8007f56:	2164      	movs	r1, #100	; 0x64
 8007f58:	fb01 f303 	mul.w	r3, r1, r3
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	00db      	lsls	r3, r3, #3
 8007f60:	3332      	adds	r3, #50	; 0x32
 8007f62:	4a08      	ldr	r2, [pc, #32]	; (8007f84 <UART_SetConfig+0x2d4>)
 8007f64:	fba2 2303 	umull	r2, r3, r2, r3
 8007f68:	095b      	lsrs	r3, r3, #5
 8007f6a:	f003 0207 	and.w	r2, r3, #7
 8007f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4422      	add	r2, r4
 8007f76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f78:	e106      	b.n	8008188 <UART_SetConfig+0x4d8>
 8007f7a:	bf00      	nop
 8007f7c:	40011000 	.word	0x40011000
 8007f80:	40011400 	.word	0x40011400
 8007f84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007f96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007f9a:	4642      	mov	r2, r8
 8007f9c:	464b      	mov	r3, r9
 8007f9e:	1891      	adds	r1, r2, r2
 8007fa0:	6239      	str	r1, [r7, #32]
 8007fa2:	415b      	adcs	r3, r3
 8007fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8007fa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007faa:	4641      	mov	r1, r8
 8007fac:	1854      	adds	r4, r2, r1
 8007fae:	4649      	mov	r1, r9
 8007fb0:	eb43 0501 	adc.w	r5, r3, r1
 8007fb4:	f04f 0200 	mov.w	r2, #0
 8007fb8:	f04f 0300 	mov.w	r3, #0
 8007fbc:	00eb      	lsls	r3, r5, #3
 8007fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007fc2:	00e2      	lsls	r2, r4, #3
 8007fc4:	4614      	mov	r4, r2
 8007fc6:	461d      	mov	r5, r3
 8007fc8:	4643      	mov	r3, r8
 8007fca:	18e3      	adds	r3, r4, r3
 8007fcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007fd0:	464b      	mov	r3, r9
 8007fd2:	eb45 0303 	adc.w	r3, r5, r3
 8007fd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007fe6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007fea:	f04f 0200 	mov.w	r2, #0
 8007fee:	f04f 0300 	mov.w	r3, #0
 8007ff2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	008b      	lsls	r3, r1, #2
 8007ffa:	4621      	mov	r1, r4
 8007ffc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008000:	4621      	mov	r1, r4
 8008002:	008a      	lsls	r2, r1, #2
 8008004:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008008:	f7f8 feae 	bl	8000d68 <__aeabi_uldivmod>
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	4b60      	ldr	r3, [pc, #384]	; (8008194 <UART_SetConfig+0x4e4>)
 8008012:	fba3 2302 	umull	r2, r3, r3, r2
 8008016:	095b      	lsrs	r3, r3, #5
 8008018:	011c      	lsls	r4, r3, #4
 800801a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800801e:	2200      	movs	r2, #0
 8008020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008024:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008028:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800802c:	4642      	mov	r2, r8
 800802e:	464b      	mov	r3, r9
 8008030:	1891      	adds	r1, r2, r2
 8008032:	61b9      	str	r1, [r7, #24]
 8008034:	415b      	adcs	r3, r3
 8008036:	61fb      	str	r3, [r7, #28]
 8008038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800803c:	4641      	mov	r1, r8
 800803e:	1851      	adds	r1, r2, r1
 8008040:	6139      	str	r1, [r7, #16]
 8008042:	4649      	mov	r1, r9
 8008044:	414b      	adcs	r3, r1
 8008046:	617b      	str	r3, [r7, #20]
 8008048:	f04f 0200 	mov.w	r2, #0
 800804c:	f04f 0300 	mov.w	r3, #0
 8008050:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008054:	4659      	mov	r1, fp
 8008056:	00cb      	lsls	r3, r1, #3
 8008058:	4651      	mov	r1, sl
 800805a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800805e:	4651      	mov	r1, sl
 8008060:	00ca      	lsls	r2, r1, #3
 8008062:	4610      	mov	r0, r2
 8008064:	4619      	mov	r1, r3
 8008066:	4603      	mov	r3, r0
 8008068:	4642      	mov	r2, r8
 800806a:	189b      	adds	r3, r3, r2
 800806c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008070:	464b      	mov	r3, r9
 8008072:	460a      	mov	r2, r1
 8008074:	eb42 0303 	adc.w	r3, r2, r3
 8008078:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800807c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	67bb      	str	r3, [r7, #120]	; 0x78
 8008086:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008088:	f04f 0200 	mov.w	r2, #0
 800808c:	f04f 0300 	mov.w	r3, #0
 8008090:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008094:	4649      	mov	r1, r9
 8008096:	008b      	lsls	r3, r1, #2
 8008098:	4641      	mov	r1, r8
 800809a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800809e:	4641      	mov	r1, r8
 80080a0:	008a      	lsls	r2, r1, #2
 80080a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80080a6:	f7f8 fe5f 	bl	8000d68 <__aeabi_uldivmod>
 80080aa:	4602      	mov	r2, r0
 80080ac:	460b      	mov	r3, r1
 80080ae:	4611      	mov	r1, r2
 80080b0:	4b38      	ldr	r3, [pc, #224]	; (8008194 <UART_SetConfig+0x4e4>)
 80080b2:	fba3 2301 	umull	r2, r3, r3, r1
 80080b6:	095b      	lsrs	r3, r3, #5
 80080b8:	2264      	movs	r2, #100	; 0x64
 80080ba:	fb02 f303 	mul.w	r3, r2, r3
 80080be:	1acb      	subs	r3, r1, r3
 80080c0:	011b      	lsls	r3, r3, #4
 80080c2:	3332      	adds	r3, #50	; 0x32
 80080c4:	4a33      	ldr	r2, [pc, #204]	; (8008194 <UART_SetConfig+0x4e4>)
 80080c6:	fba2 2303 	umull	r2, r3, r2, r3
 80080ca:	095b      	lsrs	r3, r3, #5
 80080cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080d0:	441c      	add	r4, r3
 80080d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080d6:	2200      	movs	r2, #0
 80080d8:	673b      	str	r3, [r7, #112]	; 0x70
 80080da:	677a      	str	r2, [r7, #116]	; 0x74
 80080dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80080e0:	4642      	mov	r2, r8
 80080e2:	464b      	mov	r3, r9
 80080e4:	1891      	adds	r1, r2, r2
 80080e6:	60b9      	str	r1, [r7, #8]
 80080e8:	415b      	adcs	r3, r3
 80080ea:	60fb      	str	r3, [r7, #12]
 80080ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080f0:	4641      	mov	r1, r8
 80080f2:	1851      	adds	r1, r2, r1
 80080f4:	6039      	str	r1, [r7, #0]
 80080f6:	4649      	mov	r1, r9
 80080f8:	414b      	adcs	r3, r1
 80080fa:	607b      	str	r3, [r7, #4]
 80080fc:	f04f 0200 	mov.w	r2, #0
 8008100:	f04f 0300 	mov.w	r3, #0
 8008104:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008108:	4659      	mov	r1, fp
 800810a:	00cb      	lsls	r3, r1, #3
 800810c:	4651      	mov	r1, sl
 800810e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008112:	4651      	mov	r1, sl
 8008114:	00ca      	lsls	r2, r1, #3
 8008116:	4610      	mov	r0, r2
 8008118:	4619      	mov	r1, r3
 800811a:	4603      	mov	r3, r0
 800811c:	4642      	mov	r2, r8
 800811e:	189b      	adds	r3, r3, r2
 8008120:	66bb      	str	r3, [r7, #104]	; 0x68
 8008122:	464b      	mov	r3, r9
 8008124:	460a      	mov	r2, r1
 8008126:	eb42 0303 	adc.w	r3, r2, r3
 800812a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800812c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	663b      	str	r3, [r7, #96]	; 0x60
 8008136:	667a      	str	r2, [r7, #100]	; 0x64
 8008138:	f04f 0200 	mov.w	r2, #0
 800813c:	f04f 0300 	mov.w	r3, #0
 8008140:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008144:	4649      	mov	r1, r9
 8008146:	008b      	lsls	r3, r1, #2
 8008148:	4641      	mov	r1, r8
 800814a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800814e:	4641      	mov	r1, r8
 8008150:	008a      	lsls	r2, r1, #2
 8008152:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008156:	f7f8 fe07 	bl	8000d68 <__aeabi_uldivmod>
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	4b0d      	ldr	r3, [pc, #52]	; (8008194 <UART_SetConfig+0x4e4>)
 8008160:	fba3 1302 	umull	r1, r3, r3, r2
 8008164:	095b      	lsrs	r3, r3, #5
 8008166:	2164      	movs	r1, #100	; 0x64
 8008168:	fb01 f303 	mul.w	r3, r1, r3
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	011b      	lsls	r3, r3, #4
 8008170:	3332      	adds	r3, #50	; 0x32
 8008172:	4a08      	ldr	r2, [pc, #32]	; (8008194 <UART_SetConfig+0x4e4>)
 8008174:	fba2 2303 	umull	r2, r3, r2, r3
 8008178:	095b      	lsrs	r3, r3, #5
 800817a:	f003 020f 	and.w	r2, r3, #15
 800817e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4422      	add	r2, r4
 8008186:	609a      	str	r2, [r3, #8]
}
 8008188:	bf00      	nop
 800818a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800818e:	46bd      	mov	sp, r7
 8008190:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008194:	51eb851f 	.word	0x51eb851f

08008198 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f103 0208 	add.w	r2, r3, #8
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f04f 32ff 	mov.w	r2, #4294967295
 80081b0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f103 0208 	add.w	r2, r3, #8
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f103 0208 	add.w	r2, r3, #8
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80081cc:	bf00      	nop
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80081e6:	bf00      	nop
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80081f2:	b480      	push	{r7}
 80081f4:	b085      	sub	sp, #20
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
 80081fa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008208:	d103      	bne.n	8008212 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	60fb      	str	r3, [r7, #12]
 8008210:	e00c      	b.n	800822c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	3308      	adds	r3, #8
 8008216:	60fb      	str	r3, [r7, #12]
 8008218:	e002      	b.n	8008220 <vListInsert+0x2e>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	60fb      	str	r3, [r7, #12]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	429a      	cmp	r2, r3
 800822a:	d2f6      	bcs.n	800821a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	683a      	ldr	r2, [r7, #0]
 800823a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	683a      	ldr	r2, [r7, #0]
 8008246:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	1c5a      	adds	r2, r3, #1
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	601a      	str	r2, [r3, #0]
}
 8008258:	bf00      	nop
 800825a:	3714      	adds	r7, #20
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	6892      	ldr	r2, [r2, #8]
 800827a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	6852      	ldr	r2, [r2, #4]
 8008284:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	429a      	cmp	r2, r3
 800828e:	d103      	bne.n	8008298 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	689a      	ldr	r2, [r3, #8]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	1e5a      	subs	r2, r3, #1
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3714      	adds	r7, #20
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b086      	sub	sp, #24
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80082c2:	2301      	movs	r3, #1
 80082c4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d10a      	bne.n	80082e6 <xQueueGenericReset+0x2e>
        __asm volatile
 80082d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d4:	f383 8811 	msr	BASEPRI, r3
 80082d8:	f3bf 8f6f 	isb	sy
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	60fb      	str	r3, [r7, #12]
    }
 80082e2:	bf00      	nop
 80082e4:	e7fe      	b.n	80082e4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d05d      	beq.n	80083a8 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d059      	beq.n	80083a8 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082fc:	2100      	movs	r1, #0
 80082fe:	fba3 2302 	umull	r2, r3, r3, r2
 8008302:	2b00      	cmp	r3, #0
 8008304:	d000      	beq.n	8008308 <xQueueGenericReset+0x50>
 8008306:	2101      	movs	r1, #1
 8008308:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800830a:	2b00      	cmp	r3, #0
 800830c:	d14c      	bne.n	80083a8 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800830e:	f002 fd93 	bl	800ae38 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800831a:	6939      	ldr	r1, [r7, #16]
 800831c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800831e:	fb01 f303 	mul.w	r3, r1, r3
 8008322:	441a      	add	r2, r3
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	2200      	movs	r2, #0
 800832c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800833e:	3b01      	subs	r3, #1
 8008340:	6939      	ldr	r1, [r7, #16]
 8008342:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008344:	fb01 f303 	mul.w	r3, r1, r3
 8008348:	441a      	add	r2, r3
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	22ff      	movs	r2, #255	; 0xff
 8008352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	22ff      	movs	r2, #255	; 0xff
 800835a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d114      	bne.n	800838e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d01a      	beq.n	80083a2 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	3310      	adds	r3, #16
 8008370:	4618      	mov	r0, r3
 8008372:	f001 fa7b 	bl	800986c <xTaskRemoveFromEventList>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d012      	beq.n	80083a2 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800837c:	4b15      	ldr	r3, [pc, #84]	; (80083d4 <xQueueGenericReset+0x11c>)
 800837e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	e009      	b.n	80083a2 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	3310      	adds	r3, #16
 8008392:	4618      	mov	r0, r3
 8008394:	f7ff ff00 	bl	8008198 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	3324      	adds	r3, #36	; 0x24
 800839c:	4618      	mov	r0, r3
 800839e:	f7ff fefb 	bl	8008198 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80083a2:	f002 fd79 	bl	800ae98 <vPortExitCritical>
 80083a6:	e001      	b.n	80083ac <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80083a8:	2300      	movs	r3, #0
 80083aa:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d10a      	bne.n	80083c8 <xQueueGenericReset+0x110>
        __asm volatile
 80083b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b6:	f383 8811 	msr	BASEPRI, r3
 80083ba:	f3bf 8f6f 	isb	sy
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	60bb      	str	r3, [r7, #8]
    }
 80083c4:	bf00      	nop
 80083c6:	e7fe      	b.n	80083c6 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80083c8:	697b      	ldr	r3, [r7, #20]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3718      	adds	r7, #24
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	e000ed04 	.word	0xe000ed04

080083d8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80083d8:	b580      	push	{r7, lr}
 80083da:	b08a      	sub	sp, #40	; 0x28
 80083dc:	af02      	add	r7, sp, #8
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	4613      	mov	r3, r2
 80083e4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80083e6:	2300      	movs	r3, #0
 80083e8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d02e      	beq.n	800844e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80083f0:	2100      	movs	r1, #0
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	fba3 2302 	umull	r2, r3, r3, r2
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d000      	beq.n	8008400 <xQueueGenericCreate+0x28>
 80083fe:	2101      	movs	r1, #1
 8008400:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8008402:	2b00      	cmp	r3, #0
 8008404:	d123      	bne.n	800844e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	68ba      	ldr	r2, [r7, #8]
 800840a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800840e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8008412:	d81c      	bhi.n	800844e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	fb02 f303 	mul.w	r3, r2, r3
 800841c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	3350      	adds	r3, #80	; 0x50
 8008422:	4618      	mov	r0, r3
 8008424:	f002 fe32 	bl	800b08c <pvPortMalloc>
 8008428:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d01c      	beq.n	800846a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	3350      	adds	r3, #80	; 0x50
 8008438:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800843a:	79fa      	ldrb	r2, [r7, #7]
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	4613      	mov	r3, r2
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	68b9      	ldr	r1, [r7, #8]
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f000 f814 	bl	8008474 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800844c:	e00d      	b.n	800846a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d10a      	bne.n	800846a <xQueueGenericCreate+0x92>
        __asm volatile
 8008454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008458:	f383 8811 	msr	BASEPRI, r3
 800845c:	f3bf 8f6f 	isb	sy
 8008460:	f3bf 8f4f 	dsb	sy
 8008464:	613b      	str	r3, [r7, #16]
    }
 8008466:	bf00      	nop
 8008468:	e7fe      	b.n	8008468 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800846a:	69fb      	ldr	r3, [r7, #28]
    }
 800846c:	4618      	mov	r0, r3
 800846e:	3720      	adds	r7, #32
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
 8008480:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d103      	bne.n	8008490 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	69ba      	ldr	r2, [r7, #24]
 800848c:	601a      	str	r2, [r3, #0]
 800848e:	e002      	b.n	8008496 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80084a2:	2101      	movs	r1, #1
 80084a4:	69b8      	ldr	r0, [r7, #24]
 80084a6:	f7ff ff07 	bl	80082b8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	78fa      	ldrb	r2, [r7, #3]
 80084ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80084b2:	78fb      	ldrb	r3, [r7, #3]
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	68f9      	ldr	r1, [r7, #12]
 80084b8:	2073      	movs	r0, #115	; 0x73
 80084ba:	f003 fd2f 	bl	800bf1c <SEGGER_SYSVIEW_RecordU32x3>
}
 80084be:	bf00      	nop
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
	...

080084c8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b090      	sub	sp, #64	; 0x40
 80084cc:	af02      	add	r7, sp, #8
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
 80084d4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80084d6:	2300      	movs	r3, #0
 80084d8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80084de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10a      	bne.n	80084fa <xQueueGenericSend+0x32>
        __asm volatile
 80084e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e8:	f383 8811 	msr	BASEPRI, r3
 80084ec:	f3bf 8f6f 	isb	sy
 80084f0:	f3bf 8f4f 	dsb	sy
 80084f4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80084f6:	bf00      	nop
 80084f8:	e7fe      	b.n	80084f8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d103      	bne.n	8008508 <xQueueGenericSend+0x40>
 8008500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008504:	2b00      	cmp	r3, #0
 8008506:	d101      	bne.n	800850c <xQueueGenericSend+0x44>
 8008508:	2301      	movs	r3, #1
 800850a:	e000      	b.n	800850e <xQueueGenericSend+0x46>
 800850c:	2300      	movs	r3, #0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10a      	bne.n	8008528 <xQueueGenericSend+0x60>
        __asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8008524:	bf00      	nop
 8008526:	e7fe      	b.n	8008526 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	2b02      	cmp	r3, #2
 800852c:	d103      	bne.n	8008536 <xQueueGenericSend+0x6e>
 800852e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008532:	2b01      	cmp	r3, #1
 8008534:	d101      	bne.n	800853a <xQueueGenericSend+0x72>
 8008536:	2301      	movs	r3, #1
 8008538:	e000      	b.n	800853c <xQueueGenericSend+0x74>
 800853a:	2300      	movs	r3, #0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10a      	bne.n	8008556 <xQueueGenericSend+0x8e>
        __asm volatile
 8008540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	623b      	str	r3, [r7, #32]
    }
 8008552:	bf00      	nop
 8008554:	e7fe      	b.n	8008554 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008556:	f001 fb9d 	bl	8009c94 <xTaskGetSchedulerState>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d102      	bne.n	8008566 <xQueueGenericSend+0x9e>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d101      	bne.n	800856a <xQueueGenericSend+0xa2>
 8008566:	2301      	movs	r3, #1
 8008568:	e000      	b.n	800856c <xQueueGenericSend+0xa4>
 800856a:	2300      	movs	r3, #0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10a      	bne.n	8008586 <xQueueGenericSend+0xbe>
        __asm volatile
 8008570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	61fb      	str	r3, [r7, #28]
    }
 8008582:	bf00      	nop
 8008584:	e7fe      	b.n	8008584 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008586:	f002 fc57 	bl	800ae38 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008592:	429a      	cmp	r2, r3
 8008594:	d302      	bcc.n	800859c <xQueueGenericSend+0xd4>
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	2b02      	cmp	r3, #2
 800859a:	d136      	bne.n	800860a <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 800859c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859e:	4618      	mov	r0, r3
 80085a0:	f004 fa72 	bl	800ca88 <SEGGER_SYSVIEW_ShrinkId>
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	6879      	ldr	r1, [r7, #4]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	9300      	str	r3, [sp, #0]
 80085ac:	460b      	mov	r3, r1
 80085ae:	4601      	mov	r1, r0
 80085b0:	205a      	movs	r0, #90	; 0x5a
 80085b2:	f003 fd29 	bl	800c008 <SEGGER_SYSVIEW_RecordU32x4>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	68b9      	ldr	r1, [r7, #8]
 80085ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085bc:	f000 fa80 	bl	8008ac0 <prvCopyDataToQueue>
 80085c0:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d010      	beq.n	80085ec <xQueueGenericSend+0x124>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085cc:	3324      	adds	r3, #36	; 0x24
 80085ce:	4618      	mov	r0, r3
 80085d0:	f001 f94c 	bl	800986c <xTaskRemoveFromEventList>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d013      	beq.n	8008602 <xQueueGenericSend+0x13a>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80085da:	4b4d      	ldr	r3, [pc, #308]	; (8008710 <xQueueGenericSend+0x248>)
 80085dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085e0:	601a      	str	r2, [r3, #0]
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	e00a      	b.n	8008602 <xQueueGenericSend+0x13a>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80085ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d007      	beq.n	8008602 <xQueueGenericSend+0x13a>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80085f2:	4b47      	ldr	r3, [pc, #284]	; (8008710 <xQueueGenericSend+0x248>)
 80085f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085f8:	601a      	str	r2, [r3, #0]
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8008602:	f002 fc49 	bl	800ae98 <vPortExitCritical>
                return pdPASS;
 8008606:	2301      	movs	r3, #1
 8008608:	e07d      	b.n	8008706 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d110      	bne.n	8008632 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8008610:	f002 fc42 	bl	800ae98 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8008614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008616:	4618      	mov	r0, r3
 8008618:	f004 fa36 	bl	800ca88 <SEGGER_SYSVIEW_ShrinkId>
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	6879      	ldr	r1, [r7, #4]
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	460b      	mov	r3, r1
 8008626:	4601      	mov	r1, r0
 8008628:	205a      	movs	r0, #90	; 0x5a
 800862a:	f003 fced 	bl	800c008 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800862e:	2300      	movs	r3, #0
 8008630:	e069      	b.n	8008706 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008634:	2b00      	cmp	r3, #0
 8008636:	d106      	bne.n	8008646 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008638:	f107 0314 	add.w	r3, r7, #20
 800863c:	4618      	mov	r0, r3
 800863e:	f001 f9ed 	bl	8009a1c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008642:	2301      	movs	r3, #1
 8008644:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008646:	f002 fc27 	bl	800ae98 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800864a:	f000 fdf5 	bl	8009238 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800864e:	f002 fbf3 	bl	800ae38 <vPortEnterCritical>
 8008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008654:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008658:	b25b      	sxtb	r3, r3
 800865a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865e:	d103      	bne.n	8008668 <xQueueGenericSend+0x1a0>
 8008660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008662:	2200      	movs	r2, #0
 8008664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800866e:	b25b      	sxtb	r3, r3
 8008670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008674:	d103      	bne.n	800867e <xQueueGenericSend+0x1b6>
 8008676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008678:	2200      	movs	r2, #0
 800867a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800867e:	f002 fc0b 	bl	800ae98 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008682:	1d3a      	adds	r2, r7, #4
 8008684:	f107 0314 	add.w	r3, r7, #20
 8008688:	4611      	mov	r1, r2
 800868a:	4618      	mov	r0, r3
 800868c:	f001 f9dc 	bl	8009a48 <xTaskCheckForTimeOut>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d124      	bne.n	80086e0 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008696:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008698:	f000 fb0a 	bl	8008cb0 <prvIsQueueFull>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d018      	beq.n	80086d4 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80086a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a4:	3310      	adds	r3, #16
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	4611      	mov	r1, r2
 80086aa:	4618      	mov	r0, r3
 80086ac:	f001 f872 	bl	8009794 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80086b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086b2:	f000 fa95 	bl	8008be0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80086b6:	f000 fdcd 	bl	8009254 <xTaskResumeAll>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f47f af62 	bne.w	8008586 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80086c2:	4b13      	ldr	r3, [pc, #76]	; (8008710 <xQueueGenericSend+0x248>)
 80086c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086c8:	601a      	str	r2, [r3, #0]
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	e758      	b.n	8008586 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80086d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086d6:	f000 fa83 	bl	8008be0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80086da:	f000 fdbb 	bl	8009254 <xTaskResumeAll>
 80086de:	e752      	b.n	8008586 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80086e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086e2:	f000 fa7d 	bl	8008be0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80086e6:	f000 fdb5 	bl	8009254 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80086ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ec:	4618      	mov	r0, r3
 80086ee:	f004 f9cb 	bl	800ca88 <SEGGER_SYSVIEW_ShrinkId>
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	6879      	ldr	r1, [r7, #4]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	9300      	str	r3, [sp, #0]
 80086fa:	460b      	mov	r3, r1
 80086fc:	4601      	mov	r1, r0
 80086fe:	205a      	movs	r0, #90	; 0x5a
 8008700:	f003 fc82 	bl	800c008 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8008704:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8008706:	4618      	mov	r0, r3
 8008708:	3738      	adds	r7, #56	; 0x38
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	e000ed04 	.word	0xe000ed04

08008714 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b092      	sub	sp, #72	; 0x48
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	607a      	str	r2, [r7, #4]
 8008720:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 8008726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008728:	2b00      	cmp	r3, #0
 800872a:	d10a      	bne.n	8008742 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 800872c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008730:	f383 8811 	msr	BASEPRI, r3
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 800873e:	bf00      	nop
 8008740:	e7fe      	b.n	8008740 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d103      	bne.n	8008750 <xQueueGenericSendFromISR+0x3c>
 8008748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800874a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874c:	2b00      	cmp	r3, #0
 800874e:	d101      	bne.n	8008754 <xQueueGenericSendFromISR+0x40>
 8008750:	2301      	movs	r3, #1
 8008752:	e000      	b.n	8008756 <xQueueGenericSendFromISR+0x42>
 8008754:	2300      	movs	r3, #0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d10a      	bne.n	8008770 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800875a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800876c:	bf00      	nop
 800876e:	e7fe      	b.n	800876e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	2b02      	cmp	r3, #2
 8008774:	d103      	bne.n	800877e <xQueueGenericSendFromISR+0x6a>
 8008776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800877a:	2b01      	cmp	r3, #1
 800877c:	d101      	bne.n	8008782 <xQueueGenericSendFromISR+0x6e>
 800877e:	2301      	movs	r3, #1
 8008780:	e000      	b.n	8008784 <xQueueGenericSendFromISR+0x70>
 8008782:	2300      	movs	r3, #0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10a      	bne.n	800879e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8008788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800879a:	bf00      	nop
 800879c:	e7fe      	b.n	800879c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800879e:	f002 fc35 	bl	800b00c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80087a2:	f3ef 8211 	mrs	r2, BASEPRI
 80087a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087aa:	f383 8811 	msr	BASEPRI, r3
 80087ae:	f3bf 8f6f 	isb	sy
 80087b2:	f3bf 8f4f 	dsb	sy
 80087b6:	623a      	str	r2, [r7, #32]
 80087b8:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80087ba:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d302      	bcc.n	80087d0 <xQueueGenericSendFromISR+0xbc>
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	d150      	bne.n	8008872 <xQueueGenericSendFromISR+0x15e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80087d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087de:	637b      	str	r3, [r7, #52]	; 0x34

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80087e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087e2:	4618      	mov	r0, r3
 80087e4:	f004 f950 	bl	800ca88 <SEGGER_SYSVIEW_ShrinkId>
 80087e8:	4601      	mov	r1, r0
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	461a      	mov	r2, r3
 80087ee:	2060      	movs	r0, #96	; 0x60
 80087f0:	f003 fb3a 	bl	800be68 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087f4:	683a      	ldr	r2, [r7, #0]
 80087f6:	68b9      	ldr	r1, [r7, #8]
 80087f8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80087fa:	f000 f961 	bl	8008ac0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80087fe:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8008802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008806:	d112      	bne.n	800882e <xQueueGenericSendFromISR+0x11a>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800880a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880c:	2b00      	cmp	r3, #0
 800880e:	d02d      	beq.n	800886c <xQueueGenericSendFromISR+0x158>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008812:	3324      	adds	r3, #36	; 0x24
 8008814:	4618      	mov	r0, r3
 8008816:	f001 f829 	bl	800986c <xTaskRemoveFromEventList>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d025      	beq.n	800886c <xQueueGenericSendFromISR+0x158>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d022      	beq.n	800886c <xQueueGenericSendFromISR+0x158>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2201      	movs	r2, #1
 800882a:	601a      	str	r2, [r3, #0]
 800882c:	e01e      	b.n	800886c <xQueueGenericSendFromISR+0x158>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800882e:	f000 fe21 	bl	8009474 <uxTaskGetNumberOfTasks>
 8008832:	6338      	str	r0, [r7, #48]	; 0x30
 8008834:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8008838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800883a:	429a      	cmp	r2, r3
 800883c:	d916      	bls.n	800886c <xQueueGenericSendFromISR+0x158>
 800883e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8008842:	2b7f      	cmp	r3, #127	; 0x7f
 8008844:	d10a      	bne.n	800885c <xQueueGenericSendFromISR+0x148>
        __asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	61bb      	str	r3, [r7, #24]
    }
 8008858:	bf00      	nop
 800885a:	e7fe      	b.n	800885a <xQueueGenericSendFromISR+0x146>
 800885c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008860:	3301      	adds	r3, #1
 8008862:	b2db      	uxtb	r3, r3
 8008864:	b25a      	sxtb	r2, r3
 8008866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800886c:	2301      	movs	r3, #1
 800886e:	647b      	str	r3, [r7, #68]	; 0x44
        {
 8008870:	e00b      	b.n	800888a <xQueueGenericSendFromISR+0x176>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8008872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008874:	4618      	mov	r0, r3
 8008876:	f004 f907 	bl	800ca88 <SEGGER_SYSVIEW_ShrinkId>
 800887a:	4601      	mov	r1, r0
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	461a      	mov	r2, r3
 8008880:	2060      	movs	r0, #96	; 0x60
 8008882:	f003 faf1 	bl	800be68 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8008886:	2300      	movs	r3, #0
 8008888:	647b      	str	r3, [r7, #68]	; 0x44
 800888a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800888c:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8008894:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8008896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008898:	4618      	mov	r0, r3
 800889a:	3748      	adds	r7, #72	; 0x48
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80088a0:	b590      	push	{r4, r7, lr}
 80088a2:	b08f      	sub	sp, #60	; 0x3c
 80088a4:	af02      	add	r7, sp, #8
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80088ac:	2300      	movs	r3, #0
 80088ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80088b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d10a      	bne.n	80088d0 <xQueueReceive+0x30>
        __asm volatile
 80088ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088be:	f383 8811 	msr	BASEPRI, r3
 80088c2:	f3bf 8f6f 	isb	sy
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	623b      	str	r3, [r7, #32]
    }
 80088cc:	bf00      	nop
 80088ce:	e7fe      	b.n	80088ce <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d103      	bne.n	80088de <xQueueReceive+0x3e>
 80088d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d101      	bne.n	80088e2 <xQueueReceive+0x42>
 80088de:	2301      	movs	r3, #1
 80088e0:	e000      	b.n	80088e4 <xQueueReceive+0x44>
 80088e2:	2300      	movs	r3, #0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10a      	bne.n	80088fe <xQueueReceive+0x5e>
        __asm volatile
 80088e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ec:	f383 8811 	msr	BASEPRI, r3
 80088f0:	f3bf 8f6f 	isb	sy
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	61fb      	str	r3, [r7, #28]
    }
 80088fa:	bf00      	nop
 80088fc:	e7fe      	b.n	80088fc <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088fe:	f001 f9c9 	bl	8009c94 <xTaskGetSchedulerState>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d102      	bne.n	800890e <xQueueReceive+0x6e>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d101      	bne.n	8008912 <xQueueReceive+0x72>
 800890e:	2301      	movs	r3, #1
 8008910:	e000      	b.n	8008914 <xQueueReceive+0x74>
 8008912:	2300      	movs	r3, #0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d10a      	bne.n	800892e <xQueueReceive+0x8e>
        __asm volatile
 8008918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891c:	f383 8811 	msr	BASEPRI, r3
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	61bb      	str	r3, [r7, #24]
    }
 800892a:	bf00      	nop
 800892c:	e7fe      	b.n	800892c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800892e:	f002 fa83 	bl	800ae38 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008936:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893a:	2b00      	cmp	r3, #0
 800893c:	d02f      	beq.n	800899e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800893e:	68b9      	ldr	r1, [r7, #8]
 8008940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008942:	f000 f927 	bl	8008b94 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8008946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008948:	4618      	mov	r0, r3
 800894a:	f004 f89d 	bl	800ca88 <SEGGER_SYSVIEW_ShrinkId>
 800894e:	4604      	mov	r4, r0
 8008950:	2000      	movs	r0, #0
 8008952:	f004 f899 	bl	800ca88 <SEGGER_SYSVIEW_ShrinkId>
 8008956:	4602      	mov	r2, r0
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2101      	movs	r1, #1
 800895c:	9100      	str	r1, [sp, #0]
 800895e:	4621      	mov	r1, r4
 8008960:	205c      	movs	r0, #92	; 0x5c
 8008962:	f003 fb51 	bl	800c008 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008968:	1e5a      	subs	r2, r3, #1
 800896a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800896e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00f      	beq.n	8008996 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008978:	3310      	adds	r3, #16
 800897a:	4618      	mov	r0, r3
 800897c:	f000 ff76 	bl	800986c <xTaskRemoveFromEventList>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d007      	beq.n	8008996 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8008986:	4b4d      	ldr	r3, [pc, #308]	; (8008abc <xQueueReceive+0x21c>)
 8008988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800898c:	601a      	str	r2, [r3, #0]
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8008996:	f002 fa7f 	bl	800ae98 <vPortExitCritical>
                return pdPASS;
 800899a:	2301      	movs	r3, #1
 800899c:	e08a      	b.n	8008ab4 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d113      	bne.n	80089cc <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80089a4:	f002 fa78 	bl	800ae98 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80089a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089aa:	4618      	mov	r0, r3
 80089ac:	f004 f86c 	bl	800ca88 <SEGGER_SYSVIEW_ShrinkId>
 80089b0:	4604      	mov	r4, r0
 80089b2:	2000      	movs	r0, #0
 80089b4:	f004 f868 	bl	800ca88 <SEGGER_SYSVIEW_ShrinkId>
 80089b8:	4602      	mov	r2, r0
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2101      	movs	r1, #1
 80089be:	9100      	str	r1, [sp, #0]
 80089c0:	4621      	mov	r1, r4
 80089c2:	205c      	movs	r0, #92	; 0x5c
 80089c4:	f003 fb20 	bl	800c008 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80089c8:	2300      	movs	r3, #0
 80089ca:	e073      	b.n	8008ab4 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80089cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d106      	bne.n	80089e0 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80089d2:	f107 0310 	add.w	r3, r7, #16
 80089d6:	4618      	mov	r0, r3
 80089d8:	f001 f820 	bl	8009a1c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80089dc:	2301      	movs	r3, #1
 80089de:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80089e0:	f002 fa5a 	bl	800ae98 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80089e4:	f000 fc28 	bl	8009238 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80089e8:	f002 fa26 	bl	800ae38 <vPortEnterCritical>
 80089ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089f2:	b25b      	sxtb	r3, r3
 80089f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f8:	d103      	bne.n	8008a02 <xQueueReceive+0x162>
 80089fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a08:	b25b      	sxtb	r3, r3
 8008a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0e:	d103      	bne.n	8008a18 <xQueueReceive+0x178>
 8008a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a18:	f002 fa3e 	bl	800ae98 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a1c:	1d3a      	adds	r2, r7, #4
 8008a1e:	f107 0310 	add.w	r3, r7, #16
 8008a22:	4611      	mov	r1, r2
 8008a24:	4618      	mov	r0, r3
 8008a26:	f001 f80f 	bl	8009a48 <xTaskCheckForTimeOut>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d124      	bne.n	8008a7a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a32:	f000 f927 	bl	8008c84 <prvIsQueueEmpty>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d018      	beq.n	8008a6e <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3e:	3324      	adds	r3, #36	; 0x24
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	4611      	mov	r1, r2
 8008a44:	4618      	mov	r0, r3
 8008a46:	f000 fea5 	bl	8009794 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8008a4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a4c:	f000 f8c8 	bl	8008be0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8008a50:	f000 fc00 	bl	8009254 <xTaskResumeAll>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f47f af69 	bne.w	800892e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8008a5c:	4b17      	ldr	r3, [pc, #92]	; (8008abc <xQueueReceive+0x21c>)
 8008a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a62:	601a      	str	r2, [r3, #0]
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	e75f      	b.n	800892e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8008a6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a70:	f000 f8b6 	bl	8008be0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8008a74:	f000 fbee 	bl	8009254 <xTaskResumeAll>
 8008a78:	e759      	b.n	800892e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8008a7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a7c:	f000 f8b0 	bl	8008be0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008a80:	f000 fbe8 	bl	8009254 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a86:	f000 f8fd 	bl	8008c84 <prvIsQueueEmpty>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f43f af4e 	beq.w	800892e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a94:	4618      	mov	r0, r3
 8008a96:	f003 fff7 	bl	800ca88 <SEGGER_SYSVIEW_ShrinkId>
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	2000      	movs	r0, #0
 8008a9e:	f003 fff3 	bl	800ca88 <SEGGER_SYSVIEW_ShrinkId>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2101      	movs	r1, #1
 8008aa8:	9100      	str	r1, [sp, #0]
 8008aaa:	4621      	mov	r1, r4
 8008aac:	205c      	movs	r0, #92	; 0x5c
 8008aae:	f003 faab 	bl	800c008 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8008ab2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3734      	adds	r7, #52	; 0x34
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd90      	pop	{r4, r7, pc}
 8008abc:	e000ed04 	.word	0xe000ed04

08008ac0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b086      	sub	sp, #24
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8008acc:	2300      	movs	r3, #0
 8008ace:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10d      	bne.n	8008afa <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d14d      	bne.n	8008b82 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	4618      	mov	r0, r3
 8008aec:	f001 f8f0 	bl	8009cd0 <xTaskPriorityDisinherit>
 8008af0:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	609a      	str	r2, [r3, #8]
 8008af8:	e043      	b.n	8008b82 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d119      	bne.n	8008b34 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6858      	ldr	r0, [r3, #4]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b08:	461a      	mov	r2, r3
 8008b0a:	68b9      	ldr	r1, [r7, #8]
 8008b0c:	f004 ffc3 	bl	800da96 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	685a      	ldr	r2, [r3, #4]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b18:	441a      	add	r2, r3
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	685a      	ldr	r2, [r3, #4]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d32b      	bcc.n	8008b82 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	605a      	str	r2, [r3, #4]
 8008b32:	e026      	b.n	8008b82 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	68d8      	ldr	r0, [r3, #12]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	68b9      	ldr	r1, [r7, #8]
 8008b40:	f004 ffa9 	bl	800da96 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	68da      	ldr	r2, [r3, #12]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4c:	425b      	negs	r3, r3
 8008b4e:	441a      	add	r2, r3
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	68da      	ldr	r2, [r3, #12]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d207      	bcs.n	8008b70 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	689a      	ldr	r2, [r3, #8]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b68:	425b      	negs	r3, r3
 8008b6a:	441a      	add	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d105      	bne.n	8008b82 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d002      	beq.n	8008b82 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	1c5a      	adds	r2, r3, #1
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8008b8a:	697b      	ldr	r3, [r7, #20]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3718      	adds	r7, #24
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d018      	beq.n	8008bd8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68da      	ldr	r2, [r3, #12]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bae:	441a      	add	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	68da      	ldr	r2, [r3, #12]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d303      	bcc.n	8008bc8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	68d9      	ldr	r1, [r3, #12]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	6838      	ldr	r0, [r7, #0]
 8008bd4:	f004 ff5f 	bl	800da96 <memcpy>
    }
}
 8008bd8:	bf00      	nop
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8008be8:	f002 f926 	bl	800ae38 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bf2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008bf4:	e011      	b.n	8008c1a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d012      	beq.n	8008c24 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	3324      	adds	r3, #36	; 0x24
 8008c02:	4618      	mov	r0, r3
 8008c04:	f000 fe32 	bl	800986c <xTaskRemoveFromEventList>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d001      	beq.n	8008c12 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8008c0e:	f000 ff81 	bl	8009b14 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
 8008c14:	3b01      	subs	r3, #1
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	dce9      	bgt.n	8008bf6 <prvUnlockQueue+0x16>
 8008c22:	e000      	b.n	8008c26 <prvUnlockQueue+0x46>
                    break;
 8008c24:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	22ff      	movs	r2, #255	; 0xff
 8008c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8008c2e:	f002 f933 	bl	800ae98 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8008c32:	f002 f901 	bl	800ae38 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c3c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c3e:	e011      	b.n	8008c64 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d012      	beq.n	8008c6e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	3310      	adds	r3, #16
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 fe0d 	bl	800986c <xTaskRemoveFromEventList>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d001      	beq.n	8008c5c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8008c58:	f000 ff5c 	bl	8009b14 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8008c5c:	7bbb      	ldrb	r3, [r7, #14]
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	dce9      	bgt.n	8008c40 <prvUnlockQueue+0x60>
 8008c6c:	e000      	b.n	8008c70 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8008c6e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	22ff      	movs	r2, #255	; 0xff
 8008c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8008c78:	f002 f90e 	bl	800ae98 <vPortExitCritical>
}
 8008c7c:	bf00      	nop
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8008c8c:	f002 f8d4 	bl	800ae38 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d102      	bne.n	8008c9e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	60fb      	str	r3, [r7, #12]
 8008c9c:	e001      	b.n	8008ca2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8008ca2:	f002 f8f9 	bl	800ae98 <vPortExitCritical>

    return xReturn;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8008cb8:	f002 f8be 	bl	800ae38 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d102      	bne.n	8008cce <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	60fb      	str	r3, [r7, #12]
 8008ccc:	e001      	b.n	8008cd2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8008cd2:	f002 f8e1 	bl	800ae98 <vPortExitCritical>

    return xReturn;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8008cea:	2300      	movs	r3, #0
 8008cec:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d10a      	bne.n	8008d0a <vQueueAddToRegistry+0x2a>
        __asm volatile
 8008cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf8:	f383 8811 	msr	BASEPRI, r3
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	60fb      	str	r3, [r7, #12]
    }
 8008d06:	bf00      	nop
 8008d08:	e7fe      	b.n	8008d08 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d024      	beq.n	8008d5a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d10:	2300      	movs	r3, #0
 8008d12:	617b      	str	r3, [r7, #20]
 8008d14:	e01e      	b.n	8008d54 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008d16:	4a1c      	ldr	r2, [pc, #112]	; (8008d88 <vQueueAddToRegistry+0xa8>)
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	00db      	lsls	r3, r3, #3
 8008d1c:	4413      	add	r3, r2
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d105      	bne.n	8008d32 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	00db      	lsls	r3, r3, #3
 8008d2a:	4a17      	ldr	r2, [pc, #92]	; (8008d88 <vQueueAddToRegistry+0xa8>)
 8008d2c:	4413      	add	r3, r2
 8008d2e:	613b      	str	r3, [r7, #16]
                    break;
 8008d30:	e013      	b.n	8008d5a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d10a      	bne.n	8008d4e <vQueueAddToRegistry+0x6e>
 8008d38:	4a13      	ldr	r2, [pc, #76]	; (8008d88 <vQueueAddToRegistry+0xa8>)
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d104      	bne.n	8008d4e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	00db      	lsls	r3, r3, #3
 8008d48:	4a0f      	ldr	r2, [pc, #60]	; (8008d88 <vQueueAddToRegistry+0xa8>)
 8008d4a:	4413      	add	r3, r2
 8008d4c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	3301      	adds	r3, #1
 8008d52:	617b      	str	r3, [r7, #20]
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	2b07      	cmp	r3, #7
 8008d58:	d9dd      	bls.n	8008d16 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00f      	beq.n	8008d80 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	683a      	ldr	r2, [r7, #0]
 8008d64:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f003 fe8a 	bl	800ca88 <SEGGER_SYSVIEW_ShrinkId>
 8008d74:	4601      	mov	r1, r0
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	461a      	mov	r2, r3
 8008d7a:	2071      	movs	r0, #113	; 0x71
 8008d7c:	f003 f874 	bl	800be68 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8008d80:	bf00      	nop
 8008d82:	3718      	adds	r7, #24
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	200008d4 	.word	0x200008d4

08008d8c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b086      	sub	sp, #24
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8008d9c:	f002 f84c 	bl	800ae38 <vPortEnterCritical>
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008da6:	b25b      	sxtb	r3, r3
 8008da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dac:	d103      	bne.n	8008db6 <vQueueWaitForMessageRestricted+0x2a>
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dbc:	b25b      	sxtb	r3, r3
 8008dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc2:	d103      	bne.n	8008dcc <vQueueWaitForMessageRestricted+0x40>
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008dcc:	f002 f864 	bl	800ae98 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d106      	bne.n	8008de6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	3324      	adds	r3, #36	; 0x24
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	68b9      	ldr	r1, [r7, #8]
 8008de0:	4618      	mov	r0, r3
 8008de2:	f000 fcfb 	bl	80097dc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8008de6:	6978      	ldr	r0, [r7, #20]
 8008de8:	f7ff fefa 	bl	8008be0 <prvUnlockQueue>
    }
 8008dec:	bf00      	nop
 8008dee:	3718      	adds	r7, #24
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b08c      	sub	sp, #48	; 0x30
 8008df8:	af04      	add	r7, sp, #16
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	603b      	str	r3, [r7, #0]
 8008e00:	4613      	mov	r3, r2
 8008e02:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e04:	88fb      	ldrh	r3, [r7, #6]
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f002 f93f 	bl	800b08c <pvPortMalloc>
 8008e0e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d013      	beq.n	8008e3e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008e16:	2058      	movs	r0, #88	; 0x58
 8008e18:	f002 f938 	bl	800b08c <pvPortMalloc>
 8008e1c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d008      	beq.n	8008e36 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8008e24:	2258      	movs	r2, #88	; 0x58
 8008e26:	2100      	movs	r1, #0
 8008e28:	69f8      	ldr	r0, [r7, #28]
 8008e2a:	f004 fdc6 	bl	800d9ba <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	631a      	str	r2, [r3, #48]	; 0x30
 8008e34:	e005      	b.n	8008e42 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8008e36:	6978      	ldr	r0, [r7, #20]
 8008e38:	f002 f9e2 	bl	800b200 <vPortFree>
 8008e3c:	e001      	b.n	8008e42 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d013      	beq.n	8008e70 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008e48:	88fa      	ldrh	r2, [r7, #6]
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	9303      	str	r3, [sp, #12]
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	9302      	str	r3, [sp, #8]
 8008e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e54:	9301      	str	r3, [sp, #4]
 8008e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e58:	9300      	str	r3, [sp, #0]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	68b9      	ldr	r1, [r7, #8]
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f000 f80e 	bl	8008e80 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8008e64:	69f8      	ldr	r0, [r7, #28]
 8008e66:	f000 f899 	bl	8008f9c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	61bb      	str	r3, [r7, #24]
 8008e6e:	e002      	b.n	8008e76 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e70:	f04f 33ff 	mov.w	r3, #4294967295
 8008e74:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8008e76:	69bb      	ldr	r3, [r7, #24]
    }
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3720      	adds	r7, #32
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b088      	sub	sp, #32
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
 8008e8c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	461a      	mov	r2, r3
 8008e98:	21a5      	movs	r1, #165	; 0xa5
 8008e9a:	f004 fd8e 	bl	800d9ba <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	4413      	add	r3, r2
 8008eae:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	f023 0307 	bic.w	r3, r3, #7
 8008eb6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	f003 0307 	and.w	r3, r3, #7
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00a      	beq.n	8008ed8 <prvInitialiseNewTask+0x58>
        __asm volatile
 8008ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	617b      	str	r3, [r7, #20]
    }
 8008ed4:	bf00      	nop
 8008ed6:	e7fe      	b.n	8008ed6 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d01e      	beq.n	8008f1c <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ede:	2300      	movs	r3, #0
 8008ee0:	61fb      	str	r3, [r7, #28]
 8008ee2:	e012      	b.n	8008f0a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	4413      	add	r3, r2
 8008eea:	7819      	ldrb	r1, [r3, #0]
 8008eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	3334      	adds	r3, #52	; 0x34
 8008ef4:	460a      	mov	r2, r1
 8008ef6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8008ef8:	68ba      	ldr	r2, [r7, #8]
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	4413      	add	r3, r2
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d006      	beq.n	8008f12 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	3301      	adds	r3, #1
 8008f08:	61fb      	str	r3, [r7, #28]
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	2b09      	cmp	r3, #9
 8008f0e:	d9e9      	bls.n	8008ee4 <prvInitialiseNewTask+0x64>
 8008f10:	e000      	b.n	8008f14 <prvInitialiseNewTask+0x94>
            {
                break;
 8008f12:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8008f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1e:	2b04      	cmp	r3, #4
 8008f20:	d90a      	bls.n	8008f38 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8008f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f26:	f383 8811 	msr	BASEPRI, r3
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	613b      	str	r3, [r7, #16]
    }
 8008f34:	bf00      	nop
 8008f36:	e7fe      	b.n	8008f36 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3a:	2b04      	cmp	r3, #4
 8008f3c:	d901      	bls.n	8008f42 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f3e:	2304      	movs	r3, #4
 8008f40:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8008f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f46:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8008f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f4c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f50:	3304      	adds	r3, #4
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7ff f940 	bl	80081d8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5a:	3318      	adds	r3, #24
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7ff f93b 	bl	80081d8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f66:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6a:	f1c3 0205 	rsb	r2, r3, #5
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f70:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f76:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f78:	683a      	ldr	r2, [r7, #0]
 8008f7a:	68f9      	ldr	r1, [r7, #12]
 8008f7c:	69b8      	ldr	r0, [r7, #24]
 8008f7e:	f001 fe29 	bl	800abd4 <pxPortInitialiseStack>
 8008f82:	4602      	mov	r2, r0
 8008f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f86:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8008f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d002      	beq.n	8008f94 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f92:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008f94:	bf00      	nop
 8008f96:	3720      	adds	r7, #32
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8008f9c:	b5b0      	push	{r4, r5, r7, lr}
 8008f9e:	b086      	sub	sp, #24
 8008fa0:	af02      	add	r7, sp, #8
 8008fa2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8008fa4:	f001 ff48 	bl	800ae38 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8008fa8:	4b4f      	ldr	r3, [pc, #316]	; (80090e8 <prvAddNewTaskToReadyList+0x14c>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	3301      	adds	r3, #1
 8008fae:	4a4e      	ldr	r2, [pc, #312]	; (80090e8 <prvAddNewTaskToReadyList+0x14c>)
 8008fb0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8008fb2:	4b4e      	ldr	r3, [pc, #312]	; (80090ec <prvAddNewTaskToReadyList+0x150>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d109      	bne.n	8008fce <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8008fba:	4a4c      	ldr	r2, [pc, #304]	; (80090ec <prvAddNewTaskToReadyList+0x150>)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008fc0:	4b49      	ldr	r3, [pc, #292]	; (80090e8 <prvAddNewTaskToReadyList+0x14c>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d110      	bne.n	8008fea <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8008fc8:	f000 fdca 	bl	8009b60 <prvInitialiseTaskLists>
 8008fcc:	e00d      	b.n	8008fea <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8008fce:	4b48      	ldr	r3, [pc, #288]	; (80090f0 <prvAddNewTaskToReadyList+0x154>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d109      	bne.n	8008fea <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008fd6:	4b45      	ldr	r3, [pc, #276]	; (80090ec <prvAddNewTaskToReadyList+0x150>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d802      	bhi.n	8008fea <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8008fe4:	4a41      	ldr	r2, [pc, #260]	; (80090ec <prvAddNewTaskToReadyList+0x150>)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8008fea:	4b42      	ldr	r3, [pc, #264]	; (80090f4 <prvAddNewTaskToReadyList+0x158>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	4a40      	ldr	r2, [pc, #256]	; (80090f4 <prvAddNewTaskToReadyList+0x158>)
 8008ff2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008ff4:	4b3f      	ldr	r3, [pc, #252]	; (80090f4 <prvAddNewTaskToReadyList+0x158>)
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d016      	beq.n	8009030 <prvAddNewTaskToReadyList+0x94>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4618      	mov	r0, r3
 8009006:	f003 fc79 	bl	800c8fc <SEGGER_SYSVIEW_OnTaskCreate>
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800901a:	461d      	mov	r5, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	461c      	mov	r4, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009026:	1ae3      	subs	r3, r4, r3
 8009028:	9300      	str	r3, [sp, #0]
 800902a:	462b      	mov	r3, r5
 800902c:	f002 f9fa 	bl	800b424 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4618      	mov	r0, r3
 8009034:	f003 fce6 	bl	800ca04 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903c:	2201      	movs	r2, #1
 800903e:	409a      	lsls	r2, r3
 8009040:	4b2d      	ldr	r3, [pc, #180]	; (80090f8 <prvAddNewTaskToReadyList+0x15c>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4313      	orrs	r3, r2
 8009046:	4a2c      	ldr	r2, [pc, #176]	; (80090f8 <prvAddNewTaskToReadyList+0x15c>)
 8009048:	6013      	str	r3, [r2, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800904e:	492b      	ldr	r1, [pc, #172]	; (80090fc <prvAddNewTaskToReadyList+0x160>)
 8009050:	4613      	mov	r3, r2
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	4413      	add	r3, r2
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	440b      	add	r3, r1
 800905a:	3304      	adds	r3, #4
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	60fb      	str	r3, [r7, #12]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	609a      	str	r2, [r3, #8]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	689a      	ldr	r2, [r3, #8]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	60da      	str	r2, [r3, #12]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	3204      	adds	r2, #4
 8009076:	605a      	str	r2, [r3, #4]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	1d1a      	adds	r2, r3, #4
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	609a      	str	r2, [r3, #8]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009084:	4613      	mov	r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	4413      	add	r3, r2
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	4a1b      	ldr	r2, [pc, #108]	; (80090fc <prvAddNewTaskToReadyList+0x160>)
 800908e:	441a      	add	r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	615a      	str	r2, [r3, #20]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009098:	4918      	ldr	r1, [pc, #96]	; (80090fc <prvAddNewTaskToReadyList+0x160>)
 800909a:	4613      	mov	r3, r2
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	4413      	add	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	440b      	add	r3, r1
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	1c59      	adds	r1, r3, #1
 80090a8:	4814      	ldr	r0, [pc, #80]	; (80090fc <prvAddNewTaskToReadyList+0x160>)
 80090aa:	4613      	mov	r3, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	4413      	add	r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	4403      	add	r3, r0
 80090b4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80090b6:	f001 feef 	bl	800ae98 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80090ba:	4b0d      	ldr	r3, [pc, #52]	; (80090f0 <prvAddNewTaskToReadyList+0x154>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00e      	beq.n	80090e0 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80090c2:	4b0a      	ldr	r3, [pc, #40]	; (80090ec <prvAddNewTaskToReadyList+0x150>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d207      	bcs.n	80090e0 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80090d0:	4b0b      	ldr	r3, [pc, #44]	; (8009100 <prvAddNewTaskToReadyList+0x164>)
 80090d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090d6:	601a      	str	r2, [r3, #0]
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80090e0:	bf00      	nop
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bdb0      	pop	{r4, r5, r7, pc}
 80090e8:	200009ec 	.word	0x200009ec
 80090ec:	20000914 	.word	0x20000914
 80090f0:	200009f8 	.word	0x200009f8
 80090f4:	20000a08 	.word	0x20000a08
 80090f8:	200009f4 	.word	0x200009f4
 80090fc:	20000918 	.word	0x20000918
 8009100:	e000ed04 	.word	0xe000ed04

08009104 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800910c:	2300      	movs	r3, #0
 800910e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d01b      	beq.n	800914e <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8009116:	4b15      	ldr	r3, [pc, #84]	; (800916c <vTaskDelay+0x68>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00a      	beq.n	8009134 <vTaskDelay+0x30>
        __asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	60bb      	str	r3, [r7, #8]
    }
 8009130:	bf00      	nop
 8009132:	e7fe      	b.n	8009132 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8009134:	f000 f880 	bl	8009238 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8009138:	6879      	ldr	r1, [r7, #4]
 800913a:	2023      	movs	r0, #35	; 0x23
 800913c:	f002 fe58 	bl	800bdf0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009140:	2100      	movs	r1, #0
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f001 f99a 	bl	800a47c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8009148:	f000 f884 	bl	8009254 <xTaskResumeAll>
 800914c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d107      	bne.n	8009164 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8009154:	4b06      	ldr	r3, [pc, #24]	; (8009170 <vTaskDelay+0x6c>)
 8009156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800915a:	601a      	str	r2, [r3, #0]
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8009164:	bf00      	nop
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	20000a14 	.word	0x20000a14
 8009170:	e000ed04 	.word	0xe000ed04

08009174 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b086      	sub	sp, #24
 8009178:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800917a:	4b27      	ldr	r3, [pc, #156]	; (8009218 <vTaskStartScheduler+0xa4>)
 800917c:	9301      	str	r3, [sp, #4]
 800917e:	2300      	movs	r3, #0
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	2300      	movs	r3, #0
 8009184:	2282      	movs	r2, #130	; 0x82
 8009186:	4925      	ldr	r1, [pc, #148]	; (800921c <vTaskStartScheduler+0xa8>)
 8009188:	4825      	ldr	r0, [pc, #148]	; (8009220 <vTaskStartScheduler+0xac>)
 800918a:	f7ff fe33 	bl	8008df4 <xTaskCreate>
 800918e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2b01      	cmp	r3, #1
 8009194:	d102      	bne.n	800919c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8009196:	f001 f9f1 	bl	800a57c <xTimerCreateTimerTask>
 800919a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d124      	bne.n	80091ec <vTaskStartScheduler+0x78>
        __asm volatile
 80091a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a6:	f383 8811 	msr	BASEPRI, r3
 80091aa:	f3bf 8f6f 	isb	sy
 80091ae:	f3bf 8f4f 	dsb	sy
 80091b2:	60bb      	str	r3, [r7, #8]
    }
 80091b4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80091b6:	4b1b      	ldr	r3, [pc, #108]	; (8009224 <vTaskStartScheduler+0xb0>)
 80091b8:	f04f 32ff 	mov.w	r2, #4294967295
 80091bc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80091be:	4b1a      	ldr	r3, [pc, #104]	; (8009228 <vTaskStartScheduler+0xb4>)
 80091c0:	2201      	movs	r2, #1
 80091c2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80091c4:	4b19      	ldr	r3, [pc, #100]	; (800922c <vTaskStartScheduler+0xb8>)
 80091c6:	2200      	movs	r2, #0
 80091c8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80091ca:	4b19      	ldr	r3, [pc, #100]	; (8009230 <vTaskStartScheduler+0xbc>)
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	4b12      	ldr	r3, [pc, #72]	; (8009218 <vTaskStartScheduler+0xa4>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d102      	bne.n	80091dc <vTaskStartScheduler+0x68>
 80091d6:	f003 fb75 	bl	800c8c4 <SEGGER_SYSVIEW_OnIdle>
 80091da:	e004      	b.n	80091e6 <vTaskStartScheduler+0x72>
 80091dc:	4b14      	ldr	r3, [pc, #80]	; (8009230 <vTaskStartScheduler+0xbc>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4618      	mov	r0, r3
 80091e2:	f003 fbcd 	bl	800c980 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80091e6:	f001 fd85 	bl	800acf4 <xPortStartScheduler>
 80091ea:	e00e      	b.n	800920a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f2:	d10a      	bne.n	800920a <vTaskStartScheduler+0x96>
        __asm volatile
 80091f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f8:	f383 8811 	msr	BASEPRI, r3
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	f3bf 8f4f 	dsb	sy
 8009204:	607b      	str	r3, [r7, #4]
    }
 8009206:	bf00      	nop
 8009208:	e7fe      	b.n	8009208 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800920a:	4b0a      	ldr	r3, [pc, #40]	; (8009234 <vTaskStartScheduler+0xc0>)
 800920c:	681b      	ldr	r3, [r3, #0]
}
 800920e:	bf00      	nop
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	20000a10 	.word	0x20000a10
 800921c:	08010c10 	.word	0x08010c10
 8009220:	08009b2d 	.word	0x08009b2d
 8009224:	20000a0c 	.word	0x20000a0c
 8009228:	200009f8 	.word	0x200009f8
 800922c:	200009f0 	.word	0x200009f0
 8009230:	20000914 	.word	0x20000914
 8009234:	20000014 	.word	0x20000014

08009238 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009238:	b480      	push	{r7}
 800923a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800923c:	4b04      	ldr	r3, [pc, #16]	; (8009250 <vTaskSuspendAll+0x18>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3301      	adds	r3, #1
 8009242:	4a03      	ldr	r2, [pc, #12]	; (8009250 <vTaskSuspendAll+0x18>)
 8009244:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8009246:	bf00      	nop
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr
 8009250:	20000a14 	.word	0x20000a14

08009254 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b088      	sub	sp, #32
 8009258:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800925a:	2300      	movs	r3, #0
 800925c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800925e:	2300      	movs	r3, #0
 8009260:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8009262:	4b73      	ldr	r3, [pc, #460]	; (8009430 <xTaskResumeAll+0x1dc>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10a      	bne.n	8009280 <xTaskResumeAll+0x2c>
        __asm volatile
 800926a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926e:	f383 8811 	msr	BASEPRI, r3
 8009272:	f3bf 8f6f 	isb	sy
 8009276:	f3bf 8f4f 	dsb	sy
 800927a:	607b      	str	r3, [r7, #4]
    }
 800927c:	bf00      	nop
 800927e:	e7fe      	b.n	800927e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8009280:	f001 fdda 	bl	800ae38 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8009284:	4b6a      	ldr	r3, [pc, #424]	; (8009430 <xTaskResumeAll+0x1dc>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	3b01      	subs	r3, #1
 800928a:	4a69      	ldr	r2, [pc, #420]	; (8009430 <xTaskResumeAll+0x1dc>)
 800928c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800928e:	4b68      	ldr	r3, [pc, #416]	; (8009430 <xTaskResumeAll+0x1dc>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	f040 80c4 	bne.w	8009420 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009298:	4b66      	ldr	r3, [pc, #408]	; (8009434 <xTaskResumeAll+0x1e0>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	f000 80bf 	beq.w	8009420 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092a2:	e08e      	b.n	80093c2 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092a4:	4b64      	ldr	r3, [pc, #400]	; (8009438 <xTaskResumeAll+0x1e4>)
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b0:	613b      	str	r3, [r7, #16]
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	69db      	ldr	r3, [r3, #28]
 80092b6:	69fa      	ldr	r2, [r7, #28]
 80092b8:	6a12      	ldr	r2, [r2, #32]
 80092ba:	609a      	str	r2, [r3, #8]
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	6a1b      	ldr	r3, [r3, #32]
 80092c0:	69fa      	ldr	r2, [r7, #28]
 80092c2:	69d2      	ldr	r2, [r2, #28]
 80092c4:	605a      	str	r2, [r3, #4]
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	3318      	adds	r3, #24
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d103      	bne.n	80092da <xTaskResumeAll+0x86>
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	6a1a      	ldr	r2, [r3, #32]
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	605a      	str	r2, [r3, #4]
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	2200      	movs	r2, #0
 80092de:	629a      	str	r2, [r3, #40]	; 0x28
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	1e5a      	subs	r2, r3, #1
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	695b      	ldr	r3, [r3, #20]
 80092ee:	60fb      	str	r3, [r7, #12]
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	69fa      	ldr	r2, [r7, #28]
 80092f6:	68d2      	ldr	r2, [r2, #12]
 80092f8:	609a      	str	r2, [r3, #8]
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	69fa      	ldr	r2, [r7, #28]
 8009300:	6892      	ldr	r2, [r2, #8]
 8009302:	605a      	str	r2, [r3, #4]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	685a      	ldr	r2, [r3, #4]
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	3304      	adds	r3, #4
 800930c:	429a      	cmp	r2, r3
 800930e:	d103      	bne.n	8009318 <xTaskResumeAll+0xc4>
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	68da      	ldr	r2, [r3, #12]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	605a      	str	r2, [r3, #4]
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	2200      	movs	r2, #0
 800931c:	615a      	str	r2, [r3, #20]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	1e5a      	subs	r2, r3, #1
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	4618      	mov	r0, r3
 800932c:	f003 fb6a 	bl	800ca04 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009334:	2201      	movs	r2, #1
 8009336:	409a      	lsls	r2, r3
 8009338:	4b40      	ldr	r3, [pc, #256]	; (800943c <xTaskResumeAll+0x1e8>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4313      	orrs	r3, r2
 800933e:	4a3f      	ldr	r2, [pc, #252]	; (800943c <xTaskResumeAll+0x1e8>)
 8009340:	6013      	str	r3, [r2, #0]
 8009342:	69fb      	ldr	r3, [r7, #28]
 8009344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009346:	493e      	ldr	r1, [pc, #248]	; (8009440 <xTaskResumeAll+0x1ec>)
 8009348:	4613      	mov	r3, r2
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	4413      	add	r3, r2
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	440b      	add	r3, r1
 8009352:	3304      	adds	r3, #4
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	60bb      	str	r3, [r7, #8]
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	68ba      	ldr	r2, [r7, #8]
 800935c:	609a      	str	r2, [r3, #8]
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	689a      	ldr	r2, [r3, #8]
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	60da      	str	r2, [r3, #12]
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	69fa      	ldr	r2, [r7, #28]
 800936c:	3204      	adds	r2, #4
 800936e:	605a      	str	r2, [r3, #4]
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	1d1a      	adds	r2, r3, #4
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	609a      	str	r2, [r3, #8]
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800937c:	4613      	mov	r3, r2
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	4413      	add	r3, r2
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	4a2e      	ldr	r2, [pc, #184]	; (8009440 <xTaskResumeAll+0x1ec>)
 8009386:	441a      	add	r2, r3
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	615a      	str	r2, [r3, #20]
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009390:	492b      	ldr	r1, [pc, #172]	; (8009440 <xTaskResumeAll+0x1ec>)
 8009392:	4613      	mov	r3, r2
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	4413      	add	r3, r2
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	440b      	add	r3, r1
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	1c59      	adds	r1, r3, #1
 80093a0:	4827      	ldr	r0, [pc, #156]	; (8009440 <xTaskResumeAll+0x1ec>)
 80093a2:	4613      	mov	r3, r2
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	4413      	add	r3, r2
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	4403      	add	r3, r0
 80093ac:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b2:	4b24      	ldr	r3, [pc, #144]	; (8009444 <xTaskResumeAll+0x1f0>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d302      	bcc.n	80093c2 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80093bc:	4b22      	ldr	r3, [pc, #136]	; (8009448 <xTaskResumeAll+0x1f4>)
 80093be:	2201      	movs	r2, #1
 80093c0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093c2:	4b1d      	ldr	r3, [pc, #116]	; (8009438 <xTaskResumeAll+0x1e4>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f47f af6c 	bne.w	80092a4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d001      	beq.n	80093d6 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80093d2:	f000 fc43 	bl	8009c5c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80093d6:	4b1d      	ldr	r3, [pc, #116]	; (800944c <xTaskResumeAll+0x1f8>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d010      	beq.n	8009404 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80093e2:	f000 f853 	bl	800948c <xTaskIncrementTick>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d002      	beq.n	80093f2 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80093ec:	4b16      	ldr	r3, [pc, #88]	; (8009448 <xTaskResumeAll+0x1f4>)
 80093ee:	2201      	movs	r2, #1
 80093f0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	3b01      	subs	r3, #1
 80093f6:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d1f1      	bne.n	80093e2 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80093fe:	4b13      	ldr	r3, [pc, #76]	; (800944c <xTaskResumeAll+0x1f8>)
 8009400:	2200      	movs	r2, #0
 8009402:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8009404:	4b10      	ldr	r3, [pc, #64]	; (8009448 <xTaskResumeAll+0x1f4>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d009      	beq.n	8009420 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800940c:	2301      	movs	r3, #1
 800940e:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8009410:	4b0f      	ldr	r3, [pc, #60]	; (8009450 <xTaskResumeAll+0x1fc>)
 8009412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009416:	601a      	str	r2, [r3, #0]
 8009418:	f3bf 8f4f 	dsb	sy
 800941c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8009420:	f001 fd3a 	bl	800ae98 <vPortExitCritical>

    return xAlreadyYielded;
 8009424:	69bb      	ldr	r3, [r7, #24]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3720      	adds	r7, #32
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	20000a14 	.word	0x20000a14
 8009434:	200009ec 	.word	0x200009ec
 8009438:	200009ac 	.word	0x200009ac
 800943c:	200009f4 	.word	0x200009f4
 8009440:	20000918 	.word	0x20000918
 8009444:	20000914 	.word	0x20000914
 8009448:	20000a00 	.word	0x20000a00
 800944c:	200009fc 	.word	0x200009fc
 8009450:	e000ed04 	.word	0xe000ed04

08009454 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800945a:	4b05      	ldr	r3, [pc, #20]	; (8009470 <xTaskGetTickCount+0x1c>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8009460:	687b      	ldr	r3, [r7, #4]
}
 8009462:	4618      	mov	r0, r3
 8009464:	370c      	adds	r7, #12
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	200009f0 	.word	0x200009f0

08009474 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8009474:	b480      	push	{r7}
 8009476:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8009478:	4b03      	ldr	r3, [pc, #12]	; (8009488 <uxTaskGetNumberOfTasks+0x14>)
 800947a:	681b      	ldr	r3, [r3, #0]
}
 800947c:	4618      	mov	r0, r3
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr
 8009486:	bf00      	nop
 8009488:	200009ec 	.word	0x200009ec

0800948c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b08a      	sub	sp, #40	; 0x28
 8009490:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8009492:	2300      	movs	r3, #0
 8009494:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009496:	4b7f      	ldr	r3, [pc, #508]	; (8009694 <xTaskIncrementTick+0x208>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	f040 80f0 	bne.w	8009680 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80094a0:	4b7d      	ldr	r3, [pc, #500]	; (8009698 <xTaskIncrementTick+0x20c>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	3301      	adds	r3, #1
 80094a6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80094a8:	4a7b      	ldr	r2, [pc, #492]	; (8009698 <xTaskIncrementTick+0x20c>)
 80094aa:	6a3b      	ldr	r3, [r7, #32]
 80094ac:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80094ae:	6a3b      	ldr	r3, [r7, #32]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d120      	bne.n	80094f6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80094b4:	4b79      	ldr	r3, [pc, #484]	; (800969c <xTaskIncrementTick+0x210>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00a      	beq.n	80094d4 <xTaskIncrementTick+0x48>
        __asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	607b      	str	r3, [r7, #4]
    }
 80094d0:	bf00      	nop
 80094d2:	e7fe      	b.n	80094d2 <xTaskIncrementTick+0x46>
 80094d4:	4b71      	ldr	r3, [pc, #452]	; (800969c <xTaskIncrementTick+0x210>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	61fb      	str	r3, [r7, #28]
 80094da:	4b71      	ldr	r3, [pc, #452]	; (80096a0 <xTaskIncrementTick+0x214>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a6f      	ldr	r2, [pc, #444]	; (800969c <xTaskIncrementTick+0x210>)
 80094e0:	6013      	str	r3, [r2, #0]
 80094e2:	4a6f      	ldr	r2, [pc, #444]	; (80096a0 <xTaskIncrementTick+0x214>)
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	6013      	str	r3, [r2, #0]
 80094e8:	4b6e      	ldr	r3, [pc, #440]	; (80096a4 <xTaskIncrementTick+0x218>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	3301      	adds	r3, #1
 80094ee:	4a6d      	ldr	r2, [pc, #436]	; (80096a4 <xTaskIncrementTick+0x218>)
 80094f0:	6013      	str	r3, [r2, #0]
 80094f2:	f000 fbb3 	bl	8009c5c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80094f6:	4b6c      	ldr	r3, [pc, #432]	; (80096a8 <xTaskIncrementTick+0x21c>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	6a3a      	ldr	r2, [r7, #32]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	f0c0 80aa 	bcc.w	8009656 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009502:	4b66      	ldr	r3, [pc, #408]	; (800969c <xTaskIncrementTick+0x210>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d104      	bne.n	8009516 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800950c:	4b66      	ldr	r3, [pc, #408]	; (80096a8 <xTaskIncrementTick+0x21c>)
 800950e:	f04f 32ff 	mov.w	r2, #4294967295
 8009512:	601a      	str	r2, [r3, #0]
                    break;
 8009514:	e09f      	b.n	8009656 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009516:	4b61      	ldr	r3, [pc, #388]	; (800969c <xTaskIncrementTick+0x210>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8009526:	6a3a      	ldr	r2, [r7, #32]
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	429a      	cmp	r2, r3
 800952c:	d203      	bcs.n	8009536 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800952e:	4a5e      	ldr	r2, [pc, #376]	; (80096a8 <xTaskIncrementTick+0x21c>)
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8009534:	e08f      	b.n	8009656 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	695b      	ldr	r3, [r3, #20]
 800953a:	613b      	str	r3, [r7, #16]
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	69ba      	ldr	r2, [r7, #24]
 8009542:	68d2      	ldr	r2, [r2, #12]
 8009544:	609a      	str	r2, [r3, #8]
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	69ba      	ldr	r2, [r7, #24]
 800954c:	6892      	ldr	r2, [r2, #8]
 800954e:	605a      	str	r2, [r3, #4]
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	685a      	ldr	r2, [r3, #4]
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	3304      	adds	r3, #4
 8009558:	429a      	cmp	r2, r3
 800955a:	d103      	bne.n	8009564 <xTaskIncrementTick+0xd8>
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	68da      	ldr	r2, [r3, #12]
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	605a      	str	r2, [r3, #4]
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	2200      	movs	r2, #0
 8009568:	615a      	str	r2, [r3, #20]
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	1e5a      	subs	r2, r3, #1
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009578:	2b00      	cmp	r3, #0
 800957a:	d01e      	beq.n	80095ba <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009580:	60fb      	str	r3, [r7, #12]
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	69db      	ldr	r3, [r3, #28]
 8009586:	69ba      	ldr	r2, [r7, #24]
 8009588:	6a12      	ldr	r2, [r2, #32]
 800958a:	609a      	str	r2, [r3, #8]
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	6a1b      	ldr	r3, [r3, #32]
 8009590:	69ba      	ldr	r2, [r7, #24]
 8009592:	69d2      	ldr	r2, [r2, #28]
 8009594:	605a      	str	r2, [r3, #4]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	685a      	ldr	r2, [r3, #4]
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	3318      	adds	r3, #24
 800959e:	429a      	cmp	r2, r3
 80095a0:	d103      	bne.n	80095aa <xTaskIncrementTick+0x11e>
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	6a1a      	ldr	r2, [r3, #32]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	605a      	str	r2, [r3, #4]
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	2200      	movs	r2, #0
 80095ae:	629a      	str	r2, [r3, #40]	; 0x28
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	1e5a      	subs	r2, r3, #1
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	4618      	mov	r0, r3
 80095be:	f003 fa21 	bl	800ca04 <SEGGER_SYSVIEW_OnTaskStartReady>
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c6:	2201      	movs	r2, #1
 80095c8:	409a      	lsls	r2, r3
 80095ca:	4b38      	ldr	r3, [pc, #224]	; (80096ac <xTaskIncrementTick+0x220>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	4a36      	ldr	r2, [pc, #216]	; (80096ac <xTaskIncrementTick+0x220>)
 80095d2:	6013      	str	r3, [r2, #0]
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095d8:	4935      	ldr	r1, [pc, #212]	; (80096b0 <xTaskIncrementTick+0x224>)
 80095da:	4613      	mov	r3, r2
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	4413      	add	r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	440b      	add	r3, r1
 80095e4:	3304      	adds	r3, #4
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	60bb      	str	r3, [r7, #8]
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	68ba      	ldr	r2, [r7, #8]
 80095ee:	609a      	str	r2, [r3, #8]
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	689a      	ldr	r2, [r3, #8]
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	60da      	str	r2, [r3, #12]
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	69ba      	ldr	r2, [r7, #24]
 80095fe:	3204      	adds	r2, #4
 8009600:	605a      	str	r2, [r3, #4]
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	1d1a      	adds	r2, r3, #4
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	609a      	str	r2, [r3, #8]
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800960e:	4613      	mov	r3, r2
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	4413      	add	r3, r2
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	4a26      	ldr	r2, [pc, #152]	; (80096b0 <xTaskIncrementTick+0x224>)
 8009618:	441a      	add	r2, r3
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	615a      	str	r2, [r3, #20]
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009622:	4923      	ldr	r1, [pc, #140]	; (80096b0 <xTaskIncrementTick+0x224>)
 8009624:	4613      	mov	r3, r2
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	4413      	add	r3, r2
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	440b      	add	r3, r1
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	1c59      	adds	r1, r3, #1
 8009632:	481f      	ldr	r0, [pc, #124]	; (80096b0 <xTaskIncrementTick+0x224>)
 8009634:	4613      	mov	r3, r2
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	4413      	add	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4403      	add	r3, r0
 800963e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009644:	4b1b      	ldr	r3, [pc, #108]	; (80096b4 <xTaskIncrementTick+0x228>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964a:	429a      	cmp	r2, r3
 800964c:	f67f af59 	bls.w	8009502 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8009650:	2301      	movs	r3, #1
 8009652:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009654:	e755      	b.n	8009502 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009656:	4b17      	ldr	r3, [pc, #92]	; (80096b4 <xTaskIncrementTick+0x228>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800965c:	4914      	ldr	r1, [pc, #80]	; (80096b0 <xTaskIncrementTick+0x224>)
 800965e:	4613      	mov	r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	4413      	add	r3, r2
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	440b      	add	r3, r1
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b01      	cmp	r3, #1
 800966c:	d901      	bls.n	8009672 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 800966e:	2301      	movs	r3, #1
 8009670:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8009672:	4b11      	ldr	r3, [pc, #68]	; (80096b8 <xTaskIncrementTick+0x22c>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d007      	beq.n	800968a <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 800967a:	2301      	movs	r3, #1
 800967c:	627b      	str	r3, [r7, #36]	; 0x24
 800967e:	e004      	b.n	800968a <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8009680:	4b0e      	ldr	r3, [pc, #56]	; (80096bc <xTaskIncrementTick+0x230>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	3301      	adds	r3, #1
 8009686:	4a0d      	ldr	r2, [pc, #52]	; (80096bc <xTaskIncrementTick+0x230>)
 8009688:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800968a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800968c:	4618      	mov	r0, r3
 800968e:	3728      	adds	r7, #40	; 0x28
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	20000a14 	.word	0x20000a14
 8009698:	200009f0 	.word	0x200009f0
 800969c:	200009a4 	.word	0x200009a4
 80096a0:	200009a8 	.word	0x200009a8
 80096a4:	20000a04 	.word	0x20000a04
 80096a8:	20000a0c 	.word	0x20000a0c
 80096ac:	200009f4 	.word	0x200009f4
 80096b0:	20000918 	.word	0x20000918
 80096b4:	20000914 	.word	0x20000914
 80096b8:	20000a00 	.word	0x20000a00
 80096bc:	200009fc 	.word	0x200009fc

080096c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80096c6:	4b2d      	ldr	r3, [pc, #180]	; (800977c <vTaskSwitchContext+0xbc>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d003      	beq.n	80096d6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80096ce:	4b2c      	ldr	r3, [pc, #176]	; (8009780 <vTaskSwitchContext+0xc0>)
 80096d0:	2201      	movs	r2, #1
 80096d2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80096d4:	e04d      	b.n	8009772 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80096d6:	4b2a      	ldr	r3, [pc, #168]	; (8009780 <vTaskSwitchContext+0xc0>)
 80096d8:	2200      	movs	r2, #0
 80096da:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096dc:	4b29      	ldr	r3, [pc, #164]	; (8009784 <vTaskSwitchContext+0xc4>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	fab3 f383 	clz	r3, r3
 80096e8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80096ea:	7afb      	ldrb	r3, [r7, #11]
 80096ec:	f1c3 031f 	rsb	r3, r3, #31
 80096f0:	617b      	str	r3, [r7, #20]
 80096f2:	4925      	ldr	r1, [pc, #148]	; (8009788 <vTaskSwitchContext+0xc8>)
 80096f4:	697a      	ldr	r2, [r7, #20]
 80096f6:	4613      	mov	r3, r2
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	4413      	add	r3, r2
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	440b      	add	r3, r1
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10a      	bne.n	800971c <vTaskSwitchContext+0x5c>
        __asm volatile
 8009706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970a:	f383 8811 	msr	BASEPRI, r3
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	607b      	str	r3, [r7, #4]
    }
 8009718:	bf00      	nop
 800971a:	e7fe      	b.n	800971a <vTaskSwitchContext+0x5a>
 800971c:	697a      	ldr	r2, [r7, #20]
 800971e:	4613      	mov	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	4a18      	ldr	r2, [pc, #96]	; (8009788 <vTaskSwitchContext+0xc8>)
 8009728:	4413      	add	r3, r2
 800972a:	613b      	str	r3, [r7, #16]
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	685a      	ldr	r2, [r3, #4]
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	605a      	str	r2, [r3, #4]
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	685a      	ldr	r2, [r3, #4]
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	3308      	adds	r3, #8
 800973e:	429a      	cmp	r2, r3
 8009740:	d104      	bne.n	800974c <vTaskSwitchContext+0x8c>
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	685a      	ldr	r2, [r3, #4]
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	605a      	str	r2, [r3, #4]
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	4a0e      	ldr	r2, [pc, #56]	; (800978c <vTaskSwitchContext+0xcc>)
 8009754:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8009756:	4b0d      	ldr	r3, [pc, #52]	; (800978c <vTaskSwitchContext+0xcc>)
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	4b0d      	ldr	r3, [pc, #52]	; (8009790 <vTaskSwitchContext+0xd0>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	429a      	cmp	r2, r3
 8009760:	d102      	bne.n	8009768 <vTaskSwitchContext+0xa8>
 8009762:	f003 f8af 	bl	800c8c4 <SEGGER_SYSVIEW_OnIdle>
}
 8009766:	e004      	b.n	8009772 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8009768:	4b08      	ldr	r3, [pc, #32]	; (800978c <vTaskSwitchContext+0xcc>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4618      	mov	r0, r3
 800976e:	f003 f907 	bl	800c980 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8009772:	bf00      	nop
 8009774:	3718      	adds	r7, #24
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	20000a14 	.word	0x20000a14
 8009780:	20000a00 	.word	0x20000a00
 8009784:	200009f4 	.word	0x200009f4
 8009788:	20000918 	.word	0x20000918
 800978c:	20000914 	.word	0x20000914
 8009790:	20000a10 	.word	0x20000a10

08009794 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d10a      	bne.n	80097ba <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80097a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a8:	f383 8811 	msr	BASEPRI, r3
 80097ac:	f3bf 8f6f 	isb	sy
 80097b0:	f3bf 8f4f 	dsb	sy
 80097b4:	60fb      	str	r3, [r7, #12]
    }
 80097b6:	bf00      	nop
 80097b8:	e7fe      	b.n	80097b8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097ba:	4b07      	ldr	r3, [pc, #28]	; (80097d8 <vTaskPlaceOnEventList+0x44>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	3318      	adds	r3, #24
 80097c0:	4619      	mov	r1, r3
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7fe fd15 	bl	80081f2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80097c8:	2101      	movs	r1, #1
 80097ca:	6838      	ldr	r0, [r7, #0]
 80097cc:	f000 fe56 	bl	800a47c <prvAddCurrentTaskToDelayedList>
}
 80097d0:	bf00      	nop
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	20000914 	.word	0x20000914

080097dc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80097dc:	b580      	push	{r7, lr}
 80097de:	b086      	sub	sp, #24
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10a      	bne.n	8009804 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80097ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	613b      	str	r3, [r7, #16]
    }
 8009800:	bf00      	nop
 8009802:	e7fe      	b.n	8009802 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	617b      	str	r3, [r7, #20]
 800980a:	4b17      	ldr	r3, [pc, #92]	; (8009868 <vTaskPlaceOnEventListRestricted+0x8c>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	61da      	str	r2, [r3, #28]
 8009812:	4b15      	ldr	r3, [pc, #84]	; (8009868 <vTaskPlaceOnEventListRestricted+0x8c>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	6892      	ldr	r2, [r2, #8]
 800981a:	621a      	str	r2, [r3, #32]
 800981c:	4b12      	ldr	r3, [pc, #72]	; (8009868 <vTaskPlaceOnEventListRestricted+0x8c>)
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	3218      	adds	r2, #24
 8009826:	605a      	str	r2, [r3, #4]
 8009828:	4b0f      	ldr	r3, [pc, #60]	; (8009868 <vTaskPlaceOnEventListRestricted+0x8c>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f103 0218 	add.w	r2, r3, #24
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	609a      	str	r2, [r3, #8]
 8009834:	4b0c      	ldr	r3, [pc, #48]	; (8009868 <vTaskPlaceOnEventListRestricted+0x8c>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	629a      	str	r2, [r3, #40]	; 0x28
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	1c5a      	adds	r2, r3, #1
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d002      	beq.n	8009852 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800984c:	f04f 33ff 	mov.w	r3, #4294967295
 8009850:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8009852:	2024      	movs	r0, #36	; 0x24
 8009854:	f002 faae 	bl	800bdb4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009858:	6879      	ldr	r1, [r7, #4]
 800985a:	68b8      	ldr	r0, [r7, #8]
 800985c:	f000 fe0e 	bl	800a47c <prvAddCurrentTaskToDelayedList>
    }
 8009860:	bf00      	nop
 8009862:	3718      	adds	r7, #24
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	20000914 	.word	0x20000914

0800986c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b08a      	sub	sp, #40	; 0x28
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800987c:	6a3b      	ldr	r3, [r7, #32]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d10a      	bne.n	8009898 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8009882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009886:	f383 8811 	msr	BASEPRI, r3
 800988a:	f3bf 8f6f 	isb	sy
 800988e:	f3bf 8f4f 	dsb	sy
 8009892:	60fb      	str	r3, [r7, #12]
    }
 8009894:	bf00      	nop
 8009896:	e7fe      	b.n	8009896 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8009898:	6a3b      	ldr	r3, [r7, #32]
 800989a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800989c:	61fb      	str	r3, [r7, #28]
 800989e:	6a3b      	ldr	r3, [r7, #32]
 80098a0:	69db      	ldr	r3, [r3, #28]
 80098a2:	6a3a      	ldr	r2, [r7, #32]
 80098a4:	6a12      	ldr	r2, [r2, #32]
 80098a6:	609a      	str	r2, [r3, #8]
 80098a8:	6a3b      	ldr	r3, [r7, #32]
 80098aa:	6a1b      	ldr	r3, [r3, #32]
 80098ac:	6a3a      	ldr	r2, [r7, #32]
 80098ae:	69d2      	ldr	r2, [r2, #28]
 80098b0:	605a      	str	r2, [r3, #4]
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	685a      	ldr	r2, [r3, #4]
 80098b6:	6a3b      	ldr	r3, [r7, #32]
 80098b8:	3318      	adds	r3, #24
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d103      	bne.n	80098c6 <xTaskRemoveFromEventList+0x5a>
 80098be:	6a3b      	ldr	r3, [r7, #32]
 80098c0:	6a1a      	ldr	r2, [r3, #32]
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	605a      	str	r2, [r3, #4]
 80098c6:	6a3b      	ldr	r3, [r7, #32]
 80098c8:	2200      	movs	r2, #0
 80098ca:	629a      	str	r2, [r3, #40]	; 0x28
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	1e5a      	subs	r2, r3, #1
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098d6:	4b4b      	ldr	r3, [pc, #300]	; (8009a04 <xTaskRemoveFromEventList+0x198>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d162      	bne.n	80099a4 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80098de:	6a3b      	ldr	r3, [r7, #32]
 80098e0:	695b      	ldr	r3, [r3, #20]
 80098e2:	617b      	str	r3, [r7, #20]
 80098e4:	6a3b      	ldr	r3, [r7, #32]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	6a3a      	ldr	r2, [r7, #32]
 80098ea:	68d2      	ldr	r2, [r2, #12]
 80098ec:	609a      	str	r2, [r3, #8]
 80098ee:	6a3b      	ldr	r3, [r7, #32]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	6a3a      	ldr	r2, [r7, #32]
 80098f4:	6892      	ldr	r2, [r2, #8]
 80098f6:	605a      	str	r2, [r3, #4]
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	685a      	ldr	r2, [r3, #4]
 80098fc:	6a3b      	ldr	r3, [r7, #32]
 80098fe:	3304      	adds	r3, #4
 8009900:	429a      	cmp	r2, r3
 8009902:	d103      	bne.n	800990c <xTaskRemoveFromEventList+0xa0>
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	68da      	ldr	r2, [r3, #12]
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	605a      	str	r2, [r3, #4]
 800990c:	6a3b      	ldr	r3, [r7, #32]
 800990e:	2200      	movs	r2, #0
 8009910:	615a      	str	r2, [r3, #20]
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	1e5a      	subs	r2, r3, #1
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800991c:	6a3b      	ldr	r3, [r7, #32]
 800991e:	4618      	mov	r0, r3
 8009920:	f003 f870 	bl	800ca04 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009924:	6a3b      	ldr	r3, [r7, #32]
 8009926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009928:	2201      	movs	r2, #1
 800992a:	409a      	lsls	r2, r3
 800992c:	4b36      	ldr	r3, [pc, #216]	; (8009a08 <xTaskRemoveFromEventList+0x19c>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4313      	orrs	r3, r2
 8009932:	4a35      	ldr	r2, [pc, #212]	; (8009a08 <xTaskRemoveFromEventList+0x19c>)
 8009934:	6013      	str	r3, [r2, #0]
 8009936:	6a3b      	ldr	r3, [r7, #32]
 8009938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800993a:	4934      	ldr	r1, [pc, #208]	; (8009a0c <xTaskRemoveFromEventList+0x1a0>)
 800993c:	4613      	mov	r3, r2
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	4413      	add	r3, r2
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	440b      	add	r3, r1
 8009946:	3304      	adds	r3, #4
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	613b      	str	r3, [r7, #16]
 800994c:	6a3b      	ldr	r3, [r7, #32]
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	609a      	str	r2, [r3, #8]
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	689a      	ldr	r2, [r3, #8]
 8009956:	6a3b      	ldr	r3, [r7, #32]
 8009958:	60da      	str	r2, [r3, #12]
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	6a3a      	ldr	r2, [r7, #32]
 8009960:	3204      	adds	r2, #4
 8009962:	605a      	str	r2, [r3, #4]
 8009964:	6a3b      	ldr	r3, [r7, #32]
 8009966:	1d1a      	adds	r2, r3, #4
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	609a      	str	r2, [r3, #8]
 800996c:	6a3b      	ldr	r3, [r7, #32]
 800996e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009970:	4613      	mov	r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4413      	add	r3, r2
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4a24      	ldr	r2, [pc, #144]	; (8009a0c <xTaskRemoveFromEventList+0x1a0>)
 800997a:	441a      	add	r2, r3
 800997c:	6a3b      	ldr	r3, [r7, #32]
 800997e:	615a      	str	r2, [r3, #20]
 8009980:	6a3b      	ldr	r3, [r7, #32]
 8009982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009984:	4921      	ldr	r1, [pc, #132]	; (8009a0c <xTaskRemoveFromEventList+0x1a0>)
 8009986:	4613      	mov	r3, r2
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	4413      	add	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	440b      	add	r3, r1
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	1c59      	adds	r1, r3, #1
 8009994:	481d      	ldr	r0, [pc, #116]	; (8009a0c <xTaskRemoveFromEventList+0x1a0>)
 8009996:	4613      	mov	r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4413      	add	r3, r2
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4403      	add	r3, r0
 80099a0:	6019      	str	r1, [r3, #0]
 80099a2:	e01b      	b.n	80099dc <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80099a4:	4b1a      	ldr	r3, [pc, #104]	; (8009a10 <xTaskRemoveFromEventList+0x1a4>)
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	61bb      	str	r3, [r7, #24]
 80099aa:	6a3b      	ldr	r3, [r7, #32]
 80099ac:	69ba      	ldr	r2, [r7, #24]
 80099ae:	61da      	str	r2, [r3, #28]
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	689a      	ldr	r2, [r3, #8]
 80099b4:	6a3b      	ldr	r3, [r7, #32]
 80099b6:	621a      	str	r2, [r3, #32]
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	6a3a      	ldr	r2, [r7, #32]
 80099be:	3218      	adds	r2, #24
 80099c0:	605a      	str	r2, [r3, #4]
 80099c2:	6a3b      	ldr	r3, [r7, #32]
 80099c4:	f103 0218 	add.w	r2, r3, #24
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	609a      	str	r2, [r3, #8]
 80099cc:	6a3b      	ldr	r3, [r7, #32]
 80099ce:	4a10      	ldr	r2, [pc, #64]	; (8009a10 <xTaskRemoveFromEventList+0x1a4>)
 80099d0:	629a      	str	r2, [r3, #40]	; 0x28
 80099d2:	4b0f      	ldr	r3, [pc, #60]	; (8009a10 <xTaskRemoveFromEventList+0x1a4>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	3301      	adds	r3, #1
 80099d8:	4a0d      	ldr	r2, [pc, #52]	; (8009a10 <xTaskRemoveFromEventList+0x1a4>)
 80099da:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80099dc:	6a3b      	ldr	r3, [r7, #32]
 80099de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e0:	4b0c      	ldr	r3, [pc, #48]	; (8009a14 <xTaskRemoveFromEventList+0x1a8>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d905      	bls.n	80099f6 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80099ea:	2301      	movs	r3, #1
 80099ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80099ee:	4b0a      	ldr	r3, [pc, #40]	; (8009a18 <xTaskRemoveFromEventList+0x1ac>)
 80099f0:	2201      	movs	r2, #1
 80099f2:	601a      	str	r2, [r3, #0]
 80099f4:	e001      	b.n	80099fa <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80099f6:	2300      	movs	r3, #0
 80099f8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80099fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3728      	adds	r7, #40	; 0x28
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	20000a14 	.word	0x20000a14
 8009a08:	200009f4 	.word	0x200009f4
 8009a0c:	20000918 	.word	0x20000918
 8009a10:	200009ac 	.word	0x200009ac
 8009a14:	20000914 	.word	0x20000914
 8009a18:	20000a00 	.word	0x20000a00

08009a1c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009a24:	4b06      	ldr	r3, [pc, #24]	; (8009a40 <vTaskInternalSetTimeOutState+0x24>)
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8009a2c:	4b05      	ldr	r3, [pc, #20]	; (8009a44 <vTaskInternalSetTimeOutState+0x28>)
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	605a      	str	r2, [r3, #4]
}
 8009a34:	bf00      	nop
 8009a36:	370c      	adds	r7, #12
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr
 8009a40:	20000a04 	.word	0x20000a04
 8009a44:	200009f0 	.word	0x200009f0

08009a48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b088      	sub	sp, #32
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10a      	bne.n	8009a6e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8009a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5c:	f383 8811 	msr	BASEPRI, r3
 8009a60:	f3bf 8f6f 	isb	sy
 8009a64:	f3bf 8f4f 	dsb	sy
 8009a68:	613b      	str	r3, [r7, #16]
    }
 8009a6a:	bf00      	nop
 8009a6c:	e7fe      	b.n	8009a6c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d10a      	bne.n	8009a8a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8009a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a78:	f383 8811 	msr	BASEPRI, r3
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	60fb      	str	r3, [r7, #12]
    }
 8009a86:	bf00      	nop
 8009a88:	e7fe      	b.n	8009a88 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8009a8a:	f001 f9d5 	bl	800ae38 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8009a8e:	4b1f      	ldr	r3, [pc, #124]	; (8009b0c <xTaskCheckForTimeOut+0xc4>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	69ba      	ldr	r2, [r7, #24]
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa6:	d102      	bne.n	8009aae <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	61fb      	str	r3, [r7, #28]
 8009aac:	e026      	b.n	8009afc <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	4b17      	ldr	r3, [pc, #92]	; (8009b10 <xTaskCheckForTimeOut+0xc8>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d00a      	beq.n	8009ad0 <xTaskCheckForTimeOut+0x88>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	69ba      	ldr	r2, [r7, #24]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d305      	bcc.n	8009ad0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	2200      	movs	r2, #0
 8009acc:	601a      	str	r2, [r3, #0]
 8009ace:	e015      	b.n	8009afc <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d20b      	bcs.n	8009af2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	1ad2      	subs	r2, r2, r3
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7ff ff98 	bl	8009a1c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8009aec:	2300      	movs	r3, #0
 8009aee:	61fb      	str	r3, [r7, #28]
 8009af0:	e004      	b.n	8009afc <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	2200      	movs	r2, #0
 8009af6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8009af8:	2301      	movs	r3, #1
 8009afa:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8009afc:	f001 f9cc 	bl	800ae98 <vPortExitCritical>

    return xReturn;
 8009b00:	69fb      	ldr	r3, [r7, #28]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3720      	adds	r7, #32
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	200009f0 	.word	0x200009f0
 8009b10:	20000a04 	.word	0x20000a04

08009b14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009b14:	b480      	push	{r7}
 8009b16:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8009b18:	4b03      	ldr	r3, [pc, #12]	; (8009b28 <vTaskMissedYield+0x14>)
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	601a      	str	r2, [r3, #0]
}
 8009b1e:	bf00      	nop
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr
 8009b28:	20000a00 	.word	0x20000a00

08009b2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8009b34:	f000 f854 	bl	8009be0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009b38:	4b07      	ldr	r3, [pc, #28]	; (8009b58 <prvIdleTask+0x2c>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d907      	bls.n	8009b50 <prvIdleTask+0x24>
            {
                taskYIELD();
 8009b40:	4b06      	ldr	r3, [pc, #24]	; (8009b5c <prvIdleTask+0x30>)
 8009b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b46:	601a      	str	r2, [r3, #0]
 8009b48:	f3bf 8f4f 	dsb	sy
 8009b4c:	f3bf 8f6f 	isb	sy
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 8009b50:	f7f7 fc22 	bl	8001398 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8009b54:	e7ee      	b.n	8009b34 <prvIdleTask+0x8>
 8009b56:	bf00      	nop
 8009b58:	20000918 	.word	0x20000918
 8009b5c:	e000ed04 	.word	0xe000ed04

08009b60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b66:	2300      	movs	r3, #0
 8009b68:	607b      	str	r3, [r7, #4]
 8009b6a:	e00c      	b.n	8009b86 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	4613      	mov	r3, r2
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	4413      	add	r3, r2
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	4a12      	ldr	r2, [pc, #72]	; (8009bc0 <prvInitialiseTaskLists+0x60>)
 8009b78:	4413      	add	r3, r2
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7fe fb0c 	bl	8008198 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	3301      	adds	r3, #1
 8009b84:	607b      	str	r3, [r7, #4]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2b04      	cmp	r3, #4
 8009b8a:	d9ef      	bls.n	8009b6c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8009b8c:	480d      	ldr	r0, [pc, #52]	; (8009bc4 <prvInitialiseTaskLists+0x64>)
 8009b8e:	f7fe fb03 	bl	8008198 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8009b92:	480d      	ldr	r0, [pc, #52]	; (8009bc8 <prvInitialiseTaskLists+0x68>)
 8009b94:	f7fe fb00 	bl	8008198 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8009b98:	480c      	ldr	r0, [pc, #48]	; (8009bcc <prvInitialiseTaskLists+0x6c>)
 8009b9a:	f7fe fafd 	bl	8008198 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8009b9e:	480c      	ldr	r0, [pc, #48]	; (8009bd0 <prvInitialiseTaskLists+0x70>)
 8009ba0:	f7fe fafa 	bl	8008198 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8009ba4:	480b      	ldr	r0, [pc, #44]	; (8009bd4 <prvInitialiseTaskLists+0x74>)
 8009ba6:	f7fe faf7 	bl	8008198 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8009baa:	4b0b      	ldr	r3, [pc, #44]	; (8009bd8 <prvInitialiseTaskLists+0x78>)
 8009bac:	4a05      	ldr	r2, [pc, #20]	; (8009bc4 <prvInitialiseTaskLists+0x64>)
 8009bae:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009bb0:	4b0a      	ldr	r3, [pc, #40]	; (8009bdc <prvInitialiseTaskLists+0x7c>)
 8009bb2:	4a05      	ldr	r2, [pc, #20]	; (8009bc8 <prvInitialiseTaskLists+0x68>)
 8009bb4:	601a      	str	r2, [r3, #0]
}
 8009bb6:	bf00      	nop
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	20000918 	.word	0x20000918
 8009bc4:	2000097c 	.word	0x2000097c
 8009bc8:	20000990 	.word	0x20000990
 8009bcc:	200009ac 	.word	0x200009ac
 8009bd0:	200009c0 	.word	0x200009c0
 8009bd4:	200009d8 	.word	0x200009d8
 8009bd8:	200009a4 	.word	0x200009a4
 8009bdc:	200009a8 	.word	0x200009a8

08009be0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009be6:	e019      	b.n	8009c1c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8009be8:	f001 f926 	bl	800ae38 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bec:	4b10      	ldr	r3, [pc, #64]	; (8009c30 <prvCheckTasksWaitingTermination+0x50>)
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	3304      	adds	r3, #4
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7fe fb33 	bl	8008264 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8009bfe:	4b0d      	ldr	r3, [pc, #52]	; (8009c34 <prvCheckTasksWaitingTermination+0x54>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	3b01      	subs	r3, #1
 8009c04:	4a0b      	ldr	r2, [pc, #44]	; (8009c34 <prvCheckTasksWaitingTermination+0x54>)
 8009c06:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8009c08:	4b0b      	ldr	r3, [pc, #44]	; (8009c38 <prvCheckTasksWaitingTermination+0x58>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	3b01      	subs	r3, #1
 8009c0e:	4a0a      	ldr	r2, [pc, #40]	; (8009c38 <prvCheckTasksWaitingTermination+0x58>)
 8009c10:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8009c12:	f001 f941 	bl	800ae98 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f810 	bl	8009c3c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c1c:	4b06      	ldr	r3, [pc, #24]	; (8009c38 <prvCheckTasksWaitingTermination+0x58>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d1e1      	bne.n	8009be8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8009c24:	bf00      	nop
 8009c26:	bf00      	nop
 8009c28:	3708      	adds	r7, #8
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	200009c0 	.word	0x200009c0
 8009c34:	200009ec 	.word	0x200009ec
 8009c38:	200009d4 	.word	0x200009d4

08009c3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f001 fad9 	bl	800b200 <vPortFree>
            vPortFree( pxTCB );
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f001 fad6 	bl	800b200 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8009c54:	bf00      	nop
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c60:	4b0a      	ldr	r3, [pc, #40]	; (8009c8c <prvResetNextTaskUnblockTime+0x30>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d104      	bne.n	8009c74 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8009c6a:	4b09      	ldr	r3, [pc, #36]	; (8009c90 <prvResetNextTaskUnblockTime+0x34>)
 8009c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c70:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8009c72:	e005      	b.n	8009c80 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009c74:	4b05      	ldr	r3, [pc, #20]	; (8009c8c <prvResetNextTaskUnblockTime+0x30>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a04      	ldr	r2, [pc, #16]	; (8009c90 <prvResetNextTaskUnblockTime+0x34>)
 8009c7e:	6013      	str	r3, [r2, #0]
}
 8009c80:	bf00      	nop
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	200009a4 	.word	0x200009a4
 8009c90:	20000a0c 	.word	0x20000a0c

08009c94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8009c9a:	4b0b      	ldr	r3, [pc, #44]	; (8009cc8 <xTaskGetSchedulerState+0x34>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d102      	bne.n	8009ca8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	607b      	str	r3, [r7, #4]
 8009ca6:	e008      	b.n	8009cba <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ca8:	4b08      	ldr	r3, [pc, #32]	; (8009ccc <xTaskGetSchedulerState+0x38>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d102      	bne.n	8009cb6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8009cb0:	2302      	movs	r3, #2
 8009cb2:	607b      	str	r3, [r7, #4]
 8009cb4:	e001      	b.n	8009cba <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8009cba:	687b      	ldr	r3, [r7, #4]
    }
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr
 8009cc8:	200009f8 	.word	0x200009f8
 8009ccc:	20000a14 	.word	0x20000a14

08009cd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b088      	sub	sp, #32
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f000 8095 	beq.w	8009e12 <xTaskPriorityDisinherit+0x142>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8009ce8:	4b4c      	ldr	r3, [pc, #304]	; (8009e1c <xTaskPriorityDisinherit+0x14c>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	69ba      	ldr	r2, [r7, #24]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d00a      	beq.n	8009d08 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8009cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf6:	f383 8811 	msr	BASEPRI, r3
 8009cfa:	f3bf 8f6f 	isb	sy
 8009cfe:	f3bf 8f4f 	dsb	sy
 8009d02:	613b      	str	r3, [r7, #16]
    }
 8009d04:	bf00      	nop
 8009d06:	e7fe      	b.n	8009d06 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d10a      	bne.n	8009d26 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8009d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d14:	f383 8811 	msr	BASEPRI, r3
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	60fb      	str	r3, [r7, #12]
    }
 8009d22:	bf00      	nop
 8009d24:	e7fe      	b.n	8009d24 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d2a:	1e5a      	subs	r2, r3, #1
 8009d2c:	69bb      	ldr	r3, [r7, #24]
 8009d2e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d06a      	beq.n	8009e12 <xTaskPriorityDisinherit+0x142>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d166      	bne.n	8009e12 <xTaskPriorityDisinherit+0x142>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	3304      	adds	r3, #4
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7fe fa8b 	bl	8008264 <uxListRemove>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10a      	bne.n	8009d6a <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d58:	2201      	movs	r2, #1
 8009d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d5e:	43da      	mvns	r2, r3
 8009d60:	4b2f      	ldr	r3, [pc, #188]	; (8009e20 <xTaskPriorityDisinherit+0x150>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4013      	ands	r3, r2
 8009d66:	4a2e      	ldr	r2, [pc, #184]	; (8009e20 <xTaskPriorityDisinherit+0x150>)
 8009d68:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	204a      	movs	r0, #74	; 0x4a
 8009d70:	f002 f83e 	bl	800bdf0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d80:	f1c3 0205 	rsb	r2, r3, #5
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f002 fe3a 	bl	800ca04 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d94:	2201      	movs	r2, #1
 8009d96:	409a      	lsls	r2, r3
 8009d98:	4b21      	ldr	r3, [pc, #132]	; (8009e20 <xTaskPriorityDisinherit+0x150>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	4a20      	ldr	r2, [pc, #128]	; (8009e20 <xTaskPriorityDisinherit+0x150>)
 8009da0:	6013      	str	r3, [r2, #0]
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009da6:	491f      	ldr	r1, [pc, #124]	; (8009e24 <xTaskPriorityDisinherit+0x154>)
 8009da8:	4613      	mov	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4413      	add	r3, r2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	440b      	add	r3, r1
 8009db2:	3304      	adds	r3, #4
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	617b      	str	r3, [r7, #20]
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	697a      	ldr	r2, [r7, #20]
 8009dbc:	609a      	str	r2, [r3, #8]
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	689a      	ldr	r2, [r3, #8]
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	60da      	str	r2, [r3, #12]
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	69ba      	ldr	r2, [r7, #24]
 8009dcc:	3204      	adds	r2, #4
 8009dce:	605a      	str	r2, [r3, #4]
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	1d1a      	adds	r2, r3, #4
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	609a      	str	r2, [r3, #8]
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ddc:	4613      	mov	r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	4a0f      	ldr	r2, [pc, #60]	; (8009e24 <xTaskPriorityDisinherit+0x154>)
 8009de6:	441a      	add	r2, r3
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	615a      	str	r2, [r3, #20]
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009df0:	490c      	ldr	r1, [pc, #48]	; (8009e24 <xTaskPriorityDisinherit+0x154>)
 8009df2:	4613      	mov	r3, r2
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	4413      	add	r3, r2
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	440b      	add	r3, r1
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	1c59      	adds	r1, r3, #1
 8009e00:	4808      	ldr	r0, [pc, #32]	; (8009e24 <xTaskPriorityDisinherit+0x154>)
 8009e02:	4613      	mov	r3, r2
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	4413      	add	r3, r2
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	4403      	add	r3, r0
 8009e0c:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8009e12:	69fb      	ldr	r3, [r7, #28]
    }
 8009e14:	4618      	mov	r0, r3
 8009e16:	3720      	adds	r7, #32
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	20000914 	.word	0x20000914
 8009e20:	200009f4 	.word	0x200009f4
 8009e24:	20000918 	.word	0x20000918

08009e28 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b088      	sub	sp, #32
 8009e2c:	af02      	add	r7, sp, #8
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	607a      	str	r2, [r7, #4]
 8009e34:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00a      	beq.n	8009e52 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8009e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	613b      	str	r3, [r7, #16]
    }
 8009e4e:	bf00      	nop
 8009e50:	e7fe      	b.n	8009e50 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8009e52:	f000 fff1 	bl	800ae38 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8009e56:	4b36      	ldr	r3, [pc, #216]	; (8009f30 <xTaskGenericNotifyWait+0x108>)
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	3354      	adds	r3, #84	; 0x54
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	2b02      	cmp	r3, #2
 8009e66:	d022      	beq.n	8009eae <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8009e68:	4b31      	ldr	r3, [pc, #196]	; (8009f30 <xTaskGenericNotifyWait+0x108>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	3214      	adds	r2, #20
 8009e70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e74:	68ba      	ldr	r2, [r7, #8]
 8009e76:	43d2      	mvns	r2, r2
 8009e78:	4011      	ands	r1, r2
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	3214      	adds	r2, #20
 8009e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8009e82:	4b2b      	ldr	r3, [pc, #172]	; (8009f30 <xTaskGenericNotifyWait+0x108>)
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	4413      	add	r3, r2
 8009e8a:	3354      	adds	r3, #84	; 0x54
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8009e90:	6a3b      	ldr	r3, [r7, #32]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00b      	beq.n	8009eae <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e96:	2101      	movs	r1, #1
 8009e98:	6a38      	ldr	r0, [r7, #32]
 8009e9a:	f000 faef 	bl	800a47c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8009e9e:	4b25      	ldr	r3, [pc, #148]	; (8009f34 <xTaskGenericNotifyWait+0x10c>)
 8009ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ea4:	601a      	str	r2, [r3, #0]
 8009ea6:	f3bf 8f4f 	dsb	sy
 8009eaa:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8009eae:	f000 fff3 	bl	800ae98 <vPortExitCritical>

        taskENTER_CRITICAL();
 8009eb2:	f000 ffc1 	bl	800ae38 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8009eb6:	683a      	ldr	r2, [r7, #0]
 8009eb8:	6a3b      	ldr	r3, [r7, #32]
 8009eba:	9300      	str	r3, [sp, #0]
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	68b9      	ldr	r1, [r7, #8]
 8009ec2:	2040      	movs	r0, #64	; 0x40
 8009ec4:	f002 f8a0 	bl	800c008 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d007      	beq.n	8009ede <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8009ece:	4b18      	ldr	r3, [pc, #96]	; (8009f30 <xTaskGenericNotifyWait+0x108>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	68fa      	ldr	r2, [r7, #12]
 8009ed4:	3214      	adds	r2, #20
 8009ed6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8009ede:	4b14      	ldr	r3, [pc, #80]	; (8009f30 <xTaskGenericNotifyWait+0x108>)
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	3354      	adds	r3, #84	; 0x54
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d002      	beq.n	8009ef6 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	617b      	str	r3, [r7, #20]
 8009ef4:	e00e      	b.n	8009f14 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8009ef6:	4b0e      	ldr	r3, [pc, #56]	; (8009f30 <xTaskGenericNotifyWait+0x108>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	3214      	adds	r2, #20
 8009efe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	43d2      	mvns	r2, r2
 8009f06:	4011      	ands	r1, r2
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	3214      	adds	r2, #20
 8009f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8009f10:	2301      	movs	r3, #1
 8009f12:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8009f14:	4b06      	ldr	r3, [pc, #24]	; (8009f30 <xTaskGenericNotifyWait+0x108>)
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	3354      	adds	r3, #84	; 0x54
 8009f1e:	2200      	movs	r2, #0
 8009f20:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8009f22:	f000 ffb9 	bl	800ae98 <vPortExitCritical>

        return xReturn;
 8009f26:	697b      	ldr	r3, [r7, #20]
    }
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3718      	adds	r7, #24
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	20000914 	.word	0x20000914
 8009f34:	e000ed04 	.word	0xe000ed04

08009f38 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b090      	sub	sp, #64	; 0x40
 8009f3c:	af02      	add	r7, sp, #8
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
 8009f44:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8009f46:	2301      	movs	r3, #1
 8009f48:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d00a      	beq.n	8009f66 <xTaskGenericNotify+0x2e>
        __asm volatile
 8009f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f54:	f383 8811 	msr	BASEPRI, r3
 8009f58:	f3bf 8f6f 	isb	sy
 8009f5c:	f3bf 8f4f 	dsb	sy
 8009f60:	623b      	str	r3, [r7, #32]
    }
 8009f62:	bf00      	nop
 8009f64:	e7fe      	b.n	8009f64 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10a      	bne.n	8009f82 <xTaskGenericNotify+0x4a>
        __asm volatile
 8009f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f70:	f383 8811 	msr	BASEPRI, r3
 8009f74:	f3bf 8f6f 	isb	sy
 8009f78:	f3bf 8f4f 	dsb	sy
 8009f7c:	61fb      	str	r3, [r7, #28]
    }
 8009f7e:	bf00      	nop
 8009f80:	e7fe      	b.n	8009f80 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8009f86:	f000 ff57 	bl	800ae38 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8009f8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d006      	beq.n	8009f9e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8009f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f92:	68ba      	ldr	r2, [r7, #8]
 8009f94:	3214      	adds	r2, #20
 8009f96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f9c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8009f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	3354      	adds	r3, #84	; 0x54
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8009fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	3354      	adds	r3, #84	; 0x54
 8009fb4:	2202      	movs	r2, #2
 8009fb6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8009fb8:	78fb      	ldrb	r3, [r7, #3]
 8009fba:	2b04      	cmp	r3, #4
 8009fbc:	d83b      	bhi.n	800a036 <xTaskGenericNotify+0xfe>
 8009fbe:	a201      	add	r2, pc, #4	; (adr r2, 8009fc4 <xTaskGenericNotify+0x8c>)
 8009fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc4:	0800a055 	.word	0x0800a055
 8009fc8:	08009fd9 	.word	0x08009fd9
 8009fcc:	08009ff5 	.word	0x08009ff5
 8009fd0:	0800a00d 	.word	0x0800a00d
 8009fd4:	0800a01b 	.word	0x0800a01b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8009fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	3214      	adds	r2, #20
 8009fde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	ea42 0103 	orr.w	r1, r2, r3
 8009fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fea:	68ba      	ldr	r2, [r7, #8]
 8009fec:	3214      	adds	r2, #20
 8009fee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8009ff2:	e032      	b.n	800a05a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8009ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	3214      	adds	r2, #20
 8009ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ffe:	1c59      	adds	r1, r3, #1
 800a000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a002:	68ba      	ldr	r2, [r7, #8]
 800a004:	3214      	adds	r2, #20
 800a006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800a00a:	e026      	b.n	800a05a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800a00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00e:	68ba      	ldr	r2, [r7, #8]
 800a010:	3214      	adds	r2, #20
 800a012:	6879      	ldr	r1, [r7, #4]
 800a014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800a018:	e01f      	b.n	800a05a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a01a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d006      	beq.n	800a030 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800a022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	3214      	adds	r2, #20
 800a028:	6879      	ldr	r1, [r7, #4]
 800a02a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800a02e:	e014      	b.n	800a05a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 800a030:	2300      	movs	r3, #0
 800a032:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 800a034:	e011      	b.n	800a05a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800a036:	4b55      	ldr	r3, [pc, #340]	; (800a18c <xTaskGenericNotify+0x254>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00c      	beq.n	800a058 <xTaskGenericNotify+0x120>
        __asm volatile
 800a03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a042:	f383 8811 	msr	BASEPRI, r3
 800a046:	f3bf 8f6f 	isb	sy
 800a04a:	f3bf 8f4f 	dsb	sy
 800a04e:	61bb      	str	r3, [r7, #24]
    }
 800a050:	bf00      	nop
 800a052:	e7fe      	b.n	800a052 <xTaskGenericNotify+0x11a>
                    break;
 800a054:	bf00      	nop
 800a056:	e000      	b.n	800a05a <xTaskGenericNotify+0x122>

                    break;
 800a058:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800a05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05c:	4618      	mov	r0, r3
 800a05e:	f002 fd13 	bl	800ca88 <SEGGER_SYSVIEW_ShrinkId>
 800a062:	4601      	mov	r1, r0
 800a064:	78fa      	ldrb	r2, [r7, #3]
 800a066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a068:	9300      	str	r3, [sp, #0]
 800a06a:	4613      	mov	r3, r2
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	203e      	movs	r0, #62	; 0x3e
 800a070:	f001 ffca 	bl	800c008 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a074:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d17f      	bne.n	800a17c <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800a07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07e:	695b      	ldr	r3, [r3, #20]
 800a080:	62bb      	str	r3, [r7, #40]	; 0x28
 800a082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a088:	68d2      	ldr	r2, [r2, #12]
 800a08a:	609a      	str	r2, [r3, #8]
 800a08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a092:	6892      	ldr	r2, [r2, #8]
 800a094:	605a      	str	r2, [r3, #4]
 800a096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a098:	685a      	ldr	r2, [r3, #4]
 800a09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09c:	3304      	adds	r3, #4
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d103      	bne.n	800a0aa <xTaskGenericNotify+0x172>
 800a0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a4:	68da      	ldr	r2, [r3, #12]
 800a0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a8:	605a      	str	r2, [r3, #4]
 800a0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	615a      	str	r2, [r3, #20]
 800a0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	1e5a      	subs	r2, r3, #1
 800a0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b8:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f002 fca1 	bl	800ca04 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	409a      	lsls	r2, r3
 800a0ca:	4b31      	ldr	r3, [pc, #196]	; (800a190 <xTaskGenericNotify+0x258>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	4a2f      	ldr	r2, [pc, #188]	; (800a190 <xTaskGenericNotify+0x258>)
 800a0d2:	6013      	str	r3, [r2, #0]
 800a0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d8:	492e      	ldr	r1, [pc, #184]	; (800a194 <xTaskGenericNotify+0x25c>)
 800a0da:	4613      	mov	r3, r2
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	4413      	add	r3, r2
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	440b      	add	r3, r1
 800a0e4:	3304      	adds	r3, #4
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	627b      	str	r3, [r7, #36]	; 0x24
 800a0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ee:	609a      	str	r2, [r3, #8]
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f2:	689a      	ldr	r2, [r3, #8]
 800a0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f6:	60da      	str	r2, [r3, #12]
 800a0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0fe:	3204      	adds	r2, #4
 800a100:	605a      	str	r2, [r3, #4]
 800a102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a104:	1d1a      	adds	r2, r3, #4
 800a106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a108:	609a      	str	r2, [r3, #8]
 800a10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a10e:	4613      	mov	r3, r2
 800a110:	009b      	lsls	r3, r3, #2
 800a112:	4413      	add	r3, r2
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	4a1f      	ldr	r2, [pc, #124]	; (800a194 <xTaskGenericNotify+0x25c>)
 800a118:	441a      	add	r2, r3
 800a11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11c:	615a      	str	r2, [r3, #20]
 800a11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a122:	491c      	ldr	r1, [pc, #112]	; (800a194 <xTaskGenericNotify+0x25c>)
 800a124:	4613      	mov	r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	4413      	add	r3, r2
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	440b      	add	r3, r1
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	1c59      	adds	r1, r3, #1
 800a132:	4818      	ldr	r0, [pc, #96]	; (800a194 <xTaskGenericNotify+0x25c>)
 800a134:	4613      	mov	r3, r2
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	4413      	add	r3, r2
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	4403      	add	r3, r0
 800a13e:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00a      	beq.n	800a15e <xTaskGenericNotify+0x226>
        __asm volatile
 800a148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14c:	f383 8811 	msr	BASEPRI, r3
 800a150:	f3bf 8f6f 	isb	sy
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	617b      	str	r3, [r7, #20]
    }
 800a15a:	bf00      	nop
 800a15c:	e7fe      	b.n	800a15c <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a162:	4b0d      	ldr	r3, [pc, #52]	; (800a198 <xTaskGenericNotify+0x260>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a168:	429a      	cmp	r2, r3
 800a16a:	d907      	bls.n	800a17c <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800a16c:	4b0b      	ldr	r3, [pc, #44]	; (800a19c <xTaskGenericNotify+0x264>)
 800a16e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a172:	601a      	str	r2, [r3, #0]
 800a174:	f3bf 8f4f 	dsb	sy
 800a178:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800a17c:	f000 fe8c 	bl	800ae98 <vPortExitCritical>

        return xReturn;
 800a180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800a182:	4618      	mov	r0, r3
 800a184:	3738      	adds	r7, #56	; 0x38
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	200009f0 	.word	0x200009f0
 800a190:	200009f4 	.word	0x200009f4
 800a194:	20000918 	.word	0x20000918
 800a198:	20000914 	.word	0x20000914
 800a19c:	e000ed04 	.word	0xe000ed04

0800a1a0 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b094      	sub	sp, #80	; 0x50
 800a1a4:	af02      	add	r7, sp, #8
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]
 800a1ac:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d10a      	bne.n	800a1ce <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 800a1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1bc:	f383 8811 	msr	BASEPRI, r3
 800a1c0:	f3bf 8f6f 	isb	sy
 800a1c4:	f3bf 8f4f 	dsb	sy
 800a1c8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800a1ca:	bf00      	nop
 800a1cc:	e7fe      	b.n	800a1cc <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d00a      	beq.n	800a1ea <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 800a1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d8:	f383 8811 	msr	BASEPRI, r3
 800a1dc:	f3bf 8f6f 	isb	sy
 800a1e0:	f3bf 8f4f 	dsb	sy
 800a1e4:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800a1e6:	bf00      	nop
 800a1e8:	e7fe      	b.n	800a1e8 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1ea:	f000 ff0f 	bl	800b00c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	643b      	str	r3, [r7, #64]	; 0x40
        __asm volatile
 800a1f2:	f3ef 8211 	mrs	r2, BASEPRI
 800a1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	623a      	str	r2, [r7, #32]
 800a208:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800a20a:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a20c:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 800a20e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a210:	2b00      	cmp	r3, #0
 800a212:	d006      	beq.n	800a222 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800a214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a216:	68ba      	ldr	r2, [r7, #8]
 800a218:	3214      	adds	r2, #20
 800a21a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a21e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a220:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800a222:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	4413      	add	r3, r2
 800a228:	3354      	adds	r3, #84	; 0x54
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800a230:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	4413      	add	r3, r2
 800a236:	3354      	adds	r3, #84	; 0x54
 800a238:	2202      	movs	r2, #2
 800a23a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800a23c:	78fb      	ldrb	r3, [r7, #3]
 800a23e:	2b04      	cmp	r3, #4
 800a240:	d83b      	bhi.n	800a2ba <xTaskGenericNotifyFromISR+0x11a>
 800a242:	a201      	add	r2, pc, #4	; (adr r2, 800a248 <xTaskGenericNotifyFromISR+0xa8>)
 800a244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a248:	0800a2d9 	.word	0x0800a2d9
 800a24c:	0800a25d 	.word	0x0800a25d
 800a250:	0800a279 	.word	0x0800a279
 800a254:	0800a291 	.word	0x0800a291
 800a258:	0800a29f 	.word	0x0800a29f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800a25c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a25e:	68ba      	ldr	r2, [r7, #8]
 800a260:	3214      	adds	r2, #20
 800a262:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	ea42 0103 	orr.w	r1, r2, r3
 800a26c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a26e:	68ba      	ldr	r2, [r7, #8]
 800a270:	3214      	adds	r2, #20
 800a272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800a276:	e032      	b.n	800a2de <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800a278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a27a:	68ba      	ldr	r2, [r7, #8]
 800a27c:	3214      	adds	r2, #20
 800a27e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a282:	1c59      	adds	r1, r3, #1
 800a284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a286:	68ba      	ldr	r2, [r7, #8]
 800a288:	3214      	adds	r2, #20
 800a28a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800a28e:	e026      	b.n	800a2de <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800a290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	3214      	adds	r2, #20
 800a296:	6879      	ldr	r1, [r7, #4]
 800a298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800a29c:	e01f      	b.n	800a2de <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a29e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d006      	beq.n	800a2b4 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800a2a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	3214      	adds	r2, #20
 800a2ac:	6879      	ldr	r1, [r7, #4]
 800a2ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800a2b2:	e014      	b.n	800a2de <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 800a2b8:	e011      	b.n	800a2de <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800a2ba:	4b69      	ldr	r3, [pc, #420]	; (800a460 <xTaskGenericNotifyFromISR+0x2c0>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00c      	beq.n	800a2dc <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 800a2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c6:	f383 8811 	msr	BASEPRI, r3
 800a2ca:	f3bf 8f6f 	isb	sy
 800a2ce:	f3bf 8f4f 	dsb	sy
 800a2d2:	61bb      	str	r3, [r7, #24]
    }
 800a2d4:	bf00      	nop
 800a2d6:	e7fe      	b.n	800a2d6 <xTaskGenericNotifyFromISR+0x136>
                    break;
 800a2d8:	bf00      	nop
 800a2da:	e000      	b.n	800a2de <xTaskGenericNotifyFromISR+0x13e>
                    break;
 800a2dc:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 800a2de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f002 fbd1 	bl	800ca88 <SEGGER_SYSVIEW_ShrinkId>
 800a2e6:	78f9      	ldrb	r1, [r7, #3]
 800a2e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a2ec:	9201      	str	r2, [sp, #4]
 800a2ee:	9300      	str	r3, [sp, #0]
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	4601      	mov	r1, r0
 800a2f6:	203f      	movs	r0, #63	; 0x3f
 800a2f8:	f001 ff18 	bl	800c12c <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a2fc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a300:	2b01      	cmp	r3, #1
 800a302:	f040 80a2 	bne.w	800a44a <xTaskGenericNotifyFromISR+0x2aa>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00a      	beq.n	800a324 <xTaskGenericNotifyFromISR+0x184>
        __asm volatile
 800a30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a312:	f383 8811 	msr	BASEPRI, r3
 800a316:	f3bf 8f6f 	isb	sy
 800a31a:	f3bf 8f4f 	dsb	sy
 800a31e:	617b      	str	r3, [r7, #20]
    }
 800a320:	bf00      	nop
 800a322:	e7fe      	b.n	800a322 <xTaskGenericNotifyFromISR+0x182>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a324:	4b4f      	ldr	r3, [pc, #316]	; (800a464 <xTaskGenericNotifyFromISR+0x2c4>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d162      	bne.n	800a3f2 <xTaskGenericNotifyFromISR+0x252>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800a32c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a32e:	695b      	ldr	r3, [r3, #20]
 800a330:	633b      	str	r3, [r7, #48]	; 0x30
 800a332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a338:	68d2      	ldr	r2, [r2, #12]
 800a33a:	609a      	str	r2, [r3, #8]
 800a33c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a342:	6892      	ldr	r2, [r2, #8]
 800a344:	605a      	str	r2, [r3, #4]
 800a346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a348:	685a      	ldr	r2, [r3, #4]
 800a34a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a34c:	3304      	adds	r3, #4
 800a34e:	429a      	cmp	r2, r3
 800a350:	d103      	bne.n	800a35a <xTaskGenericNotifyFromISR+0x1ba>
 800a352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a354:	68da      	ldr	r2, [r3, #12]
 800a356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a358:	605a      	str	r2, [r3, #4]
 800a35a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a35c:	2200      	movs	r2, #0
 800a35e:	615a      	str	r2, [r3, #20]
 800a360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	1e5a      	subs	r2, r3, #1
 800a366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a368:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800a36a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a36c:	4618      	mov	r0, r3
 800a36e:	f002 fb49 	bl	800ca04 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a376:	2201      	movs	r2, #1
 800a378:	409a      	lsls	r2, r3
 800a37a:	4b3b      	ldr	r3, [pc, #236]	; (800a468 <xTaskGenericNotifyFromISR+0x2c8>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4313      	orrs	r3, r2
 800a380:	4a39      	ldr	r2, [pc, #228]	; (800a468 <xTaskGenericNotifyFromISR+0x2c8>)
 800a382:	6013      	str	r3, [r2, #0]
 800a384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a388:	4938      	ldr	r1, [pc, #224]	; (800a46c <xTaskGenericNotifyFromISR+0x2cc>)
 800a38a:	4613      	mov	r3, r2
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	4413      	add	r3, r2
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	440b      	add	r3, r1
 800a394:	3304      	adds	r3, #4
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a39a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a39c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a39e:	609a      	str	r2, [r3, #8]
 800a3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a2:	689a      	ldr	r2, [r3, #8]
 800a3a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3a6:	60da      	str	r2, [r3, #12]
 800a3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3ae:	3204      	adds	r2, #4
 800a3b0:	605a      	str	r2, [r3, #4]
 800a3b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3b4:	1d1a      	adds	r2, r3, #4
 800a3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b8:	609a      	str	r2, [r3, #8]
 800a3ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3be:	4613      	mov	r3, r2
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	4413      	add	r3, r2
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	4a29      	ldr	r2, [pc, #164]	; (800a46c <xTaskGenericNotifyFromISR+0x2cc>)
 800a3c8:	441a      	add	r2, r3
 800a3ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3cc:	615a      	str	r2, [r3, #20]
 800a3ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3d2:	4926      	ldr	r1, [pc, #152]	; (800a46c <xTaskGenericNotifyFromISR+0x2cc>)
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	4413      	add	r3, r2
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	440b      	add	r3, r1
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	1c59      	adds	r1, r3, #1
 800a3e2:	4822      	ldr	r0, [pc, #136]	; (800a46c <xTaskGenericNotifyFromISR+0x2cc>)
 800a3e4:	4613      	mov	r3, r2
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	4413      	add	r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	4403      	add	r3, r0
 800a3ee:	6019      	str	r1, [r3, #0]
 800a3f0:	e01b      	b.n	800a42a <xTaskGenericNotifyFromISR+0x28a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a3f2:	4b1f      	ldr	r3, [pc, #124]	; (800a470 <xTaskGenericNotifyFromISR+0x2d0>)
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	637b      	str	r3, [r7, #52]	; 0x34
 800a3f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3fc:	61da      	str	r2, [r3, #28]
 800a3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a400:	689a      	ldr	r2, [r3, #8]
 800a402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a404:	621a      	str	r2, [r3, #32]
 800a406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a40c:	3218      	adds	r2, #24
 800a40e:	605a      	str	r2, [r3, #4]
 800a410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a412:	f103 0218 	add.w	r2, r3, #24
 800a416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a418:	609a      	str	r2, [r3, #8]
 800a41a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a41c:	4a14      	ldr	r2, [pc, #80]	; (800a470 <xTaskGenericNotifyFromISR+0x2d0>)
 800a41e:	629a      	str	r2, [r3, #40]	; 0x28
 800a420:	4b13      	ldr	r3, [pc, #76]	; (800a470 <xTaskGenericNotifyFromISR+0x2d0>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	3301      	adds	r3, #1
 800a426:	4a12      	ldr	r2, [pc, #72]	; (800a470 <xTaskGenericNotifyFromISR+0x2d0>)
 800a428:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a42a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a42c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a42e:	4b11      	ldr	r3, [pc, #68]	; (800a474 <xTaskGenericNotifyFromISR+0x2d4>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a434:	429a      	cmp	r2, r3
 800a436:	d908      	bls.n	800a44a <xTaskGenericNotifyFromISR+0x2aa>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800a438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d002      	beq.n	800a444 <xTaskGenericNotifyFromISR+0x2a4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800a43e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a440:	2201      	movs	r2, #1
 800a442:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800a444:	4b0c      	ldr	r3, [pc, #48]	; (800a478 <xTaskGenericNotifyFromISR+0x2d8>)
 800a446:	2201      	movs	r2, #1
 800a448:	601a      	str	r2, [r3, #0]
 800a44a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a44c:	613b      	str	r3, [r7, #16]
        __asm volatile
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	f383 8811 	msr	BASEPRI, r3
    }
 800a454:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800a456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 800a458:	4618      	mov	r0, r3
 800a45a:	3748      	adds	r7, #72	; 0x48
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	200009f0 	.word	0x200009f0
 800a464:	20000a14 	.word	0x20000a14
 800a468:	200009f4 	.word	0x200009f4
 800a46c:	20000918 	.word	0x20000918
 800a470:	200009ac 	.word	0x200009ac
 800a474:	20000914 	.word	0x20000914
 800a478:	20000a00 	.word	0x20000a00

0800a47c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800a486:	4b36      	ldr	r3, [pc, #216]	; (800a560 <prvAddCurrentTaskToDelayedList+0xe4>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a48c:	4b35      	ldr	r3, [pc, #212]	; (800a564 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	3304      	adds	r3, #4
 800a492:	4618      	mov	r0, r3
 800a494:	f7fd fee6 	bl	8008264 <uxListRemove>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d10b      	bne.n	800a4b6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a49e:	4b31      	ldr	r3, [pc, #196]	; (800a564 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a4aa:	43da      	mvns	r2, r3
 800a4ac:	4b2e      	ldr	r3, [pc, #184]	; (800a568 <prvAddCurrentTaskToDelayedList+0xec>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4013      	ands	r3, r2
 800a4b2:	4a2d      	ldr	r2, [pc, #180]	; (800a568 <prvAddCurrentTaskToDelayedList+0xec>)
 800a4b4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4bc:	d124      	bne.n	800a508 <prvAddCurrentTaskToDelayedList+0x8c>
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d021      	beq.n	800a508 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4c4:	4b29      	ldr	r3, [pc, #164]	; (800a56c <prvAddCurrentTaskToDelayedList+0xf0>)
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	613b      	str	r3, [r7, #16]
 800a4ca:	4b26      	ldr	r3, [pc, #152]	; (800a564 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	693a      	ldr	r2, [r7, #16]
 800a4d0:	609a      	str	r2, [r3, #8]
 800a4d2:	4b24      	ldr	r3, [pc, #144]	; (800a564 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	6892      	ldr	r2, [r2, #8]
 800a4da:	60da      	str	r2, [r3, #12]
 800a4dc:	4b21      	ldr	r3, [pc, #132]	; (800a564 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	3204      	adds	r2, #4
 800a4e6:	605a      	str	r2, [r3, #4]
 800a4e8:	4b1e      	ldr	r3, [pc, #120]	; (800a564 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	1d1a      	adds	r2, r3, #4
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	609a      	str	r2, [r3, #8]
 800a4f2:	4b1c      	ldr	r3, [pc, #112]	; (800a564 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4a1d      	ldr	r2, [pc, #116]	; (800a56c <prvAddCurrentTaskToDelayedList+0xf0>)
 800a4f8:	615a      	str	r2, [r3, #20]
 800a4fa:	4b1c      	ldr	r3, [pc, #112]	; (800a56c <prvAddCurrentTaskToDelayedList+0xf0>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	3301      	adds	r3, #1
 800a500:	4a1a      	ldr	r2, [pc, #104]	; (800a56c <prvAddCurrentTaskToDelayedList+0xf0>)
 800a502:	6013      	str	r3, [r2, #0]
 800a504:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800a506:	e026      	b.n	800a556 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800a508:	697a      	ldr	r2, [r7, #20]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4413      	add	r3, r2
 800a50e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a510:	4b14      	ldr	r3, [pc, #80]	; (800a564 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800a518:	68fa      	ldr	r2, [r7, #12]
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d209      	bcs.n	800a534 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a520:	4b13      	ldr	r3, [pc, #76]	; (800a570 <prvAddCurrentTaskToDelayedList+0xf4>)
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	4b0f      	ldr	r3, [pc, #60]	; (800a564 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	3304      	adds	r3, #4
 800a52a:	4619      	mov	r1, r3
 800a52c:	4610      	mov	r0, r2
 800a52e:	f7fd fe60 	bl	80081f2 <vListInsert>
}
 800a532:	e010      	b.n	800a556 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a534:	4b0f      	ldr	r3, [pc, #60]	; (800a574 <prvAddCurrentTaskToDelayedList+0xf8>)
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	4b0a      	ldr	r3, [pc, #40]	; (800a564 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	3304      	adds	r3, #4
 800a53e:	4619      	mov	r1, r3
 800a540:	4610      	mov	r0, r2
 800a542:	f7fd fe56 	bl	80081f2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800a546:	4b0c      	ldr	r3, [pc, #48]	; (800a578 <prvAddCurrentTaskToDelayedList+0xfc>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d202      	bcs.n	800a556 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800a550:	4a09      	ldr	r2, [pc, #36]	; (800a578 <prvAddCurrentTaskToDelayedList+0xfc>)
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	6013      	str	r3, [r2, #0]
}
 800a556:	bf00      	nop
 800a558:	3718      	adds	r7, #24
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	200009f0 	.word	0x200009f0
 800a564:	20000914 	.word	0x20000914
 800a568:	200009f4 	.word	0x200009f4
 800a56c:	200009d8 	.word	0x200009d8
 800a570:	200009a8 	.word	0x200009a8
 800a574:	200009a4 	.word	0x200009a4
 800a578:	20000a0c 	.word	0x20000a0c

0800a57c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800a582:	2300      	movs	r3, #0
 800a584:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800a586:	f000 faef 	bl	800ab68 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800a58a:	4b11      	ldr	r3, [pc, #68]	; (800a5d0 <xTimerCreateTimerTask+0x54>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d00b      	beq.n	800a5aa <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800a592:	4b10      	ldr	r3, [pc, #64]	; (800a5d4 <xTimerCreateTimerTask+0x58>)
 800a594:	9301      	str	r3, [sp, #4]
 800a596:	2302      	movs	r3, #2
 800a598:	9300      	str	r3, [sp, #0]
 800a59a:	2300      	movs	r3, #0
 800a59c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a5a0:	490d      	ldr	r1, [pc, #52]	; (800a5d8 <xTimerCreateTimerTask+0x5c>)
 800a5a2:	480e      	ldr	r0, [pc, #56]	; (800a5dc <xTimerCreateTimerTask+0x60>)
 800a5a4:	f7fe fc26 	bl	8008df4 <xTaskCreate>
 800a5a8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d10a      	bne.n	800a5c6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800a5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	603b      	str	r3, [r7, #0]
    }
 800a5c2:	bf00      	nop
 800a5c4:	e7fe      	b.n	800a5c4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800a5c6:	687b      	ldr	r3, [r7, #4]
    }
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3708      	adds	r7, #8
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	20000a48 	.word	0x20000a48
 800a5d4:	20000a4c 	.word	0x20000a4c
 800a5d8:	08010c18 	.word	0x08010c18
 800a5dc:	0800a7d5 	.word	0x0800a7d5

0800a5e0 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b088      	sub	sp, #32
 800a5e4:	af02      	add	r7, sp, #8
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
 800a5ec:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a5ee:	202c      	movs	r0, #44	; 0x2c
 800a5f0:	f000 fd4c 	bl	800b08c <pvPortMalloc>
 800a5f4:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00d      	beq.n	800a618 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	2200      	movs	r2, #0
 800a600:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	9301      	str	r3, [sp, #4]
 800a608:	6a3b      	ldr	r3, [r7, #32]
 800a60a:	9300      	str	r3, [sp, #0]
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	68b9      	ldr	r1, [r7, #8]
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f000 f805 	bl	800a622 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800a618:	697b      	ldr	r3, [r7, #20]
        }
 800a61a:	4618      	mov	r0, r3
 800a61c:	3718      	adds	r7, #24
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800a622:	b580      	push	{r7, lr}
 800a624:	b086      	sub	sp, #24
 800a626:	af00      	add	r7, sp, #0
 800a628:	60f8      	str	r0, [r7, #12]
 800a62a:	60b9      	str	r1, [r7, #8]
 800a62c:	607a      	str	r2, [r7, #4]
 800a62e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d10a      	bne.n	800a64c <prvInitialiseNewTimer+0x2a>
        __asm volatile
 800a636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63a:	f383 8811 	msr	BASEPRI, r3
 800a63e:	f3bf 8f6f 	isb	sy
 800a642:	f3bf 8f4f 	dsb	sy
 800a646:	617b      	str	r3, [r7, #20]
    }
 800a648:	bf00      	nop
 800a64a:	e7fe      	b.n	800a64a <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 800a64c:	f000 fa8c 	bl	800ab68 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 800a650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a652:	68fa      	ldr	r2, [r7, #12]
 800a654:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a658:	68ba      	ldr	r2, [r7, #8]
 800a65a:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 800a65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65e:	683a      	ldr	r2, [r7, #0]
 800a660:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a664:	6a3a      	ldr	r2, [r7, #32]
 800a666:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66a:	3304      	adds	r3, #4
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7fd fdb3 	bl	80081d8 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d008      	beq.n	800a68a <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a67e:	f043 0304 	orr.w	r3, r3, #4
 800a682:	b2da      	uxtb	r2, r3
 800a684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a686:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 800a68a:	bf00      	nop
 800a68c:	3718      	adds	r7, #24
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
	...

0800a694 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800a694:	b580      	push	{r7, lr}
 800a696:	b08a      	sub	sp, #40	; 0x28
 800a698:	af00      	add	r7, sp, #0
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	60b9      	str	r1, [r7, #8]
 800a69e:	607a      	str	r2, [r7, #4]
 800a6a0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d10a      	bne.n	800a6c2 <xTimerGenericCommand+0x2e>
        __asm volatile
 800a6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b0:	f383 8811 	msr	BASEPRI, r3
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	f3bf 8f4f 	dsb	sy
 800a6bc:	623b      	str	r3, [r7, #32]
    }
 800a6be:	bf00      	nop
 800a6c0:	e7fe      	b.n	800a6c0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800a6c2:	4b1a      	ldr	r3, [pc, #104]	; (800a72c <xTimerGenericCommand+0x98>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d02a      	beq.n	800a720 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	2b05      	cmp	r3, #5
 800a6da:	dc18      	bgt.n	800a70e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a6dc:	f7ff fada 	bl	8009c94 <xTaskGetSchedulerState>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b02      	cmp	r3, #2
 800a6e4:	d109      	bne.n	800a6fa <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a6e6:	4b11      	ldr	r3, [pc, #68]	; (800a72c <xTimerGenericCommand+0x98>)
 800a6e8:	6818      	ldr	r0, [r3, #0]
 800a6ea:	f107 0114 	add.w	r1, r7, #20
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6f2:	f7fd fee9 	bl	80084c8 <xQueueGenericSend>
 800a6f6:	6278      	str	r0, [r7, #36]	; 0x24
 800a6f8:	e012      	b.n	800a720 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a6fa:	4b0c      	ldr	r3, [pc, #48]	; (800a72c <xTimerGenericCommand+0x98>)
 800a6fc:	6818      	ldr	r0, [r3, #0]
 800a6fe:	f107 0114 	add.w	r1, r7, #20
 800a702:	2300      	movs	r3, #0
 800a704:	2200      	movs	r2, #0
 800a706:	f7fd fedf 	bl	80084c8 <xQueueGenericSend>
 800a70a:	6278      	str	r0, [r7, #36]	; 0x24
 800a70c:	e008      	b.n	800a720 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a70e:	4b07      	ldr	r3, [pc, #28]	; (800a72c <xTimerGenericCommand+0x98>)
 800a710:	6818      	ldr	r0, [r3, #0]
 800a712:	f107 0114 	add.w	r1, r7, #20
 800a716:	2300      	movs	r3, #0
 800a718:	683a      	ldr	r2, [r7, #0]
 800a71a:	f7fd fffb 	bl	8008714 <xQueueGenericSendFromISR>
 800a71e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800a720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800a722:	4618      	mov	r0, r3
 800a724:	3728      	adds	r7, #40	; 0x28
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop
 800a72c:	20000a48 	.word	0x20000a48

0800a730 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800a73c:	e008      	b.n	800a750 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	699b      	ldr	r3, [r3, #24]
 800a742:	68ba      	ldr	r2, [r7, #8]
 800a744:	4413      	add	r3, r2
 800a746:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	6a1b      	ldr	r3, [r3, #32]
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	699a      	ldr	r2, [r3, #24]
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	18d1      	adds	r1, r2, r3
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f000 f8dd 	bl	800a91c <prvInsertTimerInActiveList>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d1ea      	bne.n	800a73e <prvReloadTimer+0xe>
        }
    }
 800a768:	bf00      	nop
 800a76a:	bf00      	nop
 800a76c:	3710      	adds	r7, #16
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
	...

0800a774 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a77e:	4b14      	ldr	r3, [pc, #80]	; (800a7d0 <prvProcessExpiredTimer+0x5c>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	3304      	adds	r3, #4
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7fd fd69 	bl	8008264 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a798:	f003 0304 	and.w	r3, r3, #4
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d005      	beq.n	800a7ac <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800a7a0:	683a      	ldr	r2, [r7, #0]
 800a7a2:	6879      	ldr	r1, [r7, #4]
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	f7ff ffc3 	bl	800a730 <prvReloadTimer>
 800a7aa:	e008      	b.n	800a7be <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7b2:	f023 0301 	bic.w	r3, r3, #1
 800a7b6:	b2da      	uxtb	r2, r3
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6a1b      	ldr	r3, [r3, #32]
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	4798      	blx	r3
    }
 800a7c6:	bf00      	nop
 800a7c8:	3710      	adds	r7, #16
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	20000a40 	.word	0x20000a40

0800a7d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7dc:	f107 0308 	add.w	r3, r7, #8
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f000 f857 	bl	800a894 <prvGetNextExpireTime>
 800a7e6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	68f8      	ldr	r0, [r7, #12]
 800a7ee:	f000 f803 	bl	800a7f8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800a7f2:	f000 f8d5 	bl	800a9a0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7f6:	e7f1      	b.n	800a7dc <prvTimerTask+0x8>

0800a7f8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b084      	sub	sp, #16
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800a802:	f7fe fd19 	bl	8009238 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a806:	f107 0308 	add.w	r3, r7, #8
 800a80a:	4618      	mov	r0, r3
 800a80c:	f000 f866 	bl	800a8dc <prvSampleTimeNow>
 800a810:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d130      	bne.n	800a87a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d10a      	bne.n	800a834 <prvProcessTimerOrBlockTask+0x3c>
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	429a      	cmp	r2, r3
 800a824:	d806      	bhi.n	800a834 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800a826:	f7fe fd15 	bl	8009254 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a82a:	68f9      	ldr	r1, [r7, #12]
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f7ff ffa1 	bl	800a774 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800a832:	e024      	b.n	800a87e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d008      	beq.n	800a84c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a83a:	4b13      	ldr	r3, [pc, #76]	; (800a888 <prvProcessTimerOrBlockTask+0x90>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d101      	bne.n	800a848 <prvProcessTimerOrBlockTask+0x50>
 800a844:	2301      	movs	r3, #1
 800a846:	e000      	b.n	800a84a <prvProcessTimerOrBlockTask+0x52>
 800a848:	2300      	movs	r3, #0
 800a84a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a84c:	4b0f      	ldr	r3, [pc, #60]	; (800a88c <prvProcessTimerOrBlockTask+0x94>)
 800a84e:	6818      	ldr	r0, [r3, #0]
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	1ad3      	subs	r3, r2, r3
 800a856:	683a      	ldr	r2, [r7, #0]
 800a858:	4619      	mov	r1, r3
 800a85a:	f7fe fa97 	bl	8008d8c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800a85e:	f7fe fcf9 	bl	8009254 <xTaskResumeAll>
 800a862:	4603      	mov	r3, r0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d10a      	bne.n	800a87e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800a868:	4b09      	ldr	r3, [pc, #36]	; (800a890 <prvProcessTimerOrBlockTask+0x98>)
 800a86a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a86e:	601a      	str	r2, [r3, #0]
 800a870:	f3bf 8f4f 	dsb	sy
 800a874:	f3bf 8f6f 	isb	sy
    }
 800a878:	e001      	b.n	800a87e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800a87a:	f7fe fceb 	bl	8009254 <xTaskResumeAll>
    }
 800a87e:	bf00      	nop
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	20000a44 	.word	0x20000a44
 800a88c:	20000a48 	.word	0x20000a48
 800a890:	e000ed04 	.word	0xe000ed04

0800a894 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800a894:	b480      	push	{r7}
 800a896:	b085      	sub	sp, #20
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a89c:	4b0e      	ldr	r3, [pc, #56]	; (800a8d8 <prvGetNextExpireTime+0x44>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d101      	bne.n	800a8aa <prvGetNextExpireTime+0x16>
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	e000      	b.n	800a8ac <prvGetNextExpireTime+0x18>
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d105      	bne.n	800a8c4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8b8:	4b07      	ldr	r3, [pc, #28]	; (800a8d8 <prvGetNextExpireTime+0x44>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	60fb      	str	r3, [r7, #12]
 800a8c2:	e001      	b.n	800a8c8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
    }
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3714      	adds	r7, #20
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop
 800a8d8:	20000a40 	.word	0x20000a40

0800a8dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800a8e4:	f7fe fdb6 	bl	8009454 <xTaskGetTickCount>
 800a8e8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800a8ea:	4b0b      	ldr	r3, [pc, #44]	; (800a918 <prvSampleTimeNow+0x3c>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	68fa      	ldr	r2, [r7, #12]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d205      	bcs.n	800a900 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800a8f4:	f000 f912 	bl	800ab1c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	601a      	str	r2, [r3, #0]
 800a8fe:	e002      	b.n	800a906 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800a906:	4a04      	ldr	r2, [pc, #16]	; (800a918 <prvSampleTimeNow+0x3c>)
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800a90c:	68fb      	ldr	r3, [r7, #12]
    }
 800a90e:	4618      	mov	r0, r3
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	20000a50 	.word	0x20000a50

0800a91c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b086      	sub	sp, #24
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	607a      	str	r2, [r7, #4]
 800a928:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800a92a:	2300      	movs	r3, #0
 800a92c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	68ba      	ldr	r2, [r7, #8]
 800a932:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	68fa      	ldr	r2, [r7, #12]
 800a938:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800a93a:	68ba      	ldr	r2, [r7, #8]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d812      	bhi.n	800a968 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	1ad2      	subs	r2, r2, r3
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	699b      	ldr	r3, [r3, #24]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d302      	bcc.n	800a956 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800a950:	2301      	movs	r3, #1
 800a952:	617b      	str	r3, [r7, #20]
 800a954:	e01b      	b.n	800a98e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a956:	4b10      	ldr	r3, [pc, #64]	; (800a998 <prvInsertTimerInActiveList+0x7c>)
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	3304      	adds	r3, #4
 800a95e:	4619      	mov	r1, r3
 800a960:	4610      	mov	r0, r2
 800a962:	f7fd fc46 	bl	80081f2 <vListInsert>
 800a966:	e012      	b.n	800a98e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d206      	bcs.n	800a97e <prvInsertTimerInActiveList+0x62>
 800a970:	68ba      	ldr	r2, [r7, #8]
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	429a      	cmp	r2, r3
 800a976:	d302      	bcc.n	800a97e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800a978:	2301      	movs	r3, #1
 800a97a:	617b      	str	r3, [r7, #20]
 800a97c:	e007      	b.n	800a98e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a97e:	4b07      	ldr	r3, [pc, #28]	; (800a99c <prvInsertTimerInActiveList+0x80>)
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	3304      	adds	r3, #4
 800a986:	4619      	mov	r1, r3
 800a988:	4610      	mov	r0, r2
 800a98a:	f7fd fc32 	bl	80081f2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800a98e:	697b      	ldr	r3, [r7, #20]
    }
 800a990:	4618      	mov	r0, r3
 800a992:	3718      	adds	r7, #24
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	20000a44 	.word	0x20000a44
 800a99c:	20000a40 	.word	0x20000a40

0800a9a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b088      	sub	sp, #32
 800a9a4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a9a6:	e0a6      	b.n	800aaf6 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f2c0 80a3 	blt.w	800aaf6 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	695b      	ldr	r3, [r3, #20]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d004      	beq.n	800a9c6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	3304      	adds	r3, #4
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7fd fc4f 	bl	8008264 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9c6:	1d3b      	adds	r3, r7, #4
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f7ff ff87 	bl	800a8dc <prvSampleTimeNow>
 800a9ce:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	3b01      	subs	r3, #1
 800a9d4:	2b08      	cmp	r3, #8
 800a9d6:	f200 808d 	bhi.w	800aaf4 <prvProcessReceivedCommands+0x154>
 800a9da:	a201      	add	r2, pc, #4	; (adr r2, 800a9e0 <prvProcessReceivedCommands+0x40>)
 800a9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e0:	0800aa05 	.word	0x0800aa05
 800a9e4:	0800aa05 	.word	0x0800aa05
 800a9e8:	0800aa6d 	.word	0x0800aa6d
 800a9ec:	0800aa81 	.word	0x0800aa81
 800a9f0:	0800aacb 	.word	0x0800aacb
 800a9f4:	0800aa05 	.word	0x0800aa05
 800a9f8:	0800aa05 	.word	0x0800aa05
 800a9fc:	0800aa6d 	.word	0x0800aa6d
 800aa00:	0800aa81 	.word	0x0800aa81
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa04:	69fb      	ldr	r3, [r7, #28]
 800aa06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa0a:	f043 0301 	orr.w	r3, r3, #1
 800aa0e:	b2da      	uxtb	r2, r3
 800aa10:	69fb      	ldr	r3, [r7, #28]
 800aa12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	699b      	ldr	r3, [r3, #24]
 800aa1c:	18d1      	adds	r1, r2, r3
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	69ba      	ldr	r2, [r7, #24]
 800aa22:	69f8      	ldr	r0, [r7, #28]
 800aa24:	f7ff ff7a 	bl	800a91c <prvInsertTimerInActiveList>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d063      	beq.n	800aaf6 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa34:	f003 0304 	and.w	r3, r3, #4
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d009      	beq.n	800aa50 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	4413      	add	r3, r2
 800aa44:	69ba      	ldr	r2, [r7, #24]
 800aa46:	4619      	mov	r1, r3
 800aa48:	69f8      	ldr	r0, [r7, #28]
 800aa4a:	f7ff fe71 	bl	800a730 <prvReloadTimer>
 800aa4e:	e008      	b.n	800aa62 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800aa50:	69fb      	ldr	r3, [r7, #28]
 800aa52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa56:	f023 0301 	bic.w	r3, r3, #1
 800aa5a:	b2da      	uxtb	r2, r3
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	6a1b      	ldr	r3, [r3, #32]
 800aa66:	69f8      	ldr	r0, [r7, #28]
 800aa68:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800aa6a:	e044      	b.n	800aaf6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa72:	f023 0301 	bic.w	r3, r3, #1
 800aa76:	b2da      	uxtb	r2, r3
 800aa78:	69fb      	ldr	r3, [r7, #28]
 800aa7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800aa7e:	e03a      	b.n	800aaf6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa86:	f043 0301 	orr.w	r3, r3, #1
 800aa8a:	b2da      	uxtb	r2, r3
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	699b      	ldr	r3, [r3, #24]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d10a      	bne.n	800aab6 <prvProcessReceivedCommands+0x116>
        __asm volatile
 800aaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa4:	f383 8811 	msr	BASEPRI, r3
 800aaa8:	f3bf 8f6f 	isb	sy
 800aaac:	f3bf 8f4f 	dsb	sy
 800aab0:	617b      	str	r3, [r7, #20]
    }
 800aab2:	bf00      	nop
 800aab4:	e7fe      	b.n	800aab4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aab6:	69fb      	ldr	r3, [r7, #28]
 800aab8:	699a      	ldr	r2, [r3, #24]
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	18d1      	adds	r1, r2, r3
 800aabe:	69bb      	ldr	r3, [r7, #24]
 800aac0:	69ba      	ldr	r2, [r7, #24]
 800aac2:	69f8      	ldr	r0, [r7, #28]
 800aac4:	f7ff ff2a 	bl	800a91c <prvInsertTimerInActiveList>
                        break;
 800aac8:	e015      	b.n	800aaf6 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aaca:	69fb      	ldr	r3, [r7, #28]
 800aacc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aad0:	f003 0302 	and.w	r3, r3, #2
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d103      	bne.n	800aae0 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 800aad8:	69f8      	ldr	r0, [r7, #28]
 800aada:	f000 fb91 	bl	800b200 <vPortFree>
 800aade:	e00a      	b.n	800aaf6 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aae6:	f023 0301 	bic.w	r3, r3, #1
 800aaea:	b2da      	uxtb	r2, r3
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800aaf2:	e000      	b.n	800aaf6 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 800aaf4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aaf6:	4b08      	ldr	r3, [pc, #32]	; (800ab18 <prvProcessReceivedCommands+0x178>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f107 0108 	add.w	r1, r7, #8
 800aafe:	2200      	movs	r2, #0
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7fd fecd 	bl	80088a0 <xQueueReceive>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f47f af4d 	bne.w	800a9a8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800ab0e:	bf00      	nop
 800ab10:	bf00      	nop
 800ab12:	3720      	adds	r7, #32
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	20000a48 	.word	0x20000a48

0800ab1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab22:	e009      	b.n	800ab38 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab24:	4b0e      	ldr	r3, [pc, #56]	; (800ab60 <prvSwitchTimerLists+0x44>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800ab2e:	f04f 31ff 	mov.w	r1, #4294967295
 800ab32:	6838      	ldr	r0, [r7, #0]
 800ab34:	f7ff fe1e 	bl	800a774 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab38:	4b09      	ldr	r3, [pc, #36]	; (800ab60 <prvSwitchTimerLists+0x44>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d1f0      	bne.n	800ab24 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800ab42:	4b07      	ldr	r3, [pc, #28]	; (800ab60 <prvSwitchTimerLists+0x44>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800ab48:	4b06      	ldr	r3, [pc, #24]	; (800ab64 <prvSwitchTimerLists+0x48>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a04      	ldr	r2, [pc, #16]	; (800ab60 <prvSwitchTimerLists+0x44>)
 800ab4e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800ab50:	4a04      	ldr	r2, [pc, #16]	; (800ab64 <prvSwitchTimerLists+0x48>)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6013      	str	r3, [r2, #0]
    }
 800ab56:	bf00      	nop
 800ab58:	3708      	adds	r7, #8
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	20000a40 	.word	0x20000a40
 800ab64:	20000a44 	.word	0x20000a44

0800ab68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800ab6c:	f000 f964 	bl	800ae38 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800ab70:	4b12      	ldr	r3, [pc, #72]	; (800abbc <prvCheckForValidListAndQueue+0x54>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d11d      	bne.n	800abb4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800ab78:	4811      	ldr	r0, [pc, #68]	; (800abc0 <prvCheckForValidListAndQueue+0x58>)
 800ab7a:	f7fd fb0d 	bl	8008198 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800ab7e:	4811      	ldr	r0, [pc, #68]	; (800abc4 <prvCheckForValidListAndQueue+0x5c>)
 800ab80:	f7fd fb0a 	bl	8008198 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800ab84:	4b10      	ldr	r3, [pc, #64]	; (800abc8 <prvCheckForValidListAndQueue+0x60>)
 800ab86:	4a0e      	ldr	r2, [pc, #56]	; (800abc0 <prvCheckForValidListAndQueue+0x58>)
 800ab88:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800ab8a:	4b10      	ldr	r3, [pc, #64]	; (800abcc <prvCheckForValidListAndQueue+0x64>)
 800ab8c:	4a0d      	ldr	r2, [pc, #52]	; (800abc4 <prvCheckForValidListAndQueue+0x5c>)
 800ab8e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800ab90:	2200      	movs	r2, #0
 800ab92:	210c      	movs	r1, #12
 800ab94:	200a      	movs	r0, #10
 800ab96:	f7fd fc1f 	bl	80083d8 <xQueueGenericCreate>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	4a07      	ldr	r2, [pc, #28]	; (800abbc <prvCheckForValidListAndQueue+0x54>)
 800ab9e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800aba0:	4b06      	ldr	r3, [pc, #24]	; (800abbc <prvCheckForValidListAndQueue+0x54>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d005      	beq.n	800abb4 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aba8:	4b04      	ldr	r3, [pc, #16]	; (800abbc <prvCheckForValidListAndQueue+0x54>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4908      	ldr	r1, [pc, #32]	; (800abd0 <prvCheckForValidListAndQueue+0x68>)
 800abae:	4618      	mov	r0, r3
 800abb0:	f7fe f896 	bl	8008ce0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800abb4:	f000 f970 	bl	800ae98 <vPortExitCritical>
    }
 800abb8:	bf00      	nop
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	20000a48 	.word	0x20000a48
 800abc0:	20000a18 	.word	0x20000a18
 800abc4:	20000a2c 	.word	0x20000a2c
 800abc8:	20000a40 	.word	0x20000a40
 800abcc:	20000a44 	.word	0x20000a44
 800abd0:	08010c20 	.word	0x08010c20

0800abd4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	3b04      	subs	r3, #4
 800abe4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800abec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	3b04      	subs	r3, #4
 800abf2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	f023 0201 	bic.w	r2, r3, #1
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	3b04      	subs	r3, #4
 800ac02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800ac04:	4a0c      	ldr	r2, [pc, #48]	; (800ac38 <pxPortInitialiseStack+0x64>)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	3b14      	subs	r3, #20
 800ac0e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	3b04      	subs	r3, #4
 800ac1a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f06f 0202 	mvn.w	r2, #2
 800ac22:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	3b20      	subs	r3, #32
 800ac28:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3714      	adds	r7, #20
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr
 800ac38:	0800ac3d 	.word	0x0800ac3d

0800ac3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b085      	sub	sp, #20
 800ac40:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800ac42:	2300      	movs	r3, #0
 800ac44:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800ac46:	4b12      	ldr	r3, [pc, #72]	; (800ac90 <prvTaskExitError+0x54>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac4e:	d00a      	beq.n	800ac66 <prvTaskExitError+0x2a>
        __asm volatile
 800ac50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac54:	f383 8811 	msr	BASEPRI, r3
 800ac58:	f3bf 8f6f 	isb	sy
 800ac5c:	f3bf 8f4f 	dsb	sy
 800ac60:	60fb      	str	r3, [r7, #12]
    }
 800ac62:	bf00      	nop
 800ac64:	e7fe      	b.n	800ac64 <prvTaskExitError+0x28>
        __asm volatile
 800ac66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6a:	f383 8811 	msr	BASEPRI, r3
 800ac6e:	f3bf 8f6f 	isb	sy
 800ac72:	f3bf 8f4f 	dsb	sy
 800ac76:	60bb      	str	r3, [r7, #8]
    }
 800ac78:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800ac7a:	bf00      	nop
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d0fc      	beq.n	800ac7c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800ac82:	bf00      	nop
 800ac84:	bf00      	nop
 800ac86:	3714      	adds	r7, #20
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr
 800ac90:	20000018 	.word	0x20000018
	...

0800aca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800aca0:	4b07      	ldr	r3, [pc, #28]	; (800acc0 <pxCurrentTCBConst2>)
 800aca2:	6819      	ldr	r1, [r3, #0]
 800aca4:	6808      	ldr	r0, [r1, #0]
 800aca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acaa:	f380 8809 	msr	PSP, r0
 800acae:	f3bf 8f6f 	isb	sy
 800acb2:	f04f 0000 	mov.w	r0, #0
 800acb6:	f380 8811 	msr	BASEPRI, r0
 800acba:	4770      	bx	lr
 800acbc:	f3af 8000 	nop.w

0800acc0 <pxCurrentTCBConst2>:
 800acc0:	20000914 	.word	0x20000914
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800acc4:	bf00      	nop
 800acc6:	bf00      	nop

0800acc8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800acc8:	4808      	ldr	r0, [pc, #32]	; (800acec <prvPortStartFirstTask+0x24>)
 800acca:	6800      	ldr	r0, [r0, #0]
 800accc:	6800      	ldr	r0, [r0, #0]
 800acce:	f380 8808 	msr	MSP, r0
 800acd2:	f04f 0000 	mov.w	r0, #0
 800acd6:	f380 8814 	msr	CONTROL, r0
 800acda:	b662      	cpsie	i
 800acdc:	b661      	cpsie	f
 800acde:	f3bf 8f4f 	dsb	sy
 800ace2:	f3bf 8f6f 	isb	sy
 800ace6:	df00      	svc	0
 800ace8:	bf00      	nop
 800acea:	0000      	.short	0x0000
 800acec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800acf0:	bf00      	nop
 800acf2:	bf00      	nop

0800acf4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b086      	sub	sp, #24
 800acf8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800acfa:	4b46      	ldr	r3, [pc, #280]	; (800ae14 <xPortStartScheduler+0x120>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	4a46      	ldr	r2, [pc, #280]	; (800ae18 <xPortStartScheduler+0x124>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d10a      	bne.n	800ad1a <xPortStartScheduler+0x26>
        __asm volatile
 800ad04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad08:	f383 8811 	msr	BASEPRI, r3
 800ad0c:	f3bf 8f6f 	isb	sy
 800ad10:	f3bf 8f4f 	dsb	sy
 800ad14:	613b      	str	r3, [r7, #16]
    }
 800ad16:	bf00      	nop
 800ad18:	e7fe      	b.n	800ad18 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ad1a:	4b3e      	ldr	r3, [pc, #248]	; (800ae14 <xPortStartScheduler+0x120>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a3f      	ldr	r2, [pc, #252]	; (800ae1c <xPortStartScheduler+0x128>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d10a      	bne.n	800ad3a <xPortStartScheduler+0x46>
        __asm volatile
 800ad24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad28:	f383 8811 	msr	BASEPRI, r3
 800ad2c:	f3bf 8f6f 	isb	sy
 800ad30:	f3bf 8f4f 	dsb	sy
 800ad34:	60fb      	str	r3, [r7, #12]
    }
 800ad36:	bf00      	nop
 800ad38:	e7fe      	b.n	800ad38 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ad3a:	4b39      	ldr	r3, [pc, #228]	; (800ae20 <xPortStartScheduler+0x12c>)
 800ad3c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	22ff      	movs	r2, #255	; 0xff
 800ad4a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ad54:	78fb      	ldrb	r3, [r7, #3]
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ad5c:	b2da      	uxtb	r2, r3
 800ad5e:	4b31      	ldr	r3, [pc, #196]	; (800ae24 <xPortStartScheduler+0x130>)
 800ad60:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ad62:	4b31      	ldr	r3, [pc, #196]	; (800ae28 <xPortStartScheduler+0x134>)
 800ad64:	2207      	movs	r2, #7
 800ad66:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad68:	e009      	b.n	800ad7e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800ad6a:	4b2f      	ldr	r3, [pc, #188]	; (800ae28 <xPortStartScheduler+0x134>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	4a2d      	ldr	r2, [pc, #180]	; (800ae28 <xPortStartScheduler+0x134>)
 800ad72:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad74:	78fb      	ldrb	r3, [r7, #3]
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	005b      	lsls	r3, r3, #1
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad7e:	78fb      	ldrb	r3, [r7, #3]
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad86:	2b80      	cmp	r3, #128	; 0x80
 800ad88:	d0ef      	beq.n	800ad6a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad8a:	4b27      	ldr	r3, [pc, #156]	; (800ae28 <xPortStartScheduler+0x134>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f1c3 0307 	rsb	r3, r3, #7
 800ad92:	2b04      	cmp	r3, #4
 800ad94:	d00a      	beq.n	800adac <xPortStartScheduler+0xb8>
        __asm volatile
 800ad96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9a:	f383 8811 	msr	BASEPRI, r3
 800ad9e:	f3bf 8f6f 	isb	sy
 800ada2:	f3bf 8f4f 	dsb	sy
 800ada6:	60bb      	str	r3, [r7, #8]
    }
 800ada8:	bf00      	nop
 800adaa:	e7fe      	b.n	800adaa <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800adac:	4b1e      	ldr	r3, [pc, #120]	; (800ae28 <xPortStartScheduler+0x134>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	021b      	lsls	r3, r3, #8
 800adb2:	4a1d      	ldr	r2, [pc, #116]	; (800ae28 <xPortStartScheduler+0x134>)
 800adb4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800adb6:	4b1c      	ldr	r3, [pc, #112]	; (800ae28 <xPortStartScheduler+0x134>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800adbe:	4a1a      	ldr	r2, [pc, #104]	; (800ae28 <xPortStartScheduler+0x134>)
 800adc0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	b2da      	uxtb	r2, r3
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800adca:	4b18      	ldr	r3, [pc, #96]	; (800ae2c <xPortStartScheduler+0x138>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a17      	ldr	r2, [pc, #92]	; (800ae2c <xPortStartScheduler+0x138>)
 800add0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800add4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800add6:	4b15      	ldr	r3, [pc, #84]	; (800ae2c <xPortStartScheduler+0x138>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a14      	ldr	r2, [pc, #80]	; (800ae2c <xPortStartScheduler+0x138>)
 800addc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ade0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800ade2:	f000 f8e3 	bl	800afac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800ade6:	4b12      	ldr	r3, [pc, #72]	; (800ae30 <xPortStartScheduler+0x13c>)
 800ade8:	2200      	movs	r2, #0
 800adea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800adec:	f000 f902 	bl	800aff4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800adf0:	4b10      	ldr	r3, [pc, #64]	; (800ae34 <xPortStartScheduler+0x140>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a0f      	ldr	r2, [pc, #60]	; (800ae34 <xPortStartScheduler+0x140>)
 800adf6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800adfa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800adfc:	f7ff ff64 	bl	800acc8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800ae00:	f7fe fc5e 	bl	80096c0 <vTaskSwitchContext>
    prvTaskExitError();
 800ae04:	f7ff ff1a 	bl	800ac3c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800ae08:	2300      	movs	r3, #0
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3718      	adds	r7, #24
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	e000ed00 	.word	0xe000ed00
 800ae18:	410fc271 	.word	0x410fc271
 800ae1c:	410fc270 	.word	0x410fc270
 800ae20:	e000e400 	.word	0xe000e400
 800ae24:	20000a54 	.word	0x20000a54
 800ae28:	20000a58 	.word	0x20000a58
 800ae2c:	e000ed20 	.word	0xe000ed20
 800ae30:	20000018 	.word	0x20000018
 800ae34:	e000ef34 	.word	0xe000ef34

0800ae38 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
        __asm volatile
 800ae3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae42:	f383 8811 	msr	BASEPRI, r3
 800ae46:	f3bf 8f6f 	isb	sy
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	607b      	str	r3, [r7, #4]
    }
 800ae50:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800ae52:	4b0f      	ldr	r3, [pc, #60]	; (800ae90 <vPortEnterCritical+0x58>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	3301      	adds	r3, #1
 800ae58:	4a0d      	ldr	r2, [pc, #52]	; (800ae90 <vPortEnterCritical+0x58>)
 800ae5a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800ae5c:	4b0c      	ldr	r3, [pc, #48]	; (800ae90 <vPortEnterCritical+0x58>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d10f      	bne.n	800ae84 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae64:	4b0b      	ldr	r3, [pc, #44]	; (800ae94 <vPortEnterCritical+0x5c>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00a      	beq.n	800ae84 <vPortEnterCritical+0x4c>
        __asm volatile
 800ae6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae72:	f383 8811 	msr	BASEPRI, r3
 800ae76:	f3bf 8f6f 	isb	sy
 800ae7a:	f3bf 8f4f 	dsb	sy
 800ae7e:	603b      	str	r3, [r7, #0]
    }
 800ae80:	bf00      	nop
 800ae82:	e7fe      	b.n	800ae82 <vPortEnterCritical+0x4a>
    }
}
 800ae84:	bf00      	nop
 800ae86:	370c      	adds	r7, #12
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr
 800ae90:	20000018 	.word	0x20000018
 800ae94:	e000ed04 	.word	0xe000ed04

0800ae98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800ae9e:	4b12      	ldr	r3, [pc, #72]	; (800aee8 <vPortExitCritical+0x50>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d10a      	bne.n	800aebc <vPortExitCritical+0x24>
        __asm volatile
 800aea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeaa:	f383 8811 	msr	BASEPRI, r3
 800aeae:	f3bf 8f6f 	isb	sy
 800aeb2:	f3bf 8f4f 	dsb	sy
 800aeb6:	607b      	str	r3, [r7, #4]
    }
 800aeb8:	bf00      	nop
 800aeba:	e7fe      	b.n	800aeba <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800aebc:	4b0a      	ldr	r3, [pc, #40]	; (800aee8 <vPortExitCritical+0x50>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	3b01      	subs	r3, #1
 800aec2:	4a09      	ldr	r2, [pc, #36]	; (800aee8 <vPortExitCritical+0x50>)
 800aec4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800aec6:	4b08      	ldr	r3, [pc, #32]	; (800aee8 <vPortExitCritical+0x50>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d105      	bne.n	800aeda <vPortExitCritical+0x42>
 800aece:	2300      	movs	r3, #0
 800aed0:	603b      	str	r3, [r7, #0]
        __asm volatile
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	f383 8811 	msr	BASEPRI, r3
    }
 800aed8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800aeda:	bf00      	nop
 800aedc:	370c      	adds	r7, #12
 800aede:	46bd      	mov	sp, r7
 800aee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee4:	4770      	bx	lr
 800aee6:	bf00      	nop
 800aee8:	20000018 	.word	0x20000018
 800aeec:	00000000 	.word	0x00000000

0800aef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800aef0:	f3ef 8009 	mrs	r0, PSP
 800aef4:	f3bf 8f6f 	isb	sy
 800aef8:	4b15      	ldr	r3, [pc, #84]	; (800af50 <pxCurrentTCBConst>)
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	f01e 0f10 	tst.w	lr, #16
 800af00:	bf08      	it	eq
 800af02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800af06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af0a:	6010      	str	r0, [r2, #0]
 800af0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800af10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800af14:	f380 8811 	msr	BASEPRI, r0
 800af18:	f3bf 8f4f 	dsb	sy
 800af1c:	f3bf 8f6f 	isb	sy
 800af20:	f7fe fbce 	bl	80096c0 <vTaskSwitchContext>
 800af24:	f04f 0000 	mov.w	r0, #0
 800af28:	f380 8811 	msr	BASEPRI, r0
 800af2c:	bc09      	pop	{r0, r3}
 800af2e:	6819      	ldr	r1, [r3, #0]
 800af30:	6808      	ldr	r0, [r1, #0]
 800af32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af36:	f01e 0f10 	tst.w	lr, #16
 800af3a:	bf08      	it	eq
 800af3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800af40:	f380 8809 	msr	PSP, r0
 800af44:	f3bf 8f6f 	isb	sy
 800af48:	4770      	bx	lr
 800af4a:	bf00      	nop
 800af4c:	f3af 8000 	nop.w

0800af50 <pxCurrentTCBConst>:
 800af50:	20000914 	.word	0x20000914
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800af54:	bf00      	nop
 800af56:	bf00      	nop

0800af58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
        __asm volatile
 800af5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af62:	f383 8811 	msr	BASEPRI, r3
 800af66:	f3bf 8f6f 	isb	sy
 800af6a:	f3bf 8f4f 	dsb	sy
 800af6e:	607b      	str	r3, [r7, #4]
    }
 800af70:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 800af72:	f001 fc2d 	bl	800c7d0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800af76:	f7fe fa89 	bl	800948c <xTaskIncrementTick>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d006      	beq.n	800af8e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800af80:	f001 fc84 	bl	800c88c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af84:	4b08      	ldr	r3, [pc, #32]	; (800afa8 <SysTick_Handler+0x50>)
 800af86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af8a:	601a      	str	r2, [r3, #0]
 800af8c:	e001      	b.n	800af92 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800af8e:	f001 fc61 	bl	800c854 <SEGGER_SYSVIEW_RecordExitISR>
 800af92:	2300      	movs	r3, #0
 800af94:	603b      	str	r3, [r7, #0]
        __asm volatile
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	f383 8811 	msr	BASEPRI, r3
    }
 800af9c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800af9e:	bf00      	nop
 800afa0:	3708      	adds	r7, #8
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	e000ed04 	.word	0xe000ed04

0800afac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800afac:	b480      	push	{r7}
 800afae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800afb0:	4b0b      	ldr	r3, [pc, #44]	; (800afe0 <vPortSetupTimerInterrupt+0x34>)
 800afb2:	2200      	movs	r2, #0
 800afb4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800afb6:	4b0b      	ldr	r3, [pc, #44]	; (800afe4 <vPortSetupTimerInterrupt+0x38>)
 800afb8:	2200      	movs	r2, #0
 800afba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800afbc:	4b0a      	ldr	r3, [pc, #40]	; (800afe8 <vPortSetupTimerInterrupt+0x3c>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a0a      	ldr	r2, [pc, #40]	; (800afec <vPortSetupTimerInterrupt+0x40>)
 800afc2:	fba2 2303 	umull	r2, r3, r2, r3
 800afc6:	099b      	lsrs	r3, r3, #6
 800afc8:	4a09      	ldr	r2, [pc, #36]	; (800aff0 <vPortSetupTimerInterrupt+0x44>)
 800afca:	3b01      	subs	r3, #1
 800afcc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800afce:	4b04      	ldr	r3, [pc, #16]	; (800afe0 <vPortSetupTimerInterrupt+0x34>)
 800afd0:	2207      	movs	r2, #7
 800afd2:	601a      	str	r2, [r3, #0]
}
 800afd4:	bf00      	nop
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop
 800afe0:	e000e010 	.word	0xe000e010
 800afe4:	e000e018 	.word	0xe000e018
 800afe8:	20000008 	.word	0x20000008
 800afec:	10624dd3 	.word	0x10624dd3
 800aff0:	e000e014 	.word	0xe000e014

0800aff4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800aff4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b004 <vPortEnableVFP+0x10>
 800aff8:	6801      	ldr	r1, [r0, #0]
 800affa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800affe:	6001      	str	r1, [r0, #0]
 800b000:	4770      	bx	lr
 800b002:	0000      	.short	0x0000
 800b004:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800b008:	bf00      	nop
 800b00a:	bf00      	nop

0800b00c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800b00c:	b480      	push	{r7}
 800b00e:	b085      	sub	sp, #20
 800b010:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800b012:	f3ef 8305 	mrs	r3, IPSR
 800b016:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2b0f      	cmp	r3, #15
 800b01c:	d914      	bls.n	800b048 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b01e:	4a17      	ldr	r2, [pc, #92]	; (800b07c <vPortValidateInterruptPriority+0x70>)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	4413      	add	r3, r2
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b028:	4b15      	ldr	r3, [pc, #84]	; (800b080 <vPortValidateInterruptPriority+0x74>)
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	7afa      	ldrb	r2, [r7, #11]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d20a      	bcs.n	800b048 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 800b032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b036:	f383 8811 	msr	BASEPRI, r3
 800b03a:	f3bf 8f6f 	isb	sy
 800b03e:	f3bf 8f4f 	dsb	sy
 800b042:	607b      	str	r3, [r7, #4]
    }
 800b044:	bf00      	nop
 800b046:	e7fe      	b.n	800b046 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b048:	4b0e      	ldr	r3, [pc, #56]	; (800b084 <vPortValidateInterruptPriority+0x78>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b050:	4b0d      	ldr	r3, [pc, #52]	; (800b088 <vPortValidateInterruptPriority+0x7c>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	429a      	cmp	r2, r3
 800b056:	d90a      	bls.n	800b06e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 800b058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05c:	f383 8811 	msr	BASEPRI, r3
 800b060:	f3bf 8f6f 	isb	sy
 800b064:	f3bf 8f4f 	dsb	sy
 800b068:	603b      	str	r3, [r7, #0]
    }
 800b06a:	bf00      	nop
 800b06c:	e7fe      	b.n	800b06c <vPortValidateInterruptPriority+0x60>
    }
 800b06e:	bf00      	nop
 800b070:	3714      	adds	r7, #20
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
 800b07a:	bf00      	nop
 800b07c:	e000e3f0 	.word	0xe000e3f0
 800b080:	20000a54 	.word	0x20000a54
 800b084:	e000ed0c 	.word	0xe000ed0c
 800b088:	20000a58 	.word	0x20000a58

0800b08c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b08a      	sub	sp, #40	; 0x28
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800b094:	2300      	movs	r3, #0
 800b096:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800b098:	f7fe f8ce 	bl	8009238 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800b09c:	4b53      	ldr	r3, [pc, #332]	; (800b1ec <pvPortMalloc+0x160>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d101      	bne.n	800b0a8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800b0a4:	f000 f908 	bl	800b2b8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d012      	beq.n	800b0d4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800b0ae:	2208      	movs	r2, #8
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f003 0307 	and.w	r3, r3, #7
 800b0b6:	1ad3      	subs	r3, r2, r3
 800b0b8:	3308      	adds	r3, #8
 800b0ba:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800b0bc:	69bb      	ldr	r3, [r7, #24]
 800b0be:	43db      	mvns	r3, r3
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d804      	bhi.n	800b0d0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	69bb      	ldr	r3, [r7, #24]
 800b0ca:	4413      	add	r3, r2
 800b0cc:	607b      	str	r3, [r7, #4]
 800b0ce:	e001      	b.n	800b0d4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	db70      	blt.n	800b1bc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d06d      	beq.n	800b1bc <pvPortMalloc+0x130>
 800b0e0:	4b43      	ldr	r3, [pc, #268]	; (800b1f0 <pvPortMalloc+0x164>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d868      	bhi.n	800b1bc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800b0ea:	4b42      	ldr	r3, [pc, #264]	; (800b1f4 <pvPortMalloc+0x168>)
 800b0ec:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800b0ee:	4b41      	ldr	r3, [pc, #260]	; (800b1f4 <pvPortMalloc+0x168>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0f4:	e004      	b.n	800b100 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800b0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	429a      	cmp	r2, r3
 800b108:	d903      	bls.n	800b112 <pvPortMalloc+0x86>
 800b10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d1f1      	bne.n	800b0f6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800b112:	4b36      	ldr	r3, [pc, #216]	; (800b1ec <pvPortMalloc+0x160>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b118:	429a      	cmp	r2, r3
 800b11a:	d04f      	beq.n	800b1bc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b11c:	6a3b      	ldr	r3, [r7, #32]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2208      	movs	r2, #8
 800b122:	4413      	add	r3, r2
 800b124:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	6a3b      	ldr	r3, [r7, #32]
 800b12c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b130:	685a      	ldr	r2, [r3, #4]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	1ad2      	subs	r2, r2, r3
 800b136:	2308      	movs	r3, #8
 800b138:	005b      	lsls	r3, r3, #1
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d91f      	bls.n	800b17e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b13e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	4413      	add	r3, r2
 800b144:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	f003 0307 	and.w	r3, r3, #7
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d00a      	beq.n	800b166 <pvPortMalloc+0xda>
        __asm volatile
 800b150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b154:	f383 8811 	msr	BASEPRI, r3
 800b158:	f3bf 8f6f 	isb	sy
 800b15c:	f3bf 8f4f 	dsb	sy
 800b160:	613b      	str	r3, [r7, #16]
    }
 800b162:	bf00      	nop
 800b164:	e7fe      	b.n	800b164 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b168:	685a      	ldr	r2, [r3, #4]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	1ad2      	subs	r2, r2, r3
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800b172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b178:	6978      	ldr	r0, [r7, #20]
 800b17a:	f000 f8f9 	bl	800b370 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b17e:	4b1c      	ldr	r3, [pc, #112]	; (800b1f0 <pvPortMalloc+0x164>)
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	1ad3      	subs	r3, r2, r3
 800b188:	4a19      	ldr	r2, [pc, #100]	; (800b1f0 <pvPortMalloc+0x164>)
 800b18a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b18c:	4b18      	ldr	r3, [pc, #96]	; (800b1f0 <pvPortMalloc+0x164>)
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	4b19      	ldr	r3, [pc, #100]	; (800b1f8 <pvPortMalloc+0x16c>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	429a      	cmp	r2, r3
 800b196:	d203      	bcs.n	800b1a0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b198:	4b15      	ldr	r3, [pc, #84]	; (800b1f0 <pvPortMalloc+0x164>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4a16      	ldr	r2, [pc, #88]	; (800b1f8 <pvPortMalloc+0x16c>)
 800b19e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800b1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1aa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800b1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800b1b2:	4b12      	ldr	r3, [pc, #72]	; (800b1fc <pvPortMalloc+0x170>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	4a10      	ldr	r2, [pc, #64]	; (800b1fc <pvPortMalloc+0x170>)
 800b1ba:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800b1bc:	f7fe f84a 	bl	8009254 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	f003 0307 	and.w	r3, r3, #7
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00a      	beq.n	800b1e0 <pvPortMalloc+0x154>
        __asm volatile
 800b1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ce:	f383 8811 	msr	BASEPRI, r3
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	60fb      	str	r3, [r7, #12]
    }
 800b1dc:	bf00      	nop
 800b1de:	e7fe      	b.n	800b1de <pvPortMalloc+0x152>
    return pvReturn;
 800b1e0:	69fb      	ldr	r3, [r7, #28]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3728      	adds	r7, #40	; 0x28
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	20013664 	.word	0x20013664
 800b1f0:	20013668 	.word	0x20013668
 800b1f4:	2001365c 	.word	0x2001365c
 800b1f8:	2001366c 	.word	0x2001366c
 800b1fc:	20013670 	.word	0x20013670

0800b200 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b086      	sub	sp, #24
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d049      	beq.n	800b2a6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800b212:	2308      	movs	r3, #8
 800b214:	425b      	negs	r3, r3
 800b216:	697a      	ldr	r2, [r7, #20]
 800b218:	4413      	add	r3, r2
 800b21a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	2b00      	cmp	r3, #0
 800b226:	db0a      	blt.n	800b23e <vPortFree+0x3e>
        __asm volatile
 800b228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b22c:	f383 8811 	msr	BASEPRI, r3
 800b230:	f3bf 8f6f 	isb	sy
 800b234:	f3bf 8f4f 	dsb	sy
 800b238:	60fb      	str	r3, [r7, #12]
    }
 800b23a:	bf00      	nop
 800b23c:	e7fe      	b.n	800b23c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d00a      	beq.n	800b25c <vPortFree+0x5c>
        __asm volatile
 800b246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24a:	f383 8811 	msr	BASEPRI, r3
 800b24e:	f3bf 8f6f 	isb	sy
 800b252:	f3bf 8f4f 	dsb	sy
 800b256:	60bb      	str	r3, [r7, #8]
    }
 800b258:	bf00      	nop
 800b25a:	e7fe      	b.n	800b25a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	0fdb      	lsrs	r3, r3, #31
 800b262:	f003 0301 	and.w	r3, r3, #1
 800b266:	b2db      	uxtb	r3, r3
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d01c      	beq.n	800b2a6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d118      	bne.n	800b2a6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800b280:	f7fd ffda 	bl	8009238 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	685a      	ldr	r2, [r3, #4]
 800b288:	4b09      	ldr	r3, [pc, #36]	; (800b2b0 <vPortFree+0xb0>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4413      	add	r3, r2
 800b28e:	4a08      	ldr	r2, [pc, #32]	; (800b2b0 <vPortFree+0xb0>)
 800b290:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b292:	6938      	ldr	r0, [r7, #16]
 800b294:	f000 f86c 	bl	800b370 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800b298:	4b06      	ldr	r3, [pc, #24]	; (800b2b4 <vPortFree+0xb4>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	3301      	adds	r3, #1
 800b29e:	4a05      	ldr	r2, [pc, #20]	; (800b2b4 <vPortFree+0xb4>)
 800b2a0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800b2a2:	f7fd ffd7 	bl	8009254 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800b2a6:	bf00      	nop
 800b2a8:	3718      	adds	r7, #24
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	20013668 	.word	0x20013668
 800b2b4:	20013674 	.word	0x20013674

0800b2b8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b085      	sub	sp, #20
 800b2bc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b2be:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800b2c2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800b2c4:	4b25      	ldr	r3, [pc, #148]	; (800b35c <prvHeapInit+0xa4>)
 800b2c6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f003 0307 	and.w	r3, r3, #7
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d00c      	beq.n	800b2ec <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	3307      	adds	r3, #7
 800b2d6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f023 0307 	bic.w	r3, r3, #7
 800b2de:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800b2e0:	68ba      	ldr	r2, [r7, #8]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	1ad3      	subs	r3, r2, r3
 800b2e6:	4a1d      	ldr	r2, [pc, #116]	; (800b35c <prvHeapInit+0xa4>)
 800b2e8:	4413      	add	r3, r2
 800b2ea:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b2f0:	4a1b      	ldr	r2, [pc, #108]	; (800b360 <prvHeapInit+0xa8>)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800b2f6:	4b1a      	ldr	r3, [pc, #104]	; (800b360 <prvHeapInit+0xa8>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	68ba      	ldr	r2, [r7, #8]
 800b300:	4413      	add	r3, r2
 800b302:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800b304:	2208      	movs	r2, #8
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	1a9b      	subs	r3, r3, r2
 800b30a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f023 0307 	bic.w	r3, r3, #7
 800b312:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	4a13      	ldr	r2, [pc, #76]	; (800b364 <prvHeapInit+0xac>)
 800b318:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800b31a:	4b12      	ldr	r3, [pc, #72]	; (800b364 <prvHeapInit+0xac>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	2200      	movs	r2, #0
 800b320:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800b322:	4b10      	ldr	r3, [pc, #64]	; (800b364 <prvHeapInit+0xac>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	2200      	movs	r2, #0
 800b328:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	68fa      	ldr	r2, [r7, #12]
 800b332:	1ad2      	subs	r2, r2, r3
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b338:	4b0a      	ldr	r3, [pc, #40]	; (800b364 <prvHeapInit+0xac>)
 800b33a:	681a      	ldr	r2, [r3, #0]
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	4a08      	ldr	r2, [pc, #32]	; (800b368 <prvHeapInit+0xb0>)
 800b346:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	4a07      	ldr	r2, [pc, #28]	; (800b36c <prvHeapInit+0xb4>)
 800b34e:	6013      	str	r3, [r2, #0]
}
 800b350:	bf00      	nop
 800b352:	3714      	adds	r7, #20
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr
 800b35c:	20000a5c 	.word	0x20000a5c
 800b360:	2001365c 	.word	0x2001365c
 800b364:	20013664 	.word	0x20013664
 800b368:	2001366c 	.word	0x2001366c
 800b36c:	20013668 	.word	0x20013668

0800b370 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800b370:	b480      	push	{r7}
 800b372:	b085      	sub	sp, #20
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b378:	4b28      	ldr	r3, [pc, #160]	; (800b41c <prvInsertBlockIntoFreeList+0xac>)
 800b37a:	60fb      	str	r3, [r7, #12]
 800b37c:	e002      	b.n	800b384 <prvInsertBlockIntoFreeList+0x14>
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	60fb      	str	r3, [r7, #12]
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d8f7      	bhi.n	800b37e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	68ba      	ldr	r2, [r7, #8]
 800b398:	4413      	add	r3, r2
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d108      	bne.n	800b3b2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	685a      	ldr	r2, [r3, #4]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	441a      	add	r2, r3
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	68ba      	ldr	r2, [r7, #8]
 800b3bc:	441a      	add	r2, r3
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d118      	bne.n	800b3f8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	4b15      	ldr	r3, [pc, #84]	; (800b420 <prvInsertBlockIntoFreeList+0xb0>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d00d      	beq.n	800b3ee <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	685a      	ldr	r2, [r3, #4]
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	441a      	add	r2, r3
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	601a      	str	r2, [r3, #0]
 800b3ec:	e008      	b.n	800b400 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b3ee:	4b0c      	ldr	r3, [pc, #48]	; (800b420 <prvInsertBlockIntoFreeList+0xb0>)
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	601a      	str	r2, [r3, #0]
 800b3f6:	e003      	b.n	800b400 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	429a      	cmp	r2, r3
 800b406:	d002      	beq.n	800b40e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800b40e:	bf00      	nop
 800b410:	3714      	adds	r7, #20
 800b412:	46bd      	mov	sp, r7
 800b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b418:	4770      	bx	lr
 800b41a:	bf00      	nop
 800b41c:	2001365c 	.word	0x2001365c
 800b420:	20013664 	.word	0x20013664

0800b424 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800b424:	b580      	push	{r7, lr}
 800b426:	b086      	sub	sp, #24
 800b428:	af02      	add	r7, sp, #8
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	607a      	str	r2, [r7, #4]
 800b430:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800b432:	2205      	movs	r2, #5
 800b434:	492b      	ldr	r1, [pc, #172]	; (800b4e4 <SYSVIEW_AddTask+0xc0>)
 800b436:	68b8      	ldr	r0, [r7, #8]
 800b438:	f002 faaf 	bl	800d99a <memcmp>
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d04b      	beq.n	800b4da <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800b442:	4b29      	ldr	r3, [pc, #164]	; (800b4e8 <SYSVIEW_AddTask+0xc4>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	2b07      	cmp	r3, #7
 800b448:	d903      	bls.n	800b452 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800b44a:	4828      	ldr	r0, [pc, #160]	; (800b4ec <SYSVIEW_AddTask+0xc8>)
 800b44c:	f001 fc08 	bl	800cc60 <SEGGER_SYSVIEW_Warn>
    return;
 800b450:	e044      	b.n	800b4dc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800b452:	4b25      	ldr	r3, [pc, #148]	; (800b4e8 <SYSVIEW_AddTask+0xc4>)
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	4926      	ldr	r1, [pc, #152]	; (800b4f0 <SYSVIEW_AddTask+0xcc>)
 800b458:	4613      	mov	r3, r2
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	4413      	add	r3, r2
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	440b      	add	r3, r1
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800b466:	4b20      	ldr	r3, [pc, #128]	; (800b4e8 <SYSVIEW_AddTask+0xc4>)
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	4921      	ldr	r1, [pc, #132]	; (800b4f0 <SYSVIEW_AddTask+0xcc>)
 800b46c:	4613      	mov	r3, r2
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	4413      	add	r3, r2
 800b472:	009b      	lsls	r3, r3, #2
 800b474:	440b      	add	r3, r1
 800b476:	3304      	adds	r3, #4
 800b478:	68ba      	ldr	r2, [r7, #8]
 800b47a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800b47c:	4b1a      	ldr	r3, [pc, #104]	; (800b4e8 <SYSVIEW_AddTask+0xc4>)
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	491b      	ldr	r1, [pc, #108]	; (800b4f0 <SYSVIEW_AddTask+0xcc>)
 800b482:	4613      	mov	r3, r2
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	4413      	add	r3, r2
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	440b      	add	r3, r1
 800b48c:	3308      	adds	r3, #8
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800b492:	4b15      	ldr	r3, [pc, #84]	; (800b4e8 <SYSVIEW_AddTask+0xc4>)
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	4916      	ldr	r1, [pc, #88]	; (800b4f0 <SYSVIEW_AddTask+0xcc>)
 800b498:	4613      	mov	r3, r2
 800b49a:	009b      	lsls	r3, r3, #2
 800b49c:	4413      	add	r3, r2
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	440b      	add	r3, r1
 800b4a2:	330c      	adds	r3, #12
 800b4a4:	683a      	ldr	r2, [r7, #0]
 800b4a6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800b4a8:	4b0f      	ldr	r3, [pc, #60]	; (800b4e8 <SYSVIEW_AddTask+0xc4>)
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	4910      	ldr	r1, [pc, #64]	; (800b4f0 <SYSVIEW_AddTask+0xcc>)
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	009b      	lsls	r3, r3, #2
 800b4b2:	4413      	add	r3, r2
 800b4b4:	009b      	lsls	r3, r3, #2
 800b4b6:	440b      	add	r3, r1
 800b4b8:	3310      	adds	r3, #16
 800b4ba:	69ba      	ldr	r2, [r7, #24]
 800b4bc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800b4be:	4b0a      	ldr	r3, [pc, #40]	; (800b4e8 <SYSVIEW_AddTask+0xc4>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	4a08      	ldr	r2, [pc, #32]	; (800b4e8 <SYSVIEW_AddTask+0xc4>)
 800b4c6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	9300      	str	r3, [sp, #0]
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	68b9      	ldr	r1, [r7, #8]
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f000 f80e 	bl	800b4f4 <SYSVIEW_SendTaskInfo>
 800b4d8:	e000      	b.n	800b4dc <SYSVIEW_AddTask+0xb8>
    return;
 800b4da:	bf00      	nop

}
 800b4dc:	3710      	adds	r7, #16
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	08010c28 	.word	0x08010c28
 800b4e8:	20013718 	.word	0x20013718
 800b4ec:	08010c30 	.word	0x08010c30
 800b4f0:	20013678 	.word	0x20013678

0800b4f4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b08a      	sub	sp, #40	; 0x28
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	607a      	str	r2, [r7, #4]
 800b500:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800b502:	f107 0314 	add.w	r3, r7, #20
 800b506:	2214      	movs	r2, #20
 800b508:	2100      	movs	r1, #0
 800b50a:	4618      	mov	r0, r3
 800b50c:	f002 fa55 	bl	800d9ba <memset>
  TaskInfo.TaskID     = TaskID;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800b520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b522:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800b524:	f107 0314 	add.w	r3, r7, #20
 800b528:	4618      	mov	r0, r3
 800b52a:	f001 f827 	bl	800c57c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800b52e:	bf00      	nop
 800b530:	3728      	adds	r7, #40	; 0x28
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
	...

0800b538 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800b53e:	4b24      	ldr	r3, [pc, #144]	; (800b5d0 <_DoInit+0x98>)
 800b540:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2203      	movs	r2, #3
 800b546:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2203      	movs	r2, #3
 800b54c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	4a20      	ldr	r2, [pc, #128]	; (800b5d4 <_DoInit+0x9c>)
 800b552:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	4a20      	ldr	r2, [pc, #128]	; (800b5d8 <_DoInit+0xa0>)
 800b558:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b560:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2200      	movs	r2, #0
 800b566:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	4a17      	ldr	r2, [pc, #92]	; (800b5d4 <_DoInit+0x9c>)
 800b578:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	4a17      	ldr	r2, [pc, #92]	; (800b5dc <_DoInit+0xa4>)
 800b57e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2210      	movs	r2, #16
 800b584:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2200      	movs	r2, #0
 800b58a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2200      	movs	r2, #0
 800b590:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2200      	movs	r2, #0
 800b596:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	3307      	adds	r3, #7
 800b59c:	4a10      	ldr	r2, [pc, #64]	; (800b5e0 <_DoInit+0xa8>)
 800b59e:	6810      	ldr	r0, [r2, #0]
 800b5a0:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800b5a2:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	4a0e      	ldr	r2, [pc, #56]	; (800b5e4 <_DoInit+0xac>)
 800b5aa:	6810      	ldr	r0, [r2, #0]
 800b5ac:	6018      	str	r0, [r3, #0]
 800b5ae:	8891      	ldrh	r1, [r2, #4]
 800b5b0:	7992      	ldrb	r2, [r2, #6]
 800b5b2:	8099      	strh	r1, [r3, #4]
 800b5b4:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800b5b6:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2220      	movs	r2, #32
 800b5be:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800b5c0:	f3bf 8f5f 	dmb	sy
}
 800b5c4:	bf00      	nop
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr
 800b5d0:	2001371c 	.word	0x2001371c
 800b5d4:	08010c80 	.word	0x08010c80
 800b5d8:	200137c4 	.word	0x200137c4
 800b5dc:	20013bc4 	.word	0x20013bc4
 800b5e0:	08010c8c 	.word	0x08010c8c
 800b5e4:	08010c90 	.word	0x08010c90

0800b5e8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b08a      	sub	sp, #40	; 0x28
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	60b9      	str	r1, [r7, #8]
 800b5f2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	691b      	ldr	r3, [r3, #16]
 800b602:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800b604:	69ba      	ldr	r2, [r7, #24]
 800b606:	69fb      	ldr	r3, [r7, #28]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d905      	bls.n	800b618 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800b60c:	69ba      	ldr	r2, [r7, #24]
 800b60e:	69fb      	ldr	r3, [r7, #28]
 800b610:	1ad3      	subs	r3, r2, r3
 800b612:	3b01      	subs	r3, #1
 800b614:	627b      	str	r3, [r7, #36]	; 0x24
 800b616:	e007      	b.n	800b628 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	689a      	ldr	r2, [r3, #8]
 800b61c:	69b9      	ldr	r1, [r7, #24]
 800b61e:	69fb      	ldr	r3, [r7, #28]
 800b620:	1acb      	subs	r3, r1, r3
 800b622:	4413      	add	r3, r2
 800b624:	3b01      	subs	r3, #1
 800b626:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	689a      	ldr	r2, [r3, #8]
 800b62c:	69fb      	ldr	r3, [r7, #28]
 800b62e:	1ad3      	subs	r3, r2, r3
 800b630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b632:	4293      	cmp	r3, r2
 800b634:	bf28      	it	cs
 800b636:	4613      	movcs	r3, r2
 800b638:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800b63a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	4293      	cmp	r3, r2
 800b640:	bf28      	it	cs
 800b642:	4613      	movcs	r3, r2
 800b644:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	685a      	ldr	r2, [r3, #4]
 800b64a:	69fb      	ldr	r3, [r7, #28]
 800b64c:	4413      	add	r3, r2
 800b64e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800b650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b652:	68b9      	ldr	r1, [r7, #8]
 800b654:	6978      	ldr	r0, [r7, #20]
 800b656:	f002 fa1e 	bl	800da96 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800b65a:	6a3a      	ldr	r2, [r7, #32]
 800b65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65e:	4413      	add	r3, r2
 800b660:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800b662:	68ba      	ldr	r2, [r7, #8]
 800b664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b666:	4413      	add	r3, r2
 800b668:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800b66a:	687a      	ldr	r2, [r7, #4]
 800b66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66e:	1ad3      	subs	r3, r2, r3
 800b670:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800b672:	69fa      	ldr	r2, [r7, #28]
 800b674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b676:	4413      	add	r3, r2
 800b678:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	689b      	ldr	r3, [r3, #8]
 800b67e:	69fa      	ldr	r2, [r7, #28]
 800b680:	429a      	cmp	r2, r3
 800b682:	d101      	bne.n	800b688 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800b684:	2300      	movs	r3, #0
 800b686:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800b688:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	69fa      	ldr	r2, [r7, #28]
 800b690:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1b2      	bne.n	800b5fe <_WriteBlocking+0x16>
  return NumBytesWritten;
 800b698:	6a3b      	ldr	r3, [r7, #32]
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3728      	adds	r7, #40	; 0x28
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b088      	sub	sp, #32
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	60f8      	str	r0, [r7, #12]
 800b6aa:	60b9      	str	r1, [r7, #8]
 800b6ac:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	68db      	ldr	r3, [r3, #12]
 800b6b2:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	689a      	ldr	r2, [r3, #8]
 800b6b8:	69fb      	ldr	r3, [r7, #28]
 800b6ba:	1ad3      	subs	r3, r2, r3
 800b6bc:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800b6be:	69ba      	ldr	r2, [r7, #24]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d911      	bls.n	800b6ea <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	685a      	ldr	r2, [r3, #4]
 800b6ca:	69fb      	ldr	r3, [r7, #28]
 800b6cc:	4413      	add	r3, r2
 800b6ce:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	68b9      	ldr	r1, [r7, #8]
 800b6d4:	6938      	ldr	r0, [r7, #16]
 800b6d6:	f002 f9de 	bl	800da96 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800b6da:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800b6de:	69fa      	ldr	r2, [r7, #28]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	441a      	add	r2, r3
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800b6e8:	e01f      	b.n	800b72a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800b6ea:	69bb      	ldr	r3, [r7, #24]
 800b6ec:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	685a      	ldr	r2, [r3, #4]
 800b6f2:	69fb      	ldr	r3, [r7, #28]
 800b6f4:	4413      	add	r3, r2
 800b6f6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800b6f8:	697a      	ldr	r2, [r7, #20]
 800b6fa:	68b9      	ldr	r1, [r7, #8]
 800b6fc:	6938      	ldr	r0, [r7, #16]
 800b6fe:	f002 f9ca 	bl	800da96 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	1ad3      	subs	r3, r2, r3
 800b708:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800b710:	68ba      	ldr	r2, [r7, #8]
 800b712:	69bb      	ldr	r3, [r7, #24]
 800b714:	4413      	add	r3, r2
 800b716:	697a      	ldr	r2, [r7, #20]
 800b718:	4619      	mov	r1, r3
 800b71a:	6938      	ldr	r0, [r7, #16]
 800b71c:	f002 f9bb 	bl	800da96 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800b720:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	697a      	ldr	r2, [r7, #20]
 800b728:	60da      	str	r2, [r3, #12]
}
 800b72a:	bf00      	nop
 800b72c:	3720      	adds	r7, #32
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}

0800b732 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800b732:	b480      	push	{r7}
 800b734:	b087      	sub	sp, #28
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	691b      	ldr	r3, [r3, #16]
 800b73e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800b746:	693a      	ldr	r2, [r7, #16]
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d808      	bhi.n	800b760 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	689a      	ldr	r2, [r3, #8]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	1ad2      	subs	r2, r2, r3
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	4413      	add	r3, r2
 800b75a:	3b01      	subs	r3, #1
 800b75c:	617b      	str	r3, [r7, #20]
 800b75e:	e004      	b.n	800b76a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800b760:	693a      	ldr	r2, [r7, #16]
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	1ad3      	subs	r3, r2, r3
 800b766:	3b01      	subs	r3, #1
 800b768:	617b      	str	r3, [r7, #20]
  }
  return r;
 800b76a:	697b      	ldr	r3, [r7, #20]
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	371c      	adds	r7, #28
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr

0800b778 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800b778:	b580      	push	{r7, lr}
 800b77a:	b08c      	sub	sp, #48	; 0x30
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	60f8      	str	r0, [r7, #12]
 800b780:	60b9      	str	r1, [r7, #8]
 800b782:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800b784:	4b3e      	ldr	r3, [pc, #248]	; (800b880 <SEGGER_RTT_ReadNoLock+0x108>)
 800b786:	623b      	str	r3, [r7, #32]
 800b788:	6a3b      	ldr	r3, [r7, #32]
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d101      	bne.n	800b796 <SEGGER_RTT_ReadNoLock+0x1e>
 800b792:	f7ff fed1 	bl	800b538 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b796:	68fa      	ldr	r2, [r7, #12]
 800b798:	4613      	mov	r3, r2
 800b79a:	005b      	lsls	r3, r3, #1
 800b79c:	4413      	add	r3, r2
 800b79e:	00db      	lsls	r3, r3, #3
 800b7a0:	3360      	adds	r3, #96	; 0x60
 800b7a2:	4a37      	ldr	r2, [pc, #220]	; (800b880 <SEGGER_RTT_ReadNoLock+0x108>)
 800b7a4:	4413      	add	r3, r2
 800b7a6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800b7ac:	69fb      	ldr	r3, [r7, #28]
 800b7ae:	691b      	ldr	r3, [r3, #16]
 800b7b0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	68db      	ldr	r3, [r3, #12]
 800b7b6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800b7bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d92b      	bls.n	800b81c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800b7c4:	69fb      	ldr	r3, [r7, #28]
 800b7c6:	689a      	ldr	r2, [r3, #8]
 800b7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ca:	1ad3      	subs	r3, r2, r3
 800b7cc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800b7ce:	697a      	ldr	r2, [r7, #20]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	bf28      	it	cs
 800b7d6:	4613      	movcs	r3, r2
 800b7d8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800b7da:	69fb      	ldr	r3, [r7, #28]
 800b7dc:	685a      	ldr	r2, [r3, #4]
 800b7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e0:	4413      	add	r3, r2
 800b7e2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800b7e4:	697a      	ldr	r2, [r7, #20]
 800b7e6:	6939      	ldr	r1, [r7, #16]
 800b7e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7ea:	f002 f954 	bl	800da96 <memcpy>
    NumBytesRead += NumBytesRem;
 800b7ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	4413      	add	r3, r2
 800b7f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800b7f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	4413      	add	r3, r2
 800b7fc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	1ad3      	subs	r3, r2, r3
 800b804:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800b806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	4413      	add	r3, r2
 800b80c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800b80e:	69fb      	ldr	r3, [r7, #28]
 800b810:	689b      	ldr	r3, [r3, #8]
 800b812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b814:	429a      	cmp	r2, r3
 800b816:	d101      	bne.n	800b81c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800b818:	2300      	movs	r3, #0
 800b81a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800b81c:	69ba      	ldr	r2, [r7, #24]
 800b81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b820:	1ad3      	subs	r3, r2, r3
 800b822:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800b824:	697a      	ldr	r2, [r7, #20]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	4293      	cmp	r3, r2
 800b82a:	bf28      	it	cs
 800b82c:	4613      	movcs	r3, r2
 800b82e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d019      	beq.n	800b86a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	685a      	ldr	r2, [r3, #4]
 800b83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83c:	4413      	add	r3, r2
 800b83e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800b840:	697a      	ldr	r2, [r7, #20]
 800b842:	6939      	ldr	r1, [r7, #16]
 800b844:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b846:	f002 f926 	bl	800da96 <memcpy>
    NumBytesRead += NumBytesRem;
 800b84a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	4413      	add	r3, r2
 800b850:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800b852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	4413      	add	r3, r2
 800b858:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	1ad3      	subs	r3, r2, r3
 800b860:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800b862:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	4413      	add	r3, r2
 800b868:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800b86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d002      	beq.n	800b876 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b874:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800b876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3730      	adds	r7, #48	; 0x30
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	2001371c 	.word	0x2001371c

0800b884 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800b884:	b580      	push	{r7, lr}
 800b886:	b088      	sub	sp, #32
 800b888:	af00      	add	r7, sp, #0
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	1c5a      	adds	r2, r3, #1
 800b898:	4613      	mov	r3, r2
 800b89a:	005b      	lsls	r3, r3, #1
 800b89c:	4413      	add	r3, r2
 800b89e:	00db      	lsls	r3, r3, #3
 800b8a0:	4a1f      	ldr	r2, [pc, #124]	; (800b920 <SEGGER_RTT_WriteNoLock+0x9c>)
 800b8a2:	4413      	add	r3, r2
 800b8a4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	695b      	ldr	r3, [r3, #20]
 800b8aa:	2b02      	cmp	r3, #2
 800b8ac:	d029      	beq.n	800b902 <SEGGER_RTT_WriteNoLock+0x7e>
 800b8ae:	2b02      	cmp	r3, #2
 800b8b0:	d82e      	bhi.n	800b910 <SEGGER_RTT_WriteNoLock+0x8c>
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d002      	beq.n	800b8bc <SEGGER_RTT_WriteNoLock+0x38>
 800b8b6:	2b01      	cmp	r3, #1
 800b8b8:	d013      	beq.n	800b8e2 <SEGGER_RTT_WriteNoLock+0x5e>
 800b8ba:	e029      	b.n	800b910 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800b8bc:	6978      	ldr	r0, [r7, #20]
 800b8be:	f7ff ff38 	bl	800b732 <_GetAvailWriteSpace>
 800b8c2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800b8c4:	693a      	ldr	r2, [r7, #16]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d202      	bcs.n	800b8d2 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800b8d0:	e021      	b.n	800b916 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	69b9      	ldr	r1, [r7, #24]
 800b8da:	6978      	ldr	r0, [r7, #20]
 800b8dc:	f7ff fee1 	bl	800b6a2 <_WriteNoCheck>
    break;
 800b8e0:	e019      	b.n	800b916 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800b8e2:	6978      	ldr	r0, [r7, #20]
 800b8e4:	f7ff ff25 	bl	800b732 <_GetAvailWriteSpace>
 800b8e8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	bf28      	it	cs
 800b8f2:	4613      	movcs	r3, r2
 800b8f4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800b8f6:	69fa      	ldr	r2, [r7, #28]
 800b8f8:	69b9      	ldr	r1, [r7, #24]
 800b8fa:	6978      	ldr	r0, [r7, #20]
 800b8fc:	f7ff fed1 	bl	800b6a2 <_WriteNoCheck>
    break;
 800b900:	e009      	b.n	800b916 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	69b9      	ldr	r1, [r7, #24]
 800b906:	6978      	ldr	r0, [r7, #20]
 800b908:	f7ff fe6e 	bl	800b5e8 <_WriteBlocking>
 800b90c:	61f8      	str	r0, [r7, #28]
    break;
 800b90e:	e002      	b.n	800b916 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800b910:	2300      	movs	r3, #0
 800b912:	61fb      	str	r3, [r7, #28]
    break;
 800b914:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800b916:	69fb      	ldr	r3, [r7, #28]
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3720      	adds	r7, #32
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	2001371c 	.word	0x2001371c

0800b924 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800b924:	b580      	push	{r7, lr}
 800b926:	b088      	sub	sp, #32
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800b930:	4b0e      	ldr	r3, [pc, #56]	; (800b96c <SEGGER_RTT_Write+0x48>)
 800b932:	61fb      	str	r3, [r7, #28]
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	b2db      	uxtb	r3, r3
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d101      	bne.n	800b942 <SEGGER_RTT_Write+0x1e>
 800b93e:	f7ff fdfb 	bl	800b538 <_DoInit>
  SEGGER_RTT_LOCK();
 800b942:	f3ef 8311 	mrs	r3, BASEPRI
 800b946:	f04f 0120 	mov.w	r1, #32
 800b94a:	f381 8811 	msr	BASEPRI, r1
 800b94e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	68b9      	ldr	r1, [r7, #8]
 800b954:	68f8      	ldr	r0, [r7, #12]
 800b956:	f7ff ff95 	bl	800b884 <SEGGER_RTT_WriteNoLock>
 800b95a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800b95c:	69bb      	ldr	r3, [r7, #24]
 800b95e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800b962:	697b      	ldr	r3, [r7, #20]
}
 800b964:	4618      	mov	r0, r3
 800b966:	3720      	adds	r7, #32
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	2001371c 	.word	0x2001371c

0800b970 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800b970:	b480      	push	{r7}
 800b972:	b087      	sub	sp, #28
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800b97c:	2300      	movs	r3, #0
 800b97e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800b980:	e002      	b.n	800b988 <_EncodeStr+0x18>
    Len++;
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	3301      	adds	r3, #1
 800b986:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800b988:	68ba      	ldr	r2, [r7, #8]
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	4413      	add	r3, r2
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d1f6      	bne.n	800b982 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800b994:	693a      	ldr	r2, [r7, #16]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d901      	bls.n	800b9a0 <_EncodeStr+0x30>
    Len = Limit;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	2bfe      	cmp	r3, #254	; 0xfe
 800b9a4:	d806      	bhi.n	800b9b4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	1c5a      	adds	r2, r3, #1
 800b9aa:	60fa      	str	r2, [r7, #12]
 800b9ac:	693a      	ldr	r2, [r7, #16]
 800b9ae:	b2d2      	uxtb	r2, r2
 800b9b0:	701a      	strb	r2, [r3, #0]
 800b9b2:	e011      	b.n	800b9d8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	1c5a      	adds	r2, r3, #1
 800b9b8:	60fa      	str	r2, [r7, #12]
 800b9ba:	22ff      	movs	r2, #255	; 0xff
 800b9bc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	1c5a      	adds	r2, r3, #1
 800b9c2:	60fa      	str	r2, [r7, #12]
 800b9c4:	693a      	ldr	r2, [r7, #16]
 800b9c6:	b2d2      	uxtb	r2, r2
 800b9c8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	0a19      	lsrs	r1, r3, #8
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	1c5a      	adds	r2, r3, #1
 800b9d2:	60fa      	str	r2, [r7, #12]
 800b9d4:	b2ca      	uxtb	r2, r1
 800b9d6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800b9dc:	e00a      	b.n	800b9f4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800b9de:	68ba      	ldr	r2, [r7, #8]
 800b9e0:	1c53      	adds	r3, r2, #1
 800b9e2:	60bb      	str	r3, [r7, #8]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	1c59      	adds	r1, r3, #1
 800b9e8:	60f9      	str	r1, [r7, #12]
 800b9ea:	7812      	ldrb	r2, [r2, #0]
 800b9ec:	701a      	strb	r2, [r3, #0]
    n++;
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800b9f4:	697a      	ldr	r2, [r7, #20]
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d3f0      	bcc.n	800b9de <_EncodeStr+0x6e>
  }
  return pPayload;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	371c      	adds	r7, #28
 800ba02:	46bd      	mov	sp, r7
 800ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba08:	4770      	bx	lr

0800ba0a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800ba0a:	b480      	push	{r7}
 800ba0c:	b083      	sub	sp, #12
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	3304      	adds	r3, #4
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	370c      	adds	r7, #12
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr
	...

0800ba24 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800ba2a:	4b35      	ldr	r3, [pc, #212]	; (800bb00 <_HandleIncomingPacket+0xdc>)
 800ba2c:	7e1b      	ldrb	r3, [r3, #24]
 800ba2e:	4618      	mov	r0, r3
 800ba30:	1cfb      	adds	r3, r7, #3
 800ba32:	2201      	movs	r2, #1
 800ba34:	4619      	mov	r1, r3
 800ba36:	f7ff fe9f 	bl	800b778 <SEGGER_RTT_ReadNoLock>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	dd59      	ble.n	800baf8 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 800ba44:	78fb      	ldrb	r3, [r7, #3]
 800ba46:	2b80      	cmp	r3, #128	; 0x80
 800ba48:	d032      	beq.n	800bab0 <_HandleIncomingPacket+0x8c>
 800ba4a:	2b80      	cmp	r3, #128	; 0x80
 800ba4c:	dc42      	bgt.n	800bad4 <_HandleIncomingPacket+0xb0>
 800ba4e:	2b07      	cmp	r3, #7
 800ba50:	dc16      	bgt.n	800ba80 <_HandleIncomingPacket+0x5c>
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	dd3e      	ble.n	800bad4 <_HandleIncomingPacket+0xb0>
 800ba56:	3b01      	subs	r3, #1
 800ba58:	2b06      	cmp	r3, #6
 800ba5a:	d83b      	bhi.n	800bad4 <_HandleIncomingPacket+0xb0>
 800ba5c:	a201      	add	r2, pc, #4	; (adr r2, 800ba64 <_HandleIncomingPacket+0x40>)
 800ba5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba62:	bf00      	nop
 800ba64:	0800ba87 	.word	0x0800ba87
 800ba68:	0800ba8d 	.word	0x0800ba8d
 800ba6c:	0800ba93 	.word	0x0800ba93
 800ba70:	0800ba99 	.word	0x0800ba99
 800ba74:	0800ba9f 	.word	0x0800ba9f
 800ba78:	0800baa5 	.word	0x0800baa5
 800ba7c:	0800baab 	.word	0x0800baab
 800ba80:	2b7f      	cmp	r3, #127	; 0x7f
 800ba82:	d034      	beq.n	800baee <_HandleIncomingPacket+0xca>
 800ba84:	e026      	b.n	800bad4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800ba86:	f000 fbff 	bl	800c288 <SEGGER_SYSVIEW_Start>
      break;
 800ba8a:	e035      	b.n	800baf8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800ba8c:	f000 fcb6 	bl	800c3fc <SEGGER_SYSVIEW_Stop>
      break;
 800ba90:	e032      	b.n	800baf8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800ba92:	f000 fe6b 	bl	800c76c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800ba96:	e02f      	b.n	800baf8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800ba98:	f000 fe54 	bl	800c744 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800ba9c:	e02c      	b.n	800baf8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800ba9e:	f000 fcd3 	bl	800c448 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800baa2:	e029      	b.n	800baf8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800baa4:	f001 f89e 	bl	800cbe4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800baa8:	e026      	b.n	800baf8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800baaa:	f001 f87d 	bl	800cba8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800baae:	e023      	b.n	800baf8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800bab0:	4b13      	ldr	r3, [pc, #76]	; (800bb00 <_HandleIncomingPacket+0xdc>)
 800bab2:	7e1b      	ldrb	r3, [r3, #24]
 800bab4:	4618      	mov	r0, r3
 800bab6:	1cfb      	adds	r3, r7, #3
 800bab8:	2201      	movs	r2, #1
 800baba:	4619      	mov	r1, r3
 800babc:	f7ff fe5c 	bl	800b778 <SEGGER_RTT_ReadNoLock>
 800bac0:	4603      	mov	r3, r0
 800bac2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	dd13      	ble.n	800baf2 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800baca:	78fb      	ldrb	r3, [r7, #3]
 800bacc:	4618      	mov	r0, r3
 800bace:	f000 ffeb 	bl	800caa8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800bad2:	e00e      	b.n	800baf2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800bad4:	78fb      	ldrb	r3, [r7, #3]
 800bad6:	b25b      	sxtb	r3, r3
 800bad8:	2b00      	cmp	r3, #0
 800bada:	da0c      	bge.n	800baf6 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800badc:	4b08      	ldr	r3, [pc, #32]	; (800bb00 <_HandleIncomingPacket+0xdc>)
 800bade:	7e1b      	ldrb	r3, [r3, #24]
 800bae0:	4618      	mov	r0, r3
 800bae2:	1cfb      	adds	r3, r7, #3
 800bae4:	2201      	movs	r2, #1
 800bae6:	4619      	mov	r1, r3
 800bae8:	f7ff fe46 	bl	800b778 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800baec:	e003      	b.n	800baf6 <_HandleIncomingPacket+0xd2>
      break;
 800baee:	bf00      	nop
 800baf0:	e002      	b.n	800baf8 <_HandleIncomingPacket+0xd4>
      break;
 800baf2:	bf00      	nop
 800baf4:	e000      	b.n	800baf8 <_HandleIncomingPacket+0xd4>
      break;
 800baf6:	bf00      	nop
    }
  }
}
 800baf8:	bf00      	nop
 800bafa:	3708      	adds	r7, #8
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	20013bd4 	.word	0x20013bd4

0800bb04 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b08c      	sub	sp, #48	; 0x30
 800bb08:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800bb0e:	1d3b      	adds	r3, r7, #4
 800bb10:	3301      	adds	r3, #1
 800bb12:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb18:	4b31      	ldr	r3, [pc, #196]	; (800bbe0 <_TrySendOverflowPacket+0xdc>)
 800bb1a:	695b      	ldr	r3, [r3, #20]
 800bb1c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb1e:	e00b      	b.n	800bb38 <_TrySendOverflowPacket+0x34>
 800bb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb22:	b2da      	uxtb	r2, r3
 800bb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb26:	1c59      	adds	r1, r3, #1
 800bb28:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bb2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bb2e:	b2d2      	uxtb	r2, r2
 800bb30:	701a      	strb	r2, [r3, #0]
 800bb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb34:	09db      	lsrs	r3, r3, #7
 800bb36:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3a:	2b7f      	cmp	r3, #127	; 0x7f
 800bb3c:	d8f0      	bhi.n	800bb20 <_TrySendOverflowPacket+0x1c>
 800bb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb40:	1c5a      	adds	r2, r3, #1
 800bb42:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bb44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb46:	b2d2      	uxtb	r2, r2
 800bb48:	701a      	strb	r2, [r3, #0]
 800bb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb4c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800bb4e:	4b25      	ldr	r3, [pc, #148]	; (800bbe4 <_TrySendOverflowPacket+0xe0>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800bb54:	4b22      	ldr	r3, [pc, #136]	; (800bbe0 <_TrySendOverflowPacket+0xdc>)
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	69ba      	ldr	r2, [r7, #24]
 800bb5a:	1ad3      	subs	r3, r2, r3
 800bb5c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800bb5e:	69fb      	ldr	r3, [r7, #28]
 800bb60:	627b      	str	r3, [r7, #36]	; 0x24
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	623b      	str	r3, [r7, #32]
 800bb66:	e00b      	b.n	800bb80 <_TrySendOverflowPacket+0x7c>
 800bb68:	6a3b      	ldr	r3, [r7, #32]
 800bb6a:	b2da      	uxtb	r2, r3
 800bb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb6e:	1c59      	adds	r1, r3, #1
 800bb70:	6279      	str	r1, [r7, #36]	; 0x24
 800bb72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bb76:	b2d2      	uxtb	r2, r2
 800bb78:	701a      	strb	r2, [r3, #0]
 800bb7a:	6a3b      	ldr	r3, [r7, #32]
 800bb7c:	09db      	lsrs	r3, r3, #7
 800bb7e:	623b      	str	r3, [r7, #32]
 800bb80:	6a3b      	ldr	r3, [r7, #32]
 800bb82:	2b7f      	cmp	r3, #127	; 0x7f
 800bb84:	d8f0      	bhi.n	800bb68 <_TrySendOverflowPacket+0x64>
 800bb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb88:	1c5a      	adds	r2, r3, #1
 800bb8a:	627a      	str	r2, [r7, #36]	; 0x24
 800bb8c:	6a3a      	ldr	r2, [r7, #32]
 800bb8e:	b2d2      	uxtb	r2, r2
 800bb90:	701a      	strb	r2, [r3, #0]
 800bb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb94:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800bb96:	4b12      	ldr	r3, [pc, #72]	; (800bbe0 <_TrySendOverflowPacket+0xdc>)
 800bb98:	785b      	ldrb	r3, [r3, #1]
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	1d3b      	adds	r3, r7, #4
 800bb9e:	69fa      	ldr	r2, [r7, #28]
 800bba0:	1ad3      	subs	r3, r2, r3
 800bba2:	461a      	mov	r2, r3
 800bba4:	1d3b      	adds	r3, r7, #4
 800bba6:	4619      	mov	r1, r3
 800bba8:	f7f4 fb32 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800bbac:	4603      	mov	r3, r0
 800bbae:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d009      	beq.n	800bbca <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800bbb6:	4a0a      	ldr	r2, [pc, #40]	; (800bbe0 <_TrySendOverflowPacket+0xdc>)
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800bbbc:	4b08      	ldr	r3, [pc, #32]	; (800bbe0 <_TrySendOverflowPacket+0xdc>)
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	3b01      	subs	r3, #1
 800bbc2:	b2da      	uxtb	r2, r3
 800bbc4:	4b06      	ldr	r3, [pc, #24]	; (800bbe0 <_TrySendOverflowPacket+0xdc>)
 800bbc6:	701a      	strb	r2, [r3, #0]
 800bbc8:	e004      	b.n	800bbd4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800bbca:	4b05      	ldr	r3, [pc, #20]	; (800bbe0 <_TrySendOverflowPacket+0xdc>)
 800bbcc:	695b      	ldr	r3, [r3, #20]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	4a03      	ldr	r2, [pc, #12]	; (800bbe0 <_TrySendOverflowPacket+0xdc>)
 800bbd2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800bbd4:	693b      	ldr	r3, [r7, #16]
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3730      	adds	r7, #48	; 0x30
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	20013bd4 	.word	0x20013bd4
 800bbe4:	e0001004 	.word	0xe0001004

0800bbe8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b08a      	sub	sp, #40	; 0x28
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	60f8      	str	r0, [r7, #12]
 800bbf0:	60b9      	str	r1, [r7, #8]
 800bbf2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800bbf4:	4b6c      	ldr	r3, [pc, #432]	; (800bda8 <_SendPacket+0x1c0>)
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d010      	beq.n	800bc1e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800bbfc:	4b6a      	ldr	r3, [pc, #424]	; (800bda8 <_SendPacket+0x1c0>)
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	f000 80a3 	beq.w	800bd4c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800bc06:	4b68      	ldr	r3, [pc, #416]	; (800bda8 <_SendPacket+0x1c0>)
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	2b02      	cmp	r3, #2
 800bc0c:	d109      	bne.n	800bc22 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800bc0e:	f7ff ff79 	bl	800bb04 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800bc12:	4b65      	ldr	r3, [pc, #404]	; (800bda8 <_SendPacket+0x1c0>)
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	f040 809a 	bne.w	800bd50 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800bc1c:	e001      	b.n	800bc22 <_SendPacket+0x3a>
    goto Send;
 800bc1e:	bf00      	nop
 800bc20:	e000      	b.n	800bc24 <_SendPacket+0x3c>
Send:
 800bc22:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2b1f      	cmp	r3, #31
 800bc28:	d809      	bhi.n	800bc3e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800bc2a:	4b5f      	ldr	r3, [pc, #380]	; (800bda8 <_SendPacket+0x1c0>)
 800bc2c:	69da      	ldr	r2, [r3, #28]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	fa22 f303 	lsr.w	r3, r2, r3
 800bc34:	f003 0301 	and.w	r3, r3, #1
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	f040 808b 	bne.w	800bd54 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2b17      	cmp	r3, #23
 800bc42:	d807      	bhi.n	800bc54 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	3b01      	subs	r3, #1
 800bc48:	60fb      	str	r3, [r7, #12]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	b2da      	uxtb	r2, r3
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	701a      	strb	r2, [r3, #0]
 800bc52:	e03d      	b.n	800bcd0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800bc54:	68ba      	ldr	r2, [r7, #8]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	1ad3      	subs	r3, r2, r3
 800bc5a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800bc5c:	69fb      	ldr	r3, [r7, #28]
 800bc5e:	2b7f      	cmp	r3, #127	; 0x7f
 800bc60:	d912      	bls.n	800bc88 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800bc62:	69fb      	ldr	r3, [r7, #28]
 800bc64:	09da      	lsrs	r2, r3, #7
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	3b01      	subs	r3, #1
 800bc6a:	60fb      	str	r3, [r7, #12]
 800bc6c:	b2d2      	uxtb	r2, r2
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800bc72:	69fb      	ldr	r3, [r7, #28]
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	68fa      	ldr	r2, [r7, #12]
 800bc78:	3a01      	subs	r2, #1
 800bc7a:	60fa      	str	r2, [r7, #12]
 800bc7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bc80:	b2da      	uxtb	r2, r3
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	701a      	strb	r2, [r3, #0]
 800bc86:	e006      	b.n	800bc96 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	60fb      	str	r3, [r7, #12]
 800bc8e:	69fb      	ldr	r3, [r7, #28]
 800bc90:	b2da      	uxtb	r2, r3
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2b7f      	cmp	r3, #127	; 0x7f
 800bc9a:	d912      	bls.n	800bcc2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	09da      	lsrs	r2, r3, #7
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	3b01      	subs	r3, #1
 800bca4:	60fb      	str	r3, [r7, #12]
 800bca6:	b2d2      	uxtb	r2, r2
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	68fa      	ldr	r2, [r7, #12]
 800bcb2:	3a01      	subs	r2, #1
 800bcb4:	60fa      	str	r2, [r7, #12]
 800bcb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bcba:	b2da      	uxtb	r2, r3
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	701a      	strb	r2, [r3, #0]
 800bcc0:	e006      	b.n	800bcd0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	3b01      	subs	r3, #1
 800bcc6:	60fb      	str	r3, [r7, #12]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	b2da      	uxtb	r2, r3
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800bcd0:	4b36      	ldr	r3, [pc, #216]	; (800bdac <_SendPacket+0x1c4>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800bcd6:	4b34      	ldr	r3, [pc, #208]	; (800bda8 <_SendPacket+0x1c0>)
 800bcd8:	68db      	ldr	r3, [r3, #12]
 800bcda:	69ba      	ldr	r2, [r7, #24]
 800bcdc:	1ad3      	subs	r3, r2, r3
 800bcde:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	627b      	str	r3, [r7, #36]	; 0x24
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	623b      	str	r3, [r7, #32]
 800bce8:	e00b      	b.n	800bd02 <_SendPacket+0x11a>
 800bcea:	6a3b      	ldr	r3, [r7, #32]
 800bcec:	b2da      	uxtb	r2, r3
 800bcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf0:	1c59      	adds	r1, r3, #1
 800bcf2:	6279      	str	r1, [r7, #36]	; 0x24
 800bcf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bcf8:	b2d2      	uxtb	r2, r2
 800bcfa:	701a      	strb	r2, [r3, #0]
 800bcfc:	6a3b      	ldr	r3, [r7, #32]
 800bcfe:	09db      	lsrs	r3, r3, #7
 800bd00:	623b      	str	r3, [r7, #32]
 800bd02:	6a3b      	ldr	r3, [r7, #32]
 800bd04:	2b7f      	cmp	r3, #127	; 0x7f
 800bd06:	d8f0      	bhi.n	800bcea <_SendPacket+0x102>
 800bd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd0a:	1c5a      	adds	r2, r3, #1
 800bd0c:	627a      	str	r2, [r7, #36]	; 0x24
 800bd0e:	6a3a      	ldr	r2, [r7, #32]
 800bd10:	b2d2      	uxtb	r2, r2
 800bd12:	701a      	strb	r2, [r3, #0]
 800bd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd16:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800bd18:	4b23      	ldr	r3, [pc, #140]	; (800bda8 <_SendPacket+0x1c0>)
 800bd1a:	785b      	ldrb	r3, [r3, #1]
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	68ba      	ldr	r2, [r7, #8]
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	1ad3      	subs	r3, r2, r3
 800bd24:	461a      	mov	r2, r3
 800bd26:	68f9      	ldr	r1, [r7, #12]
 800bd28:	f7f4 fa72 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d003      	beq.n	800bd3e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800bd36:	4a1c      	ldr	r2, [pc, #112]	; (800bda8 <_SendPacket+0x1c0>)
 800bd38:	69bb      	ldr	r3, [r7, #24]
 800bd3a:	60d3      	str	r3, [r2, #12]
 800bd3c:	e00b      	b.n	800bd56 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800bd3e:	4b1a      	ldr	r3, [pc, #104]	; (800bda8 <_SendPacket+0x1c0>)
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	3301      	adds	r3, #1
 800bd44:	b2da      	uxtb	r2, r3
 800bd46:	4b18      	ldr	r3, [pc, #96]	; (800bda8 <_SendPacket+0x1c0>)
 800bd48:	701a      	strb	r2, [r3, #0]
 800bd4a:	e004      	b.n	800bd56 <_SendPacket+0x16e>
    goto SendDone;
 800bd4c:	bf00      	nop
 800bd4e:	e002      	b.n	800bd56 <_SendPacket+0x16e>
      goto SendDone;
 800bd50:	bf00      	nop
 800bd52:	e000      	b.n	800bd56 <_SendPacket+0x16e>
      goto SendDone;
 800bd54:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800bd56:	4b14      	ldr	r3, [pc, #80]	; (800bda8 <_SendPacket+0x1c0>)
 800bd58:	7e1b      	ldrb	r3, [r3, #24]
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	4a14      	ldr	r2, [pc, #80]	; (800bdb0 <_SendPacket+0x1c8>)
 800bd5e:	460b      	mov	r3, r1
 800bd60:	005b      	lsls	r3, r3, #1
 800bd62:	440b      	add	r3, r1
 800bd64:	00db      	lsls	r3, r3, #3
 800bd66:	4413      	add	r3, r2
 800bd68:	336c      	adds	r3, #108	; 0x6c
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	4b0e      	ldr	r3, [pc, #56]	; (800bda8 <_SendPacket+0x1c0>)
 800bd6e:	7e1b      	ldrb	r3, [r3, #24]
 800bd70:	4618      	mov	r0, r3
 800bd72:	490f      	ldr	r1, [pc, #60]	; (800bdb0 <_SendPacket+0x1c8>)
 800bd74:	4603      	mov	r3, r0
 800bd76:	005b      	lsls	r3, r3, #1
 800bd78:	4403      	add	r3, r0
 800bd7a:	00db      	lsls	r3, r3, #3
 800bd7c:	440b      	add	r3, r1
 800bd7e:	3370      	adds	r3, #112	; 0x70
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d00b      	beq.n	800bd9e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800bd86:	4b08      	ldr	r3, [pc, #32]	; (800bda8 <_SendPacket+0x1c0>)
 800bd88:	789b      	ldrb	r3, [r3, #2]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d107      	bne.n	800bd9e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800bd8e:	4b06      	ldr	r3, [pc, #24]	; (800bda8 <_SendPacket+0x1c0>)
 800bd90:	2201      	movs	r2, #1
 800bd92:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800bd94:	f7ff fe46 	bl	800ba24 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800bd98:	4b03      	ldr	r3, [pc, #12]	; (800bda8 <_SendPacket+0x1c0>)
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800bd9e:	bf00      	nop
 800bda0:	3728      	adds	r7, #40	; 0x28
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	20013bd4 	.word	0x20013bd4
 800bdac:	e0001004 	.word	0xe0001004
 800bdb0:	2001371c 	.word	0x2001371c

0800bdb4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b084      	sub	sp, #16
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800bdbc:	f3ef 8311 	mrs	r3, BASEPRI
 800bdc0:	f04f 0120 	mov.w	r1, #32
 800bdc4:	f381 8811 	msr	BASEPRI, r1
 800bdc8:	60fb      	str	r3, [r7, #12]
 800bdca:	4808      	ldr	r0, [pc, #32]	; (800bdec <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800bdcc:	f7ff fe1d 	bl	800ba0a <_PreparePacket>
 800bdd0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	68b9      	ldr	r1, [r7, #8]
 800bdd6:	68b8      	ldr	r0, [r7, #8]
 800bdd8:	f7ff ff06 	bl	800bbe8 <_SendPacket>
  RECORD_END();
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f383 8811 	msr	BASEPRI, r3
}
 800bde2:	bf00      	nop
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	20013c04 	.word	0x20013c04

0800bdf0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b088      	sub	sp, #32
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800bdfa:	f3ef 8311 	mrs	r3, BASEPRI
 800bdfe:	f04f 0120 	mov.w	r1, #32
 800be02:	f381 8811 	msr	BASEPRI, r1
 800be06:	617b      	str	r3, [r7, #20]
 800be08:	4816      	ldr	r0, [pc, #88]	; (800be64 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800be0a:	f7ff fdfe 	bl	800ba0a <_PreparePacket>
 800be0e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	61fb      	str	r3, [r7, #28]
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	61bb      	str	r3, [r7, #24]
 800be1c:	e00b      	b.n	800be36 <SEGGER_SYSVIEW_RecordU32+0x46>
 800be1e:	69bb      	ldr	r3, [r7, #24]
 800be20:	b2da      	uxtb	r2, r3
 800be22:	69fb      	ldr	r3, [r7, #28]
 800be24:	1c59      	adds	r1, r3, #1
 800be26:	61f9      	str	r1, [r7, #28]
 800be28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800be2c:	b2d2      	uxtb	r2, r2
 800be2e:	701a      	strb	r2, [r3, #0]
 800be30:	69bb      	ldr	r3, [r7, #24]
 800be32:	09db      	lsrs	r3, r3, #7
 800be34:	61bb      	str	r3, [r7, #24]
 800be36:	69bb      	ldr	r3, [r7, #24]
 800be38:	2b7f      	cmp	r3, #127	; 0x7f
 800be3a:	d8f0      	bhi.n	800be1e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800be3c:	69fb      	ldr	r3, [r7, #28]
 800be3e:	1c5a      	adds	r2, r3, #1
 800be40:	61fa      	str	r2, [r7, #28]
 800be42:	69ba      	ldr	r2, [r7, #24]
 800be44:	b2d2      	uxtb	r2, r2
 800be46:	701a      	strb	r2, [r3, #0]
 800be48:	69fb      	ldr	r3, [r7, #28]
 800be4a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	68f9      	ldr	r1, [r7, #12]
 800be50:	6938      	ldr	r0, [r7, #16]
 800be52:	f7ff fec9 	bl	800bbe8 <_SendPacket>
  RECORD_END();
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	f383 8811 	msr	BASEPRI, r3
}
 800be5c:	bf00      	nop
 800be5e:	3720      	adds	r7, #32
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}
 800be64:	20013c04 	.word	0x20013c04

0800be68 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800be68:	b580      	push	{r7, lr}
 800be6a:	b08c      	sub	sp, #48	; 0x30
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800be74:	f3ef 8311 	mrs	r3, BASEPRI
 800be78:	f04f 0120 	mov.w	r1, #32
 800be7c:	f381 8811 	msr	BASEPRI, r1
 800be80:	61fb      	str	r3, [r7, #28]
 800be82:	4825      	ldr	r0, [pc, #148]	; (800bf18 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800be84:	f7ff fdc1 	bl	800ba0a <_PreparePacket>
 800be88:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800be8a:	69bb      	ldr	r3, [r7, #24]
 800be8c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	62bb      	str	r3, [r7, #40]	; 0x28
 800be96:	e00b      	b.n	800beb0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800be98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9a:	b2da      	uxtb	r2, r3
 800be9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be9e:	1c59      	adds	r1, r3, #1
 800bea0:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bea2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bea6:	b2d2      	uxtb	r2, r2
 800bea8:	701a      	strb	r2, [r3, #0]
 800beaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beac:	09db      	lsrs	r3, r3, #7
 800beae:	62bb      	str	r3, [r7, #40]	; 0x28
 800beb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb2:	2b7f      	cmp	r3, #127	; 0x7f
 800beb4:	d8f0      	bhi.n	800be98 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800beb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb8:	1c5a      	adds	r2, r3, #1
 800beba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bebe:	b2d2      	uxtb	r2, r2
 800bec0:	701a      	strb	r2, [r3, #0]
 800bec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	627b      	str	r3, [r7, #36]	; 0x24
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	623b      	str	r3, [r7, #32]
 800bece:	e00b      	b.n	800bee8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800bed0:	6a3b      	ldr	r3, [r7, #32]
 800bed2:	b2da      	uxtb	r2, r3
 800bed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed6:	1c59      	adds	r1, r3, #1
 800bed8:	6279      	str	r1, [r7, #36]	; 0x24
 800beda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bede:	b2d2      	uxtb	r2, r2
 800bee0:	701a      	strb	r2, [r3, #0]
 800bee2:	6a3b      	ldr	r3, [r7, #32]
 800bee4:	09db      	lsrs	r3, r3, #7
 800bee6:	623b      	str	r3, [r7, #32]
 800bee8:	6a3b      	ldr	r3, [r7, #32]
 800beea:	2b7f      	cmp	r3, #127	; 0x7f
 800beec:	d8f0      	bhi.n	800bed0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800beee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef0:	1c5a      	adds	r2, r3, #1
 800bef2:	627a      	str	r2, [r7, #36]	; 0x24
 800bef4:	6a3a      	ldr	r2, [r7, #32]
 800bef6:	b2d2      	uxtb	r2, r2
 800bef8:	701a      	strb	r2, [r3, #0]
 800befa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800befe:	68fa      	ldr	r2, [r7, #12]
 800bf00:	6979      	ldr	r1, [r7, #20]
 800bf02:	69b8      	ldr	r0, [r7, #24]
 800bf04:	f7ff fe70 	bl	800bbe8 <_SendPacket>
  RECORD_END();
 800bf08:	69fb      	ldr	r3, [r7, #28]
 800bf0a:	f383 8811 	msr	BASEPRI, r3
}
 800bf0e:	bf00      	nop
 800bf10:	3730      	adds	r7, #48	; 0x30
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	bf00      	nop
 800bf18:	20013c04 	.word	0x20013c04

0800bf1c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b08e      	sub	sp, #56	; 0x38
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	607a      	str	r2, [r7, #4]
 800bf28:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800bf2a:	f3ef 8311 	mrs	r3, BASEPRI
 800bf2e:	f04f 0120 	mov.w	r1, #32
 800bf32:	f381 8811 	msr	BASEPRI, r1
 800bf36:	61fb      	str	r3, [r7, #28]
 800bf38:	4832      	ldr	r0, [pc, #200]	; (800c004 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800bf3a:	f7ff fd66 	bl	800ba0a <_PreparePacket>
 800bf3e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800bf40:	69bb      	ldr	r3, [r7, #24]
 800bf42:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	637b      	str	r3, [r7, #52]	; 0x34
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	633b      	str	r3, [r7, #48]	; 0x30
 800bf4c:	e00b      	b.n	800bf66 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800bf4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf50:	b2da      	uxtb	r2, r3
 800bf52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf54:	1c59      	adds	r1, r3, #1
 800bf56:	6379      	str	r1, [r7, #52]	; 0x34
 800bf58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bf5c:	b2d2      	uxtb	r2, r2
 800bf5e:	701a      	strb	r2, [r3, #0]
 800bf60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf62:	09db      	lsrs	r3, r3, #7
 800bf64:	633b      	str	r3, [r7, #48]	; 0x30
 800bf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf68:	2b7f      	cmp	r3, #127	; 0x7f
 800bf6a:	d8f0      	bhi.n	800bf4e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800bf6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf6e:	1c5a      	adds	r2, r3, #1
 800bf70:	637a      	str	r2, [r7, #52]	; 0x34
 800bf72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf74:	b2d2      	uxtb	r2, r2
 800bf76:	701a      	strb	r2, [r3, #0]
 800bf78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf84:	e00b      	b.n	800bf9e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800bf86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf88:	b2da      	uxtb	r2, r3
 800bf8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8c:	1c59      	adds	r1, r3, #1
 800bf8e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bf90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bf94:	b2d2      	uxtb	r2, r2
 800bf96:	701a      	strb	r2, [r3, #0]
 800bf98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9a:	09db      	lsrs	r3, r3, #7
 800bf9c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa0:	2b7f      	cmp	r3, #127	; 0x7f
 800bfa2:	d8f0      	bhi.n	800bf86 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800bfa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa6:	1c5a      	adds	r2, r3, #1
 800bfa8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bfaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfac:	b2d2      	uxtb	r2, r2
 800bfae:	701a      	strb	r2, [r3, #0]
 800bfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	627b      	str	r3, [r7, #36]	; 0x24
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	623b      	str	r3, [r7, #32]
 800bfbc:	e00b      	b.n	800bfd6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800bfbe:	6a3b      	ldr	r3, [r7, #32]
 800bfc0:	b2da      	uxtb	r2, r3
 800bfc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc4:	1c59      	adds	r1, r3, #1
 800bfc6:	6279      	str	r1, [r7, #36]	; 0x24
 800bfc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bfcc:	b2d2      	uxtb	r2, r2
 800bfce:	701a      	strb	r2, [r3, #0]
 800bfd0:	6a3b      	ldr	r3, [r7, #32]
 800bfd2:	09db      	lsrs	r3, r3, #7
 800bfd4:	623b      	str	r3, [r7, #32]
 800bfd6:	6a3b      	ldr	r3, [r7, #32]
 800bfd8:	2b7f      	cmp	r3, #127	; 0x7f
 800bfda:	d8f0      	bhi.n	800bfbe <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800bfdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfde:	1c5a      	adds	r2, r3, #1
 800bfe0:	627a      	str	r2, [r7, #36]	; 0x24
 800bfe2:	6a3a      	ldr	r2, [r7, #32]
 800bfe4:	b2d2      	uxtb	r2, r2
 800bfe6:	701a      	strb	r2, [r3, #0]
 800bfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfea:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bfec:	68fa      	ldr	r2, [r7, #12]
 800bfee:	6979      	ldr	r1, [r7, #20]
 800bff0:	69b8      	ldr	r0, [r7, #24]
 800bff2:	f7ff fdf9 	bl	800bbe8 <_SendPacket>
  RECORD_END();
 800bff6:	69fb      	ldr	r3, [r7, #28]
 800bff8:	f383 8811 	msr	BASEPRI, r3
}
 800bffc:	bf00      	nop
 800bffe:	3738      	adds	r7, #56	; 0x38
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	20013c04 	.word	0x20013c04

0800c008 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800c008:	b580      	push	{r7, lr}
 800c00a:	b090      	sub	sp, #64	; 0x40
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	60b9      	str	r1, [r7, #8]
 800c012:	607a      	str	r2, [r7, #4]
 800c014:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c016:	f3ef 8311 	mrs	r3, BASEPRI
 800c01a:	f04f 0120 	mov.w	r1, #32
 800c01e:	f381 8811 	msr	BASEPRI, r1
 800c022:	61fb      	str	r3, [r7, #28]
 800c024:	4840      	ldr	r0, [pc, #256]	; (800c128 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800c026:	f7ff fcf0 	bl	800ba0a <_PreparePacket>
 800c02a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c02c:	69bb      	ldr	r3, [r7, #24]
 800c02e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	63bb      	str	r3, [r7, #56]	; 0x38
 800c038:	e00b      	b.n	800c052 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800c03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c03c:	b2da      	uxtb	r2, r3
 800c03e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c040:	1c59      	adds	r1, r3, #1
 800c042:	63f9      	str	r1, [r7, #60]	; 0x3c
 800c044:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c048:	b2d2      	uxtb	r2, r2
 800c04a:	701a      	strb	r2, [r3, #0]
 800c04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04e:	09db      	lsrs	r3, r3, #7
 800c050:	63bb      	str	r3, [r7, #56]	; 0x38
 800c052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c054:	2b7f      	cmp	r3, #127	; 0x7f
 800c056:	d8f0      	bhi.n	800c03a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800c058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c05a:	1c5a      	adds	r2, r3, #1
 800c05c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c05e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c060:	b2d2      	uxtb	r2, r2
 800c062:	701a      	strb	r2, [r3, #0]
 800c064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c066:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	637b      	str	r3, [r7, #52]	; 0x34
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	633b      	str	r3, [r7, #48]	; 0x30
 800c070:	e00b      	b.n	800c08a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800c072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c074:	b2da      	uxtb	r2, r3
 800c076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c078:	1c59      	adds	r1, r3, #1
 800c07a:	6379      	str	r1, [r7, #52]	; 0x34
 800c07c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c080:	b2d2      	uxtb	r2, r2
 800c082:	701a      	strb	r2, [r3, #0]
 800c084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c086:	09db      	lsrs	r3, r3, #7
 800c088:	633b      	str	r3, [r7, #48]	; 0x30
 800c08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08c:	2b7f      	cmp	r3, #127	; 0x7f
 800c08e:	d8f0      	bhi.n	800c072 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800c090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c092:	1c5a      	adds	r2, r3, #1
 800c094:	637a      	str	r2, [r7, #52]	; 0x34
 800c096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c098:	b2d2      	uxtb	r2, r2
 800c09a:	701a      	strb	r2, [r3, #0]
 800c09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c09e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0a8:	e00b      	b.n	800c0c2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800c0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ac:	b2da      	uxtb	r2, r3
 800c0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b0:	1c59      	adds	r1, r3, #1
 800c0b2:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c0b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c0b8:	b2d2      	uxtb	r2, r2
 800c0ba:	701a      	strb	r2, [r3, #0]
 800c0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0be:	09db      	lsrs	r3, r3, #7
 800c0c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c4:	2b7f      	cmp	r3, #127	; 0x7f
 800c0c6:	d8f0      	bhi.n	800c0aa <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800c0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ca:	1c5a      	adds	r2, r3, #1
 800c0cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c0ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0d0:	b2d2      	uxtb	r2, r2
 800c0d2:	701a      	strb	r2, [r3, #0]
 800c0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	627b      	str	r3, [r7, #36]	; 0x24
 800c0dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0de:	623b      	str	r3, [r7, #32]
 800c0e0:	e00b      	b.n	800c0fa <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800c0e2:	6a3b      	ldr	r3, [r7, #32]
 800c0e4:	b2da      	uxtb	r2, r3
 800c0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e8:	1c59      	adds	r1, r3, #1
 800c0ea:	6279      	str	r1, [r7, #36]	; 0x24
 800c0ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c0f0:	b2d2      	uxtb	r2, r2
 800c0f2:	701a      	strb	r2, [r3, #0]
 800c0f4:	6a3b      	ldr	r3, [r7, #32]
 800c0f6:	09db      	lsrs	r3, r3, #7
 800c0f8:	623b      	str	r3, [r7, #32]
 800c0fa:	6a3b      	ldr	r3, [r7, #32]
 800c0fc:	2b7f      	cmp	r3, #127	; 0x7f
 800c0fe:	d8f0      	bhi.n	800c0e2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800c100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c102:	1c5a      	adds	r2, r3, #1
 800c104:	627a      	str	r2, [r7, #36]	; 0x24
 800c106:	6a3a      	ldr	r2, [r7, #32]
 800c108:	b2d2      	uxtb	r2, r2
 800c10a:	701a      	strb	r2, [r3, #0]
 800c10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c110:	68fa      	ldr	r2, [r7, #12]
 800c112:	6979      	ldr	r1, [r7, #20]
 800c114:	69b8      	ldr	r0, [r7, #24]
 800c116:	f7ff fd67 	bl	800bbe8 <_SendPacket>
  RECORD_END();
 800c11a:	69fb      	ldr	r3, [r7, #28]
 800c11c:	f383 8811 	msr	BASEPRI, r3
}
 800c120:	bf00      	nop
 800c122:	3740      	adds	r7, #64	; 0x40
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}
 800c128:	20013c04 	.word	0x20013c04

0800c12c <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b092      	sub	sp, #72	; 0x48
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	607a      	str	r2, [r7, #4]
 800c138:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 800c13a:	f3ef 8311 	mrs	r3, BASEPRI
 800c13e:	f04f 0120 	mov.w	r1, #32
 800c142:	f381 8811 	msr	BASEPRI, r1
 800c146:	61fb      	str	r3, [r7, #28]
 800c148:	484e      	ldr	r0, [pc, #312]	; (800c284 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 800c14a:	f7ff fc5e 	bl	800ba0a <_PreparePacket>
 800c14e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c150:	69bb      	ldr	r3, [r7, #24]
 800c152:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	647b      	str	r3, [r7, #68]	; 0x44
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	643b      	str	r3, [r7, #64]	; 0x40
 800c15c:	e00b      	b.n	800c176 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800c15e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c160:	b2da      	uxtb	r2, r3
 800c162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c164:	1c59      	adds	r1, r3, #1
 800c166:	6479      	str	r1, [r7, #68]	; 0x44
 800c168:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c16c:	b2d2      	uxtb	r2, r2
 800c16e:	701a      	strb	r2, [r3, #0]
 800c170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c172:	09db      	lsrs	r3, r3, #7
 800c174:	643b      	str	r3, [r7, #64]	; 0x40
 800c176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c178:	2b7f      	cmp	r3, #127	; 0x7f
 800c17a:	d8f0      	bhi.n	800c15e <SEGGER_SYSVIEW_RecordU32x5+0x32>
 800c17c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c17e:	1c5a      	adds	r2, r3, #1
 800c180:	647a      	str	r2, [r7, #68]	; 0x44
 800c182:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c184:	b2d2      	uxtb	r2, r2
 800c186:	701a      	strb	r2, [r3, #0]
 800c188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c18a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	63bb      	str	r3, [r7, #56]	; 0x38
 800c194:	e00b      	b.n	800c1ae <SEGGER_SYSVIEW_RecordU32x5+0x82>
 800c196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c198:	b2da      	uxtb	r2, r3
 800c19a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c19c:	1c59      	adds	r1, r3, #1
 800c19e:	63f9      	str	r1, [r7, #60]	; 0x3c
 800c1a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c1a4:	b2d2      	uxtb	r2, r2
 800c1a6:	701a      	strb	r2, [r3, #0]
 800c1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1aa:	09db      	lsrs	r3, r3, #7
 800c1ac:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b0:	2b7f      	cmp	r3, #127	; 0x7f
 800c1b2:	d8f0      	bhi.n	800c196 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 800c1b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1b6:	1c5a      	adds	r2, r3, #1
 800c1b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c1ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1bc:	b2d2      	uxtb	r2, r2
 800c1be:	701a      	strb	r2, [r3, #0]
 800c1c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	637b      	str	r3, [r7, #52]	; 0x34
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	633b      	str	r3, [r7, #48]	; 0x30
 800c1cc:	e00b      	b.n	800c1e6 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800c1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d0:	b2da      	uxtb	r2, r3
 800c1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1d4:	1c59      	adds	r1, r3, #1
 800c1d6:	6379      	str	r1, [r7, #52]	; 0x34
 800c1d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c1dc:	b2d2      	uxtb	r2, r2
 800c1de:	701a      	strb	r2, [r3, #0]
 800c1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e2:	09db      	lsrs	r3, r3, #7
 800c1e4:	633b      	str	r3, [r7, #48]	; 0x30
 800c1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e8:	2b7f      	cmp	r3, #127	; 0x7f
 800c1ea:	d8f0      	bhi.n	800c1ce <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 800c1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1ee:	1c5a      	adds	r2, r3, #1
 800c1f0:	637a      	str	r2, [r7, #52]	; 0x34
 800c1f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1f4:	b2d2      	uxtb	r2, r2
 800c1f6:	701a      	strb	r2, [r3, #0]
 800c1f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c202:	62bb      	str	r3, [r7, #40]	; 0x28
 800c204:	e00b      	b.n	800c21e <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 800c206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c208:	b2da      	uxtb	r2, r3
 800c20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c20c:	1c59      	adds	r1, r3, #1
 800c20e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c210:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c214:	b2d2      	uxtb	r2, r2
 800c216:	701a      	strb	r2, [r3, #0]
 800c218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c21a:	09db      	lsrs	r3, r3, #7
 800c21c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c220:	2b7f      	cmp	r3, #127	; 0x7f
 800c222:	d8f0      	bhi.n	800c206 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 800c224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c226:	1c5a      	adds	r2, r3, #1
 800c228:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c22a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c22c:	b2d2      	uxtb	r2, r2
 800c22e:	701a      	strb	r2, [r3, #0]
 800c230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c232:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	627b      	str	r3, [r7, #36]	; 0x24
 800c238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c23a:	623b      	str	r3, [r7, #32]
 800c23c:	e00b      	b.n	800c256 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 800c23e:	6a3b      	ldr	r3, [r7, #32]
 800c240:	b2da      	uxtb	r2, r3
 800c242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c244:	1c59      	adds	r1, r3, #1
 800c246:	6279      	str	r1, [r7, #36]	; 0x24
 800c248:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c24c:	b2d2      	uxtb	r2, r2
 800c24e:	701a      	strb	r2, [r3, #0]
 800c250:	6a3b      	ldr	r3, [r7, #32]
 800c252:	09db      	lsrs	r3, r3, #7
 800c254:	623b      	str	r3, [r7, #32]
 800c256:	6a3b      	ldr	r3, [r7, #32]
 800c258:	2b7f      	cmp	r3, #127	; 0x7f
 800c25a:	d8f0      	bhi.n	800c23e <SEGGER_SYSVIEW_RecordU32x5+0x112>
 800c25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25e:	1c5a      	adds	r2, r3, #1
 800c260:	627a      	str	r2, [r7, #36]	; 0x24
 800c262:	6a3a      	ldr	r2, [r7, #32]
 800c264:	b2d2      	uxtb	r2, r2
 800c266:	701a      	strb	r2, [r3, #0]
 800c268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c26c:	68fa      	ldr	r2, [r7, #12]
 800c26e:	6979      	ldr	r1, [r7, #20]
 800c270:	69b8      	ldr	r0, [r7, #24]
 800c272:	f7ff fcb9 	bl	800bbe8 <_SendPacket>
  RECORD_END();
 800c276:	69fb      	ldr	r3, [r7, #28]
 800c278:	f383 8811 	msr	BASEPRI, r3
}
 800c27c:	bf00      	nop
 800c27e:	3748      	adds	r7, #72	; 0x48
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}
 800c284:	20013c04 	.word	0x20013c04

0800c288 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800c288:	b580      	push	{r7, lr}
 800c28a:	b08c      	sub	sp, #48	; 0x30
 800c28c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800c28e:	4b58      	ldr	r3, [pc, #352]	; (800c3f0 <SEGGER_SYSVIEW_Start+0x168>)
 800c290:	2201      	movs	r2, #1
 800c292:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800c294:	f3ef 8311 	mrs	r3, BASEPRI
 800c298:	f04f 0120 	mov.w	r1, #32
 800c29c:	f381 8811 	msr	BASEPRI, r1
 800c2a0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800c2a2:	4b53      	ldr	r3, [pc, #332]	; (800c3f0 <SEGGER_SYSVIEW_Start+0x168>)
 800c2a4:	785b      	ldrb	r3, [r3, #1]
 800c2a6:	220a      	movs	r2, #10
 800c2a8:	4952      	ldr	r1, [pc, #328]	; (800c3f4 <SEGGER_SYSVIEW_Start+0x16c>)
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7f3 ffb0 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800c2b6:	200a      	movs	r0, #10
 800c2b8:	f7ff fd7c 	bl	800bdb4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c2bc:	f3ef 8311 	mrs	r3, BASEPRI
 800c2c0:	f04f 0120 	mov.w	r1, #32
 800c2c4:	f381 8811 	msr	BASEPRI, r1
 800c2c8:	60bb      	str	r3, [r7, #8]
 800c2ca:	484b      	ldr	r0, [pc, #300]	; (800c3f8 <SEGGER_SYSVIEW_Start+0x170>)
 800c2cc:	f7ff fb9d 	bl	800ba0a <_PreparePacket>
 800c2d0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2da:	4b45      	ldr	r3, [pc, #276]	; (800c3f0 <SEGGER_SYSVIEW_Start+0x168>)
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2e0:	e00b      	b.n	800c2fa <SEGGER_SYSVIEW_Start+0x72>
 800c2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e4:	b2da      	uxtb	r2, r3
 800c2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e8:	1c59      	adds	r1, r3, #1
 800c2ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c2ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c2f0:	b2d2      	uxtb	r2, r2
 800c2f2:	701a      	strb	r2, [r3, #0]
 800c2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f6:	09db      	lsrs	r3, r3, #7
 800c2f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fc:	2b7f      	cmp	r3, #127	; 0x7f
 800c2fe:	d8f0      	bhi.n	800c2e2 <SEGGER_SYSVIEW_Start+0x5a>
 800c300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c302:	1c5a      	adds	r2, r3, #1
 800c304:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c308:	b2d2      	uxtb	r2, r2
 800c30a:	701a      	strb	r2, [r3, #0]
 800c30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	627b      	str	r3, [r7, #36]	; 0x24
 800c314:	4b36      	ldr	r3, [pc, #216]	; (800c3f0 <SEGGER_SYSVIEW_Start+0x168>)
 800c316:	689b      	ldr	r3, [r3, #8]
 800c318:	623b      	str	r3, [r7, #32]
 800c31a:	e00b      	b.n	800c334 <SEGGER_SYSVIEW_Start+0xac>
 800c31c:	6a3b      	ldr	r3, [r7, #32]
 800c31e:	b2da      	uxtb	r2, r3
 800c320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c322:	1c59      	adds	r1, r3, #1
 800c324:	6279      	str	r1, [r7, #36]	; 0x24
 800c326:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c32a:	b2d2      	uxtb	r2, r2
 800c32c:	701a      	strb	r2, [r3, #0]
 800c32e:	6a3b      	ldr	r3, [r7, #32]
 800c330:	09db      	lsrs	r3, r3, #7
 800c332:	623b      	str	r3, [r7, #32]
 800c334:	6a3b      	ldr	r3, [r7, #32]
 800c336:	2b7f      	cmp	r3, #127	; 0x7f
 800c338:	d8f0      	bhi.n	800c31c <SEGGER_SYSVIEW_Start+0x94>
 800c33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33c:	1c5a      	adds	r2, r3, #1
 800c33e:	627a      	str	r2, [r7, #36]	; 0x24
 800c340:	6a3a      	ldr	r2, [r7, #32]
 800c342:	b2d2      	uxtb	r2, r2
 800c344:	701a      	strb	r2, [r3, #0]
 800c346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c348:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	61fb      	str	r3, [r7, #28]
 800c34e:	4b28      	ldr	r3, [pc, #160]	; (800c3f0 <SEGGER_SYSVIEW_Start+0x168>)
 800c350:	691b      	ldr	r3, [r3, #16]
 800c352:	61bb      	str	r3, [r7, #24]
 800c354:	e00b      	b.n	800c36e <SEGGER_SYSVIEW_Start+0xe6>
 800c356:	69bb      	ldr	r3, [r7, #24]
 800c358:	b2da      	uxtb	r2, r3
 800c35a:	69fb      	ldr	r3, [r7, #28]
 800c35c:	1c59      	adds	r1, r3, #1
 800c35e:	61f9      	str	r1, [r7, #28]
 800c360:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c364:	b2d2      	uxtb	r2, r2
 800c366:	701a      	strb	r2, [r3, #0]
 800c368:	69bb      	ldr	r3, [r7, #24]
 800c36a:	09db      	lsrs	r3, r3, #7
 800c36c:	61bb      	str	r3, [r7, #24]
 800c36e:	69bb      	ldr	r3, [r7, #24]
 800c370:	2b7f      	cmp	r3, #127	; 0x7f
 800c372:	d8f0      	bhi.n	800c356 <SEGGER_SYSVIEW_Start+0xce>
 800c374:	69fb      	ldr	r3, [r7, #28]
 800c376:	1c5a      	adds	r2, r3, #1
 800c378:	61fa      	str	r2, [r7, #28]
 800c37a:	69ba      	ldr	r2, [r7, #24]
 800c37c:	b2d2      	uxtb	r2, r2
 800c37e:	701a      	strb	r2, [r3, #0]
 800c380:	69fb      	ldr	r3, [r7, #28]
 800c382:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	617b      	str	r3, [r7, #20]
 800c388:	2300      	movs	r3, #0
 800c38a:	613b      	str	r3, [r7, #16]
 800c38c:	e00b      	b.n	800c3a6 <SEGGER_SYSVIEW_Start+0x11e>
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	b2da      	uxtb	r2, r3
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	1c59      	adds	r1, r3, #1
 800c396:	6179      	str	r1, [r7, #20]
 800c398:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c39c:	b2d2      	uxtb	r2, r2
 800c39e:	701a      	strb	r2, [r3, #0]
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	09db      	lsrs	r3, r3, #7
 800c3a4:	613b      	str	r3, [r7, #16]
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	2b7f      	cmp	r3, #127	; 0x7f
 800c3aa:	d8f0      	bhi.n	800c38e <SEGGER_SYSVIEW_Start+0x106>
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	1c5a      	adds	r2, r3, #1
 800c3b0:	617a      	str	r2, [r7, #20]
 800c3b2:	693a      	ldr	r2, [r7, #16]
 800c3b4:	b2d2      	uxtb	r2, r2
 800c3b6:	701a      	strb	r2, [r3, #0]
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800c3bc:	2218      	movs	r2, #24
 800c3be:	6839      	ldr	r1, [r7, #0]
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f7ff fc11 	bl	800bbe8 <_SendPacket>
      RECORD_END();
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800c3cc:	4b08      	ldr	r3, [pc, #32]	; (800c3f0 <SEGGER_SYSVIEW_Start+0x168>)
 800c3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d002      	beq.n	800c3da <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800c3d4:	4b06      	ldr	r3, [pc, #24]	; (800c3f0 <SEGGER_SYSVIEW_Start+0x168>)
 800c3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800c3da:	f000 f9c7 	bl	800c76c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800c3de:	f000 f9b1 	bl	800c744 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800c3e2:	f000 fbff 	bl	800cbe4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800c3e6:	bf00      	nop
 800c3e8:	3730      	adds	r7, #48	; 0x30
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}
 800c3ee:	bf00      	nop
 800c3f0:	20013bd4 	.word	0x20013bd4
 800c3f4:	08010cb0 	.word	0x08010cb0
 800c3f8:	20013c04 	.word	0x20013c04

0800c3fc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b082      	sub	sp, #8
 800c400:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c402:	f3ef 8311 	mrs	r3, BASEPRI
 800c406:	f04f 0120 	mov.w	r1, #32
 800c40a:	f381 8811 	msr	BASEPRI, r1
 800c40e:	607b      	str	r3, [r7, #4]
 800c410:	480b      	ldr	r0, [pc, #44]	; (800c440 <SEGGER_SYSVIEW_Stop+0x44>)
 800c412:	f7ff fafa 	bl	800ba0a <_PreparePacket>
 800c416:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800c418:	4b0a      	ldr	r3, [pc, #40]	; (800c444 <SEGGER_SYSVIEW_Stop+0x48>)
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d007      	beq.n	800c430 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800c420:	220b      	movs	r2, #11
 800c422:	6839      	ldr	r1, [r7, #0]
 800c424:	6838      	ldr	r0, [r7, #0]
 800c426:	f7ff fbdf 	bl	800bbe8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800c42a:	4b06      	ldr	r3, [pc, #24]	; (800c444 <SEGGER_SYSVIEW_Stop+0x48>)
 800c42c:	2200      	movs	r2, #0
 800c42e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f383 8811 	msr	BASEPRI, r3
}
 800c436:	bf00      	nop
 800c438:	3708      	adds	r7, #8
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
 800c43e:	bf00      	nop
 800c440:	20013c04 	.word	0x20013c04
 800c444:	20013bd4 	.word	0x20013bd4

0800c448 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800c448:	b580      	push	{r7, lr}
 800c44a:	b08c      	sub	sp, #48	; 0x30
 800c44c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c44e:	f3ef 8311 	mrs	r3, BASEPRI
 800c452:	f04f 0120 	mov.w	r1, #32
 800c456:	f381 8811 	msr	BASEPRI, r1
 800c45a:	60fb      	str	r3, [r7, #12]
 800c45c:	4845      	ldr	r0, [pc, #276]	; (800c574 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800c45e:	f7ff fad4 	bl	800ba0a <_PreparePacket>
 800c462:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c46c:	4b42      	ldr	r3, [pc, #264]	; (800c578 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	62bb      	str	r3, [r7, #40]	; 0x28
 800c472:	e00b      	b.n	800c48c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800c474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c476:	b2da      	uxtb	r2, r3
 800c478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c47a:	1c59      	adds	r1, r3, #1
 800c47c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c47e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c482:	b2d2      	uxtb	r2, r2
 800c484:	701a      	strb	r2, [r3, #0]
 800c486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c488:	09db      	lsrs	r3, r3, #7
 800c48a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c48e:	2b7f      	cmp	r3, #127	; 0x7f
 800c490:	d8f0      	bhi.n	800c474 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800c492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c494:	1c5a      	adds	r2, r3, #1
 800c496:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c49a:	b2d2      	uxtb	r2, r2
 800c49c:	701a      	strb	r2, [r3, #0]
 800c49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	627b      	str	r3, [r7, #36]	; 0x24
 800c4a6:	4b34      	ldr	r3, [pc, #208]	; (800c578 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c4a8:	689b      	ldr	r3, [r3, #8]
 800c4aa:	623b      	str	r3, [r7, #32]
 800c4ac:	e00b      	b.n	800c4c6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800c4ae:	6a3b      	ldr	r3, [r7, #32]
 800c4b0:	b2da      	uxtb	r2, r3
 800c4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b4:	1c59      	adds	r1, r3, #1
 800c4b6:	6279      	str	r1, [r7, #36]	; 0x24
 800c4b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c4bc:	b2d2      	uxtb	r2, r2
 800c4be:	701a      	strb	r2, [r3, #0]
 800c4c0:	6a3b      	ldr	r3, [r7, #32]
 800c4c2:	09db      	lsrs	r3, r3, #7
 800c4c4:	623b      	str	r3, [r7, #32]
 800c4c6:	6a3b      	ldr	r3, [r7, #32]
 800c4c8:	2b7f      	cmp	r3, #127	; 0x7f
 800c4ca:	d8f0      	bhi.n	800c4ae <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800c4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ce:	1c5a      	adds	r2, r3, #1
 800c4d0:	627a      	str	r2, [r7, #36]	; 0x24
 800c4d2:	6a3a      	ldr	r2, [r7, #32]
 800c4d4:	b2d2      	uxtb	r2, r2
 800c4d6:	701a      	strb	r2, [r3, #0]
 800c4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	61fb      	str	r3, [r7, #28]
 800c4e0:	4b25      	ldr	r3, [pc, #148]	; (800c578 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c4e2:	691b      	ldr	r3, [r3, #16]
 800c4e4:	61bb      	str	r3, [r7, #24]
 800c4e6:	e00b      	b.n	800c500 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800c4e8:	69bb      	ldr	r3, [r7, #24]
 800c4ea:	b2da      	uxtb	r2, r3
 800c4ec:	69fb      	ldr	r3, [r7, #28]
 800c4ee:	1c59      	adds	r1, r3, #1
 800c4f0:	61f9      	str	r1, [r7, #28]
 800c4f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c4f6:	b2d2      	uxtb	r2, r2
 800c4f8:	701a      	strb	r2, [r3, #0]
 800c4fa:	69bb      	ldr	r3, [r7, #24]
 800c4fc:	09db      	lsrs	r3, r3, #7
 800c4fe:	61bb      	str	r3, [r7, #24]
 800c500:	69bb      	ldr	r3, [r7, #24]
 800c502:	2b7f      	cmp	r3, #127	; 0x7f
 800c504:	d8f0      	bhi.n	800c4e8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800c506:	69fb      	ldr	r3, [r7, #28]
 800c508:	1c5a      	adds	r2, r3, #1
 800c50a:	61fa      	str	r2, [r7, #28]
 800c50c:	69ba      	ldr	r2, [r7, #24]
 800c50e:	b2d2      	uxtb	r2, r2
 800c510:	701a      	strb	r2, [r3, #0]
 800c512:	69fb      	ldr	r3, [r7, #28]
 800c514:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	617b      	str	r3, [r7, #20]
 800c51a:	2300      	movs	r3, #0
 800c51c:	613b      	str	r3, [r7, #16]
 800c51e:	e00b      	b.n	800c538 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	b2da      	uxtb	r2, r3
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	1c59      	adds	r1, r3, #1
 800c528:	6179      	str	r1, [r7, #20]
 800c52a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c52e:	b2d2      	uxtb	r2, r2
 800c530:	701a      	strb	r2, [r3, #0]
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	09db      	lsrs	r3, r3, #7
 800c536:	613b      	str	r3, [r7, #16]
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	2b7f      	cmp	r3, #127	; 0x7f
 800c53c:	d8f0      	bhi.n	800c520 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	1c5a      	adds	r2, r3, #1
 800c542:	617a      	str	r2, [r7, #20]
 800c544:	693a      	ldr	r2, [r7, #16]
 800c546:	b2d2      	uxtb	r2, r2
 800c548:	701a      	strb	r2, [r3, #0]
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800c54e:	2218      	movs	r2, #24
 800c550:	6879      	ldr	r1, [r7, #4]
 800c552:	68b8      	ldr	r0, [r7, #8]
 800c554:	f7ff fb48 	bl	800bbe8 <_SendPacket>
  RECORD_END();
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800c55e:	4b06      	ldr	r3, [pc, #24]	; (800c578 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c562:	2b00      	cmp	r3, #0
 800c564:	d002      	beq.n	800c56c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800c566:	4b04      	ldr	r3, [pc, #16]	; (800c578 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c56a:	4798      	blx	r3
  }
}
 800c56c:	bf00      	nop
 800c56e:	3730      	adds	r7, #48	; 0x30
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	20013c04 	.word	0x20013c04
 800c578:	20013bd4 	.word	0x20013bd4

0800c57c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b092      	sub	sp, #72	; 0x48
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800c584:	f3ef 8311 	mrs	r3, BASEPRI
 800c588:	f04f 0120 	mov.w	r1, #32
 800c58c:	f381 8811 	msr	BASEPRI, r1
 800c590:	617b      	str	r3, [r7, #20]
 800c592:	486a      	ldr	r0, [pc, #424]	; (800c73c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800c594:	f7ff fa39 	bl	800ba0a <_PreparePacket>
 800c598:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	647b      	str	r3, [r7, #68]	; 0x44
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681a      	ldr	r2, [r3, #0]
 800c5a6:	4b66      	ldr	r3, [pc, #408]	; (800c740 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800c5a8:	691b      	ldr	r3, [r3, #16]
 800c5aa:	1ad3      	subs	r3, r2, r3
 800c5ac:	643b      	str	r3, [r7, #64]	; 0x40
 800c5ae:	e00b      	b.n	800c5c8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800c5b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5b2:	b2da      	uxtb	r2, r3
 800c5b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5b6:	1c59      	adds	r1, r3, #1
 800c5b8:	6479      	str	r1, [r7, #68]	; 0x44
 800c5ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c5be:	b2d2      	uxtb	r2, r2
 800c5c0:	701a      	strb	r2, [r3, #0]
 800c5c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5c4:	09db      	lsrs	r3, r3, #7
 800c5c6:	643b      	str	r3, [r7, #64]	; 0x40
 800c5c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5ca:	2b7f      	cmp	r3, #127	; 0x7f
 800c5cc:	d8f0      	bhi.n	800c5b0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800c5ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5d0:	1c5a      	adds	r2, r3, #1
 800c5d2:	647a      	str	r2, [r7, #68]	; 0x44
 800c5d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c5d6:	b2d2      	uxtb	r2, r2
 800c5d8:	701a      	strb	r2, [r3, #0]
 800c5da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	689b      	ldr	r3, [r3, #8]
 800c5e6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c5e8:	e00b      	b.n	800c602 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800c5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ec:	b2da      	uxtb	r2, r3
 800c5ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5f0:	1c59      	adds	r1, r3, #1
 800c5f2:	63f9      	str	r1, [r7, #60]	; 0x3c
 800c5f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c5f8:	b2d2      	uxtb	r2, r2
 800c5fa:	701a      	strb	r2, [r3, #0]
 800c5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5fe:	09db      	lsrs	r3, r3, #7
 800c600:	63bb      	str	r3, [r7, #56]	; 0x38
 800c602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c604:	2b7f      	cmp	r3, #127	; 0x7f
 800c606:	d8f0      	bhi.n	800c5ea <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800c608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c60a:	1c5a      	adds	r2, r3, #1
 800c60c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c60e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c610:	b2d2      	uxtb	r2, r2
 800c612:	701a      	strb	r2, [r3, #0]
 800c614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c616:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	2220      	movs	r2, #32
 800c61e:	4619      	mov	r1, r3
 800c620:	68f8      	ldr	r0, [r7, #12]
 800c622:	f7ff f9a5 	bl	800b970 <_EncodeStr>
 800c626:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800c628:	2209      	movs	r2, #9
 800c62a:	68f9      	ldr	r1, [r7, #12]
 800c62c:	6938      	ldr	r0, [r7, #16]
 800c62e:	f7ff fadb 	bl	800bbe8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	637b      	str	r3, [r7, #52]	; 0x34
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681a      	ldr	r2, [r3, #0]
 800c63e:	4b40      	ldr	r3, [pc, #256]	; (800c740 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800c640:	691b      	ldr	r3, [r3, #16]
 800c642:	1ad3      	subs	r3, r2, r3
 800c644:	633b      	str	r3, [r7, #48]	; 0x30
 800c646:	e00b      	b.n	800c660 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800c648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64a:	b2da      	uxtb	r2, r3
 800c64c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c64e:	1c59      	adds	r1, r3, #1
 800c650:	6379      	str	r1, [r7, #52]	; 0x34
 800c652:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c656:	b2d2      	uxtb	r2, r2
 800c658:	701a      	strb	r2, [r3, #0]
 800c65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65c:	09db      	lsrs	r3, r3, #7
 800c65e:	633b      	str	r3, [r7, #48]	; 0x30
 800c660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c662:	2b7f      	cmp	r3, #127	; 0x7f
 800c664:	d8f0      	bhi.n	800c648 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800c666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c668:	1c5a      	adds	r2, r3, #1
 800c66a:	637a      	str	r2, [r7, #52]	; 0x34
 800c66c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c66e:	b2d2      	uxtb	r2, r2
 800c670:	701a      	strb	r2, [r3, #0]
 800c672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c674:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	68db      	ldr	r3, [r3, #12]
 800c67e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c680:	e00b      	b.n	800c69a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800c682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c684:	b2da      	uxtb	r2, r3
 800c686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c688:	1c59      	adds	r1, r3, #1
 800c68a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c68c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c690:	b2d2      	uxtb	r2, r2
 800c692:	701a      	strb	r2, [r3, #0]
 800c694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c696:	09db      	lsrs	r3, r3, #7
 800c698:	62bb      	str	r3, [r7, #40]	; 0x28
 800c69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c69c:	2b7f      	cmp	r3, #127	; 0x7f
 800c69e:	d8f0      	bhi.n	800c682 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800c6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a2:	1c5a      	adds	r2, r3, #1
 800c6a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c6a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6a8:	b2d2      	uxtb	r2, r2
 800c6aa:	701a      	strb	r2, [r3, #0]
 800c6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	627b      	str	r3, [r7, #36]	; 0x24
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	691b      	ldr	r3, [r3, #16]
 800c6b8:	623b      	str	r3, [r7, #32]
 800c6ba:	e00b      	b.n	800c6d4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800c6bc:	6a3b      	ldr	r3, [r7, #32]
 800c6be:	b2da      	uxtb	r2, r3
 800c6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c2:	1c59      	adds	r1, r3, #1
 800c6c4:	6279      	str	r1, [r7, #36]	; 0x24
 800c6c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c6ca:	b2d2      	uxtb	r2, r2
 800c6cc:	701a      	strb	r2, [r3, #0]
 800c6ce:	6a3b      	ldr	r3, [r7, #32]
 800c6d0:	09db      	lsrs	r3, r3, #7
 800c6d2:	623b      	str	r3, [r7, #32]
 800c6d4:	6a3b      	ldr	r3, [r7, #32]
 800c6d6:	2b7f      	cmp	r3, #127	; 0x7f
 800c6d8:	d8f0      	bhi.n	800c6bc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800c6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6dc:	1c5a      	adds	r2, r3, #1
 800c6de:	627a      	str	r2, [r7, #36]	; 0x24
 800c6e0:	6a3a      	ldr	r2, [r7, #32]
 800c6e2:	b2d2      	uxtb	r2, r2
 800c6e4:	701a      	strb	r2, [r3, #0]
 800c6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	61fb      	str	r3, [r7, #28]
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	61bb      	str	r3, [r7, #24]
 800c6f2:	e00b      	b.n	800c70c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800c6f4:	69bb      	ldr	r3, [r7, #24]
 800c6f6:	b2da      	uxtb	r2, r3
 800c6f8:	69fb      	ldr	r3, [r7, #28]
 800c6fa:	1c59      	adds	r1, r3, #1
 800c6fc:	61f9      	str	r1, [r7, #28]
 800c6fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c702:	b2d2      	uxtb	r2, r2
 800c704:	701a      	strb	r2, [r3, #0]
 800c706:	69bb      	ldr	r3, [r7, #24]
 800c708:	09db      	lsrs	r3, r3, #7
 800c70a:	61bb      	str	r3, [r7, #24]
 800c70c:	69bb      	ldr	r3, [r7, #24]
 800c70e:	2b7f      	cmp	r3, #127	; 0x7f
 800c710:	d8f0      	bhi.n	800c6f4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800c712:	69fb      	ldr	r3, [r7, #28]
 800c714:	1c5a      	adds	r2, r3, #1
 800c716:	61fa      	str	r2, [r7, #28]
 800c718:	69ba      	ldr	r2, [r7, #24]
 800c71a:	b2d2      	uxtb	r2, r2
 800c71c:	701a      	strb	r2, [r3, #0]
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800c722:	2215      	movs	r2, #21
 800c724:	68f9      	ldr	r1, [r7, #12]
 800c726:	6938      	ldr	r0, [r7, #16]
 800c728:	f7ff fa5e 	bl	800bbe8 <_SendPacket>
  RECORD_END();
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	f383 8811 	msr	BASEPRI, r3
}
 800c732:	bf00      	nop
 800c734:	3748      	adds	r7, #72	; 0x48
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
 800c73a:	bf00      	nop
 800c73c:	20013c04 	.word	0x20013c04
 800c740:	20013bd4 	.word	0x20013bd4

0800c744 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800c744:	b580      	push	{r7, lr}
 800c746:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800c748:	4b07      	ldr	r3, [pc, #28]	; (800c768 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c74a:	6a1b      	ldr	r3, [r3, #32]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d008      	beq.n	800c762 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800c750:	4b05      	ldr	r3, [pc, #20]	; (800c768 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c752:	6a1b      	ldr	r3, [r3, #32]
 800c754:	685b      	ldr	r3, [r3, #4]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d003      	beq.n	800c762 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800c75a:	4b03      	ldr	r3, [pc, #12]	; (800c768 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c75c:	6a1b      	ldr	r3, [r3, #32]
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	4798      	blx	r3
  }
}
 800c762:	bf00      	nop
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	20013bd4 	.word	0x20013bd4

0800c76c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800c76c:	b590      	push	{r4, r7, lr}
 800c76e:	b083      	sub	sp, #12
 800c770:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800c772:	4b15      	ldr	r3, [pc, #84]	; (800c7c8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c774:	6a1b      	ldr	r3, [r3, #32]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d01a      	beq.n	800c7b0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800c77a:	4b13      	ldr	r3, [pc, #76]	; (800c7c8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c77c:	6a1b      	ldr	r3, [r3, #32]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d015      	beq.n	800c7b0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800c784:	4b10      	ldr	r3, [pc, #64]	; (800c7c8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c786:	6a1b      	ldr	r3, [r3, #32]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	4798      	blx	r3
 800c78c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800c790:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800c792:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c796:	f04f 0200 	mov.w	r2, #0
 800c79a:	f04f 0300 	mov.w	r3, #0
 800c79e:	000a      	movs	r2, r1
 800c7a0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800c7a2:	4613      	mov	r3, r2
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	4621      	mov	r1, r4
 800c7a8:	200d      	movs	r0, #13
 800c7aa:	f7ff fb5d 	bl	800be68 <SEGGER_SYSVIEW_RecordU32x2>
 800c7ae:	e006      	b.n	800c7be <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800c7b0:	4b06      	ldr	r3, [pc, #24]	; (800c7cc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	200c      	movs	r0, #12
 800c7b8:	f7ff fb1a 	bl	800bdf0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800c7bc:	bf00      	nop
 800c7be:	bf00      	nop
 800c7c0:	370c      	adds	r7, #12
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd90      	pop	{r4, r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	20013bd4 	.word	0x20013bd4
 800c7cc:	e0001004 	.word	0xe0001004

0800c7d0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b086      	sub	sp, #24
 800c7d4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c7d6:	f3ef 8311 	mrs	r3, BASEPRI
 800c7da:	f04f 0120 	mov.w	r1, #32
 800c7de:	f381 8811 	msr	BASEPRI, r1
 800c7e2:	60fb      	str	r3, [r7, #12]
 800c7e4:	4819      	ldr	r0, [pc, #100]	; (800c84c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800c7e6:	f7ff f910 	bl	800ba0a <_PreparePacket>
 800c7ea:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800c7f0:	4b17      	ldr	r3, [pc, #92]	; (800c850 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7f8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	617b      	str	r3, [r7, #20]
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	613b      	str	r3, [r7, #16]
 800c802:	e00b      	b.n	800c81c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	b2da      	uxtb	r2, r3
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	1c59      	adds	r1, r3, #1
 800c80c:	6179      	str	r1, [r7, #20]
 800c80e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c812:	b2d2      	uxtb	r2, r2
 800c814:	701a      	strb	r2, [r3, #0]
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	09db      	lsrs	r3, r3, #7
 800c81a:	613b      	str	r3, [r7, #16]
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	2b7f      	cmp	r3, #127	; 0x7f
 800c820:	d8f0      	bhi.n	800c804 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	1c5a      	adds	r2, r3, #1
 800c826:	617a      	str	r2, [r7, #20]
 800c828:	693a      	ldr	r2, [r7, #16]
 800c82a:	b2d2      	uxtb	r2, r2
 800c82c:	701a      	strb	r2, [r3, #0]
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800c832:	2202      	movs	r2, #2
 800c834:	6879      	ldr	r1, [r7, #4]
 800c836:	68b8      	ldr	r0, [r7, #8]
 800c838:	f7ff f9d6 	bl	800bbe8 <_SendPacket>
  RECORD_END();
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f383 8811 	msr	BASEPRI, r3
}
 800c842:	bf00      	nop
 800c844:	3718      	adds	r7, #24
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	20013c04 	.word	0x20013c04
 800c850:	e000ed04 	.word	0xe000ed04

0800c854 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c85a:	f3ef 8311 	mrs	r3, BASEPRI
 800c85e:	f04f 0120 	mov.w	r1, #32
 800c862:	f381 8811 	msr	BASEPRI, r1
 800c866:	607b      	str	r3, [r7, #4]
 800c868:	4807      	ldr	r0, [pc, #28]	; (800c888 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800c86a:	f7ff f8ce 	bl	800ba0a <_PreparePacket>
 800c86e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800c870:	2203      	movs	r2, #3
 800c872:	6839      	ldr	r1, [r7, #0]
 800c874:	6838      	ldr	r0, [r7, #0]
 800c876:	f7ff f9b7 	bl	800bbe8 <_SendPacket>
  RECORD_END();
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f383 8811 	msr	BASEPRI, r3
}
 800c880:	bf00      	nop
 800c882:	3708      	adds	r7, #8
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}
 800c888:	20013c04 	.word	0x20013c04

0800c88c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c892:	f3ef 8311 	mrs	r3, BASEPRI
 800c896:	f04f 0120 	mov.w	r1, #32
 800c89a:	f381 8811 	msr	BASEPRI, r1
 800c89e:	607b      	str	r3, [r7, #4]
 800c8a0:	4807      	ldr	r0, [pc, #28]	; (800c8c0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800c8a2:	f7ff f8b2 	bl	800ba0a <_PreparePacket>
 800c8a6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800c8a8:	2212      	movs	r2, #18
 800c8aa:	6839      	ldr	r1, [r7, #0]
 800c8ac:	6838      	ldr	r0, [r7, #0]
 800c8ae:	f7ff f99b 	bl	800bbe8 <_SendPacket>
  RECORD_END();
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f383 8811 	msr	BASEPRI, r3
}
 800c8b8:	bf00      	nop
 800c8ba:	3708      	adds	r7, #8
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	20013c04 	.word	0x20013c04

0800c8c4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b082      	sub	sp, #8
 800c8c8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c8ca:	f3ef 8311 	mrs	r3, BASEPRI
 800c8ce:	f04f 0120 	mov.w	r1, #32
 800c8d2:	f381 8811 	msr	BASEPRI, r1
 800c8d6:	607b      	str	r3, [r7, #4]
 800c8d8:	4807      	ldr	r0, [pc, #28]	; (800c8f8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800c8da:	f7ff f896 	bl	800ba0a <_PreparePacket>
 800c8de:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800c8e0:	2211      	movs	r2, #17
 800c8e2:	6839      	ldr	r1, [r7, #0]
 800c8e4:	6838      	ldr	r0, [r7, #0]
 800c8e6:	f7ff f97f 	bl	800bbe8 <_SendPacket>
  RECORD_END();
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f383 8811 	msr	BASEPRI, r3
}
 800c8f0:	bf00      	nop
 800c8f2:	3708      	adds	r7, #8
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	20013c04 	.word	0x20013c04

0800c8fc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b088      	sub	sp, #32
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c904:	f3ef 8311 	mrs	r3, BASEPRI
 800c908:	f04f 0120 	mov.w	r1, #32
 800c90c:	f381 8811 	msr	BASEPRI, r1
 800c910:	617b      	str	r3, [r7, #20]
 800c912:	4819      	ldr	r0, [pc, #100]	; (800c978 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800c914:	f7ff f879 	bl	800ba0a <_PreparePacket>
 800c918:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c91e:	4b17      	ldr	r3, [pc, #92]	; (800c97c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800c920:	691b      	ldr	r3, [r3, #16]
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	1ad3      	subs	r3, r2, r3
 800c926:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	61fb      	str	r3, [r7, #28]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	61bb      	str	r3, [r7, #24]
 800c930:	e00b      	b.n	800c94a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800c932:	69bb      	ldr	r3, [r7, #24]
 800c934:	b2da      	uxtb	r2, r3
 800c936:	69fb      	ldr	r3, [r7, #28]
 800c938:	1c59      	adds	r1, r3, #1
 800c93a:	61f9      	str	r1, [r7, #28]
 800c93c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c940:	b2d2      	uxtb	r2, r2
 800c942:	701a      	strb	r2, [r3, #0]
 800c944:	69bb      	ldr	r3, [r7, #24]
 800c946:	09db      	lsrs	r3, r3, #7
 800c948:	61bb      	str	r3, [r7, #24]
 800c94a:	69bb      	ldr	r3, [r7, #24]
 800c94c:	2b7f      	cmp	r3, #127	; 0x7f
 800c94e:	d8f0      	bhi.n	800c932 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800c950:	69fb      	ldr	r3, [r7, #28]
 800c952:	1c5a      	adds	r2, r3, #1
 800c954:	61fa      	str	r2, [r7, #28]
 800c956:	69ba      	ldr	r2, [r7, #24]
 800c958:	b2d2      	uxtb	r2, r2
 800c95a:	701a      	strb	r2, [r3, #0]
 800c95c:	69fb      	ldr	r3, [r7, #28]
 800c95e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800c960:	2208      	movs	r2, #8
 800c962:	68f9      	ldr	r1, [r7, #12]
 800c964:	6938      	ldr	r0, [r7, #16]
 800c966:	f7ff f93f 	bl	800bbe8 <_SendPacket>
  RECORD_END();
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	f383 8811 	msr	BASEPRI, r3
}
 800c970:	bf00      	nop
 800c972:	3720      	adds	r7, #32
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}
 800c978:	20013c04 	.word	0x20013c04
 800c97c:	20013bd4 	.word	0x20013bd4

0800c980 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800c980:	b580      	push	{r7, lr}
 800c982:	b088      	sub	sp, #32
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c988:	f3ef 8311 	mrs	r3, BASEPRI
 800c98c:	f04f 0120 	mov.w	r1, #32
 800c990:	f381 8811 	msr	BASEPRI, r1
 800c994:	617b      	str	r3, [r7, #20]
 800c996:	4819      	ldr	r0, [pc, #100]	; (800c9fc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800c998:	f7ff f837 	bl	800ba0a <_PreparePacket>
 800c99c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c9a2:	4b17      	ldr	r3, [pc, #92]	; (800ca00 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800c9a4:	691b      	ldr	r3, [r3, #16]
 800c9a6:	687a      	ldr	r2, [r7, #4]
 800c9a8:	1ad3      	subs	r3, r2, r3
 800c9aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	61fb      	str	r3, [r7, #28]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	61bb      	str	r3, [r7, #24]
 800c9b4:	e00b      	b.n	800c9ce <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800c9b6:	69bb      	ldr	r3, [r7, #24]
 800c9b8:	b2da      	uxtb	r2, r3
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	1c59      	adds	r1, r3, #1
 800c9be:	61f9      	str	r1, [r7, #28]
 800c9c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c9c4:	b2d2      	uxtb	r2, r2
 800c9c6:	701a      	strb	r2, [r3, #0]
 800c9c8:	69bb      	ldr	r3, [r7, #24]
 800c9ca:	09db      	lsrs	r3, r3, #7
 800c9cc:	61bb      	str	r3, [r7, #24]
 800c9ce:	69bb      	ldr	r3, [r7, #24]
 800c9d0:	2b7f      	cmp	r3, #127	; 0x7f
 800c9d2:	d8f0      	bhi.n	800c9b6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800c9d4:	69fb      	ldr	r3, [r7, #28]
 800c9d6:	1c5a      	adds	r2, r3, #1
 800c9d8:	61fa      	str	r2, [r7, #28]
 800c9da:	69ba      	ldr	r2, [r7, #24]
 800c9dc:	b2d2      	uxtb	r2, r2
 800c9de:	701a      	strb	r2, [r3, #0]
 800c9e0:	69fb      	ldr	r3, [r7, #28]
 800c9e2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800c9e4:	2204      	movs	r2, #4
 800c9e6:	68f9      	ldr	r1, [r7, #12]
 800c9e8:	6938      	ldr	r0, [r7, #16]
 800c9ea:	f7ff f8fd 	bl	800bbe8 <_SendPacket>
  RECORD_END();
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	f383 8811 	msr	BASEPRI, r3
}
 800c9f4:	bf00      	nop
 800c9f6:	3720      	adds	r7, #32
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	20013c04 	.word	0x20013c04
 800ca00:	20013bd4 	.word	0x20013bd4

0800ca04 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b088      	sub	sp, #32
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ca0c:	f3ef 8311 	mrs	r3, BASEPRI
 800ca10:	f04f 0120 	mov.w	r1, #32
 800ca14:	f381 8811 	msr	BASEPRI, r1
 800ca18:	617b      	str	r3, [r7, #20]
 800ca1a:	4819      	ldr	r0, [pc, #100]	; (800ca80 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800ca1c:	f7fe fff5 	bl	800ba0a <_PreparePacket>
 800ca20:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800ca26:	4b17      	ldr	r3, [pc, #92]	; (800ca84 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800ca28:	691b      	ldr	r3, [r3, #16]
 800ca2a:	687a      	ldr	r2, [r7, #4]
 800ca2c:	1ad3      	subs	r3, r2, r3
 800ca2e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	61fb      	str	r3, [r7, #28]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	61bb      	str	r3, [r7, #24]
 800ca38:	e00b      	b.n	800ca52 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800ca3a:	69bb      	ldr	r3, [r7, #24]
 800ca3c:	b2da      	uxtb	r2, r3
 800ca3e:	69fb      	ldr	r3, [r7, #28]
 800ca40:	1c59      	adds	r1, r3, #1
 800ca42:	61f9      	str	r1, [r7, #28]
 800ca44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ca48:	b2d2      	uxtb	r2, r2
 800ca4a:	701a      	strb	r2, [r3, #0]
 800ca4c:	69bb      	ldr	r3, [r7, #24]
 800ca4e:	09db      	lsrs	r3, r3, #7
 800ca50:	61bb      	str	r3, [r7, #24]
 800ca52:	69bb      	ldr	r3, [r7, #24]
 800ca54:	2b7f      	cmp	r3, #127	; 0x7f
 800ca56:	d8f0      	bhi.n	800ca3a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800ca58:	69fb      	ldr	r3, [r7, #28]
 800ca5a:	1c5a      	adds	r2, r3, #1
 800ca5c:	61fa      	str	r2, [r7, #28]
 800ca5e:	69ba      	ldr	r2, [r7, #24]
 800ca60:	b2d2      	uxtb	r2, r2
 800ca62:	701a      	strb	r2, [r3, #0]
 800ca64:	69fb      	ldr	r3, [r7, #28]
 800ca66:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800ca68:	2206      	movs	r2, #6
 800ca6a:	68f9      	ldr	r1, [r7, #12]
 800ca6c:	6938      	ldr	r0, [r7, #16]
 800ca6e:	f7ff f8bb 	bl	800bbe8 <_SendPacket>
  RECORD_END();
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	f383 8811 	msr	BASEPRI, r3
}
 800ca78:	bf00      	nop
 800ca7a:	3720      	adds	r7, #32
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}
 800ca80:	20013c04 	.word	0x20013c04
 800ca84:	20013bd4 	.word	0x20013bd4

0800ca88 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800ca88:	b480      	push	{r7}
 800ca8a:	b083      	sub	sp, #12
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800ca90:	4b04      	ldr	r3, [pc, #16]	; (800caa4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800ca92:	691b      	ldr	r3, [r3, #16]
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	1ad3      	subs	r3, r2, r3
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	370c      	adds	r7, #12
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr
 800caa4:	20013bd4 	.word	0x20013bd4

0800caa8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b08c      	sub	sp, #48	; 0x30
 800caac:	af00      	add	r7, sp, #0
 800caae:	4603      	mov	r3, r0
 800cab0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800cab2:	4b3b      	ldr	r3, [pc, #236]	; (800cba0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d06d      	beq.n	800cb96 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800caba:	4b39      	ldr	r3, [pc, #228]	; (800cba0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800cac0:	2300      	movs	r3, #0
 800cac2:	62bb      	str	r3, [r7, #40]	; 0x28
 800cac4:	e008      	b.n	800cad8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800cac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac8:	691b      	ldr	r3, [r3, #16]
 800caca:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800cacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d007      	beq.n	800cae2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800cad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad4:	3301      	adds	r3, #1
 800cad6:	62bb      	str	r3, [r7, #40]	; 0x28
 800cad8:	79fb      	ldrb	r3, [r7, #7]
 800cada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cadc:	429a      	cmp	r2, r3
 800cade:	d3f2      	bcc.n	800cac6 <SEGGER_SYSVIEW_SendModule+0x1e>
 800cae0:	e000      	b.n	800cae4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800cae2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800cae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d055      	beq.n	800cb96 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800caea:	f3ef 8311 	mrs	r3, BASEPRI
 800caee:	f04f 0120 	mov.w	r1, #32
 800caf2:	f381 8811 	msr	BASEPRI, r1
 800caf6:	617b      	str	r3, [r7, #20]
 800caf8:	482a      	ldr	r0, [pc, #168]	; (800cba4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800cafa:	f7fe ff86 	bl	800ba0a <_PreparePacket>
 800cafe:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	627b      	str	r3, [r7, #36]	; 0x24
 800cb08:	79fb      	ldrb	r3, [r7, #7]
 800cb0a:	623b      	str	r3, [r7, #32]
 800cb0c:	e00b      	b.n	800cb26 <SEGGER_SYSVIEW_SendModule+0x7e>
 800cb0e:	6a3b      	ldr	r3, [r7, #32]
 800cb10:	b2da      	uxtb	r2, r3
 800cb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb14:	1c59      	adds	r1, r3, #1
 800cb16:	6279      	str	r1, [r7, #36]	; 0x24
 800cb18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cb1c:	b2d2      	uxtb	r2, r2
 800cb1e:	701a      	strb	r2, [r3, #0]
 800cb20:	6a3b      	ldr	r3, [r7, #32]
 800cb22:	09db      	lsrs	r3, r3, #7
 800cb24:	623b      	str	r3, [r7, #32]
 800cb26:	6a3b      	ldr	r3, [r7, #32]
 800cb28:	2b7f      	cmp	r3, #127	; 0x7f
 800cb2a:	d8f0      	bhi.n	800cb0e <SEGGER_SYSVIEW_SendModule+0x66>
 800cb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2e:	1c5a      	adds	r2, r3, #1
 800cb30:	627a      	str	r2, [r7, #36]	; 0x24
 800cb32:	6a3a      	ldr	r2, [r7, #32]
 800cb34:	b2d2      	uxtb	r2, r2
 800cb36:	701a      	strb	r2, [r3, #0]
 800cb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	61fb      	str	r3, [r7, #28]
 800cb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb42:	689b      	ldr	r3, [r3, #8]
 800cb44:	61bb      	str	r3, [r7, #24]
 800cb46:	e00b      	b.n	800cb60 <SEGGER_SYSVIEW_SendModule+0xb8>
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	b2da      	uxtb	r2, r3
 800cb4c:	69fb      	ldr	r3, [r7, #28]
 800cb4e:	1c59      	adds	r1, r3, #1
 800cb50:	61f9      	str	r1, [r7, #28]
 800cb52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cb56:	b2d2      	uxtb	r2, r2
 800cb58:	701a      	strb	r2, [r3, #0]
 800cb5a:	69bb      	ldr	r3, [r7, #24]
 800cb5c:	09db      	lsrs	r3, r3, #7
 800cb5e:	61bb      	str	r3, [r7, #24]
 800cb60:	69bb      	ldr	r3, [r7, #24]
 800cb62:	2b7f      	cmp	r3, #127	; 0x7f
 800cb64:	d8f0      	bhi.n	800cb48 <SEGGER_SYSVIEW_SendModule+0xa0>
 800cb66:	69fb      	ldr	r3, [r7, #28]
 800cb68:	1c5a      	adds	r2, r3, #1
 800cb6a:	61fa      	str	r2, [r7, #28]
 800cb6c:	69ba      	ldr	r2, [r7, #24]
 800cb6e:	b2d2      	uxtb	r2, r2
 800cb70:	701a      	strb	r2, [r3, #0]
 800cb72:	69fb      	ldr	r3, [r7, #28]
 800cb74:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	2280      	movs	r2, #128	; 0x80
 800cb7c:	4619      	mov	r1, r3
 800cb7e:	68f8      	ldr	r0, [r7, #12]
 800cb80:	f7fe fef6 	bl	800b970 <_EncodeStr>
 800cb84:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800cb86:	2216      	movs	r2, #22
 800cb88:	68f9      	ldr	r1, [r7, #12]
 800cb8a:	6938      	ldr	r0, [r7, #16]
 800cb8c:	f7ff f82c 	bl	800bbe8 <_SendPacket>
      RECORD_END();
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800cb96:	bf00      	nop
 800cb98:	3730      	adds	r7, #48	; 0x30
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	20013bfc 	.word	0x20013bfc
 800cba4:	20013c04 	.word	0x20013c04

0800cba8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800cbae:	4b0c      	ldr	r3, [pc, #48]	; (800cbe0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d00f      	beq.n	800cbd6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800cbb6:	4b0a      	ldr	r3, [pc, #40]	; (800cbe0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	68db      	ldr	r3, [r3, #12]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d002      	beq.n	800cbca <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	68db      	ldr	r3, [r3, #12]
 800cbc8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	691b      	ldr	r3, [r3, #16]
 800cbce:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d1f2      	bne.n	800cbbc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800cbd6:	bf00      	nop
 800cbd8:	3708      	adds	r7, #8
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	20013bfc 	.word	0x20013bfc

0800cbe4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b086      	sub	sp, #24
 800cbe8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800cbea:	f3ef 8311 	mrs	r3, BASEPRI
 800cbee:	f04f 0120 	mov.w	r1, #32
 800cbf2:	f381 8811 	msr	BASEPRI, r1
 800cbf6:	60fb      	str	r3, [r7, #12]
 800cbf8:	4817      	ldr	r0, [pc, #92]	; (800cc58 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800cbfa:	f7fe ff06 	bl	800ba0a <_PreparePacket>
 800cbfe:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	617b      	str	r3, [r7, #20]
 800cc08:	4b14      	ldr	r3, [pc, #80]	; (800cc5c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	613b      	str	r3, [r7, #16]
 800cc0e:	e00b      	b.n	800cc28 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	b2da      	uxtb	r2, r3
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	1c59      	adds	r1, r3, #1
 800cc18:	6179      	str	r1, [r7, #20]
 800cc1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cc1e:	b2d2      	uxtb	r2, r2
 800cc20:	701a      	strb	r2, [r3, #0]
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	09db      	lsrs	r3, r3, #7
 800cc26:	613b      	str	r3, [r7, #16]
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	2b7f      	cmp	r3, #127	; 0x7f
 800cc2c:	d8f0      	bhi.n	800cc10 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	1c5a      	adds	r2, r3, #1
 800cc32:	617a      	str	r2, [r7, #20]
 800cc34:	693a      	ldr	r2, [r7, #16]
 800cc36:	b2d2      	uxtb	r2, r2
 800cc38:	701a      	strb	r2, [r3, #0]
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800cc3e:	221b      	movs	r2, #27
 800cc40:	6879      	ldr	r1, [r7, #4]
 800cc42:	68b8      	ldr	r0, [r7, #8]
 800cc44:	f7fe ffd0 	bl	800bbe8 <_SendPacket>
  RECORD_END();
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	f383 8811 	msr	BASEPRI, r3
}
 800cc4e:	bf00      	nop
 800cc50:	3718      	adds	r7, #24
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
 800cc56:	bf00      	nop
 800cc58:	20013c04 	.word	0x20013c04
 800cc5c:	20013c00 	.word	0x20013c00

0800cc60 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b08a      	sub	sp, #40	; 0x28
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cc68:	f3ef 8311 	mrs	r3, BASEPRI
 800cc6c:	f04f 0120 	mov.w	r1, #32
 800cc70:	f381 8811 	msr	BASEPRI, r1
 800cc74:	617b      	str	r3, [r7, #20]
 800cc76:	4827      	ldr	r0, [pc, #156]	; (800cd14 <SEGGER_SYSVIEW_Warn+0xb4>)
 800cc78:	f7fe fec7 	bl	800ba0a <_PreparePacket>
 800cc7c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cc7e:	2280      	movs	r2, #128	; 0x80
 800cc80:	6879      	ldr	r1, [r7, #4]
 800cc82:	6938      	ldr	r0, [r7, #16]
 800cc84:	f7fe fe74 	bl	800b970 <_EncodeStr>
 800cc88:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	627b      	str	r3, [r7, #36]	; 0x24
 800cc8e:	2301      	movs	r3, #1
 800cc90:	623b      	str	r3, [r7, #32]
 800cc92:	e00b      	b.n	800ccac <SEGGER_SYSVIEW_Warn+0x4c>
 800cc94:	6a3b      	ldr	r3, [r7, #32]
 800cc96:	b2da      	uxtb	r2, r3
 800cc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9a:	1c59      	adds	r1, r3, #1
 800cc9c:	6279      	str	r1, [r7, #36]	; 0x24
 800cc9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cca2:	b2d2      	uxtb	r2, r2
 800cca4:	701a      	strb	r2, [r3, #0]
 800cca6:	6a3b      	ldr	r3, [r7, #32]
 800cca8:	09db      	lsrs	r3, r3, #7
 800ccaa:	623b      	str	r3, [r7, #32]
 800ccac:	6a3b      	ldr	r3, [r7, #32]
 800ccae:	2b7f      	cmp	r3, #127	; 0x7f
 800ccb0:	d8f0      	bhi.n	800cc94 <SEGGER_SYSVIEW_Warn+0x34>
 800ccb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb4:	1c5a      	adds	r2, r3, #1
 800ccb6:	627a      	str	r2, [r7, #36]	; 0x24
 800ccb8:	6a3a      	ldr	r2, [r7, #32]
 800ccba:	b2d2      	uxtb	r2, r2
 800ccbc:	701a      	strb	r2, [r3, #0]
 800ccbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	61fb      	str	r3, [r7, #28]
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	61bb      	str	r3, [r7, #24]
 800ccca:	e00b      	b.n	800cce4 <SEGGER_SYSVIEW_Warn+0x84>
 800cccc:	69bb      	ldr	r3, [r7, #24]
 800ccce:	b2da      	uxtb	r2, r3
 800ccd0:	69fb      	ldr	r3, [r7, #28]
 800ccd2:	1c59      	adds	r1, r3, #1
 800ccd4:	61f9      	str	r1, [r7, #28]
 800ccd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ccda:	b2d2      	uxtb	r2, r2
 800ccdc:	701a      	strb	r2, [r3, #0]
 800ccde:	69bb      	ldr	r3, [r7, #24]
 800cce0:	09db      	lsrs	r3, r3, #7
 800cce2:	61bb      	str	r3, [r7, #24]
 800cce4:	69bb      	ldr	r3, [r7, #24]
 800cce6:	2b7f      	cmp	r3, #127	; 0x7f
 800cce8:	d8f0      	bhi.n	800cccc <SEGGER_SYSVIEW_Warn+0x6c>
 800ccea:	69fb      	ldr	r3, [r7, #28]
 800ccec:	1c5a      	adds	r2, r3, #1
 800ccee:	61fa      	str	r2, [r7, #28]
 800ccf0:	69ba      	ldr	r2, [r7, #24]
 800ccf2:	b2d2      	uxtb	r2, r2
 800ccf4:	701a      	strb	r2, [r3, #0]
 800ccf6:	69fb      	ldr	r3, [r7, #28]
 800ccf8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800ccfa:	221a      	movs	r2, #26
 800ccfc:	68f9      	ldr	r1, [r7, #12]
 800ccfe:	6938      	ldr	r0, [r7, #16]
 800cd00:	f7fe ff72 	bl	800bbe8 <_SendPacket>
  RECORD_END();
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	f383 8811 	msr	BASEPRI, r3
}
 800cd0a:	bf00      	nop
 800cd0c:	3728      	adds	r7, #40	; 0x28
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
 800cd12:	bf00      	nop
 800cd14:	20013c04 	.word	0x20013c04

0800cd18 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	607a      	str	r2, [r7, #4]
 800cd24:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800cd26:	683a      	ldr	r2, [r7, #0]
 800cd28:	6879      	ldr	r1, [r7, #4]
 800cd2a:	2000      	movs	r0, #0
 800cd2c:	f7fe fdfa 	bl	800b924 <SEGGER_RTT_Write>
  return len;
 800cd30:	683b      	ldr	r3, [r7, #0]
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3710      	adds	r7, #16
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}

0800cd3a <atoi>:
 800cd3a:	220a      	movs	r2, #10
 800cd3c:	2100      	movs	r1, #0
 800cd3e:	f000 b883 	b.w	800ce48 <strtol>
	...

0800cd44 <_strtol_l.constprop.0>:
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd4a:	d001      	beq.n	800cd50 <_strtol_l.constprop.0+0xc>
 800cd4c:	2b24      	cmp	r3, #36	; 0x24
 800cd4e:	d906      	bls.n	800cd5e <_strtol_l.constprop.0+0x1a>
 800cd50:	f000 fe74 	bl	800da3c <__errno>
 800cd54:	2316      	movs	r3, #22
 800cd56:	6003      	str	r3, [r0, #0]
 800cd58:	2000      	movs	r0, #0
 800cd5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ce44 <_strtol_l.constprop.0+0x100>
 800cd62:	460d      	mov	r5, r1
 800cd64:	462e      	mov	r6, r5
 800cd66:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd6a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800cd6e:	f017 0708 	ands.w	r7, r7, #8
 800cd72:	d1f7      	bne.n	800cd64 <_strtol_l.constprop.0+0x20>
 800cd74:	2c2d      	cmp	r4, #45	; 0x2d
 800cd76:	d132      	bne.n	800cdde <_strtol_l.constprop.0+0x9a>
 800cd78:	782c      	ldrb	r4, [r5, #0]
 800cd7a:	2701      	movs	r7, #1
 800cd7c:	1cb5      	adds	r5, r6, #2
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d05b      	beq.n	800ce3a <_strtol_l.constprop.0+0xf6>
 800cd82:	2b10      	cmp	r3, #16
 800cd84:	d109      	bne.n	800cd9a <_strtol_l.constprop.0+0x56>
 800cd86:	2c30      	cmp	r4, #48	; 0x30
 800cd88:	d107      	bne.n	800cd9a <_strtol_l.constprop.0+0x56>
 800cd8a:	782c      	ldrb	r4, [r5, #0]
 800cd8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cd90:	2c58      	cmp	r4, #88	; 0x58
 800cd92:	d14d      	bne.n	800ce30 <_strtol_l.constprop.0+0xec>
 800cd94:	786c      	ldrb	r4, [r5, #1]
 800cd96:	2310      	movs	r3, #16
 800cd98:	3502      	adds	r5, #2
 800cd9a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cd9e:	f108 38ff 	add.w	r8, r8, #4294967295
 800cda2:	f04f 0e00 	mov.w	lr, #0
 800cda6:	fbb8 f9f3 	udiv	r9, r8, r3
 800cdaa:	4676      	mov	r6, lr
 800cdac:	fb03 8a19 	mls	sl, r3, r9, r8
 800cdb0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cdb4:	f1bc 0f09 	cmp.w	ip, #9
 800cdb8:	d816      	bhi.n	800cde8 <_strtol_l.constprop.0+0xa4>
 800cdba:	4664      	mov	r4, ip
 800cdbc:	42a3      	cmp	r3, r4
 800cdbe:	dd24      	ble.n	800ce0a <_strtol_l.constprop.0+0xc6>
 800cdc0:	f1be 3fff 	cmp.w	lr, #4294967295
 800cdc4:	d008      	beq.n	800cdd8 <_strtol_l.constprop.0+0x94>
 800cdc6:	45b1      	cmp	r9, r6
 800cdc8:	d31c      	bcc.n	800ce04 <_strtol_l.constprop.0+0xc0>
 800cdca:	d101      	bne.n	800cdd0 <_strtol_l.constprop.0+0x8c>
 800cdcc:	45a2      	cmp	sl, r4
 800cdce:	db19      	blt.n	800ce04 <_strtol_l.constprop.0+0xc0>
 800cdd0:	fb06 4603 	mla	r6, r6, r3, r4
 800cdd4:	f04f 0e01 	mov.w	lr, #1
 800cdd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cddc:	e7e8      	b.n	800cdb0 <_strtol_l.constprop.0+0x6c>
 800cdde:	2c2b      	cmp	r4, #43	; 0x2b
 800cde0:	bf04      	itt	eq
 800cde2:	782c      	ldrbeq	r4, [r5, #0]
 800cde4:	1cb5      	addeq	r5, r6, #2
 800cde6:	e7ca      	b.n	800cd7e <_strtol_l.constprop.0+0x3a>
 800cde8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cdec:	f1bc 0f19 	cmp.w	ip, #25
 800cdf0:	d801      	bhi.n	800cdf6 <_strtol_l.constprop.0+0xb2>
 800cdf2:	3c37      	subs	r4, #55	; 0x37
 800cdf4:	e7e2      	b.n	800cdbc <_strtol_l.constprop.0+0x78>
 800cdf6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cdfa:	f1bc 0f19 	cmp.w	ip, #25
 800cdfe:	d804      	bhi.n	800ce0a <_strtol_l.constprop.0+0xc6>
 800ce00:	3c57      	subs	r4, #87	; 0x57
 800ce02:	e7db      	b.n	800cdbc <_strtol_l.constprop.0+0x78>
 800ce04:	f04f 3eff 	mov.w	lr, #4294967295
 800ce08:	e7e6      	b.n	800cdd8 <_strtol_l.constprop.0+0x94>
 800ce0a:	f1be 3fff 	cmp.w	lr, #4294967295
 800ce0e:	d105      	bne.n	800ce1c <_strtol_l.constprop.0+0xd8>
 800ce10:	2322      	movs	r3, #34	; 0x22
 800ce12:	6003      	str	r3, [r0, #0]
 800ce14:	4646      	mov	r6, r8
 800ce16:	b942      	cbnz	r2, 800ce2a <_strtol_l.constprop.0+0xe6>
 800ce18:	4630      	mov	r0, r6
 800ce1a:	e79e      	b.n	800cd5a <_strtol_l.constprop.0+0x16>
 800ce1c:	b107      	cbz	r7, 800ce20 <_strtol_l.constprop.0+0xdc>
 800ce1e:	4276      	negs	r6, r6
 800ce20:	2a00      	cmp	r2, #0
 800ce22:	d0f9      	beq.n	800ce18 <_strtol_l.constprop.0+0xd4>
 800ce24:	f1be 0f00 	cmp.w	lr, #0
 800ce28:	d000      	beq.n	800ce2c <_strtol_l.constprop.0+0xe8>
 800ce2a:	1e69      	subs	r1, r5, #1
 800ce2c:	6011      	str	r1, [r2, #0]
 800ce2e:	e7f3      	b.n	800ce18 <_strtol_l.constprop.0+0xd4>
 800ce30:	2430      	movs	r4, #48	; 0x30
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d1b1      	bne.n	800cd9a <_strtol_l.constprop.0+0x56>
 800ce36:	2308      	movs	r3, #8
 800ce38:	e7af      	b.n	800cd9a <_strtol_l.constprop.0+0x56>
 800ce3a:	2c30      	cmp	r4, #48	; 0x30
 800ce3c:	d0a5      	beq.n	800cd8a <_strtol_l.constprop.0+0x46>
 800ce3e:	230a      	movs	r3, #10
 800ce40:	e7ab      	b.n	800cd9a <_strtol_l.constprop.0+0x56>
 800ce42:	bf00      	nop
 800ce44:	08010cbb 	.word	0x08010cbb

0800ce48 <strtol>:
 800ce48:	4613      	mov	r3, r2
 800ce4a:	460a      	mov	r2, r1
 800ce4c:	4601      	mov	r1, r0
 800ce4e:	4802      	ldr	r0, [pc, #8]	; (800ce58 <strtol+0x10>)
 800ce50:	6800      	ldr	r0, [r0, #0]
 800ce52:	f7ff bf77 	b.w	800cd44 <_strtol_l.constprop.0>
 800ce56:	bf00      	nop
 800ce58:	200001e0 	.word	0x200001e0

0800ce5c <__cvt>:
 800ce5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce60:	ec55 4b10 	vmov	r4, r5, d0
 800ce64:	2d00      	cmp	r5, #0
 800ce66:	460e      	mov	r6, r1
 800ce68:	4619      	mov	r1, r3
 800ce6a:	462b      	mov	r3, r5
 800ce6c:	bfbb      	ittet	lt
 800ce6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ce72:	461d      	movlt	r5, r3
 800ce74:	2300      	movge	r3, #0
 800ce76:	232d      	movlt	r3, #45	; 0x2d
 800ce78:	700b      	strb	r3, [r1, #0]
 800ce7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ce80:	4691      	mov	r9, r2
 800ce82:	f023 0820 	bic.w	r8, r3, #32
 800ce86:	bfbc      	itt	lt
 800ce88:	4622      	movlt	r2, r4
 800ce8a:	4614      	movlt	r4, r2
 800ce8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ce90:	d005      	beq.n	800ce9e <__cvt+0x42>
 800ce92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ce96:	d100      	bne.n	800ce9a <__cvt+0x3e>
 800ce98:	3601      	adds	r6, #1
 800ce9a:	2102      	movs	r1, #2
 800ce9c:	e000      	b.n	800cea0 <__cvt+0x44>
 800ce9e:	2103      	movs	r1, #3
 800cea0:	ab03      	add	r3, sp, #12
 800cea2:	9301      	str	r3, [sp, #4]
 800cea4:	ab02      	add	r3, sp, #8
 800cea6:	9300      	str	r3, [sp, #0]
 800cea8:	ec45 4b10 	vmov	d0, r4, r5
 800ceac:	4653      	mov	r3, sl
 800ceae:	4632      	mov	r2, r6
 800ceb0:	f000 fe8a 	bl	800dbc8 <_dtoa_r>
 800ceb4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ceb8:	4607      	mov	r7, r0
 800ceba:	d102      	bne.n	800cec2 <__cvt+0x66>
 800cebc:	f019 0f01 	tst.w	r9, #1
 800cec0:	d022      	beq.n	800cf08 <__cvt+0xac>
 800cec2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cec6:	eb07 0906 	add.w	r9, r7, r6
 800ceca:	d110      	bne.n	800ceee <__cvt+0x92>
 800cecc:	783b      	ldrb	r3, [r7, #0]
 800cece:	2b30      	cmp	r3, #48	; 0x30
 800ced0:	d10a      	bne.n	800cee8 <__cvt+0x8c>
 800ced2:	2200      	movs	r2, #0
 800ced4:	2300      	movs	r3, #0
 800ced6:	4620      	mov	r0, r4
 800ced8:	4629      	mov	r1, r5
 800ceda:	f7f3 fe65 	bl	8000ba8 <__aeabi_dcmpeq>
 800cede:	b918      	cbnz	r0, 800cee8 <__cvt+0x8c>
 800cee0:	f1c6 0601 	rsb	r6, r6, #1
 800cee4:	f8ca 6000 	str.w	r6, [sl]
 800cee8:	f8da 3000 	ldr.w	r3, [sl]
 800ceec:	4499      	add	r9, r3
 800ceee:	2200      	movs	r2, #0
 800cef0:	2300      	movs	r3, #0
 800cef2:	4620      	mov	r0, r4
 800cef4:	4629      	mov	r1, r5
 800cef6:	f7f3 fe57 	bl	8000ba8 <__aeabi_dcmpeq>
 800cefa:	b108      	cbz	r0, 800cf00 <__cvt+0xa4>
 800cefc:	f8cd 900c 	str.w	r9, [sp, #12]
 800cf00:	2230      	movs	r2, #48	; 0x30
 800cf02:	9b03      	ldr	r3, [sp, #12]
 800cf04:	454b      	cmp	r3, r9
 800cf06:	d307      	bcc.n	800cf18 <__cvt+0xbc>
 800cf08:	9b03      	ldr	r3, [sp, #12]
 800cf0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf0c:	1bdb      	subs	r3, r3, r7
 800cf0e:	4638      	mov	r0, r7
 800cf10:	6013      	str	r3, [r2, #0]
 800cf12:	b004      	add	sp, #16
 800cf14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf18:	1c59      	adds	r1, r3, #1
 800cf1a:	9103      	str	r1, [sp, #12]
 800cf1c:	701a      	strb	r2, [r3, #0]
 800cf1e:	e7f0      	b.n	800cf02 <__cvt+0xa6>

0800cf20 <__exponent>:
 800cf20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf22:	4603      	mov	r3, r0
 800cf24:	2900      	cmp	r1, #0
 800cf26:	bfb8      	it	lt
 800cf28:	4249      	neglt	r1, r1
 800cf2a:	f803 2b02 	strb.w	r2, [r3], #2
 800cf2e:	bfb4      	ite	lt
 800cf30:	222d      	movlt	r2, #45	; 0x2d
 800cf32:	222b      	movge	r2, #43	; 0x2b
 800cf34:	2909      	cmp	r1, #9
 800cf36:	7042      	strb	r2, [r0, #1]
 800cf38:	dd2a      	ble.n	800cf90 <__exponent+0x70>
 800cf3a:	f10d 0207 	add.w	r2, sp, #7
 800cf3e:	4617      	mov	r7, r2
 800cf40:	260a      	movs	r6, #10
 800cf42:	4694      	mov	ip, r2
 800cf44:	fb91 f5f6 	sdiv	r5, r1, r6
 800cf48:	fb06 1415 	mls	r4, r6, r5, r1
 800cf4c:	3430      	adds	r4, #48	; 0x30
 800cf4e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800cf52:	460c      	mov	r4, r1
 800cf54:	2c63      	cmp	r4, #99	; 0x63
 800cf56:	f102 32ff 	add.w	r2, r2, #4294967295
 800cf5a:	4629      	mov	r1, r5
 800cf5c:	dcf1      	bgt.n	800cf42 <__exponent+0x22>
 800cf5e:	3130      	adds	r1, #48	; 0x30
 800cf60:	f1ac 0402 	sub.w	r4, ip, #2
 800cf64:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cf68:	1c41      	adds	r1, r0, #1
 800cf6a:	4622      	mov	r2, r4
 800cf6c:	42ba      	cmp	r2, r7
 800cf6e:	d30a      	bcc.n	800cf86 <__exponent+0x66>
 800cf70:	f10d 0209 	add.w	r2, sp, #9
 800cf74:	eba2 020c 	sub.w	r2, r2, ip
 800cf78:	42bc      	cmp	r4, r7
 800cf7a:	bf88      	it	hi
 800cf7c:	2200      	movhi	r2, #0
 800cf7e:	4413      	add	r3, r2
 800cf80:	1a18      	subs	r0, r3, r0
 800cf82:	b003      	add	sp, #12
 800cf84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf86:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cf8a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800cf8e:	e7ed      	b.n	800cf6c <__exponent+0x4c>
 800cf90:	2330      	movs	r3, #48	; 0x30
 800cf92:	3130      	adds	r1, #48	; 0x30
 800cf94:	7083      	strb	r3, [r0, #2]
 800cf96:	70c1      	strb	r1, [r0, #3]
 800cf98:	1d03      	adds	r3, r0, #4
 800cf9a:	e7f1      	b.n	800cf80 <__exponent+0x60>

0800cf9c <_printf_float>:
 800cf9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa0:	ed2d 8b02 	vpush	{d8}
 800cfa4:	b08d      	sub	sp, #52	; 0x34
 800cfa6:	460c      	mov	r4, r1
 800cfa8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cfac:	4616      	mov	r6, r2
 800cfae:	461f      	mov	r7, r3
 800cfb0:	4605      	mov	r5, r0
 800cfb2:	f000 fd0b 	bl	800d9cc <_localeconv_r>
 800cfb6:	f8d0 a000 	ldr.w	sl, [r0]
 800cfba:	4650      	mov	r0, sl
 800cfbc:	f7f3 f9c8 	bl	8000350 <strlen>
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	930a      	str	r3, [sp, #40]	; 0x28
 800cfc4:	6823      	ldr	r3, [r4, #0]
 800cfc6:	9305      	str	r3, [sp, #20]
 800cfc8:	f8d8 3000 	ldr.w	r3, [r8]
 800cfcc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cfd0:	3307      	adds	r3, #7
 800cfd2:	f023 0307 	bic.w	r3, r3, #7
 800cfd6:	f103 0208 	add.w	r2, r3, #8
 800cfda:	f8c8 2000 	str.w	r2, [r8]
 800cfde:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cfe2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cfe6:	9307      	str	r3, [sp, #28]
 800cfe8:	f8cd 8018 	str.w	r8, [sp, #24]
 800cfec:	ee08 0a10 	vmov	s16, r0
 800cff0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800cff4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cff8:	4b9e      	ldr	r3, [pc, #632]	; (800d274 <_printf_float+0x2d8>)
 800cffa:	f04f 32ff 	mov.w	r2, #4294967295
 800cffe:	f7f3 fe05 	bl	8000c0c <__aeabi_dcmpun>
 800d002:	bb88      	cbnz	r0, 800d068 <_printf_float+0xcc>
 800d004:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d008:	4b9a      	ldr	r3, [pc, #616]	; (800d274 <_printf_float+0x2d8>)
 800d00a:	f04f 32ff 	mov.w	r2, #4294967295
 800d00e:	f7f3 fddf 	bl	8000bd0 <__aeabi_dcmple>
 800d012:	bb48      	cbnz	r0, 800d068 <_printf_float+0xcc>
 800d014:	2200      	movs	r2, #0
 800d016:	2300      	movs	r3, #0
 800d018:	4640      	mov	r0, r8
 800d01a:	4649      	mov	r1, r9
 800d01c:	f7f3 fdce 	bl	8000bbc <__aeabi_dcmplt>
 800d020:	b110      	cbz	r0, 800d028 <_printf_float+0x8c>
 800d022:	232d      	movs	r3, #45	; 0x2d
 800d024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d028:	4a93      	ldr	r2, [pc, #588]	; (800d278 <_printf_float+0x2dc>)
 800d02a:	4b94      	ldr	r3, [pc, #592]	; (800d27c <_printf_float+0x2e0>)
 800d02c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d030:	bf94      	ite	ls
 800d032:	4690      	movls	r8, r2
 800d034:	4698      	movhi	r8, r3
 800d036:	2303      	movs	r3, #3
 800d038:	6123      	str	r3, [r4, #16]
 800d03a:	9b05      	ldr	r3, [sp, #20]
 800d03c:	f023 0304 	bic.w	r3, r3, #4
 800d040:	6023      	str	r3, [r4, #0]
 800d042:	f04f 0900 	mov.w	r9, #0
 800d046:	9700      	str	r7, [sp, #0]
 800d048:	4633      	mov	r3, r6
 800d04a:	aa0b      	add	r2, sp, #44	; 0x2c
 800d04c:	4621      	mov	r1, r4
 800d04e:	4628      	mov	r0, r5
 800d050:	f000 f9da 	bl	800d408 <_printf_common>
 800d054:	3001      	adds	r0, #1
 800d056:	f040 8090 	bne.w	800d17a <_printf_float+0x1de>
 800d05a:	f04f 30ff 	mov.w	r0, #4294967295
 800d05e:	b00d      	add	sp, #52	; 0x34
 800d060:	ecbd 8b02 	vpop	{d8}
 800d064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d068:	4642      	mov	r2, r8
 800d06a:	464b      	mov	r3, r9
 800d06c:	4640      	mov	r0, r8
 800d06e:	4649      	mov	r1, r9
 800d070:	f7f3 fdcc 	bl	8000c0c <__aeabi_dcmpun>
 800d074:	b140      	cbz	r0, 800d088 <_printf_float+0xec>
 800d076:	464b      	mov	r3, r9
 800d078:	2b00      	cmp	r3, #0
 800d07a:	bfbc      	itt	lt
 800d07c:	232d      	movlt	r3, #45	; 0x2d
 800d07e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d082:	4a7f      	ldr	r2, [pc, #508]	; (800d280 <_printf_float+0x2e4>)
 800d084:	4b7f      	ldr	r3, [pc, #508]	; (800d284 <_printf_float+0x2e8>)
 800d086:	e7d1      	b.n	800d02c <_printf_float+0x90>
 800d088:	6863      	ldr	r3, [r4, #4]
 800d08a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d08e:	9206      	str	r2, [sp, #24]
 800d090:	1c5a      	adds	r2, r3, #1
 800d092:	d13f      	bne.n	800d114 <_printf_float+0x178>
 800d094:	2306      	movs	r3, #6
 800d096:	6063      	str	r3, [r4, #4]
 800d098:	9b05      	ldr	r3, [sp, #20]
 800d09a:	6861      	ldr	r1, [r4, #4]
 800d09c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	9303      	str	r3, [sp, #12]
 800d0a4:	ab0a      	add	r3, sp, #40	; 0x28
 800d0a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d0aa:	ab09      	add	r3, sp, #36	; 0x24
 800d0ac:	ec49 8b10 	vmov	d0, r8, r9
 800d0b0:	9300      	str	r3, [sp, #0]
 800d0b2:	6022      	str	r2, [r4, #0]
 800d0b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d0b8:	4628      	mov	r0, r5
 800d0ba:	f7ff fecf 	bl	800ce5c <__cvt>
 800d0be:	9b06      	ldr	r3, [sp, #24]
 800d0c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d0c2:	2b47      	cmp	r3, #71	; 0x47
 800d0c4:	4680      	mov	r8, r0
 800d0c6:	d108      	bne.n	800d0da <_printf_float+0x13e>
 800d0c8:	1cc8      	adds	r0, r1, #3
 800d0ca:	db02      	blt.n	800d0d2 <_printf_float+0x136>
 800d0cc:	6863      	ldr	r3, [r4, #4]
 800d0ce:	4299      	cmp	r1, r3
 800d0d0:	dd41      	ble.n	800d156 <_printf_float+0x1ba>
 800d0d2:	f1ab 0302 	sub.w	r3, fp, #2
 800d0d6:	fa5f fb83 	uxtb.w	fp, r3
 800d0da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d0de:	d820      	bhi.n	800d122 <_printf_float+0x186>
 800d0e0:	3901      	subs	r1, #1
 800d0e2:	465a      	mov	r2, fp
 800d0e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d0e8:	9109      	str	r1, [sp, #36]	; 0x24
 800d0ea:	f7ff ff19 	bl	800cf20 <__exponent>
 800d0ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0f0:	1813      	adds	r3, r2, r0
 800d0f2:	2a01      	cmp	r2, #1
 800d0f4:	4681      	mov	r9, r0
 800d0f6:	6123      	str	r3, [r4, #16]
 800d0f8:	dc02      	bgt.n	800d100 <_printf_float+0x164>
 800d0fa:	6822      	ldr	r2, [r4, #0]
 800d0fc:	07d2      	lsls	r2, r2, #31
 800d0fe:	d501      	bpl.n	800d104 <_printf_float+0x168>
 800d100:	3301      	adds	r3, #1
 800d102:	6123      	str	r3, [r4, #16]
 800d104:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d09c      	beq.n	800d046 <_printf_float+0xaa>
 800d10c:	232d      	movs	r3, #45	; 0x2d
 800d10e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d112:	e798      	b.n	800d046 <_printf_float+0xaa>
 800d114:	9a06      	ldr	r2, [sp, #24]
 800d116:	2a47      	cmp	r2, #71	; 0x47
 800d118:	d1be      	bne.n	800d098 <_printf_float+0xfc>
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d1bc      	bne.n	800d098 <_printf_float+0xfc>
 800d11e:	2301      	movs	r3, #1
 800d120:	e7b9      	b.n	800d096 <_printf_float+0xfa>
 800d122:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d126:	d118      	bne.n	800d15a <_printf_float+0x1be>
 800d128:	2900      	cmp	r1, #0
 800d12a:	6863      	ldr	r3, [r4, #4]
 800d12c:	dd0b      	ble.n	800d146 <_printf_float+0x1aa>
 800d12e:	6121      	str	r1, [r4, #16]
 800d130:	b913      	cbnz	r3, 800d138 <_printf_float+0x19c>
 800d132:	6822      	ldr	r2, [r4, #0]
 800d134:	07d0      	lsls	r0, r2, #31
 800d136:	d502      	bpl.n	800d13e <_printf_float+0x1a2>
 800d138:	3301      	adds	r3, #1
 800d13a:	440b      	add	r3, r1
 800d13c:	6123      	str	r3, [r4, #16]
 800d13e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d140:	f04f 0900 	mov.w	r9, #0
 800d144:	e7de      	b.n	800d104 <_printf_float+0x168>
 800d146:	b913      	cbnz	r3, 800d14e <_printf_float+0x1b2>
 800d148:	6822      	ldr	r2, [r4, #0]
 800d14a:	07d2      	lsls	r2, r2, #31
 800d14c:	d501      	bpl.n	800d152 <_printf_float+0x1b6>
 800d14e:	3302      	adds	r3, #2
 800d150:	e7f4      	b.n	800d13c <_printf_float+0x1a0>
 800d152:	2301      	movs	r3, #1
 800d154:	e7f2      	b.n	800d13c <_printf_float+0x1a0>
 800d156:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d15a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d15c:	4299      	cmp	r1, r3
 800d15e:	db05      	blt.n	800d16c <_printf_float+0x1d0>
 800d160:	6823      	ldr	r3, [r4, #0]
 800d162:	6121      	str	r1, [r4, #16]
 800d164:	07d8      	lsls	r0, r3, #31
 800d166:	d5ea      	bpl.n	800d13e <_printf_float+0x1a2>
 800d168:	1c4b      	adds	r3, r1, #1
 800d16a:	e7e7      	b.n	800d13c <_printf_float+0x1a0>
 800d16c:	2900      	cmp	r1, #0
 800d16e:	bfd4      	ite	le
 800d170:	f1c1 0202 	rsble	r2, r1, #2
 800d174:	2201      	movgt	r2, #1
 800d176:	4413      	add	r3, r2
 800d178:	e7e0      	b.n	800d13c <_printf_float+0x1a0>
 800d17a:	6823      	ldr	r3, [r4, #0]
 800d17c:	055a      	lsls	r2, r3, #21
 800d17e:	d407      	bmi.n	800d190 <_printf_float+0x1f4>
 800d180:	6923      	ldr	r3, [r4, #16]
 800d182:	4642      	mov	r2, r8
 800d184:	4631      	mov	r1, r6
 800d186:	4628      	mov	r0, r5
 800d188:	47b8      	blx	r7
 800d18a:	3001      	adds	r0, #1
 800d18c:	d12c      	bne.n	800d1e8 <_printf_float+0x24c>
 800d18e:	e764      	b.n	800d05a <_printf_float+0xbe>
 800d190:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d194:	f240 80e0 	bls.w	800d358 <_printf_float+0x3bc>
 800d198:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d19c:	2200      	movs	r2, #0
 800d19e:	2300      	movs	r3, #0
 800d1a0:	f7f3 fd02 	bl	8000ba8 <__aeabi_dcmpeq>
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	d034      	beq.n	800d212 <_printf_float+0x276>
 800d1a8:	4a37      	ldr	r2, [pc, #220]	; (800d288 <_printf_float+0x2ec>)
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	4631      	mov	r1, r6
 800d1ae:	4628      	mov	r0, r5
 800d1b0:	47b8      	blx	r7
 800d1b2:	3001      	adds	r0, #1
 800d1b4:	f43f af51 	beq.w	800d05a <_printf_float+0xbe>
 800d1b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	db02      	blt.n	800d1c6 <_printf_float+0x22a>
 800d1c0:	6823      	ldr	r3, [r4, #0]
 800d1c2:	07d8      	lsls	r0, r3, #31
 800d1c4:	d510      	bpl.n	800d1e8 <_printf_float+0x24c>
 800d1c6:	ee18 3a10 	vmov	r3, s16
 800d1ca:	4652      	mov	r2, sl
 800d1cc:	4631      	mov	r1, r6
 800d1ce:	4628      	mov	r0, r5
 800d1d0:	47b8      	blx	r7
 800d1d2:	3001      	adds	r0, #1
 800d1d4:	f43f af41 	beq.w	800d05a <_printf_float+0xbe>
 800d1d8:	f04f 0800 	mov.w	r8, #0
 800d1dc:	f104 091a 	add.w	r9, r4, #26
 800d1e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1e2:	3b01      	subs	r3, #1
 800d1e4:	4543      	cmp	r3, r8
 800d1e6:	dc09      	bgt.n	800d1fc <_printf_float+0x260>
 800d1e8:	6823      	ldr	r3, [r4, #0]
 800d1ea:	079b      	lsls	r3, r3, #30
 800d1ec:	f100 8107 	bmi.w	800d3fe <_printf_float+0x462>
 800d1f0:	68e0      	ldr	r0, [r4, #12]
 800d1f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1f4:	4298      	cmp	r0, r3
 800d1f6:	bfb8      	it	lt
 800d1f8:	4618      	movlt	r0, r3
 800d1fa:	e730      	b.n	800d05e <_printf_float+0xc2>
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	464a      	mov	r2, r9
 800d200:	4631      	mov	r1, r6
 800d202:	4628      	mov	r0, r5
 800d204:	47b8      	blx	r7
 800d206:	3001      	adds	r0, #1
 800d208:	f43f af27 	beq.w	800d05a <_printf_float+0xbe>
 800d20c:	f108 0801 	add.w	r8, r8, #1
 800d210:	e7e6      	b.n	800d1e0 <_printf_float+0x244>
 800d212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d214:	2b00      	cmp	r3, #0
 800d216:	dc39      	bgt.n	800d28c <_printf_float+0x2f0>
 800d218:	4a1b      	ldr	r2, [pc, #108]	; (800d288 <_printf_float+0x2ec>)
 800d21a:	2301      	movs	r3, #1
 800d21c:	4631      	mov	r1, r6
 800d21e:	4628      	mov	r0, r5
 800d220:	47b8      	blx	r7
 800d222:	3001      	adds	r0, #1
 800d224:	f43f af19 	beq.w	800d05a <_printf_float+0xbe>
 800d228:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d22c:	4313      	orrs	r3, r2
 800d22e:	d102      	bne.n	800d236 <_printf_float+0x29a>
 800d230:	6823      	ldr	r3, [r4, #0]
 800d232:	07d9      	lsls	r1, r3, #31
 800d234:	d5d8      	bpl.n	800d1e8 <_printf_float+0x24c>
 800d236:	ee18 3a10 	vmov	r3, s16
 800d23a:	4652      	mov	r2, sl
 800d23c:	4631      	mov	r1, r6
 800d23e:	4628      	mov	r0, r5
 800d240:	47b8      	blx	r7
 800d242:	3001      	adds	r0, #1
 800d244:	f43f af09 	beq.w	800d05a <_printf_float+0xbe>
 800d248:	f04f 0900 	mov.w	r9, #0
 800d24c:	f104 0a1a 	add.w	sl, r4, #26
 800d250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d252:	425b      	negs	r3, r3
 800d254:	454b      	cmp	r3, r9
 800d256:	dc01      	bgt.n	800d25c <_printf_float+0x2c0>
 800d258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d25a:	e792      	b.n	800d182 <_printf_float+0x1e6>
 800d25c:	2301      	movs	r3, #1
 800d25e:	4652      	mov	r2, sl
 800d260:	4631      	mov	r1, r6
 800d262:	4628      	mov	r0, r5
 800d264:	47b8      	blx	r7
 800d266:	3001      	adds	r0, #1
 800d268:	f43f aef7 	beq.w	800d05a <_printf_float+0xbe>
 800d26c:	f109 0901 	add.w	r9, r9, #1
 800d270:	e7ee      	b.n	800d250 <_printf_float+0x2b4>
 800d272:	bf00      	nop
 800d274:	7fefffff 	.word	0x7fefffff
 800d278:	08010dbb 	.word	0x08010dbb
 800d27c:	08010dbf 	.word	0x08010dbf
 800d280:	08010dc3 	.word	0x08010dc3
 800d284:	08010dc7 	.word	0x08010dc7
 800d288:	08010dcb 	.word	0x08010dcb
 800d28c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d28e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d290:	429a      	cmp	r2, r3
 800d292:	bfa8      	it	ge
 800d294:	461a      	movge	r2, r3
 800d296:	2a00      	cmp	r2, #0
 800d298:	4691      	mov	r9, r2
 800d29a:	dc37      	bgt.n	800d30c <_printf_float+0x370>
 800d29c:	f04f 0b00 	mov.w	fp, #0
 800d2a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d2a4:	f104 021a 	add.w	r2, r4, #26
 800d2a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d2aa:	9305      	str	r3, [sp, #20]
 800d2ac:	eba3 0309 	sub.w	r3, r3, r9
 800d2b0:	455b      	cmp	r3, fp
 800d2b2:	dc33      	bgt.n	800d31c <_printf_float+0x380>
 800d2b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	db3b      	blt.n	800d334 <_printf_float+0x398>
 800d2bc:	6823      	ldr	r3, [r4, #0]
 800d2be:	07da      	lsls	r2, r3, #31
 800d2c0:	d438      	bmi.n	800d334 <_printf_float+0x398>
 800d2c2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d2c6:	eba2 0903 	sub.w	r9, r2, r3
 800d2ca:	9b05      	ldr	r3, [sp, #20]
 800d2cc:	1ad2      	subs	r2, r2, r3
 800d2ce:	4591      	cmp	r9, r2
 800d2d0:	bfa8      	it	ge
 800d2d2:	4691      	movge	r9, r2
 800d2d4:	f1b9 0f00 	cmp.w	r9, #0
 800d2d8:	dc35      	bgt.n	800d346 <_printf_float+0x3aa>
 800d2da:	f04f 0800 	mov.w	r8, #0
 800d2de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d2e2:	f104 0a1a 	add.w	sl, r4, #26
 800d2e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d2ea:	1a9b      	subs	r3, r3, r2
 800d2ec:	eba3 0309 	sub.w	r3, r3, r9
 800d2f0:	4543      	cmp	r3, r8
 800d2f2:	f77f af79 	ble.w	800d1e8 <_printf_float+0x24c>
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	4652      	mov	r2, sl
 800d2fa:	4631      	mov	r1, r6
 800d2fc:	4628      	mov	r0, r5
 800d2fe:	47b8      	blx	r7
 800d300:	3001      	adds	r0, #1
 800d302:	f43f aeaa 	beq.w	800d05a <_printf_float+0xbe>
 800d306:	f108 0801 	add.w	r8, r8, #1
 800d30a:	e7ec      	b.n	800d2e6 <_printf_float+0x34a>
 800d30c:	4613      	mov	r3, r2
 800d30e:	4631      	mov	r1, r6
 800d310:	4642      	mov	r2, r8
 800d312:	4628      	mov	r0, r5
 800d314:	47b8      	blx	r7
 800d316:	3001      	adds	r0, #1
 800d318:	d1c0      	bne.n	800d29c <_printf_float+0x300>
 800d31a:	e69e      	b.n	800d05a <_printf_float+0xbe>
 800d31c:	2301      	movs	r3, #1
 800d31e:	4631      	mov	r1, r6
 800d320:	4628      	mov	r0, r5
 800d322:	9205      	str	r2, [sp, #20]
 800d324:	47b8      	blx	r7
 800d326:	3001      	adds	r0, #1
 800d328:	f43f ae97 	beq.w	800d05a <_printf_float+0xbe>
 800d32c:	9a05      	ldr	r2, [sp, #20]
 800d32e:	f10b 0b01 	add.w	fp, fp, #1
 800d332:	e7b9      	b.n	800d2a8 <_printf_float+0x30c>
 800d334:	ee18 3a10 	vmov	r3, s16
 800d338:	4652      	mov	r2, sl
 800d33a:	4631      	mov	r1, r6
 800d33c:	4628      	mov	r0, r5
 800d33e:	47b8      	blx	r7
 800d340:	3001      	adds	r0, #1
 800d342:	d1be      	bne.n	800d2c2 <_printf_float+0x326>
 800d344:	e689      	b.n	800d05a <_printf_float+0xbe>
 800d346:	9a05      	ldr	r2, [sp, #20]
 800d348:	464b      	mov	r3, r9
 800d34a:	4442      	add	r2, r8
 800d34c:	4631      	mov	r1, r6
 800d34e:	4628      	mov	r0, r5
 800d350:	47b8      	blx	r7
 800d352:	3001      	adds	r0, #1
 800d354:	d1c1      	bne.n	800d2da <_printf_float+0x33e>
 800d356:	e680      	b.n	800d05a <_printf_float+0xbe>
 800d358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d35a:	2a01      	cmp	r2, #1
 800d35c:	dc01      	bgt.n	800d362 <_printf_float+0x3c6>
 800d35e:	07db      	lsls	r3, r3, #31
 800d360:	d53a      	bpl.n	800d3d8 <_printf_float+0x43c>
 800d362:	2301      	movs	r3, #1
 800d364:	4642      	mov	r2, r8
 800d366:	4631      	mov	r1, r6
 800d368:	4628      	mov	r0, r5
 800d36a:	47b8      	blx	r7
 800d36c:	3001      	adds	r0, #1
 800d36e:	f43f ae74 	beq.w	800d05a <_printf_float+0xbe>
 800d372:	ee18 3a10 	vmov	r3, s16
 800d376:	4652      	mov	r2, sl
 800d378:	4631      	mov	r1, r6
 800d37a:	4628      	mov	r0, r5
 800d37c:	47b8      	blx	r7
 800d37e:	3001      	adds	r0, #1
 800d380:	f43f ae6b 	beq.w	800d05a <_printf_float+0xbe>
 800d384:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d388:	2200      	movs	r2, #0
 800d38a:	2300      	movs	r3, #0
 800d38c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d390:	f7f3 fc0a 	bl	8000ba8 <__aeabi_dcmpeq>
 800d394:	b9d8      	cbnz	r0, 800d3ce <_printf_float+0x432>
 800d396:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d39a:	f108 0201 	add.w	r2, r8, #1
 800d39e:	4631      	mov	r1, r6
 800d3a0:	4628      	mov	r0, r5
 800d3a2:	47b8      	blx	r7
 800d3a4:	3001      	adds	r0, #1
 800d3a6:	d10e      	bne.n	800d3c6 <_printf_float+0x42a>
 800d3a8:	e657      	b.n	800d05a <_printf_float+0xbe>
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	4652      	mov	r2, sl
 800d3ae:	4631      	mov	r1, r6
 800d3b0:	4628      	mov	r0, r5
 800d3b2:	47b8      	blx	r7
 800d3b4:	3001      	adds	r0, #1
 800d3b6:	f43f ae50 	beq.w	800d05a <_printf_float+0xbe>
 800d3ba:	f108 0801 	add.w	r8, r8, #1
 800d3be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3c0:	3b01      	subs	r3, #1
 800d3c2:	4543      	cmp	r3, r8
 800d3c4:	dcf1      	bgt.n	800d3aa <_printf_float+0x40e>
 800d3c6:	464b      	mov	r3, r9
 800d3c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d3cc:	e6da      	b.n	800d184 <_printf_float+0x1e8>
 800d3ce:	f04f 0800 	mov.w	r8, #0
 800d3d2:	f104 0a1a 	add.w	sl, r4, #26
 800d3d6:	e7f2      	b.n	800d3be <_printf_float+0x422>
 800d3d8:	2301      	movs	r3, #1
 800d3da:	4642      	mov	r2, r8
 800d3dc:	e7df      	b.n	800d39e <_printf_float+0x402>
 800d3de:	2301      	movs	r3, #1
 800d3e0:	464a      	mov	r2, r9
 800d3e2:	4631      	mov	r1, r6
 800d3e4:	4628      	mov	r0, r5
 800d3e6:	47b8      	blx	r7
 800d3e8:	3001      	adds	r0, #1
 800d3ea:	f43f ae36 	beq.w	800d05a <_printf_float+0xbe>
 800d3ee:	f108 0801 	add.w	r8, r8, #1
 800d3f2:	68e3      	ldr	r3, [r4, #12]
 800d3f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d3f6:	1a5b      	subs	r3, r3, r1
 800d3f8:	4543      	cmp	r3, r8
 800d3fa:	dcf0      	bgt.n	800d3de <_printf_float+0x442>
 800d3fc:	e6f8      	b.n	800d1f0 <_printf_float+0x254>
 800d3fe:	f04f 0800 	mov.w	r8, #0
 800d402:	f104 0919 	add.w	r9, r4, #25
 800d406:	e7f4      	b.n	800d3f2 <_printf_float+0x456>

0800d408 <_printf_common>:
 800d408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d40c:	4616      	mov	r6, r2
 800d40e:	4699      	mov	r9, r3
 800d410:	688a      	ldr	r2, [r1, #8]
 800d412:	690b      	ldr	r3, [r1, #16]
 800d414:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d418:	4293      	cmp	r3, r2
 800d41a:	bfb8      	it	lt
 800d41c:	4613      	movlt	r3, r2
 800d41e:	6033      	str	r3, [r6, #0]
 800d420:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d424:	4607      	mov	r7, r0
 800d426:	460c      	mov	r4, r1
 800d428:	b10a      	cbz	r2, 800d42e <_printf_common+0x26>
 800d42a:	3301      	adds	r3, #1
 800d42c:	6033      	str	r3, [r6, #0]
 800d42e:	6823      	ldr	r3, [r4, #0]
 800d430:	0699      	lsls	r1, r3, #26
 800d432:	bf42      	ittt	mi
 800d434:	6833      	ldrmi	r3, [r6, #0]
 800d436:	3302      	addmi	r3, #2
 800d438:	6033      	strmi	r3, [r6, #0]
 800d43a:	6825      	ldr	r5, [r4, #0]
 800d43c:	f015 0506 	ands.w	r5, r5, #6
 800d440:	d106      	bne.n	800d450 <_printf_common+0x48>
 800d442:	f104 0a19 	add.w	sl, r4, #25
 800d446:	68e3      	ldr	r3, [r4, #12]
 800d448:	6832      	ldr	r2, [r6, #0]
 800d44a:	1a9b      	subs	r3, r3, r2
 800d44c:	42ab      	cmp	r3, r5
 800d44e:	dc26      	bgt.n	800d49e <_printf_common+0x96>
 800d450:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d454:	1e13      	subs	r3, r2, #0
 800d456:	6822      	ldr	r2, [r4, #0]
 800d458:	bf18      	it	ne
 800d45a:	2301      	movne	r3, #1
 800d45c:	0692      	lsls	r2, r2, #26
 800d45e:	d42b      	bmi.n	800d4b8 <_printf_common+0xb0>
 800d460:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d464:	4649      	mov	r1, r9
 800d466:	4638      	mov	r0, r7
 800d468:	47c0      	blx	r8
 800d46a:	3001      	adds	r0, #1
 800d46c:	d01e      	beq.n	800d4ac <_printf_common+0xa4>
 800d46e:	6823      	ldr	r3, [r4, #0]
 800d470:	6922      	ldr	r2, [r4, #16]
 800d472:	f003 0306 	and.w	r3, r3, #6
 800d476:	2b04      	cmp	r3, #4
 800d478:	bf02      	ittt	eq
 800d47a:	68e5      	ldreq	r5, [r4, #12]
 800d47c:	6833      	ldreq	r3, [r6, #0]
 800d47e:	1aed      	subeq	r5, r5, r3
 800d480:	68a3      	ldr	r3, [r4, #8]
 800d482:	bf0c      	ite	eq
 800d484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d488:	2500      	movne	r5, #0
 800d48a:	4293      	cmp	r3, r2
 800d48c:	bfc4      	itt	gt
 800d48e:	1a9b      	subgt	r3, r3, r2
 800d490:	18ed      	addgt	r5, r5, r3
 800d492:	2600      	movs	r6, #0
 800d494:	341a      	adds	r4, #26
 800d496:	42b5      	cmp	r5, r6
 800d498:	d11a      	bne.n	800d4d0 <_printf_common+0xc8>
 800d49a:	2000      	movs	r0, #0
 800d49c:	e008      	b.n	800d4b0 <_printf_common+0xa8>
 800d49e:	2301      	movs	r3, #1
 800d4a0:	4652      	mov	r2, sl
 800d4a2:	4649      	mov	r1, r9
 800d4a4:	4638      	mov	r0, r7
 800d4a6:	47c0      	blx	r8
 800d4a8:	3001      	adds	r0, #1
 800d4aa:	d103      	bne.n	800d4b4 <_printf_common+0xac>
 800d4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4b4:	3501      	adds	r5, #1
 800d4b6:	e7c6      	b.n	800d446 <_printf_common+0x3e>
 800d4b8:	18e1      	adds	r1, r4, r3
 800d4ba:	1c5a      	adds	r2, r3, #1
 800d4bc:	2030      	movs	r0, #48	; 0x30
 800d4be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d4c2:	4422      	add	r2, r4
 800d4c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d4c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d4cc:	3302      	adds	r3, #2
 800d4ce:	e7c7      	b.n	800d460 <_printf_common+0x58>
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	4622      	mov	r2, r4
 800d4d4:	4649      	mov	r1, r9
 800d4d6:	4638      	mov	r0, r7
 800d4d8:	47c0      	blx	r8
 800d4da:	3001      	adds	r0, #1
 800d4dc:	d0e6      	beq.n	800d4ac <_printf_common+0xa4>
 800d4de:	3601      	adds	r6, #1
 800d4e0:	e7d9      	b.n	800d496 <_printf_common+0x8e>
	...

0800d4e4 <_printf_i>:
 800d4e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d4e8:	7e0f      	ldrb	r7, [r1, #24]
 800d4ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d4ec:	2f78      	cmp	r7, #120	; 0x78
 800d4ee:	4691      	mov	r9, r2
 800d4f0:	4680      	mov	r8, r0
 800d4f2:	460c      	mov	r4, r1
 800d4f4:	469a      	mov	sl, r3
 800d4f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d4fa:	d807      	bhi.n	800d50c <_printf_i+0x28>
 800d4fc:	2f62      	cmp	r7, #98	; 0x62
 800d4fe:	d80a      	bhi.n	800d516 <_printf_i+0x32>
 800d500:	2f00      	cmp	r7, #0
 800d502:	f000 80d4 	beq.w	800d6ae <_printf_i+0x1ca>
 800d506:	2f58      	cmp	r7, #88	; 0x58
 800d508:	f000 80c0 	beq.w	800d68c <_printf_i+0x1a8>
 800d50c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d510:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d514:	e03a      	b.n	800d58c <_printf_i+0xa8>
 800d516:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d51a:	2b15      	cmp	r3, #21
 800d51c:	d8f6      	bhi.n	800d50c <_printf_i+0x28>
 800d51e:	a101      	add	r1, pc, #4	; (adr r1, 800d524 <_printf_i+0x40>)
 800d520:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d524:	0800d57d 	.word	0x0800d57d
 800d528:	0800d591 	.word	0x0800d591
 800d52c:	0800d50d 	.word	0x0800d50d
 800d530:	0800d50d 	.word	0x0800d50d
 800d534:	0800d50d 	.word	0x0800d50d
 800d538:	0800d50d 	.word	0x0800d50d
 800d53c:	0800d591 	.word	0x0800d591
 800d540:	0800d50d 	.word	0x0800d50d
 800d544:	0800d50d 	.word	0x0800d50d
 800d548:	0800d50d 	.word	0x0800d50d
 800d54c:	0800d50d 	.word	0x0800d50d
 800d550:	0800d695 	.word	0x0800d695
 800d554:	0800d5bd 	.word	0x0800d5bd
 800d558:	0800d64f 	.word	0x0800d64f
 800d55c:	0800d50d 	.word	0x0800d50d
 800d560:	0800d50d 	.word	0x0800d50d
 800d564:	0800d6b7 	.word	0x0800d6b7
 800d568:	0800d50d 	.word	0x0800d50d
 800d56c:	0800d5bd 	.word	0x0800d5bd
 800d570:	0800d50d 	.word	0x0800d50d
 800d574:	0800d50d 	.word	0x0800d50d
 800d578:	0800d657 	.word	0x0800d657
 800d57c:	682b      	ldr	r3, [r5, #0]
 800d57e:	1d1a      	adds	r2, r3, #4
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	602a      	str	r2, [r5, #0]
 800d584:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d588:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d58c:	2301      	movs	r3, #1
 800d58e:	e09f      	b.n	800d6d0 <_printf_i+0x1ec>
 800d590:	6820      	ldr	r0, [r4, #0]
 800d592:	682b      	ldr	r3, [r5, #0]
 800d594:	0607      	lsls	r7, r0, #24
 800d596:	f103 0104 	add.w	r1, r3, #4
 800d59a:	6029      	str	r1, [r5, #0]
 800d59c:	d501      	bpl.n	800d5a2 <_printf_i+0xbe>
 800d59e:	681e      	ldr	r6, [r3, #0]
 800d5a0:	e003      	b.n	800d5aa <_printf_i+0xc6>
 800d5a2:	0646      	lsls	r6, r0, #25
 800d5a4:	d5fb      	bpl.n	800d59e <_printf_i+0xba>
 800d5a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d5aa:	2e00      	cmp	r6, #0
 800d5ac:	da03      	bge.n	800d5b6 <_printf_i+0xd2>
 800d5ae:	232d      	movs	r3, #45	; 0x2d
 800d5b0:	4276      	negs	r6, r6
 800d5b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5b6:	485a      	ldr	r0, [pc, #360]	; (800d720 <_printf_i+0x23c>)
 800d5b8:	230a      	movs	r3, #10
 800d5ba:	e012      	b.n	800d5e2 <_printf_i+0xfe>
 800d5bc:	682b      	ldr	r3, [r5, #0]
 800d5be:	6820      	ldr	r0, [r4, #0]
 800d5c0:	1d19      	adds	r1, r3, #4
 800d5c2:	6029      	str	r1, [r5, #0]
 800d5c4:	0605      	lsls	r5, r0, #24
 800d5c6:	d501      	bpl.n	800d5cc <_printf_i+0xe8>
 800d5c8:	681e      	ldr	r6, [r3, #0]
 800d5ca:	e002      	b.n	800d5d2 <_printf_i+0xee>
 800d5cc:	0641      	lsls	r1, r0, #25
 800d5ce:	d5fb      	bpl.n	800d5c8 <_printf_i+0xe4>
 800d5d0:	881e      	ldrh	r6, [r3, #0]
 800d5d2:	4853      	ldr	r0, [pc, #332]	; (800d720 <_printf_i+0x23c>)
 800d5d4:	2f6f      	cmp	r7, #111	; 0x6f
 800d5d6:	bf0c      	ite	eq
 800d5d8:	2308      	moveq	r3, #8
 800d5da:	230a      	movne	r3, #10
 800d5dc:	2100      	movs	r1, #0
 800d5de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d5e2:	6865      	ldr	r5, [r4, #4]
 800d5e4:	60a5      	str	r5, [r4, #8]
 800d5e6:	2d00      	cmp	r5, #0
 800d5e8:	bfa2      	ittt	ge
 800d5ea:	6821      	ldrge	r1, [r4, #0]
 800d5ec:	f021 0104 	bicge.w	r1, r1, #4
 800d5f0:	6021      	strge	r1, [r4, #0]
 800d5f2:	b90e      	cbnz	r6, 800d5f8 <_printf_i+0x114>
 800d5f4:	2d00      	cmp	r5, #0
 800d5f6:	d04b      	beq.n	800d690 <_printf_i+0x1ac>
 800d5f8:	4615      	mov	r5, r2
 800d5fa:	fbb6 f1f3 	udiv	r1, r6, r3
 800d5fe:	fb03 6711 	mls	r7, r3, r1, r6
 800d602:	5dc7      	ldrb	r7, [r0, r7]
 800d604:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d608:	4637      	mov	r7, r6
 800d60a:	42bb      	cmp	r3, r7
 800d60c:	460e      	mov	r6, r1
 800d60e:	d9f4      	bls.n	800d5fa <_printf_i+0x116>
 800d610:	2b08      	cmp	r3, #8
 800d612:	d10b      	bne.n	800d62c <_printf_i+0x148>
 800d614:	6823      	ldr	r3, [r4, #0]
 800d616:	07de      	lsls	r6, r3, #31
 800d618:	d508      	bpl.n	800d62c <_printf_i+0x148>
 800d61a:	6923      	ldr	r3, [r4, #16]
 800d61c:	6861      	ldr	r1, [r4, #4]
 800d61e:	4299      	cmp	r1, r3
 800d620:	bfde      	ittt	le
 800d622:	2330      	movle	r3, #48	; 0x30
 800d624:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d628:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d62c:	1b52      	subs	r2, r2, r5
 800d62e:	6122      	str	r2, [r4, #16]
 800d630:	f8cd a000 	str.w	sl, [sp]
 800d634:	464b      	mov	r3, r9
 800d636:	aa03      	add	r2, sp, #12
 800d638:	4621      	mov	r1, r4
 800d63a:	4640      	mov	r0, r8
 800d63c:	f7ff fee4 	bl	800d408 <_printf_common>
 800d640:	3001      	adds	r0, #1
 800d642:	d14a      	bne.n	800d6da <_printf_i+0x1f6>
 800d644:	f04f 30ff 	mov.w	r0, #4294967295
 800d648:	b004      	add	sp, #16
 800d64a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d64e:	6823      	ldr	r3, [r4, #0]
 800d650:	f043 0320 	orr.w	r3, r3, #32
 800d654:	6023      	str	r3, [r4, #0]
 800d656:	4833      	ldr	r0, [pc, #204]	; (800d724 <_printf_i+0x240>)
 800d658:	2778      	movs	r7, #120	; 0x78
 800d65a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d65e:	6823      	ldr	r3, [r4, #0]
 800d660:	6829      	ldr	r1, [r5, #0]
 800d662:	061f      	lsls	r7, r3, #24
 800d664:	f851 6b04 	ldr.w	r6, [r1], #4
 800d668:	d402      	bmi.n	800d670 <_printf_i+0x18c>
 800d66a:	065f      	lsls	r7, r3, #25
 800d66c:	bf48      	it	mi
 800d66e:	b2b6      	uxthmi	r6, r6
 800d670:	07df      	lsls	r7, r3, #31
 800d672:	bf48      	it	mi
 800d674:	f043 0320 	orrmi.w	r3, r3, #32
 800d678:	6029      	str	r1, [r5, #0]
 800d67a:	bf48      	it	mi
 800d67c:	6023      	strmi	r3, [r4, #0]
 800d67e:	b91e      	cbnz	r6, 800d688 <_printf_i+0x1a4>
 800d680:	6823      	ldr	r3, [r4, #0]
 800d682:	f023 0320 	bic.w	r3, r3, #32
 800d686:	6023      	str	r3, [r4, #0]
 800d688:	2310      	movs	r3, #16
 800d68a:	e7a7      	b.n	800d5dc <_printf_i+0xf8>
 800d68c:	4824      	ldr	r0, [pc, #144]	; (800d720 <_printf_i+0x23c>)
 800d68e:	e7e4      	b.n	800d65a <_printf_i+0x176>
 800d690:	4615      	mov	r5, r2
 800d692:	e7bd      	b.n	800d610 <_printf_i+0x12c>
 800d694:	682b      	ldr	r3, [r5, #0]
 800d696:	6826      	ldr	r6, [r4, #0]
 800d698:	6961      	ldr	r1, [r4, #20]
 800d69a:	1d18      	adds	r0, r3, #4
 800d69c:	6028      	str	r0, [r5, #0]
 800d69e:	0635      	lsls	r5, r6, #24
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	d501      	bpl.n	800d6a8 <_printf_i+0x1c4>
 800d6a4:	6019      	str	r1, [r3, #0]
 800d6a6:	e002      	b.n	800d6ae <_printf_i+0x1ca>
 800d6a8:	0670      	lsls	r0, r6, #25
 800d6aa:	d5fb      	bpl.n	800d6a4 <_printf_i+0x1c0>
 800d6ac:	8019      	strh	r1, [r3, #0]
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	6123      	str	r3, [r4, #16]
 800d6b2:	4615      	mov	r5, r2
 800d6b4:	e7bc      	b.n	800d630 <_printf_i+0x14c>
 800d6b6:	682b      	ldr	r3, [r5, #0]
 800d6b8:	1d1a      	adds	r2, r3, #4
 800d6ba:	602a      	str	r2, [r5, #0]
 800d6bc:	681d      	ldr	r5, [r3, #0]
 800d6be:	6862      	ldr	r2, [r4, #4]
 800d6c0:	2100      	movs	r1, #0
 800d6c2:	4628      	mov	r0, r5
 800d6c4:	f7f2 fdf4 	bl	80002b0 <memchr>
 800d6c8:	b108      	cbz	r0, 800d6ce <_printf_i+0x1ea>
 800d6ca:	1b40      	subs	r0, r0, r5
 800d6cc:	6060      	str	r0, [r4, #4]
 800d6ce:	6863      	ldr	r3, [r4, #4]
 800d6d0:	6123      	str	r3, [r4, #16]
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d6d8:	e7aa      	b.n	800d630 <_printf_i+0x14c>
 800d6da:	6923      	ldr	r3, [r4, #16]
 800d6dc:	462a      	mov	r2, r5
 800d6de:	4649      	mov	r1, r9
 800d6e0:	4640      	mov	r0, r8
 800d6e2:	47d0      	blx	sl
 800d6e4:	3001      	adds	r0, #1
 800d6e6:	d0ad      	beq.n	800d644 <_printf_i+0x160>
 800d6e8:	6823      	ldr	r3, [r4, #0]
 800d6ea:	079b      	lsls	r3, r3, #30
 800d6ec:	d413      	bmi.n	800d716 <_printf_i+0x232>
 800d6ee:	68e0      	ldr	r0, [r4, #12]
 800d6f0:	9b03      	ldr	r3, [sp, #12]
 800d6f2:	4298      	cmp	r0, r3
 800d6f4:	bfb8      	it	lt
 800d6f6:	4618      	movlt	r0, r3
 800d6f8:	e7a6      	b.n	800d648 <_printf_i+0x164>
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	4632      	mov	r2, r6
 800d6fe:	4649      	mov	r1, r9
 800d700:	4640      	mov	r0, r8
 800d702:	47d0      	blx	sl
 800d704:	3001      	adds	r0, #1
 800d706:	d09d      	beq.n	800d644 <_printf_i+0x160>
 800d708:	3501      	adds	r5, #1
 800d70a:	68e3      	ldr	r3, [r4, #12]
 800d70c:	9903      	ldr	r1, [sp, #12]
 800d70e:	1a5b      	subs	r3, r3, r1
 800d710:	42ab      	cmp	r3, r5
 800d712:	dcf2      	bgt.n	800d6fa <_printf_i+0x216>
 800d714:	e7eb      	b.n	800d6ee <_printf_i+0x20a>
 800d716:	2500      	movs	r5, #0
 800d718:	f104 0619 	add.w	r6, r4, #25
 800d71c:	e7f5      	b.n	800d70a <_printf_i+0x226>
 800d71e:	bf00      	nop
 800d720:	08010dcd 	.word	0x08010dcd
 800d724:	08010dde 	.word	0x08010dde

0800d728 <std>:
 800d728:	2300      	movs	r3, #0
 800d72a:	b510      	push	{r4, lr}
 800d72c:	4604      	mov	r4, r0
 800d72e:	e9c0 3300 	strd	r3, r3, [r0]
 800d732:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d736:	6083      	str	r3, [r0, #8]
 800d738:	8181      	strh	r1, [r0, #12]
 800d73a:	6643      	str	r3, [r0, #100]	; 0x64
 800d73c:	81c2      	strh	r2, [r0, #14]
 800d73e:	6183      	str	r3, [r0, #24]
 800d740:	4619      	mov	r1, r3
 800d742:	2208      	movs	r2, #8
 800d744:	305c      	adds	r0, #92	; 0x5c
 800d746:	f000 f938 	bl	800d9ba <memset>
 800d74a:	4b0d      	ldr	r3, [pc, #52]	; (800d780 <std+0x58>)
 800d74c:	6263      	str	r3, [r4, #36]	; 0x24
 800d74e:	4b0d      	ldr	r3, [pc, #52]	; (800d784 <std+0x5c>)
 800d750:	62a3      	str	r3, [r4, #40]	; 0x28
 800d752:	4b0d      	ldr	r3, [pc, #52]	; (800d788 <std+0x60>)
 800d754:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d756:	4b0d      	ldr	r3, [pc, #52]	; (800d78c <std+0x64>)
 800d758:	6323      	str	r3, [r4, #48]	; 0x30
 800d75a:	4b0d      	ldr	r3, [pc, #52]	; (800d790 <std+0x68>)
 800d75c:	6224      	str	r4, [r4, #32]
 800d75e:	429c      	cmp	r4, r3
 800d760:	d006      	beq.n	800d770 <std+0x48>
 800d762:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d766:	4294      	cmp	r4, r2
 800d768:	d002      	beq.n	800d770 <std+0x48>
 800d76a:	33d0      	adds	r3, #208	; 0xd0
 800d76c:	429c      	cmp	r4, r3
 800d76e:	d105      	bne.n	800d77c <std+0x54>
 800d770:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d778:	f000 b98a 	b.w	800da90 <__retarget_lock_init_recursive>
 800d77c:	bd10      	pop	{r4, pc}
 800d77e:	bf00      	nop
 800d780:	0800d915 	.word	0x0800d915
 800d784:	0800d937 	.word	0x0800d937
 800d788:	0800d96f 	.word	0x0800d96f
 800d78c:	0800d993 	.word	0x0800d993
 800d790:	20013ce8 	.word	0x20013ce8

0800d794 <stdio_exit_handler>:
 800d794:	4a02      	ldr	r2, [pc, #8]	; (800d7a0 <stdio_exit_handler+0xc>)
 800d796:	4903      	ldr	r1, [pc, #12]	; (800d7a4 <stdio_exit_handler+0x10>)
 800d798:	4803      	ldr	r0, [pc, #12]	; (800d7a8 <stdio_exit_handler+0x14>)
 800d79a:	f000 b869 	b.w	800d870 <_fwalk_sglue>
 800d79e:	bf00      	nop
 800d7a0:	2000001c 	.word	0x2000001c
 800d7a4:	0800f4a1 	.word	0x0800f4a1
 800d7a8:	20000194 	.word	0x20000194

0800d7ac <cleanup_stdio>:
 800d7ac:	6841      	ldr	r1, [r0, #4]
 800d7ae:	4b0c      	ldr	r3, [pc, #48]	; (800d7e0 <cleanup_stdio+0x34>)
 800d7b0:	4299      	cmp	r1, r3
 800d7b2:	b510      	push	{r4, lr}
 800d7b4:	4604      	mov	r4, r0
 800d7b6:	d001      	beq.n	800d7bc <cleanup_stdio+0x10>
 800d7b8:	f001 fe72 	bl	800f4a0 <_fflush_r>
 800d7bc:	68a1      	ldr	r1, [r4, #8]
 800d7be:	4b09      	ldr	r3, [pc, #36]	; (800d7e4 <cleanup_stdio+0x38>)
 800d7c0:	4299      	cmp	r1, r3
 800d7c2:	d002      	beq.n	800d7ca <cleanup_stdio+0x1e>
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	f001 fe6b 	bl	800f4a0 <_fflush_r>
 800d7ca:	68e1      	ldr	r1, [r4, #12]
 800d7cc:	4b06      	ldr	r3, [pc, #24]	; (800d7e8 <cleanup_stdio+0x3c>)
 800d7ce:	4299      	cmp	r1, r3
 800d7d0:	d004      	beq.n	800d7dc <cleanup_stdio+0x30>
 800d7d2:	4620      	mov	r0, r4
 800d7d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7d8:	f001 be62 	b.w	800f4a0 <_fflush_r>
 800d7dc:	bd10      	pop	{r4, pc}
 800d7de:	bf00      	nop
 800d7e0:	20013ce8 	.word	0x20013ce8
 800d7e4:	20013d50 	.word	0x20013d50
 800d7e8:	20013db8 	.word	0x20013db8

0800d7ec <global_stdio_init.part.0>:
 800d7ec:	b510      	push	{r4, lr}
 800d7ee:	4b0b      	ldr	r3, [pc, #44]	; (800d81c <global_stdio_init.part.0+0x30>)
 800d7f0:	4c0b      	ldr	r4, [pc, #44]	; (800d820 <global_stdio_init.part.0+0x34>)
 800d7f2:	4a0c      	ldr	r2, [pc, #48]	; (800d824 <global_stdio_init.part.0+0x38>)
 800d7f4:	601a      	str	r2, [r3, #0]
 800d7f6:	4620      	mov	r0, r4
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	2104      	movs	r1, #4
 800d7fc:	f7ff ff94 	bl	800d728 <std>
 800d800:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d804:	2201      	movs	r2, #1
 800d806:	2109      	movs	r1, #9
 800d808:	f7ff ff8e 	bl	800d728 <std>
 800d80c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d810:	2202      	movs	r2, #2
 800d812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d816:	2112      	movs	r1, #18
 800d818:	f7ff bf86 	b.w	800d728 <std>
 800d81c:	20013e20 	.word	0x20013e20
 800d820:	20013ce8 	.word	0x20013ce8
 800d824:	0800d795 	.word	0x0800d795

0800d828 <__sfp_lock_acquire>:
 800d828:	4801      	ldr	r0, [pc, #4]	; (800d830 <__sfp_lock_acquire+0x8>)
 800d82a:	f000 b932 	b.w	800da92 <__retarget_lock_acquire_recursive>
 800d82e:	bf00      	nop
 800d830:	20013e29 	.word	0x20013e29

0800d834 <__sfp_lock_release>:
 800d834:	4801      	ldr	r0, [pc, #4]	; (800d83c <__sfp_lock_release+0x8>)
 800d836:	f000 b92d 	b.w	800da94 <__retarget_lock_release_recursive>
 800d83a:	bf00      	nop
 800d83c:	20013e29 	.word	0x20013e29

0800d840 <__sinit>:
 800d840:	b510      	push	{r4, lr}
 800d842:	4604      	mov	r4, r0
 800d844:	f7ff fff0 	bl	800d828 <__sfp_lock_acquire>
 800d848:	6a23      	ldr	r3, [r4, #32]
 800d84a:	b11b      	cbz	r3, 800d854 <__sinit+0x14>
 800d84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d850:	f7ff bff0 	b.w	800d834 <__sfp_lock_release>
 800d854:	4b04      	ldr	r3, [pc, #16]	; (800d868 <__sinit+0x28>)
 800d856:	6223      	str	r3, [r4, #32]
 800d858:	4b04      	ldr	r3, [pc, #16]	; (800d86c <__sinit+0x2c>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d1f5      	bne.n	800d84c <__sinit+0xc>
 800d860:	f7ff ffc4 	bl	800d7ec <global_stdio_init.part.0>
 800d864:	e7f2      	b.n	800d84c <__sinit+0xc>
 800d866:	bf00      	nop
 800d868:	0800d7ad 	.word	0x0800d7ad
 800d86c:	20013e20 	.word	0x20013e20

0800d870 <_fwalk_sglue>:
 800d870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d874:	4607      	mov	r7, r0
 800d876:	4688      	mov	r8, r1
 800d878:	4614      	mov	r4, r2
 800d87a:	2600      	movs	r6, #0
 800d87c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d880:	f1b9 0901 	subs.w	r9, r9, #1
 800d884:	d505      	bpl.n	800d892 <_fwalk_sglue+0x22>
 800d886:	6824      	ldr	r4, [r4, #0]
 800d888:	2c00      	cmp	r4, #0
 800d88a:	d1f7      	bne.n	800d87c <_fwalk_sglue+0xc>
 800d88c:	4630      	mov	r0, r6
 800d88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d892:	89ab      	ldrh	r3, [r5, #12]
 800d894:	2b01      	cmp	r3, #1
 800d896:	d907      	bls.n	800d8a8 <_fwalk_sglue+0x38>
 800d898:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d89c:	3301      	adds	r3, #1
 800d89e:	d003      	beq.n	800d8a8 <_fwalk_sglue+0x38>
 800d8a0:	4629      	mov	r1, r5
 800d8a2:	4638      	mov	r0, r7
 800d8a4:	47c0      	blx	r8
 800d8a6:	4306      	orrs	r6, r0
 800d8a8:	3568      	adds	r5, #104	; 0x68
 800d8aa:	e7e9      	b.n	800d880 <_fwalk_sglue+0x10>

0800d8ac <sniprintf>:
 800d8ac:	b40c      	push	{r2, r3}
 800d8ae:	b530      	push	{r4, r5, lr}
 800d8b0:	4b17      	ldr	r3, [pc, #92]	; (800d910 <sniprintf+0x64>)
 800d8b2:	1e0c      	subs	r4, r1, #0
 800d8b4:	681d      	ldr	r5, [r3, #0]
 800d8b6:	b09d      	sub	sp, #116	; 0x74
 800d8b8:	da08      	bge.n	800d8cc <sniprintf+0x20>
 800d8ba:	238b      	movs	r3, #139	; 0x8b
 800d8bc:	602b      	str	r3, [r5, #0]
 800d8be:	f04f 30ff 	mov.w	r0, #4294967295
 800d8c2:	b01d      	add	sp, #116	; 0x74
 800d8c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d8c8:	b002      	add	sp, #8
 800d8ca:	4770      	bx	lr
 800d8cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d8d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d8d4:	bf14      	ite	ne
 800d8d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d8da:	4623      	moveq	r3, r4
 800d8dc:	9304      	str	r3, [sp, #16]
 800d8de:	9307      	str	r3, [sp, #28]
 800d8e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d8e4:	9002      	str	r0, [sp, #8]
 800d8e6:	9006      	str	r0, [sp, #24]
 800d8e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d8ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d8ee:	ab21      	add	r3, sp, #132	; 0x84
 800d8f0:	a902      	add	r1, sp, #8
 800d8f2:	4628      	mov	r0, r5
 800d8f4:	9301      	str	r3, [sp, #4]
 800d8f6:	f001 fc4f 	bl	800f198 <_svfiprintf_r>
 800d8fa:	1c43      	adds	r3, r0, #1
 800d8fc:	bfbc      	itt	lt
 800d8fe:	238b      	movlt	r3, #139	; 0x8b
 800d900:	602b      	strlt	r3, [r5, #0]
 800d902:	2c00      	cmp	r4, #0
 800d904:	d0dd      	beq.n	800d8c2 <sniprintf+0x16>
 800d906:	9b02      	ldr	r3, [sp, #8]
 800d908:	2200      	movs	r2, #0
 800d90a:	701a      	strb	r2, [r3, #0]
 800d90c:	e7d9      	b.n	800d8c2 <sniprintf+0x16>
 800d90e:	bf00      	nop
 800d910:	200001e0 	.word	0x200001e0

0800d914 <__sread>:
 800d914:	b510      	push	{r4, lr}
 800d916:	460c      	mov	r4, r1
 800d918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d91c:	f000 f87c 	bl	800da18 <_read_r>
 800d920:	2800      	cmp	r0, #0
 800d922:	bfab      	itete	ge
 800d924:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d926:	89a3      	ldrhlt	r3, [r4, #12]
 800d928:	181b      	addge	r3, r3, r0
 800d92a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d92e:	bfac      	ite	ge
 800d930:	6563      	strge	r3, [r4, #84]	; 0x54
 800d932:	81a3      	strhlt	r3, [r4, #12]
 800d934:	bd10      	pop	{r4, pc}

0800d936 <__swrite>:
 800d936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d93a:	461f      	mov	r7, r3
 800d93c:	898b      	ldrh	r3, [r1, #12]
 800d93e:	05db      	lsls	r3, r3, #23
 800d940:	4605      	mov	r5, r0
 800d942:	460c      	mov	r4, r1
 800d944:	4616      	mov	r6, r2
 800d946:	d505      	bpl.n	800d954 <__swrite+0x1e>
 800d948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d94c:	2302      	movs	r3, #2
 800d94e:	2200      	movs	r2, #0
 800d950:	f000 f850 	bl	800d9f4 <_lseek_r>
 800d954:	89a3      	ldrh	r3, [r4, #12]
 800d956:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d95a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d95e:	81a3      	strh	r3, [r4, #12]
 800d960:	4632      	mov	r2, r6
 800d962:	463b      	mov	r3, r7
 800d964:	4628      	mov	r0, r5
 800d966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d96a:	f7ff b9d5 	b.w	800cd18 <_write_r>

0800d96e <__sseek>:
 800d96e:	b510      	push	{r4, lr}
 800d970:	460c      	mov	r4, r1
 800d972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d976:	f000 f83d 	bl	800d9f4 <_lseek_r>
 800d97a:	1c43      	adds	r3, r0, #1
 800d97c:	89a3      	ldrh	r3, [r4, #12]
 800d97e:	bf15      	itete	ne
 800d980:	6560      	strne	r0, [r4, #84]	; 0x54
 800d982:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d986:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d98a:	81a3      	strheq	r3, [r4, #12]
 800d98c:	bf18      	it	ne
 800d98e:	81a3      	strhne	r3, [r4, #12]
 800d990:	bd10      	pop	{r4, pc}

0800d992 <__sclose>:
 800d992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d996:	f000 b81d 	b.w	800d9d4 <_close_r>

0800d99a <memcmp>:
 800d99a:	b510      	push	{r4, lr}
 800d99c:	3901      	subs	r1, #1
 800d99e:	4402      	add	r2, r0
 800d9a0:	4290      	cmp	r0, r2
 800d9a2:	d101      	bne.n	800d9a8 <memcmp+0xe>
 800d9a4:	2000      	movs	r0, #0
 800d9a6:	e005      	b.n	800d9b4 <memcmp+0x1a>
 800d9a8:	7803      	ldrb	r3, [r0, #0]
 800d9aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d9ae:	42a3      	cmp	r3, r4
 800d9b0:	d001      	beq.n	800d9b6 <memcmp+0x1c>
 800d9b2:	1b18      	subs	r0, r3, r4
 800d9b4:	bd10      	pop	{r4, pc}
 800d9b6:	3001      	adds	r0, #1
 800d9b8:	e7f2      	b.n	800d9a0 <memcmp+0x6>

0800d9ba <memset>:
 800d9ba:	4402      	add	r2, r0
 800d9bc:	4603      	mov	r3, r0
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d100      	bne.n	800d9c4 <memset+0xa>
 800d9c2:	4770      	bx	lr
 800d9c4:	f803 1b01 	strb.w	r1, [r3], #1
 800d9c8:	e7f9      	b.n	800d9be <memset+0x4>
	...

0800d9cc <_localeconv_r>:
 800d9cc:	4800      	ldr	r0, [pc, #0]	; (800d9d0 <_localeconv_r+0x4>)
 800d9ce:	4770      	bx	lr
 800d9d0:	20000118 	.word	0x20000118

0800d9d4 <_close_r>:
 800d9d4:	b538      	push	{r3, r4, r5, lr}
 800d9d6:	4d06      	ldr	r5, [pc, #24]	; (800d9f0 <_close_r+0x1c>)
 800d9d8:	2300      	movs	r3, #0
 800d9da:	4604      	mov	r4, r0
 800d9dc:	4608      	mov	r0, r1
 800d9de:	602b      	str	r3, [r5, #0]
 800d9e0:	f7f6 faf9 	bl	8003fd6 <_close>
 800d9e4:	1c43      	adds	r3, r0, #1
 800d9e6:	d102      	bne.n	800d9ee <_close_r+0x1a>
 800d9e8:	682b      	ldr	r3, [r5, #0]
 800d9ea:	b103      	cbz	r3, 800d9ee <_close_r+0x1a>
 800d9ec:	6023      	str	r3, [r4, #0]
 800d9ee:	bd38      	pop	{r3, r4, r5, pc}
 800d9f0:	20013e24 	.word	0x20013e24

0800d9f4 <_lseek_r>:
 800d9f4:	b538      	push	{r3, r4, r5, lr}
 800d9f6:	4d07      	ldr	r5, [pc, #28]	; (800da14 <_lseek_r+0x20>)
 800d9f8:	4604      	mov	r4, r0
 800d9fa:	4608      	mov	r0, r1
 800d9fc:	4611      	mov	r1, r2
 800d9fe:	2200      	movs	r2, #0
 800da00:	602a      	str	r2, [r5, #0]
 800da02:	461a      	mov	r2, r3
 800da04:	f7f6 fb0e 	bl	8004024 <_lseek>
 800da08:	1c43      	adds	r3, r0, #1
 800da0a:	d102      	bne.n	800da12 <_lseek_r+0x1e>
 800da0c:	682b      	ldr	r3, [r5, #0]
 800da0e:	b103      	cbz	r3, 800da12 <_lseek_r+0x1e>
 800da10:	6023      	str	r3, [r4, #0]
 800da12:	bd38      	pop	{r3, r4, r5, pc}
 800da14:	20013e24 	.word	0x20013e24

0800da18 <_read_r>:
 800da18:	b538      	push	{r3, r4, r5, lr}
 800da1a:	4d07      	ldr	r5, [pc, #28]	; (800da38 <_read_r+0x20>)
 800da1c:	4604      	mov	r4, r0
 800da1e:	4608      	mov	r0, r1
 800da20:	4611      	mov	r1, r2
 800da22:	2200      	movs	r2, #0
 800da24:	602a      	str	r2, [r5, #0]
 800da26:	461a      	mov	r2, r3
 800da28:	f7f6 fab8 	bl	8003f9c <_read>
 800da2c:	1c43      	adds	r3, r0, #1
 800da2e:	d102      	bne.n	800da36 <_read_r+0x1e>
 800da30:	682b      	ldr	r3, [r5, #0]
 800da32:	b103      	cbz	r3, 800da36 <_read_r+0x1e>
 800da34:	6023      	str	r3, [r4, #0]
 800da36:	bd38      	pop	{r3, r4, r5, pc}
 800da38:	20013e24 	.word	0x20013e24

0800da3c <__errno>:
 800da3c:	4b01      	ldr	r3, [pc, #4]	; (800da44 <__errno+0x8>)
 800da3e:	6818      	ldr	r0, [r3, #0]
 800da40:	4770      	bx	lr
 800da42:	bf00      	nop
 800da44:	200001e0 	.word	0x200001e0

0800da48 <__libc_init_array>:
 800da48:	b570      	push	{r4, r5, r6, lr}
 800da4a:	4d0d      	ldr	r5, [pc, #52]	; (800da80 <__libc_init_array+0x38>)
 800da4c:	4c0d      	ldr	r4, [pc, #52]	; (800da84 <__libc_init_array+0x3c>)
 800da4e:	1b64      	subs	r4, r4, r5
 800da50:	10a4      	asrs	r4, r4, #2
 800da52:	2600      	movs	r6, #0
 800da54:	42a6      	cmp	r6, r4
 800da56:	d109      	bne.n	800da6c <__libc_init_array+0x24>
 800da58:	4d0b      	ldr	r5, [pc, #44]	; (800da88 <__libc_init_array+0x40>)
 800da5a:	4c0c      	ldr	r4, [pc, #48]	; (800da8c <__libc_init_array+0x44>)
 800da5c:	f003 f828 	bl	8010ab0 <_init>
 800da60:	1b64      	subs	r4, r4, r5
 800da62:	10a4      	asrs	r4, r4, #2
 800da64:	2600      	movs	r6, #0
 800da66:	42a6      	cmp	r6, r4
 800da68:	d105      	bne.n	800da76 <__libc_init_array+0x2e>
 800da6a:	bd70      	pop	{r4, r5, r6, pc}
 800da6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800da70:	4798      	blx	r3
 800da72:	3601      	adds	r6, #1
 800da74:	e7ee      	b.n	800da54 <__libc_init_array+0xc>
 800da76:	f855 3b04 	ldr.w	r3, [r5], #4
 800da7a:	4798      	blx	r3
 800da7c:	3601      	adds	r6, #1
 800da7e:	e7f2      	b.n	800da66 <__libc_init_array+0x1e>
 800da80:	08011068 	.word	0x08011068
 800da84:	08011068 	.word	0x08011068
 800da88:	08011068 	.word	0x08011068
 800da8c:	0801106c 	.word	0x0801106c

0800da90 <__retarget_lock_init_recursive>:
 800da90:	4770      	bx	lr

0800da92 <__retarget_lock_acquire_recursive>:
 800da92:	4770      	bx	lr

0800da94 <__retarget_lock_release_recursive>:
 800da94:	4770      	bx	lr

0800da96 <memcpy>:
 800da96:	440a      	add	r2, r1
 800da98:	4291      	cmp	r1, r2
 800da9a:	f100 33ff 	add.w	r3, r0, #4294967295
 800da9e:	d100      	bne.n	800daa2 <memcpy+0xc>
 800daa0:	4770      	bx	lr
 800daa2:	b510      	push	{r4, lr}
 800daa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800daa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800daac:	4291      	cmp	r1, r2
 800daae:	d1f9      	bne.n	800daa4 <memcpy+0xe>
 800dab0:	bd10      	pop	{r4, pc}

0800dab2 <quorem>:
 800dab2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dab6:	6903      	ldr	r3, [r0, #16]
 800dab8:	690c      	ldr	r4, [r1, #16]
 800daba:	42a3      	cmp	r3, r4
 800dabc:	4607      	mov	r7, r0
 800dabe:	db7e      	blt.n	800dbbe <quorem+0x10c>
 800dac0:	3c01      	subs	r4, #1
 800dac2:	f101 0814 	add.w	r8, r1, #20
 800dac6:	f100 0514 	add.w	r5, r0, #20
 800daca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dace:	9301      	str	r3, [sp, #4]
 800dad0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dad4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dad8:	3301      	adds	r3, #1
 800dada:	429a      	cmp	r2, r3
 800dadc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dae0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dae4:	fbb2 f6f3 	udiv	r6, r2, r3
 800dae8:	d331      	bcc.n	800db4e <quorem+0x9c>
 800daea:	f04f 0e00 	mov.w	lr, #0
 800daee:	4640      	mov	r0, r8
 800daf0:	46ac      	mov	ip, r5
 800daf2:	46f2      	mov	sl, lr
 800daf4:	f850 2b04 	ldr.w	r2, [r0], #4
 800daf8:	b293      	uxth	r3, r2
 800dafa:	fb06 e303 	mla	r3, r6, r3, lr
 800dafe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800db02:	0c1a      	lsrs	r2, r3, #16
 800db04:	b29b      	uxth	r3, r3
 800db06:	ebaa 0303 	sub.w	r3, sl, r3
 800db0a:	f8dc a000 	ldr.w	sl, [ip]
 800db0e:	fa13 f38a 	uxtah	r3, r3, sl
 800db12:	fb06 220e 	mla	r2, r6, lr, r2
 800db16:	9300      	str	r3, [sp, #0]
 800db18:	9b00      	ldr	r3, [sp, #0]
 800db1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800db1e:	b292      	uxth	r2, r2
 800db20:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800db24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800db28:	f8bd 3000 	ldrh.w	r3, [sp]
 800db2c:	4581      	cmp	r9, r0
 800db2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db32:	f84c 3b04 	str.w	r3, [ip], #4
 800db36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800db3a:	d2db      	bcs.n	800daf4 <quorem+0x42>
 800db3c:	f855 300b 	ldr.w	r3, [r5, fp]
 800db40:	b92b      	cbnz	r3, 800db4e <quorem+0x9c>
 800db42:	9b01      	ldr	r3, [sp, #4]
 800db44:	3b04      	subs	r3, #4
 800db46:	429d      	cmp	r5, r3
 800db48:	461a      	mov	r2, r3
 800db4a:	d32c      	bcc.n	800dba6 <quorem+0xf4>
 800db4c:	613c      	str	r4, [r7, #16]
 800db4e:	4638      	mov	r0, r7
 800db50:	f001 f9ba 	bl	800eec8 <__mcmp>
 800db54:	2800      	cmp	r0, #0
 800db56:	db22      	blt.n	800db9e <quorem+0xec>
 800db58:	3601      	adds	r6, #1
 800db5a:	4629      	mov	r1, r5
 800db5c:	2000      	movs	r0, #0
 800db5e:	f858 2b04 	ldr.w	r2, [r8], #4
 800db62:	f8d1 c000 	ldr.w	ip, [r1]
 800db66:	b293      	uxth	r3, r2
 800db68:	1ac3      	subs	r3, r0, r3
 800db6a:	0c12      	lsrs	r2, r2, #16
 800db6c:	fa13 f38c 	uxtah	r3, r3, ip
 800db70:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800db74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800db78:	b29b      	uxth	r3, r3
 800db7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db7e:	45c1      	cmp	r9, r8
 800db80:	f841 3b04 	str.w	r3, [r1], #4
 800db84:	ea4f 4022 	mov.w	r0, r2, asr #16
 800db88:	d2e9      	bcs.n	800db5e <quorem+0xac>
 800db8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800db92:	b922      	cbnz	r2, 800db9e <quorem+0xec>
 800db94:	3b04      	subs	r3, #4
 800db96:	429d      	cmp	r5, r3
 800db98:	461a      	mov	r2, r3
 800db9a:	d30a      	bcc.n	800dbb2 <quorem+0x100>
 800db9c:	613c      	str	r4, [r7, #16]
 800db9e:	4630      	mov	r0, r6
 800dba0:	b003      	add	sp, #12
 800dba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dba6:	6812      	ldr	r2, [r2, #0]
 800dba8:	3b04      	subs	r3, #4
 800dbaa:	2a00      	cmp	r2, #0
 800dbac:	d1ce      	bne.n	800db4c <quorem+0x9a>
 800dbae:	3c01      	subs	r4, #1
 800dbb0:	e7c9      	b.n	800db46 <quorem+0x94>
 800dbb2:	6812      	ldr	r2, [r2, #0]
 800dbb4:	3b04      	subs	r3, #4
 800dbb6:	2a00      	cmp	r2, #0
 800dbb8:	d1f0      	bne.n	800db9c <quorem+0xea>
 800dbba:	3c01      	subs	r4, #1
 800dbbc:	e7eb      	b.n	800db96 <quorem+0xe4>
 800dbbe:	2000      	movs	r0, #0
 800dbc0:	e7ee      	b.n	800dba0 <quorem+0xee>
 800dbc2:	0000      	movs	r0, r0
 800dbc4:	0000      	movs	r0, r0
	...

0800dbc8 <_dtoa_r>:
 800dbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbcc:	ed2d 8b04 	vpush	{d8-d9}
 800dbd0:	69c5      	ldr	r5, [r0, #28]
 800dbd2:	b093      	sub	sp, #76	; 0x4c
 800dbd4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dbd8:	ec57 6b10 	vmov	r6, r7, d0
 800dbdc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dbe0:	9107      	str	r1, [sp, #28]
 800dbe2:	4604      	mov	r4, r0
 800dbe4:	920a      	str	r2, [sp, #40]	; 0x28
 800dbe6:	930d      	str	r3, [sp, #52]	; 0x34
 800dbe8:	b975      	cbnz	r5, 800dc08 <_dtoa_r+0x40>
 800dbea:	2010      	movs	r0, #16
 800dbec:	f000 fe2a 	bl	800e844 <malloc>
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	61e0      	str	r0, [r4, #28]
 800dbf4:	b920      	cbnz	r0, 800dc00 <_dtoa_r+0x38>
 800dbf6:	4bae      	ldr	r3, [pc, #696]	; (800deb0 <_dtoa_r+0x2e8>)
 800dbf8:	21ef      	movs	r1, #239	; 0xef
 800dbfa:	48ae      	ldr	r0, [pc, #696]	; (800deb4 <_dtoa_r+0x2ec>)
 800dbfc:	f001 fca2 	bl	800f544 <__assert_func>
 800dc00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dc04:	6005      	str	r5, [r0, #0]
 800dc06:	60c5      	str	r5, [r0, #12]
 800dc08:	69e3      	ldr	r3, [r4, #28]
 800dc0a:	6819      	ldr	r1, [r3, #0]
 800dc0c:	b151      	cbz	r1, 800dc24 <_dtoa_r+0x5c>
 800dc0e:	685a      	ldr	r2, [r3, #4]
 800dc10:	604a      	str	r2, [r1, #4]
 800dc12:	2301      	movs	r3, #1
 800dc14:	4093      	lsls	r3, r2
 800dc16:	608b      	str	r3, [r1, #8]
 800dc18:	4620      	mov	r0, r4
 800dc1a:	f000 ff19 	bl	800ea50 <_Bfree>
 800dc1e:	69e3      	ldr	r3, [r4, #28]
 800dc20:	2200      	movs	r2, #0
 800dc22:	601a      	str	r2, [r3, #0]
 800dc24:	1e3b      	subs	r3, r7, #0
 800dc26:	bfbb      	ittet	lt
 800dc28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dc2c:	9303      	strlt	r3, [sp, #12]
 800dc2e:	2300      	movge	r3, #0
 800dc30:	2201      	movlt	r2, #1
 800dc32:	bfac      	ite	ge
 800dc34:	f8c8 3000 	strge.w	r3, [r8]
 800dc38:	f8c8 2000 	strlt.w	r2, [r8]
 800dc3c:	4b9e      	ldr	r3, [pc, #632]	; (800deb8 <_dtoa_r+0x2f0>)
 800dc3e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800dc42:	ea33 0308 	bics.w	r3, r3, r8
 800dc46:	d11b      	bne.n	800dc80 <_dtoa_r+0xb8>
 800dc48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dc4a:	f242 730f 	movw	r3, #9999	; 0x270f
 800dc4e:	6013      	str	r3, [r2, #0]
 800dc50:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800dc54:	4333      	orrs	r3, r6
 800dc56:	f000 8593 	beq.w	800e780 <_dtoa_r+0xbb8>
 800dc5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc5c:	b963      	cbnz	r3, 800dc78 <_dtoa_r+0xb0>
 800dc5e:	4b97      	ldr	r3, [pc, #604]	; (800debc <_dtoa_r+0x2f4>)
 800dc60:	e027      	b.n	800dcb2 <_dtoa_r+0xea>
 800dc62:	4b97      	ldr	r3, [pc, #604]	; (800dec0 <_dtoa_r+0x2f8>)
 800dc64:	9300      	str	r3, [sp, #0]
 800dc66:	3308      	adds	r3, #8
 800dc68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dc6a:	6013      	str	r3, [r2, #0]
 800dc6c:	9800      	ldr	r0, [sp, #0]
 800dc6e:	b013      	add	sp, #76	; 0x4c
 800dc70:	ecbd 8b04 	vpop	{d8-d9}
 800dc74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc78:	4b90      	ldr	r3, [pc, #576]	; (800debc <_dtoa_r+0x2f4>)
 800dc7a:	9300      	str	r3, [sp, #0]
 800dc7c:	3303      	adds	r3, #3
 800dc7e:	e7f3      	b.n	800dc68 <_dtoa_r+0xa0>
 800dc80:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dc84:	2200      	movs	r2, #0
 800dc86:	ec51 0b17 	vmov	r0, r1, d7
 800dc8a:	eeb0 8a47 	vmov.f32	s16, s14
 800dc8e:	eef0 8a67 	vmov.f32	s17, s15
 800dc92:	2300      	movs	r3, #0
 800dc94:	f7f2 ff88 	bl	8000ba8 <__aeabi_dcmpeq>
 800dc98:	4681      	mov	r9, r0
 800dc9a:	b160      	cbz	r0, 800dcb6 <_dtoa_r+0xee>
 800dc9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dc9e:	2301      	movs	r3, #1
 800dca0:	6013      	str	r3, [r2, #0]
 800dca2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	f000 8568 	beq.w	800e77a <_dtoa_r+0xbb2>
 800dcaa:	4b86      	ldr	r3, [pc, #536]	; (800dec4 <_dtoa_r+0x2fc>)
 800dcac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dcae:	6013      	str	r3, [r2, #0]
 800dcb0:	3b01      	subs	r3, #1
 800dcb2:	9300      	str	r3, [sp, #0]
 800dcb4:	e7da      	b.n	800dc6c <_dtoa_r+0xa4>
 800dcb6:	aa10      	add	r2, sp, #64	; 0x40
 800dcb8:	a911      	add	r1, sp, #68	; 0x44
 800dcba:	4620      	mov	r0, r4
 800dcbc:	eeb0 0a48 	vmov.f32	s0, s16
 800dcc0:	eef0 0a68 	vmov.f32	s1, s17
 800dcc4:	f001 f9a6 	bl	800f014 <__d2b>
 800dcc8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800dccc:	4682      	mov	sl, r0
 800dcce:	2d00      	cmp	r5, #0
 800dcd0:	d07f      	beq.n	800ddd2 <_dtoa_r+0x20a>
 800dcd2:	ee18 3a90 	vmov	r3, s17
 800dcd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dcda:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800dcde:	ec51 0b18 	vmov	r0, r1, d8
 800dce2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dce6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dcea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800dcee:	4619      	mov	r1, r3
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	4b75      	ldr	r3, [pc, #468]	; (800dec8 <_dtoa_r+0x300>)
 800dcf4:	f7f2 fb38 	bl	8000368 <__aeabi_dsub>
 800dcf8:	a367      	add	r3, pc, #412	; (adr r3, 800de98 <_dtoa_r+0x2d0>)
 800dcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcfe:	f7f2 fceb 	bl	80006d8 <__aeabi_dmul>
 800dd02:	a367      	add	r3, pc, #412	; (adr r3, 800dea0 <_dtoa_r+0x2d8>)
 800dd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd08:	f7f2 fb30 	bl	800036c <__adddf3>
 800dd0c:	4606      	mov	r6, r0
 800dd0e:	4628      	mov	r0, r5
 800dd10:	460f      	mov	r7, r1
 800dd12:	f7f2 fc77 	bl	8000604 <__aeabi_i2d>
 800dd16:	a364      	add	r3, pc, #400	; (adr r3, 800dea8 <_dtoa_r+0x2e0>)
 800dd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1c:	f7f2 fcdc 	bl	80006d8 <__aeabi_dmul>
 800dd20:	4602      	mov	r2, r0
 800dd22:	460b      	mov	r3, r1
 800dd24:	4630      	mov	r0, r6
 800dd26:	4639      	mov	r1, r7
 800dd28:	f7f2 fb20 	bl	800036c <__adddf3>
 800dd2c:	4606      	mov	r6, r0
 800dd2e:	460f      	mov	r7, r1
 800dd30:	f7f2 ff82 	bl	8000c38 <__aeabi_d2iz>
 800dd34:	2200      	movs	r2, #0
 800dd36:	4683      	mov	fp, r0
 800dd38:	2300      	movs	r3, #0
 800dd3a:	4630      	mov	r0, r6
 800dd3c:	4639      	mov	r1, r7
 800dd3e:	f7f2 ff3d 	bl	8000bbc <__aeabi_dcmplt>
 800dd42:	b148      	cbz	r0, 800dd58 <_dtoa_r+0x190>
 800dd44:	4658      	mov	r0, fp
 800dd46:	f7f2 fc5d 	bl	8000604 <__aeabi_i2d>
 800dd4a:	4632      	mov	r2, r6
 800dd4c:	463b      	mov	r3, r7
 800dd4e:	f7f2 ff2b 	bl	8000ba8 <__aeabi_dcmpeq>
 800dd52:	b908      	cbnz	r0, 800dd58 <_dtoa_r+0x190>
 800dd54:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dd58:	f1bb 0f16 	cmp.w	fp, #22
 800dd5c:	d857      	bhi.n	800de0e <_dtoa_r+0x246>
 800dd5e:	4b5b      	ldr	r3, [pc, #364]	; (800decc <_dtoa_r+0x304>)
 800dd60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd68:	ec51 0b18 	vmov	r0, r1, d8
 800dd6c:	f7f2 ff26 	bl	8000bbc <__aeabi_dcmplt>
 800dd70:	2800      	cmp	r0, #0
 800dd72:	d04e      	beq.n	800de12 <_dtoa_r+0x24a>
 800dd74:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dd78:	2300      	movs	r3, #0
 800dd7a:	930c      	str	r3, [sp, #48]	; 0x30
 800dd7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd7e:	1b5b      	subs	r3, r3, r5
 800dd80:	1e5a      	subs	r2, r3, #1
 800dd82:	bf45      	ittet	mi
 800dd84:	f1c3 0301 	rsbmi	r3, r3, #1
 800dd88:	9305      	strmi	r3, [sp, #20]
 800dd8a:	2300      	movpl	r3, #0
 800dd8c:	2300      	movmi	r3, #0
 800dd8e:	9206      	str	r2, [sp, #24]
 800dd90:	bf54      	ite	pl
 800dd92:	9305      	strpl	r3, [sp, #20]
 800dd94:	9306      	strmi	r3, [sp, #24]
 800dd96:	f1bb 0f00 	cmp.w	fp, #0
 800dd9a:	db3c      	blt.n	800de16 <_dtoa_r+0x24e>
 800dd9c:	9b06      	ldr	r3, [sp, #24]
 800dd9e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800dda2:	445b      	add	r3, fp
 800dda4:	9306      	str	r3, [sp, #24]
 800dda6:	2300      	movs	r3, #0
 800dda8:	9308      	str	r3, [sp, #32]
 800ddaa:	9b07      	ldr	r3, [sp, #28]
 800ddac:	2b09      	cmp	r3, #9
 800ddae:	d868      	bhi.n	800de82 <_dtoa_r+0x2ba>
 800ddb0:	2b05      	cmp	r3, #5
 800ddb2:	bfc4      	itt	gt
 800ddb4:	3b04      	subgt	r3, #4
 800ddb6:	9307      	strgt	r3, [sp, #28]
 800ddb8:	9b07      	ldr	r3, [sp, #28]
 800ddba:	f1a3 0302 	sub.w	r3, r3, #2
 800ddbe:	bfcc      	ite	gt
 800ddc0:	2500      	movgt	r5, #0
 800ddc2:	2501      	movle	r5, #1
 800ddc4:	2b03      	cmp	r3, #3
 800ddc6:	f200 8085 	bhi.w	800ded4 <_dtoa_r+0x30c>
 800ddca:	e8df f003 	tbb	[pc, r3]
 800ddce:	3b2e      	.short	0x3b2e
 800ddd0:	5839      	.short	0x5839
 800ddd2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ddd6:	441d      	add	r5, r3
 800ddd8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dddc:	2b20      	cmp	r3, #32
 800ddde:	bfc1      	itttt	gt
 800dde0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dde4:	fa08 f803 	lslgt.w	r8, r8, r3
 800dde8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ddec:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ddf0:	bfd6      	itet	le
 800ddf2:	f1c3 0320 	rsble	r3, r3, #32
 800ddf6:	ea48 0003 	orrgt.w	r0, r8, r3
 800ddfa:	fa06 f003 	lslle.w	r0, r6, r3
 800ddfe:	f7f2 fbf1 	bl	80005e4 <__aeabi_ui2d>
 800de02:	2201      	movs	r2, #1
 800de04:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800de08:	3d01      	subs	r5, #1
 800de0a:	920e      	str	r2, [sp, #56]	; 0x38
 800de0c:	e76f      	b.n	800dcee <_dtoa_r+0x126>
 800de0e:	2301      	movs	r3, #1
 800de10:	e7b3      	b.n	800dd7a <_dtoa_r+0x1b2>
 800de12:	900c      	str	r0, [sp, #48]	; 0x30
 800de14:	e7b2      	b.n	800dd7c <_dtoa_r+0x1b4>
 800de16:	9b05      	ldr	r3, [sp, #20]
 800de18:	eba3 030b 	sub.w	r3, r3, fp
 800de1c:	9305      	str	r3, [sp, #20]
 800de1e:	f1cb 0300 	rsb	r3, fp, #0
 800de22:	9308      	str	r3, [sp, #32]
 800de24:	2300      	movs	r3, #0
 800de26:	930b      	str	r3, [sp, #44]	; 0x2c
 800de28:	e7bf      	b.n	800ddaa <_dtoa_r+0x1e2>
 800de2a:	2300      	movs	r3, #0
 800de2c:	9309      	str	r3, [sp, #36]	; 0x24
 800de2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de30:	2b00      	cmp	r3, #0
 800de32:	dc52      	bgt.n	800deda <_dtoa_r+0x312>
 800de34:	2301      	movs	r3, #1
 800de36:	9301      	str	r3, [sp, #4]
 800de38:	9304      	str	r3, [sp, #16]
 800de3a:	461a      	mov	r2, r3
 800de3c:	920a      	str	r2, [sp, #40]	; 0x28
 800de3e:	e00b      	b.n	800de58 <_dtoa_r+0x290>
 800de40:	2301      	movs	r3, #1
 800de42:	e7f3      	b.n	800de2c <_dtoa_r+0x264>
 800de44:	2300      	movs	r3, #0
 800de46:	9309      	str	r3, [sp, #36]	; 0x24
 800de48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de4a:	445b      	add	r3, fp
 800de4c:	9301      	str	r3, [sp, #4]
 800de4e:	3301      	adds	r3, #1
 800de50:	2b01      	cmp	r3, #1
 800de52:	9304      	str	r3, [sp, #16]
 800de54:	bfb8      	it	lt
 800de56:	2301      	movlt	r3, #1
 800de58:	69e0      	ldr	r0, [r4, #28]
 800de5a:	2100      	movs	r1, #0
 800de5c:	2204      	movs	r2, #4
 800de5e:	f102 0614 	add.w	r6, r2, #20
 800de62:	429e      	cmp	r6, r3
 800de64:	d93d      	bls.n	800dee2 <_dtoa_r+0x31a>
 800de66:	6041      	str	r1, [r0, #4]
 800de68:	4620      	mov	r0, r4
 800de6a:	f000 fdb1 	bl	800e9d0 <_Balloc>
 800de6e:	9000      	str	r0, [sp, #0]
 800de70:	2800      	cmp	r0, #0
 800de72:	d139      	bne.n	800dee8 <_dtoa_r+0x320>
 800de74:	4b16      	ldr	r3, [pc, #88]	; (800ded0 <_dtoa_r+0x308>)
 800de76:	4602      	mov	r2, r0
 800de78:	f240 11af 	movw	r1, #431	; 0x1af
 800de7c:	e6bd      	b.n	800dbfa <_dtoa_r+0x32>
 800de7e:	2301      	movs	r3, #1
 800de80:	e7e1      	b.n	800de46 <_dtoa_r+0x27e>
 800de82:	2501      	movs	r5, #1
 800de84:	2300      	movs	r3, #0
 800de86:	9307      	str	r3, [sp, #28]
 800de88:	9509      	str	r5, [sp, #36]	; 0x24
 800de8a:	f04f 33ff 	mov.w	r3, #4294967295
 800de8e:	9301      	str	r3, [sp, #4]
 800de90:	9304      	str	r3, [sp, #16]
 800de92:	2200      	movs	r2, #0
 800de94:	2312      	movs	r3, #18
 800de96:	e7d1      	b.n	800de3c <_dtoa_r+0x274>
 800de98:	636f4361 	.word	0x636f4361
 800de9c:	3fd287a7 	.word	0x3fd287a7
 800dea0:	8b60c8b3 	.word	0x8b60c8b3
 800dea4:	3fc68a28 	.word	0x3fc68a28
 800dea8:	509f79fb 	.word	0x509f79fb
 800deac:	3fd34413 	.word	0x3fd34413
 800deb0:	08010e06 	.word	0x08010e06
 800deb4:	08010e1d 	.word	0x08010e1d
 800deb8:	7ff00000 	.word	0x7ff00000
 800debc:	08010e02 	.word	0x08010e02
 800dec0:	08010df9 	.word	0x08010df9
 800dec4:	08010dcc 	.word	0x08010dcc
 800dec8:	3ff80000 	.word	0x3ff80000
 800decc:	08010f08 	.word	0x08010f08
 800ded0:	08010e75 	.word	0x08010e75
 800ded4:	2301      	movs	r3, #1
 800ded6:	9309      	str	r3, [sp, #36]	; 0x24
 800ded8:	e7d7      	b.n	800de8a <_dtoa_r+0x2c2>
 800deda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dedc:	9301      	str	r3, [sp, #4]
 800dede:	9304      	str	r3, [sp, #16]
 800dee0:	e7ba      	b.n	800de58 <_dtoa_r+0x290>
 800dee2:	3101      	adds	r1, #1
 800dee4:	0052      	lsls	r2, r2, #1
 800dee6:	e7ba      	b.n	800de5e <_dtoa_r+0x296>
 800dee8:	69e3      	ldr	r3, [r4, #28]
 800deea:	9a00      	ldr	r2, [sp, #0]
 800deec:	601a      	str	r2, [r3, #0]
 800deee:	9b04      	ldr	r3, [sp, #16]
 800def0:	2b0e      	cmp	r3, #14
 800def2:	f200 80a8 	bhi.w	800e046 <_dtoa_r+0x47e>
 800def6:	2d00      	cmp	r5, #0
 800def8:	f000 80a5 	beq.w	800e046 <_dtoa_r+0x47e>
 800defc:	f1bb 0f00 	cmp.w	fp, #0
 800df00:	dd38      	ble.n	800df74 <_dtoa_r+0x3ac>
 800df02:	4bc0      	ldr	r3, [pc, #768]	; (800e204 <_dtoa_r+0x63c>)
 800df04:	f00b 020f 	and.w	r2, fp, #15
 800df08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df0c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800df10:	e9d3 6700 	ldrd	r6, r7, [r3]
 800df14:	ea4f 182b 	mov.w	r8, fp, asr #4
 800df18:	d019      	beq.n	800df4e <_dtoa_r+0x386>
 800df1a:	4bbb      	ldr	r3, [pc, #748]	; (800e208 <_dtoa_r+0x640>)
 800df1c:	ec51 0b18 	vmov	r0, r1, d8
 800df20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800df24:	f7f2 fd02 	bl	800092c <__aeabi_ddiv>
 800df28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df2c:	f008 080f 	and.w	r8, r8, #15
 800df30:	2503      	movs	r5, #3
 800df32:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e208 <_dtoa_r+0x640>
 800df36:	f1b8 0f00 	cmp.w	r8, #0
 800df3a:	d10a      	bne.n	800df52 <_dtoa_r+0x38a>
 800df3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df40:	4632      	mov	r2, r6
 800df42:	463b      	mov	r3, r7
 800df44:	f7f2 fcf2 	bl	800092c <__aeabi_ddiv>
 800df48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df4c:	e02b      	b.n	800dfa6 <_dtoa_r+0x3de>
 800df4e:	2502      	movs	r5, #2
 800df50:	e7ef      	b.n	800df32 <_dtoa_r+0x36a>
 800df52:	f018 0f01 	tst.w	r8, #1
 800df56:	d008      	beq.n	800df6a <_dtoa_r+0x3a2>
 800df58:	4630      	mov	r0, r6
 800df5a:	4639      	mov	r1, r7
 800df5c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800df60:	f7f2 fbba 	bl	80006d8 <__aeabi_dmul>
 800df64:	3501      	adds	r5, #1
 800df66:	4606      	mov	r6, r0
 800df68:	460f      	mov	r7, r1
 800df6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800df6e:	f109 0908 	add.w	r9, r9, #8
 800df72:	e7e0      	b.n	800df36 <_dtoa_r+0x36e>
 800df74:	f000 809f 	beq.w	800e0b6 <_dtoa_r+0x4ee>
 800df78:	f1cb 0600 	rsb	r6, fp, #0
 800df7c:	4ba1      	ldr	r3, [pc, #644]	; (800e204 <_dtoa_r+0x63c>)
 800df7e:	4fa2      	ldr	r7, [pc, #648]	; (800e208 <_dtoa_r+0x640>)
 800df80:	f006 020f 	and.w	r2, r6, #15
 800df84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8c:	ec51 0b18 	vmov	r0, r1, d8
 800df90:	f7f2 fba2 	bl	80006d8 <__aeabi_dmul>
 800df94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df98:	1136      	asrs	r6, r6, #4
 800df9a:	2300      	movs	r3, #0
 800df9c:	2502      	movs	r5, #2
 800df9e:	2e00      	cmp	r6, #0
 800dfa0:	d17e      	bne.n	800e0a0 <_dtoa_r+0x4d8>
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d1d0      	bne.n	800df48 <_dtoa_r+0x380>
 800dfa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfa8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	f000 8084 	beq.w	800e0ba <_dtoa_r+0x4f2>
 800dfb2:	4b96      	ldr	r3, [pc, #600]	; (800e20c <_dtoa_r+0x644>)
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	4640      	mov	r0, r8
 800dfb8:	4649      	mov	r1, r9
 800dfba:	f7f2 fdff 	bl	8000bbc <__aeabi_dcmplt>
 800dfbe:	2800      	cmp	r0, #0
 800dfc0:	d07b      	beq.n	800e0ba <_dtoa_r+0x4f2>
 800dfc2:	9b04      	ldr	r3, [sp, #16]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d078      	beq.n	800e0ba <_dtoa_r+0x4f2>
 800dfc8:	9b01      	ldr	r3, [sp, #4]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	dd39      	ble.n	800e042 <_dtoa_r+0x47a>
 800dfce:	4b90      	ldr	r3, [pc, #576]	; (800e210 <_dtoa_r+0x648>)
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	4640      	mov	r0, r8
 800dfd4:	4649      	mov	r1, r9
 800dfd6:	f7f2 fb7f 	bl	80006d8 <__aeabi_dmul>
 800dfda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dfde:	9e01      	ldr	r6, [sp, #4]
 800dfe0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800dfe4:	3501      	adds	r5, #1
 800dfe6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dfea:	4628      	mov	r0, r5
 800dfec:	f7f2 fb0a 	bl	8000604 <__aeabi_i2d>
 800dff0:	4642      	mov	r2, r8
 800dff2:	464b      	mov	r3, r9
 800dff4:	f7f2 fb70 	bl	80006d8 <__aeabi_dmul>
 800dff8:	4b86      	ldr	r3, [pc, #536]	; (800e214 <_dtoa_r+0x64c>)
 800dffa:	2200      	movs	r2, #0
 800dffc:	f7f2 f9b6 	bl	800036c <__adddf3>
 800e000:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e004:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e008:	9303      	str	r3, [sp, #12]
 800e00a:	2e00      	cmp	r6, #0
 800e00c:	d158      	bne.n	800e0c0 <_dtoa_r+0x4f8>
 800e00e:	4b82      	ldr	r3, [pc, #520]	; (800e218 <_dtoa_r+0x650>)
 800e010:	2200      	movs	r2, #0
 800e012:	4640      	mov	r0, r8
 800e014:	4649      	mov	r1, r9
 800e016:	f7f2 f9a7 	bl	8000368 <__aeabi_dsub>
 800e01a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e01e:	4680      	mov	r8, r0
 800e020:	4689      	mov	r9, r1
 800e022:	f7f2 fde9 	bl	8000bf8 <__aeabi_dcmpgt>
 800e026:	2800      	cmp	r0, #0
 800e028:	f040 8296 	bne.w	800e558 <_dtoa_r+0x990>
 800e02c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e030:	4640      	mov	r0, r8
 800e032:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e036:	4649      	mov	r1, r9
 800e038:	f7f2 fdc0 	bl	8000bbc <__aeabi_dcmplt>
 800e03c:	2800      	cmp	r0, #0
 800e03e:	f040 8289 	bne.w	800e554 <_dtoa_r+0x98c>
 800e042:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e046:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e048:	2b00      	cmp	r3, #0
 800e04a:	f2c0 814e 	blt.w	800e2ea <_dtoa_r+0x722>
 800e04e:	f1bb 0f0e 	cmp.w	fp, #14
 800e052:	f300 814a 	bgt.w	800e2ea <_dtoa_r+0x722>
 800e056:	4b6b      	ldr	r3, [pc, #428]	; (800e204 <_dtoa_r+0x63c>)
 800e058:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e05c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e062:	2b00      	cmp	r3, #0
 800e064:	f280 80dc 	bge.w	800e220 <_dtoa_r+0x658>
 800e068:	9b04      	ldr	r3, [sp, #16]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	f300 80d8 	bgt.w	800e220 <_dtoa_r+0x658>
 800e070:	f040 826f 	bne.w	800e552 <_dtoa_r+0x98a>
 800e074:	4b68      	ldr	r3, [pc, #416]	; (800e218 <_dtoa_r+0x650>)
 800e076:	2200      	movs	r2, #0
 800e078:	4640      	mov	r0, r8
 800e07a:	4649      	mov	r1, r9
 800e07c:	f7f2 fb2c 	bl	80006d8 <__aeabi_dmul>
 800e080:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e084:	f7f2 fdae 	bl	8000be4 <__aeabi_dcmpge>
 800e088:	9e04      	ldr	r6, [sp, #16]
 800e08a:	4637      	mov	r7, r6
 800e08c:	2800      	cmp	r0, #0
 800e08e:	f040 8245 	bne.w	800e51c <_dtoa_r+0x954>
 800e092:	9d00      	ldr	r5, [sp, #0]
 800e094:	2331      	movs	r3, #49	; 0x31
 800e096:	f805 3b01 	strb.w	r3, [r5], #1
 800e09a:	f10b 0b01 	add.w	fp, fp, #1
 800e09e:	e241      	b.n	800e524 <_dtoa_r+0x95c>
 800e0a0:	07f2      	lsls	r2, r6, #31
 800e0a2:	d505      	bpl.n	800e0b0 <_dtoa_r+0x4e8>
 800e0a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0a8:	f7f2 fb16 	bl	80006d8 <__aeabi_dmul>
 800e0ac:	3501      	adds	r5, #1
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	1076      	asrs	r6, r6, #1
 800e0b2:	3708      	adds	r7, #8
 800e0b4:	e773      	b.n	800df9e <_dtoa_r+0x3d6>
 800e0b6:	2502      	movs	r5, #2
 800e0b8:	e775      	b.n	800dfa6 <_dtoa_r+0x3de>
 800e0ba:	9e04      	ldr	r6, [sp, #16]
 800e0bc:	465f      	mov	r7, fp
 800e0be:	e792      	b.n	800dfe6 <_dtoa_r+0x41e>
 800e0c0:	9900      	ldr	r1, [sp, #0]
 800e0c2:	4b50      	ldr	r3, [pc, #320]	; (800e204 <_dtoa_r+0x63c>)
 800e0c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e0c8:	4431      	add	r1, r6
 800e0ca:	9102      	str	r1, [sp, #8]
 800e0cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e0ce:	eeb0 9a47 	vmov.f32	s18, s14
 800e0d2:	eef0 9a67 	vmov.f32	s19, s15
 800e0d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e0da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e0de:	2900      	cmp	r1, #0
 800e0e0:	d044      	beq.n	800e16c <_dtoa_r+0x5a4>
 800e0e2:	494e      	ldr	r1, [pc, #312]	; (800e21c <_dtoa_r+0x654>)
 800e0e4:	2000      	movs	r0, #0
 800e0e6:	f7f2 fc21 	bl	800092c <__aeabi_ddiv>
 800e0ea:	ec53 2b19 	vmov	r2, r3, d9
 800e0ee:	f7f2 f93b 	bl	8000368 <__aeabi_dsub>
 800e0f2:	9d00      	ldr	r5, [sp, #0]
 800e0f4:	ec41 0b19 	vmov	d9, r0, r1
 800e0f8:	4649      	mov	r1, r9
 800e0fa:	4640      	mov	r0, r8
 800e0fc:	f7f2 fd9c 	bl	8000c38 <__aeabi_d2iz>
 800e100:	4606      	mov	r6, r0
 800e102:	f7f2 fa7f 	bl	8000604 <__aeabi_i2d>
 800e106:	4602      	mov	r2, r0
 800e108:	460b      	mov	r3, r1
 800e10a:	4640      	mov	r0, r8
 800e10c:	4649      	mov	r1, r9
 800e10e:	f7f2 f92b 	bl	8000368 <__aeabi_dsub>
 800e112:	3630      	adds	r6, #48	; 0x30
 800e114:	f805 6b01 	strb.w	r6, [r5], #1
 800e118:	ec53 2b19 	vmov	r2, r3, d9
 800e11c:	4680      	mov	r8, r0
 800e11e:	4689      	mov	r9, r1
 800e120:	f7f2 fd4c 	bl	8000bbc <__aeabi_dcmplt>
 800e124:	2800      	cmp	r0, #0
 800e126:	d164      	bne.n	800e1f2 <_dtoa_r+0x62a>
 800e128:	4642      	mov	r2, r8
 800e12a:	464b      	mov	r3, r9
 800e12c:	4937      	ldr	r1, [pc, #220]	; (800e20c <_dtoa_r+0x644>)
 800e12e:	2000      	movs	r0, #0
 800e130:	f7f2 f91a 	bl	8000368 <__aeabi_dsub>
 800e134:	ec53 2b19 	vmov	r2, r3, d9
 800e138:	f7f2 fd40 	bl	8000bbc <__aeabi_dcmplt>
 800e13c:	2800      	cmp	r0, #0
 800e13e:	f040 80b6 	bne.w	800e2ae <_dtoa_r+0x6e6>
 800e142:	9b02      	ldr	r3, [sp, #8]
 800e144:	429d      	cmp	r5, r3
 800e146:	f43f af7c 	beq.w	800e042 <_dtoa_r+0x47a>
 800e14a:	4b31      	ldr	r3, [pc, #196]	; (800e210 <_dtoa_r+0x648>)
 800e14c:	ec51 0b19 	vmov	r0, r1, d9
 800e150:	2200      	movs	r2, #0
 800e152:	f7f2 fac1 	bl	80006d8 <__aeabi_dmul>
 800e156:	4b2e      	ldr	r3, [pc, #184]	; (800e210 <_dtoa_r+0x648>)
 800e158:	ec41 0b19 	vmov	d9, r0, r1
 800e15c:	2200      	movs	r2, #0
 800e15e:	4640      	mov	r0, r8
 800e160:	4649      	mov	r1, r9
 800e162:	f7f2 fab9 	bl	80006d8 <__aeabi_dmul>
 800e166:	4680      	mov	r8, r0
 800e168:	4689      	mov	r9, r1
 800e16a:	e7c5      	b.n	800e0f8 <_dtoa_r+0x530>
 800e16c:	ec51 0b17 	vmov	r0, r1, d7
 800e170:	f7f2 fab2 	bl	80006d8 <__aeabi_dmul>
 800e174:	9b02      	ldr	r3, [sp, #8]
 800e176:	9d00      	ldr	r5, [sp, #0]
 800e178:	930f      	str	r3, [sp, #60]	; 0x3c
 800e17a:	ec41 0b19 	vmov	d9, r0, r1
 800e17e:	4649      	mov	r1, r9
 800e180:	4640      	mov	r0, r8
 800e182:	f7f2 fd59 	bl	8000c38 <__aeabi_d2iz>
 800e186:	4606      	mov	r6, r0
 800e188:	f7f2 fa3c 	bl	8000604 <__aeabi_i2d>
 800e18c:	3630      	adds	r6, #48	; 0x30
 800e18e:	4602      	mov	r2, r0
 800e190:	460b      	mov	r3, r1
 800e192:	4640      	mov	r0, r8
 800e194:	4649      	mov	r1, r9
 800e196:	f7f2 f8e7 	bl	8000368 <__aeabi_dsub>
 800e19a:	f805 6b01 	strb.w	r6, [r5], #1
 800e19e:	9b02      	ldr	r3, [sp, #8]
 800e1a0:	429d      	cmp	r5, r3
 800e1a2:	4680      	mov	r8, r0
 800e1a4:	4689      	mov	r9, r1
 800e1a6:	f04f 0200 	mov.w	r2, #0
 800e1aa:	d124      	bne.n	800e1f6 <_dtoa_r+0x62e>
 800e1ac:	4b1b      	ldr	r3, [pc, #108]	; (800e21c <_dtoa_r+0x654>)
 800e1ae:	ec51 0b19 	vmov	r0, r1, d9
 800e1b2:	f7f2 f8db 	bl	800036c <__adddf3>
 800e1b6:	4602      	mov	r2, r0
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	4640      	mov	r0, r8
 800e1bc:	4649      	mov	r1, r9
 800e1be:	f7f2 fd1b 	bl	8000bf8 <__aeabi_dcmpgt>
 800e1c2:	2800      	cmp	r0, #0
 800e1c4:	d173      	bne.n	800e2ae <_dtoa_r+0x6e6>
 800e1c6:	ec53 2b19 	vmov	r2, r3, d9
 800e1ca:	4914      	ldr	r1, [pc, #80]	; (800e21c <_dtoa_r+0x654>)
 800e1cc:	2000      	movs	r0, #0
 800e1ce:	f7f2 f8cb 	bl	8000368 <__aeabi_dsub>
 800e1d2:	4602      	mov	r2, r0
 800e1d4:	460b      	mov	r3, r1
 800e1d6:	4640      	mov	r0, r8
 800e1d8:	4649      	mov	r1, r9
 800e1da:	f7f2 fcef 	bl	8000bbc <__aeabi_dcmplt>
 800e1de:	2800      	cmp	r0, #0
 800e1e0:	f43f af2f 	beq.w	800e042 <_dtoa_r+0x47a>
 800e1e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e1e6:	1e6b      	subs	r3, r5, #1
 800e1e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800e1ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e1ee:	2b30      	cmp	r3, #48	; 0x30
 800e1f0:	d0f8      	beq.n	800e1e4 <_dtoa_r+0x61c>
 800e1f2:	46bb      	mov	fp, r7
 800e1f4:	e04a      	b.n	800e28c <_dtoa_r+0x6c4>
 800e1f6:	4b06      	ldr	r3, [pc, #24]	; (800e210 <_dtoa_r+0x648>)
 800e1f8:	f7f2 fa6e 	bl	80006d8 <__aeabi_dmul>
 800e1fc:	4680      	mov	r8, r0
 800e1fe:	4689      	mov	r9, r1
 800e200:	e7bd      	b.n	800e17e <_dtoa_r+0x5b6>
 800e202:	bf00      	nop
 800e204:	08010f08 	.word	0x08010f08
 800e208:	08010ee0 	.word	0x08010ee0
 800e20c:	3ff00000 	.word	0x3ff00000
 800e210:	40240000 	.word	0x40240000
 800e214:	401c0000 	.word	0x401c0000
 800e218:	40140000 	.word	0x40140000
 800e21c:	3fe00000 	.word	0x3fe00000
 800e220:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e224:	9d00      	ldr	r5, [sp, #0]
 800e226:	4642      	mov	r2, r8
 800e228:	464b      	mov	r3, r9
 800e22a:	4630      	mov	r0, r6
 800e22c:	4639      	mov	r1, r7
 800e22e:	f7f2 fb7d 	bl	800092c <__aeabi_ddiv>
 800e232:	f7f2 fd01 	bl	8000c38 <__aeabi_d2iz>
 800e236:	9001      	str	r0, [sp, #4]
 800e238:	f7f2 f9e4 	bl	8000604 <__aeabi_i2d>
 800e23c:	4642      	mov	r2, r8
 800e23e:	464b      	mov	r3, r9
 800e240:	f7f2 fa4a 	bl	80006d8 <__aeabi_dmul>
 800e244:	4602      	mov	r2, r0
 800e246:	460b      	mov	r3, r1
 800e248:	4630      	mov	r0, r6
 800e24a:	4639      	mov	r1, r7
 800e24c:	f7f2 f88c 	bl	8000368 <__aeabi_dsub>
 800e250:	9e01      	ldr	r6, [sp, #4]
 800e252:	9f04      	ldr	r7, [sp, #16]
 800e254:	3630      	adds	r6, #48	; 0x30
 800e256:	f805 6b01 	strb.w	r6, [r5], #1
 800e25a:	9e00      	ldr	r6, [sp, #0]
 800e25c:	1bae      	subs	r6, r5, r6
 800e25e:	42b7      	cmp	r7, r6
 800e260:	4602      	mov	r2, r0
 800e262:	460b      	mov	r3, r1
 800e264:	d134      	bne.n	800e2d0 <_dtoa_r+0x708>
 800e266:	f7f2 f881 	bl	800036c <__adddf3>
 800e26a:	4642      	mov	r2, r8
 800e26c:	464b      	mov	r3, r9
 800e26e:	4606      	mov	r6, r0
 800e270:	460f      	mov	r7, r1
 800e272:	f7f2 fcc1 	bl	8000bf8 <__aeabi_dcmpgt>
 800e276:	b9c8      	cbnz	r0, 800e2ac <_dtoa_r+0x6e4>
 800e278:	4642      	mov	r2, r8
 800e27a:	464b      	mov	r3, r9
 800e27c:	4630      	mov	r0, r6
 800e27e:	4639      	mov	r1, r7
 800e280:	f7f2 fc92 	bl	8000ba8 <__aeabi_dcmpeq>
 800e284:	b110      	cbz	r0, 800e28c <_dtoa_r+0x6c4>
 800e286:	9b01      	ldr	r3, [sp, #4]
 800e288:	07db      	lsls	r3, r3, #31
 800e28a:	d40f      	bmi.n	800e2ac <_dtoa_r+0x6e4>
 800e28c:	4651      	mov	r1, sl
 800e28e:	4620      	mov	r0, r4
 800e290:	f000 fbde 	bl	800ea50 <_Bfree>
 800e294:	2300      	movs	r3, #0
 800e296:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e298:	702b      	strb	r3, [r5, #0]
 800e29a:	f10b 0301 	add.w	r3, fp, #1
 800e29e:	6013      	str	r3, [r2, #0]
 800e2a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	f43f ace2 	beq.w	800dc6c <_dtoa_r+0xa4>
 800e2a8:	601d      	str	r5, [r3, #0]
 800e2aa:	e4df      	b.n	800dc6c <_dtoa_r+0xa4>
 800e2ac:	465f      	mov	r7, fp
 800e2ae:	462b      	mov	r3, r5
 800e2b0:	461d      	mov	r5, r3
 800e2b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e2b6:	2a39      	cmp	r2, #57	; 0x39
 800e2b8:	d106      	bne.n	800e2c8 <_dtoa_r+0x700>
 800e2ba:	9a00      	ldr	r2, [sp, #0]
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d1f7      	bne.n	800e2b0 <_dtoa_r+0x6e8>
 800e2c0:	9900      	ldr	r1, [sp, #0]
 800e2c2:	2230      	movs	r2, #48	; 0x30
 800e2c4:	3701      	adds	r7, #1
 800e2c6:	700a      	strb	r2, [r1, #0]
 800e2c8:	781a      	ldrb	r2, [r3, #0]
 800e2ca:	3201      	adds	r2, #1
 800e2cc:	701a      	strb	r2, [r3, #0]
 800e2ce:	e790      	b.n	800e1f2 <_dtoa_r+0x62a>
 800e2d0:	4ba3      	ldr	r3, [pc, #652]	; (800e560 <_dtoa_r+0x998>)
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	f7f2 fa00 	bl	80006d8 <__aeabi_dmul>
 800e2d8:	2200      	movs	r2, #0
 800e2da:	2300      	movs	r3, #0
 800e2dc:	4606      	mov	r6, r0
 800e2de:	460f      	mov	r7, r1
 800e2e0:	f7f2 fc62 	bl	8000ba8 <__aeabi_dcmpeq>
 800e2e4:	2800      	cmp	r0, #0
 800e2e6:	d09e      	beq.n	800e226 <_dtoa_r+0x65e>
 800e2e8:	e7d0      	b.n	800e28c <_dtoa_r+0x6c4>
 800e2ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2ec:	2a00      	cmp	r2, #0
 800e2ee:	f000 80ca 	beq.w	800e486 <_dtoa_r+0x8be>
 800e2f2:	9a07      	ldr	r2, [sp, #28]
 800e2f4:	2a01      	cmp	r2, #1
 800e2f6:	f300 80ad 	bgt.w	800e454 <_dtoa_r+0x88c>
 800e2fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e2fc:	2a00      	cmp	r2, #0
 800e2fe:	f000 80a5 	beq.w	800e44c <_dtoa_r+0x884>
 800e302:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e306:	9e08      	ldr	r6, [sp, #32]
 800e308:	9d05      	ldr	r5, [sp, #20]
 800e30a:	9a05      	ldr	r2, [sp, #20]
 800e30c:	441a      	add	r2, r3
 800e30e:	9205      	str	r2, [sp, #20]
 800e310:	9a06      	ldr	r2, [sp, #24]
 800e312:	2101      	movs	r1, #1
 800e314:	441a      	add	r2, r3
 800e316:	4620      	mov	r0, r4
 800e318:	9206      	str	r2, [sp, #24]
 800e31a:	f000 fc4f 	bl	800ebbc <__i2b>
 800e31e:	4607      	mov	r7, r0
 800e320:	b165      	cbz	r5, 800e33c <_dtoa_r+0x774>
 800e322:	9b06      	ldr	r3, [sp, #24]
 800e324:	2b00      	cmp	r3, #0
 800e326:	dd09      	ble.n	800e33c <_dtoa_r+0x774>
 800e328:	42ab      	cmp	r3, r5
 800e32a:	9a05      	ldr	r2, [sp, #20]
 800e32c:	bfa8      	it	ge
 800e32e:	462b      	movge	r3, r5
 800e330:	1ad2      	subs	r2, r2, r3
 800e332:	9205      	str	r2, [sp, #20]
 800e334:	9a06      	ldr	r2, [sp, #24]
 800e336:	1aed      	subs	r5, r5, r3
 800e338:	1ad3      	subs	r3, r2, r3
 800e33a:	9306      	str	r3, [sp, #24]
 800e33c:	9b08      	ldr	r3, [sp, #32]
 800e33e:	b1f3      	cbz	r3, 800e37e <_dtoa_r+0x7b6>
 800e340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e342:	2b00      	cmp	r3, #0
 800e344:	f000 80a3 	beq.w	800e48e <_dtoa_r+0x8c6>
 800e348:	2e00      	cmp	r6, #0
 800e34a:	dd10      	ble.n	800e36e <_dtoa_r+0x7a6>
 800e34c:	4639      	mov	r1, r7
 800e34e:	4632      	mov	r2, r6
 800e350:	4620      	mov	r0, r4
 800e352:	f000 fcf3 	bl	800ed3c <__pow5mult>
 800e356:	4652      	mov	r2, sl
 800e358:	4601      	mov	r1, r0
 800e35a:	4607      	mov	r7, r0
 800e35c:	4620      	mov	r0, r4
 800e35e:	f000 fc43 	bl	800ebe8 <__multiply>
 800e362:	4651      	mov	r1, sl
 800e364:	4680      	mov	r8, r0
 800e366:	4620      	mov	r0, r4
 800e368:	f000 fb72 	bl	800ea50 <_Bfree>
 800e36c:	46c2      	mov	sl, r8
 800e36e:	9b08      	ldr	r3, [sp, #32]
 800e370:	1b9a      	subs	r2, r3, r6
 800e372:	d004      	beq.n	800e37e <_dtoa_r+0x7b6>
 800e374:	4651      	mov	r1, sl
 800e376:	4620      	mov	r0, r4
 800e378:	f000 fce0 	bl	800ed3c <__pow5mult>
 800e37c:	4682      	mov	sl, r0
 800e37e:	2101      	movs	r1, #1
 800e380:	4620      	mov	r0, r4
 800e382:	f000 fc1b 	bl	800ebbc <__i2b>
 800e386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e388:	2b00      	cmp	r3, #0
 800e38a:	4606      	mov	r6, r0
 800e38c:	f340 8081 	ble.w	800e492 <_dtoa_r+0x8ca>
 800e390:	461a      	mov	r2, r3
 800e392:	4601      	mov	r1, r0
 800e394:	4620      	mov	r0, r4
 800e396:	f000 fcd1 	bl	800ed3c <__pow5mult>
 800e39a:	9b07      	ldr	r3, [sp, #28]
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	4606      	mov	r6, r0
 800e3a0:	dd7a      	ble.n	800e498 <_dtoa_r+0x8d0>
 800e3a2:	f04f 0800 	mov.w	r8, #0
 800e3a6:	6933      	ldr	r3, [r6, #16]
 800e3a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e3ac:	6918      	ldr	r0, [r3, #16]
 800e3ae:	f000 fbb7 	bl	800eb20 <__hi0bits>
 800e3b2:	f1c0 0020 	rsb	r0, r0, #32
 800e3b6:	9b06      	ldr	r3, [sp, #24]
 800e3b8:	4418      	add	r0, r3
 800e3ba:	f010 001f 	ands.w	r0, r0, #31
 800e3be:	f000 8094 	beq.w	800e4ea <_dtoa_r+0x922>
 800e3c2:	f1c0 0320 	rsb	r3, r0, #32
 800e3c6:	2b04      	cmp	r3, #4
 800e3c8:	f340 8085 	ble.w	800e4d6 <_dtoa_r+0x90e>
 800e3cc:	9b05      	ldr	r3, [sp, #20]
 800e3ce:	f1c0 001c 	rsb	r0, r0, #28
 800e3d2:	4403      	add	r3, r0
 800e3d4:	9305      	str	r3, [sp, #20]
 800e3d6:	9b06      	ldr	r3, [sp, #24]
 800e3d8:	4403      	add	r3, r0
 800e3da:	4405      	add	r5, r0
 800e3dc:	9306      	str	r3, [sp, #24]
 800e3de:	9b05      	ldr	r3, [sp, #20]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	dd05      	ble.n	800e3f0 <_dtoa_r+0x828>
 800e3e4:	4651      	mov	r1, sl
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	4620      	mov	r0, r4
 800e3ea:	f000 fd01 	bl	800edf0 <__lshift>
 800e3ee:	4682      	mov	sl, r0
 800e3f0:	9b06      	ldr	r3, [sp, #24]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	dd05      	ble.n	800e402 <_dtoa_r+0x83a>
 800e3f6:	4631      	mov	r1, r6
 800e3f8:	461a      	mov	r2, r3
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	f000 fcf8 	bl	800edf0 <__lshift>
 800e400:	4606      	mov	r6, r0
 800e402:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e404:	2b00      	cmp	r3, #0
 800e406:	d072      	beq.n	800e4ee <_dtoa_r+0x926>
 800e408:	4631      	mov	r1, r6
 800e40a:	4650      	mov	r0, sl
 800e40c:	f000 fd5c 	bl	800eec8 <__mcmp>
 800e410:	2800      	cmp	r0, #0
 800e412:	da6c      	bge.n	800e4ee <_dtoa_r+0x926>
 800e414:	2300      	movs	r3, #0
 800e416:	4651      	mov	r1, sl
 800e418:	220a      	movs	r2, #10
 800e41a:	4620      	mov	r0, r4
 800e41c:	f000 fb3a 	bl	800ea94 <__multadd>
 800e420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e422:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e426:	4682      	mov	sl, r0
 800e428:	2b00      	cmp	r3, #0
 800e42a:	f000 81b0 	beq.w	800e78e <_dtoa_r+0xbc6>
 800e42e:	2300      	movs	r3, #0
 800e430:	4639      	mov	r1, r7
 800e432:	220a      	movs	r2, #10
 800e434:	4620      	mov	r0, r4
 800e436:	f000 fb2d 	bl	800ea94 <__multadd>
 800e43a:	9b01      	ldr	r3, [sp, #4]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	4607      	mov	r7, r0
 800e440:	f300 8096 	bgt.w	800e570 <_dtoa_r+0x9a8>
 800e444:	9b07      	ldr	r3, [sp, #28]
 800e446:	2b02      	cmp	r3, #2
 800e448:	dc59      	bgt.n	800e4fe <_dtoa_r+0x936>
 800e44a:	e091      	b.n	800e570 <_dtoa_r+0x9a8>
 800e44c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e44e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e452:	e758      	b.n	800e306 <_dtoa_r+0x73e>
 800e454:	9b04      	ldr	r3, [sp, #16]
 800e456:	1e5e      	subs	r6, r3, #1
 800e458:	9b08      	ldr	r3, [sp, #32]
 800e45a:	42b3      	cmp	r3, r6
 800e45c:	bfbf      	itttt	lt
 800e45e:	9b08      	ldrlt	r3, [sp, #32]
 800e460:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e462:	9608      	strlt	r6, [sp, #32]
 800e464:	1af3      	sublt	r3, r6, r3
 800e466:	bfb4      	ite	lt
 800e468:	18d2      	addlt	r2, r2, r3
 800e46a:	1b9e      	subge	r6, r3, r6
 800e46c:	9b04      	ldr	r3, [sp, #16]
 800e46e:	bfbc      	itt	lt
 800e470:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e472:	2600      	movlt	r6, #0
 800e474:	2b00      	cmp	r3, #0
 800e476:	bfb7      	itett	lt
 800e478:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e47c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e480:	1a9d      	sublt	r5, r3, r2
 800e482:	2300      	movlt	r3, #0
 800e484:	e741      	b.n	800e30a <_dtoa_r+0x742>
 800e486:	9e08      	ldr	r6, [sp, #32]
 800e488:	9d05      	ldr	r5, [sp, #20]
 800e48a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e48c:	e748      	b.n	800e320 <_dtoa_r+0x758>
 800e48e:	9a08      	ldr	r2, [sp, #32]
 800e490:	e770      	b.n	800e374 <_dtoa_r+0x7ac>
 800e492:	9b07      	ldr	r3, [sp, #28]
 800e494:	2b01      	cmp	r3, #1
 800e496:	dc19      	bgt.n	800e4cc <_dtoa_r+0x904>
 800e498:	9b02      	ldr	r3, [sp, #8]
 800e49a:	b9bb      	cbnz	r3, 800e4cc <_dtoa_r+0x904>
 800e49c:	9b03      	ldr	r3, [sp, #12]
 800e49e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e4a2:	b99b      	cbnz	r3, 800e4cc <_dtoa_r+0x904>
 800e4a4:	9b03      	ldr	r3, [sp, #12]
 800e4a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e4aa:	0d1b      	lsrs	r3, r3, #20
 800e4ac:	051b      	lsls	r3, r3, #20
 800e4ae:	b183      	cbz	r3, 800e4d2 <_dtoa_r+0x90a>
 800e4b0:	9b05      	ldr	r3, [sp, #20]
 800e4b2:	3301      	adds	r3, #1
 800e4b4:	9305      	str	r3, [sp, #20]
 800e4b6:	9b06      	ldr	r3, [sp, #24]
 800e4b8:	3301      	adds	r3, #1
 800e4ba:	9306      	str	r3, [sp, #24]
 800e4bc:	f04f 0801 	mov.w	r8, #1
 800e4c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	f47f af6f 	bne.w	800e3a6 <_dtoa_r+0x7de>
 800e4c8:	2001      	movs	r0, #1
 800e4ca:	e774      	b.n	800e3b6 <_dtoa_r+0x7ee>
 800e4cc:	f04f 0800 	mov.w	r8, #0
 800e4d0:	e7f6      	b.n	800e4c0 <_dtoa_r+0x8f8>
 800e4d2:	4698      	mov	r8, r3
 800e4d4:	e7f4      	b.n	800e4c0 <_dtoa_r+0x8f8>
 800e4d6:	d082      	beq.n	800e3de <_dtoa_r+0x816>
 800e4d8:	9a05      	ldr	r2, [sp, #20]
 800e4da:	331c      	adds	r3, #28
 800e4dc:	441a      	add	r2, r3
 800e4de:	9205      	str	r2, [sp, #20]
 800e4e0:	9a06      	ldr	r2, [sp, #24]
 800e4e2:	441a      	add	r2, r3
 800e4e4:	441d      	add	r5, r3
 800e4e6:	9206      	str	r2, [sp, #24]
 800e4e8:	e779      	b.n	800e3de <_dtoa_r+0x816>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	e7f4      	b.n	800e4d8 <_dtoa_r+0x910>
 800e4ee:	9b04      	ldr	r3, [sp, #16]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	dc37      	bgt.n	800e564 <_dtoa_r+0x99c>
 800e4f4:	9b07      	ldr	r3, [sp, #28]
 800e4f6:	2b02      	cmp	r3, #2
 800e4f8:	dd34      	ble.n	800e564 <_dtoa_r+0x99c>
 800e4fa:	9b04      	ldr	r3, [sp, #16]
 800e4fc:	9301      	str	r3, [sp, #4]
 800e4fe:	9b01      	ldr	r3, [sp, #4]
 800e500:	b963      	cbnz	r3, 800e51c <_dtoa_r+0x954>
 800e502:	4631      	mov	r1, r6
 800e504:	2205      	movs	r2, #5
 800e506:	4620      	mov	r0, r4
 800e508:	f000 fac4 	bl	800ea94 <__multadd>
 800e50c:	4601      	mov	r1, r0
 800e50e:	4606      	mov	r6, r0
 800e510:	4650      	mov	r0, sl
 800e512:	f000 fcd9 	bl	800eec8 <__mcmp>
 800e516:	2800      	cmp	r0, #0
 800e518:	f73f adbb 	bgt.w	800e092 <_dtoa_r+0x4ca>
 800e51c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e51e:	9d00      	ldr	r5, [sp, #0]
 800e520:	ea6f 0b03 	mvn.w	fp, r3
 800e524:	f04f 0800 	mov.w	r8, #0
 800e528:	4631      	mov	r1, r6
 800e52a:	4620      	mov	r0, r4
 800e52c:	f000 fa90 	bl	800ea50 <_Bfree>
 800e530:	2f00      	cmp	r7, #0
 800e532:	f43f aeab 	beq.w	800e28c <_dtoa_r+0x6c4>
 800e536:	f1b8 0f00 	cmp.w	r8, #0
 800e53a:	d005      	beq.n	800e548 <_dtoa_r+0x980>
 800e53c:	45b8      	cmp	r8, r7
 800e53e:	d003      	beq.n	800e548 <_dtoa_r+0x980>
 800e540:	4641      	mov	r1, r8
 800e542:	4620      	mov	r0, r4
 800e544:	f000 fa84 	bl	800ea50 <_Bfree>
 800e548:	4639      	mov	r1, r7
 800e54a:	4620      	mov	r0, r4
 800e54c:	f000 fa80 	bl	800ea50 <_Bfree>
 800e550:	e69c      	b.n	800e28c <_dtoa_r+0x6c4>
 800e552:	2600      	movs	r6, #0
 800e554:	4637      	mov	r7, r6
 800e556:	e7e1      	b.n	800e51c <_dtoa_r+0x954>
 800e558:	46bb      	mov	fp, r7
 800e55a:	4637      	mov	r7, r6
 800e55c:	e599      	b.n	800e092 <_dtoa_r+0x4ca>
 800e55e:	bf00      	nop
 800e560:	40240000 	.word	0x40240000
 800e564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e566:	2b00      	cmp	r3, #0
 800e568:	f000 80c8 	beq.w	800e6fc <_dtoa_r+0xb34>
 800e56c:	9b04      	ldr	r3, [sp, #16]
 800e56e:	9301      	str	r3, [sp, #4]
 800e570:	2d00      	cmp	r5, #0
 800e572:	dd05      	ble.n	800e580 <_dtoa_r+0x9b8>
 800e574:	4639      	mov	r1, r7
 800e576:	462a      	mov	r2, r5
 800e578:	4620      	mov	r0, r4
 800e57a:	f000 fc39 	bl	800edf0 <__lshift>
 800e57e:	4607      	mov	r7, r0
 800e580:	f1b8 0f00 	cmp.w	r8, #0
 800e584:	d05b      	beq.n	800e63e <_dtoa_r+0xa76>
 800e586:	6879      	ldr	r1, [r7, #4]
 800e588:	4620      	mov	r0, r4
 800e58a:	f000 fa21 	bl	800e9d0 <_Balloc>
 800e58e:	4605      	mov	r5, r0
 800e590:	b928      	cbnz	r0, 800e59e <_dtoa_r+0x9d6>
 800e592:	4b83      	ldr	r3, [pc, #524]	; (800e7a0 <_dtoa_r+0xbd8>)
 800e594:	4602      	mov	r2, r0
 800e596:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e59a:	f7ff bb2e 	b.w	800dbfa <_dtoa_r+0x32>
 800e59e:	693a      	ldr	r2, [r7, #16]
 800e5a0:	3202      	adds	r2, #2
 800e5a2:	0092      	lsls	r2, r2, #2
 800e5a4:	f107 010c 	add.w	r1, r7, #12
 800e5a8:	300c      	adds	r0, #12
 800e5aa:	f7ff fa74 	bl	800da96 <memcpy>
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	4629      	mov	r1, r5
 800e5b2:	4620      	mov	r0, r4
 800e5b4:	f000 fc1c 	bl	800edf0 <__lshift>
 800e5b8:	9b00      	ldr	r3, [sp, #0]
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	9304      	str	r3, [sp, #16]
 800e5be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e5c2:	4413      	add	r3, r2
 800e5c4:	9308      	str	r3, [sp, #32]
 800e5c6:	9b02      	ldr	r3, [sp, #8]
 800e5c8:	f003 0301 	and.w	r3, r3, #1
 800e5cc:	46b8      	mov	r8, r7
 800e5ce:	9306      	str	r3, [sp, #24]
 800e5d0:	4607      	mov	r7, r0
 800e5d2:	9b04      	ldr	r3, [sp, #16]
 800e5d4:	4631      	mov	r1, r6
 800e5d6:	3b01      	subs	r3, #1
 800e5d8:	4650      	mov	r0, sl
 800e5da:	9301      	str	r3, [sp, #4]
 800e5dc:	f7ff fa69 	bl	800dab2 <quorem>
 800e5e0:	4641      	mov	r1, r8
 800e5e2:	9002      	str	r0, [sp, #8]
 800e5e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e5e8:	4650      	mov	r0, sl
 800e5ea:	f000 fc6d 	bl	800eec8 <__mcmp>
 800e5ee:	463a      	mov	r2, r7
 800e5f0:	9005      	str	r0, [sp, #20]
 800e5f2:	4631      	mov	r1, r6
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	f000 fc83 	bl	800ef00 <__mdiff>
 800e5fa:	68c2      	ldr	r2, [r0, #12]
 800e5fc:	4605      	mov	r5, r0
 800e5fe:	bb02      	cbnz	r2, 800e642 <_dtoa_r+0xa7a>
 800e600:	4601      	mov	r1, r0
 800e602:	4650      	mov	r0, sl
 800e604:	f000 fc60 	bl	800eec8 <__mcmp>
 800e608:	4602      	mov	r2, r0
 800e60a:	4629      	mov	r1, r5
 800e60c:	4620      	mov	r0, r4
 800e60e:	9209      	str	r2, [sp, #36]	; 0x24
 800e610:	f000 fa1e 	bl	800ea50 <_Bfree>
 800e614:	9b07      	ldr	r3, [sp, #28]
 800e616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e618:	9d04      	ldr	r5, [sp, #16]
 800e61a:	ea43 0102 	orr.w	r1, r3, r2
 800e61e:	9b06      	ldr	r3, [sp, #24]
 800e620:	4319      	orrs	r1, r3
 800e622:	d110      	bne.n	800e646 <_dtoa_r+0xa7e>
 800e624:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e628:	d029      	beq.n	800e67e <_dtoa_r+0xab6>
 800e62a:	9b05      	ldr	r3, [sp, #20]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	dd02      	ble.n	800e636 <_dtoa_r+0xa6e>
 800e630:	9b02      	ldr	r3, [sp, #8]
 800e632:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e636:	9b01      	ldr	r3, [sp, #4]
 800e638:	f883 9000 	strb.w	r9, [r3]
 800e63c:	e774      	b.n	800e528 <_dtoa_r+0x960>
 800e63e:	4638      	mov	r0, r7
 800e640:	e7ba      	b.n	800e5b8 <_dtoa_r+0x9f0>
 800e642:	2201      	movs	r2, #1
 800e644:	e7e1      	b.n	800e60a <_dtoa_r+0xa42>
 800e646:	9b05      	ldr	r3, [sp, #20]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	db04      	blt.n	800e656 <_dtoa_r+0xa8e>
 800e64c:	9907      	ldr	r1, [sp, #28]
 800e64e:	430b      	orrs	r3, r1
 800e650:	9906      	ldr	r1, [sp, #24]
 800e652:	430b      	orrs	r3, r1
 800e654:	d120      	bne.n	800e698 <_dtoa_r+0xad0>
 800e656:	2a00      	cmp	r2, #0
 800e658:	dded      	ble.n	800e636 <_dtoa_r+0xa6e>
 800e65a:	4651      	mov	r1, sl
 800e65c:	2201      	movs	r2, #1
 800e65e:	4620      	mov	r0, r4
 800e660:	f000 fbc6 	bl	800edf0 <__lshift>
 800e664:	4631      	mov	r1, r6
 800e666:	4682      	mov	sl, r0
 800e668:	f000 fc2e 	bl	800eec8 <__mcmp>
 800e66c:	2800      	cmp	r0, #0
 800e66e:	dc03      	bgt.n	800e678 <_dtoa_r+0xab0>
 800e670:	d1e1      	bne.n	800e636 <_dtoa_r+0xa6e>
 800e672:	f019 0f01 	tst.w	r9, #1
 800e676:	d0de      	beq.n	800e636 <_dtoa_r+0xa6e>
 800e678:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e67c:	d1d8      	bne.n	800e630 <_dtoa_r+0xa68>
 800e67e:	9a01      	ldr	r2, [sp, #4]
 800e680:	2339      	movs	r3, #57	; 0x39
 800e682:	7013      	strb	r3, [r2, #0]
 800e684:	462b      	mov	r3, r5
 800e686:	461d      	mov	r5, r3
 800e688:	3b01      	subs	r3, #1
 800e68a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e68e:	2a39      	cmp	r2, #57	; 0x39
 800e690:	d06c      	beq.n	800e76c <_dtoa_r+0xba4>
 800e692:	3201      	adds	r2, #1
 800e694:	701a      	strb	r2, [r3, #0]
 800e696:	e747      	b.n	800e528 <_dtoa_r+0x960>
 800e698:	2a00      	cmp	r2, #0
 800e69a:	dd07      	ble.n	800e6ac <_dtoa_r+0xae4>
 800e69c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e6a0:	d0ed      	beq.n	800e67e <_dtoa_r+0xab6>
 800e6a2:	9a01      	ldr	r2, [sp, #4]
 800e6a4:	f109 0301 	add.w	r3, r9, #1
 800e6a8:	7013      	strb	r3, [r2, #0]
 800e6aa:	e73d      	b.n	800e528 <_dtoa_r+0x960>
 800e6ac:	9b04      	ldr	r3, [sp, #16]
 800e6ae:	9a08      	ldr	r2, [sp, #32]
 800e6b0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	d043      	beq.n	800e740 <_dtoa_r+0xb78>
 800e6b8:	4651      	mov	r1, sl
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	220a      	movs	r2, #10
 800e6be:	4620      	mov	r0, r4
 800e6c0:	f000 f9e8 	bl	800ea94 <__multadd>
 800e6c4:	45b8      	cmp	r8, r7
 800e6c6:	4682      	mov	sl, r0
 800e6c8:	f04f 0300 	mov.w	r3, #0
 800e6cc:	f04f 020a 	mov.w	r2, #10
 800e6d0:	4641      	mov	r1, r8
 800e6d2:	4620      	mov	r0, r4
 800e6d4:	d107      	bne.n	800e6e6 <_dtoa_r+0xb1e>
 800e6d6:	f000 f9dd 	bl	800ea94 <__multadd>
 800e6da:	4680      	mov	r8, r0
 800e6dc:	4607      	mov	r7, r0
 800e6de:	9b04      	ldr	r3, [sp, #16]
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	9304      	str	r3, [sp, #16]
 800e6e4:	e775      	b.n	800e5d2 <_dtoa_r+0xa0a>
 800e6e6:	f000 f9d5 	bl	800ea94 <__multadd>
 800e6ea:	4639      	mov	r1, r7
 800e6ec:	4680      	mov	r8, r0
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	220a      	movs	r2, #10
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	f000 f9ce 	bl	800ea94 <__multadd>
 800e6f8:	4607      	mov	r7, r0
 800e6fa:	e7f0      	b.n	800e6de <_dtoa_r+0xb16>
 800e6fc:	9b04      	ldr	r3, [sp, #16]
 800e6fe:	9301      	str	r3, [sp, #4]
 800e700:	9d00      	ldr	r5, [sp, #0]
 800e702:	4631      	mov	r1, r6
 800e704:	4650      	mov	r0, sl
 800e706:	f7ff f9d4 	bl	800dab2 <quorem>
 800e70a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e70e:	9b00      	ldr	r3, [sp, #0]
 800e710:	f805 9b01 	strb.w	r9, [r5], #1
 800e714:	1aea      	subs	r2, r5, r3
 800e716:	9b01      	ldr	r3, [sp, #4]
 800e718:	4293      	cmp	r3, r2
 800e71a:	dd07      	ble.n	800e72c <_dtoa_r+0xb64>
 800e71c:	4651      	mov	r1, sl
 800e71e:	2300      	movs	r3, #0
 800e720:	220a      	movs	r2, #10
 800e722:	4620      	mov	r0, r4
 800e724:	f000 f9b6 	bl	800ea94 <__multadd>
 800e728:	4682      	mov	sl, r0
 800e72a:	e7ea      	b.n	800e702 <_dtoa_r+0xb3a>
 800e72c:	9b01      	ldr	r3, [sp, #4]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	bfc8      	it	gt
 800e732:	461d      	movgt	r5, r3
 800e734:	9b00      	ldr	r3, [sp, #0]
 800e736:	bfd8      	it	le
 800e738:	2501      	movle	r5, #1
 800e73a:	441d      	add	r5, r3
 800e73c:	f04f 0800 	mov.w	r8, #0
 800e740:	4651      	mov	r1, sl
 800e742:	2201      	movs	r2, #1
 800e744:	4620      	mov	r0, r4
 800e746:	f000 fb53 	bl	800edf0 <__lshift>
 800e74a:	4631      	mov	r1, r6
 800e74c:	4682      	mov	sl, r0
 800e74e:	f000 fbbb 	bl	800eec8 <__mcmp>
 800e752:	2800      	cmp	r0, #0
 800e754:	dc96      	bgt.n	800e684 <_dtoa_r+0xabc>
 800e756:	d102      	bne.n	800e75e <_dtoa_r+0xb96>
 800e758:	f019 0f01 	tst.w	r9, #1
 800e75c:	d192      	bne.n	800e684 <_dtoa_r+0xabc>
 800e75e:	462b      	mov	r3, r5
 800e760:	461d      	mov	r5, r3
 800e762:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e766:	2a30      	cmp	r2, #48	; 0x30
 800e768:	d0fa      	beq.n	800e760 <_dtoa_r+0xb98>
 800e76a:	e6dd      	b.n	800e528 <_dtoa_r+0x960>
 800e76c:	9a00      	ldr	r2, [sp, #0]
 800e76e:	429a      	cmp	r2, r3
 800e770:	d189      	bne.n	800e686 <_dtoa_r+0xabe>
 800e772:	f10b 0b01 	add.w	fp, fp, #1
 800e776:	2331      	movs	r3, #49	; 0x31
 800e778:	e796      	b.n	800e6a8 <_dtoa_r+0xae0>
 800e77a:	4b0a      	ldr	r3, [pc, #40]	; (800e7a4 <_dtoa_r+0xbdc>)
 800e77c:	f7ff ba99 	b.w	800dcb2 <_dtoa_r+0xea>
 800e780:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e782:	2b00      	cmp	r3, #0
 800e784:	f47f aa6d 	bne.w	800dc62 <_dtoa_r+0x9a>
 800e788:	4b07      	ldr	r3, [pc, #28]	; (800e7a8 <_dtoa_r+0xbe0>)
 800e78a:	f7ff ba92 	b.w	800dcb2 <_dtoa_r+0xea>
 800e78e:	9b01      	ldr	r3, [sp, #4]
 800e790:	2b00      	cmp	r3, #0
 800e792:	dcb5      	bgt.n	800e700 <_dtoa_r+0xb38>
 800e794:	9b07      	ldr	r3, [sp, #28]
 800e796:	2b02      	cmp	r3, #2
 800e798:	f73f aeb1 	bgt.w	800e4fe <_dtoa_r+0x936>
 800e79c:	e7b0      	b.n	800e700 <_dtoa_r+0xb38>
 800e79e:	bf00      	nop
 800e7a0:	08010e75 	.word	0x08010e75
 800e7a4:	08010dcb 	.word	0x08010dcb
 800e7a8:	08010df9 	.word	0x08010df9

0800e7ac <_free_r>:
 800e7ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e7ae:	2900      	cmp	r1, #0
 800e7b0:	d044      	beq.n	800e83c <_free_r+0x90>
 800e7b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7b6:	9001      	str	r0, [sp, #4]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	f1a1 0404 	sub.w	r4, r1, #4
 800e7be:	bfb8      	it	lt
 800e7c0:	18e4      	addlt	r4, r4, r3
 800e7c2:	f000 f8f9 	bl	800e9b8 <__malloc_lock>
 800e7c6:	4a1e      	ldr	r2, [pc, #120]	; (800e840 <_free_r+0x94>)
 800e7c8:	9801      	ldr	r0, [sp, #4]
 800e7ca:	6813      	ldr	r3, [r2, #0]
 800e7cc:	b933      	cbnz	r3, 800e7dc <_free_r+0x30>
 800e7ce:	6063      	str	r3, [r4, #4]
 800e7d0:	6014      	str	r4, [r2, #0]
 800e7d2:	b003      	add	sp, #12
 800e7d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e7d8:	f000 b8f4 	b.w	800e9c4 <__malloc_unlock>
 800e7dc:	42a3      	cmp	r3, r4
 800e7de:	d908      	bls.n	800e7f2 <_free_r+0x46>
 800e7e0:	6825      	ldr	r5, [r4, #0]
 800e7e2:	1961      	adds	r1, r4, r5
 800e7e4:	428b      	cmp	r3, r1
 800e7e6:	bf01      	itttt	eq
 800e7e8:	6819      	ldreq	r1, [r3, #0]
 800e7ea:	685b      	ldreq	r3, [r3, #4]
 800e7ec:	1949      	addeq	r1, r1, r5
 800e7ee:	6021      	streq	r1, [r4, #0]
 800e7f0:	e7ed      	b.n	800e7ce <_free_r+0x22>
 800e7f2:	461a      	mov	r2, r3
 800e7f4:	685b      	ldr	r3, [r3, #4]
 800e7f6:	b10b      	cbz	r3, 800e7fc <_free_r+0x50>
 800e7f8:	42a3      	cmp	r3, r4
 800e7fa:	d9fa      	bls.n	800e7f2 <_free_r+0x46>
 800e7fc:	6811      	ldr	r1, [r2, #0]
 800e7fe:	1855      	adds	r5, r2, r1
 800e800:	42a5      	cmp	r5, r4
 800e802:	d10b      	bne.n	800e81c <_free_r+0x70>
 800e804:	6824      	ldr	r4, [r4, #0]
 800e806:	4421      	add	r1, r4
 800e808:	1854      	adds	r4, r2, r1
 800e80a:	42a3      	cmp	r3, r4
 800e80c:	6011      	str	r1, [r2, #0]
 800e80e:	d1e0      	bne.n	800e7d2 <_free_r+0x26>
 800e810:	681c      	ldr	r4, [r3, #0]
 800e812:	685b      	ldr	r3, [r3, #4]
 800e814:	6053      	str	r3, [r2, #4]
 800e816:	440c      	add	r4, r1
 800e818:	6014      	str	r4, [r2, #0]
 800e81a:	e7da      	b.n	800e7d2 <_free_r+0x26>
 800e81c:	d902      	bls.n	800e824 <_free_r+0x78>
 800e81e:	230c      	movs	r3, #12
 800e820:	6003      	str	r3, [r0, #0]
 800e822:	e7d6      	b.n	800e7d2 <_free_r+0x26>
 800e824:	6825      	ldr	r5, [r4, #0]
 800e826:	1961      	adds	r1, r4, r5
 800e828:	428b      	cmp	r3, r1
 800e82a:	bf04      	itt	eq
 800e82c:	6819      	ldreq	r1, [r3, #0]
 800e82e:	685b      	ldreq	r3, [r3, #4]
 800e830:	6063      	str	r3, [r4, #4]
 800e832:	bf04      	itt	eq
 800e834:	1949      	addeq	r1, r1, r5
 800e836:	6021      	streq	r1, [r4, #0]
 800e838:	6054      	str	r4, [r2, #4]
 800e83a:	e7ca      	b.n	800e7d2 <_free_r+0x26>
 800e83c:	b003      	add	sp, #12
 800e83e:	bd30      	pop	{r4, r5, pc}
 800e840:	20013e2c 	.word	0x20013e2c

0800e844 <malloc>:
 800e844:	4b02      	ldr	r3, [pc, #8]	; (800e850 <malloc+0xc>)
 800e846:	4601      	mov	r1, r0
 800e848:	6818      	ldr	r0, [r3, #0]
 800e84a:	f000 b823 	b.w	800e894 <_malloc_r>
 800e84e:	bf00      	nop
 800e850:	200001e0 	.word	0x200001e0

0800e854 <sbrk_aligned>:
 800e854:	b570      	push	{r4, r5, r6, lr}
 800e856:	4e0e      	ldr	r6, [pc, #56]	; (800e890 <sbrk_aligned+0x3c>)
 800e858:	460c      	mov	r4, r1
 800e85a:	6831      	ldr	r1, [r6, #0]
 800e85c:	4605      	mov	r5, r0
 800e85e:	b911      	cbnz	r1, 800e866 <sbrk_aligned+0x12>
 800e860:	f000 fe60 	bl	800f524 <_sbrk_r>
 800e864:	6030      	str	r0, [r6, #0]
 800e866:	4621      	mov	r1, r4
 800e868:	4628      	mov	r0, r5
 800e86a:	f000 fe5b 	bl	800f524 <_sbrk_r>
 800e86e:	1c43      	adds	r3, r0, #1
 800e870:	d00a      	beq.n	800e888 <sbrk_aligned+0x34>
 800e872:	1cc4      	adds	r4, r0, #3
 800e874:	f024 0403 	bic.w	r4, r4, #3
 800e878:	42a0      	cmp	r0, r4
 800e87a:	d007      	beq.n	800e88c <sbrk_aligned+0x38>
 800e87c:	1a21      	subs	r1, r4, r0
 800e87e:	4628      	mov	r0, r5
 800e880:	f000 fe50 	bl	800f524 <_sbrk_r>
 800e884:	3001      	adds	r0, #1
 800e886:	d101      	bne.n	800e88c <sbrk_aligned+0x38>
 800e888:	f04f 34ff 	mov.w	r4, #4294967295
 800e88c:	4620      	mov	r0, r4
 800e88e:	bd70      	pop	{r4, r5, r6, pc}
 800e890:	20013e30 	.word	0x20013e30

0800e894 <_malloc_r>:
 800e894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e898:	1ccd      	adds	r5, r1, #3
 800e89a:	f025 0503 	bic.w	r5, r5, #3
 800e89e:	3508      	adds	r5, #8
 800e8a0:	2d0c      	cmp	r5, #12
 800e8a2:	bf38      	it	cc
 800e8a4:	250c      	movcc	r5, #12
 800e8a6:	2d00      	cmp	r5, #0
 800e8a8:	4607      	mov	r7, r0
 800e8aa:	db01      	blt.n	800e8b0 <_malloc_r+0x1c>
 800e8ac:	42a9      	cmp	r1, r5
 800e8ae:	d905      	bls.n	800e8bc <_malloc_r+0x28>
 800e8b0:	230c      	movs	r3, #12
 800e8b2:	603b      	str	r3, [r7, #0]
 800e8b4:	2600      	movs	r6, #0
 800e8b6:	4630      	mov	r0, r6
 800e8b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e990 <_malloc_r+0xfc>
 800e8c0:	f000 f87a 	bl	800e9b8 <__malloc_lock>
 800e8c4:	f8d8 3000 	ldr.w	r3, [r8]
 800e8c8:	461c      	mov	r4, r3
 800e8ca:	bb5c      	cbnz	r4, 800e924 <_malloc_r+0x90>
 800e8cc:	4629      	mov	r1, r5
 800e8ce:	4638      	mov	r0, r7
 800e8d0:	f7ff ffc0 	bl	800e854 <sbrk_aligned>
 800e8d4:	1c43      	adds	r3, r0, #1
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	d155      	bne.n	800e986 <_malloc_r+0xf2>
 800e8da:	f8d8 4000 	ldr.w	r4, [r8]
 800e8de:	4626      	mov	r6, r4
 800e8e0:	2e00      	cmp	r6, #0
 800e8e2:	d145      	bne.n	800e970 <_malloc_r+0xdc>
 800e8e4:	2c00      	cmp	r4, #0
 800e8e6:	d048      	beq.n	800e97a <_malloc_r+0xe6>
 800e8e8:	6823      	ldr	r3, [r4, #0]
 800e8ea:	4631      	mov	r1, r6
 800e8ec:	4638      	mov	r0, r7
 800e8ee:	eb04 0903 	add.w	r9, r4, r3
 800e8f2:	f000 fe17 	bl	800f524 <_sbrk_r>
 800e8f6:	4581      	cmp	r9, r0
 800e8f8:	d13f      	bne.n	800e97a <_malloc_r+0xe6>
 800e8fa:	6821      	ldr	r1, [r4, #0]
 800e8fc:	1a6d      	subs	r5, r5, r1
 800e8fe:	4629      	mov	r1, r5
 800e900:	4638      	mov	r0, r7
 800e902:	f7ff ffa7 	bl	800e854 <sbrk_aligned>
 800e906:	3001      	adds	r0, #1
 800e908:	d037      	beq.n	800e97a <_malloc_r+0xe6>
 800e90a:	6823      	ldr	r3, [r4, #0]
 800e90c:	442b      	add	r3, r5
 800e90e:	6023      	str	r3, [r4, #0]
 800e910:	f8d8 3000 	ldr.w	r3, [r8]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d038      	beq.n	800e98a <_malloc_r+0xf6>
 800e918:	685a      	ldr	r2, [r3, #4]
 800e91a:	42a2      	cmp	r2, r4
 800e91c:	d12b      	bne.n	800e976 <_malloc_r+0xe2>
 800e91e:	2200      	movs	r2, #0
 800e920:	605a      	str	r2, [r3, #4]
 800e922:	e00f      	b.n	800e944 <_malloc_r+0xb0>
 800e924:	6822      	ldr	r2, [r4, #0]
 800e926:	1b52      	subs	r2, r2, r5
 800e928:	d41f      	bmi.n	800e96a <_malloc_r+0xd6>
 800e92a:	2a0b      	cmp	r2, #11
 800e92c:	d917      	bls.n	800e95e <_malloc_r+0xca>
 800e92e:	1961      	adds	r1, r4, r5
 800e930:	42a3      	cmp	r3, r4
 800e932:	6025      	str	r5, [r4, #0]
 800e934:	bf18      	it	ne
 800e936:	6059      	strne	r1, [r3, #4]
 800e938:	6863      	ldr	r3, [r4, #4]
 800e93a:	bf08      	it	eq
 800e93c:	f8c8 1000 	streq.w	r1, [r8]
 800e940:	5162      	str	r2, [r4, r5]
 800e942:	604b      	str	r3, [r1, #4]
 800e944:	4638      	mov	r0, r7
 800e946:	f104 060b 	add.w	r6, r4, #11
 800e94a:	f000 f83b 	bl	800e9c4 <__malloc_unlock>
 800e94e:	f026 0607 	bic.w	r6, r6, #7
 800e952:	1d23      	adds	r3, r4, #4
 800e954:	1af2      	subs	r2, r6, r3
 800e956:	d0ae      	beq.n	800e8b6 <_malloc_r+0x22>
 800e958:	1b9b      	subs	r3, r3, r6
 800e95a:	50a3      	str	r3, [r4, r2]
 800e95c:	e7ab      	b.n	800e8b6 <_malloc_r+0x22>
 800e95e:	42a3      	cmp	r3, r4
 800e960:	6862      	ldr	r2, [r4, #4]
 800e962:	d1dd      	bne.n	800e920 <_malloc_r+0x8c>
 800e964:	f8c8 2000 	str.w	r2, [r8]
 800e968:	e7ec      	b.n	800e944 <_malloc_r+0xb0>
 800e96a:	4623      	mov	r3, r4
 800e96c:	6864      	ldr	r4, [r4, #4]
 800e96e:	e7ac      	b.n	800e8ca <_malloc_r+0x36>
 800e970:	4634      	mov	r4, r6
 800e972:	6876      	ldr	r6, [r6, #4]
 800e974:	e7b4      	b.n	800e8e0 <_malloc_r+0x4c>
 800e976:	4613      	mov	r3, r2
 800e978:	e7cc      	b.n	800e914 <_malloc_r+0x80>
 800e97a:	230c      	movs	r3, #12
 800e97c:	603b      	str	r3, [r7, #0]
 800e97e:	4638      	mov	r0, r7
 800e980:	f000 f820 	bl	800e9c4 <__malloc_unlock>
 800e984:	e797      	b.n	800e8b6 <_malloc_r+0x22>
 800e986:	6025      	str	r5, [r4, #0]
 800e988:	e7dc      	b.n	800e944 <_malloc_r+0xb0>
 800e98a:	605b      	str	r3, [r3, #4]
 800e98c:	deff      	udf	#255	; 0xff
 800e98e:	bf00      	nop
 800e990:	20013e2c 	.word	0x20013e2c

0800e994 <__ascii_mbtowc>:
 800e994:	b082      	sub	sp, #8
 800e996:	b901      	cbnz	r1, 800e99a <__ascii_mbtowc+0x6>
 800e998:	a901      	add	r1, sp, #4
 800e99a:	b142      	cbz	r2, 800e9ae <__ascii_mbtowc+0x1a>
 800e99c:	b14b      	cbz	r3, 800e9b2 <__ascii_mbtowc+0x1e>
 800e99e:	7813      	ldrb	r3, [r2, #0]
 800e9a0:	600b      	str	r3, [r1, #0]
 800e9a2:	7812      	ldrb	r2, [r2, #0]
 800e9a4:	1e10      	subs	r0, r2, #0
 800e9a6:	bf18      	it	ne
 800e9a8:	2001      	movne	r0, #1
 800e9aa:	b002      	add	sp, #8
 800e9ac:	4770      	bx	lr
 800e9ae:	4610      	mov	r0, r2
 800e9b0:	e7fb      	b.n	800e9aa <__ascii_mbtowc+0x16>
 800e9b2:	f06f 0001 	mvn.w	r0, #1
 800e9b6:	e7f8      	b.n	800e9aa <__ascii_mbtowc+0x16>

0800e9b8 <__malloc_lock>:
 800e9b8:	4801      	ldr	r0, [pc, #4]	; (800e9c0 <__malloc_lock+0x8>)
 800e9ba:	f7ff b86a 	b.w	800da92 <__retarget_lock_acquire_recursive>
 800e9be:	bf00      	nop
 800e9c0:	20013e28 	.word	0x20013e28

0800e9c4 <__malloc_unlock>:
 800e9c4:	4801      	ldr	r0, [pc, #4]	; (800e9cc <__malloc_unlock+0x8>)
 800e9c6:	f7ff b865 	b.w	800da94 <__retarget_lock_release_recursive>
 800e9ca:	bf00      	nop
 800e9cc:	20013e28 	.word	0x20013e28

0800e9d0 <_Balloc>:
 800e9d0:	b570      	push	{r4, r5, r6, lr}
 800e9d2:	69c6      	ldr	r6, [r0, #28]
 800e9d4:	4604      	mov	r4, r0
 800e9d6:	460d      	mov	r5, r1
 800e9d8:	b976      	cbnz	r6, 800e9f8 <_Balloc+0x28>
 800e9da:	2010      	movs	r0, #16
 800e9dc:	f7ff ff32 	bl	800e844 <malloc>
 800e9e0:	4602      	mov	r2, r0
 800e9e2:	61e0      	str	r0, [r4, #28]
 800e9e4:	b920      	cbnz	r0, 800e9f0 <_Balloc+0x20>
 800e9e6:	4b18      	ldr	r3, [pc, #96]	; (800ea48 <_Balloc+0x78>)
 800e9e8:	4818      	ldr	r0, [pc, #96]	; (800ea4c <_Balloc+0x7c>)
 800e9ea:	216b      	movs	r1, #107	; 0x6b
 800e9ec:	f000 fdaa 	bl	800f544 <__assert_func>
 800e9f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e9f4:	6006      	str	r6, [r0, #0]
 800e9f6:	60c6      	str	r6, [r0, #12]
 800e9f8:	69e6      	ldr	r6, [r4, #28]
 800e9fa:	68f3      	ldr	r3, [r6, #12]
 800e9fc:	b183      	cbz	r3, 800ea20 <_Balloc+0x50>
 800e9fe:	69e3      	ldr	r3, [r4, #28]
 800ea00:	68db      	ldr	r3, [r3, #12]
 800ea02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ea06:	b9b8      	cbnz	r0, 800ea38 <_Balloc+0x68>
 800ea08:	2101      	movs	r1, #1
 800ea0a:	fa01 f605 	lsl.w	r6, r1, r5
 800ea0e:	1d72      	adds	r2, r6, #5
 800ea10:	0092      	lsls	r2, r2, #2
 800ea12:	4620      	mov	r0, r4
 800ea14:	f000 fdb4 	bl	800f580 <_calloc_r>
 800ea18:	b160      	cbz	r0, 800ea34 <_Balloc+0x64>
 800ea1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ea1e:	e00e      	b.n	800ea3e <_Balloc+0x6e>
 800ea20:	2221      	movs	r2, #33	; 0x21
 800ea22:	2104      	movs	r1, #4
 800ea24:	4620      	mov	r0, r4
 800ea26:	f000 fdab 	bl	800f580 <_calloc_r>
 800ea2a:	69e3      	ldr	r3, [r4, #28]
 800ea2c:	60f0      	str	r0, [r6, #12]
 800ea2e:	68db      	ldr	r3, [r3, #12]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d1e4      	bne.n	800e9fe <_Balloc+0x2e>
 800ea34:	2000      	movs	r0, #0
 800ea36:	bd70      	pop	{r4, r5, r6, pc}
 800ea38:	6802      	ldr	r2, [r0, #0]
 800ea3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ea3e:	2300      	movs	r3, #0
 800ea40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ea44:	e7f7      	b.n	800ea36 <_Balloc+0x66>
 800ea46:	bf00      	nop
 800ea48:	08010e06 	.word	0x08010e06
 800ea4c:	08010e86 	.word	0x08010e86

0800ea50 <_Bfree>:
 800ea50:	b570      	push	{r4, r5, r6, lr}
 800ea52:	69c6      	ldr	r6, [r0, #28]
 800ea54:	4605      	mov	r5, r0
 800ea56:	460c      	mov	r4, r1
 800ea58:	b976      	cbnz	r6, 800ea78 <_Bfree+0x28>
 800ea5a:	2010      	movs	r0, #16
 800ea5c:	f7ff fef2 	bl	800e844 <malloc>
 800ea60:	4602      	mov	r2, r0
 800ea62:	61e8      	str	r0, [r5, #28]
 800ea64:	b920      	cbnz	r0, 800ea70 <_Bfree+0x20>
 800ea66:	4b09      	ldr	r3, [pc, #36]	; (800ea8c <_Bfree+0x3c>)
 800ea68:	4809      	ldr	r0, [pc, #36]	; (800ea90 <_Bfree+0x40>)
 800ea6a:	218f      	movs	r1, #143	; 0x8f
 800ea6c:	f000 fd6a 	bl	800f544 <__assert_func>
 800ea70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea74:	6006      	str	r6, [r0, #0]
 800ea76:	60c6      	str	r6, [r0, #12]
 800ea78:	b13c      	cbz	r4, 800ea8a <_Bfree+0x3a>
 800ea7a:	69eb      	ldr	r3, [r5, #28]
 800ea7c:	6862      	ldr	r2, [r4, #4]
 800ea7e:	68db      	ldr	r3, [r3, #12]
 800ea80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ea84:	6021      	str	r1, [r4, #0]
 800ea86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ea8a:	bd70      	pop	{r4, r5, r6, pc}
 800ea8c:	08010e06 	.word	0x08010e06
 800ea90:	08010e86 	.word	0x08010e86

0800ea94 <__multadd>:
 800ea94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea98:	690d      	ldr	r5, [r1, #16]
 800ea9a:	4607      	mov	r7, r0
 800ea9c:	460c      	mov	r4, r1
 800ea9e:	461e      	mov	r6, r3
 800eaa0:	f101 0c14 	add.w	ip, r1, #20
 800eaa4:	2000      	movs	r0, #0
 800eaa6:	f8dc 3000 	ldr.w	r3, [ip]
 800eaaa:	b299      	uxth	r1, r3
 800eaac:	fb02 6101 	mla	r1, r2, r1, r6
 800eab0:	0c1e      	lsrs	r6, r3, #16
 800eab2:	0c0b      	lsrs	r3, r1, #16
 800eab4:	fb02 3306 	mla	r3, r2, r6, r3
 800eab8:	b289      	uxth	r1, r1
 800eaba:	3001      	adds	r0, #1
 800eabc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eac0:	4285      	cmp	r5, r0
 800eac2:	f84c 1b04 	str.w	r1, [ip], #4
 800eac6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eaca:	dcec      	bgt.n	800eaa6 <__multadd+0x12>
 800eacc:	b30e      	cbz	r6, 800eb12 <__multadd+0x7e>
 800eace:	68a3      	ldr	r3, [r4, #8]
 800ead0:	42ab      	cmp	r3, r5
 800ead2:	dc19      	bgt.n	800eb08 <__multadd+0x74>
 800ead4:	6861      	ldr	r1, [r4, #4]
 800ead6:	4638      	mov	r0, r7
 800ead8:	3101      	adds	r1, #1
 800eada:	f7ff ff79 	bl	800e9d0 <_Balloc>
 800eade:	4680      	mov	r8, r0
 800eae0:	b928      	cbnz	r0, 800eaee <__multadd+0x5a>
 800eae2:	4602      	mov	r2, r0
 800eae4:	4b0c      	ldr	r3, [pc, #48]	; (800eb18 <__multadd+0x84>)
 800eae6:	480d      	ldr	r0, [pc, #52]	; (800eb1c <__multadd+0x88>)
 800eae8:	21ba      	movs	r1, #186	; 0xba
 800eaea:	f000 fd2b 	bl	800f544 <__assert_func>
 800eaee:	6922      	ldr	r2, [r4, #16]
 800eaf0:	3202      	adds	r2, #2
 800eaf2:	f104 010c 	add.w	r1, r4, #12
 800eaf6:	0092      	lsls	r2, r2, #2
 800eaf8:	300c      	adds	r0, #12
 800eafa:	f7fe ffcc 	bl	800da96 <memcpy>
 800eafe:	4621      	mov	r1, r4
 800eb00:	4638      	mov	r0, r7
 800eb02:	f7ff ffa5 	bl	800ea50 <_Bfree>
 800eb06:	4644      	mov	r4, r8
 800eb08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eb0c:	3501      	adds	r5, #1
 800eb0e:	615e      	str	r6, [r3, #20]
 800eb10:	6125      	str	r5, [r4, #16]
 800eb12:	4620      	mov	r0, r4
 800eb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb18:	08010e75 	.word	0x08010e75
 800eb1c:	08010e86 	.word	0x08010e86

0800eb20 <__hi0bits>:
 800eb20:	0c03      	lsrs	r3, r0, #16
 800eb22:	041b      	lsls	r3, r3, #16
 800eb24:	b9d3      	cbnz	r3, 800eb5c <__hi0bits+0x3c>
 800eb26:	0400      	lsls	r0, r0, #16
 800eb28:	2310      	movs	r3, #16
 800eb2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800eb2e:	bf04      	itt	eq
 800eb30:	0200      	lsleq	r0, r0, #8
 800eb32:	3308      	addeq	r3, #8
 800eb34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800eb38:	bf04      	itt	eq
 800eb3a:	0100      	lsleq	r0, r0, #4
 800eb3c:	3304      	addeq	r3, #4
 800eb3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800eb42:	bf04      	itt	eq
 800eb44:	0080      	lsleq	r0, r0, #2
 800eb46:	3302      	addeq	r3, #2
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	db05      	blt.n	800eb58 <__hi0bits+0x38>
 800eb4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800eb50:	f103 0301 	add.w	r3, r3, #1
 800eb54:	bf08      	it	eq
 800eb56:	2320      	moveq	r3, #32
 800eb58:	4618      	mov	r0, r3
 800eb5a:	4770      	bx	lr
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	e7e4      	b.n	800eb2a <__hi0bits+0xa>

0800eb60 <__lo0bits>:
 800eb60:	6803      	ldr	r3, [r0, #0]
 800eb62:	f013 0207 	ands.w	r2, r3, #7
 800eb66:	d00c      	beq.n	800eb82 <__lo0bits+0x22>
 800eb68:	07d9      	lsls	r1, r3, #31
 800eb6a:	d422      	bmi.n	800ebb2 <__lo0bits+0x52>
 800eb6c:	079a      	lsls	r2, r3, #30
 800eb6e:	bf49      	itett	mi
 800eb70:	085b      	lsrmi	r3, r3, #1
 800eb72:	089b      	lsrpl	r3, r3, #2
 800eb74:	6003      	strmi	r3, [r0, #0]
 800eb76:	2201      	movmi	r2, #1
 800eb78:	bf5c      	itt	pl
 800eb7a:	6003      	strpl	r3, [r0, #0]
 800eb7c:	2202      	movpl	r2, #2
 800eb7e:	4610      	mov	r0, r2
 800eb80:	4770      	bx	lr
 800eb82:	b299      	uxth	r1, r3
 800eb84:	b909      	cbnz	r1, 800eb8a <__lo0bits+0x2a>
 800eb86:	0c1b      	lsrs	r3, r3, #16
 800eb88:	2210      	movs	r2, #16
 800eb8a:	b2d9      	uxtb	r1, r3
 800eb8c:	b909      	cbnz	r1, 800eb92 <__lo0bits+0x32>
 800eb8e:	3208      	adds	r2, #8
 800eb90:	0a1b      	lsrs	r3, r3, #8
 800eb92:	0719      	lsls	r1, r3, #28
 800eb94:	bf04      	itt	eq
 800eb96:	091b      	lsreq	r3, r3, #4
 800eb98:	3204      	addeq	r2, #4
 800eb9a:	0799      	lsls	r1, r3, #30
 800eb9c:	bf04      	itt	eq
 800eb9e:	089b      	lsreq	r3, r3, #2
 800eba0:	3202      	addeq	r2, #2
 800eba2:	07d9      	lsls	r1, r3, #31
 800eba4:	d403      	bmi.n	800ebae <__lo0bits+0x4e>
 800eba6:	085b      	lsrs	r3, r3, #1
 800eba8:	f102 0201 	add.w	r2, r2, #1
 800ebac:	d003      	beq.n	800ebb6 <__lo0bits+0x56>
 800ebae:	6003      	str	r3, [r0, #0]
 800ebb0:	e7e5      	b.n	800eb7e <__lo0bits+0x1e>
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	e7e3      	b.n	800eb7e <__lo0bits+0x1e>
 800ebb6:	2220      	movs	r2, #32
 800ebb8:	e7e1      	b.n	800eb7e <__lo0bits+0x1e>
	...

0800ebbc <__i2b>:
 800ebbc:	b510      	push	{r4, lr}
 800ebbe:	460c      	mov	r4, r1
 800ebc0:	2101      	movs	r1, #1
 800ebc2:	f7ff ff05 	bl	800e9d0 <_Balloc>
 800ebc6:	4602      	mov	r2, r0
 800ebc8:	b928      	cbnz	r0, 800ebd6 <__i2b+0x1a>
 800ebca:	4b05      	ldr	r3, [pc, #20]	; (800ebe0 <__i2b+0x24>)
 800ebcc:	4805      	ldr	r0, [pc, #20]	; (800ebe4 <__i2b+0x28>)
 800ebce:	f240 1145 	movw	r1, #325	; 0x145
 800ebd2:	f000 fcb7 	bl	800f544 <__assert_func>
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	6144      	str	r4, [r0, #20]
 800ebda:	6103      	str	r3, [r0, #16]
 800ebdc:	bd10      	pop	{r4, pc}
 800ebde:	bf00      	nop
 800ebe0:	08010e75 	.word	0x08010e75
 800ebe4:	08010e86 	.word	0x08010e86

0800ebe8 <__multiply>:
 800ebe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebec:	4691      	mov	r9, r2
 800ebee:	690a      	ldr	r2, [r1, #16]
 800ebf0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	bfb8      	it	lt
 800ebf8:	460b      	movlt	r3, r1
 800ebfa:	460c      	mov	r4, r1
 800ebfc:	bfbc      	itt	lt
 800ebfe:	464c      	movlt	r4, r9
 800ec00:	4699      	movlt	r9, r3
 800ec02:	6927      	ldr	r7, [r4, #16]
 800ec04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ec08:	68a3      	ldr	r3, [r4, #8]
 800ec0a:	6861      	ldr	r1, [r4, #4]
 800ec0c:	eb07 060a 	add.w	r6, r7, sl
 800ec10:	42b3      	cmp	r3, r6
 800ec12:	b085      	sub	sp, #20
 800ec14:	bfb8      	it	lt
 800ec16:	3101      	addlt	r1, #1
 800ec18:	f7ff feda 	bl	800e9d0 <_Balloc>
 800ec1c:	b930      	cbnz	r0, 800ec2c <__multiply+0x44>
 800ec1e:	4602      	mov	r2, r0
 800ec20:	4b44      	ldr	r3, [pc, #272]	; (800ed34 <__multiply+0x14c>)
 800ec22:	4845      	ldr	r0, [pc, #276]	; (800ed38 <__multiply+0x150>)
 800ec24:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ec28:	f000 fc8c 	bl	800f544 <__assert_func>
 800ec2c:	f100 0514 	add.w	r5, r0, #20
 800ec30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ec34:	462b      	mov	r3, r5
 800ec36:	2200      	movs	r2, #0
 800ec38:	4543      	cmp	r3, r8
 800ec3a:	d321      	bcc.n	800ec80 <__multiply+0x98>
 800ec3c:	f104 0314 	add.w	r3, r4, #20
 800ec40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ec44:	f109 0314 	add.w	r3, r9, #20
 800ec48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ec4c:	9202      	str	r2, [sp, #8]
 800ec4e:	1b3a      	subs	r2, r7, r4
 800ec50:	3a15      	subs	r2, #21
 800ec52:	f022 0203 	bic.w	r2, r2, #3
 800ec56:	3204      	adds	r2, #4
 800ec58:	f104 0115 	add.w	r1, r4, #21
 800ec5c:	428f      	cmp	r7, r1
 800ec5e:	bf38      	it	cc
 800ec60:	2204      	movcc	r2, #4
 800ec62:	9201      	str	r2, [sp, #4]
 800ec64:	9a02      	ldr	r2, [sp, #8]
 800ec66:	9303      	str	r3, [sp, #12]
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d80c      	bhi.n	800ec86 <__multiply+0x9e>
 800ec6c:	2e00      	cmp	r6, #0
 800ec6e:	dd03      	ble.n	800ec78 <__multiply+0x90>
 800ec70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d05b      	beq.n	800ed30 <__multiply+0x148>
 800ec78:	6106      	str	r6, [r0, #16]
 800ec7a:	b005      	add	sp, #20
 800ec7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec80:	f843 2b04 	str.w	r2, [r3], #4
 800ec84:	e7d8      	b.n	800ec38 <__multiply+0x50>
 800ec86:	f8b3 a000 	ldrh.w	sl, [r3]
 800ec8a:	f1ba 0f00 	cmp.w	sl, #0
 800ec8e:	d024      	beq.n	800ecda <__multiply+0xf2>
 800ec90:	f104 0e14 	add.w	lr, r4, #20
 800ec94:	46a9      	mov	r9, r5
 800ec96:	f04f 0c00 	mov.w	ip, #0
 800ec9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ec9e:	f8d9 1000 	ldr.w	r1, [r9]
 800eca2:	fa1f fb82 	uxth.w	fp, r2
 800eca6:	b289      	uxth	r1, r1
 800eca8:	fb0a 110b 	mla	r1, sl, fp, r1
 800ecac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ecb0:	f8d9 2000 	ldr.w	r2, [r9]
 800ecb4:	4461      	add	r1, ip
 800ecb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ecba:	fb0a c20b 	mla	r2, sl, fp, ip
 800ecbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ecc2:	b289      	uxth	r1, r1
 800ecc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ecc8:	4577      	cmp	r7, lr
 800ecca:	f849 1b04 	str.w	r1, [r9], #4
 800ecce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ecd2:	d8e2      	bhi.n	800ec9a <__multiply+0xb2>
 800ecd4:	9a01      	ldr	r2, [sp, #4]
 800ecd6:	f845 c002 	str.w	ip, [r5, r2]
 800ecda:	9a03      	ldr	r2, [sp, #12]
 800ecdc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ece0:	3304      	adds	r3, #4
 800ece2:	f1b9 0f00 	cmp.w	r9, #0
 800ece6:	d021      	beq.n	800ed2c <__multiply+0x144>
 800ece8:	6829      	ldr	r1, [r5, #0]
 800ecea:	f104 0c14 	add.w	ip, r4, #20
 800ecee:	46ae      	mov	lr, r5
 800ecf0:	f04f 0a00 	mov.w	sl, #0
 800ecf4:	f8bc b000 	ldrh.w	fp, [ip]
 800ecf8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ecfc:	fb09 220b 	mla	r2, r9, fp, r2
 800ed00:	4452      	add	r2, sl
 800ed02:	b289      	uxth	r1, r1
 800ed04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ed08:	f84e 1b04 	str.w	r1, [lr], #4
 800ed0c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ed10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ed14:	f8be 1000 	ldrh.w	r1, [lr]
 800ed18:	fb09 110a 	mla	r1, r9, sl, r1
 800ed1c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ed20:	4567      	cmp	r7, ip
 800ed22:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ed26:	d8e5      	bhi.n	800ecf4 <__multiply+0x10c>
 800ed28:	9a01      	ldr	r2, [sp, #4]
 800ed2a:	50a9      	str	r1, [r5, r2]
 800ed2c:	3504      	adds	r5, #4
 800ed2e:	e799      	b.n	800ec64 <__multiply+0x7c>
 800ed30:	3e01      	subs	r6, #1
 800ed32:	e79b      	b.n	800ec6c <__multiply+0x84>
 800ed34:	08010e75 	.word	0x08010e75
 800ed38:	08010e86 	.word	0x08010e86

0800ed3c <__pow5mult>:
 800ed3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed40:	4615      	mov	r5, r2
 800ed42:	f012 0203 	ands.w	r2, r2, #3
 800ed46:	4606      	mov	r6, r0
 800ed48:	460f      	mov	r7, r1
 800ed4a:	d007      	beq.n	800ed5c <__pow5mult+0x20>
 800ed4c:	4c25      	ldr	r4, [pc, #148]	; (800ede4 <__pow5mult+0xa8>)
 800ed4e:	3a01      	subs	r2, #1
 800ed50:	2300      	movs	r3, #0
 800ed52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ed56:	f7ff fe9d 	bl	800ea94 <__multadd>
 800ed5a:	4607      	mov	r7, r0
 800ed5c:	10ad      	asrs	r5, r5, #2
 800ed5e:	d03d      	beq.n	800eddc <__pow5mult+0xa0>
 800ed60:	69f4      	ldr	r4, [r6, #28]
 800ed62:	b97c      	cbnz	r4, 800ed84 <__pow5mult+0x48>
 800ed64:	2010      	movs	r0, #16
 800ed66:	f7ff fd6d 	bl	800e844 <malloc>
 800ed6a:	4602      	mov	r2, r0
 800ed6c:	61f0      	str	r0, [r6, #28]
 800ed6e:	b928      	cbnz	r0, 800ed7c <__pow5mult+0x40>
 800ed70:	4b1d      	ldr	r3, [pc, #116]	; (800ede8 <__pow5mult+0xac>)
 800ed72:	481e      	ldr	r0, [pc, #120]	; (800edec <__pow5mult+0xb0>)
 800ed74:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ed78:	f000 fbe4 	bl	800f544 <__assert_func>
 800ed7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ed80:	6004      	str	r4, [r0, #0]
 800ed82:	60c4      	str	r4, [r0, #12]
 800ed84:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ed88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ed8c:	b94c      	cbnz	r4, 800eda2 <__pow5mult+0x66>
 800ed8e:	f240 2171 	movw	r1, #625	; 0x271
 800ed92:	4630      	mov	r0, r6
 800ed94:	f7ff ff12 	bl	800ebbc <__i2b>
 800ed98:	2300      	movs	r3, #0
 800ed9a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ed9e:	4604      	mov	r4, r0
 800eda0:	6003      	str	r3, [r0, #0]
 800eda2:	f04f 0900 	mov.w	r9, #0
 800eda6:	07eb      	lsls	r3, r5, #31
 800eda8:	d50a      	bpl.n	800edc0 <__pow5mult+0x84>
 800edaa:	4639      	mov	r1, r7
 800edac:	4622      	mov	r2, r4
 800edae:	4630      	mov	r0, r6
 800edb0:	f7ff ff1a 	bl	800ebe8 <__multiply>
 800edb4:	4639      	mov	r1, r7
 800edb6:	4680      	mov	r8, r0
 800edb8:	4630      	mov	r0, r6
 800edba:	f7ff fe49 	bl	800ea50 <_Bfree>
 800edbe:	4647      	mov	r7, r8
 800edc0:	106d      	asrs	r5, r5, #1
 800edc2:	d00b      	beq.n	800eddc <__pow5mult+0xa0>
 800edc4:	6820      	ldr	r0, [r4, #0]
 800edc6:	b938      	cbnz	r0, 800edd8 <__pow5mult+0x9c>
 800edc8:	4622      	mov	r2, r4
 800edca:	4621      	mov	r1, r4
 800edcc:	4630      	mov	r0, r6
 800edce:	f7ff ff0b 	bl	800ebe8 <__multiply>
 800edd2:	6020      	str	r0, [r4, #0]
 800edd4:	f8c0 9000 	str.w	r9, [r0]
 800edd8:	4604      	mov	r4, r0
 800edda:	e7e4      	b.n	800eda6 <__pow5mult+0x6a>
 800eddc:	4638      	mov	r0, r7
 800edde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ede2:	bf00      	nop
 800ede4:	08010fd0 	.word	0x08010fd0
 800ede8:	08010e06 	.word	0x08010e06
 800edec:	08010e86 	.word	0x08010e86

0800edf0 <__lshift>:
 800edf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edf4:	460c      	mov	r4, r1
 800edf6:	6849      	ldr	r1, [r1, #4]
 800edf8:	6923      	ldr	r3, [r4, #16]
 800edfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800edfe:	68a3      	ldr	r3, [r4, #8]
 800ee00:	4607      	mov	r7, r0
 800ee02:	4691      	mov	r9, r2
 800ee04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ee08:	f108 0601 	add.w	r6, r8, #1
 800ee0c:	42b3      	cmp	r3, r6
 800ee0e:	db0b      	blt.n	800ee28 <__lshift+0x38>
 800ee10:	4638      	mov	r0, r7
 800ee12:	f7ff fddd 	bl	800e9d0 <_Balloc>
 800ee16:	4605      	mov	r5, r0
 800ee18:	b948      	cbnz	r0, 800ee2e <__lshift+0x3e>
 800ee1a:	4602      	mov	r2, r0
 800ee1c:	4b28      	ldr	r3, [pc, #160]	; (800eec0 <__lshift+0xd0>)
 800ee1e:	4829      	ldr	r0, [pc, #164]	; (800eec4 <__lshift+0xd4>)
 800ee20:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ee24:	f000 fb8e 	bl	800f544 <__assert_func>
 800ee28:	3101      	adds	r1, #1
 800ee2a:	005b      	lsls	r3, r3, #1
 800ee2c:	e7ee      	b.n	800ee0c <__lshift+0x1c>
 800ee2e:	2300      	movs	r3, #0
 800ee30:	f100 0114 	add.w	r1, r0, #20
 800ee34:	f100 0210 	add.w	r2, r0, #16
 800ee38:	4618      	mov	r0, r3
 800ee3a:	4553      	cmp	r3, sl
 800ee3c:	db33      	blt.n	800eea6 <__lshift+0xb6>
 800ee3e:	6920      	ldr	r0, [r4, #16]
 800ee40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ee44:	f104 0314 	add.w	r3, r4, #20
 800ee48:	f019 091f 	ands.w	r9, r9, #31
 800ee4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ee50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ee54:	d02b      	beq.n	800eeae <__lshift+0xbe>
 800ee56:	f1c9 0e20 	rsb	lr, r9, #32
 800ee5a:	468a      	mov	sl, r1
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	6818      	ldr	r0, [r3, #0]
 800ee60:	fa00 f009 	lsl.w	r0, r0, r9
 800ee64:	4310      	orrs	r0, r2
 800ee66:	f84a 0b04 	str.w	r0, [sl], #4
 800ee6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee6e:	459c      	cmp	ip, r3
 800ee70:	fa22 f20e 	lsr.w	r2, r2, lr
 800ee74:	d8f3      	bhi.n	800ee5e <__lshift+0x6e>
 800ee76:	ebac 0304 	sub.w	r3, ip, r4
 800ee7a:	3b15      	subs	r3, #21
 800ee7c:	f023 0303 	bic.w	r3, r3, #3
 800ee80:	3304      	adds	r3, #4
 800ee82:	f104 0015 	add.w	r0, r4, #21
 800ee86:	4584      	cmp	ip, r0
 800ee88:	bf38      	it	cc
 800ee8a:	2304      	movcc	r3, #4
 800ee8c:	50ca      	str	r2, [r1, r3]
 800ee8e:	b10a      	cbz	r2, 800ee94 <__lshift+0xa4>
 800ee90:	f108 0602 	add.w	r6, r8, #2
 800ee94:	3e01      	subs	r6, #1
 800ee96:	4638      	mov	r0, r7
 800ee98:	612e      	str	r6, [r5, #16]
 800ee9a:	4621      	mov	r1, r4
 800ee9c:	f7ff fdd8 	bl	800ea50 <_Bfree>
 800eea0:	4628      	mov	r0, r5
 800eea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eea6:	f842 0f04 	str.w	r0, [r2, #4]!
 800eeaa:	3301      	adds	r3, #1
 800eeac:	e7c5      	b.n	800ee3a <__lshift+0x4a>
 800eeae:	3904      	subs	r1, #4
 800eeb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800eeb4:	f841 2f04 	str.w	r2, [r1, #4]!
 800eeb8:	459c      	cmp	ip, r3
 800eeba:	d8f9      	bhi.n	800eeb0 <__lshift+0xc0>
 800eebc:	e7ea      	b.n	800ee94 <__lshift+0xa4>
 800eebe:	bf00      	nop
 800eec0:	08010e75 	.word	0x08010e75
 800eec4:	08010e86 	.word	0x08010e86

0800eec8 <__mcmp>:
 800eec8:	b530      	push	{r4, r5, lr}
 800eeca:	6902      	ldr	r2, [r0, #16]
 800eecc:	690c      	ldr	r4, [r1, #16]
 800eece:	1b12      	subs	r2, r2, r4
 800eed0:	d10e      	bne.n	800eef0 <__mcmp+0x28>
 800eed2:	f100 0314 	add.w	r3, r0, #20
 800eed6:	3114      	adds	r1, #20
 800eed8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800eedc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800eee0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800eee4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800eee8:	42a5      	cmp	r5, r4
 800eeea:	d003      	beq.n	800eef4 <__mcmp+0x2c>
 800eeec:	d305      	bcc.n	800eefa <__mcmp+0x32>
 800eeee:	2201      	movs	r2, #1
 800eef0:	4610      	mov	r0, r2
 800eef2:	bd30      	pop	{r4, r5, pc}
 800eef4:	4283      	cmp	r3, r0
 800eef6:	d3f3      	bcc.n	800eee0 <__mcmp+0x18>
 800eef8:	e7fa      	b.n	800eef0 <__mcmp+0x28>
 800eefa:	f04f 32ff 	mov.w	r2, #4294967295
 800eefe:	e7f7      	b.n	800eef0 <__mcmp+0x28>

0800ef00 <__mdiff>:
 800ef00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef04:	460c      	mov	r4, r1
 800ef06:	4606      	mov	r6, r0
 800ef08:	4611      	mov	r1, r2
 800ef0a:	4620      	mov	r0, r4
 800ef0c:	4690      	mov	r8, r2
 800ef0e:	f7ff ffdb 	bl	800eec8 <__mcmp>
 800ef12:	1e05      	subs	r5, r0, #0
 800ef14:	d110      	bne.n	800ef38 <__mdiff+0x38>
 800ef16:	4629      	mov	r1, r5
 800ef18:	4630      	mov	r0, r6
 800ef1a:	f7ff fd59 	bl	800e9d0 <_Balloc>
 800ef1e:	b930      	cbnz	r0, 800ef2e <__mdiff+0x2e>
 800ef20:	4b3a      	ldr	r3, [pc, #232]	; (800f00c <__mdiff+0x10c>)
 800ef22:	4602      	mov	r2, r0
 800ef24:	f240 2137 	movw	r1, #567	; 0x237
 800ef28:	4839      	ldr	r0, [pc, #228]	; (800f010 <__mdiff+0x110>)
 800ef2a:	f000 fb0b 	bl	800f544 <__assert_func>
 800ef2e:	2301      	movs	r3, #1
 800ef30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ef34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef38:	bfa4      	itt	ge
 800ef3a:	4643      	movge	r3, r8
 800ef3c:	46a0      	movge	r8, r4
 800ef3e:	4630      	mov	r0, r6
 800ef40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ef44:	bfa6      	itte	ge
 800ef46:	461c      	movge	r4, r3
 800ef48:	2500      	movge	r5, #0
 800ef4a:	2501      	movlt	r5, #1
 800ef4c:	f7ff fd40 	bl	800e9d0 <_Balloc>
 800ef50:	b920      	cbnz	r0, 800ef5c <__mdiff+0x5c>
 800ef52:	4b2e      	ldr	r3, [pc, #184]	; (800f00c <__mdiff+0x10c>)
 800ef54:	4602      	mov	r2, r0
 800ef56:	f240 2145 	movw	r1, #581	; 0x245
 800ef5a:	e7e5      	b.n	800ef28 <__mdiff+0x28>
 800ef5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ef60:	6926      	ldr	r6, [r4, #16]
 800ef62:	60c5      	str	r5, [r0, #12]
 800ef64:	f104 0914 	add.w	r9, r4, #20
 800ef68:	f108 0514 	add.w	r5, r8, #20
 800ef6c:	f100 0e14 	add.w	lr, r0, #20
 800ef70:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ef74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ef78:	f108 0210 	add.w	r2, r8, #16
 800ef7c:	46f2      	mov	sl, lr
 800ef7e:	2100      	movs	r1, #0
 800ef80:	f859 3b04 	ldr.w	r3, [r9], #4
 800ef84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ef88:	fa11 f88b 	uxtah	r8, r1, fp
 800ef8c:	b299      	uxth	r1, r3
 800ef8e:	0c1b      	lsrs	r3, r3, #16
 800ef90:	eba8 0801 	sub.w	r8, r8, r1
 800ef94:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ef98:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ef9c:	fa1f f888 	uxth.w	r8, r8
 800efa0:	1419      	asrs	r1, r3, #16
 800efa2:	454e      	cmp	r6, r9
 800efa4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800efa8:	f84a 3b04 	str.w	r3, [sl], #4
 800efac:	d8e8      	bhi.n	800ef80 <__mdiff+0x80>
 800efae:	1b33      	subs	r3, r6, r4
 800efb0:	3b15      	subs	r3, #21
 800efb2:	f023 0303 	bic.w	r3, r3, #3
 800efb6:	3304      	adds	r3, #4
 800efb8:	3415      	adds	r4, #21
 800efba:	42a6      	cmp	r6, r4
 800efbc:	bf38      	it	cc
 800efbe:	2304      	movcc	r3, #4
 800efc0:	441d      	add	r5, r3
 800efc2:	4473      	add	r3, lr
 800efc4:	469e      	mov	lr, r3
 800efc6:	462e      	mov	r6, r5
 800efc8:	4566      	cmp	r6, ip
 800efca:	d30e      	bcc.n	800efea <__mdiff+0xea>
 800efcc:	f10c 0203 	add.w	r2, ip, #3
 800efd0:	1b52      	subs	r2, r2, r5
 800efd2:	f022 0203 	bic.w	r2, r2, #3
 800efd6:	3d03      	subs	r5, #3
 800efd8:	45ac      	cmp	ip, r5
 800efda:	bf38      	it	cc
 800efdc:	2200      	movcc	r2, #0
 800efde:	4413      	add	r3, r2
 800efe0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800efe4:	b17a      	cbz	r2, 800f006 <__mdiff+0x106>
 800efe6:	6107      	str	r7, [r0, #16]
 800efe8:	e7a4      	b.n	800ef34 <__mdiff+0x34>
 800efea:	f856 8b04 	ldr.w	r8, [r6], #4
 800efee:	fa11 f288 	uxtah	r2, r1, r8
 800eff2:	1414      	asrs	r4, r2, #16
 800eff4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800eff8:	b292      	uxth	r2, r2
 800effa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800effe:	f84e 2b04 	str.w	r2, [lr], #4
 800f002:	1421      	asrs	r1, r4, #16
 800f004:	e7e0      	b.n	800efc8 <__mdiff+0xc8>
 800f006:	3f01      	subs	r7, #1
 800f008:	e7ea      	b.n	800efe0 <__mdiff+0xe0>
 800f00a:	bf00      	nop
 800f00c:	08010e75 	.word	0x08010e75
 800f010:	08010e86 	.word	0x08010e86

0800f014 <__d2b>:
 800f014:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f018:	460f      	mov	r7, r1
 800f01a:	2101      	movs	r1, #1
 800f01c:	ec59 8b10 	vmov	r8, r9, d0
 800f020:	4616      	mov	r6, r2
 800f022:	f7ff fcd5 	bl	800e9d0 <_Balloc>
 800f026:	4604      	mov	r4, r0
 800f028:	b930      	cbnz	r0, 800f038 <__d2b+0x24>
 800f02a:	4602      	mov	r2, r0
 800f02c:	4b24      	ldr	r3, [pc, #144]	; (800f0c0 <__d2b+0xac>)
 800f02e:	4825      	ldr	r0, [pc, #148]	; (800f0c4 <__d2b+0xb0>)
 800f030:	f240 310f 	movw	r1, #783	; 0x30f
 800f034:	f000 fa86 	bl	800f544 <__assert_func>
 800f038:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f03c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f040:	bb2d      	cbnz	r5, 800f08e <__d2b+0x7a>
 800f042:	9301      	str	r3, [sp, #4]
 800f044:	f1b8 0300 	subs.w	r3, r8, #0
 800f048:	d026      	beq.n	800f098 <__d2b+0x84>
 800f04a:	4668      	mov	r0, sp
 800f04c:	9300      	str	r3, [sp, #0]
 800f04e:	f7ff fd87 	bl	800eb60 <__lo0bits>
 800f052:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f056:	b1e8      	cbz	r0, 800f094 <__d2b+0x80>
 800f058:	f1c0 0320 	rsb	r3, r0, #32
 800f05c:	fa02 f303 	lsl.w	r3, r2, r3
 800f060:	430b      	orrs	r3, r1
 800f062:	40c2      	lsrs	r2, r0
 800f064:	6163      	str	r3, [r4, #20]
 800f066:	9201      	str	r2, [sp, #4]
 800f068:	9b01      	ldr	r3, [sp, #4]
 800f06a:	61a3      	str	r3, [r4, #24]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	bf14      	ite	ne
 800f070:	2202      	movne	r2, #2
 800f072:	2201      	moveq	r2, #1
 800f074:	6122      	str	r2, [r4, #16]
 800f076:	b1bd      	cbz	r5, 800f0a8 <__d2b+0x94>
 800f078:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f07c:	4405      	add	r5, r0
 800f07e:	603d      	str	r5, [r7, #0]
 800f080:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f084:	6030      	str	r0, [r6, #0]
 800f086:	4620      	mov	r0, r4
 800f088:	b003      	add	sp, #12
 800f08a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f08e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f092:	e7d6      	b.n	800f042 <__d2b+0x2e>
 800f094:	6161      	str	r1, [r4, #20]
 800f096:	e7e7      	b.n	800f068 <__d2b+0x54>
 800f098:	a801      	add	r0, sp, #4
 800f09a:	f7ff fd61 	bl	800eb60 <__lo0bits>
 800f09e:	9b01      	ldr	r3, [sp, #4]
 800f0a0:	6163      	str	r3, [r4, #20]
 800f0a2:	3020      	adds	r0, #32
 800f0a4:	2201      	movs	r2, #1
 800f0a6:	e7e5      	b.n	800f074 <__d2b+0x60>
 800f0a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f0ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f0b0:	6038      	str	r0, [r7, #0]
 800f0b2:	6918      	ldr	r0, [r3, #16]
 800f0b4:	f7ff fd34 	bl	800eb20 <__hi0bits>
 800f0b8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f0bc:	e7e2      	b.n	800f084 <__d2b+0x70>
 800f0be:	bf00      	nop
 800f0c0:	08010e75 	.word	0x08010e75
 800f0c4:	08010e86 	.word	0x08010e86

0800f0c8 <__ascii_wctomb>:
 800f0c8:	b149      	cbz	r1, 800f0de <__ascii_wctomb+0x16>
 800f0ca:	2aff      	cmp	r2, #255	; 0xff
 800f0cc:	bf85      	ittet	hi
 800f0ce:	238a      	movhi	r3, #138	; 0x8a
 800f0d0:	6003      	strhi	r3, [r0, #0]
 800f0d2:	700a      	strbls	r2, [r1, #0]
 800f0d4:	f04f 30ff 	movhi.w	r0, #4294967295
 800f0d8:	bf98      	it	ls
 800f0da:	2001      	movls	r0, #1
 800f0dc:	4770      	bx	lr
 800f0de:	4608      	mov	r0, r1
 800f0e0:	4770      	bx	lr

0800f0e2 <__ssputs_r>:
 800f0e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0e6:	688e      	ldr	r6, [r1, #8]
 800f0e8:	461f      	mov	r7, r3
 800f0ea:	42be      	cmp	r6, r7
 800f0ec:	680b      	ldr	r3, [r1, #0]
 800f0ee:	4682      	mov	sl, r0
 800f0f0:	460c      	mov	r4, r1
 800f0f2:	4690      	mov	r8, r2
 800f0f4:	d82c      	bhi.n	800f150 <__ssputs_r+0x6e>
 800f0f6:	898a      	ldrh	r2, [r1, #12]
 800f0f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f0fc:	d026      	beq.n	800f14c <__ssputs_r+0x6a>
 800f0fe:	6965      	ldr	r5, [r4, #20]
 800f100:	6909      	ldr	r1, [r1, #16]
 800f102:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f106:	eba3 0901 	sub.w	r9, r3, r1
 800f10a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f10e:	1c7b      	adds	r3, r7, #1
 800f110:	444b      	add	r3, r9
 800f112:	106d      	asrs	r5, r5, #1
 800f114:	429d      	cmp	r5, r3
 800f116:	bf38      	it	cc
 800f118:	461d      	movcc	r5, r3
 800f11a:	0553      	lsls	r3, r2, #21
 800f11c:	d527      	bpl.n	800f16e <__ssputs_r+0x8c>
 800f11e:	4629      	mov	r1, r5
 800f120:	f7ff fbb8 	bl	800e894 <_malloc_r>
 800f124:	4606      	mov	r6, r0
 800f126:	b360      	cbz	r0, 800f182 <__ssputs_r+0xa0>
 800f128:	6921      	ldr	r1, [r4, #16]
 800f12a:	464a      	mov	r2, r9
 800f12c:	f7fe fcb3 	bl	800da96 <memcpy>
 800f130:	89a3      	ldrh	r3, [r4, #12]
 800f132:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f13a:	81a3      	strh	r3, [r4, #12]
 800f13c:	6126      	str	r6, [r4, #16]
 800f13e:	6165      	str	r5, [r4, #20]
 800f140:	444e      	add	r6, r9
 800f142:	eba5 0509 	sub.w	r5, r5, r9
 800f146:	6026      	str	r6, [r4, #0]
 800f148:	60a5      	str	r5, [r4, #8]
 800f14a:	463e      	mov	r6, r7
 800f14c:	42be      	cmp	r6, r7
 800f14e:	d900      	bls.n	800f152 <__ssputs_r+0x70>
 800f150:	463e      	mov	r6, r7
 800f152:	6820      	ldr	r0, [r4, #0]
 800f154:	4632      	mov	r2, r6
 800f156:	4641      	mov	r1, r8
 800f158:	f000 f9ca 	bl	800f4f0 <memmove>
 800f15c:	68a3      	ldr	r3, [r4, #8]
 800f15e:	1b9b      	subs	r3, r3, r6
 800f160:	60a3      	str	r3, [r4, #8]
 800f162:	6823      	ldr	r3, [r4, #0]
 800f164:	4433      	add	r3, r6
 800f166:	6023      	str	r3, [r4, #0]
 800f168:	2000      	movs	r0, #0
 800f16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f16e:	462a      	mov	r2, r5
 800f170:	f000 fa1c 	bl	800f5ac <_realloc_r>
 800f174:	4606      	mov	r6, r0
 800f176:	2800      	cmp	r0, #0
 800f178:	d1e0      	bne.n	800f13c <__ssputs_r+0x5a>
 800f17a:	6921      	ldr	r1, [r4, #16]
 800f17c:	4650      	mov	r0, sl
 800f17e:	f7ff fb15 	bl	800e7ac <_free_r>
 800f182:	230c      	movs	r3, #12
 800f184:	f8ca 3000 	str.w	r3, [sl]
 800f188:	89a3      	ldrh	r3, [r4, #12]
 800f18a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f18e:	81a3      	strh	r3, [r4, #12]
 800f190:	f04f 30ff 	mov.w	r0, #4294967295
 800f194:	e7e9      	b.n	800f16a <__ssputs_r+0x88>
	...

0800f198 <_svfiprintf_r>:
 800f198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f19c:	4698      	mov	r8, r3
 800f19e:	898b      	ldrh	r3, [r1, #12]
 800f1a0:	061b      	lsls	r3, r3, #24
 800f1a2:	b09d      	sub	sp, #116	; 0x74
 800f1a4:	4607      	mov	r7, r0
 800f1a6:	460d      	mov	r5, r1
 800f1a8:	4614      	mov	r4, r2
 800f1aa:	d50e      	bpl.n	800f1ca <_svfiprintf_r+0x32>
 800f1ac:	690b      	ldr	r3, [r1, #16]
 800f1ae:	b963      	cbnz	r3, 800f1ca <_svfiprintf_r+0x32>
 800f1b0:	2140      	movs	r1, #64	; 0x40
 800f1b2:	f7ff fb6f 	bl	800e894 <_malloc_r>
 800f1b6:	6028      	str	r0, [r5, #0]
 800f1b8:	6128      	str	r0, [r5, #16]
 800f1ba:	b920      	cbnz	r0, 800f1c6 <_svfiprintf_r+0x2e>
 800f1bc:	230c      	movs	r3, #12
 800f1be:	603b      	str	r3, [r7, #0]
 800f1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f1c4:	e0d0      	b.n	800f368 <_svfiprintf_r+0x1d0>
 800f1c6:	2340      	movs	r3, #64	; 0x40
 800f1c8:	616b      	str	r3, [r5, #20]
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	9309      	str	r3, [sp, #36]	; 0x24
 800f1ce:	2320      	movs	r3, #32
 800f1d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f1d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1d8:	2330      	movs	r3, #48	; 0x30
 800f1da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f380 <_svfiprintf_r+0x1e8>
 800f1de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f1e2:	f04f 0901 	mov.w	r9, #1
 800f1e6:	4623      	mov	r3, r4
 800f1e8:	469a      	mov	sl, r3
 800f1ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1ee:	b10a      	cbz	r2, 800f1f4 <_svfiprintf_r+0x5c>
 800f1f0:	2a25      	cmp	r2, #37	; 0x25
 800f1f2:	d1f9      	bne.n	800f1e8 <_svfiprintf_r+0x50>
 800f1f4:	ebba 0b04 	subs.w	fp, sl, r4
 800f1f8:	d00b      	beq.n	800f212 <_svfiprintf_r+0x7a>
 800f1fa:	465b      	mov	r3, fp
 800f1fc:	4622      	mov	r2, r4
 800f1fe:	4629      	mov	r1, r5
 800f200:	4638      	mov	r0, r7
 800f202:	f7ff ff6e 	bl	800f0e2 <__ssputs_r>
 800f206:	3001      	adds	r0, #1
 800f208:	f000 80a9 	beq.w	800f35e <_svfiprintf_r+0x1c6>
 800f20c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f20e:	445a      	add	r2, fp
 800f210:	9209      	str	r2, [sp, #36]	; 0x24
 800f212:	f89a 3000 	ldrb.w	r3, [sl]
 800f216:	2b00      	cmp	r3, #0
 800f218:	f000 80a1 	beq.w	800f35e <_svfiprintf_r+0x1c6>
 800f21c:	2300      	movs	r3, #0
 800f21e:	f04f 32ff 	mov.w	r2, #4294967295
 800f222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f226:	f10a 0a01 	add.w	sl, sl, #1
 800f22a:	9304      	str	r3, [sp, #16]
 800f22c:	9307      	str	r3, [sp, #28]
 800f22e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f232:	931a      	str	r3, [sp, #104]	; 0x68
 800f234:	4654      	mov	r4, sl
 800f236:	2205      	movs	r2, #5
 800f238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f23c:	4850      	ldr	r0, [pc, #320]	; (800f380 <_svfiprintf_r+0x1e8>)
 800f23e:	f7f1 f837 	bl	80002b0 <memchr>
 800f242:	9a04      	ldr	r2, [sp, #16]
 800f244:	b9d8      	cbnz	r0, 800f27e <_svfiprintf_r+0xe6>
 800f246:	06d0      	lsls	r0, r2, #27
 800f248:	bf44      	itt	mi
 800f24a:	2320      	movmi	r3, #32
 800f24c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f250:	0711      	lsls	r1, r2, #28
 800f252:	bf44      	itt	mi
 800f254:	232b      	movmi	r3, #43	; 0x2b
 800f256:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f25a:	f89a 3000 	ldrb.w	r3, [sl]
 800f25e:	2b2a      	cmp	r3, #42	; 0x2a
 800f260:	d015      	beq.n	800f28e <_svfiprintf_r+0xf6>
 800f262:	9a07      	ldr	r2, [sp, #28]
 800f264:	4654      	mov	r4, sl
 800f266:	2000      	movs	r0, #0
 800f268:	f04f 0c0a 	mov.w	ip, #10
 800f26c:	4621      	mov	r1, r4
 800f26e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f272:	3b30      	subs	r3, #48	; 0x30
 800f274:	2b09      	cmp	r3, #9
 800f276:	d94d      	bls.n	800f314 <_svfiprintf_r+0x17c>
 800f278:	b1b0      	cbz	r0, 800f2a8 <_svfiprintf_r+0x110>
 800f27a:	9207      	str	r2, [sp, #28]
 800f27c:	e014      	b.n	800f2a8 <_svfiprintf_r+0x110>
 800f27e:	eba0 0308 	sub.w	r3, r0, r8
 800f282:	fa09 f303 	lsl.w	r3, r9, r3
 800f286:	4313      	orrs	r3, r2
 800f288:	9304      	str	r3, [sp, #16]
 800f28a:	46a2      	mov	sl, r4
 800f28c:	e7d2      	b.n	800f234 <_svfiprintf_r+0x9c>
 800f28e:	9b03      	ldr	r3, [sp, #12]
 800f290:	1d19      	adds	r1, r3, #4
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	9103      	str	r1, [sp, #12]
 800f296:	2b00      	cmp	r3, #0
 800f298:	bfbb      	ittet	lt
 800f29a:	425b      	neglt	r3, r3
 800f29c:	f042 0202 	orrlt.w	r2, r2, #2
 800f2a0:	9307      	strge	r3, [sp, #28]
 800f2a2:	9307      	strlt	r3, [sp, #28]
 800f2a4:	bfb8      	it	lt
 800f2a6:	9204      	strlt	r2, [sp, #16]
 800f2a8:	7823      	ldrb	r3, [r4, #0]
 800f2aa:	2b2e      	cmp	r3, #46	; 0x2e
 800f2ac:	d10c      	bne.n	800f2c8 <_svfiprintf_r+0x130>
 800f2ae:	7863      	ldrb	r3, [r4, #1]
 800f2b0:	2b2a      	cmp	r3, #42	; 0x2a
 800f2b2:	d134      	bne.n	800f31e <_svfiprintf_r+0x186>
 800f2b4:	9b03      	ldr	r3, [sp, #12]
 800f2b6:	1d1a      	adds	r2, r3, #4
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	9203      	str	r2, [sp, #12]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	bfb8      	it	lt
 800f2c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f2c4:	3402      	adds	r4, #2
 800f2c6:	9305      	str	r3, [sp, #20]
 800f2c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f390 <_svfiprintf_r+0x1f8>
 800f2cc:	7821      	ldrb	r1, [r4, #0]
 800f2ce:	2203      	movs	r2, #3
 800f2d0:	4650      	mov	r0, sl
 800f2d2:	f7f0 ffed 	bl	80002b0 <memchr>
 800f2d6:	b138      	cbz	r0, 800f2e8 <_svfiprintf_r+0x150>
 800f2d8:	9b04      	ldr	r3, [sp, #16]
 800f2da:	eba0 000a 	sub.w	r0, r0, sl
 800f2de:	2240      	movs	r2, #64	; 0x40
 800f2e0:	4082      	lsls	r2, r0
 800f2e2:	4313      	orrs	r3, r2
 800f2e4:	3401      	adds	r4, #1
 800f2e6:	9304      	str	r3, [sp, #16]
 800f2e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2ec:	4825      	ldr	r0, [pc, #148]	; (800f384 <_svfiprintf_r+0x1ec>)
 800f2ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f2f2:	2206      	movs	r2, #6
 800f2f4:	f7f0 ffdc 	bl	80002b0 <memchr>
 800f2f8:	2800      	cmp	r0, #0
 800f2fa:	d038      	beq.n	800f36e <_svfiprintf_r+0x1d6>
 800f2fc:	4b22      	ldr	r3, [pc, #136]	; (800f388 <_svfiprintf_r+0x1f0>)
 800f2fe:	bb1b      	cbnz	r3, 800f348 <_svfiprintf_r+0x1b0>
 800f300:	9b03      	ldr	r3, [sp, #12]
 800f302:	3307      	adds	r3, #7
 800f304:	f023 0307 	bic.w	r3, r3, #7
 800f308:	3308      	adds	r3, #8
 800f30a:	9303      	str	r3, [sp, #12]
 800f30c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f30e:	4433      	add	r3, r6
 800f310:	9309      	str	r3, [sp, #36]	; 0x24
 800f312:	e768      	b.n	800f1e6 <_svfiprintf_r+0x4e>
 800f314:	fb0c 3202 	mla	r2, ip, r2, r3
 800f318:	460c      	mov	r4, r1
 800f31a:	2001      	movs	r0, #1
 800f31c:	e7a6      	b.n	800f26c <_svfiprintf_r+0xd4>
 800f31e:	2300      	movs	r3, #0
 800f320:	3401      	adds	r4, #1
 800f322:	9305      	str	r3, [sp, #20]
 800f324:	4619      	mov	r1, r3
 800f326:	f04f 0c0a 	mov.w	ip, #10
 800f32a:	4620      	mov	r0, r4
 800f32c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f330:	3a30      	subs	r2, #48	; 0x30
 800f332:	2a09      	cmp	r2, #9
 800f334:	d903      	bls.n	800f33e <_svfiprintf_r+0x1a6>
 800f336:	2b00      	cmp	r3, #0
 800f338:	d0c6      	beq.n	800f2c8 <_svfiprintf_r+0x130>
 800f33a:	9105      	str	r1, [sp, #20]
 800f33c:	e7c4      	b.n	800f2c8 <_svfiprintf_r+0x130>
 800f33e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f342:	4604      	mov	r4, r0
 800f344:	2301      	movs	r3, #1
 800f346:	e7f0      	b.n	800f32a <_svfiprintf_r+0x192>
 800f348:	ab03      	add	r3, sp, #12
 800f34a:	9300      	str	r3, [sp, #0]
 800f34c:	462a      	mov	r2, r5
 800f34e:	4b0f      	ldr	r3, [pc, #60]	; (800f38c <_svfiprintf_r+0x1f4>)
 800f350:	a904      	add	r1, sp, #16
 800f352:	4638      	mov	r0, r7
 800f354:	f7fd fe22 	bl	800cf9c <_printf_float>
 800f358:	1c42      	adds	r2, r0, #1
 800f35a:	4606      	mov	r6, r0
 800f35c:	d1d6      	bne.n	800f30c <_svfiprintf_r+0x174>
 800f35e:	89ab      	ldrh	r3, [r5, #12]
 800f360:	065b      	lsls	r3, r3, #25
 800f362:	f53f af2d 	bmi.w	800f1c0 <_svfiprintf_r+0x28>
 800f366:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f368:	b01d      	add	sp, #116	; 0x74
 800f36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f36e:	ab03      	add	r3, sp, #12
 800f370:	9300      	str	r3, [sp, #0]
 800f372:	462a      	mov	r2, r5
 800f374:	4b05      	ldr	r3, [pc, #20]	; (800f38c <_svfiprintf_r+0x1f4>)
 800f376:	a904      	add	r1, sp, #16
 800f378:	4638      	mov	r0, r7
 800f37a:	f7fe f8b3 	bl	800d4e4 <_printf_i>
 800f37e:	e7eb      	b.n	800f358 <_svfiprintf_r+0x1c0>
 800f380:	08010fdc 	.word	0x08010fdc
 800f384:	08010fe6 	.word	0x08010fe6
 800f388:	0800cf9d 	.word	0x0800cf9d
 800f38c:	0800f0e3 	.word	0x0800f0e3
 800f390:	08010fe2 	.word	0x08010fe2

0800f394 <__sflush_r>:
 800f394:	898a      	ldrh	r2, [r1, #12]
 800f396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f39a:	4605      	mov	r5, r0
 800f39c:	0710      	lsls	r0, r2, #28
 800f39e:	460c      	mov	r4, r1
 800f3a0:	d458      	bmi.n	800f454 <__sflush_r+0xc0>
 800f3a2:	684b      	ldr	r3, [r1, #4]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	dc05      	bgt.n	800f3b4 <__sflush_r+0x20>
 800f3a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	dc02      	bgt.n	800f3b4 <__sflush_r+0x20>
 800f3ae:	2000      	movs	r0, #0
 800f3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f3b6:	2e00      	cmp	r6, #0
 800f3b8:	d0f9      	beq.n	800f3ae <__sflush_r+0x1a>
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f3c0:	682f      	ldr	r7, [r5, #0]
 800f3c2:	6a21      	ldr	r1, [r4, #32]
 800f3c4:	602b      	str	r3, [r5, #0]
 800f3c6:	d032      	beq.n	800f42e <__sflush_r+0x9a>
 800f3c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f3ca:	89a3      	ldrh	r3, [r4, #12]
 800f3cc:	075a      	lsls	r2, r3, #29
 800f3ce:	d505      	bpl.n	800f3dc <__sflush_r+0x48>
 800f3d0:	6863      	ldr	r3, [r4, #4]
 800f3d2:	1ac0      	subs	r0, r0, r3
 800f3d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f3d6:	b10b      	cbz	r3, 800f3dc <__sflush_r+0x48>
 800f3d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f3da:	1ac0      	subs	r0, r0, r3
 800f3dc:	2300      	movs	r3, #0
 800f3de:	4602      	mov	r2, r0
 800f3e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f3e2:	6a21      	ldr	r1, [r4, #32]
 800f3e4:	4628      	mov	r0, r5
 800f3e6:	47b0      	blx	r6
 800f3e8:	1c43      	adds	r3, r0, #1
 800f3ea:	89a3      	ldrh	r3, [r4, #12]
 800f3ec:	d106      	bne.n	800f3fc <__sflush_r+0x68>
 800f3ee:	6829      	ldr	r1, [r5, #0]
 800f3f0:	291d      	cmp	r1, #29
 800f3f2:	d82b      	bhi.n	800f44c <__sflush_r+0xb8>
 800f3f4:	4a29      	ldr	r2, [pc, #164]	; (800f49c <__sflush_r+0x108>)
 800f3f6:	410a      	asrs	r2, r1
 800f3f8:	07d6      	lsls	r6, r2, #31
 800f3fa:	d427      	bmi.n	800f44c <__sflush_r+0xb8>
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	6062      	str	r2, [r4, #4]
 800f400:	04d9      	lsls	r1, r3, #19
 800f402:	6922      	ldr	r2, [r4, #16]
 800f404:	6022      	str	r2, [r4, #0]
 800f406:	d504      	bpl.n	800f412 <__sflush_r+0x7e>
 800f408:	1c42      	adds	r2, r0, #1
 800f40a:	d101      	bne.n	800f410 <__sflush_r+0x7c>
 800f40c:	682b      	ldr	r3, [r5, #0]
 800f40e:	b903      	cbnz	r3, 800f412 <__sflush_r+0x7e>
 800f410:	6560      	str	r0, [r4, #84]	; 0x54
 800f412:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f414:	602f      	str	r7, [r5, #0]
 800f416:	2900      	cmp	r1, #0
 800f418:	d0c9      	beq.n	800f3ae <__sflush_r+0x1a>
 800f41a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f41e:	4299      	cmp	r1, r3
 800f420:	d002      	beq.n	800f428 <__sflush_r+0x94>
 800f422:	4628      	mov	r0, r5
 800f424:	f7ff f9c2 	bl	800e7ac <_free_r>
 800f428:	2000      	movs	r0, #0
 800f42a:	6360      	str	r0, [r4, #52]	; 0x34
 800f42c:	e7c0      	b.n	800f3b0 <__sflush_r+0x1c>
 800f42e:	2301      	movs	r3, #1
 800f430:	4628      	mov	r0, r5
 800f432:	47b0      	blx	r6
 800f434:	1c41      	adds	r1, r0, #1
 800f436:	d1c8      	bne.n	800f3ca <__sflush_r+0x36>
 800f438:	682b      	ldr	r3, [r5, #0]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d0c5      	beq.n	800f3ca <__sflush_r+0x36>
 800f43e:	2b1d      	cmp	r3, #29
 800f440:	d001      	beq.n	800f446 <__sflush_r+0xb2>
 800f442:	2b16      	cmp	r3, #22
 800f444:	d101      	bne.n	800f44a <__sflush_r+0xb6>
 800f446:	602f      	str	r7, [r5, #0]
 800f448:	e7b1      	b.n	800f3ae <__sflush_r+0x1a>
 800f44a:	89a3      	ldrh	r3, [r4, #12]
 800f44c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f450:	81a3      	strh	r3, [r4, #12]
 800f452:	e7ad      	b.n	800f3b0 <__sflush_r+0x1c>
 800f454:	690f      	ldr	r7, [r1, #16]
 800f456:	2f00      	cmp	r7, #0
 800f458:	d0a9      	beq.n	800f3ae <__sflush_r+0x1a>
 800f45a:	0793      	lsls	r3, r2, #30
 800f45c:	680e      	ldr	r6, [r1, #0]
 800f45e:	bf08      	it	eq
 800f460:	694b      	ldreq	r3, [r1, #20]
 800f462:	600f      	str	r7, [r1, #0]
 800f464:	bf18      	it	ne
 800f466:	2300      	movne	r3, #0
 800f468:	eba6 0807 	sub.w	r8, r6, r7
 800f46c:	608b      	str	r3, [r1, #8]
 800f46e:	f1b8 0f00 	cmp.w	r8, #0
 800f472:	dd9c      	ble.n	800f3ae <__sflush_r+0x1a>
 800f474:	6a21      	ldr	r1, [r4, #32]
 800f476:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f478:	4643      	mov	r3, r8
 800f47a:	463a      	mov	r2, r7
 800f47c:	4628      	mov	r0, r5
 800f47e:	47b0      	blx	r6
 800f480:	2800      	cmp	r0, #0
 800f482:	dc06      	bgt.n	800f492 <__sflush_r+0xfe>
 800f484:	89a3      	ldrh	r3, [r4, #12]
 800f486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f48a:	81a3      	strh	r3, [r4, #12]
 800f48c:	f04f 30ff 	mov.w	r0, #4294967295
 800f490:	e78e      	b.n	800f3b0 <__sflush_r+0x1c>
 800f492:	4407      	add	r7, r0
 800f494:	eba8 0800 	sub.w	r8, r8, r0
 800f498:	e7e9      	b.n	800f46e <__sflush_r+0xda>
 800f49a:	bf00      	nop
 800f49c:	dfbffffe 	.word	0xdfbffffe

0800f4a0 <_fflush_r>:
 800f4a0:	b538      	push	{r3, r4, r5, lr}
 800f4a2:	690b      	ldr	r3, [r1, #16]
 800f4a4:	4605      	mov	r5, r0
 800f4a6:	460c      	mov	r4, r1
 800f4a8:	b913      	cbnz	r3, 800f4b0 <_fflush_r+0x10>
 800f4aa:	2500      	movs	r5, #0
 800f4ac:	4628      	mov	r0, r5
 800f4ae:	bd38      	pop	{r3, r4, r5, pc}
 800f4b0:	b118      	cbz	r0, 800f4ba <_fflush_r+0x1a>
 800f4b2:	6a03      	ldr	r3, [r0, #32]
 800f4b4:	b90b      	cbnz	r3, 800f4ba <_fflush_r+0x1a>
 800f4b6:	f7fe f9c3 	bl	800d840 <__sinit>
 800f4ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d0f3      	beq.n	800f4aa <_fflush_r+0xa>
 800f4c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f4c4:	07d0      	lsls	r0, r2, #31
 800f4c6:	d404      	bmi.n	800f4d2 <_fflush_r+0x32>
 800f4c8:	0599      	lsls	r1, r3, #22
 800f4ca:	d402      	bmi.n	800f4d2 <_fflush_r+0x32>
 800f4cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f4ce:	f7fe fae0 	bl	800da92 <__retarget_lock_acquire_recursive>
 800f4d2:	4628      	mov	r0, r5
 800f4d4:	4621      	mov	r1, r4
 800f4d6:	f7ff ff5d 	bl	800f394 <__sflush_r>
 800f4da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f4dc:	07da      	lsls	r2, r3, #31
 800f4de:	4605      	mov	r5, r0
 800f4e0:	d4e4      	bmi.n	800f4ac <_fflush_r+0xc>
 800f4e2:	89a3      	ldrh	r3, [r4, #12]
 800f4e4:	059b      	lsls	r3, r3, #22
 800f4e6:	d4e1      	bmi.n	800f4ac <_fflush_r+0xc>
 800f4e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f4ea:	f7fe fad3 	bl	800da94 <__retarget_lock_release_recursive>
 800f4ee:	e7dd      	b.n	800f4ac <_fflush_r+0xc>

0800f4f0 <memmove>:
 800f4f0:	4288      	cmp	r0, r1
 800f4f2:	b510      	push	{r4, lr}
 800f4f4:	eb01 0402 	add.w	r4, r1, r2
 800f4f8:	d902      	bls.n	800f500 <memmove+0x10>
 800f4fa:	4284      	cmp	r4, r0
 800f4fc:	4623      	mov	r3, r4
 800f4fe:	d807      	bhi.n	800f510 <memmove+0x20>
 800f500:	1e43      	subs	r3, r0, #1
 800f502:	42a1      	cmp	r1, r4
 800f504:	d008      	beq.n	800f518 <memmove+0x28>
 800f506:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f50a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f50e:	e7f8      	b.n	800f502 <memmove+0x12>
 800f510:	4402      	add	r2, r0
 800f512:	4601      	mov	r1, r0
 800f514:	428a      	cmp	r2, r1
 800f516:	d100      	bne.n	800f51a <memmove+0x2a>
 800f518:	bd10      	pop	{r4, pc}
 800f51a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f51e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f522:	e7f7      	b.n	800f514 <memmove+0x24>

0800f524 <_sbrk_r>:
 800f524:	b538      	push	{r3, r4, r5, lr}
 800f526:	4d06      	ldr	r5, [pc, #24]	; (800f540 <_sbrk_r+0x1c>)
 800f528:	2300      	movs	r3, #0
 800f52a:	4604      	mov	r4, r0
 800f52c:	4608      	mov	r0, r1
 800f52e:	602b      	str	r3, [r5, #0]
 800f530:	f001 fab0 	bl	8010a94 <_sbrk>
 800f534:	1c43      	adds	r3, r0, #1
 800f536:	d102      	bne.n	800f53e <_sbrk_r+0x1a>
 800f538:	682b      	ldr	r3, [r5, #0]
 800f53a:	b103      	cbz	r3, 800f53e <_sbrk_r+0x1a>
 800f53c:	6023      	str	r3, [r4, #0]
 800f53e:	bd38      	pop	{r3, r4, r5, pc}
 800f540:	20013e24 	.word	0x20013e24

0800f544 <__assert_func>:
 800f544:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f546:	4614      	mov	r4, r2
 800f548:	461a      	mov	r2, r3
 800f54a:	4b09      	ldr	r3, [pc, #36]	; (800f570 <__assert_func+0x2c>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	4605      	mov	r5, r0
 800f550:	68d8      	ldr	r0, [r3, #12]
 800f552:	b14c      	cbz	r4, 800f568 <__assert_func+0x24>
 800f554:	4b07      	ldr	r3, [pc, #28]	; (800f574 <__assert_func+0x30>)
 800f556:	9100      	str	r1, [sp, #0]
 800f558:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f55c:	4906      	ldr	r1, [pc, #24]	; (800f578 <__assert_func+0x34>)
 800f55e:	462b      	mov	r3, r5
 800f560:	f000 f854 	bl	800f60c <fiprintf>
 800f564:	f000 f864 	bl	800f630 <abort>
 800f568:	4b04      	ldr	r3, [pc, #16]	; (800f57c <__assert_func+0x38>)
 800f56a:	461c      	mov	r4, r3
 800f56c:	e7f3      	b.n	800f556 <__assert_func+0x12>
 800f56e:	bf00      	nop
 800f570:	200001e0 	.word	0x200001e0
 800f574:	08010fed 	.word	0x08010fed
 800f578:	08010ffa 	.word	0x08010ffa
 800f57c:	08011028 	.word	0x08011028

0800f580 <_calloc_r>:
 800f580:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f582:	fba1 2402 	umull	r2, r4, r1, r2
 800f586:	b94c      	cbnz	r4, 800f59c <_calloc_r+0x1c>
 800f588:	4611      	mov	r1, r2
 800f58a:	9201      	str	r2, [sp, #4]
 800f58c:	f7ff f982 	bl	800e894 <_malloc_r>
 800f590:	9a01      	ldr	r2, [sp, #4]
 800f592:	4605      	mov	r5, r0
 800f594:	b930      	cbnz	r0, 800f5a4 <_calloc_r+0x24>
 800f596:	4628      	mov	r0, r5
 800f598:	b003      	add	sp, #12
 800f59a:	bd30      	pop	{r4, r5, pc}
 800f59c:	220c      	movs	r2, #12
 800f59e:	6002      	str	r2, [r0, #0]
 800f5a0:	2500      	movs	r5, #0
 800f5a2:	e7f8      	b.n	800f596 <_calloc_r+0x16>
 800f5a4:	4621      	mov	r1, r4
 800f5a6:	f7fe fa08 	bl	800d9ba <memset>
 800f5aa:	e7f4      	b.n	800f596 <_calloc_r+0x16>

0800f5ac <_realloc_r>:
 800f5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5b0:	4680      	mov	r8, r0
 800f5b2:	4614      	mov	r4, r2
 800f5b4:	460e      	mov	r6, r1
 800f5b6:	b921      	cbnz	r1, 800f5c2 <_realloc_r+0x16>
 800f5b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5bc:	4611      	mov	r1, r2
 800f5be:	f7ff b969 	b.w	800e894 <_malloc_r>
 800f5c2:	b92a      	cbnz	r2, 800f5d0 <_realloc_r+0x24>
 800f5c4:	f7ff f8f2 	bl	800e7ac <_free_r>
 800f5c8:	4625      	mov	r5, r4
 800f5ca:	4628      	mov	r0, r5
 800f5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5d0:	f000 f835 	bl	800f63e <_malloc_usable_size_r>
 800f5d4:	4284      	cmp	r4, r0
 800f5d6:	4607      	mov	r7, r0
 800f5d8:	d802      	bhi.n	800f5e0 <_realloc_r+0x34>
 800f5da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f5de:	d812      	bhi.n	800f606 <_realloc_r+0x5a>
 800f5e0:	4621      	mov	r1, r4
 800f5e2:	4640      	mov	r0, r8
 800f5e4:	f7ff f956 	bl	800e894 <_malloc_r>
 800f5e8:	4605      	mov	r5, r0
 800f5ea:	2800      	cmp	r0, #0
 800f5ec:	d0ed      	beq.n	800f5ca <_realloc_r+0x1e>
 800f5ee:	42bc      	cmp	r4, r7
 800f5f0:	4622      	mov	r2, r4
 800f5f2:	4631      	mov	r1, r6
 800f5f4:	bf28      	it	cs
 800f5f6:	463a      	movcs	r2, r7
 800f5f8:	f7fe fa4d 	bl	800da96 <memcpy>
 800f5fc:	4631      	mov	r1, r6
 800f5fe:	4640      	mov	r0, r8
 800f600:	f7ff f8d4 	bl	800e7ac <_free_r>
 800f604:	e7e1      	b.n	800f5ca <_realloc_r+0x1e>
 800f606:	4635      	mov	r5, r6
 800f608:	e7df      	b.n	800f5ca <_realloc_r+0x1e>
	...

0800f60c <fiprintf>:
 800f60c:	b40e      	push	{r1, r2, r3}
 800f60e:	b503      	push	{r0, r1, lr}
 800f610:	4601      	mov	r1, r0
 800f612:	ab03      	add	r3, sp, #12
 800f614:	4805      	ldr	r0, [pc, #20]	; (800f62c <fiprintf+0x20>)
 800f616:	f853 2b04 	ldr.w	r2, [r3], #4
 800f61a:	6800      	ldr	r0, [r0, #0]
 800f61c:	9301      	str	r3, [sp, #4]
 800f61e:	f000 f83f 	bl	800f6a0 <_vfiprintf_r>
 800f622:	b002      	add	sp, #8
 800f624:	f85d eb04 	ldr.w	lr, [sp], #4
 800f628:	b003      	add	sp, #12
 800f62a:	4770      	bx	lr
 800f62c:	200001e0 	.word	0x200001e0

0800f630 <abort>:
 800f630:	b508      	push	{r3, lr}
 800f632:	2006      	movs	r0, #6
 800f634:	f000 fa0c 	bl	800fa50 <raise>
 800f638:	2001      	movs	r0, #1
 800f63a:	f7f4 fca5 	bl	8003f88 <_exit>

0800f63e <_malloc_usable_size_r>:
 800f63e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f642:	1f18      	subs	r0, r3, #4
 800f644:	2b00      	cmp	r3, #0
 800f646:	bfbc      	itt	lt
 800f648:	580b      	ldrlt	r3, [r1, r0]
 800f64a:	18c0      	addlt	r0, r0, r3
 800f64c:	4770      	bx	lr

0800f64e <__sfputc_r>:
 800f64e:	6893      	ldr	r3, [r2, #8]
 800f650:	3b01      	subs	r3, #1
 800f652:	2b00      	cmp	r3, #0
 800f654:	b410      	push	{r4}
 800f656:	6093      	str	r3, [r2, #8]
 800f658:	da08      	bge.n	800f66c <__sfputc_r+0x1e>
 800f65a:	6994      	ldr	r4, [r2, #24]
 800f65c:	42a3      	cmp	r3, r4
 800f65e:	db01      	blt.n	800f664 <__sfputc_r+0x16>
 800f660:	290a      	cmp	r1, #10
 800f662:	d103      	bne.n	800f66c <__sfputc_r+0x1e>
 800f664:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f668:	f000 b934 	b.w	800f8d4 <__swbuf_r>
 800f66c:	6813      	ldr	r3, [r2, #0]
 800f66e:	1c58      	adds	r0, r3, #1
 800f670:	6010      	str	r0, [r2, #0]
 800f672:	7019      	strb	r1, [r3, #0]
 800f674:	4608      	mov	r0, r1
 800f676:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f67a:	4770      	bx	lr

0800f67c <__sfputs_r>:
 800f67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f67e:	4606      	mov	r6, r0
 800f680:	460f      	mov	r7, r1
 800f682:	4614      	mov	r4, r2
 800f684:	18d5      	adds	r5, r2, r3
 800f686:	42ac      	cmp	r4, r5
 800f688:	d101      	bne.n	800f68e <__sfputs_r+0x12>
 800f68a:	2000      	movs	r0, #0
 800f68c:	e007      	b.n	800f69e <__sfputs_r+0x22>
 800f68e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f692:	463a      	mov	r2, r7
 800f694:	4630      	mov	r0, r6
 800f696:	f7ff ffda 	bl	800f64e <__sfputc_r>
 800f69a:	1c43      	adds	r3, r0, #1
 800f69c:	d1f3      	bne.n	800f686 <__sfputs_r+0xa>
 800f69e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f6a0 <_vfiprintf_r>:
 800f6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6a4:	460d      	mov	r5, r1
 800f6a6:	b09d      	sub	sp, #116	; 0x74
 800f6a8:	4614      	mov	r4, r2
 800f6aa:	4698      	mov	r8, r3
 800f6ac:	4606      	mov	r6, r0
 800f6ae:	b118      	cbz	r0, 800f6b8 <_vfiprintf_r+0x18>
 800f6b0:	6a03      	ldr	r3, [r0, #32]
 800f6b2:	b90b      	cbnz	r3, 800f6b8 <_vfiprintf_r+0x18>
 800f6b4:	f7fe f8c4 	bl	800d840 <__sinit>
 800f6b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f6ba:	07d9      	lsls	r1, r3, #31
 800f6bc:	d405      	bmi.n	800f6ca <_vfiprintf_r+0x2a>
 800f6be:	89ab      	ldrh	r3, [r5, #12]
 800f6c0:	059a      	lsls	r2, r3, #22
 800f6c2:	d402      	bmi.n	800f6ca <_vfiprintf_r+0x2a>
 800f6c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f6c6:	f7fe f9e4 	bl	800da92 <__retarget_lock_acquire_recursive>
 800f6ca:	89ab      	ldrh	r3, [r5, #12]
 800f6cc:	071b      	lsls	r3, r3, #28
 800f6ce:	d501      	bpl.n	800f6d4 <_vfiprintf_r+0x34>
 800f6d0:	692b      	ldr	r3, [r5, #16]
 800f6d2:	b99b      	cbnz	r3, 800f6fc <_vfiprintf_r+0x5c>
 800f6d4:	4629      	mov	r1, r5
 800f6d6:	4630      	mov	r0, r6
 800f6d8:	f000 f93a 	bl	800f950 <__swsetup_r>
 800f6dc:	b170      	cbz	r0, 800f6fc <_vfiprintf_r+0x5c>
 800f6de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f6e0:	07dc      	lsls	r4, r3, #31
 800f6e2:	d504      	bpl.n	800f6ee <_vfiprintf_r+0x4e>
 800f6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f6e8:	b01d      	add	sp, #116	; 0x74
 800f6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ee:	89ab      	ldrh	r3, [r5, #12]
 800f6f0:	0598      	lsls	r0, r3, #22
 800f6f2:	d4f7      	bmi.n	800f6e4 <_vfiprintf_r+0x44>
 800f6f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f6f6:	f7fe f9cd 	bl	800da94 <__retarget_lock_release_recursive>
 800f6fa:	e7f3      	b.n	800f6e4 <_vfiprintf_r+0x44>
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	9309      	str	r3, [sp, #36]	; 0x24
 800f700:	2320      	movs	r3, #32
 800f702:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f706:	f8cd 800c 	str.w	r8, [sp, #12]
 800f70a:	2330      	movs	r3, #48	; 0x30
 800f70c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f8c0 <_vfiprintf_r+0x220>
 800f710:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f714:	f04f 0901 	mov.w	r9, #1
 800f718:	4623      	mov	r3, r4
 800f71a:	469a      	mov	sl, r3
 800f71c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f720:	b10a      	cbz	r2, 800f726 <_vfiprintf_r+0x86>
 800f722:	2a25      	cmp	r2, #37	; 0x25
 800f724:	d1f9      	bne.n	800f71a <_vfiprintf_r+0x7a>
 800f726:	ebba 0b04 	subs.w	fp, sl, r4
 800f72a:	d00b      	beq.n	800f744 <_vfiprintf_r+0xa4>
 800f72c:	465b      	mov	r3, fp
 800f72e:	4622      	mov	r2, r4
 800f730:	4629      	mov	r1, r5
 800f732:	4630      	mov	r0, r6
 800f734:	f7ff ffa2 	bl	800f67c <__sfputs_r>
 800f738:	3001      	adds	r0, #1
 800f73a:	f000 80a9 	beq.w	800f890 <_vfiprintf_r+0x1f0>
 800f73e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f740:	445a      	add	r2, fp
 800f742:	9209      	str	r2, [sp, #36]	; 0x24
 800f744:	f89a 3000 	ldrb.w	r3, [sl]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	f000 80a1 	beq.w	800f890 <_vfiprintf_r+0x1f0>
 800f74e:	2300      	movs	r3, #0
 800f750:	f04f 32ff 	mov.w	r2, #4294967295
 800f754:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f758:	f10a 0a01 	add.w	sl, sl, #1
 800f75c:	9304      	str	r3, [sp, #16]
 800f75e:	9307      	str	r3, [sp, #28]
 800f760:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f764:	931a      	str	r3, [sp, #104]	; 0x68
 800f766:	4654      	mov	r4, sl
 800f768:	2205      	movs	r2, #5
 800f76a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f76e:	4854      	ldr	r0, [pc, #336]	; (800f8c0 <_vfiprintf_r+0x220>)
 800f770:	f7f0 fd9e 	bl	80002b0 <memchr>
 800f774:	9a04      	ldr	r2, [sp, #16]
 800f776:	b9d8      	cbnz	r0, 800f7b0 <_vfiprintf_r+0x110>
 800f778:	06d1      	lsls	r1, r2, #27
 800f77a:	bf44      	itt	mi
 800f77c:	2320      	movmi	r3, #32
 800f77e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f782:	0713      	lsls	r3, r2, #28
 800f784:	bf44      	itt	mi
 800f786:	232b      	movmi	r3, #43	; 0x2b
 800f788:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f78c:	f89a 3000 	ldrb.w	r3, [sl]
 800f790:	2b2a      	cmp	r3, #42	; 0x2a
 800f792:	d015      	beq.n	800f7c0 <_vfiprintf_r+0x120>
 800f794:	9a07      	ldr	r2, [sp, #28]
 800f796:	4654      	mov	r4, sl
 800f798:	2000      	movs	r0, #0
 800f79a:	f04f 0c0a 	mov.w	ip, #10
 800f79e:	4621      	mov	r1, r4
 800f7a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f7a4:	3b30      	subs	r3, #48	; 0x30
 800f7a6:	2b09      	cmp	r3, #9
 800f7a8:	d94d      	bls.n	800f846 <_vfiprintf_r+0x1a6>
 800f7aa:	b1b0      	cbz	r0, 800f7da <_vfiprintf_r+0x13a>
 800f7ac:	9207      	str	r2, [sp, #28]
 800f7ae:	e014      	b.n	800f7da <_vfiprintf_r+0x13a>
 800f7b0:	eba0 0308 	sub.w	r3, r0, r8
 800f7b4:	fa09 f303 	lsl.w	r3, r9, r3
 800f7b8:	4313      	orrs	r3, r2
 800f7ba:	9304      	str	r3, [sp, #16]
 800f7bc:	46a2      	mov	sl, r4
 800f7be:	e7d2      	b.n	800f766 <_vfiprintf_r+0xc6>
 800f7c0:	9b03      	ldr	r3, [sp, #12]
 800f7c2:	1d19      	adds	r1, r3, #4
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	9103      	str	r1, [sp, #12]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	bfbb      	ittet	lt
 800f7cc:	425b      	neglt	r3, r3
 800f7ce:	f042 0202 	orrlt.w	r2, r2, #2
 800f7d2:	9307      	strge	r3, [sp, #28]
 800f7d4:	9307      	strlt	r3, [sp, #28]
 800f7d6:	bfb8      	it	lt
 800f7d8:	9204      	strlt	r2, [sp, #16]
 800f7da:	7823      	ldrb	r3, [r4, #0]
 800f7dc:	2b2e      	cmp	r3, #46	; 0x2e
 800f7de:	d10c      	bne.n	800f7fa <_vfiprintf_r+0x15a>
 800f7e0:	7863      	ldrb	r3, [r4, #1]
 800f7e2:	2b2a      	cmp	r3, #42	; 0x2a
 800f7e4:	d134      	bne.n	800f850 <_vfiprintf_r+0x1b0>
 800f7e6:	9b03      	ldr	r3, [sp, #12]
 800f7e8:	1d1a      	adds	r2, r3, #4
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	9203      	str	r2, [sp, #12]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	bfb8      	it	lt
 800f7f2:	f04f 33ff 	movlt.w	r3, #4294967295
 800f7f6:	3402      	adds	r4, #2
 800f7f8:	9305      	str	r3, [sp, #20]
 800f7fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f8d0 <_vfiprintf_r+0x230>
 800f7fe:	7821      	ldrb	r1, [r4, #0]
 800f800:	2203      	movs	r2, #3
 800f802:	4650      	mov	r0, sl
 800f804:	f7f0 fd54 	bl	80002b0 <memchr>
 800f808:	b138      	cbz	r0, 800f81a <_vfiprintf_r+0x17a>
 800f80a:	9b04      	ldr	r3, [sp, #16]
 800f80c:	eba0 000a 	sub.w	r0, r0, sl
 800f810:	2240      	movs	r2, #64	; 0x40
 800f812:	4082      	lsls	r2, r0
 800f814:	4313      	orrs	r3, r2
 800f816:	3401      	adds	r4, #1
 800f818:	9304      	str	r3, [sp, #16]
 800f81a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f81e:	4829      	ldr	r0, [pc, #164]	; (800f8c4 <_vfiprintf_r+0x224>)
 800f820:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f824:	2206      	movs	r2, #6
 800f826:	f7f0 fd43 	bl	80002b0 <memchr>
 800f82a:	2800      	cmp	r0, #0
 800f82c:	d03f      	beq.n	800f8ae <_vfiprintf_r+0x20e>
 800f82e:	4b26      	ldr	r3, [pc, #152]	; (800f8c8 <_vfiprintf_r+0x228>)
 800f830:	bb1b      	cbnz	r3, 800f87a <_vfiprintf_r+0x1da>
 800f832:	9b03      	ldr	r3, [sp, #12]
 800f834:	3307      	adds	r3, #7
 800f836:	f023 0307 	bic.w	r3, r3, #7
 800f83a:	3308      	adds	r3, #8
 800f83c:	9303      	str	r3, [sp, #12]
 800f83e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f840:	443b      	add	r3, r7
 800f842:	9309      	str	r3, [sp, #36]	; 0x24
 800f844:	e768      	b.n	800f718 <_vfiprintf_r+0x78>
 800f846:	fb0c 3202 	mla	r2, ip, r2, r3
 800f84a:	460c      	mov	r4, r1
 800f84c:	2001      	movs	r0, #1
 800f84e:	e7a6      	b.n	800f79e <_vfiprintf_r+0xfe>
 800f850:	2300      	movs	r3, #0
 800f852:	3401      	adds	r4, #1
 800f854:	9305      	str	r3, [sp, #20]
 800f856:	4619      	mov	r1, r3
 800f858:	f04f 0c0a 	mov.w	ip, #10
 800f85c:	4620      	mov	r0, r4
 800f85e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f862:	3a30      	subs	r2, #48	; 0x30
 800f864:	2a09      	cmp	r2, #9
 800f866:	d903      	bls.n	800f870 <_vfiprintf_r+0x1d0>
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d0c6      	beq.n	800f7fa <_vfiprintf_r+0x15a>
 800f86c:	9105      	str	r1, [sp, #20]
 800f86e:	e7c4      	b.n	800f7fa <_vfiprintf_r+0x15a>
 800f870:	fb0c 2101 	mla	r1, ip, r1, r2
 800f874:	4604      	mov	r4, r0
 800f876:	2301      	movs	r3, #1
 800f878:	e7f0      	b.n	800f85c <_vfiprintf_r+0x1bc>
 800f87a:	ab03      	add	r3, sp, #12
 800f87c:	9300      	str	r3, [sp, #0]
 800f87e:	462a      	mov	r2, r5
 800f880:	4b12      	ldr	r3, [pc, #72]	; (800f8cc <_vfiprintf_r+0x22c>)
 800f882:	a904      	add	r1, sp, #16
 800f884:	4630      	mov	r0, r6
 800f886:	f7fd fb89 	bl	800cf9c <_printf_float>
 800f88a:	4607      	mov	r7, r0
 800f88c:	1c78      	adds	r0, r7, #1
 800f88e:	d1d6      	bne.n	800f83e <_vfiprintf_r+0x19e>
 800f890:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f892:	07d9      	lsls	r1, r3, #31
 800f894:	d405      	bmi.n	800f8a2 <_vfiprintf_r+0x202>
 800f896:	89ab      	ldrh	r3, [r5, #12]
 800f898:	059a      	lsls	r2, r3, #22
 800f89a:	d402      	bmi.n	800f8a2 <_vfiprintf_r+0x202>
 800f89c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f89e:	f7fe f8f9 	bl	800da94 <__retarget_lock_release_recursive>
 800f8a2:	89ab      	ldrh	r3, [r5, #12]
 800f8a4:	065b      	lsls	r3, r3, #25
 800f8a6:	f53f af1d 	bmi.w	800f6e4 <_vfiprintf_r+0x44>
 800f8aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f8ac:	e71c      	b.n	800f6e8 <_vfiprintf_r+0x48>
 800f8ae:	ab03      	add	r3, sp, #12
 800f8b0:	9300      	str	r3, [sp, #0]
 800f8b2:	462a      	mov	r2, r5
 800f8b4:	4b05      	ldr	r3, [pc, #20]	; (800f8cc <_vfiprintf_r+0x22c>)
 800f8b6:	a904      	add	r1, sp, #16
 800f8b8:	4630      	mov	r0, r6
 800f8ba:	f7fd fe13 	bl	800d4e4 <_printf_i>
 800f8be:	e7e4      	b.n	800f88a <_vfiprintf_r+0x1ea>
 800f8c0:	08010fdc 	.word	0x08010fdc
 800f8c4:	08010fe6 	.word	0x08010fe6
 800f8c8:	0800cf9d 	.word	0x0800cf9d
 800f8cc:	0800f67d 	.word	0x0800f67d
 800f8d0:	08010fe2 	.word	0x08010fe2

0800f8d4 <__swbuf_r>:
 800f8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8d6:	460e      	mov	r6, r1
 800f8d8:	4614      	mov	r4, r2
 800f8da:	4605      	mov	r5, r0
 800f8dc:	b118      	cbz	r0, 800f8e6 <__swbuf_r+0x12>
 800f8de:	6a03      	ldr	r3, [r0, #32]
 800f8e0:	b90b      	cbnz	r3, 800f8e6 <__swbuf_r+0x12>
 800f8e2:	f7fd ffad 	bl	800d840 <__sinit>
 800f8e6:	69a3      	ldr	r3, [r4, #24]
 800f8e8:	60a3      	str	r3, [r4, #8]
 800f8ea:	89a3      	ldrh	r3, [r4, #12]
 800f8ec:	071a      	lsls	r2, r3, #28
 800f8ee:	d525      	bpl.n	800f93c <__swbuf_r+0x68>
 800f8f0:	6923      	ldr	r3, [r4, #16]
 800f8f2:	b31b      	cbz	r3, 800f93c <__swbuf_r+0x68>
 800f8f4:	6823      	ldr	r3, [r4, #0]
 800f8f6:	6922      	ldr	r2, [r4, #16]
 800f8f8:	1a98      	subs	r0, r3, r2
 800f8fa:	6963      	ldr	r3, [r4, #20]
 800f8fc:	b2f6      	uxtb	r6, r6
 800f8fe:	4283      	cmp	r3, r0
 800f900:	4637      	mov	r7, r6
 800f902:	dc04      	bgt.n	800f90e <__swbuf_r+0x3a>
 800f904:	4621      	mov	r1, r4
 800f906:	4628      	mov	r0, r5
 800f908:	f7ff fdca 	bl	800f4a0 <_fflush_r>
 800f90c:	b9e0      	cbnz	r0, 800f948 <__swbuf_r+0x74>
 800f90e:	68a3      	ldr	r3, [r4, #8]
 800f910:	3b01      	subs	r3, #1
 800f912:	60a3      	str	r3, [r4, #8]
 800f914:	6823      	ldr	r3, [r4, #0]
 800f916:	1c5a      	adds	r2, r3, #1
 800f918:	6022      	str	r2, [r4, #0]
 800f91a:	701e      	strb	r6, [r3, #0]
 800f91c:	6962      	ldr	r2, [r4, #20]
 800f91e:	1c43      	adds	r3, r0, #1
 800f920:	429a      	cmp	r2, r3
 800f922:	d004      	beq.n	800f92e <__swbuf_r+0x5a>
 800f924:	89a3      	ldrh	r3, [r4, #12]
 800f926:	07db      	lsls	r3, r3, #31
 800f928:	d506      	bpl.n	800f938 <__swbuf_r+0x64>
 800f92a:	2e0a      	cmp	r6, #10
 800f92c:	d104      	bne.n	800f938 <__swbuf_r+0x64>
 800f92e:	4621      	mov	r1, r4
 800f930:	4628      	mov	r0, r5
 800f932:	f7ff fdb5 	bl	800f4a0 <_fflush_r>
 800f936:	b938      	cbnz	r0, 800f948 <__swbuf_r+0x74>
 800f938:	4638      	mov	r0, r7
 800f93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f93c:	4621      	mov	r1, r4
 800f93e:	4628      	mov	r0, r5
 800f940:	f000 f806 	bl	800f950 <__swsetup_r>
 800f944:	2800      	cmp	r0, #0
 800f946:	d0d5      	beq.n	800f8f4 <__swbuf_r+0x20>
 800f948:	f04f 37ff 	mov.w	r7, #4294967295
 800f94c:	e7f4      	b.n	800f938 <__swbuf_r+0x64>
	...

0800f950 <__swsetup_r>:
 800f950:	b538      	push	{r3, r4, r5, lr}
 800f952:	4b2a      	ldr	r3, [pc, #168]	; (800f9fc <__swsetup_r+0xac>)
 800f954:	4605      	mov	r5, r0
 800f956:	6818      	ldr	r0, [r3, #0]
 800f958:	460c      	mov	r4, r1
 800f95a:	b118      	cbz	r0, 800f964 <__swsetup_r+0x14>
 800f95c:	6a03      	ldr	r3, [r0, #32]
 800f95e:	b90b      	cbnz	r3, 800f964 <__swsetup_r+0x14>
 800f960:	f7fd ff6e 	bl	800d840 <__sinit>
 800f964:	89a3      	ldrh	r3, [r4, #12]
 800f966:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f96a:	0718      	lsls	r0, r3, #28
 800f96c:	d422      	bmi.n	800f9b4 <__swsetup_r+0x64>
 800f96e:	06d9      	lsls	r1, r3, #27
 800f970:	d407      	bmi.n	800f982 <__swsetup_r+0x32>
 800f972:	2309      	movs	r3, #9
 800f974:	602b      	str	r3, [r5, #0]
 800f976:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f97a:	81a3      	strh	r3, [r4, #12]
 800f97c:	f04f 30ff 	mov.w	r0, #4294967295
 800f980:	e034      	b.n	800f9ec <__swsetup_r+0x9c>
 800f982:	0758      	lsls	r0, r3, #29
 800f984:	d512      	bpl.n	800f9ac <__swsetup_r+0x5c>
 800f986:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f988:	b141      	cbz	r1, 800f99c <__swsetup_r+0x4c>
 800f98a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f98e:	4299      	cmp	r1, r3
 800f990:	d002      	beq.n	800f998 <__swsetup_r+0x48>
 800f992:	4628      	mov	r0, r5
 800f994:	f7fe ff0a 	bl	800e7ac <_free_r>
 800f998:	2300      	movs	r3, #0
 800f99a:	6363      	str	r3, [r4, #52]	; 0x34
 800f99c:	89a3      	ldrh	r3, [r4, #12]
 800f99e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f9a2:	81a3      	strh	r3, [r4, #12]
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	6063      	str	r3, [r4, #4]
 800f9a8:	6923      	ldr	r3, [r4, #16]
 800f9aa:	6023      	str	r3, [r4, #0]
 800f9ac:	89a3      	ldrh	r3, [r4, #12]
 800f9ae:	f043 0308 	orr.w	r3, r3, #8
 800f9b2:	81a3      	strh	r3, [r4, #12]
 800f9b4:	6923      	ldr	r3, [r4, #16]
 800f9b6:	b94b      	cbnz	r3, 800f9cc <__swsetup_r+0x7c>
 800f9b8:	89a3      	ldrh	r3, [r4, #12]
 800f9ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f9be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f9c2:	d003      	beq.n	800f9cc <__swsetup_r+0x7c>
 800f9c4:	4621      	mov	r1, r4
 800f9c6:	4628      	mov	r0, r5
 800f9c8:	f000 f884 	bl	800fad4 <__smakebuf_r>
 800f9cc:	89a0      	ldrh	r0, [r4, #12]
 800f9ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f9d2:	f010 0301 	ands.w	r3, r0, #1
 800f9d6:	d00a      	beq.n	800f9ee <__swsetup_r+0x9e>
 800f9d8:	2300      	movs	r3, #0
 800f9da:	60a3      	str	r3, [r4, #8]
 800f9dc:	6963      	ldr	r3, [r4, #20]
 800f9de:	425b      	negs	r3, r3
 800f9e0:	61a3      	str	r3, [r4, #24]
 800f9e2:	6923      	ldr	r3, [r4, #16]
 800f9e4:	b943      	cbnz	r3, 800f9f8 <__swsetup_r+0xa8>
 800f9e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f9ea:	d1c4      	bne.n	800f976 <__swsetup_r+0x26>
 800f9ec:	bd38      	pop	{r3, r4, r5, pc}
 800f9ee:	0781      	lsls	r1, r0, #30
 800f9f0:	bf58      	it	pl
 800f9f2:	6963      	ldrpl	r3, [r4, #20]
 800f9f4:	60a3      	str	r3, [r4, #8]
 800f9f6:	e7f4      	b.n	800f9e2 <__swsetup_r+0x92>
 800f9f8:	2000      	movs	r0, #0
 800f9fa:	e7f7      	b.n	800f9ec <__swsetup_r+0x9c>
 800f9fc:	200001e0 	.word	0x200001e0

0800fa00 <_raise_r>:
 800fa00:	291f      	cmp	r1, #31
 800fa02:	b538      	push	{r3, r4, r5, lr}
 800fa04:	4604      	mov	r4, r0
 800fa06:	460d      	mov	r5, r1
 800fa08:	d904      	bls.n	800fa14 <_raise_r+0x14>
 800fa0a:	2316      	movs	r3, #22
 800fa0c:	6003      	str	r3, [r0, #0]
 800fa0e:	f04f 30ff 	mov.w	r0, #4294967295
 800fa12:	bd38      	pop	{r3, r4, r5, pc}
 800fa14:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fa16:	b112      	cbz	r2, 800fa1e <_raise_r+0x1e>
 800fa18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa1c:	b94b      	cbnz	r3, 800fa32 <_raise_r+0x32>
 800fa1e:	4620      	mov	r0, r4
 800fa20:	f000 f830 	bl	800fa84 <_getpid_r>
 800fa24:	462a      	mov	r2, r5
 800fa26:	4601      	mov	r1, r0
 800fa28:	4620      	mov	r0, r4
 800fa2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa2e:	f000 b817 	b.w	800fa60 <_kill_r>
 800fa32:	2b01      	cmp	r3, #1
 800fa34:	d00a      	beq.n	800fa4c <_raise_r+0x4c>
 800fa36:	1c59      	adds	r1, r3, #1
 800fa38:	d103      	bne.n	800fa42 <_raise_r+0x42>
 800fa3a:	2316      	movs	r3, #22
 800fa3c:	6003      	str	r3, [r0, #0]
 800fa3e:	2001      	movs	r0, #1
 800fa40:	e7e7      	b.n	800fa12 <_raise_r+0x12>
 800fa42:	2400      	movs	r4, #0
 800fa44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fa48:	4628      	mov	r0, r5
 800fa4a:	4798      	blx	r3
 800fa4c:	2000      	movs	r0, #0
 800fa4e:	e7e0      	b.n	800fa12 <_raise_r+0x12>

0800fa50 <raise>:
 800fa50:	4b02      	ldr	r3, [pc, #8]	; (800fa5c <raise+0xc>)
 800fa52:	4601      	mov	r1, r0
 800fa54:	6818      	ldr	r0, [r3, #0]
 800fa56:	f7ff bfd3 	b.w	800fa00 <_raise_r>
 800fa5a:	bf00      	nop
 800fa5c:	200001e0 	.word	0x200001e0

0800fa60 <_kill_r>:
 800fa60:	b538      	push	{r3, r4, r5, lr}
 800fa62:	4d07      	ldr	r5, [pc, #28]	; (800fa80 <_kill_r+0x20>)
 800fa64:	2300      	movs	r3, #0
 800fa66:	4604      	mov	r4, r0
 800fa68:	4608      	mov	r0, r1
 800fa6a:	4611      	mov	r1, r2
 800fa6c:	602b      	str	r3, [r5, #0]
 800fa6e:	f7f4 fa7b 	bl	8003f68 <_kill>
 800fa72:	1c43      	adds	r3, r0, #1
 800fa74:	d102      	bne.n	800fa7c <_kill_r+0x1c>
 800fa76:	682b      	ldr	r3, [r5, #0]
 800fa78:	b103      	cbz	r3, 800fa7c <_kill_r+0x1c>
 800fa7a:	6023      	str	r3, [r4, #0]
 800fa7c:	bd38      	pop	{r3, r4, r5, pc}
 800fa7e:	bf00      	nop
 800fa80:	20013e24 	.word	0x20013e24

0800fa84 <_getpid_r>:
 800fa84:	f7f4 ba68 	b.w	8003f58 <_getpid>

0800fa88 <__swhatbuf_r>:
 800fa88:	b570      	push	{r4, r5, r6, lr}
 800fa8a:	460c      	mov	r4, r1
 800fa8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa90:	2900      	cmp	r1, #0
 800fa92:	b096      	sub	sp, #88	; 0x58
 800fa94:	4615      	mov	r5, r2
 800fa96:	461e      	mov	r6, r3
 800fa98:	da0d      	bge.n	800fab6 <__swhatbuf_r+0x2e>
 800fa9a:	89a3      	ldrh	r3, [r4, #12]
 800fa9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800faa0:	f04f 0100 	mov.w	r1, #0
 800faa4:	bf0c      	ite	eq
 800faa6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800faaa:	2340      	movne	r3, #64	; 0x40
 800faac:	2000      	movs	r0, #0
 800faae:	6031      	str	r1, [r6, #0]
 800fab0:	602b      	str	r3, [r5, #0]
 800fab2:	b016      	add	sp, #88	; 0x58
 800fab4:	bd70      	pop	{r4, r5, r6, pc}
 800fab6:	466a      	mov	r2, sp
 800fab8:	f000 f848 	bl	800fb4c <_fstat_r>
 800fabc:	2800      	cmp	r0, #0
 800fabe:	dbec      	blt.n	800fa9a <__swhatbuf_r+0x12>
 800fac0:	9901      	ldr	r1, [sp, #4]
 800fac2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800fac6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800faca:	4259      	negs	r1, r3
 800facc:	4159      	adcs	r1, r3
 800face:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fad2:	e7eb      	b.n	800faac <__swhatbuf_r+0x24>

0800fad4 <__smakebuf_r>:
 800fad4:	898b      	ldrh	r3, [r1, #12]
 800fad6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fad8:	079d      	lsls	r5, r3, #30
 800fada:	4606      	mov	r6, r0
 800fadc:	460c      	mov	r4, r1
 800fade:	d507      	bpl.n	800faf0 <__smakebuf_r+0x1c>
 800fae0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fae4:	6023      	str	r3, [r4, #0]
 800fae6:	6123      	str	r3, [r4, #16]
 800fae8:	2301      	movs	r3, #1
 800faea:	6163      	str	r3, [r4, #20]
 800faec:	b002      	add	sp, #8
 800faee:	bd70      	pop	{r4, r5, r6, pc}
 800faf0:	ab01      	add	r3, sp, #4
 800faf2:	466a      	mov	r2, sp
 800faf4:	f7ff ffc8 	bl	800fa88 <__swhatbuf_r>
 800faf8:	9900      	ldr	r1, [sp, #0]
 800fafa:	4605      	mov	r5, r0
 800fafc:	4630      	mov	r0, r6
 800fafe:	f7fe fec9 	bl	800e894 <_malloc_r>
 800fb02:	b948      	cbnz	r0, 800fb18 <__smakebuf_r+0x44>
 800fb04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb08:	059a      	lsls	r2, r3, #22
 800fb0a:	d4ef      	bmi.n	800faec <__smakebuf_r+0x18>
 800fb0c:	f023 0303 	bic.w	r3, r3, #3
 800fb10:	f043 0302 	orr.w	r3, r3, #2
 800fb14:	81a3      	strh	r3, [r4, #12]
 800fb16:	e7e3      	b.n	800fae0 <__smakebuf_r+0xc>
 800fb18:	89a3      	ldrh	r3, [r4, #12]
 800fb1a:	6020      	str	r0, [r4, #0]
 800fb1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb20:	81a3      	strh	r3, [r4, #12]
 800fb22:	9b00      	ldr	r3, [sp, #0]
 800fb24:	6163      	str	r3, [r4, #20]
 800fb26:	9b01      	ldr	r3, [sp, #4]
 800fb28:	6120      	str	r0, [r4, #16]
 800fb2a:	b15b      	cbz	r3, 800fb44 <__smakebuf_r+0x70>
 800fb2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb30:	4630      	mov	r0, r6
 800fb32:	f000 f81d 	bl	800fb70 <_isatty_r>
 800fb36:	b128      	cbz	r0, 800fb44 <__smakebuf_r+0x70>
 800fb38:	89a3      	ldrh	r3, [r4, #12]
 800fb3a:	f023 0303 	bic.w	r3, r3, #3
 800fb3e:	f043 0301 	orr.w	r3, r3, #1
 800fb42:	81a3      	strh	r3, [r4, #12]
 800fb44:	89a3      	ldrh	r3, [r4, #12]
 800fb46:	431d      	orrs	r5, r3
 800fb48:	81a5      	strh	r5, [r4, #12]
 800fb4a:	e7cf      	b.n	800faec <__smakebuf_r+0x18>

0800fb4c <_fstat_r>:
 800fb4c:	b538      	push	{r3, r4, r5, lr}
 800fb4e:	4d07      	ldr	r5, [pc, #28]	; (800fb6c <_fstat_r+0x20>)
 800fb50:	2300      	movs	r3, #0
 800fb52:	4604      	mov	r4, r0
 800fb54:	4608      	mov	r0, r1
 800fb56:	4611      	mov	r1, r2
 800fb58:	602b      	str	r3, [r5, #0]
 800fb5a:	f7f4 fa48 	bl	8003fee <_fstat>
 800fb5e:	1c43      	adds	r3, r0, #1
 800fb60:	d102      	bne.n	800fb68 <_fstat_r+0x1c>
 800fb62:	682b      	ldr	r3, [r5, #0]
 800fb64:	b103      	cbz	r3, 800fb68 <_fstat_r+0x1c>
 800fb66:	6023      	str	r3, [r4, #0]
 800fb68:	bd38      	pop	{r3, r4, r5, pc}
 800fb6a:	bf00      	nop
 800fb6c:	20013e24 	.word	0x20013e24

0800fb70 <_isatty_r>:
 800fb70:	b538      	push	{r3, r4, r5, lr}
 800fb72:	4d06      	ldr	r5, [pc, #24]	; (800fb8c <_isatty_r+0x1c>)
 800fb74:	2300      	movs	r3, #0
 800fb76:	4604      	mov	r4, r0
 800fb78:	4608      	mov	r0, r1
 800fb7a:	602b      	str	r3, [r5, #0]
 800fb7c:	f7f4 fa47 	bl	800400e <_isatty>
 800fb80:	1c43      	adds	r3, r0, #1
 800fb82:	d102      	bne.n	800fb8a <_isatty_r+0x1a>
 800fb84:	682b      	ldr	r3, [r5, #0]
 800fb86:	b103      	cbz	r3, 800fb8a <_isatty_r+0x1a>
 800fb88:	6023      	str	r3, [r4, #0]
 800fb8a:	bd38      	pop	{r3, r4, r5, pc}
 800fb8c:	20013e24 	.word	0x20013e24

0800fb90 <pow>:
 800fb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb92:	ed2d 8b02 	vpush	{d8}
 800fb96:	eeb0 8a40 	vmov.f32	s16, s0
 800fb9a:	eef0 8a60 	vmov.f32	s17, s1
 800fb9e:	ec55 4b11 	vmov	r4, r5, d1
 800fba2:	f000 f995 	bl	800fed0 <__ieee754_pow>
 800fba6:	4622      	mov	r2, r4
 800fba8:	462b      	mov	r3, r5
 800fbaa:	4620      	mov	r0, r4
 800fbac:	4629      	mov	r1, r5
 800fbae:	ec57 6b10 	vmov	r6, r7, d0
 800fbb2:	f7f1 f82b 	bl	8000c0c <__aeabi_dcmpun>
 800fbb6:	2800      	cmp	r0, #0
 800fbb8:	d13b      	bne.n	800fc32 <pow+0xa2>
 800fbba:	ec51 0b18 	vmov	r0, r1, d8
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	f7f0 fff1 	bl	8000ba8 <__aeabi_dcmpeq>
 800fbc6:	b1b8      	cbz	r0, 800fbf8 <pow+0x68>
 800fbc8:	2200      	movs	r2, #0
 800fbca:	2300      	movs	r3, #0
 800fbcc:	4620      	mov	r0, r4
 800fbce:	4629      	mov	r1, r5
 800fbd0:	f7f0 ffea 	bl	8000ba8 <__aeabi_dcmpeq>
 800fbd4:	2800      	cmp	r0, #0
 800fbd6:	d146      	bne.n	800fc66 <pow+0xd6>
 800fbd8:	ec45 4b10 	vmov	d0, r4, r5
 800fbdc:	f000 f848 	bl	800fc70 <finite>
 800fbe0:	b338      	cbz	r0, 800fc32 <pow+0xa2>
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	4620      	mov	r0, r4
 800fbe8:	4629      	mov	r1, r5
 800fbea:	f7f0 ffe7 	bl	8000bbc <__aeabi_dcmplt>
 800fbee:	b300      	cbz	r0, 800fc32 <pow+0xa2>
 800fbf0:	f7fd ff24 	bl	800da3c <__errno>
 800fbf4:	2322      	movs	r3, #34	; 0x22
 800fbf6:	e01b      	b.n	800fc30 <pow+0xa0>
 800fbf8:	ec47 6b10 	vmov	d0, r6, r7
 800fbfc:	f000 f838 	bl	800fc70 <finite>
 800fc00:	b9e0      	cbnz	r0, 800fc3c <pow+0xac>
 800fc02:	eeb0 0a48 	vmov.f32	s0, s16
 800fc06:	eef0 0a68 	vmov.f32	s1, s17
 800fc0a:	f000 f831 	bl	800fc70 <finite>
 800fc0e:	b1a8      	cbz	r0, 800fc3c <pow+0xac>
 800fc10:	ec45 4b10 	vmov	d0, r4, r5
 800fc14:	f000 f82c 	bl	800fc70 <finite>
 800fc18:	b180      	cbz	r0, 800fc3c <pow+0xac>
 800fc1a:	4632      	mov	r2, r6
 800fc1c:	463b      	mov	r3, r7
 800fc1e:	4630      	mov	r0, r6
 800fc20:	4639      	mov	r1, r7
 800fc22:	f7f0 fff3 	bl	8000c0c <__aeabi_dcmpun>
 800fc26:	2800      	cmp	r0, #0
 800fc28:	d0e2      	beq.n	800fbf0 <pow+0x60>
 800fc2a:	f7fd ff07 	bl	800da3c <__errno>
 800fc2e:	2321      	movs	r3, #33	; 0x21
 800fc30:	6003      	str	r3, [r0, #0]
 800fc32:	ecbd 8b02 	vpop	{d8}
 800fc36:	ec47 6b10 	vmov	d0, r6, r7
 800fc3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	2300      	movs	r3, #0
 800fc40:	4630      	mov	r0, r6
 800fc42:	4639      	mov	r1, r7
 800fc44:	f7f0 ffb0 	bl	8000ba8 <__aeabi_dcmpeq>
 800fc48:	2800      	cmp	r0, #0
 800fc4a:	d0f2      	beq.n	800fc32 <pow+0xa2>
 800fc4c:	eeb0 0a48 	vmov.f32	s0, s16
 800fc50:	eef0 0a68 	vmov.f32	s1, s17
 800fc54:	f000 f80c 	bl	800fc70 <finite>
 800fc58:	2800      	cmp	r0, #0
 800fc5a:	d0ea      	beq.n	800fc32 <pow+0xa2>
 800fc5c:	ec45 4b10 	vmov	d0, r4, r5
 800fc60:	f000 f806 	bl	800fc70 <finite>
 800fc64:	e7c3      	b.n	800fbee <pow+0x5e>
 800fc66:	4f01      	ldr	r7, [pc, #4]	; (800fc6c <pow+0xdc>)
 800fc68:	2600      	movs	r6, #0
 800fc6a:	e7e2      	b.n	800fc32 <pow+0xa2>
 800fc6c:	3ff00000 	.word	0x3ff00000

0800fc70 <finite>:
 800fc70:	b082      	sub	sp, #8
 800fc72:	ed8d 0b00 	vstr	d0, [sp]
 800fc76:	9801      	ldr	r0, [sp, #4]
 800fc78:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800fc7c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800fc80:	0fc0      	lsrs	r0, r0, #31
 800fc82:	b002      	add	sp, #8
 800fc84:	4770      	bx	lr
	...

0800fc88 <__ieee754_sqrt>:
 800fc88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc8c:	ec55 4b10 	vmov	r4, r5, d0
 800fc90:	4e67      	ldr	r6, [pc, #412]	; (800fe30 <__ieee754_sqrt+0x1a8>)
 800fc92:	43ae      	bics	r6, r5
 800fc94:	ee10 0a10 	vmov	r0, s0
 800fc98:	ee10 2a10 	vmov	r2, s0
 800fc9c:	4629      	mov	r1, r5
 800fc9e:	462b      	mov	r3, r5
 800fca0:	d10d      	bne.n	800fcbe <__ieee754_sqrt+0x36>
 800fca2:	f7f0 fd19 	bl	80006d8 <__aeabi_dmul>
 800fca6:	4602      	mov	r2, r0
 800fca8:	460b      	mov	r3, r1
 800fcaa:	4620      	mov	r0, r4
 800fcac:	4629      	mov	r1, r5
 800fcae:	f7f0 fb5d 	bl	800036c <__adddf3>
 800fcb2:	4604      	mov	r4, r0
 800fcb4:	460d      	mov	r5, r1
 800fcb6:	ec45 4b10 	vmov	d0, r4, r5
 800fcba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcbe:	2d00      	cmp	r5, #0
 800fcc0:	dc0b      	bgt.n	800fcda <__ieee754_sqrt+0x52>
 800fcc2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fcc6:	4326      	orrs	r6, r4
 800fcc8:	d0f5      	beq.n	800fcb6 <__ieee754_sqrt+0x2e>
 800fcca:	b135      	cbz	r5, 800fcda <__ieee754_sqrt+0x52>
 800fccc:	f7f0 fb4c 	bl	8000368 <__aeabi_dsub>
 800fcd0:	4602      	mov	r2, r0
 800fcd2:	460b      	mov	r3, r1
 800fcd4:	f7f0 fe2a 	bl	800092c <__aeabi_ddiv>
 800fcd8:	e7eb      	b.n	800fcb2 <__ieee754_sqrt+0x2a>
 800fcda:	1509      	asrs	r1, r1, #20
 800fcdc:	f000 808d 	beq.w	800fdfa <__ieee754_sqrt+0x172>
 800fce0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fce4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800fce8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fcec:	07c9      	lsls	r1, r1, #31
 800fcee:	bf5c      	itt	pl
 800fcf0:	005b      	lslpl	r3, r3, #1
 800fcf2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800fcf6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fcfa:	bf58      	it	pl
 800fcfc:	0052      	lslpl	r2, r2, #1
 800fcfe:	2500      	movs	r5, #0
 800fd00:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fd04:	1076      	asrs	r6, r6, #1
 800fd06:	0052      	lsls	r2, r2, #1
 800fd08:	f04f 0e16 	mov.w	lr, #22
 800fd0c:	46ac      	mov	ip, r5
 800fd0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fd12:	eb0c 0001 	add.w	r0, ip, r1
 800fd16:	4298      	cmp	r0, r3
 800fd18:	bfde      	ittt	le
 800fd1a:	1a1b      	suble	r3, r3, r0
 800fd1c:	eb00 0c01 	addle.w	ip, r0, r1
 800fd20:	186d      	addle	r5, r5, r1
 800fd22:	005b      	lsls	r3, r3, #1
 800fd24:	f1be 0e01 	subs.w	lr, lr, #1
 800fd28:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fd2c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fd30:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800fd34:	d1ed      	bne.n	800fd12 <__ieee754_sqrt+0x8a>
 800fd36:	4674      	mov	r4, lr
 800fd38:	2720      	movs	r7, #32
 800fd3a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800fd3e:	4563      	cmp	r3, ip
 800fd40:	eb01 000e 	add.w	r0, r1, lr
 800fd44:	dc02      	bgt.n	800fd4c <__ieee754_sqrt+0xc4>
 800fd46:	d113      	bne.n	800fd70 <__ieee754_sqrt+0xe8>
 800fd48:	4290      	cmp	r0, r2
 800fd4a:	d811      	bhi.n	800fd70 <__ieee754_sqrt+0xe8>
 800fd4c:	2800      	cmp	r0, #0
 800fd4e:	eb00 0e01 	add.w	lr, r0, r1
 800fd52:	da57      	bge.n	800fe04 <__ieee754_sqrt+0x17c>
 800fd54:	f1be 0f00 	cmp.w	lr, #0
 800fd58:	db54      	blt.n	800fe04 <__ieee754_sqrt+0x17c>
 800fd5a:	f10c 0801 	add.w	r8, ip, #1
 800fd5e:	eba3 030c 	sub.w	r3, r3, ip
 800fd62:	4290      	cmp	r0, r2
 800fd64:	bf88      	it	hi
 800fd66:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800fd6a:	1a12      	subs	r2, r2, r0
 800fd6c:	440c      	add	r4, r1
 800fd6e:	46c4      	mov	ip, r8
 800fd70:	005b      	lsls	r3, r3, #1
 800fd72:	3f01      	subs	r7, #1
 800fd74:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fd78:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fd7c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800fd80:	d1dd      	bne.n	800fd3e <__ieee754_sqrt+0xb6>
 800fd82:	4313      	orrs	r3, r2
 800fd84:	d01b      	beq.n	800fdbe <__ieee754_sqrt+0x136>
 800fd86:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800fe34 <__ieee754_sqrt+0x1ac>
 800fd8a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800fe38 <__ieee754_sqrt+0x1b0>
 800fd8e:	e9da 0100 	ldrd	r0, r1, [sl]
 800fd92:	e9db 2300 	ldrd	r2, r3, [fp]
 800fd96:	f7f0 fae7 	bl	8000368 <__aeabi_dsub>
 800fd9a:	e9da 8900 	ldrd	r8, r9, [sl]
 800fd9e:	4602      	mov	r2, r0
 800fda0:	460b      	mov	r3, r1
 800fda2:	4640      	mov	r0, r8
 800fda4:	4649      	mov	r1, r9
 800fda6:	f7f0 ff13 	bl	8000bd0 <__aeabi_dcmple>
 800fdaa:	b140      	cbz	r0, 800fdbe <__ieee754_sqrt+0x136>
 800fdac:	f1b4 3fff 	cmp.w	r4, #4294967295
 800fdb0:	e9da 0100 	ldrd	r0, r1, [sl]
 800fdb4:	e9db 2300 	ldrd	r2, r3, [fp]
 800fdb8:	d126      	bne.n	800fe08 <__ieee754_sqrt+0x180>
 800fdba:	3501      	adds	r5, #1
 800fdbc:	463c      	mov	r4, r7
 800fdbe:	106a      	asrs	r2, r5, #1
 800fdc0:	0863      	lsrs	r3, r4, #1
 800fdc2:	07e9      	lsls	r1, r5, #31
 800fdc4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800fdc8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800fdcc:	bf48      	it	mi
 800fdce:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800fdd2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800fdd6:	461c      	mov	r4, r3
 800fdd8:	e76d      	b.n	800fcb6 <__ieee754_sqrt+0x2e>
 800fdda:	0ad3      	lsrs	r3, r2, #11
 800fddc:	3815      	subs	r0, #21
 800fdde:	0552      	lsls	r2, r2, #21
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d0fa      	beq.n	800fdda <__ieee754_sqrt+0x152>
 800fde4:	02dc      	lsls	r4, r3, #11
 800fde6:	d50a      	bpl.n	800fdfe <__ieee754_sqrt+0x176>
 800fde8:	f1c1 0420 	rsb	r4, r1, #32
 800fdec:	fa22 f404 	lsr.w	r4, r2, r4
 800fdf0:	1e4d      	subs	r5, r1, #1
 800fdf2:	408a      	lsls	r2, r1
 800fdf4:	4323      	orrs	r3, r4
 800fdf6:	1b41      	subs	r1, r0, r5
 800fdf8:	e772      	b.n	800fce0 <__ieee754_sqrt+0x58>
 800fdfa:	4608      	mov	r0, r1
 800fdfc:	e7f0      	b.n	800fde0 <__ieee754_sqrt+0x158>
 800fdfe:	005b      	lsls	r3, r3, #1
 800fe00:	3101      	adds	r1, #1
 800fe02:	e7ef      	b.n	800fde4 <__ieee754_sqrt+0x15c>
 800fe04:	46e0      	mov	r8, ip
 800fe06:	e7aa      	b.n	800fd5e <__ieee754_sqrt+0xd6>
 800fe08:	f7f0 fab0 	bl	800036c <__adddf3>
 800fe0c:	e9da 8900 	ldrd	r8, r9, [sl]
 800fe10:	4602      	mov	r2, r0
 800fe12:	460b      	mov	r3, r1
 800fe14:	4640      	mov	r0, r8
 800fe16:	4649      	mov	r1, r9
 800fe18:	f7f0 fed0 	bl	8000bbc <__aeabi_dcmplt>
 800fe1c:	b120      	cbz	r0, 800fe28 <__ieee754_sqrt+0x1a0>
 800fe1e:	1ca0      	adds	r0, r4, #2
 800fe20:	bf08      	it	eq
 800fe22:	3501      	addeq	r5, #1
 800fe24:	3402      	adds	r4, #2
 800fe26:	e7ca      	b.n	800fdbe <__ieee754_sqrt+0x136>
 800fe28:	3401      	adds	r4, #1
 800fe2a:	f024 0401 	bic.w	r4, r4, #1
 800fe2e:	e7c6      	b.n	800fdbe <__ieee754_sqrt+0x136>
 800fe30:	7ff00000 	.word	0x7ff00000
 800fe34:	200001e8 	.word	0x200001e8
 800fe38:	200001f0 	.word	0x200001f0

0800fe3c <round>:
 800fe3c:	ec53 2b10 	vmov	r2, r3, d0
 800fe40:	b570      	push	{r4, r5, r6, lr}
 800fe42:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800fe46:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800fe4a:	2813      	cmp	r0, #19
 800fe4c:	ee10 5a10 	vmov	r5, s0
 800fe50:	4619      	mov	r1, r3
 800fe52:	dc18      	bgt.n	800fe86 <round+0x4a>
 800fe54:	2800      	cmp	r0, #0
 800fe56:	da09      	bge.n	800fe6c <round+0x30>
 800fe58:	3001      	adds	r0, #1
 800fe5a:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800fe5e:	d103      	bne.n	800fe68 <round+0x2c>
 800fe60:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800fe64:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800fe68:	2300      	movs	r3, #0
 800fe6a:	e02a      	b.n	800fec2 <round+0x86>
 800fe6c:	4c16      	ldr	r4, [pc, #88]	; (800fec8 <round+0x8c>)
 800fe6e:	4104      	asrs	r4, r0
 800fe70:	ea03 0604 	and.w	r6, r3, r4
 800fe74:	4316      	orrs	r6, r2
 800fe76:	d011      	beq.n	800fe9c <round+0x60>
 800fe78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fe7c:	4103      	asrs	r3, r0
 800fe7e:	440b      	add	r3, r1
 800fe80:	ea23 0104 	bic.w	r1, r3, r4
 800fe84:	e7f0      	b.n	800fe68 <round+0x2c>
 800fe86:	2833      	cmp	r0, #51	; 0x33
 800fe88:	dd0b      	ble.n	800fea2 <round+0x66>
 800fe8a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800fe8e:	d105      	bne.n	800fe9c <round+0x60>
 800fe90:	ee10 0a10 	vmov	r0, s0
 800fe94:	f7f0 fa6a 	bl	800036c <__adddf3>
 800fe98:	4602      	mov	r2, r0
 800fe9a:	460b      	mov	r3, r1
 800fe9c:	ec43 2b10 	vmov	d0, r2, r3
 800fea0:	bd70      	pop	{r4, r5, r6, pc}
 800fea2:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800fea6:	f04f 34ff 	mov.w	r4, #4294967295
 800feaa:	40f4      	lsrs	r4, r6
 800feac:	4214      	tst	r4, r2
 800feae:	d0f5      	beq.n	800fe9c <round+0x60>
 800feb0:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800feb4:	2301      	movs	r3, #1
 800feb6:	4083      	lsls	r3, r0
 800feb8:	195b      	adds	r3, r3, r5
 800feba:	bf28      	it	cs
 800febc:	3101      	addcs	r1, #1
 800febe:	ea23 0304 	bic.w	r3, r3, r4
 800fec2:	461a      	mov	r2, r3
 800fec4:	460b      	mov	r3, r1
 800fec6:	e7e9      	b.n	800fe9c <round+0x60>
 800fec8:	000fffff 	.word	0x000fffff
 800fecc:	00000000 	.word	0x00000000

0800fed0 <__ieee754_pow>:
 800fed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fed4:	ed2d 8b06 	vpush	{d8-d10}
 800fed8:	b089      	sub	sp, #36	; 0x24
 800feda:	ed8d 1b00 	vstr	d1, [sp]
 800fede:	e9dd 2900 	ldrd	r2, r9, [sp]
 800fee2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800fee6:	ea58 0102 	orrs.w	r1, r8, r2
 800feea:	ec57 6b10 	vmov	r6, r7, d0
 800feee:	d115      	bne.n	800ff1c <__ieee754_pow+0x4c>
 800fef0:	19b3      	adds	r3, r6, r6
 800fef2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800fef6:	4152      	adcs	r2, r2
 800fef8:	4299      	cmp	r1, r3
 800fefa:	4b89      	ldr	r3, [pc, #548]	; (8010120 <__ieee754_pow+0x250>)
 800fefc:	4193      	sbcs	r3, r2
 800fefe:	f080 84d1 	bcs.w	80108a4 <__ieee754_pow+0x9d4>
 800ff02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff06:	4630      	mov	r0, r6
 800ff08:	4639      	mov	r1, r7
 800ff0a:	f7f0 fa2f 	bl	800036c <__adddf3>
 800ff0e:	ec41 0b10 	vmov	d0, r0, r1
 800ff12:	b009      	add	sp, #36	; 0x24
 800ff14:	ecbd 8b06 	vpop	{d8-d10}
 800ff18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff1c:	4b81      	ldr	r3, [pc, #516]	; (8010124 <__ieee754_pow+0x254>)
 800ff1e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ff22:	429c      	cmp	r4, r3
 800ff24:	ee10 aa10 	vmov	sl, s0
 800ff28:	463d      	mov	r5, r7
 800ff2a:	dc06      	bgt.n	800ff3a <__ieee754_pow+0x6a>
 800ff2c:	d101      	bne.n	800ff32 <__ieee754_pow+0x62>
 800ff2e:	2e00      	cmp	r6, #0
 800ff30:	d1e7      	bne.n	800ff02 <__ieee754_pow+0x32>
 800ff32:	4598      	cmp	r8, r3
 800ff34:	dc01      	bgt.n	800ff3a <__ieee754_pow+0x6a>
 800ff36:	d10f      	bne.n	800ff58 <__ieee754_pow+0x88>
 800ff38:	b172      	cbz	r2, 800ff58 <__ieee754_pow+0x88>
 800ff3a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ff3e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ff42:	ea55 050a 	orrs.w	r5, r5, sl
 800ff46:	d1dc      	bne.n	800ff02 <__ieee754_pow+0x32>
 800ff48:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ff4c:	18db      	adds	r3, r3, r3
 800ff4e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ff52:	4152      	adcs	r2, r2
 800ff54:	429d      	cmp	r5, r3
 800ff56:	e7d0      	b.n	800fefa <__ieee754_pow+0x2a>
 800ff58:	2d00      	cmp	r5, #0
 800ff5a:	da3b      	bge.n	800ffd4 <__ieee754_pow+0x104>
 800ff5c:	4b72      	ldr	r3, [pc, #456]	; (8010128 <__ieee754_pow+0x258>)
 800ff5e:	4598      	cmp	r8, r3
 800ff60:	dc51      	bgt.n	8010006 <__ieee754_pow+0x136>
 800ff62:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ff66:	4598      	cmp	r8, r3
 800ff68:	f340 84ab 	ble.w	80108c2 <__ieee754_pow+0x9f2>
 800ff6c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ff70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ff74:	2b14      	cmp	r3, #20
 800ff76:	dd0f      	ble.n	800ff98 <__ieee754_pow+0xc8>
 800ff78:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ff7c:	fa22 f103 	lsr.w	r1, r2, r3
 800ff80:	fa01 f303 	lsl.w	r3, r1, r3
 800ff84:	4293      	cmp	r3, r2
 800ff86:	f040 849c 	bne.w	80108c2 <__ieee754_pow+0x9f2>
 800ff8a:	f001 0101 	and.w	r1, r1, #1
 800ff8e:	f1c1 0302 	rsb	r3, r1, #2
 800ff92:	9304      	str	r3, [sp, #16]
 800ff94:	b182      	cbz	r2, 800ffb8 <__ieee754_pow+0xe8>
 800ff96:	e05f      	b.n	8010058 <__ieee754_pow+0x188>
 800ff98:	2a00      	cmp	r2, #0
 800ff9a:	d15b      	bne.n	8010054 <__ieee754_pow+0x184>
 800ff9c:	f1c3 0314 	rsb	r3, r3, #20
 800ffa0:	fa48 f103 	asr.w	r1, r8, r3
 800ffa4:	fa01 f303 	lsl.w	r3, r1, r3
 800ffa8:	4543      	cmp	r3, r8
 800ffaa:	f040 8487 	bne.w	80108bc <__ieee754_pow+0x9ec>
 800ffae:	f001 0101 	and.w	r1, r1, #1
 800ffb2:	f1c1 0302 	rsb	r3, r1, #2
 800ffb6:	9304      	str	r3, [sp, #16]
 800ffb8:	4b5c      	ldr	r3, [pc, #368]	; (801012c <__ieee754_pow+0x25c>)
 800ffba:	4598      	cmp	r8, r3
 800ffbc:	d132      	bne.n	8010024 <__ieee754_pow+0x154>
 800ffbe:	f1b9 0f00 	cmp.w	r9, #0
 800ffc2:	f280 8477 	bge.w	80108b4 <__ieee754_pow+0x9e4>
 800ffc6:	4959      	ldr	r1, [pc, #356]	; (801012c <__ieee754_pow+0x25c>)
 800ffc8:	4632      	mov	r2, r6
 800ffca:	463b      	mov	r3, r7
 800ffcc:	2000      	movs	r0, #0
 800ffce:	f7f0 fcad 	bl	800092c <__aeabi_ddiv>
 800ffd2:	e79c      	b.n	800ff0e <__ieee754_pow+0x3e>
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	9304      	str	r3, [sp, #16]
 800ffd8:	2a00      	cmp	r2, #0
 800ffda:	d13d      	bne.n	8010058 <__ieee754_pow+0x188>
 800ffdc:	4b51      	ldr	r3, [pc, #324]	; (8010124 <__ieee754_pow+0x254>)
 800ffde:	4598      	cmp	r8, r3
 800ffe0:	d1ea      	bne.n	800ffb8 <__ieee754_pow+0xe8>
 800ffe2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ffe6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ffea:	ea53 030a 	orrs.w	r3, r3, sl
 800ffee:	f000 8459 	beq.w	80108a4 <__ieee754_pow+0x9d4>
 800fff2:	4b4f      	ldr	r3, [pc, #316]	; (8010130 <__ieee754_pow+0x260>)
 800fff4:	429c      	cmp	r4, r3
 800fff6:	dd08      	ble.n	801000a <__ieee754_pow+0x13a>
 800fff8:	f1b9 0f00 	cmp.w	r9, #0
 800fffc:	f2c0 8456 	blt.w	80108ac <__ieee754_pow+0x9dc>
 8010000:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010004:	e783      	b.n	800ff0e <__ieee754_pow+0x3e>
 8010006:	2302      	movs	r3, #2
 8010008:	e7e5      	b.n	800ffd6 <__ieee754_pow+0x106>
 801000a:	f1b9 0f00 	cmp.w	r9, #0
 801000e:	f04f 0000 	mov.w	r0, #0
 8010012:	f04f 0100 	mov.w	r1, #0
 8010016:	f6bf af7a 	bge.w	800ff0e <__ieee754_pow+0x3e>
 801001a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801001e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010022:	e774      	b.n	800ff0e <__ieee754_pow+0x3e>
 8010024:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010028:	d106      	bne.n	8010038 <__ieee754_pow+0x168>
 801002a:	4632      	mov	r2, r6
 801002c:	463b      	mov	r3, r7
 801002e:	4630      	mov	r0, r6
 8010030:	4639      	mov	r1, r7
 8010032:	f7f0 fb51 	bl	80006d8 <__aeabi_dmul>
 8010036:	e76a      	b.n	800ff0e <__ieee754_pow+0x3e>
 8010038:	4b3e      	ldr	r3, [pc, #248]	; (8010134 <__ieee754_pow+0x264>)
 801003a:	4599      	cmp	r9, r3
 801003c:	d10c      	bne.n	8010058 <__ieee754_pow+0x188>
 801003e:	2d00      	cmp	r5, #0
 8010040:	db0a      	blt.n	8010058 <__ieee754_pow+0x188>
 8010042:	ec47 6b10 	vmov	d0, r6, r7
 8010046:	b009      	add	sp, #36	; 0x24
 8010048:	ecbd 8b06 	vpop	{d8-d10}
 801004c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010050:	f7ff be1a 	b.w	800fc88 <__ieee754_sqrt>
 8010054:	2300      	movs	r3, #0
 8010056:	9304      	str	r3, [sp, #16]
 8010058:	ec47 6b10 	vmov	d0, r6, r7
 801005c:	f000 fc62 	bl	8010924 <fabs>
 8010060:	ec51 0b10 	vmov	r0, r1, d0
 8010064:	f1ba 0f00 	cmp.w	sl, #0
 8010068:	d129      	bne.n	80100be <__ieee754_pow+0x1ee>
 801006a:	b124      	cbz	r4, 8010076 <__ieee754_pow+0x1a6>
 801006c:	4b2f      	ldr	r3, [pc, #188]	; (801012c <__ieee754_pow+0x25c>)
 801006e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010072:	429a      	cmp	r2, r3
 8010074:	d123      	bne.n	80100be <__ieee754_pow+0x1ee>
 8010076:	f1b9 0f00 	cmp.w	r9, #0
 801007a:	da05      	bge.n	8010088 <__ieee754_pow+0x1b8>
 801007c:	4602      	mov	r2, r0
 801007e:	460b      	mov	r3, r1
 8010080:	2000      	movs	r0, #0
 8010082:	492a      	ldr	r1, [pc, #168]	; (801012c <__ieee754_pow+0x25c>)
 8010084:	f7f0 fc52 	bl	800092c <__aeabi_ddiv>
 8010088:	2d00      	cmp	r5, #0
 801008a:	f6bf af40 	bge.w	800ff0e <__ieee754_pow+0x3e>
 801008e:	9b04      	ldr	r3, [sp, #16]
 8010090:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010094:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010098:	431c      	orrs	r4, r3
 801009a:	d108      	bne.n	80100ae <__ieee754_pow+0x1de>
 801009c:	4602      	mov	r2, r0
 801009e:	460b      	mov	r3, r1
 80100a0:	4610      	mov	r0, r2
 80100a2:	4619      	mov	r1, r3
 80100a4:	f7f0 f960 	bl	8000368 <__aeabi_dsub>
 80100a8:	4602      	mov	r2, r0
 80100aa:	460b      	mov	r3, r1
 80100ac:	e78f      	b.n	800ffce <__ieee754_pow+0xfe>
 80100ae:	9b04      	ldr	r3, [sp, #16]
 80100b0:	2b01      	cmp	r3, #1
 80100b2:	f47f af2c 	bne.w	800ff0e <__ieee754_pow+0x3e>
 80100b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80100ba:	4619      	mov	r1, r3
 80100bc:	e727      	b.n	800ff0e <__ieee754_pow+0x3e>
 80100be:	0feb      	lsrs	r3, r5, #31
 80100c0:	3b01      	subs	r3, #1
 80100c2:	9306      	str	r3, [sp, #24]
 80100c4:	9a06      	ldr	r2, [sp, #24]
 80100c6:	9b04      	ldr	r3, [sp, #16]
 80100c8:	4313      	orrs	r3, r2
 80100ca:	d102      	bne.n	80100d2 <__ieee754_pow+0x202>
 80100cc:	4632      	mov	r2, r6
 80100ce:	463b      	mov	r3, r7
 80100d0:	e7e6      	b.n	80100a0 <__ieee754_pow+0x1d0>
 80100d2:	4b19      	ldr	r3, [pc, #100]	; (8010138 <__ieee754_pow+0x268>)
 80100d4:	4598      	cmp	r8, r3
 80100d6:	f340 80fb 	ble.w	80102d0 <__ieee754_pow+0x400>
 80100da:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80100de:	4598      	cmp	r8, r3
 80100e0:	4b13      	ldr	r3, [pc, #76]	; (8010130 <__ieee754_pow+0x260>)
 80100e2:	dd0c      	ble.n	80100fe <__ieee754_pow+0x22e>
 80100e4:	429c      	cmp	r4, r3
 80100e6:	dc0f      	bgt.n	8010108 <__ieee754_pow+0x238>
 80100e8:	f1b9 0f00 	cmp.w	r9, #0
 80100ec:	da0f      	bge.n	801010e <__ieee754_pow+0x23e>
 80100ee:	2000      	movs	r0, #0
 80100f0:	b009      	add	sp, #36	; 0x24
 80100f2:	ecbd 8b06 	vpop	{d8-d10}
 80100f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100fa:	f000 bcc2 	b.w	8010a82 <__math_oflow>
 80100fe:	429c      	cmp	r4, r3
 8010100:	dbf2      	blt.n	80100e8 <__ieee754_pow+0x218>
 8010102:	4b0a      	ldr	r3, [pc, #40]	; (801012c <__ieee754_pow+0x25c>)
 8010104:	429c      	cmp	r4, r3
 8010106:	dd19      	ble.n	801013c <__ieee754_pow+0x26c>
 8010108:	f1b9 0f00 	cmp.w	r9, #0
 801010c:	dcef      	bgt.n	80100ee <__ieee754_pow+0x21e>
 801010e:	2000      	movs	r0, #0
 8010110:	b009      	add	sp, #36	; 0x24
 8010112:	ecbd 8b06 	vpop	{d8-d10}
 8010116:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801011a:	f000 bca9 	b.w	8010a70 <__math_uflow>
 801011e:	bf00      	nop
 8010120:	fff00000 	.word	0xfff00000
 8010124:	7ff00000 	.word	0x7ff00000
 8010128:	433fffff 	.word	0x433fffff
 801012c:	3ff00000 	.word	0x3ff00000
 8010130:	3fefffff 	.word	0x3fefffff
 8010134:	3fe00000 	.word	0x3fe00000
 8010138:	41e00000 	.word	0x41e00000
 801013c:	4b60      	ldr	r3, [pc, #384]	; (80102c0 <__ieee754_pow+0x3f0>)
 801013e:	2200      	movs	r2, #0
 8010140:	f7f0 f912 	bl	8000368 <__aeabi_dsub>
 8010144:	a354      	add	r3, pc, #336	; (adr r3, 8010298 <__ieee754_pow+0x3c8>)
 8010146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801014a:	4604      	mov	r4, r0
 801014c:	460d      	mov	r5, r1
 801014e:	f7f0 fac3 	bl	80006d8 <__aeabi_dmul>
 8010152:	a353      	add	r3, pc, #332	; (adr r3, 80102a0 <__ieee754_pow+0x3d0>)
 8010154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010158:	4606      	mov	r6, r0
 801015a:	460f      	mov	r7, r1
 801015c:	4620      	mov	r0, r4
 801015e:	4629      	mov	r1, r5
 8010160:	f7f0 faba 	bl	80006d8 <__aeabi_dmul>
 8010164:	4b57      	ldr	r3, [pc, #348]	; (80102c4 <__ieee754_pow+0x3f4>)
 8010166:	4682      	mov	sl, r0
 8010168:	468b      	mov	fp, r1
 801016a:	2200      	movs	r2, #0
 801016c:	4620      	mov	r0, r4
 801016e:	4629      	mov	r1, r5
 8010170:	f7f0 fab2 	bl	80006d8 <__aeabi_dmul>
 8010174:	4602      	mov	r2, r0
 8010176:	460b      	mov	r3, r1
 8010178:	a14b      	add	r1, pc, #300	; (adr r1, 80102a8 <__ieee754_pow+0x3d8>)
 801017a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801017e:	f7f0 f8f3 	bl	8000368 <__aeabi_dsub>
 8010182:	4622      	mov	r2, r4
 8010184:	462b      	mov	r3, r5
 8010186:	f7f0 faa7 	bl	80006d8 <__aeabi_dmul>
 801018a:	4602      	mov	r2, r0
 801018c:	460b      	mov	r3, r1
 801018e:	2000      	movs	r0, #0
 8010190:	494d      	ldr	r1, [pc, #308]	; (80102c8 <__ieee754_pow+0x3f8>)
 8010192:	f7f0 f8e9 	bl	8000368 <__aeabi_dsub>
 8010196:	4622      	mov	r2, r4
 8010198:	4680      	mov	r8, r0
 801019a:	4689      	mov	r9, r1
 801019c:	462b      	mov	r3, r5
 801019e:	4620      	mov	r0, r4
 80101a0:	4629      	mov	r1, r5
 80101a2:	f7f0 fa99 	bl	80006d8 <__aeabi_dmul>
 80101a6:	4602      	mov	r2, r0
 80101a8:	460b      	mov	r3, r1
 80101aa:	4640      	mov	r0, r8
 80101ac:	4649      	mov	r1, r9
 80101ae:	f7f0 fa93 	bl	80006d8 <__aeabi_dmul>
 80101b2:	a33f      	add	r3, pc, #252	; (adr r3, 80102b0 <__ieee754_pow+0x3e0>)
 80101b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b8:	f7f0 fa8e 	bl	80006d8 <__aeabi_dmul>
 80101bc:	4602      	mov	r2, r0
 80101be:	460b      	mov	r3, r1
 80101c0:	4650      	mov	r0, sl
 80101c2:	4659      	mov	r1, fp
 80101c4:	f7f0 f8d0 	bl	8000368 <__aeabi_dsub>
 80101c8:	4602      	mov	r2, r0
 80101ca:	460b      	mov	r3, r1
 80101cc:	4680      	mov	r8, r0
 80101ce:	4689      	mov	r9, r1
 80101d0:	4630      	mov	r0, r6
 80101d2:	4639      	mov	r1, r7
 80101d4:	f7f0 f8ca 	bl	800036c <__adddf3>
 80101d8:	2000      	movs	r0, #0
 80101da:	4632      	mov	r2, r6
 80101dc:	463b      	mov	r3, r7
 80101de:	4604      	mov	r4, r0
 80101e0:	460d      	mov	r5, r1
 80101e2:	f7f0 f8c1 	bl	8000368 <__aeabi_dsub>
 80101e6:	4602      	mov	r2, r0
 80101e8:	460b      	mov	r3, r1
 80101ea:	4640      	mov	r0, r8
 80101ec:	4649      	mov	r1, r9
 80101ee:	f7f0 f8bb 	bl	8000368 <__aeabi_dsub>
 80101f2:	9b04      	ldr	r3, [sp, #16]
 80101f4:	9a06      	ldr	r2, [sp, #24]
 80101f6:	3b01      	subs	r3, #1
 80101f8:	4313      	orrs	r3, r2
 80101fa:	4682      	mov	sl, r0
 80101fc:	468b      	mov	fp, r1
 80101fe:	f040 81e7 	bne.w	80105d0 <__ieee754_pow+0x700>
 8010202:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80102b8 <__ieee754_pow+0x3e8>
 8010206:	eeb0 8a47 	vmov.f32	s16, s14
 801020a:	eef0 8a67 	vmov.f32	s17, s15
 801020e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010212:	2600      	movs	r6, #0
 8010214:	4632      	mov	r2, r6
 8010216:	463b      	mov	r3, r7
 8010218:	e9dd 0100 	ldrd	r0, r1, [sp]
 801021c:	f7f0 f8a4 	bl	8000368 <__aeabi_dsub>
 8010220:	4622      	mov	r2, r4
 8010222:	462b      	mov	r3, r5
 8010224:	f7f0 fa58 	bl	80006d8 <__aeabi_dmul>
 8010228:	e9dd 2300 	ldrd	r2, r3, [sp]
 801022c:	4680      	mov	r8, r0
 801022e:	4689      	mov	r9, r1
 8010230:	4650      	mov	r0, sl
 8010232:	4659      	mov	r1, fp
 8010234:	f7f0 fa50 	bl	80006d8 <__aeabi_dmul>
 8010238:	4602      	mov	r2, r0
 801023a:	460b      	mov	r3, r1
 801023c:	4640      	mov	r0, r8
 801023e:	4649      	mov	r1, r9
 8010240:	f7f0 f894 	bl	800036c <__adddf3>
 8010244:	4632      	mov	r2, r6
 8010246:	463b      	mov	r3, r7
 8010248:	4680      	mov	r8, r0
 801024a:	4689      	mov	r9, r1
 801024c:	4620      	mov	r0, r4
 801024e:	4629      	mov	r1, r5
 8010250:	f7f0 fa42 	bl	80006d8 <__aeabi_dmul>
 8010254:	460b      	mov	r3, r1
 8010256:	4604      	mov	r4, r0
 8010258:	460d      	mov	r5, r1
 801025a:	4602      	mov	r2, r0
 801025c:	4649      	mov	r1, r9
 801025e:	4640      	mov	r0, r8
 8010260:	f7f0 f884 	bl	800036c <__adddf3>
 8010264:	4b19      	ldr	r3, [pc, #100]	; (80102cc <__ieee754_pow+0x3fc>)
 8010266:	4299      	cmp	r1, r3
 8010268:	ec45 4b19 	vmov	d9, r4, r5
 801026c:	4606      	mov	r6, r0
 801026e:	460f      	mov	r7, r1
 8010270:	468b      	mov	fp, r1
 8010272:	f340 82f0 	ble.w	8010856 <__ieee754_pow+0x986>
 8010276:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801027a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801027e:	4303      	orrs	r3, r0
 8010280:	f000 81e4 	beq.w	801064c <__ieee754_pow+0x77c>
 8010284:	ec51 0b18 	vmov	r0, r1, d8
 8010288:	2200      	movs	r2, #0
 801028a:	2300      	movs	r3, #0
 801028c:	f7f0 fc96 	bl	8000bbc <__aeabi_dcmplt>
 8010290:	3800      	subs	r0, #0
 8010292:	bf18      	it	ne
 8010294:	2001      	movne	r0, #1
 8010296:	e72b      	b.n	80100f0 <__ieee754_pow+0x220>
 8010298:	60000000 	.word	0x60000000
 801029c:	3ff71547 	.word	0x3ff71547
 80102a0:	f85ddf44 	.word	0xf85ddf44
 80102a4:	3e54ae0b 	.word	0x3e54ae0b
 80102a8:	55555555 	.word	0x55555555
 80102ac:	3fd55555 	.word	0x3fd55555
 80102b0:	652b82fe 	.word	0x652b82fe
 80102b4:	3ff71547 	.word	0x3ff71547
 80102b8:	00000000 	.word	0x00000000
 80102bc:	bff00000 	.word	0xbff00000
 80102c0:	3ff00000 	.word	0x3ff00000
 80102c4:	3fd00000 	.word	0x3fd00000
 80102c8:	3fe00000 	.word	0x3fe00000
 80102cc:	408fffff 	.word	0x408fffff
 80102d0:	4bd5      	ldr	r3, [pc, #852]	; (8010628 <__ieee754_pow+0x758>)
 80102d2:	402b      	ands	r3, r5
 80102d4:	2200      	movs	r2, #0
 80102d6:	b92b      	cbnz	r3, 80102e4 <__ieee754_pow+0x414>
 80102d8:	4bd4      	ldr	r3, [pc, #848]	; (801062c <__ieee754_pow+0x75c>)
 80102da:	f7f0 f9fd 	bl	80006d8 <__aeabi_dmul>
 80102de:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80102e2:	460c      	mov	r4, r1
 80102e4:	1523      	asrs	r3, r4, #20
 80102e6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80102ea:	4413      	add	r3, r2
 80102ec:	9305      	str	r3, [sp, #20]
 80102ee:	4bd0      	ldr	r3, [pc, #832]	; (8010630 <__ieee754_pow+0x760>)
 80102f0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80102f4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80102f8:	429c      	cmp	r4, r3
 80102fa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80102fe:	dd08      	ble.n	8010312 <__ieee754_pow+0x442>
 8010300:	4bcc      	ldr	r3, [pc, #816]	; (8010634 <__ieee754_pow+0x764>)
 8010302:	429c      	cmp	r4, r3
 8010304:	f340 8162 	ble.w	80105cc <__ieee754_pow+0x6fc>
 8010308:	9b05      	ldr	r3, [sp, #20]
 801030a:	3301      	adds	r3, #1
 801030c:	9305      	str	r3, [sp, #20]
 801030e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010312:	2400      	movs	r4, #0
 8010314:	00e3      	lsls	r3, r4, #3
 8010316:	9307      	str	r3, [sp, #28]
 8010318:	4bc7      	ldr	r3, [pc, #796]	; (8010638 <__ieee754_pow+0x768>)
 801031a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801031e:	ed93 7b00 	vldr	d7, [r3]
 8010322:	4629      	mov	r1, r5
 8010324:	ec53 2b17 	vmov	r2, r3, d7
 8010328:	eeb0 9a47 	vmov.f32	s18, s14
 801032c:	eef0 9a67 	vmov.f32	s19, s15
 8010330:	4682      	mov	sl, r0
 8010332:	f7f0 f819 	bl	8000368 <__aeabi_dsub>
 8010336:	4652      	mov	r2, sl
 8010338:	4606      	mov	r6, r0
 801033a:	460f      	mov	r7, r1
 801033c:	462b      	mov	r3, r5
 801033e:	ec51 0b19 	vmov	r0, r1, d9
 8010342:	f7f0 f813 	bl	800036c <__adddf3>
 8010346:	4602      	mov	r2, r0
 8010348:	460b      	mov	r3, r1
 801034a:	2000      	movs	r0, #0
 801034c:	49bb      	ldr	r1, [pc, #748]	; (801063c <__ieee754_pow+0x76c>)
 801034e:	f7f0 faed 	bl	800092c <__aeabi_ddiv>
 8010352:	ec41 0b1a 	vmov	d10, r0, r1
 8010356:	4602      	mov	r2, r0
 8010358:	460b      	mov	r3, r1
 801035a:	4630      	mov	r0, r6
 801035c:	4639      	mov	r1, r7
 801035e:	f7f0 f9bb 	bl	80006d8 <__aeabi_dmul>
 8010362:	2300      	movs	r3, #0
 8010364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010368:	9302      	str	r3, [sp, #8]
 801036a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801036e:	46ab      	mov	fp, r5
 8010370:	106d      	asrs	r5, r5, #1
 8010372:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010376:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801037a:	ec41 0b18 	vmov	d8, r0, r1
 801037e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8010382:	2200      	movs	r2, #0
 8010384:	4640      	mov	r0, r8
 8010386:	4649      	mov	r1, r9
 8010388:	4614      	mov	r4, r2
 801038a:	461d      	mov	r5, r3
 801038c:	f7f0 f9a4 	bl	80006d8 <__aeabi_dmul>
 8010390:	4602      	mov	r2, r0
 8010392:	460b      	mov	r3, r1
 8010394:	4630      	mov	r0, r6
 8010396:	4639      	mov	r1, r7
 8010398:	f7ef ffe6 	bl	8000368 <__aeabi_dsub>
 801039c:	ec53 2b19 	vmov	r2, r3, d9
 80103a0:	4606      	mov	r6, r0
 80103a2:	460f      	mov	r7, r1
 80103a4:	4620      	mov	r0, r4
 80103a6:	4629      	mov	r1, r5
 80103a8:	f7ef ffde 	bl	8000368 <__aeabi_dsub>
 80103ac:	4602      	mov	r2, r0
 80103ae:	460b      	mov	r3, r1
 80103b0:	4650      	mov	r0, sl
 80103b2:	4659      	mov	r1, fp
 80103b4:	f7ef ffd8 	bl	8000368 <__aeabi_dsub>
 80103b8:	4642      	mov	r2, r8
 80103ba:	464b      	mov	r3, r9
 80103bc:	f7f0 f98c 	bl	80006d8 <__aeabi_dmul>
 80103c0:	4602      	mov	r2, r0
 80103c2:	460b      	mov	r3, r1
 80103c4:	4630      	mov	r0, r6
 80103c6:	4639      	mov	r1, r7
 80103c8:	f7ef ffce 	bl	8000368 <__aeabi_dsub>
 80103cc:	ec53 2b1a 	vmov	r2, r3, d10
 80103d0:	f7f0 f982 	bl	80006d8 <__aeabi_dmul>
 80103d4:	ec53 2b18 	vmov	r2, r3, d8
 80103d8:	ec41 0b19 	vmov	d9, r0, r1
 80103dc:	ec51 0b18 	vmov	r0, r1, d8
 80103e0:	f7f0 f97a 	bl	80006d8 <__aeabi_dmul>
 80103e4:	a37c      	add	r3, pc, #496	; (adr r3, 80105d8 <__ieee754_pow+0x708>)
 80103e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ea:	4604      	mov	r4, r0
 80103ec:	460d      	mov	r5, r1
 80103ee:	f7f0 f973 	bl	80006d8 <__aeabi_dmul>
 80103f2:	a37b      	add	r3, pc, #492	; (adr r3, 80105e0 <__ieee754_pow+0x710>)
 80103f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f8:	f7ef ffb8 	bl	800036c <__adddf3>
 80103fc:	4622      	mov	r2, r4
 80103fe:	462b      	mov	r3, r5
 8010400:	f7f0 f96a 	bl	80006d8 <__aeabi_dmul>
 8010404:	a378      	add	r3, pc, #480	; (adr r3, 80105e8 <__ieee754_pow+0x718>)
 8010406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801040a:	f7ef ffaf 	bl	800036c <__adddf3>
 801040e:	4622      	mov	r2, r4
 8010410:	462b      	mov	r3, r5
 8010412:	f7f0 f961 	bl	80006d8 <__aeabi_dmul>
 8010416:	a376      	add	r3, pc, #472	; (adr r3, 80105f0 <__ieee754_pow+0x720>)
 8010418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801041c:	f7ef ffa6 	bl	800036c <__adddf3>
 8010420:	4622      	mov	r2, r4
 8010422:	462b      	mov	r3, r5
 8010424:	f7f0 f958 	bl	80006d8 <__aeabi_dmul>
 8010428:	a373      	add	r3, pc, #460	; (adr r3, 80105f8 <__ieee754_pow+0x728>)
 801042a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801042e:	f7ef ff9d 	bl	800036c <__adddf3>
 8010432:	4622      	mov	r2, r4
 8010434:	462b      	mov	r3, r5
 8010436:	f7f0 f94f 	bl	80006d8 <__aeabi_dmul>
 801043a:	a371      	add	r3, pc, #452	; (adr r3, 8010600 <__ieee754_pow+0x730>)
 801043c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010440:	f7ef ff94 	bl	800036c <__adddf3>
 8010444:	4622      	mov	r2, r4
 8010446:	4606      	mov	r6, r0
 8010448:	460f      	mov	r7, r1
 801044a:	462b      	mov	r3, r5
 801044c:	4620      	mov	r0, r4
 801044e:	4629      	mov	r1, r5
 8010450:	f7f0 f942 	bl	80006d8 <__aeabi_dmul>
 8010454:	4602      	mov	r2, r0
 8010456:	460b      	mov	r3, r1
 8010458:	4630      	mov	r0, r6
 801045a:	4639      	mov	r1, r7
 801045c:	f7f0 f93c 	bl	80006d8 <__aeabi_dmul>
 8010460:	4642      	mov	r2, r8
 8010462:	4604      	mov	r4, r0
 8010464:	460d      	mov	r5, r1
 8010466:	464b      	mov	r3, r9
 8010468:	ec51 0b18 	vmov	r0, r1, d8
 801046c:	f7ef ff7e 	bl	800036c <__adddf3>
 8010470:	ec53 2b19 	vmov	r2, r3, d9
 8010474:	f7f0 f930 	bl	80006d8 <__aeabi_dmul>
 8010478:	4622      	mov	r2, r4
 801047a:	462b      	mov	r3, r5
 801047c:	f7ef ff76 	bl	800036c <__adddf3>
 8010480:	4642      	mov	r2, r8
 8010482:	4682      	mov	sl, r0
 8010484:	468b      	mov	fp, r1
 8010486:	464b      	mov	r3, r9
 8010488:	4640      	mov	r0, r8
 801048a:	4649      	mov	r1, r9
 801048c:	f7f0 f924 	bl	80006d8 <__aeabi_dmul>
 8010490:	4b6b      	ldr	r3, [pc, #428]	; (8010640 <__ieee754_pow+0x770>)
 8010492:	2200      	movs	r2, #0
 8010494:	4606      	mov	r6, r0
 8010496:	460f      	mov	r7, r1
 8010498:	f7ef ff68 	bl	800036c <__adddf3>
 801049c:	4652      	mov	r2, sl
 801049e:	465b      	mov	r3, fp
 80104a0:	f7ef ff64 	bl	800036c <__adddf3>
 80104a4:	2000      	movs	r0, #0
 80104a6:	4604      	mov	r4, r0
 80104a8:	460d      	mov	r5, r1
 80104aa:	4602      	mov	r2, r0
 80104ac:	460b      	mov	r3, r1
 80104ae:	4640      	mov	r0, r8
 80104b0:	4649      	mov	r1, r9
 80104b2:	f7f0 f911 	bl	80006d8 <__aeabi_dmul>
 80104b6:	4b62      	ldr	r3, [pc, #392]	; (8010640 <__ieee754_pow+0x770>)
 80104b8:	4680      	mov	r8, r0
 80104ba:	4689      	mov	r9, r1
 80104bc:	2200      	movs	r2, #0
 80104be:	4620      	mov	r0, r4
 80104c0:	4629      	mov	r1, r5
 80104c2:	f7ef ff51 	bl	8000368 <__aeabi_dsub>
 80104c6:	4632      	mov	r2, r6
 80104c8:	463b      	mov	r3, r7
 80104ca:	f7ef ff4d 	bl	8000368 <__aeabi_dsub>
 80104ce:	4602      	mov	r2, r0
 80104d0:	460b      	mov	r3, r1
 80104d2:	4650      	mov	r0, sl
 80104d4:	4659      	mov	r1, fp
 80104d6:	f7ef ff47 	bl	8000368 <__aeabi_dsub>
 80104da:	ec53 2b18 	vmov	r2, r3, d8
 80104de:	f7f0 f8fb 	bl	80006d8 <__aeabi_dmul>
 80104e2:	4622      	mov	r2, r4
 80104e4:	4606      	mov	r6, r0
 80104e6:	460f      	mov	r7, r1
 80104e8:	462b      	mov	r3, r5
 80104ea:	ec51 0b19 	vmov	r0, r1, d9
 80104ee:	f7f0 f8f3 	bl	80006d8 <__aeabi_dmul>
 80104f2:	4602      	mov	r2, r0
 80104f4:	460b      	mov	r3, r1
 80104f6:	4630      	mov	r0, r6
 80104f8:	4639      	mov	r1, r7
 80104fa:	f7ef ff37 	bl	800036c <__adddf3>
 80104fe:	4606      	mov	r6, r0
 8010500:	460f      	mov	r7, r1
 8010502:	4602      	mov	r2, r0
 8010504:	460b      	mov	r3, r1
 8010506:	4640      	mov	r0, r8
 8010508:	4649      	mov	r1, r9
 801050a:	f7ef ff2f 	bl	800036c <__adddf3>
 801050e:	a33e      	add	r3, pc, #248	; (adr r3, 8010608 <__ieee754_pow+0x738>)
 8010510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010514:	2000      	movs	r0, #0
 8010516:	4604      	mov	r4, r0
 8010518:	460d      	mov	r5, r1
 801051a:	f7f0 f8dd 	bl	80006d8 <__aeabi_dmul>
 801051e:	4642      	mov	r2, r8
 8010520:	ec41 0b18 	vmov	d8, r0, r1
 8010524:	464b      	mov	r3, r9
 8010526:	4620      	mov	r0, r4
 8010528:	4629      	mov	r1, r5
 801052a:	f7ef ff1d 	bl	8000368 <__aeabi_dsub>
 801052e:	4602      	mov	r2, r0
 8010530:	460b      	mov	r3, r1
 8010532:	4630      	mov	r0, r6
 8010534:	4639      	mov	r1, r7
 8010536:	f7ef ff17 	bl	8000368 <__aeabi_dsub>
 801053a:	a335      	add	r3, pc, #212	; (adr r3, 8010610 <__ieee754_pow+0x740>)
 801053c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010540:	f7f0 f8ca 	bl	80006d8 <__aeabi_dmul>
 8010544:	a334      	add	r3, pc, #208	; (adr r3, 8010618 <__ieee754_pow+0x748>)
 8010546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801054a:	4606      	mov	r6, r0
 801054c:	460f      	mov	r7, r1
 801054e:	4620      	mov	r0, r4
 8010550:	4629      	mov	r1, r5
 8010552:	f7f0 f8c1 	bl	80006d8 <__aeabi_dmul>
 8010556:	4602      	mov	r2, r0
 8010558:	460b      	mov	r3, r1
 801055a:	4630      	mov	r0, r6
 801055c:	4639      	mov	r1, r7
 801055e:	f7ef ff05 	bl	800036c <__adddf3>
 8010562:	9a07      	ldr	r2, [sp, #28]
 8010564:	4b37      	ldr	r3, [pc, #220]	; (8010644 <__ieee754_pow+0x774>)
 8010566:	4413      	add	r3, r2
 8010568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801056c:	f7ef fefe 	bl	800036c <__adddf3>
 8010570:	4682      	mov	sl, r0
 8010572:	9805      	ldr	r0, [sp, #20]
 8010574:	468b      	mov	fp, r1
 8010576:	f7f0 f845 	bl	8000604 <__aeabi_i2d>
 801057a:	9a07      	ldr	r2, [sp, #28]
 801057c:	4b32      	ldr	r3, [pc, #200]	; (8010648 <__ieee754_pow+0x778>)
 801057e:	4413      	add	r3, r2
 8010580:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010584:	4606      	mov	r6, r0
 8010586:	460f      	mov	r7, r1
 8010588:	4652      	mov	r2, sl
 801058a:	465b      	mov	r3, fp
 801058c:	ec51 0b18 	vmov	r0, r1, d8
 8010590:	f7ef feec 	bl	800036c <__adddf3>
 8010594:	4642      	mov	r2, r8
 8010596:	464b      	mov	r3, r9
 8010598:	f7ef fee8 	bl	800036c <__adddf3>
 801059c:	4632      	mov	r2, r6
 801059e:	463b      	mov	r3, r7
 80105a0:	f7ef fee4 	bl	800036c <__adddf3>
 80105a4:	2000      	movs	r0, #0
 80105a6:	4632      	mov	r2, r6
 80105a8:	463b      	mov	r3, r7
 80105aa:	4604      	mov	r4, r0
 80105ac:	460d      	mov	r5, r1
 80105ae:	f7ef fedb 	bl	8000368 <__aeabi_dsub>
 80105b2:	4642      	mov	r2, r8
 80105b4:	464b      	mov	r3, r9
 80105b6:	f7ef fed7 	bl	8000368 <__aeabi_dsub>
 80105ba:	ec53 2b18 	vmov	r2, r3, d8
 80105be:	f7ef fed3 	bl	8000368 <__aeabi_dsub>
 80105c2:	4602      	mov	r2, r0
 80105c4:	460b      	mov	r3, r1
 80105c6:	4650      	mov	r0, sl
 80105c8:	4659      	mov	r1, fp
 80105ca:	e610      	b.n	80101ee <__ieee754_pow+0x31e>
 80105cc:	2401      	movs	r4, #1
 80105ce:	e6a1      	b.n	8010314 <__ieee754_pow+0x444>
 80105d0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010620 <__ieee754_pow+0x750>
 80105d4:	e617      	b.n	8010206 <__ieee754_pow+0x336>
 80105d6:	bf00      	nop
 80105d8:	4a454eef 	.word	0x4a454eef
 80105dc:	3fca7e28 	.word	0x3fca7e28
 80105e0:	93c9db65 	.word	0x93c9db65
 80105e4:	3fcd864a 	.word	0x3fcd864a
 80105e8:	a91d4101 	.word	0xa91d4101
 80105ec:	3fd17460 	.word	0x3fd17460
 80105f0:	518f264d 	.word	0x518f264d
 80105f4:	3fd55555 	.word	0x3fd55555
 80105f8:	db6fabff 	.word	0xdb6fabff
 80105fc:	3fdb6db6 	.word	0x3fdb6db6
 8010600:	33333303 	.word	0x33333303
 8010604:	3fe33333 	.word	0x3fe33333
 8010608:	e0000000 	.word	0xe0000000
 801060c:	3feec709 	.word	0x3feec709
 8010610:	dc3a03fd 	.word	0xdc3a03fd
 8010614:	3feec709 	.word	0x3feec709
 8010618:	145b01f5 	.word	0x145b01f5
 801061c:	be3e2fe0 	.word	0xbe3e2fe0
 8010620:	00000000 	.word	0x00000000
 8010624:	3ff00000 	.word	0x3ff00000
 8010628:	7ff00000 	.word	0x7ff00000
 801062c:	43400000 	.word	0x43400000
 8010630:	0003988e 	.word	0x0003988e
 8010634:	000bb679 	.word	0x000bb679
 8010638:	08011030 	.word	0x08011030
 801063c:	3ff00000 	.word	0x3ff00000
 8010640:	40080000 	.word	0x40080000
 8010644:	08011050 	.word	0x08011050
 8010648:	08011040 	.word	0x08011040
 801064c:	a3b3      	add	r3, pc, #716	; (adr r3, 801091c <__ieee754_pow+0xa4c>)
 801064e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010652:	4640      	mov	r0, r8
 8010654:	4649      	mov	r1, r9
 8010656:	f7ef fe89 	bl	800036c <__adddf3>
 801065a:	4622      	mov	r2, r4
 801065c:	ec41 0b1a 	vmov	d10, r0, r1
 8010660:	462b      	mov	r3, r5
 8010662:	4630      	mov	r0, r6
 8010664:	4639      	mov	r1, r7
 8010666:	f7ef fe7f 	bl	8000368 <__aeabi_dsub>
 801066a:	4602      	mov	r2, r0
 801066c:	460b      	mov	r3, r1
 801066e:	ec51 0b1a 	vmov	r0, r1, d10
 8010672:	f7f0 fac1 	bl	8000bf8 <__aeabi_dcmpgt>
 8010676:	2800      	cmp	r0, #0
 8010678:	f47f ae04 	bne.w	8010284 <__ieee754_pow+0x3b4>
 801067c:	4aa2      	ldr	r2, [pc, #648]	; (8010908 <__ieee754_pow+0xa38>)
 801067e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010682:	4293      	cmp	r3, r2
 8010684:	f340 8107 	ble.w	8010896 <__ieee754_pow+0x9c6>
 8010688:	151b      	asrs	r3, r3, #20
 801068a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801068e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010692:	fa4a fa03 	asr.w	sl, sl, r3
 8010696:	44da      	add	sl, fp
 8010698:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801069c:	489b      	ldr	r0, [pc, #620]	; (801090c <__ieee754_pow+0xa3c>)
 801069e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80106a2:	4108      	asrs	r0, r1
 80106a4:	ea00 030a 	and.w	r3, r0, sl
 80106a8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80106ac:	f1c1 0114 	rsb	r1, r1, #20
 80106b0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80106b4:	fa4a fa01 	asr.w	sl, sl, r1
 80106b8:	f1bb 0f00 	cmp.w	fp, #0
 80106bc:	f04f 0200 	mov.w	r2, #0
 80106c0:	4620      	mov	r0, r4
 80106c2:	4629      	mov	r1, r5
 80106c4:	bfb8      	it	lt
 80106c6:	f1ca 0a00 	rsblt	sl, sl, #0
 80106ca:	f7ef fe4d 	bl	8000368 <__aeabi_dsub>
 80106ce:	ec41 0b19 	vmov	d9, r0, r1
 80106d2:	4642      	mov	r2, r8
 80106d4:	464b      	mov	r3, r9
 80106d6:	ec51 0b19 	vmov	r0, r1, d9
 80106da:	f7ef fe47 	bl	800036c <__adddf3>
 80106de:	a37a      	add	r3, pc, #488	; (adr r3, 80108c8 <__ieee754_pow+0x9f8>)
 80106e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e4:	2000      	movs	r0, #0
 80106e6:	4604      	mov	r4, r0
 80106e8:	460d      	mov	r5, r1
 80106ea:	f7ef fff5 	bl	80006d8 <__aeabi_dmul>
 80106ee:	ec53 2b19 	vmov	r2, r3, d9
 80106f2:	4606      	mov	r6, r0
 80106f4:	460f      	mov	r7, r1
 80106f6:	4620      	mov	r0, r4
 80106f8:	4629      	mov	r1, r5
 80106fa:	f7ef fe35 	bl	8000368 <__aeabi_dsub>
 80106fe:	4602      	mov	r2, r0
 8010700:	460b      	mov	r3, r1
 8010702:	4640      	mov	r0, r8
 8010704:	4649      	mov	r1, r9
 8010706:	f7ef fe2f 	bl	8000368 <__aeabi_dsub>
 801070a:	a371      	add	r3, pc, #452	; (adr r3, 80108d0 <__ieee754_pow+0xa00>)
 801070c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010710:	f7ef ffe2 	bl	80006d8 <__aeabi_dmul>
 8010714:	a370      	add	r3, pc, #448	; (adr r3, 80108d8 <__ieee754_pow+0xa08>)
 8010716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801071a:	4680      	mov	r8, r0
 801071c:	4689      	mov	r9, r1
 801071e:	4620      	mov	r0, r4
 8010720:	4629      	mov	r1, r5
 8010722:	f7ef ffd9 	bl	80006d8 <__aeabi_dmul>
 8010726:	4602      	mov	r2, r0
 8010728:	460b      	mov	r3, r1
 801072a:	4640      	mov	r0, r8
 801072c:	4649      	mov	r1, r9
 801072e:	f7ef fe1d 	bl	800036c <__adddf3>
 8010732:	4604      	mov	r4, r0
 8010734:	460d      	mov	r5, r1
 8010736:	4602      	mov	r2, r0
 8010738:	460b      	mov	r3, r1
 801073a:	4630      	mov	r0, r6
 801073c:	4639      	mov	r1, r7
 801073e:	f7ef fe15 	bl	800036c <__adddf3>
 8010742:	4632      	mov	r2, r6
 8010744:	463b      	mov	r3, r7
 8010746:	4680      	mov	r8, r0
 8010748:	4689      	mov	r9, r1
 801074a:	f7ef fe0d 	bl	8000368 <__aeabi_dsub>
 801074e:	4602      	mov	r2, r0
 8010750:	460b      	mov	r3, r1
 8010752:	4620      	mov	r0, r4
 8010754:	4629      	mov	r1, r5
 8010756:	f7ef fe07 	bl	8000368 <__aeabi_dsub>
 801075a:	4642      	mov	r2, r8
 801075c:	4606      	mov	r6, r0
 801075e:	460f      	mov	r7, r1
 8010760:	464b      	mov	r3, r9
 8010762:	4640      	mov	r0, r8
 8010764:	4649      	mov	r1, r9
 8010766:	f7ef ffb7 	bl	80006d8 <__aeabi_dmul>
 801076a:	a35d      	add	r3, pc, #372	; (adr r3, 80108e0 <__ieee754_pow+0xa10>)
 801076c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010770:	4604      	mov	r4, r0
 8010772:	460d      	mov	r5, r1
 8010774:	f7ef ffb0 	bl	80006d8 <__aeabi_dmul>
 8010778:	a35b      	add	r3, pc, #364	; (adr r3, 80108e8 <__ieee754_pow+0xa18>)
 801077a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801077e:	f7ef fdf3 	bl	8000368 <__aeabi_dsub>
 8010782:	4622      	mov	r2, r4
 8010784:	462b      	mov	r3, r5
 8010786:	f7ef ffa7 	bl	80006d8 <__aeabi_dmul>
 801078a:	a359      	add	r3, pc, #356	; (adr r3, 80108f0 <__ieee754_pow+0xa20>)
 801078c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010790:	f7ef fdec 	bl	800036c <__adddf3>
 8010794:	4622      	mov	r2, r4
 8010796:	462b      	mov	r3, r5
 8010798:	f7ef ff9e 	bl	80006d8 <__aeabi_dmul>
 801079c:	a356      	add	r3, pc, #344	; (adr r3, 80108f8 <__ieee754_pow+0xa28>)
 801079e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107a2:	f7ef fde1 	bl	8000368 <__aeabi_dsub>
 80107a6:	4622      	mov	r2, r4
 80107a8:	462b      	mov	r3, r5
 80107aa:	f7ef ff95 	bl	80006d8 <__aeabi_dmul>
 80107ae:	a354      	add	r3, pc, #336	; (adr r3, 8010900 <__ieee754_pow+0xa30>)
 80107b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107b4:	f7ef fdda 	bl	800036c <__adddf3>
 80107b8:	4622      	mov	r2, r4
 80107ba:	462b      	mov	r3, r5
 80107bc:	f7ef ff8c 	bl	80006d8 <__aeabi_dmul>
 80107c0:	4602      	mov	r2, r0
 80107c2:	460b      	mov	r3, r1
 80107c4:	4640      	mov	r0, r8
 80107c6:	4649      	mov	r1, r9
 80107c8:	f7ef fdce 	bl	8000368 <__aeabi_dsub>
 80107cc:	4604      	mov	r4, r0
 80107ce:	460d      	mov	r5, r1
 80107d0:	4602      	mov	r2, r0
 80107d2:	460b      	mov	r3, r1
 80107d4:	4640      	mov	r0, r8
 80107d6:	4649      	mov	r1, r9
 80107d8:	f7ef ff7e 	bl	80006d8 <__aeabi_dmul>
 80107dc:	2200      	movs	r2, #0
 80107de:	ec41 0b19 	vmov	d9, r0, r1
 80107e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80107e6:	4620      	mov	r0, r4
 80107e8:	4629      	mov	r1, r5
 80107ea:	f7ef fdbd 	bl	8000368 <__aeabi_dsub>
 80107ee:	4602      	mov	r2, r0
 80107f0:	460b      	mov	r3, r1
 80107f2:	ec51 0b19 	vmov	r0, r1, d9
 80107f6:	f7f0 f899 	bl	800092c <__aeabi_ddiv>
 80107fa:	4632      	mov	r2, r6
 80107fc:	4604      	mov	r4, r0
 80107fe:	460d      	mov	r5, r1
 8010800:	463b      	mov	r3, r7
 8010802:	4640      	mov	r0, r8
 8010804:	4649      	mov	r1, r9
 8010806:	f7ef ff67 	bl	80006d8 <__aeabi_dmul>
 801080a:	4632      	mov	r2, r6
 801080c:	463b      	mov	r3, r7
 801080e:	f7ef fdad 	bl	800036c <__adddf3>
 8010812:	4602      	mov	r2, r0
 8010814:	460b      	mov	r3, r1
 8010816:	4620      	mov	r0, r4
 8010818:	4629      	mov	r1, r5
 801081a:	f7ef fda5 	bl	8000368 <__aeabi_dsub>
 801081e:	4642      	mov	r2, r8
 8010820:	464b      	mov	r3, r9
 8010822:	f7ef fda1 	bl	8000368 <__aeabi_dsub>
 8010826:	460b      	mov	r3, r1
 8010828:	4602      	mov	r2, r0
 801082a:	4939      	ldr	r1, [pc, #228]	; (8010910 <__ieee754_pow+0xa40>)
 801082c:	2000      	movs	r0, #0
 801082e:	f7ef fd9b 	bl	8000368 <__aeabi_dsub>
 8010832:	ec41 0b10 	vmov	d0, r0, r1
 8010836:	ee10 3a90 	vmov	r3, s1
 801083a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801083e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010842:	da2b      	bge.n	801089c <__ieee754_pow+0x9cc>
 8010844:	4650      	mov	r0, sl
 8010846:	f000 f877 	bl	8010938 <scalbn>
 801084a:	ec51 0b10 	vmov	r0, r1, d0
 801084e:	ec53 2b18 	vmov	r2, r3, d8
 8010852:	f7ff bbee 	b.w	8010032 <__ieee754_pow+0x162>
 8010856:	4b2f      	ldr	r3, [pc, #188]	; (8010914 <__ieee754_pow+0xa44>)
 8010858:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801085c:	429e      	cmp	r6, r3
 801085e:	f77f af0d 	ble.w	801067c <__ieee754_pow+0x7ac>
 8010862:	4b2d      	ldr	r3, [pc, #180]	; (8010918 <__ieee754_pow+0xa48>)
 8010864:	440b      	add	r3, r1
 8010866:	4303      	orrs	r3, r0
 8010868:	d009      	beq.n	801087e <__ieee754_pow+0x9ae>
 801086a:	ec51 0b18 	vmov	r0, r1, d8
 801086e:	2200      	movs	r2, #0
 8010870:	2300      	movs	r3, #0
 8010872:	f7f0 f9a3 	bl	8000bbc <__aeabi_dcmplt>
 8010876:	3800      	subs	r0, #0
 8010878:	bf18      	it	ne
 801087a:	2001      	movne	r0, #1
 801087c:	e448      	b.n	8010110 <__ieee754_pow+0x240>
 801087e:	4622      	mov	r2, r4
 8010880:	462b      	mov	r3, r5
 8010882:	f7ef fd71 	bl	8000368 <__aeabi_dsub>
 8010886:	4642      	mov	r2, r8
 8010888:	464b      	mov	r3, r9
 801088a:	f7f0 f9ab 	bl	8000be4 <__aeabi_dcmpge>
 801088e:	2800      	cmp	r0, #0
 8010890:	f43f aef4 	beq.w	801067c <__ieee754_pow+0x7ac>
 8010894:	e7e9      	b.n	801086a <__ieee754_pow+0x99a>
 8010896:	f04f 0a00 	mov.w	sl, #0
 801089a:	e71a      	b.n	80106d2 <__ieee754_pow+0x802>
 801089c:	ec51 0b10 	vmov	r0, r1, d0
 80108a0:	4619      	mov	r1, r3
 80108a2:	e7d4      	b.n	801084e <__ieee754_pow+0x97e>
 80108a4:	491a      	ldr	r1, [pc, #104]	; (8010910 <__ieee754_pow+0xa40>)
 80108a6:	2000      	movs	r0, #0
 80108a8:	f7ff bb31 	b.w	800ff0e <__ieee754_pow+0x3e>
 80108ac:	2000      	movs	r0, #0
 80108ae:	2100      	movs	r1, #0
 80108b0:	f7ff bb2d 	b.w	800ff0e <__ieee754_pow+0x3e>
 80108b4:	4630      	mov	r0, r6
 80108b6:	4639      	mov	r1, r7
 80108b8:	f7ff bb29 	b.w	800ff0e <__ieee754_pow+0x3e>
 80108bc:	9204      	str	r2, [sp, #16]
 80108be:	f7ff bb7b 	b.w	800ffb8 <__ieee754_pow+0xe8>
 80108c2:	2300      	movs	r3, #0
 80108c4:	f7ff bb65 	b.w	800ff92 <__ieee754_pow+0xc2>
 80108c8:	00000000 	.word	0x00000000
 80108cc:	3fe62e43 	.word	0x3fe62e43
 80108d0:	fefa39ef 	.word	0xfefa39ef
 80108d4:	3fe62e42 	.word	0x3fe62e42
 80108d8:	0ca86c39 	.word	0x0ca86c39
 80108dc:	be205c61 	.word	0xbe205c61
 80108e0:	72bea4d0 	.word	0x72bea4d0
 80108e4:	3e663769 	.word	0x3e663769
 80108e8:	c5d26bf1 	.word	0xc5d26bf1
 80108ec:	3ebbbd41 	.word	0x3ebbbd41
 80108f0:	af25de2c 	.word	0xaf25de2c
 80108f4:	3f11566a 	.word	0x3f11566a
 80108f8:	16bebd93 	.word	0x16bebd93
 80108fc:	3f66c16c 	.word	0x3f66c16c
 8010900:	5555553e 	.word	0x5555553e
 8010904:	3fc55555 	.word	0x3fc55555
 8010908:	3fe00000 	.word	0x3fe00000
 801090c:	fff00000 	.word	0xfff00000
 8010910:	3ff00000 	.word	0x3ff00000
 8010914:	4090cbff 	.word	0x4090cbff
 8010918:	3f6f3400 	.word	0x3f6f3400
 801091c:	652b82fe 	.word	0x652b82fe
 8010920:	3c971547 	.word	0x3c971547

08010924 <fabs>:
 8010924:	ec51 0b10 	vmov	r0, r1, d0
 8010928:	ee10 2a10 	vmov	r2, s0
 801092c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010930:	ec43 2b10 	vmov	d0, r2, r3
 8010934:	4770      	bx	lr
	...

08010938 <scalbn>:
 8010938:	b570      	push	{r4, r5, r6, lr}
 801093a:	ec55 4b10 	vmov	r4, r5, d0
 801093e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010942:	4606      	mov	r6, r0
 8010944:	462b      	mov	r3, r5
 8010946:	b999      	cbnz	r1, 8010970 <scalbn+0x38>
 8010948:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801094c:	4323      	orrs	r3, r4
 801094e:	d03f      	beq.n	80109d0 <scalbn+0x98>
 8010950:	4b35      	ldr	r3, [pc, #212]	; (8010a28 <scalbn+0xf0>)
 8010952:	4629      	mov	r1, r5
 8010954:	ee10 0a10 	vmov	r0, s0
 8010958:	2200      	movs	r2, #0
 801095a:	f7ef febd 	bl	80006d8 <__aeabi_dmul>
 801095e:	4b33      	ldr	r3, [pc, #204]	; (8010a2c <scalbn+0xf4>)
 8010960:	429e      	cmp	r6, r3
 8010962:	4604      	mov	r4, r0
 8010964:	460d      	mov	r5, r1
 8010966:	da10      	bge.n	801098a <scalbn+0x52>
 8010968:	a327      	add	r3, pc, #156	; (adr r3, 8010a08 <scalbn+0xd0>)
 801096a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801096e:	e01f      	b.n	80109b0 <scalbn+0x78>
 8010970:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010974:	4291      	cmp	r1, r2
 8010976:	d10c      	bne.n	8010992 <scalbn+0x5a>
 8010978:	ee10 2a10 	vmov	r2, s0
 801097c:	4620      	mov	r0, r4
 801097e:	4629      	mov	r1, r5
 8010980:	f7ef fcf4 	bl	800036c <__adddf3>
 8010984:	4604      	mov	r4, r0
 8010986:	460d      	mov	r5, r1
 8010988:	e022      	b.n	80109d0 <scalbn+0x98>
 801098a:	460b      	mov	r3, r1
 801098c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010990:	3936      	subs	r1, #54	; 0x36
 8010992:	f24c 3250 	movw	r2, #50000	; 0xc350
 8010996:	4296      	cmp	r6, r2
 8010998:	dd0d      	ble.n	80109b6 <scalbn+0x7e>
 801099a:	2d00      	cmp	r5, #0
 801099c:	a11c      	add	r1, pc, #112	; (adr r1, 8010a10 <scalbn+0xd8>)
 801099e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109a2:	da02      	bge.n	80109aa <scalbn+0x72>
 80109a4:	a11c      	add	r1, pc, #112	; (adr r1, 8010a18 <scalbn+0xe0>)
 80109a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109aa:	a319      	add	r3, pc, #100	; (adr r3, 8010a10 <scalbn+0xd8>)
 80109ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109b0:	f7ef fe92 	bl	80006d8 <__aeabi_dmul>
 80109b4:	e7e6      	b.n	8010984 <scalbn+0x4c>
 80109b6:	1872      	adds	r2, r6, r1
 80109b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80109bc:	428a      	cmp	r2, r1
 80109be:	dcec      	bgt.n	801099a <scalbn+0x62>
 80109c0:	2a00      	cmp	r2, #0
 80109c2:	dd08      	ble.n	80109d6 <scalbn+0x9e>
 80109c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80109c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80109cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80109d0:	ec45 4b10 	vmov	d0, r4, r5
 80109d4:	bd70      	pop	{r4, r5, r6, pc}
 80109d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80109da:	da08      	bge.n	80109ee <scalbn+0xb6>
 80109dc:	2d00      	cmp	r5, #0
 80109de:	a10a      	add	r1, pc, #40	; (adr r1, 8010a08 <scalbn+0xd0>)
 80109e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109e4:	dac0      	bge.n	8010968 <scalbn+0x30>
 80109e6:	a10e      	add	r1, pc, #56	; (adr r1, 8010a20 <scalbn+0xe8>)
 80109e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109ec:	e7bc      	b.n	8010968 <scalbn+0x30>
 80109ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80109f2:	3236      	adds	r2, #54	; 0x36
 80109f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80109f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80109fc:	4620      	mov	r0, r4
 80109fe:	4b0c      	ldr	r3, [pc, #48]	; (8010a30 <scalbn+0xf8>)
 8010a00:	2200      	movs	r2, #0
 8010a02:	e7d5      	b.n	80109b0 <scalbn+0x78>
 8010a04:	f3af 8000 	nop.w
 8010a08:	c2f8f359 	.word	0xc2f8f359
 8010a0c:	01a56e1f 	.word	0x01a56e1f
 8010a10:	8800759c 	.word	0x8800759c
 8010a14:	7e37e43c 	.word	0x7e37e43c
 8010a18:	8800759c 	.word	0x8800759c
 8010a1c:	fe37e43c 	.word	0xfe37e43c
 8010a20:	c2f8f359 	.word	0xc2f8f359
 8010a24:	81a56e1f 	.word	0x81a56e1f
 8010a28:	43500000 	.word	0x43500000
 8010a2c:	ffff3cb0 	.word	0xffff3cb0
 8010a30:	3c900000 	.word	0x3c900000

08010a34 <with_errno>:
 8010a34:	b570      	push	{r4, r5, r6, lr}
 8010a36:	4604      	mov	r4, r0
 8010a38:	460d      	mov	r5, r1
 8010a3a:	4616      	mov	r6, r2
 8010a3c:	f7fc fffe 	bl	800da3c <__errno>
 8010a40:	4629      	mov	r1, r5
 8010a42:	6006      	str	r6, [r0, #0]
 8010a44:	4620      	mov	r0, r4
 8010a46:	bd70      	pop	{r4, r5, r6, pc}

08010a48 <xflow>:
 8010a48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010a4a:	4614      	mov	r4, r2
 8010a4c:	461d      	mov	r5, r3
 8010a4e:	b108      	cbz	r0, 8010a54 <xflow+0xc>
 8010a50:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010a54:	e9cd 2300 	strd	r2, r3, [sp]
 8010a58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010a5c:	4620      	mov	r0, r4
 8010a5e:	4629      	mov	r1, r5
 8010a60:	f7ef fe3a 	bl	80006d8 <__aeabi_dmul>
 8010a64:	2222      	movs	r2, #34	; 0x22
 8010a66:	b003      	add	sp, #12
 8010a68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a6c:	f7ff bfe2 	b.w	8010a34 <with_errno>

08010a70 <__math_uflow>:
 8010a70:	b508      	push	{r3, lr}
 8010a72:	2200      	movs	r2, #0
 8010a74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010a78:	f7ff ffe6 	bl	8010a48 <xflow>
 8010a7c:	ec41 0b10 	vmov	d0, r0, r1
 8010a80:	bd08      	pop	{r3, pc}

08010a82 <__math_oflow>:
 8010a82:	b508      	push	{r3, lr}
 8010a84:	2200      	movs	r2, #0
 8010a86:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8010a8a:	f7ff ffdd 	bl	8010a48 <xflow>
 8010a8e:	ec41 0b10 	vmov	d0, r0, r1
 8010a92:	bd08      	pop	{r3, pc}

08010a94 <_sbrk>:
 8010a94:	4a04      	ldr	r2, [pc, #16]	; (8010aa8 <_sbrk+0x14>)
 8010a96:	6811      	ldr	r1, [r2, #0]
 8010a98:	4603      	mov	r3, r0
 8010a9a:	b909      	cbnz	r1, 8010aa0 <_sbrk+0xc>
 8010a9c:	4903      	ldr	r1, [pc, #12]	; (8010aac <_sbrk+0x18>)
 8010a9e:	6011      	str	r1, [r2, #0]
 8010aa0:	6810      	ldr	r0, [r2, #0]
 8010aa2:	4403      	add	r3, r0
 8010aa4:	6013      	str	r3, [r2, #0]
 8010aa6:	4770      	bx	lr
 8010aa8:	20013e34 	.word	0x20013e34
 8010aac:	20013e38 	.word	0x20013e38

08010ab0 <_init>:
 8010ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ab2:	bf00      	nop
 8010ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ab6:	bc08      	pop	{r3}
 8010ab8:	469e      	mov	lr, r3
 8010aba:	4770      	bx	lr

08010abc <_fini>:
 8010abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010abe:	bf00      	nop
 8010ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ac2:	bc08      	pop	{r3}
 8010ac4:	469e      	mov	lr, r3
 8010ac6:	4770      	bx	lr
