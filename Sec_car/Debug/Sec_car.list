
Sec_car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009998  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08009b68  08009b68  00019b68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f14  08009f14  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009f14  08009f14  00019f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f1c  08009f1c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f1c  08009f1c  00019f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f20  08009f20  00019f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009f24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d2c  200001d4  0800a0f8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f00  0800a0f8  00020f00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001beb9  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c41  00000000  00000000  0003c100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018c0  00000000  00000000  0003fd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001362  00000000  00000000  00041608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005a3f  00000000  00000000  0004296a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e320  00000000  00000000  000483a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e464b  00000000  00000000  000666c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007844  00000000  00000000  0014ad14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00152558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009b50 	.word	0x08009b50

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08009b50 	.word	0x08009b50

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	200007e4 	.word	0x200007e4
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <strlen>:
 8000350:	4603      	mov	r3, r0
 8000352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000356:	2a00      	cmp	r2, #0
 8000358:	d1fb      	bne.n	8000352 <strlen+0x2>
 800035a:	1a18      	subs	r0, r3, r0
 800035c:	3801      	subs	r0, #1
 800035e:	4770      	bx	lr

08000360 <__aeabi_drsub>:
 8000360:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000364:	e002      	b.n	800036c <__adddf3>
 8000366:	bf00      	nop

08000368 <__aeabi_dsub>:
 8000368:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800036c <__adddf3>:
 800036c:	b530      	push	{r4, r5, lr}
 800036e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000372:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	bf1f      	itttt	ne
 8000382:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000386:	ea55 0c02 	orrsne.w	ip, r5, r2
 800038a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800038e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000392:	f000 80e2 	beq.w	800055a <__adddf3+0x1ee>
 8000396:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800039a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800039e:	bfb8      	it	lt
 80003a0:	426d      	neglt	r5, r5
 80003a2:	dd0c      	ble.n	80003be <__adddf3+0x52>
 80003a4:	442c      	add	r4, r5
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	ea82 0000 	eor.w	r0, r2, r0
 80003b2:	ea83 0101 	eor.w	r1, r3, r1
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	2d36      	cmp	r5, #54	; 0x36
 80003c0:	bf88      	it	hi
 80003c2:	bd30      	pophi	{r4, r5, pc}
 80003c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003d4:	d002      	beq.n	80003dc <__adddf3+0x70>
 80003d6:	4240      	negs	r0, r0
 80003d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003e8:	d002      	beq.n	80003f0 <__adddf3+0x84>
 80003ea:	4252      	negs	r2, r2
 80003ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003f0:	ea94 0f05 	teq	r4, r5
 80003f4:	f000 80a7 	beq.w	8000546 <__adddf3+0x1da>
 80003f8:	f1a4 0401 	sub.w	r4, r4, #1
 80003fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000400:	db0d      	blt.n	800041e <__adddf3+0xb2>
 8000402:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000406:	fa22 f205 	lsr.w	r2, r2, r5
 800040a:	1880      	adds	r0, r0, r2
 800040c:	f141 0100 	adc.w	r1, r1, #0
 8000410:	fa03 f20e 	lsl.w	r2, r3, lr
 8000414:	1880      	adds	r0, r0, r2
 8000416:	fa43 f305 	asr.w	r3, r3, r5
 800041a:	4159      	adcs	r1, r3
 800041c:	e00e      	b.n	800043c <__adddf3+0xd0>
 800041e:	f1a5 0520 	sub.w	r5, r5, #32
 8000422:	f10e 0e20 	add.w	lr, lr, #32
 8000426:	2a01      	cmp	r2, #1
 8000428:	fa03 fc0e 	lsl.w	ip, r3, lr
 800042c:	bf28      	it	cs
 800042e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000432:	fa43 f305 	asr.w	r3, r3, r5
 8000436:	18c0      	adds	r0, r0, r3
 8000438:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800043c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000440:	d507      	bpl.n	8000452 <__adddf3+0xe6>
 8000442:	f04f 0e00 	mov.w	lr, #0
 8000446:	f1dc 0c00 	rsbs	ip, ip, #0
 800044a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800044e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000452:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000456:	d31b      	bcc.n	8000490 <__adddf3+0x124>
 8000458:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800045c:	d30c      	bcc.n	8000478 <__adddf3+0x10c>
 800045e:	0849      	lsrs	r1, r1, #1
 8000460:	ea5f 0030 	movs.w	r0, r0, rrx
 8000464:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000468:	f104 0401 	add.w	r4, r4, #1
 800046c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000470:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000474:	f080 809a 	bcs.w	80005ac <__adddf3+0x240>
 8000478:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800047c:	bf08      	it	eq
 800047e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000482:	f150 0000 	adcs.w	r0, r0, #0
 8000486:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800048a:	ea41 0105 	orr.w	r1, r1, r5
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000494:	4140      	adcs	r0, r0
 8000496:	eb41 0101 	adc.w	r1, r1, r1
 800049a:	3c01      	subs	r4, #1
 800049c:	bf28      	it	cs
 800049e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004a2:	d2e9      	bcs.n	8000478 <__adddf3+0x10c>
 80004a4:	f091 0f00 	teq	r1, #0
 80004a8:	bf04      	itt	eq
 80004aa:	4601      	moveq	r1, r0
 80004ac:	2000      	moveq	r0, #0
 80004ae:	fab1 f381 	clz	r3, r1
 80004b2:	bf08      	it	eq
 80004b4:	3320      	addeq	r3, #32
 80004b6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ba:	f1b3 0220 	subs.w	r2, r3, #32
 80004be:	da0c      	bge.n	80004da <__adddf3+0x16e>
 80004c0:	320c      	adds	r2, #12
 80004c2:	dd08      	ble.n	80004d6 <__adddf3+0x16a>
 80004c4:	f102 0c14 	add.w	ip, r2, #20
 80004c8:	f1c2 020c 	rsb	r2, r2, #12
 80004cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004d0:	fa21 f102 	lsr.w	r1, r1, r2
 80004d4:	e00c      	b.n	80004f0 <__adddf3+0x184>
 80004d6:	f102 0214 	add.w	r2, r2, #20
 80004da:	bfd8      	it	le
 80004dc:	f1c2 0c20 	rsble	ip, r2, #32
 80004e0:	fa01 f102 	lsl.w	r1, r1, r2
 80004e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004e8:	bfdc      	itt	le
 80004ea:	ea41 010c 	orrle.w	r1, r1, ip
 80004ee:	4090      	lslle	r0, r2
 80004f0:	1ae4      	subs	r4, r4, r3
 80004f2:	bfa2      	ittt	ge
 80004f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004f8:	4329      	orrge	r1, r5
 80004fa:	bd30      	popge	{r4, r5, pc}
 80004fc:	ea6f 0404 	mvn.w	r4, r4
 8000500:	3c1f      	subs	r4, #31
 8000502:	da1c      	bge.n	800053e <__adddf3+0x1d2>
 8000504:	340c      	adds	r4, #12
 8000506:	dc0e      	bgt.n	8000526 <__adddf3+0x1ba>
 8000508:	f104 0414 	add.w	r4, r4, #20
 800050c:	f1c4 0220 	rsb	r2, r4, #32
 8000510:	fa20 f004 	lsr.w	r0, r0, r4
 8000514:	fa01 f302 	lsl.w	r3, r1, r2
 8000518:	ea40 0003 	orr.w	r0, r0, r3
 800051c:	fa21 f304 	lsr.w	r3, r1, r4
 8000520:	ea45 0103 	orr.w	r1, r5, r3
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f1c4 040c 	rsb	r4, r4, #12
 800052a:	f1c4 0220 	rsb	r2, r4, #32
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 f304 	lsl.w	r3, r1, r4
 8000536:	ea40 0003 	orr.w	r0, r0, r3
 800053a:	4629      	mov	r1, r5
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	fa21 f004 	lsr.w	r0, r1, r4
 8000542:	4629      	mov	r1, r5
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f094 0f00 	teq	r4, #0
 800054a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800054e:	bf06      	itte	eq
 8000550:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000554:	3401      	addeq	r4, #1
 8000556:	3d01      	subne	r5, #1
 8000558:	e74e      	b.n	80003f8 <__adddf3+0x8c>
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf18      	it	ne
 8000560:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000564:	d029      	beq.n	80005ba <__adddf3+0x24e>
 8000566:	ea94 0f05 	teq	r4, r5
 800056a:	bf08      	it	eq
 800056c:	ea90 0f02 	teqeq	r0, r2
 8000570:	d005      	beq.n	800057e <__adddf3+0x212>
 8000572:	ea54 0c00 	orrs.w	ip, r4, r0
 8000576:	bf04      	itt	eq
 8000578:	4619      	moveq	r1, r3
 800057a:	4610      	moveq	r0, r2
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	ea91 0f03 	teq	r1, r3
 8000582:	bf1e      	ittt	ne
 8000584:	2100      	movne	r1, #0
 8000586:	2000      	movne	r0, #0
 8000588:	bd30      	popne	{r4, r5, pc}
 800058a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800058e:	d105      	bne.n	800059c <__adddf3+0x230>
 8000590:	0040      	lsls	r0, r0, #1
 8000592:	4149      	adcs	r1, r1
 8000594:	bf28      	it	cs
 8000596:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005a0:	bf3c      	itt	cc
 80005a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005a6:	bd30      	popcc	{r4, r5, pc}
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005b4:	f04f 0000 	mov.w	r0, #0
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf1a      	itte	ne
 80005c0:	4619      	movne	r1, r3
 80005c2:	4610      	movne	r0, r2
 80005c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005c8:	bf1c      	itt	ne
 80005ca:	460b      	movne	r3, r1
 80005cc:	4602      	movne	r2, r0
 80005ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005d2:	bf06      	itte	eq
 80005d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005d8:	ea91 0f03 	teqeq	r1, r3
 80005dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	bf00      	nop

080005e4 <__aeabi_ui2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f04f 0500 	mov.w	r5, #0
 80005fc:	f04f 0100 	mov.w	r1, #0
 8000600:	e750      	b.n	80004a4 <__adddf3+0x138>
 8000602:	bf00      	nop

08000604 <__aeabi_i2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800061c:	bf48      	it	mi
 800061e:	4240      	negmi	r0, r0
 8000620:	f04f 0100 	mov.w	r1, #0
 8000624:	e73e      	b.n	80004a4 <__adddf3+0x138>
 8000626:	bf00      	nop

08000628 <__aeabi_f2d>:
 8000628:	0042      	lsls	r2, r0, #1
 800062a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800062e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000632:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000636:	bf1f      	itttt	ne
 8000638:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800063c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000640:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000644:	4770      	bxne	lr
 8000646:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800064a:	bf08      	it	eq
 800064c:	4770      	bxeq	lr
 800064e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000652:	bf04      	itt	eq
 8000654:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000658:	4770      	bxeq	lr
 800065a:	b530      	push	{r4, r5, lr}
 800065c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000660:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	e71c      	b.n	80004a4 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_ul2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	e00a      	b.n	8000692 <__aeabi_l2d+0x16>

0800067c <__aeabi_l2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800068a:	d502      	bpl.n	8000692 <__aeabi_l2d+0x16>
 800068c:	4240      	negs	r0, r0
 800068e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000692:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000696:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800069a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800069e:	f43f aed8 	beq.w	8000452 <__adddf3+0xe6>
 80006a2:	f04f 0203 	mov.w	r2, #3
 80006a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006aa:	bf18      	it	ne
 80006ac:	3203      	addne	r2, #3
 80006ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006b2:	bf18      	it	ne
 80006b4:	3203      	addne	r2, #3
 80006b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ba:	f1c2 0320 	rsb	r3, r2, #32
 80006be:	fa00 fc03 	lsl.w	ip, r0, r3
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ca:	ea40 000e 	orr.w	r0, r0, lr
 80006ce:	fa21 f102 	lsr.w	r1, r1, r2
 80006d2:	4414      	add	r4, r2
 80006d4:	e6bd      	b.n	8000452 <__adddf3+0xe6>
 80006d6:	bf00      	nop

080006d8 <__aeabi_dmul>:
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006e6:	bf1d      	ittte	ne
 80006e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006ec:	ea94 0f0c 	teqne	r4, ip
 80006f0:	ea95 0f0c 	teqne	r5, ip
 80006f4:	f000 f8de 	bleq	80008b4 <__aeabi_dmul+0x1dc>
 80006f8:	442c      	add	r4, r5
 80006fa:	ea81 0603 	eor.w	r6, r1, r3
 80006fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000702:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000706:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800070a:	bf18      	it	ne
 800070c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000718:	d038      	beq.n	800078c <__aeabi_dmul+0xb4>
 800071a:	fba0 ce02 	umull	ip, lr, r0, r2
 800071e:	f04f 0500 	mov.w	r5, #0
 8000722:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000726:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800072a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800072e:	f04f 0600 	mov.w	r6, #0
 8000732:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000736:	f09c 0f00 	teq	ip, #0
 800073a:	bf18      	it	ne
 800073c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000740:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000744:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000748:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800074c:	d204      	bcs.n	8000758 <__aeabi_dmul+0x80>
 800074e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000752:	416d      	adcs	r5, r5
 8000754:	eb46 0606 	adc.w	r6, r6, r6
 8000758:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800075c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000760:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000764:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000768:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800076c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000770:	bf88      	it	hi
 8000772:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000776:	d81e      	bhi.n	80007b6 <__aeabi_dmul+0xde>
 8000778:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800077c:	bf08      	it	eq
 800077e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000782:	f150 0000 	adcs.w	r0, r0, #0
 8000786:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000790:	ea46 0101 	orr.w	r1, r6, r1
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007a0:	bfc2      	ittt	gt
 80007a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	popgt	{r4, r5, r6, pc}
 80007ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007b0:	f04f 0e00 	mov.w	lr, #0
 80007b4:	3c01      	subs	r4, #1
 80007b6:	f300 80ab 	bgt.w	8000910 <__aeabi_dmul+0x238>
 80007ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007be:	bfde      	ittt	le
 80007c0:	2000      	movle	r0, #0
 80007c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007c6:	bd70      	pople	{r4, r5, r6, pc}
 80007c8:	f1c4 0400 	rsb	r4, r4, #0
 80007cc:	3c20      	subs	r4, #32
 80007ce:	da35      	bge.n	800083c <__aeabi_dmul+0x164>
 80007d0:	340c      	adds	r4, #12
 80007d2:	dc1b      	bgt.n	800080c <__aeabi_dmul+0x134>
 80007d4:	f104 0414 	add.w	r4, r4, #20
 80007d8:	f1c4 0520 	rsb	r5, r4, #32
 80007dc:	fa00 f305 	lsl.w	r3, r0, r5
 80007e0:	fa20 f004 	lsr.w	r0, r0, r4
 80007e4:	fa01 f205 	lsl.w	r2, r1, r5
 80007e8:	ea40 0002 	orr.w	r0, r0, r2
 80007ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007f8:	fa21 f604 	lsr.w	r6, r1, r4
 80007fc:	eb42 0106 	adc.w	r1, r2, r6
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 040c 	rsb	r4, r4, #12
 8000810:	f1c4 0520 	rsb	r5, r4, #32
 8000814:	fa00 f304 	lsl.w	r3, r0, r4
 8000818:	fa20 f005 	lsr.w	r0, r0, r5
 800081c:	fa01 f204 	lsl.w	r2, r1, r4
 8000820:	ea40 0002 	orr.w	r0, r0, r2
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800082c:	f141 0100 	adc.w	r1, r1, #0
 8000830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000834:	bf08      	it	eq
 8000836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f1c4 0520 	rsb	r5, r4, #32
 8000840:	fa00 f205 	lsl.w	r2, r0, r5
 8000844:	ea4e 0e02 	orr.w	lr, lr, r2
 8000848:	fa20 f304 	lsr.w	r3, r0, r4
 800084c:	fa01 f205 	lsl.w	r2, r1, r5
 8000850:	ea43 0302 	orr.w	r3, r3, r2
 8000854:	fa21 f004 	lsr.w	r0, r1, r4
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	fa21 f204 	lsr.w	r2, r1, r4
 8000860:	ea20 0002 	bic.w	r0, r0, r2
 8000864:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000868:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800086c:	bf08      	it	eq
 800086e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f094 0f00 	teq	r4, #0
 8000878:	d10f      	bne.n	800089a <__aeabi_dmul+0x1c2>
 800087a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800087e:	0040      	lsls	r0, r0, #1
 8000880:	eb41 0101 	adc.w	r1, r1, r1
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3c01      	subeq	r4, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1a6>
 800088e:	ea41 0106 	orr.w	r1, r1, r6
 8000892:	f095 0f00 	teq	r5, #0
 8000896:	bf18      	it	ne
 8000898:	4770      	bxne	lr
 800089a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800089e:	0052      	lsls	r2, r2, #1
 80008a0:	eb43 0303 	adc.w	r3, r3, r3
 80008a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3d01      	subeq	r5, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1c6>
 80008ae:	ea43 0306 	orr.w	r3, r3, r6
 80008b2:	4770      	bx	lr
 80008b4:	ea94 0f0c 	teq	r4, ip
 80008b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008bc:	bf18      	it	ne
 80008be:	ea95 0f0c 	teqne	r5, ip
 80008c2:	d00c      	beq.n	80008de <__aeabi_dmul+0x206>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	d1d1      	bne.n	8000874 <__aeabi_dmul+0x19c>
 80008d0:	ea81 0103 	eor.w	r1, r1, r3
 80008d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008d8:	f04f 0000 	mov.w	r0, #0
 80008dc:	bd70      	pop	{r4, r5, r6, pc}
 80008de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e2:	bf06      	itte	eq
 80008e4:	4610      	moveq	r0, r2
 80008e6:	4619      	moveq	r1, r3
 80008e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ec:	d019      	beq.n	8000922 <__aeabi_dmul+0x24a>
 80008ee:	ea94 0f0c 	teq	r4, ip
 80008f2:	d102      	bne.n	80008fa <__aeabi_dmul+0x222>
 80008f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008f8:	d113      	bne.n	8000922 <__aeabi_dmul+0x24a>
 80008fa:	ea95 0f0c 	teq	r5, ip
 80008fe:	d105      	bne.n	800090c <__aeabi_dmul+0x234>
 8000900:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000904:	bf1c      	itt	ne
 8000906:	4610      	movne	r0, r2
 8000908:	4619      	movne	r1, r3
 800090a:	d10a      	bne.n	8000922 <__aeabi_dmul+0x24a>
 800090c:	ea81 0103 	eor.w	r1, r1, r3
 8000910:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000914:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000918:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	bd70      	pop	{r4, r5, r6, pc}
 8000922:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000926:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800092a:	bd70      	pop	{r4, r5, r6, pc}

0800092c <__aeabi_ddiv>:
 800092c:	b570      	push	{r4, r5, r6, lr}
 800092e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000932:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000936:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800093a:	bf1d      	ittte	ne
 800093c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000940:	ea94 0f0c 	teqne	r4, ip
 8000944:	ea95 0f0c 	teqne	r5, ip
 8000948:	f000 f8a7 	bleq	8000a9a <__aeabi_ddiv+0x16e>
 800094c:	eba4 0405 	sub.w	r4, r4, r5
 8000950:	ea81 0e03 	eor.w	lr, r1, r3
 8000954:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000958:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800095c:	f000 8088 	beq.w	8000a70 <__aeabi_ddiv+0x144>
 8000960:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000964:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000968:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800096c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000970:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000974:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000978:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800097c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000980:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000984:	429d      	cmp	r5, r3
 8000986:	bf08      	it	eq
 8000988:	4296      	cmpeq	r6, r2
 800098a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800098e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000992:	d202      	bcs.n	800099a <__aeabi_ddiv+0x6e>
 8000994:	085b      	lsrs	r3, r3, #1
 8000996:	ea4f 0232 	mov.w	r2, r2, rrx
 800099a:	1ab6      	subs	r6, r6, r2
 800099c:	eb65 0503 	sbc.w	r5, r5, r3
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009d8:	085b      	lsrs	r3, r3, #1
 80009da:	ea4f 0232 	mov.w	r2, r2, rrx
 80009de:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e6:	bf22      	ittt	cs
 80009e8:	1ab6      	subcs	r6, r6, r2
 80009ea:	4675      	movcs	r5, lr
 80009ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a08:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a0c:	d018      	beq.n	8000a40 <__aeabi_ddiv+0x114>
 8000a0e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a12:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a16:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a1a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a1e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a26:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a2a:	d1c0      	bne.n	80009ae <__aeabi_ddiv+0x82>
 8000a2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a30:	d10b      	bne.n	8000a4a <__aeabi_ddiv+0x11e>
 8000a32:	ea41 0100 	orr.w	r1, r1, r0
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a3e:	e7b6      	b.n	80009ae <__aeabi_ddiv+0x82>
 8000a40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a44:	bf04      	itt	eq
 8000a46:	4301      	orreq	r1, r0
 8000a48:	2000      	moveq	r0, #0
 8000a4a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a4e:	bf88      	it	hi
 8000a50:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a54:	f63f aeaf 	bhi.w	80007b6 <__aeabi_dmul+0xde>
 8000a58:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a5c:	bf04      	itt	eq
 8000a5e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a66:	f150 0000 	adcs.w	r0, r0, #0
 8000a6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a74:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a78:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a7c:	bfc2      	ittt	gt
 8000a7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a86:	bd70      	popgt	{r4, r5, r6, pc}
 8000a88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a8c:	f04f 0e00 	mov.w	lr, #0
 8000a90:	3c01      	subs	r4, #1
 8000a92:	e690      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a94:	ea45 0e06 	orr.w	lr, r5, r6
 8000a98:	e68d      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a9a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a9e:	ea94 0f0c 	teq	r4, ip
 8000aa2:	bf08      	it	eq
 8000aa4:	ea95 0f0c 	teqeq	r5, ip
 8000aa8:	f43f af3b 	beq.w	8000922 <__aeabi_dmul+0x24a>
 8000aac:	ea94 0f0c 	teq	r4, ip
 8000ab0:	d10a      	bne.n	8000ac8 <__aeabi_ddiv+0x19c>
 8000ab2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ab6:	f47f af34 	bne.w	8000922 <__aeabi_dmul+0x24a>
 8000aba:	ea95 0f0c 	teq	r5, ip
 8000abe:	f47f af25 	bne.w	800090c <__aeabi_dmul+0x234>
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	e72c      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000ac8:	ea95 0f0c 	teq	r5, ip
 8000acc:	d106      	bne.n	8000adc <__aeabi_ddiv+0x1b0>
 8000ace:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ad2:	f43f aefd 	beq.w	80008d0 <__aeabi_dmul+0x1f8>
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	e722      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000adc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ae0:	bf18      	it	ne
 8000ae2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ae6:	f47f aec5 	bne.w	8000874 <__aeabi_dmul+0x19c>
 8000aea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000aee:	f47f af0d 	bne.w	800090c <__aeabi_dmul+0x234>
 8000af2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000af6:	f47f aeeb 	bne.w	80008d0 <__aeabi_dmul+0x1f8>
 8000afa:	e712      	b.n	8000922 <__aeabi_dmul+0x24a>

08000afc <__gedf2>:
 8000afc:	f04f 3cff 	mov.w	ip, #4294967295
 8000b00:	e006      	b.n	8000b10 <__cmpdf2+0x4>
 8000b02:	bf00      	nop

08000b04 <__ledf2>:
 8000b04:	f04f 0c01 	mov.w	ip, #1
 8000b08:	e002      	b.n	8000b10 <__cmpdf2+0x4>
 8000b0a:	bf00      	nop

08000b0c <__cmpdf2>:
 8000b0c:	f04f 0c01 	mov.w	ip, #1
 8000b10:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b26:	d01b      	beq.n	8000b60 <__cmpdf2+0x54>
 8000b28:	b001      	add	sp, #4
 8000b2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b2e:	bf0c      	ite	eq
 8000b30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b34:	ea91 0f03 	teqne	r1, r3
 8000b38:	bf02      	ittt	eq
 8000b3a:	ea90 0f02 	teqeq	r0, r2
 8000b3e:	2000      	moveq	r0, #0
 8000b40:	4770      	bxeq	lr
 8000b42:	f110 0f00 	cmn.w	r0, #0
 8000b46:	ea91 0f03 	teq	r1, r3
 8000b4a:	bf58      	it	pl
 8000b4c:	4299      	cmppl	r1, r3
 8000b4e:	bf08      	it	eq
 8000b50:	4290      	cmpeq	r0, r2
 8000b52:	bf2c      	ite	cs
 8000b54:	17d8      	asrcs	r0, r3, #31
 8000b56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b5a:	f040 0001 	orr.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__cmpdf2+0x64>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d107      	bne.n	8000b80 <__cmpdf2+0x74>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d1d6      	bne.n	8000b28 <__cmpdf2+0x1c>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d0d3      	beq.n	8000b28 <__cmpdf2+0x1c>
 8000b80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_cdrcmple>:
 8000b88:	4684      	mov	ip, r0
 8000b8a:	4610      	mov	r0, r2
 8000b8c:	4662      	mov	r2, ip
 8000b8e:	468c      	mov	ip, r1
 8000b90:	4619      	mov	r1, r3
 8000b92:	4663      	mov	r3, ip
 8000b94:	e000      	b.n	8000b98 <__aeabi_cdcmpeq>
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdcmpeq>:
 8000b98:	b501      	push	{r0, lr}
 8000b9a:	f7ff ffb7 	bl	8000b0c <__cmpdf2>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	bf48      	it	mi
 8000ba2:	f110 0f00 	cmnmi.w	r0, #0
 8000ba6:	bd01      	pop	{r0, pc}

08000ba8 <__aeabi_dcmpeq>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff fff4 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bb0:	bf0c      	ite	eq
 8000bb2:	2001      	moveq	r0, #1
 8000bb4:	2000      	movne	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_dcmplt>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff ffea 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bc4:	bf34      	ite	cc
 8000bc6:	2001      	movcc	r0, #1
 8000bc8:	2000      	movcs	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_dcmple>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffe0 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bd8:	bf94      	ite	ls
 8000bda:	2001      	movls	r0, #1
 8000bdc:	2000      	movhi	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_dcmpge>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffce 	bl	8000b88 <__aeabi_cdrcmple>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_dcmpgt>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffc4 	bl	8000b88 <__aeabi_cdrcmple>
 8000c00:	bf34      	ite	cc
 8000c02:	2001      	movcc	r0, #1
 8000c04:	2000      	movcs	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_dcmpun>:
 8000c0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c14:	d102      	bne.n	8000c1c <__aeabi_dcmpun+0x10>
 8000c16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c1a:	d10a      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x20>
 8000c26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c2c:	f04f 0000 	mov.w	r0, #0
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0001 	mov.w	r0, #1
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2iz>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c40:	d215      	bcs.n	8000c6e <__aeabi_d2iz+0x36>
 8000c42:	d511      	bpl.n	8000c68 <__aeabi_d2iz+0x30>
 8000c44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c4c:	d912      	bls.n	8000c74 <__aeabi_d2iz+0x3c>
 8000c4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c62:	bf18      	it	ne
 8000c64:	4240      	negne	r0, r0
 8000c66:	4770      	bx	lr
 8000c68:	f04f 0000 	mov.w	r0, #0
 8000c6c:	4770      	bx	lr
 8000c6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c72:	d105      	bne.n	8000c80 <__aeabi_d2iz+0x48>
 8000c74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	bf08      	it	eq
 8000c7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c7e:	4770      	bx	lr
 8000c80:	f04f 0000 	mov.w	r0, #0
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2uiz>:
 8000c88:	004a      	lsls	r2, r1, #1
 8000c8a:	d211      	bcs.n	8000cb0 <__aeabi_d2uiz+0x28>
 8000c8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c90:	d211      	bcs.n	8000cb6 <__aeabi_d2uiz+0x2e>
 8000c92:	d50d      	bpl.n	8000cb0 <__aeabi_d2uiz+0x28>
 8000c94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c9c:	d40e      	bmi.n	8000cbc <__aeabi_d2uiz+0x34>
 8000c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000caa:	fa23 f002 	lsr.w	r0, r3, r2
 8000cae:	4770      	bx	lr
 8000cb0:	f04f 0000 	mov.w	r0, #0
 8000cb4:	4770      	bx	lr
 8000cb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cba:	d102      	bne.n	8000cc2 <__aeabi_d2uiz+0x3a>
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	4770      	bx	lr
 8000cc2:	f04f 0000 	mov.w	r0, #0
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2f>:
 8000cc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ccc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cd0:	bf24      	itt	cs
 8000cd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cda:	d90d      	bls.n	8000cf8 <__aeabi_d2f+0x30>
 8000cdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ce0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ce4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ce8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cf0:	bf08      	it	eq
 8000cf2:	f020 0001 	biceq.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cfc:	d121      	bne.n	8000d42 <__aeabi_d2f+0x7a>
 8000cfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d02:	bfbc      	itt	lt
 8000d04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d08:	4770      	bxlt	lr
 8000d0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d12:	f1c2 0218 	rsb	r2, r2, #24
 8000d16:	f1c2 0c20 	rsb	ip, r2, #32
 8000d1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d22:	bf18      	it	ne
 8000d24:	f040 0001 	orrne.w	r0, r0, #1
 8000d28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d34:	ea40 000c 	orr.w	r0, r0, ip
 8000d38:	fa23 f302 	lsr.w	r3, r3, r2
 8000d3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d40:	e7cc      	b.n	8000cdc <__aeabi_d2f+0x14>
 8000d42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d46:	d107      	bne.n	8000d58 <__aeabi_d2f+0x90>
 8000d48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d56:	4770      	bxne	lr
 8000d58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b970 	b.w	8001060 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f806 	bl	8000d98 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__udivmoddi4>:
 8000d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d9c:	9e08      	ldr	r6, [sp, #32]
 8000d9e:	460d      	mov	r5, r1
 8000da0:	4604      	mov	r4, r0
 8000da2:	460f      	mov	r7, r1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d14a      	bne.n	8000e3e <__udivmoddi4+0xa6>
 8000da8:	428a      	cmp	r2, r1
 8000daa:	4694      	mov	ip, r2
 8000dac:	d965      	bls.n	8000e7a <__udivmoddi4+0xe2>
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	b143      	cbz	r3, 8000dc6 <__udivmoddi4+0x2e>
 8000db4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000db8:	f1c3 0220 	rsb	r2, r3, #32
 8000dbc:	409f      	lsls	r7, r3
 8000dbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc2:	4317      	orrs	r7, r2
 8000dc4:	409c      	lsls	r4, r3
 8000dc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dca:	fa1f f58c 	uxth.w	r5, ip
 8000dce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dd2:	0c22      	lsrs	r2, r4, #16
 8000dd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ddc:	fb01 f005 	mul.w	r0, r1, r5
 8000de0:	4290      	cmp	r0, r2
 8000de2:	d90a      	bls.n	8000dfa <__udivmoddi4+0x62>
 8000de4:	eb1c 0202 	adds.w	r2, ip, r2
 8000de8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dec:	f080 811c 	bcs.w	8001028 <__udivmoddi4+0x290>
 8000df0:	4290      	cmp	r0, r2
 8000df2:	f240 8119 	bls.w	8001028 <__udivmoddi4+0x290>
 8000df6:	3902      	subs	r1, #2
 8000df8:	4462      	add	r2, ip
 8000dfa:	1a12      	subs	r2, r2, r0
 8000dfc:	b2a4      	uxth	r4, r4
 8000dfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0a:	fb00 f505 	mul.w	r5, r0, r5
 8000e0e:	42a5      	cmp	r5, r4
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x90>
 8000e12:	eb1c 0404 	adds.w	r4, ip, r4
 8000e16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e1a:	f080 8107 	bcs.w	800102c <__udivmoddi4+0x294>
 8000e1e:	42a5      	cmp	r5, r4
 8000e20:	f240 8104 	bls.w	800102c <__udivmoddi4+0x294>
 8000e24:	4464      	add	r4, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e2c:	1b64      	subs	r4, r4, r5
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11e      	cbz	r6, 8000e3a <__udivmoddi4+0xa2>
 8000e32:	40dc      	lsrs	r4, r3
 8000e34:	2300      	movs	r3, #0
 8000e36:	e9c6 4300 	strd	r4, r3, [r6]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0xbc>
 8000e42:	2e00      	cmp	r6, #0
 8000e44:	f000 80ed 	beq.w	8001022 <__udivmoddi4+0x28a>
 8000e48:	2100      	movs	r1, #0
 8000e4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e4e:	4608      	mov	r0, r1
 8000e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e54:	fab3 f183 	clz	r1, r3
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	d149      	bne.n	8000ef0 <__udivmoddi4+0x158>
 8000e5c:	42ab      	cmp	r3, r5
 8000e5e:	d302      	bcc.n	8000e66 <__udivmoddi4+0xce>
 8000e60:	4282      	cmp	r2, r0
 8000e62:	f200 80f8 	bhi.w	8001056 <__udivmoddi4+0x2be>
 8000e66:	1a84      	subs	r4, r0, r2
 8000e68:	eb65 0203 	sbc.w	r2, r5, r3
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	4617      	mov	r7, r2
 8000e70:	2e00      	cmp	r6, #0
 8000e72:	d0e2      	beq.n	8000e3a <__udivmoddi4+0xa2>
 8000e74:	e9c6 4700 	strd	r4, r7, [r6]
 8000e78:	e7df      	b.n	8000e3a <__udivmoddi4+0xa2>
 8000e7a:	b902      	cbnz	r2, 8000e7e <__udivmoddi4+0xe6>
 8000e7c:	deff      	udf	#255	; 0xff
 8000e7e:	fab2 f382 	clz	r3, r2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f040 8090 	bne.w	8000fa8 <__udivmoddi4+0x210>
 8000e88:	1a8a      	subs	r2, r1, r2
 8000e8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e8e:	fa1f fe8c 	uxth.w	lr, ip
 8000e92:	2101      	movs	r1, #1
 8000e94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e98:	fb07 2015 	mls	r0, r7, r5, r2
 8000e9c:	0c22      	lsrs	r2, r4, #16
 8000e9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ea2:	fb0e f005 	mul.w	r0, lr, r5
 8000ea6:	4290      	cmp	r0, r2
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x124>
 8000eaa:	eb1c 0202 	adds.w	r2, ip, r2
 8000eae:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x122>
 8000eb4:	4290      	cmp	r0, r2
 8000eb6:	f200 80cb 	bhi.w	8001050 <__udivmoddi4+0x2b8>
 8000eba:	4645      	mov	r5, r8
 8000ebc:	1a12      	subs	r2, r2, r0
 8000ebe:	b2a4      	uxth	r4, r4
 8000ec0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ec4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ec8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ecc:	fb0e fe00 	mul.w	lr, lr, r0
 8000ed0:	45a6      	cmp	lr, r4
 8000ed2:	d908      	bls.n	8000ee6 <__udivmoddi4+0x14e>
 8000ed4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000edc:	d202      	bcs.n	8000ee4 <__udivmoddi4+0x14c>
 8000ede:	45a6      	cmp	lr, r4
 8000ee0:	f200 80bb 	bhi.w	800105a <__udivmoddi4+0x2c2>
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	eba4 040e 	sub.w	r4, r4, lr
 8000eea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eee:	e79f      	b.n	8000e30 <__udivmoddi4+0x98>
 8000ef0:	f1c1 0720 	rsb	r7, r1, #32
 8000ef4:	408b      	lsls	r3, r1
 8000ef6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000efa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000efe:	fa05 f401 	lsl.w	r4, r5, r1
 8000f02:	fa20 f307 	lsr.w	r3, r0, r7
 8000f06:	40fd      	lsrs	r5, r7
 8000f08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f0c:	4323      	orrs	r3, r4
 8000f0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f12:	fa1f fe8c 	uxth.w	lr, ip
 8000f16:	fb09 5518 	mls	r5, r9, r8, r5
 8000f1a:	0c1c      	lsrs	r4, r3, #16
 8000f1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f20:	fb08 f50e 	mul.w	r5, r8, lr
 8000f24:	42a5      	cmp	r5, r4
 8000f26:	fa02 f201 	lsl.w	r2, r2, r1
 8000f2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000f2e:	d90b      	bls.n	8000f48 <__udivmoddi4+0x1b0>
 8000f30:	eb1c 0404 	adds.w	r4, ip, r4
 8000f34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f38:	f080 8088 	bcs.w	800104c <__udivmoddi4+0x2b4>
 8000f3c:	42a5      	cmp	r5, r4
 8000f3e:	f240 8085 	bls.w	800104c <__udivmoddi4+0x2b4>
 8000f42:	f1a8 0802 	sub.w	r8, r8, #2
 8000f46:	4464      	add	r4, ip
 8000f48:	1b64      	subs	r4, r4, r5
 8000f4a:	b29d      	uxth	r5, r3
 8000f4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f50:	fb09 4413 	mls	r4, r9, r3, r4
 8000f54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f5c:	45a6      	cmp	lr, r4
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x1da>
 8000f60:	eb1c 0404 	adds.w	r4, ip, r4
 8000f64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f68:	d26c      	bcs.n	8001044 <__udivmoddi4+0x2ac>
 8000f6a:	45a6      	cmp	lr, r4
 8000f6c:	d96a      	bls.n	8001044 <__udivmoddi4+0x2ac>
 8000f6e:	3b02      	subs	r3, #2
 8000f70:	4464      	add	r4, ip
 8000f72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f76:	fba3 9502 	umull	r9, r5, r3, r2
 8000f7a:	eba4 040e 	sub.w	r4, r4, lr
 8000f7e:	42ac      	cmp	r4, r5
 8000f80:	46c8      	mov	r8, r9
 8000f82:	46ae      	mov	lr, r5
 8000f84:	d356      	bcc.n	8001034 <__udivmoddi4+0x29c>
 8000f86:	d053      	beq.n	8001030 <__udivmoddi4+0x298>
 8000f88:	b156      	cbz	r6, 8000fa0 <__udivmoddi4+0x208>
 8000f8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f92:	fa04 f707 	lsl.w	r7, r4, r7
 8000f96:	40ca      	lsrs	r2, r1
 8000f98:	40cc      	lsrs	r4, r1
 8000f9a:	4317      	orrs	r7, r2
 8000f9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa8:	f1c3 0120 	rsb	r1, r3, #32
 8000fac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000fb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000fb8:	409d      	lsls	r5, r3
 8000fba:	432a      	orrs	r2, r5
 8000fbc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc0:	fa1f fe8c 	uxth.w	lr, ip
 8000fc4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fc8:	fb07 1510 	mls	r5, r7, r0, r1
 8000fcc:	0c11      	lsrs	r1, r2, #16
 8000fce:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fd2:	fb00 f50e 	mul.w	r5, r0, lr
 8000fd6:	428d      	cmp	r5, r1
 8000fd8:	fa04 f403 	lsl.w	r4, r4, r3
 8000fdc:	d908      	bls.n	8000ff0 <__udivmoddi4+0x258>
 8000fde:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fe6:	d22f      	bcs.n	8001048 <__udivmoddi4+0x2b0>
 8000fe8:	428d      	cmp	r5, r1
 8000fea:	d92d      	bls.n	8001048 <__udivmoddi4+0x2b0>
 8000fec:	3802      	subs	r0, #2
 8000fee:	4461      	add	r1, ip
 8000ff0:	1b49      	subs	r1, r1, r5
 8000ff2:	b292      	uxth	r2, r2
 8000ff4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ff8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	fb05 f10e 	mul.w	r1, r5, lr
 8001004:	4291      	cmp	r1, r2
 8001006:	d908      	bls.n	800101a <__udivmoddi4+0x282>
 8001008:	eb1c 0202 	adds.w	r2, ip, r2
 800100c:	f105 38ff 	add.w	r8, r5, #4294967295
 8001010:	d216      	bcs.n	8001040 <__udivmoddi4+0x2a8>
 8001012:	4291      	cmp	r1, r2
 8001014:	d914      	bls.n	8001040 <__udivmoddi4+0x2a8>
 8001016:	3d02      	subs	r5, #2
 8001018:	4462      	add	r2, ip
 800101a:	1a52      	subs	r2, r2, r1
 800101c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001020:	e738      	b.n	8000e94 <__udivmoddi4+0xfc>
 8001022:	4631      	mov	r1, r6
 8001024:	4630      	mov	r0, r6
 8001026:	e708      	b.n	8000e3a <__udivmoddi4+0xa2>
 8001028:	4639      	mov	r1, r7
 800102a:	e6e6      	b.n	8000dfa <__udivmoddi4+0x62>
 800102c:	4610      	mov	r0, r2
 800102e:	e6fb      	b.n	8000e28 <__udivmoddi4+0x90>
 8001030:	4548      	cmp	r0, r9
 8001032:	d2a9      	bcs.n	8000f88 <__udivmoddi4+0x1f0>
 8001034:	ebb9 0802 	subs.w	r8, r9, r2
 8001038:	eb65 0e0c 	sbc.w	lr, r5, ip
 800103c:	3b01      	subs	r3, #1
 800103e:	e7a3      	b.n	8000f88 <__udivmoddi4+0x1f0>
 8001040:	4645      	mov	r5, r8
 8001042:	e7ea      	b.n	800101a <__udivmoddi4+0x282>
 8001044:	462b      	mov	r3, r5
 8001046:	e794      	b.n	8000f72 <__udivmoddi4+0x1da>
 8001048:	4640      	mov	r0, r8
 800104a:	e7d1      	b.n	8000ff0 <__udivmoddi4+0x258>
 800104c:	46d0      	mov	r8, sl
 800104e:	e77b      	b.n	8000f48 <__udivmoddi4+0x1b0>
 8001050:	3d02      	subs	r5, #2
 8001052:	4462      	add	r2, ip
 8001054:	e732      	b.n	8000ebc <__udivmoddi4+0x124>
 8001056:	4608      	mov	r0, r1
 8001058:	e70a      	b.n	8000e70 <__udivmoddi4+0xd8>
 800105a:	4464      	add	r4, ip
 800105c:	3802      	subs	r0, #2
 800105e:	e742      	b.n	8000ee6 <__udivmoddi4+0x14e>

08001060 <__aeabi_idiv0>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <HAL_TIM_IC_CaptureCallback>:

uint32_t edges_counter = 0;

/***************************************Interrupts_Call_Backs********************************************************/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 || htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001074:	d10c      	bne.n	8001090 <HAL_TIM_IC_CaptureCallback+0x2c>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	7f1b      	ldrb	r3, [r3, #28]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d003      	beq.n	8001086 <HAL_TIM_IC_CaptureCallback+0x22>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	7f1b      	ldrb	r3, [r3, #28]
 8001082:	2b02      	cmp	r3, #2
 8001084:	d104      	bne.n	8001090 <HAL_TIM_IC_CaptureCallback+0x2c>
	{
		edges_counter++;
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <HAL_TIM_IC_CaptureCallback+0x38>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	3301      	adds	r3, #1
 800108c:	4a03      	ldr	r2, [pc, #12]	; (800109c <HAL_TIM_IC_CaptureCallback+0x38>)
 800108e:	6013      	str	r3, [r2, #0]
	}
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	200001f0 	.word	0x200001f0

080010a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	6078      	str	r0, [r7, #4]
	/*BT interrupt*/
	if(huart->Instance==USART3)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a16      	ldr	r2, [pc, #88]	; (8001108 <HAL_UART_RxCpltCallback+0x68>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d110      	bne.n	80010d4 <HAL_UART_RxCpltCallback+0x34>
	{
		/*Reactivating the interrupt*/
		HAL_UART_Receive_IT(&huart3, &received_char, 1);
 80010b2:	2201      	movs	r2, #1
 80010b4:	4915      	ldr	r1, [pc, #84]	; (800110c <HAL_UART_RxCpltCallback+0x6c>)
 80010b6:	4816      	ldr	r0, [pc, #88]	; (8001110 <HAL_UART_RxCpltCallback+0x70>)
 80010b8:	f003 fbdd 	bl	8004876 <HAL_UART_Receive_IT>

		/*Give the Notification to the CarControl task*/
		xTaskNotifyFromISR(Handle_CarControl,NULL,eNoAction,NULL);
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_UART_RxCpltCallback+0x74>)
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	2300      	movs	r3, #0
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	2300      	movs	r3, #0
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2300      	movs	r3, #0
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	f004 fc9d 	bl	8005a0c <xTaskGenericNotifyFromISR>
		/*Give the Notification to the Receive esp task*/
		xTaskNotifyFromISR(Handle_ESP_Status,NULL,eNoAction,NULL);

	}

}
 80010d2:	e014      	b.n	80010fe <HAL_UART_RxCpltCallback+0x5e>
	else if(huart->Instance==UART5)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <HAL_UART_RxCpltCallback+0x78>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d10f      	bne.n	80010fe <HAL_UART_RxCpltCallback+0x5e>
		HAL_UART_Receive_IT(&huart5,&ESP_Recieved_Char,1);
 80010de:	2201      	movs	r2, #1
 80010e0:	490e      	ldr	r1, [pc, #56]	; (800111c <HAL_UART_RxCpltCallback+0x7c>)
 80010e2:	480f      	ldr	r0, [pc, #60]	; (8001120 <HAL_UART_RxCpltCallback+0x80>)
 80010e4:	f003 fbc7 	bl	8004876 <HAL_UART_Receive_IT>
		xTaskNotifyFromISR(Handle_ESP_Status,NULL,eNoAction,NULL);
 80010e8:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <HAL_UART_RxCpltCallback+0x84>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	2300      	movs	r3, #0
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	2300      	movs	r3, #0
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2300      	movs	r3, #0
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	f004 fc87 	bl	8005a0c <xTaskGenericNotifyFromISR>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40004800 	.word	0x40004800
 800110c:	200006dc 	.word	0x200006dc
 8001110:	20000654 	.word	0x20000654
 8001114:	200006e0 	.word	0x200006e0
 8001118:	40005000 	.word	0x40005000
 800111c:	200006dd 	.word	0x200006dd
 8001120:	200005cc 	.word	0x200005cc
 8001124:	200006e8 	.word	0x200006e8

08001128 <Light_On>:
	Motors_Disabling();

}

void Light_On(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001132:	4802      	ldr	r0, [pc, #8]	; (800113c <Light_On+0x14>)
 8001134:	f001 fc74 	bl	8002a20 <HAL_GPIO_WritePin>

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40020000 	.word	0x40020000

08001140 <Light_OFF>:
void Light_OFF(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11 ,GPIO_PIN_SET);
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800114a:	4802      	ldr	r0, [pc, #8]	; (8001154 <Light_OFF+0x14>)
 800114c:	f001 fc68 	bl	8002a20 <HAL_GPIO_WritePin>
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40020000 	.word	0x40020000

08001158 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
	 * increments by 1 for future storing, it doesnt coincide with the tail
	 * the % UART_BUFFER_SIZE checking if the index of the next storing procedure
	 * is bigger than the buffer size(ex this iteration stores in 512 byte and the next one
	 * will be in the 513 so i should reset the (i) to zero to repeat again)*/

  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800116a:	3301      	adds	r3, #1
 800116c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001170:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	429a      	cmp	r2, r3
 800117c:	d009      	beq.n	8001192 <store_char+0x3a>
  {
	  /*Storing the charachter in the recent head pointed location*/
    buffer->buffer[buffer->head] = c;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	79f9      	ldrb	r1, [r7, #7]
 8001188:	54d1      	strb	r1, [r2, r3]

    /*After storing the character, incrementing the head for the next storing */
    buffer->head = i;
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8001192:	bf00      	nop
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	f003 0320 	and.w	r3, r3, #32
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d013      	beq.n	80011ea <Uart_isr+0x4a>
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	f003 0320 	and.w	r3, r3, #32
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d00e      	beq.n	80011ea <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80011da:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <Uart_isr+0xb4>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	4611      	mov	r1, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ffb8 	bl	8001158 <store_char>
        return;
 80011e8:	e031      	b.n	800124e <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d02c      	beq.n	800124e <Uart_isr+0xae>
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d027      	beq.n	800124e <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <Uart_isr+0xb8>)
 8001200:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001204:	4b14      	ldr	r3, [pc, #80]	; (8001258 <Uart_isr+0xb8>)
 8001206:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800120a:	429a      	cmp	r2, r3
 800120c:	d108      	bne.n	8001220 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800121c:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800121e:	e015      	b.n	800124c <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001220:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <Uart_isr+0xb8>)
 8001222:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001226:	4a0c      	ldr	r2, [pc, #48]	; (8001258 <Uart_isr+0xb8>)
 8001228:	5cd3      	ldrb	r3, [r2, r3]
 800122a:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <Uart_isr+0xb8>)
 800122e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001232:	3301      	adds	r3, #1
 8001234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001238:	4a07      	ldr	r2, [pc, #28]	; (8001258 <Uart_isr+0xb8>)
 800123a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	7bba      	ldrb	r2, [r7, #14]
 800124a:	605a      	str	r2, [r3, #4]
    	return;
 800124c:	bf00      	nop
    }
}
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000400 	.word	0x20000400
 8001258:	200001f8 	.word	0x200001f8

0800125c <Calculate_Car_Speed>:
#include "calculateSpeed.h"

extern uint32_t edges_counter;

float Calculate_Car_Speed()
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
	float Local_uint16Speed;
	Local_uint16Speed = (edges_counter/50)/(2000.0*60);
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <Calculate_Car_Speed+0x48>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a10      	ldr	r2, [pc, #64]	; (80012a8 <Calculate_Car_Speed+0x4c>)
 8001268:	fba2 2303 	umull	r2, r3, r2, r3
 800126c:	091b      	lsrs	r3, r3, #4
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f9b8 	bl	80005e4 <__aeabi_ui2d>
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <Calculate_Car_Speed+0x50>)
 800127a:	f7ff fb57 	bl	800092c <__aeabi_ddiv>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4610      	mov	r0, r2
 8001284:	4619      	mov	r1, r3
 8001286:	f7ff fd1f 	bl	8000cc8 <__aeabi_d2f>
 800128a:	4603      	mov	r3, r0
 800128c:	607b      	str	r3, [r7, #4]
	edges_counter=0;
 800128e:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <Calculate_Car_Speed+0x48>)
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
	return Local_uint16Speed;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	ee07 3a90 	vmov	s15, r3
}
 800129a:	eeb0 0a67 	vmov.f32	s0, s15
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	200001f0 	.word	0x200001f0
 80012a8:	51eb851f 	.word	0x51eb851f
 80012ac:	40fd4c00 	.word	0x40fd4c00

080012b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b4:	f001 f846 	bl	8002344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b8:	f000 f824 	bl	8001304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012bc:	f000 fada 	bl	8001874 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012c0:	f000 f880 	bl	80013c4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80012c4:	f000 fa58 	bl	8001778 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80012c8:	f000 fa80 	bl	80017cc <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80012cc:	f000 f8d6 	bl	800147c <MX_TIM2_Init>
  MX_I2C3_Init();
 80012d0:	f000 f8a6 	bl	8001420 <MX_I2C3_Init>
  MX_TIM3_Init();
 80012d4:	f000 f932 	bl	800153c <MX_TIM3_Init>
  MX_UART5_Init();
 80012d8:	f000 fa24 	bl	8001724 <MX_UART5_Init>
  MX_TIM6_Init();
 80012dc:	f000 f9a8 	bl	8001630 <MX_TIM6_Init>
  MX_TIM12_Init();
 80012e0:	f000 f9dc 	bl	800169c <MX_TIM12_Init>
  MX_USART6_UART_Init();
 80012e4:	f000 fa9c 	bl	8001820 <MX_USART6_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */
		Light_On();
 80012e8:	f7ff ff1e 	bl	8001128 <Light_On>
		HAL_Delay(5000);
 80012ec:	f241 3088 	movw	r0, #5000	; 0x1388
 80012f0:	f001 f86a 	bl	80023c8 <HAL_Delay>

		Light_OFF();
 80012f4:	f7ff ff24 	bl	8001140 <Light_OFF>
		HAL_Delay(5000);
 80012f8:	f241 3088 	movw	r0, #5000	; 0x1388
 80012fc:	f001 f864 	bl	80023c8 <HAL_Delay>
	{
 8001300:	e7f2      	b.n	80012e8 <main+0x38>
	...

08001304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b094      	sub	sp, #80	; 0x50
 8001308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	2234      	movs	r2, #52	; 0x34
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f006 fc85 	bl	8007c22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001318:	f107 0308 	add.w	r3, r7, #8
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	4b23      	ldr	r3, [pc, #140]	; (80013bc <SystemClock_Config+0xb8>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	4a22      	ldr	r2, [pc, #136]	; (80013bc <SystemClock_Config+0xb8>)
 8001332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001336:	6413      	str	r3, [r2, #64]	; 0x40
 8001338:	4b20      	ldr	r3, [pc, #128]	; (80013bc <SystemClock_Config+0xb8>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001344:	2300      	movs	r3, #0
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <SystemClock_Config+0xbc>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001350:	4a1b      	ldr	r2, [pc, #108]	; (80013c0 <SystemClock_Config+0xbc>)
 8001352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <SystemClock_Config+0xbc>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001360:	603b      	str	r3, [r7, #0]
 8001362:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001364:	2302      	movs	r3, #2
 8001366:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001368:	2301      	movs	r3, #1
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800136c:	2310      	movs	r3, #16
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001370:	2300      	movs	r3, #0
 8001372:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4618      	mov	r0, r3
 800137a:	f001 ffa5 	bl	80032c8 <HAL_RCC_OscConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001384:	f000 fb16 	bl	80019b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001388:	230f      	movs	r3, #15
 800138a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800139c:	f107 0308 	add.w	r3, r7, #8
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f001 fc9a 	bl	8002cdc <HAL_RCC_ClockConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013ae:	f000 fb01 	bl	80019b4 <Error_Handler>
  }
}
 80013b2:	bf00      	nop
 80013b4:	3750      	adds	r7, #80	; 0x50
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40007000 	.word	0x40007000

080013c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <MX_I2C1_Init+0x54>)
 80013ca:	4a14      	ldr	r2, [pc, #80]	; (800141c <MX_I2C1_Init+0x58>)
 80013cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 1000;
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <MX_I2C1_Init+0x54>)
 80013d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013d4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <MX_I2C1_Init+0x54>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_I2C1_Init+0x54>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <MX_I2C1_Init+0x54>)
 80013e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <MX_I2C1_Init+0x54>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_I2C1_Init+0x54>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <MX_I2C1_Init+0x54>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_I2C1_Init+0x54>)
 80013fe:	2200      	movs	r2, #0
 8001400:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_I2C1_Init+0x54>)
 8001404:	f001 fb26 	bl	8002a54 <HAL_I2C_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800140e:	f000 fad1 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000404 	.word	0x20000404
 800141c:	40005400 	.word	0x40005400

08001420 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <MX_I2C3_Init+0x50>)
 8001426:	4a13      	ldr	r2, [pc, #76]	; (8001474 <MX_I2C3_Init+0x54>)
 8001428:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <MX_I2C3_Init+0x50>)
 800142c:	4a12      	ldr	r2, [pc, #72]	; (8001478 <MX_I2C3_Init+0x58>)
 800142e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <MX_I2C3_Init+0x50>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <MX_I2C3_Init+0x50>)
 8001438:	2200      	movs	r2, #0
 800143a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <MX_I2C3_Init+0x50>)
 800143e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001442:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001444:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <MX_I2C3_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <MX_I2C3_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001450:	4b07      	ldr	r3, [pc, #28]	; (8001470 <MX_I2C3_Init+0x50>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <MX_I2C3_Init+0x50>)
 8001458:	2200      	movs	r2, #0
 800145a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800145c:	4804      	ldr	r0, [pc, #16]	; (8001470 <MX_I2C3_Init+0x50>)
 800145e:	f001 faf9 	bl	8002a54 <HAL_I2C_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001468:	f000 faa4 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000458 	.word	0x20000458
 8001474:	40005c00 	.word	0x40005c00
 8001478:	000186a0 	.word	0x000186a0

0800147c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800148c:	463b      	mov	r3, r7
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001498:	4b27      	ldr	r3, [pc, #156]	; (8001538 <MX_TIM2_Init+0xbc>)
 800149a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800149e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 80014a0:	4b25      	ldr	r3, [pc, #148]	; (8001538 <MX_TIM2_Init+0xbc>)
 80014a2:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80014a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a8:	4b23      	ldr	r3, [pc, #140]	; (8001538 <MX_TIM2_Init+0xbc>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000;
 80014ae:	4b22      	ldr	r3, [pc, #136]	; (8001538 <MX_TIM2_Init+0xbc>)
 80014b0:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80014b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <MX_TIM2_Init+0xbc>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014bc:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <MX_TIM2_Init+0xbc>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80014c2:	481d      	ldr	r0, [pc, #116]	; (8001538 <MX_TIM2_Init+0xbc>)
 80014c4:	f002 faad 	bl	8003a22 <HAL_TIM_IC_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014ce:	f000 fa71 	bl	80019b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014da:	f107 0310 	add.w	r3, r7, #16
 80014de:	4619      	mov	r1, r3
 80014e0:	4815      	ldr	r0, [pc, #84]	; (8001538 <MX_TIM2_Init+0xbc>)
 80014e2:	f003 f8eb 	bl	80046bc <HAL_TIMEx_MasterConfigSynchronization>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80014ec:	f000 fa62 	bl	80019b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80014f0:	230a      	movs	r3, #10
 80014f2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014f4:	2301      	movs	r3, #1
 80014f6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001500:	463b      	mov	r3, r7
 8001502:	2200      	movs	r2, #0
 8001504:	4619      	mov	r1, r3
 8001506:	480c      	ldr	r0, [pc, #48]	; (8001538 <MX_TIM2_Init+0xbc>)
 8001508:	f002 fbe2 	bl	8003cd0 <HAL_TIM_IC_ConfigChannel>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001512:	f000 fa4f 	bl	80019b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001516:	2300      	movs	r3, #0
 8001518:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800151a:	463b      	mov	r3, r7
 800151c:	2204      	movs	r2, #4
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_TIM2_Init+0xbc>)
 8001522:	f002 fbd5 	bl	8003cd0 <HAL_TIM_IC_ConfigChannel>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800152c:	f000 fa42 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200004ac 	.word	0x200004ac

0800153c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001542:	f107 0320 	add.w	r3, r7, #32
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	611a      	str	r2, [r3, #16]
 800155a:	615a      	str	r2, [r3, #20]
 800155c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800155e:	4b32      	ldr	r3, [pc, #200]	; (8001628 <MX_TIM3_Init+0xec>)
 8001560:	4a32      	ldr	r2, [pc, #200]	; (800162c <MX_TIM3_Init+0xf0>)
 8001562:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160-1;
 8001564:	4b30      	ldr	r3, [pc, #192]	; (8001628 <MX_TIM3_Init+0xec>)
 8001566:	229f      	movs	r2, #159	; 0x9f
 8001568:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156a:	4b2f      	ldr	r3, [pc, #188]	; (8001628 <MX_TIM3_Init+0xec>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001570:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <MX_TIM3_Init+0xec>)
 8001572:	2263      	movs	r2, #99	; 0x63
 8001574:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001576:	4b2c      	ldr	r3, [pc, #176]	; (8001628 <MX_TIM3_Init+0xec>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157c:	4b2a      	ldr	r3, [pc, #168]	; (8001628 <MX_TIM3_Init+0xec>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001582:	4829      	ldr	r0, [pc, #164]	; (8001628 <MX_TIM3_Init+0xec>)
 8001584:	f002 f9fe 	bl	8003984 <HAL_TIM_PWM_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800158e:	f000 fa11 	bl	80019b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800159a:	f107 0320 	add.w	r3, r7, #32
 800159e:	4619      	mov	r1, r3
 80015a0:	4821      	ldr	r0, [pc, #132]	; (8001628 <MX_TIM3_Init+0xec>)
 80015a2:	f003 f88b 	bl	80046bc <HAL_TIMEx_MasterConfigSynchronization>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80015ac:	f000 fa02 	bl	80019b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b0:	2360      	movs	r3, #96	; 0x60
 80015b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	2200      	movs	r2, #0
 80015c4:	4619      	mov	r1, r3
 80015c6:	4818      	ldr	r0, [pc, #96]	; (8001628 <MX_TIM3_Init+0xec>)
 80015c8:	f002 fc1e 	bl	8003e08 <HAL_TIM_PWM_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80015d2:	f000 f9ef 	bl	80019b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2204      	movs	r2, #4
 80015da:	4619      	mov	r1, r3
 80015dc:	4812      	ldr	r0, [pc, #72]	; (8001628 <MX_TIM3_Init+0xec>)
 80015de:	f002 fc13 	bl	8003e08 <HAL_TIM_PWM_ConfigChannel>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80015e8:	f000 f9e4 	bl	80019b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	2208      	movs	r2, #8
 80015f0:	4619      	mov	r1, r3
 80015f2:	480d      	ldr	r0, [pc, #52]	; (8001628 <MX_TIM3_Init+0xec>)
 80015f4:	f002 fc08 	bl	8003e08 <HAL_TIM_PWM_ConfigChannel>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 80015fe:	f000 f9d9 	bl	80019b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	220c      	movs	r2, #12
 8001606:	4619      	mov	r1, r3
 8001608:	4807      	ldr	r0, [pc, #28]	; (8001628 <MX_TIM3_Init+0xec>)
 800160a:	f002 fbfd 	bl	8003e08 <HAL_TIM_PWM_ConfigChannel>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8001614:	f000 f9ce 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001618:	4803      	ldr	r0, [pc, #12]	; (8001628 <MX_TIM3_Init+0xec>)
 800161a:	f000 fb3d 	bl	8001c98 <HAL_TIM_MspPostInit>

}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200004f4 	.word	0x200004f4
 800162c:	40000400 	.word	0x40000400

08001630 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001636:	463b      	mov	r3, r7
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <MX_TIM6_Init+0x64>)
 8001640:	4a15      	ldr	r2, [pc, #84]	; (8001698 <MX_TIM6_Init+0x68>)
 8001642:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <MX_TIM6_Init+0x64>)
 8001646:	2200      	movs	r2, #0
 8001648:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164a:	4b12      	ldr	r3, [pc, #72]	; (8001694 <MX_TIM6_Init+0x64>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001650:	4b10      	ldr	r3, [pc, #64]	; (8001694 <MX_TIM6_Init+0x64>)
 8001652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001656:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <MX_TIM6_Init+0x64>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800165e:	480d      	ldr	r0, [pc, #52]	; (8001694 <MX_TIM6_Init+0x64>)
 8001660:	f002 f8d0 	bl	8003804 <HAL_TIM_Base_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800166a:	f000 f9a3 	bl	80019b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001676:	463b      	mov	r3, r7
 8001678:	4619      	mov	r1, r3
 800167a:	4806      	ldr	r0, [pc, #24]	; (8001694 <MX_TIM6_Init+0x64>)
 800167c:	f003 f81e 	bl	80046bc <HAL_TIMEx_MasterConfigSynchronization>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001686:	f000 f995 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	2000053c 	.word	0x2000053c
 8001698:	40001000 	.word	0x40001000

0800169c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
 80016b0:	615a      	str	r2, [r3, #20]
 80016b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <MX_TIM12_Init+0x80>)
 80016b6:	4a1a      	ldr	r2, [pc, #104]	; (8001720 <MX_TIM12_Init+0x84>)
 80016b8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 80-1;
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <MX_TIM12_Init+0x80>)
 80016bc:	224f      	movs	r2, #79	; 0x4f
 80016be:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c0:	4b16      	ldr	r3, [pc, #88]	; (800171c <MX_TIM12_Init+0x80>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 100-1;
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <MX_TIM12_Init+0x80>)
 80016c8:	2263      	movs	r2, #99	; 0x63
 80016ca:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <MX_TIM12_Init+0x80>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <MX_TIM12_Init+0x80>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80016d8:	4810      	ldr	r0, [pc, #64]	; (800171c <MX_TIM12_Init+0x80>)
 80016da:	f002 f953 	bl	8003984 <HAL_TIM_PWM_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 80016e4:	f000 f966 	bl	80019b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e8:	2360      	movs	r3, #96	; 0x60
 80016ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	2200      	movs	r2, #0
 80016fc:	4619      	mov	r1, r3
 80016fe:	4807      	ldr	r0, [pc, #28]	; (800171c <MX_TIM12_Init+0x80>)
 8001700:	f002 fb82 	bl	8003e08 <HAL_TIM_PWM_ConfigChannel>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 800170a:	f000 f953 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800170e:	4803      	ldr	r0, [pc, #12]	; (800171c <MX_TIM12_Init+0x80>)
 8001710:	f000 fac2 	bl	8001c98 <HAL_TIM_MspPostInit>

}
 8001714:	bf00      	nop
 8001716:	3720      	adds	r7, #32
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000584 	.word	0x20000584
 8001720:	40001800 	.word	0x40001800

08001724 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <MX_UART5_Init+0x4c>)
 800172a:	4a12      	ldr	r2, [pc, #72]	; (8001774 <MX_UART5_Init+0x50>)
 800172c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <MX_UART5_Init+0x4c>)
 8001730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001734:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <MX_UART5_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <MX_UART5_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <MX_UART5_Init+0x4c>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_UART5_Init+0x4c>)
 800174a:	220c      	movs	r2, #12
 800174c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <MX_UART5_Init+0x4c>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MX_UART5_Init+0x4c>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <MX_UART5_Init+0x4c>)
 800175c:	f003 f83e 	bl	80047dc <HAL_UART_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001766:	f000 f925 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200005cc 	.word	0x200005cc
 8001774:	40005000 	.word	0x40005000

08001778 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 800177e:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <MX_USART1_UART_Init+0x50>)
 8001780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 8001784:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 800179e:	220c      	movs	r2, #12
 80017a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017ae:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 80017b0:	f003 f814 	bl	80047dc <HAL_UART_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017ba:	f000 f8fb 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000610 	.word	0x20000610
 80017c8:	40011000 	.word	0x40011000

080017cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_USART3_UART_Init+0x4c>)
 80017d2:	4a12      	ldr	r2, [pc, #72]	; (800181c <MX_USART3_UART_Init+0x50>)
 80017d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <MX_USART3_UART_Init+0x4c>)
 80017d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <MX_USART3_UART_Init+0x4c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <MX_USART3_UART_Init+0x4c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <MX_USART3_UART_Init+0x4c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <MX_USART3_UART_Init+0x4c>)
 80017f2:	220c      	movs	r2, #12
 80017f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <MX_USART3_UART_Init+0x4c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <MX_USART3_UART_Init+0x4c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001802:	4805      	ldr	r0, [pc, #20]	; (8001818 <MX_USART3_UART_Init+0x4c>)
 8001804:	f002 ffea 	bl	80047dc <HAL_UART_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800180e:	f000 f8d1 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000654 	.word	0x20000654
 800181c:	40004800 	.word	0x40004800

08001820 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <MX_USART6_UART_Init+0x4c>)
 8001826:	4a12      	ldr	r2, [pc, #72]	; (8001870 <MX_USART6_UART_Init+0x50>)
 8001828:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <MX_USART6_UART_Init+0x4c>)
 800182c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001830:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <MX_USART6_UART_Init+0x4c>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <MX_USART6_UART_Init+0x4c>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800183e:	4b0b      	ldr	r3, [pc, #44]	; (800186c <MX_USART6_UART_Init+0x4c>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001844:	4b09      	ldr	r3, [pc, #36]	; (800186c <MX_USART6_UART_Init+0x4c>)
 8001846:	220c      	movs	r2, #12
 8001848:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800184a:	4b08      	ldr	r3, [pc, #32]	; (800186c <MX_USART6_UART_Init+0x4c>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <MX_USART6_UART_Init+0x4c>)
 8001852:	2200      	movs	r2, #0
 8001854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001856:	4805      	ldr	r0, [pc, #20]	; (800186c <MX_USART6_UART_Init+0x4c>)
 8001858:	f002 ffc0 	bl	80047dc <HAL_UART_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001862:	f000 f8a7 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000698 	.word	0x20000698
 8001870:	40011400 	.word	0x40011400

08001874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	; 0x28
 8001878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
 8001888:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	4b3c      	ldr	r3, [pc, #240]	; (8001980 <MX_GPIO_Init+0x10c>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a3b      	ldr	r2, [pc, #236]	; (8001980 <MX_GPIO_Init+0x10c>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b39      	ldr	r3, [pc, #228]	; (8001980 <MX_GPIO_Init+0x10c>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b35      	ldr	r3, [pc, #212]	; (8001980 <MX_GPIO_Init+0x10c>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a34      	ldr	r2, [pc, #208]	; (8001980 <MX_GPIO_Init+0x10c>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b32      	ldr	r3, [pc, #200]	; (8001980 <MX_GPIO_Init+0x10c>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	4b2e      	ldr	r3, [pc, #184]	; (8001980 <MX_GPIO_Init+0x10c>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a2d      	ldr	r2, [pc, #180]	; (8001980 <MX_GPIO_Init+0x10c>)
 80018cc:	f043 0302 	orr.w	r3, r3, #2
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b2b      	ldr	r3, [pc, #172]	; (8001980 <MX_GPIO_Init+0x10c>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	4b27      	ldr	r3, [pc, #156]	; (8001980 <MX_GPIO_Init+0x10c>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a26      	ldr	r2, [pc, #152]	; (8001980 <MX_GPIO_Init+0x10c>)
 80018e8:	f043 0308 	orr.w	r3, r3, #8
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b24      	ldr	r3, [pc, #144]	; (8001980 <MX_GPIO_Init+0x10c>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80018fa:	2200      	movs	r2, #0
 80018fc:	f242 311c 	movw	r1, #8988	; 0x231c
 8001900:	4820      	ldr	r0, [pc, #128]	; (8001984 <MX_GPIO_Init+0x110>)
 8001902:	f001 f88d 	bl	8002a20 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800190c:	481e      	ldr	r0, [pc, #120]	; (8001988 <MX_GPIO_Init+0x114>)
 800190e:	f001 f887 	bl	8002a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001918:	481c      	ldr	r0, [pc, #112]	; (800198c <MX_GPIO_Init+0x118>)
 800191a:	f001 f881 	bl	8002a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 PC4
                           PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800191e:	f242 331c 	movw	r3, #8988	; 0x231c
 8001922:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001924:	2301      	movs	r3, #1
 8001926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4619      	mov	r1, r3
 8001936:	4813      	ldr	r0, [pc, #76]	; (8001984 <MX_GPIO_Init+0x110>)
 8001938:	f000 fede 	bl	80026f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800193c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	480c      	ldr	r0, [pc, #48]	; (8001988 <MX_GPIO_Init+0x114>)
 8001956:	f000 fecf 	bl	80026f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 800195a:	f44f 7308 	mov.w	r3, #544	; 0x220
 800195e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	4619      	mov	r1, r3
 8001972:	4806      	ldr	r0, [pc, #24]	; (800198c <MX_GPIO_Init+0x118>)
 8001974:	f000 fec0 	bl	80026f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001978:	bf00      	nop
 800197a:	3728      	adds	r7, #40	; 0x28
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40023800 	.word	0x40023800
 8001984:	40020800 	.word	0x40020800
 8001988:	40020000 	.word	0x40020000
 800198c:	40020400 	.word	0x40020400

08001990 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d101      	bne.n	80019a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019a2:	f000 fcf1 	bl	8002388 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40001400 	.word	0x40001400

080019b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b8:	b672      	cpsid	i
}
 80019ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80019bc:	e7fe      	b.n	80019bc <Error_Handler+0x8>
	...

080019c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <HAL_MspInit+0x4c>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	4a0f      	ldr	r2, [pc, #60]	; (8001a0c <HAL_MspInit+0x4c>)
 80019d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d4:	6453      	str	r3, [r2, #68]	; 0x44
 80019d6:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <HAL_MspInit+0x4c>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_MspInit+0x4c>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	4a08      	ldr	r2, [pc, #32]	; (8001a0c <HAL_MspInit+0x4c>)
 80019ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f0:	6413      	str	r3, [r2, #64]	; 0x40
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_MspInit+0x4c>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800

08001a10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08c      	sub	sp, #48	; 0x30
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 031c 	add.w	r3, r7, #28
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a41      	ldr	r2, [pc, #260]	; (8001b34 <HAL_I2C_MspInit+0x124>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d12c      	bne.n	8001a8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	61bb      	str	r3, [r7, #24]
 8001a36:	4b40      	ldr	r3, [pc, #256]	; (8001b38 <HAL_I2C_MspInit+0x128>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a3f      	ldr	r2, [pc, #252]	; (8001b38 <HAL_I2C_MspInit+0x128>)
 8001a3c:	f043 0302 	orr.w	r3, r3, #2
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b3d      	ldr	r3, [pc, #244]	; (8001b38 <HAL_I2C_MspInit+0x128>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	61bb      	str	r3, [r7, #24]
 8001a4c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a4e:	23c0      	movs	r3, #192	; 0xc0
 8001a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a52:	2312      	movs	r3, #18
 8001a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a5e:	2304      	movs	r3, #4
 8001a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a62:	f107 031c 	add.w	r3, r7, #28
 8001a66:	4619      	mov	r1, r3
 8001a68:	4834      	ldr	r0, [pc, #208]	; (8001b3c <HAL_I2C_MspInit+0x12c>)
 8001a6a:	f000 fe45 	bl	80026f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	4b31      	ldr	r3, [pc, #196]	; (8001b38 <HAL_I2C_MspInit+0x128>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	4a30      	ldr	r2, [pc, #192]	; (8001b38 <HAL_I2C_MspInit+0x128>)
 8001a78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7e:	4b2e      	ldr	r3, [pc, #184]	; (8001b38 <HAL_I2C_MspInit+0x128>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001a8a:	e04f      	b.n	8001b2c <HAL_I2C_MspInit+0x11c>
  else if(hi2c->Instance==I2C3)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a2b      	ldr	r2, [pc, #172]	; (8001b40 <HAL_I2C_MspInit+0x130>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d14a      	bne.n	8001b2c <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	4b27      	ldr	r3, [pc, #156]	; (8001b38 <HAL_I2C_MspInit+0x128>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a26      	ldr	r2, [pc, #152]	; (8001b38 <HAL_I2C_MspInit+0x128>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b24      	ldr	r3, [pc, #144]	; (8001b38 <HAL_I2C_MspInit+0x128>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <HAL_I2C_MspInit+0x128>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a1f      	ldr	r2, [pc, #124]	; (8001b38 <HAL_I2C_MspInit+0x128>)
 8001abc:	f043 0302 	orr.w	r3, r3, #2
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <HAL_I2C_MspInit+0x128>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ace:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ad4:	2312      	movs	r3, #18
 8001ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ae0:	2304      	movs	r3, #4
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4816      	ldr	r0, [pc, #88]	; (8001b44 <HAL_I2C_MspInit+0x134>)
 8001aec:	f000 fe04 	bl	80026f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001af0:	2310      	movs	r3, #16
 8001af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001af4:	2312      	movs	r3, #18
 8001af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afc:	2303      	movs	r3, #3
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b00:	2304      	movs	r3, #4
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	4619      	mov	r1, r3
 8001b0a:	480c      	ldr	r0, [pc, #48]	; (8001b3c <HAL_I2C_MspInit+0x12c>)
 8001b0c:	f000 fdf4 	bl	80026f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_I2C_MspInit+0x128>)
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <HAL_I2C_MspInit+0x128>)
 8001b1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_I2C_MspInit+0x128>)
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
}
 8001b2c:	bf00      	nop
 8001b2e:	3730      	adds	r7, #48	; 0x30
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40005400 	.word	0x40005400
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40020400 	.word	0x40020400
 8001b40:	40005c00 	.word	0x40005c00
 8001b44:	40020000 	.word	0x40020000

08001b48 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b68:	d133      	bne.n	8001bd2 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <HAL_TIM_IC_MspInit+0x94>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	4a1a      	ldr	r2, [pc, #104]	; (8001bdc <HAL_TIM_IC_MspInit+0x94>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7a:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <HAL_TIM_IC_MspInit+0x94>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <HAL_TIM_IC_MspInit+0x94>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a13      	ldr	r2, [pc, #76]	; (8001bdc <HAL_TIM_IC_MspInit+0x94>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <HAL_TIM_IC_MspInit+0x94>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4808      	ldr	r0, [pc, #32]	; (8001be0 <HAL_TIM_IC_MspInit+0x98>)
 8001bbe:	f000 fd9b 	bl	80026f8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	201c      	movs	r0, #28
 8001bc8:	f000 fcda 	bl	8002580 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bcc:	201c      	movs	r0, #28
 8001bce:	f000 fcf3 	bl	80025b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3728      	adds	r7, #40	; 0x28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40020000 	.word	0x40020000

08001be4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a15      	ldr	r2, [pc, #84]	; (8001c48 <HAL_TIM_PWM_MspInit+0x64>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d10e      	bne.n	8001c14 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <HAL_TIM_PWM_MspInit+0x68>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	4a13      	ldr	r2, [pc, #76]	; (8001c4c <HAL_TIM_PWM_MspInit+0x68>)
 8001c00:	f043 0302 	orr.w	r3, r3, #2
 8001c04:	6413      	str	r3, [r2, #64]	; 0x40
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HAL_TIM_PWM_MspInit+0x68>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001c12:	e012      	b.n	8001c3a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0d      	ldr	r2, [pc, #52]	; (8001c50 <HAL_TIM_PWM_MspInit+0x6c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d10d      	bne.n	8001c3a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <HAL_TIM_PWM_MspInit+0x68>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	4a09      	ldr	r2, [pc, #36]	; (8001c4c <HAL_TIM_PWM_MspInit+0x68>)
 8001c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <HAL_TIM_PWM_MspInit+0x68>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
}
 8001c3a:	bf00      	nop
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40000400 	.word	0x40000400
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40001800 	.word	0x40001800

08001c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <HAL_TIM_Base_MspInit+0x3c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d10d      	bne.n	8001c82 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_TIM_Base_MspInit+0x40>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	4a09      	ldr	r2, [pc, #36]	; (8001c94 <HAL_TIM_Base_MspInit+0x40>)
 8001c70:	f043 0310 	orr.w	r3, r3, #16
 8001c74:	6413      	str	r3, [r2, #64]	; 0x40
 8001c76:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <HAL_TIM_Base_MspInit+0x40>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 0310 	and.w	r3, r3, #16
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001c82:	bf00      	nop
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40001000 	.word	0x40001000
 8001c94:	40023800 	.word	0x40023800

08001c98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	; 0x28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a33      	ldr	r2, [pc, #204]	; (8001d84 <HAL_TIM_MspPostInit+0xec>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d13c      	bne.n	8001d34 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	4b32      	ldr	r3, [pc, #200]	; (8001d88 <HAL_TIM_MspPostInit+0xf0>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a31      	ldr	r2, [pc, #196]	; (8001d88 <HAL_TIM_MspPostInit+0xf0>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b2f      	ldr	r3, [pc, #188]	; (8001d88 <HAL_TIM_MspPostInit+0xf0>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	4b2b      	ldr	r3, [pc, #172]	; (8001d88 <HAL_TIM_MspPostInit+0xf0>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a2a      	ldr	r2, [pc, #168]	; (8001d88 <HAL_TIM_MspPostInit+0xf0>)
 8001ce0:	f043 0302 	orr.w	r3, r3, #2
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b28      	ldr	r3, [pc, #160]	; (8001d88 <HAL_TIM_MspPostInit+0xf0>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cf2:	23c0      	movs	r3, #192	; 0xc0
 8001cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d02:	2302      	movs	r3, #2
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d06:	f107 0314 	add.w	r3, r7, #20
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	481f      	ldr	r0, [pc, #124]	; (8001d8c <HAL_TIM_MspPostInit+0xf4>)
 8001d0e:	f000 fcf3 	bl	80026f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d12:	2303      	movs	r3, #3
 8001d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d22:	2302      	movs	r3, #2
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4818      	ldr	r0, [pc, #96]	; (8001d90 <HAL_TIM_MspPostInit+0xf8>)
 8001d2e:	f000 fce3 	bl	80026f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001d32:	e023      	b.n	8001d7c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM12)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a16      	ldr	r2, [pc, #88]	; (8001d94 <HAL_TIM_MspPostInit+0xfc>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d11e      	bne.n	8001d7c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <HAL_TIM_MspPostInit+0xf0>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a10      	ldr	r2, [pc, #64]	; (8001d88 <HAL_TIM_MspPostInit+0xf0>)
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <HAL_TIM_MspPostInit+0xf0>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d60:	2302      	movs	r3, #2
 8001d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001d6c:	2309      	movs	r3, #9
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	4619      	mov	r1, r3
 8001d76:	4806      	ldr	r0, [pc, #24]	; (8001d90 <HAL_TIM_MspPostInit+0xf8>)
 8001d78:	f000 fcbe 	bl	80026f8 <HAL_GPIO_Init>
}
 8001d7c:	bf00      	nop
 8001d7e:	3728      	adds	r7, #40	; 0x28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40000400 	.word	0x40000400
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	40020400 	.word	0x40020400
 8001d94:	40001800 	.word	0x40001800

08001d98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b090      	sub	sp, #64	; 0x40
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a80      	ldr	r2, [pc, #512]	; (8001fb8 <HAL_UART_MspInit+0x220>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d153      	bne.n	8001e62 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dbe:	4b7f      	ldr	r3, [pc, #508]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	4a7e      	ldr	r2, [pc, #504]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001dc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dca:	4b7c      	ldr	r3, [pc, #496]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dda:	4b78      	ldr	r3, [pc, #480]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a77      	ldr	r2, [pc, #476]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b75      	ldr	r3, [pc, #468]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	623b      	str	r3, [r7, #32]
 8001df6:	4b71      	ldr	r3, [pc, #452]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a70      	ldr	r2, [pc, #448]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001dfc:	f043 0308 	orr.w	r3, r3, #8
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b6e      	ldr	r3, [pc, #440]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	623b      	str	r3, [r7, #32]
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001e20:	2308      	movs	r3, #8
 8001e22:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4865      	ldr	r0, [pc, #404]	; (8001fc0 <HAL_UART_MspInit+0x228>)
 8001e2c:	f000 fc64 	bl	80026f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e30:	2304      	movs	r3, #4
 8001e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001e40:	2308      	movs	r3, #8
 8001e42:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e48:	4619      	mov	r1, r3
 8001e4a:	485e      	ldr	r0, [pc, #376]	; (8001fc4 <HAL_UART_MspInit+0x22c>)
 8001e4c:	f000 fc54 	bl	80026f8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 6, 0);
 8001e50:	2200      	movs	r2, #0
 8001e52:	2106      	movs	r1, #6
 8001e54:	2035      	movs	r0, #53	; 0x35
 8001e56:	f000 fb93 	bl	8002580 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001e5a:	2035      	movs	r0, #53	; 0x35
 8001e5c:	f000 fbac 	bl	80025b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001e60:	e0a6      	b.n	8001fb0 <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a58      	ldr	r2, [pc, #352]	; (8001fc8 <HAL_UART_MspInit+0x230>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d135      	bne.n	8001ed8 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
 8001e70:	4b52      	ldr	r3, [pc, #328]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e74:	4a51      	ldr	r2, [pc, #324]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001e76:	f043 0310 	orr.w	r3, r3, #16
 8001e7a:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7c:	4b4f      	ldr	r3, [pc, #316]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61bb      	str	r3, [r7, #24]
 8001e8c:	4b4b      	ldr	r3, [pc, #300]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	4a4a      	ldr	r2, [pc, #296]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	6313      	str	r3, [r2, #48]	; 0x30
 8001e98:	4b48      	ldr	r3, [pc, #288]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	61bb      	str	r3, [r7, #24]
 8001ea2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ea4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001eb6:	2307      	movs	r3, #7
 8001eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4842      	ldr	r0, [pc, #264]	; (8001fcc <HAL_UART_MspInit+0x234>)
 8001ec2:	f000 fc19 	bl	80026f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 8, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2108      	movs	r1, #8
 8001eca:	2025      	movs	r0, #37	; 0x25
 8001ecc:	f000 fb58 	bl	8002580 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ed0:	2025      	movs	r0, #37	; 0x25
 8001ed2:	f000 fb71 	bl	80025b8 <HAL_NVIC_EnableIRQ>
}
 8001ed6:	e06b      	b.n	8001fb0 <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART3)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a3c      	ldr	r2, [pc, #240]	; (8001fd0 <HAL_UART_MspInit+0x238>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d135      	bne.n	8001f4e <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	4b35      	ldr	r3, [pc, #212]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	4a34      	ldr	r2, [pc, #208]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef2:	4b32      	ldr	r3, [pc, #200]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	4b2e      	ldr	r3, [pc, #184]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	4a2d      	ldr	r2, [pc, #180]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001f08:	f043 0304 	orr.w	r3, r3, #4
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0e:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8001f1a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	2302      	movs	r3, #2
 8001f22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f2c:	2307      	movs	r3, #7
 8001f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f34:	4619      	mov	r1, r3
 8001f36:	4822      	ldr	r0, [pc, #136]	; (8001fc0 <HAL_UART_MspInit+0x228>)
 8001f38:	f000 fbde 	bl	80026f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 7, 0);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2107      	movs	r1, #7
 8001f40:	2027      	movs	r0, #39	; 0x27
 8001f42:	f000 fb1d 	bl	8002580 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f46:	2027      	movs	r0, #39	; 0x27
 8001f48:	f000 fb36 	bl	80025b8 <HAL_NVIC_EnableIRQ>
}
 8001f4c:	e030      	b.n	8001fb0 <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART6)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a20      	ldr	r2, [pc, #128]	; (8001fd4 <HAL_UART_MspInit+0x23c>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d12b      	bne.n	8001fb0 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f60:	4a16      	ldr	r2, [pc, #88]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001f62:	f043 0320 	orr.w	r3, r3, #32
 8001f66:	6453      	str	r3, [r2, #68]	; 0x44
 8001f68:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	f003 0320 	and.w	r3, r3, #32
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f74:	2300      	movs	r3, #0
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	4a0f      	ldr	r2, [pc, #60]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001f7e:	f043 0304 	orr.w	r3, r3, #4
 8001f82:	6313      	str	r3, [r2, #48]	; 0x30
 8001f84:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <HAL_UART_MspInit+0x224>)
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f90:	23c0      	movs	r3, #192	; 0xc0
 8001f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f94:	2302      	movs	r3, #2
 8001f96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001fa0:	2308      	movs	r3, #8
 8001fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4805      	ldr	r0, [pc, #20]	; (8001fc0 <HAL_UART_MspInit+0x228>)
 8001fac:	f000 fba4 	bl	80026f8 <HAL_GPIO_Init>
}
 8001fb0:	bf00      	nop
 8001fb2:	3740      	adds	r7, #64	; 0x40
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40005000 	.word	0x40005000
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40020800 	.word	0x40020800
 8001fc4:	40020c00 	.word	0x40020c00
 8001fc8:	40011000 	.word	0x40011000
 8001fcc:	40020000 	.word	0x40020000
 8001fd0:	40004800 	.word	0x40004800
 8001fd4:	40011400 	.word	0x40011400

08001fd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08e      	sub	sp, #56	; 0x38
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	4b33      	ldr	r3, [pc, #204]	; (80020bc <HAL_InitTick+0xe4>)
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	4a32      	ldr	r2, [pc, #200]	; (80020bc <HAL_InitTick+0xe4>)
 8001ff2:	f043 0320 	orr.w	r3, r3, #32
 8001ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff8:	4b30      	ldr	r3, [pc, #192]	; (80020bc <HAL_InitTick+0xe4>)
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	f003 0320 	and.w	r3, r3, #32
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002004:	f107 0210 	add.w	r2, r7, #16
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	4611      	mov	r1, r2
 800200e:	4618      	mov	r0, r3
 8002010:	f000 ff7e 	bl	8002f10 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800201a:	2b00      	cmp	r3, #0
 800201c:	d103      	bne.n	8002026 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800201e:	f000 ff4f 	bl	8002ec0 <HAL_RCC_GetPCLK1Freq>
 8002022:	6378      	str	r0, [r7, #52]	; 0x34
 8002024:	e004      	b.n	8002030 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002026:	f000 ff4b 	bl	8002ec0 <HAL_RCC_GetPCLK1Freq>
 800202a:	4603      	mov	r3, r0
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002032:	4a23      	ldr	r2, [pc, #140]	; (80020c0 <HAL_InitTick+0xe8>)
 8002034:	fba2 2303 	umull	r2, r3, r2, r3
 8002038:	0c9b      	lsrs	r3, r3, #18
 800203a:	3b01      	subs	r3, #1
 800203c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800203e:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <HAL_InitTick+0xec>)
 8002040:	4a21      	ldr	r2, [pc, #132]	; (80020c8 <HAL_InitTick+0xf0>)
 8002042:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002044:	4b1f      	ldr	r3, [pc, #124]	; (80020c4 <HAL_InitTick+0xec>)
 8002046:	f240 32e7 	movw	r2, #999	; 0x3e7
 800204a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800204c:	4a1d      	ldr	r2, [pc, #116]	; (80020c4 <HAL_InitTick+0xec>)
 800204e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002050:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002052:	4b1c      	ldr	r3, [pc, #112]	; (80020c4 <HAL_InitTick+0xec>)
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002058:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <HAL_InitTick+0xec>)
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205e:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <HAL_InitTick+0xec>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8002064:	4817      	ldr	r0, [pc, #92]	; (80020c4 <HAL_InitTick+0xec>)
 8002066:	f001 fbcd 	bl	8003804 <HAL_TIM_Base_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002070:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002074:	2b00      	cmp	r3, #0
 8002076:	d11b      	bne.n	80020b0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8002078:	4812      	ldr	r0, [pc, #72]	; (80020c4 <HAL_InitTick+0xec>)
 800207a:	f001 fc13 	bl	80038a4 <HAL_TIM_Base_Start_IT>
 800207e:	4603      	mov	r3, r0
 8002080:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002084:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002088:	2b00      	cmp	r3, #0
 800208a:	d111      	bne.n	80020b0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800208c:	2037      	movs	r0, #55	; 0x37
 800208e:	f000 fa93 	bl	80025b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b0f      	cmp	r3, #15
 8002096:	d808      	bhi.n	80020aa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8002098:	2200      	movs	r2, #0
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	2037      	movs	r0, #55	; 0x37
 800209e:	f000 fa6f 	bl	8002580 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020a2:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <HAL_InitTick+0xf4>)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6013      	str	r3, [r2, #0]
 80020a8:	e002      	b.n	80020b0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80020b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3738      	adds	r7, #56	; 0x38
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40023800 	.word	0x40023800
 80020c0:	431bde83 	.word	0x431bde83
 80020c4:	200006ec 	.word	0x200006ec
 80020c8:	40001400 	.word	0x40001400
 80020cc:	20000004 	.word	0x20000004

080020d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020d4:	e7fe      	b.n	80020d4 <NMI_Handler+0x4>

080020d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020da:	e7fe      	b.n	80020da <HardFault_Handler+0x4>

080020dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020e0:	e7fe      	b.n	80020e0 <MemManage_Handler+0x4>

080020e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020e6:	e7fe      	b.n	80020e6 <BusFault_Handler+0x4>

080020e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ec:	e7fe      	b.n	80020ec <UsageFault_Handler+0x4>
	...

080020f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM2_IRQn 0 */
  if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_UPDATE) != RESET) {
 80020f6:	4b22      	ldr	r3, [pc, #136]	; (8002180 <TIM2_IRQHandler+0x90>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b01      	cmp	r3, #1
 8002102:	d131      	bne.n	8002168 <TIM2_IRQHandler+0x78>
		// Timer overflow interrupt
		Global_Speed = round(Calculate_Car_Speed());
 8002104:	f7ff f8aa 	bl	800125c <Calculate_Car_Speed>
 8002108:	ee10 3a10 	vmov	r3, s0
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe fa8b 	bl	8000628 <__aeabi_f2d>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	ec43 2b10 	vmov	d0, r2, r3
 800211a:	f007 fcc3 	bl	8009aa4 <round>
 800211e:	ec53 2b10 	vmov	r2, r3, d0
 8002122:	4610      	mov	r0, r2
 8002124:	4619      	mov	r1, r3
 8002126:	f7fe fdaf 	bl	8000c88 <__aeabi_d2uiz>
 800212a:	4603      	mov	r3, r0
 800212c:	b29a      	uxth	r2, r3
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <TIM2_IRQHandler+0x94>)
 8002130:	801a      	strh	r2, [r3, #0]
        if(Global_GPS_Speed_Completetion==Nothing_Completed)
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <TIM2_IRQHandler+0x98>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d103      	bne.n	8002142 <TIM2_IRQHandler+0x52>
        {
        	Global_GPS_Speed_Completetion=Half_Completed_Speed;
 800213a:	4b13      	ldr	r3, [pc, #76]	; (8002188 <TIM2_IRQHandler+0x98>)
 800213c:	2201      	movs	r2, #1
 800213e:	701a      	strb	r2, [r3, #0]
 8002140:	e017      	b.n	8002172 <TIM2_IRQHandler+0x82>

        }
        else if(Global_GPS_Speed_Completetion==Half_Completed_GPS)
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <TIM2_IRQHandler+0x98>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d113      	bne.n	8002172 <TIM2_IRQHandler+0x82>
        {
        	Global_GPS_Speed_Completetion=Nothing_Completed;
 800214a:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <TIM2_IRQHandler+0x98>)
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]

        	/*Notify the ESPPeriodicTask*/
        	xTaskNotifyFromISR(Handle_ESP_Periodic,0,eNoAction,NULL);
 8002150:	4b0e      	ldr	r3, [pc, #56]	; (800218c <TIM2_IRQHandler+0x9c>)
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	2300      	movs	r3, #0
 8002156:	9301      	str	r3, [sp, #4]
 8002158:	2300      	movs	r3, #0
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	2300      	movs	r3, #0
 800215e:	2200      	movs	r2, #0
 8002160:	2100      	movs	r1, #0
 8002162:	f003 fc53 	bl	8005a0c <xTaskGenericNotifyFromISR>
 8002166:	e004      	b.n	8002172 <TIM2_IRQHandler+0x82>
        }

	}else {
		edges_counter++;
 8002168:	4b09      	ldr	r3, [pc, #36]	; (8002190 <TIM2_IRQHandler+0xa0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	3301      	adds	r3, #1
 800216e:	4a08      	ldr	r2, [pc, #32]	; (8002190 <TIM2_IRQHandler+0xa0>)
 8002170:	6013      	str	r3, [r2, #0]
	}
  
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002172:	4803      	ldr	r0, [pc, #12]	; (8002180 <TIM2_IRQHandler+0x90>)
 8002174:	f001 fca4 	bl	8003ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	200004ac 	.word	0x200004ac
 8002184:	200001f6 	.word	0x200001f6
 8002188:	200001f4 	.word	0x200001f4
 800218c:	200006e4 	.word	0x200006e4
 8002190:	200001f0 	.word	0x200001f0

08002194 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <USART1_IRQHandler+0x10>)
 800219a:	f7ff f801 	bl	80011a0 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000610 	.word	0x20000610

080021a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <USART3_IRQHandler+0x10>)
 80021ae:	f002 fb93 	bl	80048d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000654 	.word	0x20000654

080021bc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <UART5_IRQHandler+0x10>)
 80021c2:	f002 fb89 	bl	80048d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200005cc 	.word	0x200005cc

080021d0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80021d4:	4802      	ldr	r0, [pc, #8]	; (80021e0 <TIM7_IRQHandler+0x10>)
 80021d6:	f001 fc73 	bl	8003ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	200006ec 	.word	0x200006ec

080021e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return 1;
 80021e8:	2301      	movs	r3, #1
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <_kill>:

int _kill(int pid, int sig)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021fe:	f005 fd51 	bl	8007ca4 <__errno>
 8002202:	4603      	mov	r3, r0
 8002204:	2216      	movs	r2, #22
 8002206:	601a      	str	r2, [r3, #0]
  return -1;
 8002208:	f04f 33ff 	mov.w	r3, #4294967295
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <_exit>:

void _exit (int status)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800221c:	f04f 31ff 	mov.w	r1, #4294967295
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ffe7 	bl	80021f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002226:	e7fe      	b.n	8002226 <_exit+0x12>

08002228 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	e00a      	b.n	8002250 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800223a:	f3af 8000 	nop.w
 800223e:	4601      	mov	r1, r0
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	60ba      	str	r2, [r7, #8]
 8002246:	b2ca      	uxtb	r2, r1
 8002248:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	3301      	adds	r3, #1
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	429a      	cmp	r2, r3
 8002256:	dbf0      	blt.n	800223a <_read+0x12>
  }

  return len;
 8002258:	687b      	ldr	r3, [r7, #4]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800226a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800228a:	605a      	str	r2, [r3, #4]
  return 0;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <_isatty>:

int _isatty(int file)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022a2:	2301      	movs	r3, #1
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
	...

080022cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <SystemInit+0x20>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	4a05      	ldr	r2, [pc, #20]	; (80022ec <SystemInit+0x20>)
 80022d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002328 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022f4:	480d      	ldr	r0, [pc, #52]	; (800232c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022f6:	490e      	ldr	r1, [pc, #56]	; (8002330 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022f8:	4a0e      	ldr	r2, [pc, #56]	; (8002334 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022fc:	e002      	b.n	8002304 <LoopCopyDataInit>

080022fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002302:	3304      	adds	r3, #4

08002304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002308:	d3f9      	bcc.n	80022fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800230a:	4a0b      	ldr	r2, [pc, #44]	; (8002338 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800230c:	4c0b      	ldr	r4, [pc, #44]	; (800233c <LoopFillZerobss+0x26>)
  movs r3, #0
 800230e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002310:	e001      	b.n	8002316 <LoopFillZerobss>

08002312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002314:	3204      	adds	r2, #4

08002316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002318:	d3fb      	bcc.n	8002312 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800231a:	f7ff ffd7 	bl	80022cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800231e:	f005 fcc7 	bl	8007cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002322:	f7fe ffc5 	bl	80012b0 <main>
  bx  lr    
 8002326:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002328:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800232c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002330:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002334:	08009f24 	.word	0x08009f24
  ldr r2, =_sbss
 8002338:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800233c:	20000f00 	.word	0x20000f00

08002340 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002340:	e7fe      	b.n	8002340 <ADC_IRQHandler>
	...

08002344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002348:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <HAL_Init+0x40>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0d      	ldr	r2, [pc, #52]	; (8002384 <HAL_Init+0x40>)
 800234e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002352:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_Init+0x40>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <HAL_Init+0x40>)
 800235a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800235e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002360:	4b08      	ldr	r3, [pc, #32]	; (8002384 <HAL_Init+0x40>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a07      	ldr	r2, [pc, #28]	; (8002384 <HAL_Init+0x40>)
 8002366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800236c:	2003      	movs	r0, #3
 800236e:	f000 f8fc 	bl	800256a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002372:	200f      	movs	r0, #15
 8002374:	f7ff fe30 	bl	8001fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002378:	f7ff fb22 	bl	80019c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023c00 	.word	0x40023c00

08002388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <HAL_IncTick+0x20>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_IncTick+0x24>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4413      	add	r3, r2
 8002398:	4a04      	ldr	r2, [pc, #16]	; (80023ac <HAL_IncTick+0x24>)
 800239a:	6013      	str	r3, [r2, #0]
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000008 	.word	0x20000008
 80023ac:	20000734 	.word	0x20000734

080023b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return uwTick;
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <HAL_GetTick+0x14>)
 80023b6:	681b      	ldr	r3, [r3, #0]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	20000734 	.word	0x20000734

080023c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023d0:	f7ff ffee 	bl	80023b0 <HAL_GetTick>
 80023d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e0:	d005      	beq.n	80023ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <HAL_Delay+0x44>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4413      	add	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023ee:	bf00      	nop
 80023f0:	f7ff ffde 	bl	80023b0 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d8f7      	bhi.n	80023f0 <HAL_Delay+0x28>
  {
  }
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000008 	.word	0x20000008

08002410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002420:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <__NVIC_SetPriorityGrouping+0x44>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800242c:	4013      	ands	r3, r2
 800242e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800243c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002442:	4a04      	ldr	r2, [pc, #16]	; (8002454 <__NVIC_SetPriorityGrouping+0x44>)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	60d3      	str	r3, [r2, #12]
}
 8002448:	bf00      	nop
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <__NVIC_GetPriorityGrouping+0x18>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	f003 0307 	and.w	r3, r3, #7
}
 8002466:	4618      	mov	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	2b00      	cmp	r3, #0
 8002484:	db0b      	blt.n	800249e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	f003 021f 	and.w	r2, r3, #31
 800248c:	4907      	ldr	r1, [pc, #28]	; (80024ac <__NVIC_EnableIRQ+0x38>)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	2001      	movs	r0, #1
 8002496:	fa00 f202 	lsl.w	r2, r0, r2
 800249a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	e000e100 	.word	0xe000e100

080024b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	6039      	str	r1, [r7, #0]
 80024ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	db0a      	blt.n	80024da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	490c      	ldr	r1, [pc, #48]	; (80024fc <__NVIC_SetPriority+0x4c>)
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	0112      	lsls	r2, r2, #4
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	440b      	add	r3, r1
 80024d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d8:	e00a      	b.n	80024f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4908      	ldr	r1, [pc, #32]	; (8002500 <__NVIC_SetPriority+0x50>)
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	3b04      	subs	r3, #4
 80024e8:	0112      	lsls	r2, r2, #4
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	440b      	add	r3, r1
 80024ee:	761a      	strb	r2, [r3, #24]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000e100 	.word	0xe000e100
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002504:	b480      	push	{r7}
 8002506:	b089      	sub	sp, #36	; 0x24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f1c3 0307 	rsb	r3, r3, #7
 800251e:	2b04      	cmp	r3, #4
 8002520:	bf28      	it	cs
 8002522:	2304      	movcs	r3, #4
 8002524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3304      	adds	r3, #4
 800252a:	2b06      	cmp	r3, #6
 800252c:	d902      	bls.n	8002534 <NVIC_EncodePriority+0x30>
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3b03      	subs	r3, #3
 8002532:	e000      	b.n	8002536 <NVIC_EncodePriority+0x32>
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002538:	f04f 32ff 	mov.w	r2, #4294967295
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43da      	mvns	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	401a      	ands	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800254c:	f04f 31ff 	mov.w	r1, #4294967295
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	43d9      	mvns	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	4313      	orrs	r3, r2
         );
}
 800255e:	4618      	mov	r0, r3
 8002560:	3724      	adds	r7, #36	; 0x24
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ff4c 	bl	8002410 <__NVIC_SetPriorityGrouping>
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002592:	f7ff ff61 	bl	8002458 <__NVIC_GetPriorityGrouping>
 8002596:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	68b9      	ldr	r1, [r7, #8]
 800259c:	6978      	ldr	r0, [r7, #20]
 800259e:	f7ff ffb1 	bl	8002504 <NVIC_EncodePriority>
 80025a2:	4602      	mov	r2, r0
 80025a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff ff80 	bl	80024b0 <__NVIC_SetPriority>
}
 80025b0:	bf00      	nop
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff ff54 	bl	8002474 <__NVIC_EnableIRQ>
}
 80025cc:	bf00      	nop
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025e2:	f7ff fee5 	bl	80023b0 <HAL_GetTick>
 80025e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d008      	beq.n	8002606 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2280      	movs	r2, #128	; 0x80
 80025f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e052      	b.n	80026ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0216 	bic.w	r2, r2, #22
 8002614:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695a      	ldr	r2, [r3, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002624:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	2b00      	cmp	r3, #0
 800262c:	d103      	bne.n	8002636 <HAL_DMA_Abort+0x62>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002632:	2b00      	cmp	r3, #0
 8002634:	d007      	beq.n	8002646 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0208 	bic.w	r2, r2, #8
 8002644:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0201 	bic.w	r2, r2, #1
 8002654:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002656:	e013      	b.n	8002680 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002658:	f7ff feaa 	bl	80023b0 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b05      	cmp	r3, #5
 8002664:	d90c      	bls.n	8002680 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2220      	movs	r2, #32
 800266a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2203      	movs	r2, #3
 8002670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e015      	b.n	80026ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1e4      	bne.n	8002658 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002692:	223f      	movs	r2, #63	; 0x3f
 8002694:	409a      	lsls	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d004      	beq.n	80026d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2280      	movs	r2, #128	; 0x80
 80026cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e00c      	b.n	80026ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2205      	movs	r2, #5
 80026d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0201 	bic.w	r2, r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b089      	sub	sp, #36	; 0x24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800270a:	2300      	movs	r3, #0
 800270c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
 8002712:	e165      	b.n	80029e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002714:	2201      	movs	r2, #1
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	429a      	cmp	r2, r3
 800272e:	f040 8154 	bne.w	80029da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b01      	cmp	r3, #1
 800273c:	d005      	beq.n	800274a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002746:	2b02      	cmp	r3, #2
 8002748:	d130      	bne.n	80027ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	2203      	movs	r2, #3
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002780:	2201      	movs	r2, #1
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	f003 0201 	and.w	r2, r3, #1
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d017      	beq.n	80027e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	2203      	movs	r2, #3
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d123      	bne.n	800283c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	08da      	lsrs	r2, r3, #3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3208      	adds	r2, #8
 80027fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002800:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	220f      	movs	r2, #15
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4313      	orrs	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	08da      	lsrs	r2, r3, #3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3208      	adds	r2, #8
 8002836:	69b9      	ldr	r1, [r7, #24]
 8002838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	2203      	movs	r2, #3
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0203 	and.w	r2, r3, #3
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 80ae 	beq.w	80029da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	4b5d      	ldr	r3, [pc, #372]	; (80029f8 <HAL_GPIO_Init+0x300>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	4a5c      	ldr	r2, [pc, #368]	; (80029f8 <HAL_GPIO_Init+0x300>)
 8002888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800288c:	6453      	str	r3, [r2, #68]	; 0x44
 800288e:	4b5a      	ldr	r3, [pc, #360]	; (80029f8 <HAL_GPIO_Init+0x300>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800289a:	4a58      	ldr	r2, [pc, #352]	; (80029fc <HAL_GPIO_Init+0x304>)
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	089b      	lsrs	r3, r3, #2
 80028a0:	3302      	adds	r3, #2
 80028a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	220f      	movs	r2, #15
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4013      	ands	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a4f      	ldr	r2, [pc, #316]	; (8002a00 <HAL_GPIO_Init+0x308>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d025      	beq.n	8002912 <HAL_GPIO_Init+0x21a>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a4e      	ldr	r2, [pc, #312]	; (8002a04 <HAL_GPIO_Init+0x30c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d01f      	beq.n	800290e <HAL_GPIO_Init+0x216>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a4d      	ldr	r2, [pc, #308]	; (8002a08 <HAL_GPIO_Init+0x310>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d019      	beq.n	800290a <HAL_GPIO_Init+0x212>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a4c      	ldr	r2, [pc, #304]	; (8002a0c <HAL_GPIO_Init+0x314>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d013      	beq.n	8002906 <HAL_GPIO_Init+0x20e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a4b      	ldr	r2, [pc, #300]	; (8002a10 <HAL_GPIO_Init+0x318>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00d      	beq.n	8002902 <HAL_GPIO_Init+0x20a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a4a      	ldr	r2, [pc, #296]	; (8002a14 <HAL_GPIO_Init+0x31c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d007      	beq.n	80028fe <HAL_GPIO_Init+0x206>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a49      	ldr	r2, [pc, #292]	; (8002a18 <HAL_GPIO_Init+0x320>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d101      	bne.n	80028fa <HAL_GPIO_Init+0x202>
 80028f6:	2306      	movs	r3, #6
 80028f8:	e00c      	b.n	8002914 <HAL_GPIO_Init+0x21c>
 80028fa:	2307      	movs	r3, #7
 80028fc:	e00a      	b.n	8002914 <HAL_GPIO_Init+0x21c>
 80028fe:	2305      	movs	r3, #5
 8002900:	e008      	b.n	8002914 <HAL_GPIO_Init+0x21c>
 8002902:	2304      	movs	r3, #4
 8002904:	e006      	b.n	8002914 <HAL_GPIO_Init+0x21c>
 8002906:	2303      	movs	r3, #3
 8002908:	e004      	b.n	8002914 <HAL_GPIO_Init+0x21c>
 800290a:	2302      	movs	r3, #2
 800290c:	e002      	b.n	8002914 <HAL_GPIO_Init+0x21c>
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <HAL_GPIO_Init+0x21c>
 8002912:	2300      	movs	r3, #0
 8002914:	69fa      	ldr	r2, [r7, #28]
 8002916:	f002 0203 	and.w	r2, r2, #3
 800291a:	0092      	lsls	r2, r2, #2
 800291c:	4093      	lsls	r3, r2
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002924:	4935      	ldr	r1, [pc, #212]	; (80029fc <HAL_GPIO_Init+0x304>)
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	089b      	lsrs	r3, r3, #2
 800292a:	3302      	adds	r3, #2
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002932:	4b3a      	ldr	r3, [pc, #232]	; (8002a1c <HAL_GPIO_Init+0x324>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002956:	4a31      	ldr	r2, [pc, #196]	; (8002a1c <HAL_GPIO_Init+0x324>)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800295c:	4b2f      	ldr	r3, [pc, #188]	; (8002a1c <HAL_GPIO_Init+0x324>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002980:	4a26      	ldr	r2, [pc, #152]	; (8002a1c <HAL_GPIO_Init+0x324>)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002986:	4b25      	ldr	r3, [pc, #148]	; (8002a1c <HAL_GPIO_Init+0x324>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	43db      	mvns	r3, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029aa:	4a1c      	ldr	r2, [pc, #112]	; (8002a1c <HAL_GPIO_Init+0x324>)
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029b0:	4b1a      	ldr	r3, [pc, #104]	; (8002a1c <HAL_GPIO_Init+0x324>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029d4:	4a11      	ldr	r2, [pc, #68]	; (8002a1c <HAL_GPIO_Init+0x324>)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3301      	adds	r3, #1
 80029de:	61fb      	str	r3, [r7, #28]
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	2b0f      	cmp	r3, #15
 80029e4:	f67f ae96 	bls.w	8002714 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029e8:	bf00      	nop
 80029ea:	bf00      	nop
 80029ec:	3724      	adds	r7, #36	; 0x24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40013800 	.word	0x40013800
 8002a00:	40020000 	.word	0x40020000
 8002a04:	40020400 	.word	0x40020400
 8002a08:	40020800 	.word	0x40020800
 8002a0c:	40020c00 	.word	0x40020c00
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40021400 	.word	0x40021400
 8002a18:	40021800 	.word	0x40021800
 8002a1c:	40013c00 	.word	0x40013c00

08002a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	807b      	strh	r3, [r7, #2]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a30:	787b      	ldrb	r3, [r7, #1]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a36:	887a      	ldrh	r2, [r7, #2]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a3c:	e003      	b.n	8002a46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a3e:	887b      	ldrh	r3, [r7, #2]
 8002a40:	041a      	lsls	r2, r3, #16
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	619a      	str	r2, [r3, #24]
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e12b      	b.n	8002cbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7fe ffc8 	bl	8001a10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2224      	movs	r2, #36	; 0x24
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0201 	bic.w	r2, r2, #1
 8002a96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aa6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ab6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ab8:	f000 fa02 	bl	8002ec0 <HAL_RCC_GetPCLK1Freq>
 8002abc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	4a81      	ldr	r2, [pc, #516]	; (8002cc8 <HAL_I2C_Init+0x274>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d807      	bhi.n	8002ad8 <HAL_I2C_Init+0x84>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4a80      	ldr	r2, [pc, #512]	; (8002ccc <HAL_I2C_Init+0x278>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	bf94      	ite	ls
 8002ad0:	2301      	movls	r3, #1
 8002ad2:	2300      	movhi	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	e006      	b.n	8002ae6 <HAL_I2C_Init+0x92>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4a7d      	ldr	r2, [pc, #500]	; (8002cd0 <HAL_I2C_Init+0x27c>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	bf94      	ite	ls
 8002ae0:	2301      	movls	r3, #1
 8002ae2:	2300      	movhi	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e0e7      	b.n	8002cbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4a78      	ldr	r2, [pc, #480]	; (8002cd4 <HAL_I2C_Init+0x280>)
 8002af2:	fba2 2303 	umull	r2, r3, r2, r3
 8002af6:	0c9b      	lsrs	r3, r3, #18
 8002af8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	4a6a      	ldr	r2, [pc, #424]	; (8002cc8 <HAL_I2C_Init+0x274>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d802      	bhi.n	8002b28 <HAL_I2C_Init+0xd4>
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	3301      	adds	r3, #1
 8002b26:	e009      	b.n	8002b3c <HAL_I2C_Init+0xe8>
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b2e:	fb02 f303 	mul.w	r3, r2, r3
 8002b32:	4a69      	ldr	r2, [pc, #420]	; (8002cd8 <HAL_I2C_Init+0x284>)
 8002b34:	fba2 2303 	umull	r2, r3, r2, r3
 8002b38:	099b      	lsrs	r3, r3, #6
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	430b      	orrs	r3, r1
 8002b42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	495c      	ldr	r1, [pc, #368]	; (8002cc8 <HAL_I2C_Init+0x274>)
 8002b58:	428b      	cmp	r3, r1
 8002b5a:	d819      	bhi.n	8002b90 <HAL_I2C_Init+0x13c>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1e59      	subs	r1, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b6a:	1c59      	adds	r1, r3, #1
 8002b6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b70:	400b      	ands	r3, r1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00a      	beq.n	8002b8c <HAL_I2C_Init+0x138>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	1e59      	subs	r1, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b84:	3301      	adds	r3, #1
 8002b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b8a:	e051      	b.n	8002c30 <HAL_I2C_Init+0x1dc>
 8002b8c:	2304      	movs	r3, #4
 8002b8e:	e04f      	b.n	8002c30 <HAL_I2C_Init+0x1dc>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d111      	bne.n	8002bbc <HAL_I2C_Init+0x168>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	1e58      	subs	r0, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6859      	ldr	r1, [r3, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	440b      	add	r3, r1
 8002ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002baa:	3301      	adds	r3, #1
 8002bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bf0c      	ite	eq
 8002bb4:	2301      	moveq	r3, #1
 8002bb6:	2300      	movne	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	e012      	b.n	8002be2 <HAL_I2C_Init+0x18e>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	1e58      	subs	r0, r3, #1
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6859      	ldr	r1, [r3, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	0099      	lsls	r1, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	bf0c      	ite	eq
 8002bdc:	2301      	moveq	r3, #1
 8002bde:	2300      	movne	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <HAL_I2C_Init+0x196>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e022      	b.n	8002c30 <HAL_I2C_Init+0x1dc>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10e      	bne.n	8002c10 <HAL_I2C_Init+0x1bc>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	1e58      	subs	r0, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6859      	ldr	r1, [r3, #4]
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	440b      	add	r3, r1
 8002c00:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c04:	3301      	adds	r3, #1
 8002c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c0e:	e00f      	b.n	8002c30 <HAL_I2C_Init+0x1dc>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	1e58      	subs	r0, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6859      	ldr	r1, [r3, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	0099      	lsls	r1, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c26:	3301      	adds	r3, #1
 8002c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	6809      	ldr	r1, [r1, #0]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69da      	ldr	r2, [r3, #28]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6911      	ldr	r1, [r2, #16]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68d2      	ldr	r2, [r2, #12]
 8002c6a:	4311      	orrs	r1, r2
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6812      	ldr	r2, [r2, #0]
 8002c70:	430b      	orrs	r3, r1
 8002c72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695a      	ldr	r2, [r3, #20]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0201 	orr.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	000186a0 	.word	0x000186a0
 8002ccc:	001e847f 	.word	0x001e847f
 8002cd0:	003d08ff 	.word	0x003d08ff
 8002cd4:	431bde83 	.word	0x431bde83
 8002cd8:	10624dd3 	.word	0x10624dd3

08002cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0cc      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b68      	ldr	r3, [pc, #416]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d90c      	bls.n	8002d18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b65      	ldr	r3, [pc, #404]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d06:	4b63      	ldr	r3, [pc, #396]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0b8      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d020      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d30:	4b59      	ldr	r3, [pc, #356]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	4a58      	ldr	r2, [pc, #352]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d48:	4b53      	ldr	r3, [pc, #332]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	4a52      	ldr	r2, [pc, #328]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d54:	4b50      	ldr	r3, [pc, #320]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	494d      	ldr	r1, [pc, #308]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d044      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d107      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	4b47      	ldr	r3, [pc, #284]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d119      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e07f      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d003      	beq.n	8002d9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d107      	bne.n	8002daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9a:	4b3f      	ldr	r3, [pc, #252]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e06f      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002daa:	4b3b      	ldr	r3, [pc, #236]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e067      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dba:	4b37      	ldr	r3, [pc, #220]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f023 0203 	bic.w	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4934      	ldr	r1, [pc, #208]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dcc:	f7ff faf0 	bl	80023b0 <HAL_GetTick>
 8002dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd2:	e00a      	b.n	8002dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd4:	f7ff faec 	bl	80023b0 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e04f      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dea:	4b2b      	ldr	r3, [pc, #172]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 020c 	and.w	r2, r3, #12
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d1eb      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dfc:	4b25      	ldr	r3, [pc, #148]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d20c      	bcs.n	8002e24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0a:	4b22      	ldr	r3, [pc, #136]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e12:	4b20      	ldr	r3, [pc, #128]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e032      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e30:	4b19      	ldr	r3, [pc, #100]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4916      	ldr	r1, [pc, #88]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e4e:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	490e      	ldr	r1, [pc, #56]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e62:	f000 f887 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8002e66:	4602      	mov	r2, r0
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	490a      	ldr	r1, [pc, #40]	; (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002e74:	5ccb      	ldrb	r3, [r1, r3]
 8002e76:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7a:	4a09      	ldr	r2, [pc, #36]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e7e:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff f8a8 	bl	8001fd8 <HAL_InitTick>

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023c00 	.word	0x40023c00
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	08009b80 	.word	0x08009b80
 8002ea0:	20000000 	.word	0x20000000
 8002ea4:	20000004 	.word	0x20000004

08002ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eac:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8002eae:	681b      	ldr	r3, [r3, #0]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	20000000 	.word	0x20000000

08002ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ec4:	f7ff fff0 	bl	8002ea8 <HAL_RCC_GetHCLKFreq>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	0a9b      	lsrs	r3, r3, #10
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	4903      	ldr	r1, [pc, #12]	; (8002ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ed6:	5ccb      	ldrb	r3, [r1, r3]
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	08009b90 	.word	0x08009b90

08002ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002eec:	f7ff ffdc 	bl	8002ea8 <HAL_RCC_GetHCLKFreq>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	0b5b      	lsrs	r3, r3, #13
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	4903      	ldr	r1, [pc, #12]	; (8002f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002efe:	5ccb      	ldrb	r3, [r1, r3]
 8002f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	08009b90 	.word	0x08009b90

08002f10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	220f      	movs	r2, #15
 8002f1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f20:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <HAL_RCC_GetClockConfig+0x5c>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 0203 	and.w	r2, r3, #3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f2c:	4b0f      	ldr	r3, [pc, #60]	; (8002f6c <HAL_RCC_GetClockConfig+0x5c>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <HAL_RCC_GetClockConfig+0x5c>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f44:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <HAL_RCC_GetClockConfig+0x5c>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	08db      	lsrs	r3, r3, #3
 8002f4a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f52:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <HAL_RCC_GetClockConfig+0x60>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 020f 	and.w	r2, r3, #15
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	601a      	str	r2, [r3, #0]
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	40023c00 	.word	0x40023c00

08002f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f78:	b0a6      	sub	sp, #152	; 0x98
 8002f7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f9a:	4bc8      	ldr	r3, [pc, #800]	; (80032bc <HAL_RCC_GetSysClockFreq+0x348>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b0c      	cmp	r3, #12
 8002fa4:	f200 817e 	bhi.w	80032a4 <HAL_RCC_GetSysClockFreq+0x330>
 8002fa8:	a201      	add	r2, pc, #4	; (adr r2, 8002fb0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fae:	bf00      	nop
 8002fb0:	08002fe5 	.word	0x08002fe5
 8002fb4:	080032a5 	.word	0x080032a5
 8002fb8:	080032a5 	.word	0x080032a5
 8002fbc:	080032a5 	.word	0x080032a5
 8002fc0:	08002fed 	.word	0x08002fed
 8002fc4:	080032a5 	.word	0x080032a5
 8002fc8:	080032a5 	.word	0x080032a5
 8002fcc:	080032a5 	.word	0x080032a5
 8002fd0:	08002ff5 	.word	0x08002ff5
 8002fd4:	080032a5 	.word	0x080032a5
 8002fd8:	080032a5 	.word	0x080032a5
 8002fdc:	080032a5 	.word	0x080032a5
 8002fe0:	0800315f 	.word	0x0800315f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fe4:	4bb6      	ldr	r3, [pc, #728]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002fe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002fea:	e15f      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fec:	4bb5      	ldr	r3, [pc, #724]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x350>)
 8002fee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002ff2:	e15b      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ff4:	4bb1      	ldr	r3, [pc, #708]	; (80032bc <HAL_RCC_GetSysClockFreq+0x348>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ffc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003000:	4bae      	ldr	r3, [pc, #696]	; (80032bc <HAL_RCC_GetSysClockFreq+0x348>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d031      	beq.n	8003070 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800300c:	4bab      	ldr	r3, [pc, #684]	; (80032bc <HAL_RCC_GetSysClockFreq+0x348>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	099b      	lsrs	r3, r3, #6
 8003012:	2200      	movs	r2, #0
 8003014:	66bb      	str	r3, [r7, #104]	; 0x68
 8003016:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003018:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800301a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800301e:	663b      	str	r3, [r7, #96]	; 0x60
 8003020:	2300      	movs	r3, #0
 8003022:	667b      	str	r3, [r7, #100]	; 0x64
 8003024:	4ba7      	ldr	r3, [pc, #668]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x350>)
 8003026:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800302a:	462a      	mov	r2, r5
 800302c:	fb03 f202 	mul.w	r2, r3, r2
 8003030:	2300      	movs	r3, #0
 8003032:	4621      	mov	r1, r4
 8003034:	fb01 f303 	mul.w	r3, r1, r3
 8003038:	4413      	add	r3, r2
 800303a:	4aa2      	ldr	r2, [pc, #648]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x350>)
 800303c:	4621      	mov	r1, r4
 800303e:	fba1 1202 	umull	r1, r2, r1, r2
 8003042:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003044:	460a      	mov	r2, r1
 8003046:	67ba      	str	r2, [r7, #120]	; 0x78
 8003048:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800304a:	4413      	add	r3, r2
 800304c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800304e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003052:	2200      	movs	r2, #0
 8003054:	65bb      	str	r3, [r7, #88]	; 0x58
 8003056:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003058:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800305c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003060:	f7fd fe82 	bl	8000d68 <__aeabi_uldivmod>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4613      	mov	r3, r2
 800306a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800306e:	e064      	b.n	800313a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003070:	4b92      	ldr	r3, [pc, #584]	; (80032bc <HAL_RCC_GetSysClockFreq+0x348>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	099b      	lsrs	r3, r3, #6
 8003076:	2200      	movs	r2, #0
 8003078:	653b      	str	r3, [r7, #80]	; 0x50
 800307a:	657a      	str	r2, [r7, #84]	; 0x54
 800307c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800307e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003082:	64bb      	str	r3, [r7, #72]	; 0x48
 8003084:	2300      	movs	r3, #0
 8003086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003088:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800308c:	4622      	mov	r2, r4
 800308e:	462b      	mov	r3, r5
 8003090:	f04f 0000 	mov.w	r0, #0
 8003094:	f04f 0100 	mov.w	r1, #0
 8003098:	0159      	lsls	r1, r3, #5
 800309a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800309e:	0150      	lsls	r0, r2, #5
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4621      	mov	r1, r4
 80030a6:	1a51      	subs	r1, r2, r1
 80030a8:	6139      	str	r1, [r7, #16]
 80030aa:	4629      	mov	r1, r5
 80030ac:	eb63 0301 	sbc.w	r3, r3, r1
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030be:	4659      	mov	r1, fp
 80030c0:	018b      	lsls	r3, r1, #6
 80030c2:	4651      	mov	r1, sl
 80030c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030c8:	4651      	mov	r1, sl
 80030ca:	018a      	lsls	r2, r1, #6
 80030cc:	4651      	mov	r1, sl
 80030ce:	ebb2 0801 	subs.w	r8, r2, r1
 80030d2:	4659      	mov	r1, fp
 80030d4:	eb63 0901 	sbc.w	r9, r3, r1
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030ec:	4690      	mov	r8, r2
 80030ee:	4699      	mov	r9, r3
 80030f0:	4623      	mov	r3, r4
 80030f2:	eb18 0303 	adds.w	r3, r8, r3
 80030f6:	60bb      	str	r3, [r7, #8]
 80030f8:	462b      	mov	r3, r5
 80030fa:	eb49 0303 	adc.w	r3, r9, r3
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800310c:	4629      	mov	r1, r5
 800310e:	028b      	lsls	r3, r1, #10
 8003110:	4621      	mov	r1, r4
 8003112:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003116:	4621      	mov	r1, r4
 8003118:	028a      	lsls	r2, r1, #10
 800311a:	4610      	mov	r0, r2
 800311c:	4619      	mov	r1, r3
 800311e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003122:	2200      	movs	r2, #0
 8003124:	643b      	str	r3, [r7, #64]	; 0x40
 8003126:	647a      	str	r2, [r7, #68]	; 0x44
 8003128:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800312c:	f7fd fe1c 	bl	8000d68 <__aeabi_uldivmod>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4613      	mov	r3, r2
 8003136:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800313a:	4b60      	ldr	r3, [pc, #384]	; (80032bc <HAL_RCC_GetSysClockFreq+0x348>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	0c1b      	lsrs	r3, r3, #16
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	3301      	adds	r3, #1
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800314c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003150:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003154:	fbb2 f3f3 	udiv	r3, r2, r3
 8003158:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800315c:	e0a6      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800315e:	4b57      	ldr	r3, [pc, #348]	; (80032bc <HAL_RCC_GetSysClockFreq+0x348>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003166:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800316a:	4b54      	ldr	r3, [pc, #336]	; (80032bc <HAL_RCC_GetSysClockFreq+0x348>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d02a      	beq.n	80031cc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003176:	4b51      	ldr	r3, [pc, #324]	; (80032bc <HAL_RCC_GetSysClockFreq+0x348>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	099b      	lsrs	r3, r3, #6
 800317c:	2200      	movs	r2, #0
 800317e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003180:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003184:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003188:	2100      	movs	r1, #0
 800318a:	4b4e      	ldr	r3, [pc, #312]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x350>)
 800318c:	fb03 f201 	mul.w	r2, r3, r1
 8003190:	2300      	movs	r3, #0
 8003192:	fb00 f303 	mul.w	r3, r0, r3
 8003196:	4413      	add	r3, r2
 8003198:	4a4a      	ldr	r2, [pc, #296]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x350>)
 800319a:	fba0 1202 	umull	r1, r2, r0, r2
 800319e:	677a      	str	r2, [r7, #116]	; 0x74
 80031a0:	460a      	mov	r2, r1
 80031a2:	673a      	str	r2, [r7, #112]	; 0x70
 80031a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80031a6:	4413      	add	r3, r2
 80031a8:	677b      	str	r3, [r7, #116]	; 0x74
 80031aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031ae:	2200      	movs	r2, #0
 80031b0:	633b      	str	r3, [r7, #48]	; 0x30
 80031b2:	637a      	str	r2, [r7, #52]	; 0x34
 80031b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80031b8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80031bc:	f7fd fdd4 	bl	8000d68 <__aeabi_uldivmod>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4613      	mov	r3, r2
 80031c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031ca:	e05b      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031cc:	4b3b      	ldr	r3, [pc, #236]	; (80032bc <HAL_RCC_GetSysClockFreq+0x348>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	099b      	lsrs	r3, r3, #6
 80031d2:	2200      	movs	r2, #0
 80031d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80031d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031de:	623b      	str	r3, [r7, #32]
 80031e0:	2300      	movs	r3, #0
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
 80031e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031e8:	4642      	mov	r2, r8
 80031ea:	464b      	mov	r3, r9
 80031ec:	f04f 0000 	mov.w	r0, #0
 80031f0:	f04f 0100 	mov.w	r1, #0
 80031f4:	0159      	lsls	r1, r3, #5
 80031f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031fa:	0150      	lsls	r0, r2, #5
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4641      	mov	r1, r8
 8003202:	ebb2 0a01 	subs.w	sl, r2, r1
 8003206:	4649      	mov	r1, r9
 8003208:	eb63 0b01 	sbc.w	fp, r3, r1
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	f04f 0300 	mov.w	r3, #0
 8003214:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003218:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800321c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003220:	ebb2 040a 	subs.w	r4, r2, sl
 8003224:	eb63 050b 	sbc.w	r5, r3, fp
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	00eb      	lsls	r3, r5, #3
 8003232:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003236:	00e2      	lsls	r2, r4, #3
 8003238:	4614      	mov	r4, r2
 800323a:	461d      	mov	r5, r3
 800323c:	4643      	mov	r3, r8
 800323e:	18e3      	adds	r3, r4, r3
 8003240:	603b      	str	r3, [r7, #0]
 8003242:	464b      	mov	r3, r9
 8003244:	eb45 0303 	adc.w	r3, r5, r3
 8003248:	607b      	str	r3, [r7, #4]
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003256:	4629      	mov	r1, r5
 8003258:	028b      	lsls	r3, r1, #10
 800325a:	4621      	mov	r1, r4
 800325c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003260:	4621      	mov	r1, r4
 8003262:	028a      	lsls	r2, r1, #10
 8003264:	4610      	mov	r0, r2
 8003266:	4619      	mov	r1, r3
 8003268:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800326c:	2200      	movs	r2, #0
 800326e:	61bb      	str	r3, [r7, #24]
 8003270:	61fa      	str	r2, [r7, #28]
 8003272:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003276:	f7fd fd77 	bl	8000d68 <__aeabi_uldivmod>
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	4613      	mov	r3, r2
 8003280:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003284:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <HAL_RCC_GetSysClockFreq+0x348>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	0f1b      	lsrs	r3, r3, #28
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8003292:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003296:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800329a:	fbb2 f3f3 	udiv	r3, r2, r3
 800329e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80032a2:	e003      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032a4:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80032a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80032aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3798      	adds	r7, #152	; 0x98
 80032b4:	46bd      	mov	sp, r7
 80032b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ba:	bf00      	nop
 80032bc:	40023800 	.word	0x40023800
 80032c0:	00f42400 	.word	0x00f42400
 80032c4:	017d7840 	.word	0x017d7840

080032c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e28d      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 8083 	beq.w	80033ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032e8:	4b94      	ldr	r3, [pc, #592]	; (800353c <HAL_RCC_OscConfig+0x274>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d019      	beq.n	8003328 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032f4:	4b91      	ldr	r3, [pc, #580]	; (800353c <HAL_RCC_OscConfig+0x274>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d106      	bne.n	800330e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003300:	4b8e      	ldr	r3, [pc, #568]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003308:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800330c:	d00c      	beq.n	8003328 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800330e:	4b8b      	ldr	r3, [pc, #556]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003316:	2b0c      	cmp	r3, #12
 8003318:	d112      	bne.n	8003340 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800331a:	4b88      	ldr	r3, [pc, #544]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003326:	d10b      	bne.n	8003340 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003328:	4b84      	ldr	r3, [pc, #528]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d05b      	beq.n	80033ec <HAL_RCC_OscConfig+0x124>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d157      	bne.n	80033ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e25a      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003348:	d106      	bne.n	8003358 <HAL_RCC_OscConfig+0x90>
 800334a:	4b7c      	ldr	r3, [pc, #496]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a7b      	ldr	r2, [pc, #492]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	e01d      	b.n	8003394 <HAL_RCC_OscConfig+0xcc>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003360:	d10c      	bne.n	800337c <HAL_RCC_OscConfig+0xb4>
 8003362:	4b76      	ldr	r3, [pc, #472]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a75      	ldr	r2, [pc, #468]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	4b73      	ldr	r3, [pc, #460]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a72      	ldr	r2, [pc, #456]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e00b      	b.n	8003394 <HAL_RCC_OscConfig+0xcc>
 800337c:	4b6f      	ldr	r3, [pc, #444]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a6e      	ldr	r2, [pc, #440]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	4b6c      	ldr	r3, [pc, #432]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a6b      	ldr	r2, [pc, #428]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800338e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d013      	beq.n	80033c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7ff f808 	bl	80023b0 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a4:	f7ff f804 	bl	80023b0 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	; 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e21f      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	4b61      	ldr	r3, [pc, #388]	; (800353c <HAL_RCC_OscConfig+0x274>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0xdc>
 80033c2:	e014      	b.n	80033ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fe fff4 	bl	80023b0 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033cc:	f7fe fff0 	bl	80023b0 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	; 0x64
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e20b      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033de:	4b57      	ldr	r3, [pc, #348]	; (800353c <HAL_RCC_OscConfig+0x274>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x104>
 80033ea:	e000      	b.n	80033ee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d06f      	beq.n	80034da <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033fa:	4b50      	ldr	r3, [pc, #320]	; (800353c <HAL_RCC_OscConfig+0x274>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
 8003402:	2b00      	cmp	r3, #0
 8003404:	d017      	beq.n	8003436 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003406:	4b4d      	ldr	r3, [pc, #308]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800340e:	2b08      	cmp	r3, #8
 8003410:	d105      	bne.n	800341e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003412:	4b4a      	ldr	r3, [pc, #296]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00b      	beq.n	8003436 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800341e:	4b47      	ldr	r3, [pc, #284]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003426:	2b0c      	cmp	r3, #12
 8003428:	d11c      	bne.n	8003464 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800342a:	4b44      	ldr	r3, [pc, #272]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d116      	bne.n	8003464 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003436:	4b41      	ldr	r3, [pc, #260]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d005      	beq.n	800344e <HAL_RCC_OscConfig+0x186>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d001      	beq.n	800344e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e1d3      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344e:	4b3b      	ldr	r3, [pc, #236]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	4937      	ldr	r1, [pc, #220]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800345e:	4313      	orrs	r3, r2
 8003460:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003462:	e03a      	b.n	80034da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d020      	beq.n	80034ae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800346c:	4b34      	ldr	r3, [pc, #208]	; (8003540 <HAL_RCC_OscConfig+0x278>)
 800346e:	2201      	movs	r2, #1
 8003470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003472:	f7fe ff9d 	bl	80023b0 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800347a:	f7fe ff99 	bl	80023b0 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e1b4      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348c:	4b2b      	ldr	r3, [pc, #172]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f0      	beq.n	800347a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003498:	4b28      	ldr	r3, [pc, #160]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4925      	ldr	r1, [pc, #148]	; (800353c <HAL_RCC_OscConfig+0x274>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	600b      	str	r3, [r1, #0]
 80034ac:	e015      	b.n	80034da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ae:	4b24      	ldr	r3, [pc, #144]	; (8003540 <HAL_RCC_OscConfig+0x278>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7fe ff7c 	bl	80023b0 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034bc:	f7fe ff78 	bl	80023b0 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e193      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ce:	4b1b      	ldr	r3, [pc, #108]	; (800353c <HAL_RCC_OscConfig+0x274>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d036      	beq.n	8003554 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d016      	beq.n	800351c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ee:	4b15      	ldr	r3, [pc, #84]	; (8003544 <HAL_RCC_OscConfig+0x27c>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f4:	f7fe ff5c 	bl	80023b0 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034fc:	f7fe ff58 	bl	80023b0 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e173      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350e:	4b0b      	ldr	r3, [pc, #44]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0x234>
 800351a:	e01b      	b.n	8003554 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800351c:	4b09      	ldr	r3, [pc, #36]	; (8003544 <HAL_RCC_OscConfig+0x27c>)
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003522:	f7fe ff45 	bl	80023b0 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003528:	e00e      	b.n	8003548 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800352a:	f7fe ff41 	bl	80023b0 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d907      	bls.n	8003548 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e15c      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
 800353c:	40023800 	.word	0x40023800
 8003540:	42470000 	.word	0x42470000
 8003544:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003548:	4b8a      	ldr	r3, [pc, #552]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800354a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1ea      	bne.n	800352a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 8097 	beq.w	8003690 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003562:	2300      	movs	r3, #0
 8003564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003566:	4b83      	ldr	r3, [pc, #524]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10f      	bne.n	8003592 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	4b7f      	ldr	r3, [pc, #508]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	4a7e      	ldr	r2, [pc, #504]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800357c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003580:	6413      	str	r3, [r2, #64]	; 0x40
 8003582:	4b7c      	ldr	r3, [pc, #496]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358a:	60bb      	str	r3, [r7, #8]
 800358c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800358e:	2301      	movs	r3, #1
 8003590:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003592:	4b79      	ldr	r3, [pc, #484]	; (8003778 <HAL_RCC_OscConfig+0x4b0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359a:	2b00      	cmp	r3, #0
 800359c:	d118      	bne.n	80035d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800359e:	4b76      	ldr	r3, [pc, #472]	; (8003778 <HAL_RCC_OscConfig+0x4b0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a75      	ldr	r2, [pc, #468]	; (8003778 <HAL_RCC_OscConfig+0x4b0>)
 80035a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035aa:	f7fe ff01 	bl	80023b0 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b2:	f7fe fefd 	bl	80023b0 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e118      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c4:	4b6c      	ldr	r3, [pc, #432]	; (8003778 <HAL_RCC_OscConfig+0x4b0>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d106      	bne.n	80035e6 <HAL_RCC_OscConfig+0x31e>
 80035d8:	4b66      	ldr	r3, [pc, #408]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 80035da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035dc:	4a65      	ldr	r2, [pc, #404]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	6713      	str	r3, [r2, #112]	; 0x70
 80035e4:	e01c      	b.n	8003620 <HAL_RCC_OscConfig+0x358>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	2b05      	cmp	r3, #5
 80035ec:	d10c      	bne.n	8003608 <HAL_RCC_OscConfig+0x340>
 80035ee:	4b61      	ldr	r3, [pc, #388]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 80035f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f2:	4a60      	ldr	r2, [pc, #384]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 80035f4:	f043 0304 	orr.w	r3, r3, #4
 80035f8:	6713      	str	r3, [r2, #112]	; 0x70
 80035fa:	4b5e      	ldr	r3, [pc, #376]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	4a5d      	ldr	r2, [pc, #372]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	6713      	str	r3, [r2, #112]	; 0x70
 8003606:	e00b      	b.n	8003620 <HAL_RCC_OscConfig+0x358>
 8003608:	4b5a      	ldr	r3, [pc, #360]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800360a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360c:	4a59      	ldr	r2, [pc, #356]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800360e:	f023 0301 	bic.w	r3, r3, #1
 8003612:	6713      	str	r3, [r2, #112]	; 0x70
 8003614:	4b57      	ldr	r3, [pc, #348]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	4a56      	ldr	r2, [pc, #344]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800361a:	f023 0304 	bic.w	r3, r3, #4
 800361e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d015      	beq.n	8003654 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003628:	f7fe fec2 	bl	80023b0 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362e:	e00a      	b.n	8003646 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003630:	f7fe febe 	bl	80023b0 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f241 3288 	movw	r2, #5000	; 0x1388
 800363e:	4293      	cmp	r3, r2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e0d7      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003646:	4b4b      	ldr	r3, [pc, #300]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0ee      	beq.n	8003630 <HAL_RCC_OscConfig+0x368>
 8003652:	e014      	b.n	800367e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003654:	f7fe feac 	bl	80023b0 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365a:	e00a      	b.n	8003672 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800365c:	f7fe fea8 	bl	80023b0 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f241 3288 	movw	r2, #5000	; 0x1388
 800366a:	4293      	cmp	r3, r2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e0c1      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003672:	4b40      	ldr	r3, [pc, #256]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1ee      	bne.n	800365c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800367e:	7dfb      	ldrb	r3, [r7, #23]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d105      	bne.n	8003690 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003684:	4b3b      	ldr	r3, [pc, #236]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	4a3a      	ldr	r2, [pc, #232]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800368a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80ad 	beq.w	80037f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800369a:	4b36      	ldr	r3, [pc, #216]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d060      	beq.n	8003768 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d145      	bne.n	800373a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ae:	4b33      	ldr	r3, [pc, #204]	; (800377c <HAL_RCC_OscConfig+0x4b4>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b4:	f7fe fe7c 	bl	80023b0 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036bc:	f7fe fe78 	bl	80023b0 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e093      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ce:	4b29      	ldr	r3, [pc, #164]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f0      	bne.n	80036bc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69da      	ldr	r2, [r3, #28]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	019b      	lsls	r3, r3, #6
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	085b      	lsrs	r3, r3, #1
 80036f2:	3b01      	subs	r3, #1
 80036f4:	041b      	lsls	r3, r3, #16
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	061b      	lsls	r3, r3, #24
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	071b      	lsls	r3, r3, #28
 8003706:	491b      	ldr	r1, [pc, #108]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003708:	4313      	orrs	r3, r2
 800370a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800370c:	4b1b      	ldr	r3, [pc, #108]	; (800377c <HAL_RCC_OscConfig+0x4b4>)
 800370e:	2201      	movs	r2, #1
 8003710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003712:	f7fe fe4d 	bl	80023b0 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800371a:	f7fe fe49 	bl	80023b0 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e064      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372c:	4b11      	ldr	r3, [pc, #68]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_RCC_OscConfig+0x452>
 8003738:	e05c      	b.n	80037f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <HAL_RCC_OscConfig+0x4b4>)
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fe fe36 	bl	80023b0 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003748:	f7fe fe32 	bl	80023b0 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e04d      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0x480>
 8003766:	e045      	b.n	80037f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d107      	bne.n	8003780 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e040      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
 8003774:	40023800 	.word	0x40023800
 8003778:	40007000 	.word	0x40007000
 800377c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003780:	4b1f      	ldr	r3, [pc, #124]	; (8003800 <HAL_RCC_OscConfig+0x538>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d030      	beq.n	80037f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003798:	429a      	cmp	r2, r3
 800379a:	d129      	bne.n	80037f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d122      	bne.n	80037f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037b0:	4013      	ands	r3, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d119      	bne.n	80037f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	085b      	lsrs	r3, r3, #1
 80037c8:	3b01      	subs	r3, #1
 80037ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d10f      	bne.n	80037f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037dc:	429a      	cmp	r2, r3
 80037de:	d107      	bne.n	80037f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d001      	beq.n	80037f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3718      	adds	r7, #24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40023800 	.word	0x40023800

08003804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e041      	b.n	800389a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fe fa12 	bl	8001c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3304      	adds	r3, #4
 8003840:	4619      	mov	r1, r3
 8003842:	4610      	mov	r0, r2
 8003844:	f000 fbc0 	bl	8003fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d001      	beq.n	80038bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e04e      	b.n	800395a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a23      	ldr	r2, [pc, #140]	; (8003968 <HAL_TIM_Base_Start_IT+0xc4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d022      	beq.n	8003924 <HAL_TIM_Base_Start_IT+0x80>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e6:	d01d      	beq.n	8003924 <HAL_TIM_Base_Start_IT+0x80>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1f      	ldr	r2, [pc, #124]	; (800396c <HAL_TIM_Base_Start_IT+0xc8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d018      	beq.n	8003924 <HAL_TIM_Base_Start_IT+0x80>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1e      	ldr	r2, [pc, #120]	; (8003970 <HAL_TIM_Base_Start_IT+0xcc>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d013      	beq.n	8003924 <HAL_TIM_Base_Start_IT+0x80>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1c      	ldr	r2, [pc, #112]	; (8003974 <HAL_TIM_Base_Start_IT+0xd0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00e      	beq.n	8003924 <HAL_TIM_Base_Start_IT+0x80>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a1b      	ldr	r2, [pc, #108]	; (8003978 <HAL_TIM_Base_Start_IT+0xd4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d009      	beq.n	8003924 <HAL_TIM_Base_Start_IT+0x80>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a19      	ldr	r2, [pc, #100]	; (800397c <HAL_TIM_Base_Start_IT+0xd8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d004      	beq.n	8003924 <HAL_TIM_Base_Start_IT+0x80>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a18      	ldr	r2, [pc, #96]	; (8003980 <HAL_TIM_Base_Start_IT+0xdc>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d111      	bne.n	8003948 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2b06      	cmp	r3, #6
 8003934:	d010      	beq.n	8003958 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 0201 	orr.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003946:	e007      	b.n	8003958 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	40010000 	.word	0x40010000
 800396c:	40000400 	.word	0x40000400
 8003970:	40000800 	.word	0x40000800
 8003974:	40000c00 	.word	0x40000c00
 8003978:	40010400 	.word	0x40010400
 800397c:	40014000 	.word	0x40014000
 8003980:	40001800 	.word	0x40001800

08003984 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e041      	b.n	8003a1a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7fe f91a 	bl	8001be4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3304      	adds	r3, #4
 80039c0:	4619      	mov	r1, r3
 80039c2:	4610      	mov	r0, r2
 80039c4:	f000 fb00 	bl	8003fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e041      	b.n	8003ab8 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d106      	bne.n	8003a4e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7fe f87d 	bl	8001b48 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2202      	movs	r2, #2
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4610      	mov	r0, r2
 8003a62:	f000 fab1 	bl	8003fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d122      	bne.n	8003b1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d11b      	bne.n	8003b1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f06f 0202 	mvn.w	r2, #2
 8003aec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fd faae 	bl	8001064 <HAL_TIM_IC_CaptureCallback>
 8003b08:	e005      	b.n	8003b16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fa3e 	bl	8003f8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 fa45 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d122      	bne.n	8003b70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d11b      	bne.n	8003b70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f06f 0204 	mvn.w	r2, #4
 8003b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2202      	movs	r2, #2
 8003b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7fd fa84 	bl	8001064 <HAL_TIM_IC_CaptureCallback>
 8003b5c:	e005      	b.n	8003b6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fa14 	bl	8003f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fa1b 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d122      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f003 0308 	and.w	r3, r3, #8
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d11b      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f06f 0208 	mvn.w	r2, #8
 8003b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2204      	movs	r2, #4
 8003b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7fd fa5a 	bl	8001064 <HAL_TIM_IC_CaptureCallback>
 8003bb0:	e005      	b.n	8003bbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f9ea 	bl	8003f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f9f1 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0310 	and.w	r3, r3, #16
 8003bce:	2b10      	cmp	r3, #16
 8003bd0:	d122      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0310 	and.w	r3, r3, #16
 8003bdc:	2b10      	cmp	r3, #16
 8003bde:	d11b      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0210 	mvn.w	r2, #16
 8003be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2208      	movs	r2, #8
 8003bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fd fa30 	bl	8001064 <HAL_TIM_IC_CaptureCallback>
 8003c04:	e005      	b.n	8003c12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f9c0 	bl	8003f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f9c7 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d10e      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d107      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0201 	mvn.w	r2, #1
 8003c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fd fea6 	bl	8001990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4e:	2b80      	cmp	r3, #128	; 0x80
 8003c50:	d10e      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5c:	2b80      	cmp	r3, #128	; 0x80
 8003c5e:	d107      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 fdac 	bl	80047c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7a:	2b40      	cmp	r3, #64	; 0x40
 8003c7c:	d10e      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c88:	2b40      	cmp	r3, #64	; 0x40
 8003c8a:	d107      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f98c 	bl	8003fb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b20      	cmp	r3, #32
 8003ca8:	d10e      	bne.n	8003cc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	2b20      	cmp	r3, #32
 8003cb6:	d107      	bne.n	8003cc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f06f 0220 	mvn.w	r2, #32
 8003cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fd76 	bl	80047b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cc8:	bf00      	nop
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d101      	bne.n	8003cee <HAL_TIM_IC_ConfigChannel+0x1e>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e088      	b.n	8003e00 <HAL_TIM_IC_ConfigChannel+0x130>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d11b      	bne.n	8003d34 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6818      	ldr	r0, [r3, #0]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	6819      	ldr	r1, [r3, #0]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f000 fbac 	bl	8004468 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 020c 	bic.w	r2, r2, #12
 8003d1e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6999      	ldr	r1, [r3, #24]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	619a      	str	r2, [r3, #24]
 8003d32:	e060      	b.n	8003df6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	d11c      	bne.n	8003d74 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	6819      	ldr	r1, [r3, #0]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f000 fc01 	bl	8004550 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	699a      	ldr	r2, [r3, #24]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003d5c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6999      	ldr	r1, [r3, #24]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	021a      	lsls	r2, r3, #8
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	619a      	str	r2, [r3, #24]
 8003d72:	e040      	b.n	8003df6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d11b      	bne.n	8003db2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	6819      	ldr	r1, [r3, #0]
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f000 fc1e 	bl	80045ca <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 020c 	bic.w	r2, r2, #12
 8003d9c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69d9      	ldr	r1, [r3, #28]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	61da      	str	r2, [r3, #28]
 8003db0:	e021      	b.n	8003df6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b0c      	cmp	r3, #12
 8003db6:	d11c      	bne.n	8003df2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6818      	ldr	r0, [r3, #0]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	6819      	ldr	r1, [r3, #0]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f000 fc3b 	bl	8004642 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	69da      	ldr	r2, [r3, #28]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003dda:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	69d9      	ldr	r1, [r3, #28]
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	021a      	lsls	r2, r3, #8
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	61da      	str	r2, [r3, #28]
 8003df0:	e001      	b.n	8003df6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e0ae      	b.n	8003f84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b0c      	cmp	r3, #12
 8003e32:	f200 809f 	bhi.w	8003f74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e36:	a201      	add	r2, pc, #4	; (adr r2, 8003e3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3c:	08003e71 	.word	0x08003e71
 8003e40:	08003f75 	.word	0x08003f75
 8003e44:	08003f75 	.word	0x08003f75
 8003e48:	08003f75 	.word	0x08003f75
 8003e4c:	08003eb1 	.word	0x08003eb1
 8003e50:	08003f75 	.word	0x08003f75
 8003e54:	08003f75 	.word	0x08003f75
 8003e58:	08003f75 	.word	0x08003f75
 8003e5c:	08003ef3 	.word	0x08003ef3
 8003e60:	08003f75 	.word	0x08003f75
 8003e64:	08003f75 	.word	0x08003f75
 8003e68:	08003f75 	.word	0x08003f75
 8003e6c:	08003f33 	.word	0x08003f33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 f946 	bl	8004108 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699a      	ldr	r2, [r3, #24]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0208 	orr.w	r2, r2, #8
 8003e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0204 	bic.w	r2, r2, #4
 8003e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6999      	ldr	r1, [r3, #24]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	691a      	ldr	r2, [r3, #16]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	619a      	str	r2, [r3, #24]
      break;
 8003eae:	e064      	b.n	8003f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68b9      	ldr	r1, [r7, #8]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 f996 	bl	80041e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699a      	ldr	r2, [r3, #24]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6999      	ldr	r1, [r3, #24]
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	021a      	lsls	r2, r3, #8
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	619a      	str	r2, [r3, #24]
      break;
 8003ef0:	e043      	b.n	8003f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68b9      	ldr	r1, [r7, #8]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 f9eb 	bl	80042d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	69da      	ldr	r2, [r3, #28]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f042 0208 	orr.w	r2, r2, #8
 8003f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69da      	ldr	r2, [r3, #28]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0204 	bic.w	r2, r2, #4
 8003f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69d9      	ldr	r1, [r3, #28]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	61da      	str	r2, [r3, #28]
      break;
 8003f30:	e023      	b.n	8003f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68b9      	ldr	r1, [r7, #8]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 fa3f 	bl	80043bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69da      	ldr	r2, [r3, #28]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69da      	ldr	r2, [r3, #28]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69d9      	ldr	r1, [r3, #28]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	021a      	lsls	r2, r3, #8
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	61da      	str	r2, [r3, #28]
      break;
 8003f72:	e002      	b.n	8003f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	75fb      	strb	r3, [r7, #23]
      break;
 8003f78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a40      	ldr	r2, [pc, #256]	; (80040dc <TIM_Base_SetConfig+0x114>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d013      	beq.n	8004008 <TIM_Base_SetConfig+0x40>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe6:	d00f      	beq.n	8004008 <TIM_Base_SetConfig+0x40>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a3d      	ldr	r2, [pc, #244]	; (80040e0 <TIM_Base_SetConfig+0x118>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00b      	beq.n	8004008 <TIM_Base_SetConfig+0x40>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a3c      	ldr	r2, [pc, #240]	; (80040e4 <TIM_Base_SetConfig+0x11c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d007      	beq.n	8004008 <TIM_Base_SetConfig+0x40>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a3b      	ldr	r2, [pc, #236]	; (80040e8 <TIM_Base_SetConfig+0x120>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d003      	beq.n	8004008 <TIM_Base_SetConfig+0x40>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a3a      	ldr	r2, [pc, #232]	; (80040ec <TIM_Base_SetConfig+0x124>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d108      	bne.n	800401a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a2f      	ldr	r2, [pc, #188]	; (80040dc <TIM_Base_SetConfig+0x114>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d02b      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004028:	d027      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a2c      	ldr	r2, [pc, #176]	; (80040e0 <TIM_Base_SetConfig+0x118>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d023      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a2b      	ldr	r2, [pc, #172]	; (80040e4 <TIM_Base_SetConfig+0x11c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d01f      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a2a      	ldr	r2, [pc, #168]	; (80040e8 <TIM_Base_SetConfig+0x120>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d01b      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a29      	ldr	r2, [pc, #164]	; (80040ec <TIM_Base_SetConfig+0x124>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d017      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a28      	ldr	r2, [pc, #160]	; (80040f0 <TIM_Base_SetConfig+0x128>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d013      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a27      	ldr	r2, [pc, #156]	; (80040f4 <TIM_Base_SetConfig+0x12c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00f      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a26      	ldr	r2, [pc, #152]	; (80040f8 <TIM_Base_SetConfig+0x130>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00b      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a25      	ldr	r2, [pc, #148]	; (80040fc <TIM_Base_SetConfig+0x134>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d007      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a24      	ldr	r2, [pc, #144]	; (8004100 <TIM_Base_SetConfig+0x138>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d003      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a23      	ldr	r2, [pc, #140]	; (8004104 <TIM_Base_SetConfig+0x13c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d108      	bne.n	800408c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <TIM_Base_SetConfig+0x114>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d003      	beq.n	80040c0 <TIM_Base_SetConfig+0xf8>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a0c      	ldr	r2, [pc, #48]	; (80040ec <TIM_Base_SetConfig+0x124>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d103      	bne.n	80040c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	691a      	ldr	r2, [r3, #16]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	615a      	str	r2, [r3, #20]
}
 80040ce:	bf00      	nop
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40010000 	.word	0x40010000
 80040e0:	40000400 	.word	0x40000400
 80040e4:	40000800 	.word	0x40000800
 80040e8:	40000c00 	.word	0x40000c00
 80040ec:	40010400 	.word	0x40010400
 80040f0:	40014000 	.word	0x40014000
 80040f4:	40014400 	.word	0x40014400
 80040f8:	40014800 	.word	0x40014800
 80040fc:	40001800 	.word	0x40001800
 8004100:	40001c00 	.word	0x40001c00
 8004104:	40002000 	.word	0x40002000

08004108 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	f023 0201 	bic.w	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 0303 	bic.w	r3, r3, #3
 800413e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f023 0302 	bic.w	r3, r3, #2
 8004150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	4313      	orrs	r3, r2
 800415a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a20      	ldr	r2, [pc, #128]	; (80041e0 <TIM_OC1_SetConfig+0xd8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d003      	beq.n	800416c <TIM_OC1_SetConfig+0x64>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a1f      	ldr	r2, [pc, #124]	; (80041e4 <TIM_OC1_SetConfig+0xdc>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d10c      	bne.n	8004186 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f023 0308 	bic.w	r3, r3, #8
 8004172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	4313      	orrs	r3, r2
 800417c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f023 0304 	bic.w	r3, r3, #4
 8004184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a15      	ldr	r2, [pc, #84]	; (80041e0 <TIM_OC1_SetConfig+0xd8>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d003      	beq.n	8004196 <TIM_OC1_SetConfig+0x8e>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a14      	ldr	r2, [pc, #80]	; (80041e4 <TIM_OC1_SetConfig+0xdc>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d111      	bne.n	80041ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800419c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	621a      	str	r2, [r3, #32]
}
 80041d4:	bf00      	nop
 80041d6:	371c      	adds	r7, #28
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	40010000 	.word	0x40010000
 80041e4:	40010400 	.word	0x40010400

080041e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	f023 0210 	bic.w	r2, r3, #16
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800421e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	021b      	lsls	r3, r3, #8
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f023 0320 	bic.w	r3, r3, #32
 8004232:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a22      	ldr	r2, [pc, #136]	; (80042cc <TIM_OC2_SetConfig+0xe4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d003      	beq.n	8004250 <TIM_OC2_SetConfig+0x68>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a21      	ldr	r2, [pc, #132]	; (80042d0 <TIM_OC2_SetConfig+0xe8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d10d      	bne.n	800426c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	4313      	orrs	r3, r2
 8004262:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800426a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a17      	ldr	r2, [pc, #92]	; (80042cc <TIM_OC2_SetConfig+0xe4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d003      	beq.n	800427c <TIM_OC2_SetConfig+0x94>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a16      	ldr	r2, [pc, #88]	; (80042d0 <TIM_OC2_SetConfig+0xe8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d113      	bne.n	80042a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004282:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800428a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	621a      	str	r2, [r3, #32]
}
 80042be:	bf00      	nop
 80042c0:	371c      	adds	r7, #28
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40010000 	.word	0x40010000
 80042d0:	40010400 	.word	0x40010400

080042d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0303 	bic.w	r3, r3, #3
 800430a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800431c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a21      	ldr	r2, [pc, #132]	; (80043b4 <TIM_OC3_SetConfig+0xe0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d003      	beq.n	800433a <TIM_OC3_SetConfig+0x66>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a20      	ldr	r2, [pc, #128]	; (80043b8 <TIM_OC3_SetConfig+0xe4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d10d      	bne.n	8004356 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004340:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	021b      	lsls	r3, r3, #8
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	4313      	orrs	r3, r2
 800434c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a16      	ldr	r2, [pc, #88]	; (80043b4 <TIM_OC3_SetConfig+0xe0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d003      	beq.n	8004366 <TIM_OC3_SetConfig+0x92>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a15      	ldr	r2, [pc, #84]	; (80043b8 <TIM_OC3_SetConfig+0xe4>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d113      	bne.n	800438e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800436c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	621a      	str	r2, [r3, #32]
}
 80043a8:	bf00      	nop
 80043aa:	371c      	adds	r7, #28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	40010000 	.word	0x40010000
 80043b8:	40010400 	.word	0x40010400

080043bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	021b      	lsls	r3, r3, #8
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004406:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	031b      	lsls	r3, r3, #12
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	4313      	orrs	r3, r2
 8004412:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a12      	ldr	r2, [pc, #72]	; (8004460 <TIM_OC4_SetConfig+0xa4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d003      	beq.n	8004424 <TIM_OC4_SetConfig+0x68>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a11      	ldr	r2, [pc, #68]	; (8004464 <TIM_OC4_SetConfig+0xa8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d109      	bne.n	8004438 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800442a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	019b      	lsls	r3, r3, #6
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	621a      	str	r2, [r3, #32]
}
 8004452:	bf00      	nop
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40010000 	.word	0x40010000
 8004464:	40010400 	.word	0x40010400

08004468 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	f023 0201 	bic.w	r2, r3, #1
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4a28      	ldr	r2, [pc, #160]	; (8004534 <TIM_TI1_SetConfig+0xcc>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d01b      	beq.n	80044ce <TIM_TI1_SetConfig+0x66>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800449c:	d017      	beq.n	80044ce <TIM_TI1_SetConfig+0x66>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4a25      	ldr	r2, [pc, #148]	; (8004538 <TIM_TI1_SetConfig+0xd0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d013      	beq.n	80044ce <TIM_TI1_SetConfig+0x66>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4a24      	ldr	r2, [pc, #144]	; (800453c <TIM_TI1_SetConfig+0xd4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00f      	beq.n	80044ce <TIM_TI1_SetConfig+0x66>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4a23      	ldr	r2, [pc, #140]	; (8004540 <TIM_TI1_SetConfig+0xd8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00b      	beq.n	80044ce <TIM_TI1_SetConfig+0x66>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	4a22      	ldr	r2, [pc, #136]	; (8004544 <TIM_TI1_SetConfig+0xdc>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d007      	beq.n	80044ce <TIM_TI1_SetConfig+0x66>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4a21      	ldr	r2, [pc, #132]	; (8004548 <TIM_TI1_SetConfig+0xe0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d003      	beq.n	80044ce <TIM_TI1_SetConfig+0x66>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4a20      	ldr	r2, [pc, #128]	; (800454c <TIM_TI1_SetConfig+0xe4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d101      	bne.n	80044d2 <TIM_TI1_SetConfig+0x6a>
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <TIM_TI1_SetConfig+0x6c>
 80044d2:	2300      	movs	r3, #0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f023 0303 	bic.w	r3, r3, #3
 80044de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	e003      	b.n	80044f2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f043 0301 	orr.w	r3, r3, #1
 80044f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	4313      	orrs	r3, r2
 8004504:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f023 030a 	bic.w	r3, r3, #10
 800450c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f003 030a 	and.w	r3, r3, #10
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	4313      	orrs	r3, r2
 8004518:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	621a      	str	r2, [r3, #32]
}
 8004526:	bf00      	nop
 8004528:	371c      	adds	r7, #28
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	40010000 	.word	0x40010000
 8004538:	40000400 	.word	0x40000400
 800453c:	40000800 	.word	0x40000800
 8004540:	40000c00 	.word	0x40000c00
 8004544:	40010400 	.word	0x40010400
 8004548:	40014000 	.word	0x40014000
 800454c:	40001800 	.word	0x40001800

08004550 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	f023 0210 	bic.w	r2, r3, #16
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800457c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	021b      	lsls	r3, r3, #8
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800458e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	031b      	lsls	r3, r3, #12
 8004594:	b29b      	uxth	r3, r3
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	4313      	orrs	r3, r2
 800459a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	621a      	str	r2, [r3, #32]
}
 80045be:	bf00      	nop
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b087      	sub	sp, #28
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	607a      	str	r2, [r7, #4]
 80045d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f023 0303 	bic.w	r3, r3, #3
 80045f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004606:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	b2db      	uxtb	r3, r3
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800461a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	021b      	lsls	r3, r3, #8
 8004620:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4313      	orrs	r3, r2
 8004628:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	621a      	str	r2, [r3, #32]
}
 8004636:	bf00      	nop
 8004638:	371c      	adds	r7, #28
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004642:	b480      	push	{r7}
 8004644:	b087      	sub	sp, #28
 8004646:	af00      	add	r7, sp, #0
 8004648:	60f8      	str	r0, [r7, #12]
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	607a      	str	r2, [r7, #4]
 800464e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800466e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	021b      	lsls	r3, r3, #8
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004680:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	031b      	lsls	r3, r3, #12
 8004686:	b29b      	uxth	r3, r3
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	4313      	orrs	r3, r2
 800468c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004694:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	031b      	lsls	r3, r3, #12
 800469a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	621a      	str	r2, [r3, #32]
}
 80046b0:	bf00      	nop
 80046b2:	371c      	adds	r7, #28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e05a      	b.n	800478a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	4313      	orrs	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a21      	ldr	r2, [pc, #132]	; (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d022      	beq.n	800475e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004720:	d01d      	beq.n	800475e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a1d      	ldr	r2, [pc, #116]	; (800479c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d018      	beq.n	800475e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a1b      	ldr	r2, [pc, #108]	; (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d013      	beq.n	800475e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a1a      	ldr	r2, [pc, #104]	; (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d00e      	beq.n	800475e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a18      	ldr	r2, [pc, #96]	; (80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d009      	beq.n	800475e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a17      	ldr	r2, [pc, #92]	; (80047ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d004      	beq.n	800475e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a15      	ldr	r2, [pc, #84]	; (80047b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d10c      	bne.n	8004778 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004764:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	4313      	orrs	r3, r2
 800476e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40010000 	.word	0x40010000
 800479c:	40000400 	.word	0x40000400
 80047a0:	40000800 	.word	0x40000800
 80047a4:	40000c00 	.word	0x40000c00
 80047a8:	40010400 	.word	0x40010400
 80047ac:	40014000 	.word	0x40014000
 80047b0:	40001800 	.word	0x40001800

080047b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e03f      	b.n	800486e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d106      	bne.n	8004808 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7fd fac8 	bl	8001d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2224      	movs	r2, #36	; 0x24
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800481e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 fcdf 	bl	80051e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004834:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695a      	ldr	r2, [r3, #20]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004844:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004854:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	4613      	mov	r3, r2
 8004882:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b20      	cmp	r3, #32
 800488e:	d11d      	bne.n	80048cc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <HAL_UART_Receive_IT+0x26>
 8004896:	88fb      	ldrh	r3, [r7, #6]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e016      	b.n	80048ce <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_UART_Receive_IT+0x38>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e00f      	b.n	80048ce <HAL_UART_Receive_IT+0x58>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80048bc:	88fb      	ldrh	r3, [r7, #6]
 80048be:	461a      	mov	r2, r3
 80048c0:	68b9      	ldr	r1, [r7, #8]
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 fab6 	bl	8004e34 <UART_Start_Receive_IT>
 80048c8:	4603      	mov	r3, r0
 80048ca:	e000      	b.n	80048ce <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80048cc:	2302      	movs	r3, #2
  }
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b0ba      	sub	sp, #232	; 0xe8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80048fe:	2300      	movs	r3, #0
 8004900:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004904:	2300      	movs	r3, #0
 8004906:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800490a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004916:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10f      	bne.n	800493e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800491e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004922:	f003 0320 	and.w	r3, r3, #32
 8004926:	2b00      	cmp	r3, #0
 8004928:	d009      	beq.n	800493e <HAL_UART_IRQHandler+0x66>
 800492a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800492e:	f003 0320 	and.w	r3, r3, #32
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fb99 	bl	800506e <UART_Receive_IT>
      return;
 800493c:	e256      	b.n	8004dec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800493e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 80de 	beq.w	8004b04 <HAL_UART_IRQHandler+0x22c>
 8004948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d106      	bne.n	8004962 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004958:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 80d1 	beq.w	8004b04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00b      	beq.n	8004986 <HAL_UART_IRQHandler+0xae>
 800496e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004976:	2b00      	cmp	r3, #0
 8004978:	d005      	beq.n	8004986 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f043 0201 	orr.w	r2, r3, #1
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00b      	beq.n	80049aa <HAL_UART_IRQHandler+0xd2>
 8004992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d005      	beq.n	80049aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	f043 0202 	orr.w	r2, r3, #2
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00b      	beq.n	80049ce <HAL_UART_IRQHandler+0xf6>
 80049b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d005      	beq.n	80049ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	f043 0204 	orr.w	r2, r3, #4
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80049ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d011      	beq.n	80049fe <HAL_UART_IRQHandler+0x126>
 80049da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d105      	bne.n	80049f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80049e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d005      	beq.n	80049fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	f043 0208 	orr.w	r2, r3, #8
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 81ed 	beq.w	8004de2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a0c:	f003 0320 	and.w	r3, r3, #32
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d008      	beq.n	8004a26 <HAL_UART_IRQHandler+0x14e>
 8004a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a18:	f003 0320 	and.w	r3, r3, #32
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 fb24 	bl	800506e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a30:	2b40      	cmp	r3, #64	; 0x40
 8004a32:	bf0c      	ite	eq
 8004a34:	2301      	moveq	r3, #1
 8004a36:	2300      	movne	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d103      	bne.n	8004a52 <HAL_UART_IRQHandler+0x17a>
 8004a4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d04f      	beq.n	8004af2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fa2c 	bl	8004eb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a62:	2b40      	cmp	r3, #64	; 0x40
 8004a64:	d141      	bne.n	8004aea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3314      	adds	r3, #20
 8004a6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a74:	e853 3f00 	ldrex	r3, [r3]
 8004a78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3314      	adds	r3, #20
 8004a8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004aaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1d9      	bne.n	8004a66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d013      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abe:	4a7d      	ldr	r2, [pc, #500]	; (8004cb4 <HAL_UART_IRQHandler+0x3dc>)
 8004ac0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fd fdf4 	bl	80026b4 <HAL_DMA_Abort_IT>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d016      	beq.n	8004b00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004adc:	4610      	mov	r0, r2
 8004ade:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae0:	e00e      	b.n	8004b00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f990 	bl	8004e08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae8:	e00a      	b.n	8004b00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f98c 	bl	8004e08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af0:	e006      	b.n	8004b00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f988 	bl	8004e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004afe:	e170      	b.n	8004de2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b00:	bf00      	nop
    return;
 8004b02:	e16e      	b.n	8004de2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	f040 814a 	bne.w	8004da2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b12:	f003 0310 	and.w	r3, r3, #16
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 8143 	beq.w	8004da2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b20:	f003 0310 	and.w	r3, r3, #16
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 813c 	beq.w	8004da2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60bb      	str	r3, [r7, #8]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	60bb      	str	r3, [r7, #8]
 8004b3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4a:	2b40      	cmp	r3, #64	; 0x40
 8004b4c:	f040 80b4 	bne.w	8004cb8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 8140 	beq.w	8004de6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	f080 8139 	bcs.w	8004de6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b7a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b86:	f000 8088 	beq.w	8004c9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	330c      	adds	r3, #12
 8004b90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b98:	e853 3f00 	ldrex	r3, [r3]
 8004b9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	330c      	adds	r3, #12
 8004bb2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004bb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004bc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004bc6:	e841 2300 	strex	r3, r2, [r1]
 8004bca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1d9      	bne.n	8004b8a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3314      	adds	r3, #20
 8004bdc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004be0:	e853 3f00 	ldrex	r3, [r3]
 8004be4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004be6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004be8:	f023 0301 	bic.w	r3, r3, #1
 8004bec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3314      	adds	r3, #20
 8004bf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bfa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004bfe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1e1      	bne.n	8004bd6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3314      	adds	r3, #20
 8004c18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c1c:	e853 3f00 	ldrex	r3, [r3]
 8004c20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	3314      	adds	r3, #20
 8004c32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c3e:	e841 2300 	strex	r3, r2, [r1]
 8004c42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1e3      	bne.n	8004c12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	330c      	adds	r3, #12
 8004c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c62:	e853 3f00 	ldrex	r3, [r3]
 8004c66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c6a:	f023 0310 	bic.w	r3, r3, #16
 8004c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	330c      	adds	r3, #12
 8004c78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c7c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c7e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c84:	e841 2300 	strex	r3, r2, [r1]
 8004c88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1e3      	bne.n	8004c58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fd fc9d 	bl	80025d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	4619      	mov	r1, r3
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f8b6 	bl	8004e1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cb0:	e099      	b.n	8004de6 <HAL_UART_IRQHandler+0x50e>
 8004cb2:	bf00      	nop
 8004cb4:	08004f77 	.word	0x08004f77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 808b 	beq.w	8004dea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004cd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 8086 	beq.w	8004dea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	330c      	adds	r3, #12
 8004ce4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce8:	e853 3f00 	ldrex	r3, [r3]
 8004cec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	330c      	adds	r3, #12
 8004cfe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d02:	647a      	str	r2, [r7, #68]	; 0x44
 8004d04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d0a:	e841 2300 	strex	r3, r2, [r1]
 8004d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1e3      	bne.n	8004cde <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3314      	adds	r3, #20
 8004d1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	e853 3f00 	ldrex	r3, [r3]
 8004d24:	623b      	str	r3, [r7, #32]
   return(result);
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	f023 0301 	bic.w	r3, r3, #1
 8004d2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3314      	adds	r3, #20
 8004d36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d3a:	633a      	str	r2, [r7, #48]	; 0x30
 8004d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d42:	e841 2300 	strex	r3, r2, [r1]
 8004d46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1e3      	bne.n	8004d16 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2220      	movs	r2, #32
 8004d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	330c      	adds	r3, #12
 8004d62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	e853 3f00 	ldrex	r3, [r3]
 8004d6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0310 	bic.w	r3, r3, #16
 8004d72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	330c      	adds	r3, #12
 8004d7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d80:	61fa      	str	r2, [r7, #28]
 8004d82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d84:	69b9      	ldr	r1, [r7, #24]
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	e841 2300 	strex	r3, r2, [r1]
 8004d8c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1e3      	bne.n	8004d5c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d98:	4619      	mov	r1, r3
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f83e 	bl	8004e1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004da0:	e023      	b.n	8004dea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d009      	beq.n	8004dc2 <HAL_UART_IRQHandler+0x4ea>
 8004dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f8ef 	bl	8004f9e <UART_Transmit_IT>
    return;
 8004dc0:	e014      	b.n	8004dec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00e      	beq.n	8004dec <HAL_UART_IRQHandler+0x514>
 8004dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d008      	beq.n	8004dec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f92f 	bl	800503e <UART_EndTransmit_IT>
    return;
 8004de0:	e004      	b.n	8004dec <HAL_UART_IRQHandler+0x514>
    return;
 8004de2:	bf00      	nop
 8004de4:	e002      	b.n	8004dec <HAL_UART_IRQHandler+0x514>
      return;
 8004de6:	bf00      	nop
 8004de8:	e000      	b.n	8004dec <HAL_UART_IRQHandler+0x514>
      return;
 8004dea:	bf00      	nop
  }
}
 8004dec:	37e8      	adds	r7, #232	; 0xe8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop

08004df4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	460b      	mov	r3, r1
 8004e26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	88fa      	ldrh	r2, [r7, #6]
 8004e4c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	88fa      	ldrh	r2, [r7, #6]
 8004e52:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2222      	movs	r2, #34	; 0x22
 8004e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d007      	beq.n	8004e82 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e80:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	695a      	ldr	r2, [r3, #20]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f042 0201 	orr.w	r2, r2, #1
 8004e90:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0220 	orr.w	r2, r2, #32
 8004ea0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b095      	sub	sp, #84	; 0x54
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	330c      	adds	r3, #12
 8004ebe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec2:	e853 3f00 	ldrex	r3, [r3]
 8004ec6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	330c      	adds	r3, #12
 8004ed6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ed8:	643a      	str	r2, [r7, #64]	; 0x40
 8004eda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004edc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ede:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ee0:	e841 2300 	strex	r3, r2, [r1]
 8004ee4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1e5      	bne.n	8004eb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3314      	adds	r3, #20
 8004ef2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	e853 3f00 	ldrex	r3, [r3]
 8004efa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	f023 0301 	bic.w	r3, r3, #1
 8004f02:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3314      	adds	r3, #20
 8004f0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f14:	e841 2300 	strex	r3, r2, [r1]
 8004f18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1e5      	bne.n	8004eec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d119      	bne.n	8004f5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	330c      	adds	r3, #12
 8004f2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	e853 3f00 	ldrex	r3, [r3]
 8004f36:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f023 0310 	bic.w	r3, r3, #16
 8004f3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	330c      	adds	r3, #12
 8004f46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f48:	61ba      	str	r2, [r7, #24]
 8004f4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	6979      	ldr	r1, [r7, #20]
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	e841 2300 	strex	r3, r2, [r1]
 8004f54:	613b      	str	r3, [r7, #16]
   return(result);
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e5      	bne.n	8004f28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f6a:	bf00      	nop
 8004f6c:	3754      	adds	r7, #84	; 0x54
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b084      	sub	sp, #16
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f7ff ff39 	bl	8004e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f96:	bf00      	nop
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b085      	sub	sp, #20
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b21      	cmp	r3, #33	; 0x21
 8004fb0:	d13e      	bne.n	8005030 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fba:	d114      	bne.n	8004fe6 <UART_Transmit_IT+0x48>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d110      	bne.n	8004fe6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fd8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	1c9a      	adds	r2, r3, #2
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	621a      	str	r2, [r3, #32]
 8004fe4:	e008      	b.n	8004ff8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	1c59      	adds	r1, r3, #1
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6211      	str	r1, [r2, #32]
 8004ff0:	781a      	ldrb	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	3b01      	subs	r3, #1
 8005000:	b29b      	uxth	r3, r3
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	4619      	mov	r1, r3
 8005006:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10f      	bne.n	800502c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800501a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800502a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800502c:	2300      	movs	r3, #0
 800502e:	e000      	b.n	8005032 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005030:	2302      	movs	r3, #2
  }
}
 8005032:	4618      	mov	r0, r3
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b082      	sub	sp, #8
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005054:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2220      	movs	r2, #32
 800505a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7ff fec8 	bl	8004df4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b08c      	sub	sp, #48	; 0x30
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b22      	cmp	r3, #34	; 0x22
 8005080:	f040 80ab 	bne.w	80051da <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800508c:	d117      	bne.n	80050be <UART_Receive_IT+0x50>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d113      	bne.n	80050be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005096:	2300      	movs	r3, #0
 8005098:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b6:	1c9a      	adds	r2, r3, #2
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	629a      	str	r2, [r3, #40]	; 0x28
 80050bc:	e026      	b.n	800510c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80050c4:	2300      	movs	r3, #0
 80050c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d0:	d007      	beq.n	80050e2 <UART_Receive_IT+0x74>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10a      	bne.n	80050f0 <UART_Receive_IT+0x82>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d106      	bne.n	80050f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ec:	701a      	strb	r2, [r3, #0]
 80050ee:	e008      	b.n	8005102 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005100:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29b      	uxth	r3, r3
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	4619      	mov	r1, r3
 800511a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800511c:	2b00      	cmp	r3, #0
 800511e:	d15a      	bne.n	80051d6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0220 	bic.w	r2, r2, #32
 800512e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800513e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	695a      	ldr	r2, [r3, #20]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0201 	bic.w	r2, r2, #1
 800514e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515c:	2b01      	cmp	r3, #1
 800515e:	d135      	bne.n	80051cc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	330c      	adds	r3, #12
 800516c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	e853 3f00 	ldrex	r3, [r3]
 8005174:	613b      	str	r3, [r7, #16]
   return(result);
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f023 0310 	bic.w	r3, r3, #16
 800517c:	627b      	str	r3, [r7, #36]	; 0x24
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	330c      	adds	r3, #12
 8005184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005186:	623a      	str	r2, [r7, #32]
 8005188:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518a:	69f9      	ldr	r1, [r7, #28]
 800518c:	6a3a      	ldr	r2, [r7, #32]
 800518e:	e841 2300 	strex	r3, r2, [r1]
 8005192:	61bb      	str	r3, [r7, #24]
   return(result);
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1e5      	bne.n	8005166 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0310 	and.w	r3, r3, #16
 80051a4:	2b10      	cmp	r3, #16
 80051a6:	d10a      	bne.n	80051be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051a8:	2300      	movs	r3, #0
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051c2:	4619      	mov	r1, r3
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7ff fe29 	bl	8004e1c <HAL_UARTEx_RxEventCallback>
 80051ca:	e002      	b.n	80051d2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7fb ff67 	bl	80010a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051d2:	2300      	movs	r3, #0
 80051d4:	e002      	b.n	80051dc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	e000      	b.n	80051dc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80051da:	2302      	movs	r3, #2
  }
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3730      	adds	r7, #48	; 0x30
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051e8:	b0c0      	sub	sp, #256	; 0x100
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005200:	68d9      	ldr	r1, [r3, #12]
 8005202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	ea40 0301 	orr.w	r3, r0, r1
 800520c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800520e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	431a      	orrs	r2, r3
 800521c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	431a      	orrs	r2, r3
 8005224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	4313      	orrs	r3, r2
 800522c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800523c:	f021 010c 	bic.w	r1, r1, #12
 8005240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800524a:	430b      	orrs	r3, r1
 800524c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800524e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800525a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525e:	6999      	ldr	r1, [r3, #24]
 8005260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	ea40 0301 	orr.w	r3, r0, r1
 800526a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800526c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	4b8f      	ldr	r3, [pc, #572]	; (80054b0 <UART_SetConfig+0x2cc>)
 8005274:	429a      	cmp	r2, r3
 8005276:	d005      	beq.n	8005284 <UART_SetConfig+0xa0>
 8005278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	4b8d      	ldr	r3, [pc, #564]	; (80054b4 <UART_SetConfig+0x2d0>)
 8005280:	429a      	cmp	r2, r3
 8005282:	d104      	bne.n	800528e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005284:	f7fd fe30 	bl	8002ee8 <HAL_RCC_GetPCLK2Freq>
 8005288:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800528c:	e003      	b.n	8005296 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800528e:	f7fd fe17 	bl	8002ec0 <HAL_RCC_GetPCLK1Freq>
 8005292:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a0:	f040 810c 	bne.w	80054bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052a8:	2200      	movs	r2, #0
 80052aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80052b6:	4622      	mov	r2, r4
 80052b8:	462b      	mov	r3, r5
 80052ba:	1891      	adds	r1, r2, r2
 80052bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80052be:	415b      	adcs	r3, r3
 80052c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052c6:	4621      	mov	r1, r4
 80052c8:	eb12 0801 	adds.w	r8, r2, r1
 80052cc:	4629      	mov	r1, r5
 80052ce:	eb43 0901 	adc.w	r9, r3, r1
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	f04f 0300 	mov.w	r3, #0
 80052da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052e6:	4690      	mov	r8, r2
 80052e8:	4699      	mov	r9, r3
 80052ea:	4623      	mov	r3, r4
 80052ec:	eb18 0303 	adds.w	r3, r8, r3
 80052f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80052f4:	462b      	mov	r3, r5
 80052f6:	eb49 0303 	adc.w	r3, r9, r3
 80052fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800530a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800530e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005312:	460b      	mov	r3, r1
 8005314:	18db      	adds	r3, r3, r3
 8005316:	653b      	str	r3, [r7, #80]	; 0x50
 8005318:	4613      	mov	r3, r2
 800531a:	eb42 0303 	adc.w	r3, r2, r3
 800531e:	657b      	str	r3, [r7, #84]	; 0x54
 8005320:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005324:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005328:	f7fb fd1e 	bl	8000d68 <__aeabi_uldivmod>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4b61      	ldr	r3, [pc, #388]	; (80054b8 <UART_SetConfig+0x2d4>)
 8005332:	fba3 2302 	umull	r2, r3, r3, r2
 8005336:	095b      	lsrs	r3, r3, #5
 8005338:	011c      	lsls	r4, r3, #4
 800533a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800533e:	2200      	movs	r2, #0
 8005340:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005344:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005348:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800534c:	4642      	mov	r2, r8
 800534e:	464b      	mov	r3, r9
 8005350:	1891      	adds	r1, r2, r2
 8005352:	64b9      	str	r1, [r7, #72]	; 0x48
 8005354:	415b      	adcs	r3, r3
 8005356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005358:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800535c:	4641      	mov	r1, r8
 800535e:	eb12 0a01 	adds.w	sl, r2, r1
 8005362:	4649      	mov	r1, r9
 8005364:	eb43 0b01 	adc.w	fp, r3, r1
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005374:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005378:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800537c:	4692      	mov	sl, r2
 800537e:	469b      	mov	fp, r3
 8005380:	4643      	mov	r3, r8
 8005382:	eb1a 0303 	adds.w	r3, sl, r3
 8005386:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800538a:	464b      	mov	r3, r9
 800538c:	eb4b 0303 	adc.w	r3, fp, r3
 8005390:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053a8:	460b      	mov	r3, r1
 80053aa:	18db      	adds	r3, r3, r3
 80053ac:	643b      	str	r3, [r7, #64]	; 0x40
 80053ae:	4613      	mov	r3, r2
 80053b0:	eb42 0303 	adc.w	r3, r2, r3
 80053b4:	647b      	str	r3, [r7, #68]	; 0x44
 80053b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80053be:	f7fb fcd3 	bl	8000d68 <__aeabi_uldivmod>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	4611      	mov	r1, r2
 80053c8:	4b3b      	ldr	r3, [pc, #236]	; (80054b8 <UART_SetConfig+0x2d4>)
 80053ca:	fba3 2301 	umull	r2, r3, r3, r1
 80053ce:	095b      	lsrs	r3, r3, #5
 80053d0:	2264      	movs	r2, #100	; 0x64
 80053d2:	fb02 f303 	mul.w	r3, r2, r3
 80053d6:	1acb      	subs	r3, r1, r3
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80053de:	4b36      	ldr	r3, [pc, #216]	; (80054b8 <UART_SetConfig+0x2d4>)
 80053e0:	fba3 2302 	umull	r2, r3, r3, r2
 80053e4:	095b      	lsrs	r3, r3, #5
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053ec:	441c      	add	r4, r3
 80053ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053f2:	2200      	movs	r2, #0
 80053f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80053fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005400:	4642      	mov	r2, r8
 8005402:	464b      	mov	r3, r9
 8005404:	1891      	adds	r1, r2, r2
 8005406:	63b9      	str	r1, [r7, #56]	; 0x38
 8005408:	415b      	adcs	r3, r3
 800540a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800540c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005410:	4641      	mov	r1, r8
 8005412:	1851      	adds	r1, r2, r1
 8005414:	6339      	str	r1, [r7, #48]	; 0x30
 8005416:	4649      	mov	r1, r9
 8005418:	414b      	adcs	r3, r1
 800541a:	637b      	str	r3, [r7, #52]	; 0x34
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005428:	4659      	mov	r1, fp
 800542a:	00cb      	lsls	r3, r1, #3
 800542c:	4651      	mov	r1, sl
 800542e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005432:	4651      	mov	r1, sl
 8005434:	00ca      	lsls	r2, r1, #3
 8005436:	4610      	mov	r0, r2
 8005438:	4619      	mov	r1, r3
 800543a:	4603      	mov	r3, r0
 800543c:	4642      	mov	r2, r8
 800543e:	189b      	adds	r3, r3, r2
 8005440:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005444:	464b      	mov	r3, r9
 8005446:	460a      	mov	r2, r1
 8005448:	eb42 0303 	adc.w	r3, r2, r3
 800544c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800545c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005460:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005464:	460b      	mov	r3, r1
 8005466:	18db      	adds	r3, r3, r3
 8005468:	62bb      	str	r3, [r7, #40]	; 0x28
 800546a:	4613      	mov	r3, r2
 800546c:	eb42 0303 	adc.w	r3, r2, r3
 8005470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005472:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005476:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800547a:	f7fb fc75 	bl	8000d68 <__aeabi_uldivmod>
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	4b0d      	ldr	r3, [pc, #52]	; (80054b8 <UART_SetConfig+0x2d4>)
 8005484:	fba3 1302 	umull	r1, r3, r3, r2
 8005488:	095b      	lsrs	r3, r3, #5
 800548a:	2164      	movs	r1, #100	; 0x64
 800548c:	fb01 f303 	mul.w	r3, r1, r3
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	3332      	adds	r3, #50	; 0x32
 8005496:	4a08      	ldr	r2, [pc, #32]	; (80054b8 <UART_SetConfig+0x2d4>)
 8005498:	fba2 2303 	umull	r2, r3, r2, r3
 800549c:	095b      	lsrs	r3, r3, #5
 800549e:	f003 0207 	and.w	r2, r3, #7
 80054a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4422      	add	r2, r4
 80054aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054ac:	e106      	b.n	80056bc <UART_SetConfig+0x4d8>
 80054ae:	bf00      	nop
 80054b0:	40011000 	.word	0x40011000
 80054b4:	40011400 	.word	0x40011400
 80054b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054c0:	2200      	movs	r2, #0
 80054c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80054ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80054ce:	4642      	mov	r2, r8
 80054d0:	464b      	mov	r3, r9
 80054d2:	1891      	adds	r1, r2, r2
 80054d4:	6239      	str	r1, [r7, #32]
 80054d6:	415b      	adcs	r3, r3
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
 80054da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054de:	4641      	mov	r1, r8
 80054e0:	1854      	adds	r4, r2, r1
 80054e2:	4649      	mov	r1, r9
 80054e4:	eb43 0501 	adc.w	r5, r3, r1
 80054e8:	f04f 0200 	mov.w	r2, #0
 80054ec:	f04f 0300 	mov.w	r3, #0
 80054f0:	00eb      	lsls	r3, r5, #3
 80054f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054f6:	00e2      	lsls	r2, r4, #3
 80054f8:	4614      	mov	r4, r2
 80054fa:	461d      	mov	r5, r3
 80054fc:	4643      	mov	r3, r8
 80054fe:	18e3      	adds	r3, r4, r3
 8005500:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005504:	464b      	mov	r3, r9
 8005506:	eb45 0303 	adc.w	r3, r5, r3
 800550a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800550e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800551a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	f04f 0300 	mov.w	r3, #0
 8005526:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800552a:	4629      	mov	r1, r5
 800552c:	008b      	lsls	r3, r1, #2
 800552e:	4621      	mov	r1, r4
 8005530:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005534:	4621      	mov	r1, r4
 8005536:	008a      	lsls	r2, r1, #2
 8005538:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800553c:	f7fb fc14 	bl	8000d68 <__aeabi_uldivmod>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4b60      	ldr	r3, [pc, #384]	; (80056c8 <UART_SetConfig+0x4e4>)
 8005546:	fba3 2302 	umull	r2, r3, r3, r2
 800554a:	095b      	lsrs	r3, r3, #5
 800554c:	011c      	lsls	r4, r3, #4
 800554e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005552:	2200      	movs	r2, #0
 8005554:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005558:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800555c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005560:	4642      	mov	r2, r8
 8005562:	464b      	mov	r3, r9
 8005564:	1891      	adds	r1, r2, r2
 8005566:	61b9      	str	r1, [r7, #24]
 8005568:	415b      	adcs	r3, r3
 800556a:	61fb      	str	r3, [r7, #28]
 800556c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005570:	4641      	mov	r1, r8
 8005572:	1851      	adds	r1, r2, r1
 8005574:	6139      	str	r1, [r7, #16]
 8005576:	4649      	mov	r1, r9
 8005578:	414b      	adcs	r3, r1
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	f04f 0200 	mov.w	r2, #0
 8005580:	f04f 0300 	mov.w	r3, #0
 8005584:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005588:	4659      	mov	r1, fp
 800558a:	00cb      	lsls	r3, r1, #3
 800558c:	4651      	mov	r1, sl
 800558e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005592:	4651      	mov	r1, sl
 8005594:	00ca      	lsls	r2, r1, #3
 8005596:	4610      	mov	r0, r2
 8005598:	4619      	mov	r1, r3
 800559a:	4603      	mov	r3, r0
 800559c:	4642      	mov	r2, r8
 800559e:	189b      	adds	r3, r3, r2
 80055a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055a4:	464b      	mov	r3, r9
 80055a6:	460a      	mov	r2, r1
 80055a8:	eb42 0303 	adc.w	r3, r2, r3
 80055ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80055ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80055c8:	4649      	mov	r1, r9
 80055ca:	008b      	lsls	r3, r1, #2
 80055cc:	4641      	mov	r1, r8
 80055ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055d2:	4641      	mov	r1, r8
 80055d4:	008a      	lsls	r2, r1, #2
 80055d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80055da:	f7fb fbc5 	bl	8000d68 <__aeabi_uldivmod>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	4611      	mov	r1, r2
 80055e4:	4b38      	ldr	r3, [pc, #224]	; (80056c8 <UART_SetConfig+0x4e4>)
 80055e6:	fba3 2301 	umull	r2, r3, r3, r1
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	2264      	movs	r2, #100	; 0x64
 80055ee:	fb02 f303 	mul.w	r3, r2, r3
 80055f2:	1acb      	subs	r3, r1, r3
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	3332      	adds	r3, #50	; 0x32
 80055f8:	4a33      	ldr	r2, [pc, #204]	; (80056c8 <UART_SetConfig+0x4e4>)
 80055fa:	fba2 2303 	umull	r2, r3, r2, r3
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005604:	441c      	add	r4, r3
 8005606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800560a:	2200      	movs	r2, #0
 800560c:	673b      	str	r3, [r7, #112]	; 0x70
 800560e:	677a      	str	r2, [r7, #116]	; 0x74
 8005610:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005614:	4642      	mov	r2, r8
 8005616:	464b      	mov	r3, r9
 8005618:	1891      	adds	r1, r2, r2
 800561a:	60b9      	str	r1, [r7, #8]
 800561c:	415b      	adcs	r3, r3
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005624:	4641      	mov	r1, r8
 8005626:	1851      	adds	r1, r2, r1
 8005628:	6039      	str	r1, [r7, #0]
 800562a:	4649      	mov	r1, r9
 800562c:	414b      	adcs	r3, r1
 800562e:	607b      	str	r3, [r7, #4]
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	f04f 0300 	mov.w	r3, #0
 8005638:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800563c:	4659      	mov	r1, fp
 800563e:	00cb      	lsls	r3, r1, #3
 8005640:	4651      	mov	r1, sl
 8005642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005646:	4651      	mov	r1, sl
 8005648:	00ca      	lsls	r2, r1, #3
 800564a:	4610      	mov	r0, r2
 800564c:	4619      	mov	r1, r3
 800564e:	4603      	mov	r3, r0
 8005650:	4642      	mov	r2, r8
 8005652:	189b      	adds	r3, r3, r2
 8005654:	66bb      	str	r3, [r7, #104]	; 0x68
 8005656:	464b      	mov	r3, r9
 8005658:	460a      	mov	r2, r1
 800565a:	eb42 0303 	adc.w	r3, r2, r3
 800565e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	663b      	str	r3, [r7, #96]	; 0x60
 800566a:	667a      	str	r2, [r7, #100]	; 0x64
 800566c:	f04f 0200 	mov.w	r2, #0
 8005670:	f04f 0300 	mov.w	r3, #0
 8005674:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005678:	4649      	mov	r1, r9
 800567a:	008b      	lsls	r3, r1, #2
 800567c:	4641      	mov	r1, r8
 800567e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005682:	4641      	mov	r1, r8
 8005684:	008a      	lsls	r2, r1, #2
 8005686:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800568a:	f7fb fb6d 	bl	8000d68 <__aeabi_uldivmod>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	4b0d      	ldr	r3, [pc, #52]	; (80056c8 <UART_SetConfig+0x4e4>)
 8005694:	fba3 1302 	umull	r1, r3, r3, r2
 8005698:	095b      	lsrs	r3, r3, #5
 800569a:	2164      	movs	r1, #100	; 0x64
 800569c:	fb01 f303 	mul.w	r3, r1, r3
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	011b      	lsls	r3, r3, #4
 80056a4:	3332      	adds	r3, #50	; 0x32
 80056a6:	4a08      	ldr	r2, [pc, #32]	; (80056c8 <UART_SetConfig+0x4e4>)
 80056a8:	fba2 2303 	umull	r2, r3, r2, r3
 80056ac:	095b      	lsrs	r3, r3, #5
 80056ae:	f003 020f 	and.w	r2, r3, #15
 80056b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4422      	add	r2, r4
 80056ba:	609a      	str	r2, [r3, #8]
}
 80056bc:	bf00      	nop
 80056be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80056c2:	46bd      	mov	sp, r7
 80056c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056c8:	51eb851f 	.word	0x51eb851f

080056cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08a      	sub	sp, #40	; 0x28
 80056d0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80056d2:	2300      	movs	r3, #0
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056d6:	4b7f      	ldr	r3, [pc, #508]	; (80058d4 <xTaskIncrementTick+0x208>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f040 80f0 	bne.w	80058c0 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056e0:	4b7d      	ldr	r3, [pc, #500]	; (80058d8 <xTaskIncrementTick+0x20c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3301      	adds	r3, #1
 80056e6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80056e8:	4a7b      	ldr	r2, [pc, #492]	; (80058d8 <xTaskIncrementTick+0x20c>)
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d120      	bne.n	8005736 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80056f4:	4b79      	ldr	r3, [pc, #484]	; (80058dc <xTaskIncrementTick+0x210>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80056fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8005710:	bf00      	nop
 8005712:	e7fe      	b.n	8005712 <xTaskIncrementTick+0x46>
 8005714:	4b71      	ldr	r3, [pc, #452]	; (80058dc <xTaskIncrementTick+0x210>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	61fb      	str	r3, [r7, #28]
 800571a:	4b71      	ldr	r3, [pc, #452]	; (80058e0 <xTaskIncrementTick+0x214>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a6f      	ldr	r2, [pc, #444]	; (80058dc <xTaskIncrementTick+0x210>)
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	4a6f      	ldr	r2, [pc, #444]	; (80058e0 <xTaskIncrementTick+0x214>)
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	4b6e      	ldr	r3, [pc, #440]	; (80058e4 <xTaskIncrementTick+0x218>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3301      	adds	r3, #1
 800572e:	4a6d      	ldr	r2, [pc, #436]	; (80058e4 <xTaskIncrementTick+0x218>)
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	f000 f94f 	bl	80059d4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005736:	4b6c      	ldr	r3, [pc, #432]	; (80058e8 <xTaskIncrementTick+0x21c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6a3a      	ldr	r2, [r7, #32]
 800573c:	429a      	cmp	r2, r3
 800573e:	f0c0 80aa 	bcc.w	8005896 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005742:	4b66      	ldr	r3, [pc, #408]	; (80058dc <xTaskIncrementTick+0x210>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d104      	bne.n	8005756 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800574c:	4b66      	ldr	r3, [pc, #408]	; (80058e8 <xTaskIncrementTick+0x21c>)
 800574e:	f04f 32ff 	mov.w	r2, #4294967295
 8005752:	601a      	str	r2, [r3, #0]
                    break;
 8005754:	e09f      	b.n	8005896 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005756:	4b61      	ldr	r3, [pc, #388]	; (80058dc <xTaskIncrementTick+0x210>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8005766:	6a3a      	ldr	r2, [r7, #32]
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	429a      	cmp	r2, r3
 800576c:	d203      	bcs.n	8005776 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800576e:	4a5e      	ldr	r2, [pc, #376]	; (80058e8 <xTaskIncrementTick+0x21c>)
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8005774:	e08f      	b.n	8005896 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	613b      	str	r3, [r7, #16]
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	68d2      	ldr	r2, [r2, #12]
 8005784:	609a      	str	r2, [r3, #8]
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	6892      	ldr	r2, [r2, #8]
 800578e:	605a      	str	r2, [r3, #4]
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	3304      	adds	r3, #4
 8005798:	429a      	cmp	r2, r3
 800579a:	d103      	bne.n	80057a4 <xTaskIncrementTick+0xd8>
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	68da      	ldr	r2, [r3, #12]
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	605a      	str	r2, [r3, #4]
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	2200      	movs	r2, #0
 80057a8:	615a      	str	r2, [r3, #20]
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	1e5a      	subs	r2, r3, #1
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d01e      	beq.n	80057fa <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c0:	60fb      	str	r3, [r7, #12]
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	69ba      	ldr	r2, [r7, #24]
 80057c8:	6a12      	ldr	r2, [r2, #32]
 80057ca:	609a      	str	r2, [r3, #8]
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	69d2      	ldr	r2, [r2, #28]
 80057d4:	605a      	str	r2, [r3, #4]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	3318      	adds	r3, #24
 80057de:	429a      	cmp	r2, r3
 80057e0:	d103      	bne.n	80057ea <xTaskIncrementTick+0x11e>
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	6a1a      	ldr	r2, [r3, #32]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	605a      	str	r2, [r3, #4]
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	2200      	movs	r2, #0
 80057ee:	629a      	str	r2, [r3, #40]	; 0x28
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	1e5a      	subs	r2, r3, #1
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f001 fb65 	bl	8006ecc <SEGGER_SYSVIEW_OnTaskStartReady>
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005806:	2201      	movs	r2, #1
 8005808:	409a      	lsls	r2, r3
 800580a:	4b38      	ldr	r3, [pc, #224]	; (80058ec <xTaskIncrementTick+0x220>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4313      	orrs	r3, r2
 8005810:	4a36      	ldr	r2, [pc, #216]	; (80058ec <xTaskIncrementTick+0x220>)
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005818:	4935      	ldr	r1, [pc, #212]	; (80058f0 <xTaskIncrementTick+0x224>)
 800581a:	4613      	mov	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	440b      	add	r3, r1
 8005824:	3304      	adds	r3, #4
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	60bb      	str	r3, [r7, #8]
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	609a      	str	r2, [r3, #8]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	60da      	str	r2, [r3, #12]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	3204      	adds	r2, #4
 8005840:	605a      	str	r2, [r3, #4]
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	1d1a      	adds	r2, r3, #4
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	609a      	str	r2, [r3, #8]
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584e:	4613      	mov	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4a26      	ldr	r2, [pc, #152]	; (80058f0 <xTaskIncrementTick+0x224>)
 8005858:	441a      	add	r2, r3
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	615a      	str	r2, [r3, #20]
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005862:	4923      	ldr	r1, [pc, #140]	; (80058f0 <xTaskIncrementTick+0x224>)
 8005864:	4613      	mov	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	440b      	add	r3, r1
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	1c59      	adds	r1, r3, #1
 8005872:	481f      	ldr	r0, [pc, #124]	; (80058f0 <xTaskIncrementTick+0x224>)
 8005874:	4613      	mov	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4403      	add	r3, r0
 800587e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005884:	4b1b      	ldr	r3, [pc, #108]	; (80058f4 <xTaskIncrementTick+0x228>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588a:	429a      	cmp	r2, r3
 800588c:	f67f af59 	bls.w	8005742 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8005890:	2301      	movs	r3, #1
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005894:	e755      	b.n	8005742 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005896:	4b17      	ldr	r3, [pc, #92]	; (80058f4 <xTaskIncrementTick+0x228>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589c:	4914      	ldr	r1, [pc, #80]	; (80058f0 <xTaskIncrementTick+0x224>)
 800589e:	4613      	mov	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	440b      	add	r3, r1
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d901      	bls.n	80058b2 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 80058ae:	2301      	movs	r3, #1
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80058b2:	4b11      	ldr	r3, [pc, #68]	; (80058f8 <xTaskIncrementTick+0x22c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d007      	beq.n	80058ca <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 80058ba:	2301      	movs	r3, #1
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24
 80058be:	e004      	b.n	80058ca <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80058c0:	4b0e      	ldr	r3, [pc, #56]	; (80058fc <xTaskIncrementTick+0x230>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3301      	adds	r3, #1
 80058c6:	4a0d      	ldr	r2, [pc, #52]	; (80058fc <xTaskIncrementTick+0x230>)
 80058c8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3728      	adds	r7, #40	; 0x28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	200007d8 	.word	0x200007d8
 80058d8:	200007bc 	.word	0x200007bc
 80058dc:	200007a0 	.word	0x200007a0
 80058e0:	200007a4 	.word	0x200007a4
 80058e4:	200007cc 	.word	0x200007cc
 80058e8:	200007d0 	.word	0x200007d0
 80058ec:	200007c0 	.word	0x200007c0
 80058f0:	2000073c 	.word	0x2000073c
 80058f4:	20000738 	.word	0x20000738
 80058f8:	200007c8 	.word	0x200007c8
 80058fc:	200007c4 	.word	0x200007c4

08005900 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005906:	4b2d      	ldr	r3, [pc, #180]	; (80059bc <vTaskSwitchContext+0xbc>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800590e:	4b2c      	ldr	r3, [pc, #176]	; (80059c0 <vTaskSwitchContext+0xc0>)
 8005910:	2201      	movs	r2, #1
 8005912:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8005914:	e04d      	b.n	80059b2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8005916:	4b2a      	ldr	r3, [pc, #168]	; (80059c0 <vTaskSwitchContext+0xc0>)
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800591c:	4b29      	ldr	r3, [pc, #164]	; (80059c4 <vTaskSwitchContext+0xc4>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	fab3 f383 	clz	r3, r3
 8005928:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800592a:	7afb      	ldrb	r3, [r7, #11]
 800592c:	f1c3 031f 	rsb	r3, r3, #31
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	4925      	ldr	r1, [pc, #148]	; (80059c8 <vTaskSwitchContext+0xc8>)
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4613      	mov	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	440b      	add	r3, r1
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10a      	bne.n	800595c <vTaskSwitchContext+0x5c>
        __asm volatile
 8005946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	607b      	str	r3, [r7, #4]
    }
 8005958:	bf00      	nop
 800595a:	e7fe      	b.n	800595a <vTaskSwitchContext+0x5a>
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	4613      	mov	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4a18      	ldr	r2, [pc, #96]	; (80059c8 <vTaskSwitchContext+0xc8>)
 8005968:	4413      	add	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	605a      	str	r2, [r3, #4]
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	3308      	adds	r3, #8
 800597e:	429a      	cmp	r2, r3
 8005980:	d104      	bne.n	800598c <vTaskSwitchContext+0x8c>
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	605a      	str	r2, [r3, #4]
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	4a0e      	ldr	r2, [pc, #56]	; (80059cc <vTaskSwitchContext+0xcc>)
 8005994:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8005996:	4b0d      	ldr	r3, [pc, #52]	; (80059cc <vTaskSwitchContext+0xcc>)
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	4b0d      	ldr	r3, [pc, #52]	; (80059d0 <vTaskSwitchContext+0xd0>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d102      	bne.n	80059a8 <vTaskSwitchContext+0xa8>
 80059a2:	f001 fa35 	bl	8006e10 <SEGGER_SYSVIEW_OnIdle>
}
 80059a6:	e004      	b.n	80059b2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80059a8:	4b08      	ldr	r3, [pc, #32]	; (80059cc <vTaskSwitchContext+0xcc>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f001 fa4b 	bl	8006e48 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80059b2:	bf00      	nop
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	200007d8 	.word	0x200007d8
 80059c0:	200007c8 	.word	0x200007c8
 80059c4:	200007c0 	.word	0x200007c0
 80059c8:	2000073c 	.word	0x2000073c
 80059cc:	20000738 	.word	0x20000738
 80059d0:	200007d4 	.word	0x200007d4

080059d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059d8:	4b0a      	ldr	r3, [pc, #40]	; (8005a04 <prvResetNextTaskUnblockTime+0x30>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d104      	bne.n	80059ec <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80059e2:	4b09      	ldr	r3, [pc, #36]	; (8005a08 <prvResetNextTaskUnblockTime+0x34>)
 80059e4:	f04f 32ff 	mov.w	r2, #4294967295
 80059e8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80059ea:	e005      	b.n	80059f8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80059ec:	4b05      	ldr	r3, [pc, #20]	; (8005a04 <prvResetNextTaskUnblockTime+0x30>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a04      	ldr	r2, [pc, #16]	; (8005a08 <prvResetNextTaskUnblockTime+0x34>)
 80059f6:	6013      	str	r3, [r2, #0]
}
 80059f8:	bf00      	nop
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	200007a0 	.word	0x200007a0
 8005a08:	200007d0 	.word	0x200007d0

08005a0c <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b094      	sub	sp, #80	; 0x50
 8005a10:	af02      	add	r7, sp, #8
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
 8005a18:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10a      	bne.n	8005a3a <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005a36:	bf00      	nop
 8005a38:	e7fe      	b.n	8005a38 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00a      	beq.n	8005a56 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005a52:	bf00      	nop
 8005a54:	e7fe      	b.n	8005a54 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a56:	f000 f9c1 	bl	8005ddc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	643b      	str	r3, [r7, #64]	; 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005a5e:	f3ef 8211 	mrs	r2, BASEPRI
 8005a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	623a      	str	r2, [r7, #32]
 8005a74:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8005a76:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a78:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8005a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d006      	beq.n	8005a8e <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	3214      	adds	r2, #20
 8005a86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a8c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005a8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	4413      	add	r3, r2
 8005a94:	3354      	adds	r3, #84	; 0x54
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005a9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	3354      	adds	r3, #84	; 0x54
 8005aa4:	2202      	movs	r2, #2
 8005aa6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005aa8:	78fb      	ldrb	r3, [r7, #3]
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d83b      	bhi.n	8005b26 <xTaskGenericNotifyFromISR+0x11a>
 8005aae:	a201      	add	r2, pc, #4	; (adr r2, 8005ab4 <xTaskGenericNotifyFromISR+0xa8>)
 8005ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab4:	08005b45 	.word	0x08005b45
 8005ab8:	08005ac9 	.word	0x08005ac9
 8005abc:	08005ae5 	.word	0x08005ae5
 8005ac0:	08005afd 	.word	0x08005afd
 8005ac4:	08005b0b 	.word	0x08005b0b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	3214      	adds	r2, #20
 8005ace:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	ea42 0103 	orr.w	r1, r2, r3
 8005ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	3214      	adds	r2, #20
 8005ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005ae2:	e032      	b.n	8005b4a <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	3214      	adds	r2, #20
 8005aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aee:	1c59      	adds	r1, r3, #1
 8005af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	3214      	adds	r2, #20
 8005af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005afa:	e026      	b.n	8005b4a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	3214      	adds	r2, #20
 8005b02:	6879      	ldr	r1, [r7, #4]
 8005b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005b08:	e01f      	b.n	8005b4a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005b0a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d006      	beq.n	8005b20 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	3214      	adds	r2, #20
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005b1e:	e014      	b.n	8005b4a <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8005b20:	2300      	movs	r3, #0
 8005b22:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8005b24:	e011      	b.n	8005b4a <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005b26:	4b69      	ldr	r3, [pc, #420]	; (8005ccc <xTaskGenericNotifyFromISR+0x2c0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00c      	beq.n	8005b48 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	61bb      	str	r3, [r7, #24]
    }
 8005b40:	bf00      	nop
 8005b42:	e7fe      	b.n	8005b42 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8005b44:	bf00      	nop
 8005b46:	e000      	b.n	8005b4a <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8005b48:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8005b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f001 f9ff 	bl	8006f50 <SEGGER_SYSVIEW_ShrinkId>
 8005b52:	78f9      	ldrb	r1, [r7, #3]
 8005b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b58:	9201      	str	r2, [sp, #4]
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	4601      	mov	r1, r0
 8005b62:	203f      	movs	r0, #63	; 0x3f
 8005b64:	f000 fe6c 	bl	8006840 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005b68:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	f040 80a2 	bne.w	8005cb6 <xTaskGenericNotifyFromISR+0x2aa>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00a      	beq.n	8005b90 <xTaskGenericNotifyFromISR+0x184>
        __asm volatile
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	617b      	str	r3, [r7, #20]
    }
 8005b8c:	bf00      	nop
 8005b8e:	e7fe      	b.n	8005b8e <xTaskGenericNotifyFromISR+0x182>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b90:	4b4f      	ldr	r3, [pc, #316]	; (8005cd0 <xTaskGenericNotifyFromISR+0x2c4>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d162      	bne.n	8005c5e <xTaskGenericNotifyFromISR+0x252>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	633b      	str	r3, [r7, #48]	; 0x30
 8005b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ba4:	68d2      	ldr	r2, [r2, #12]
 8005ba6:	609a      	str	r2, [r3, #8]
 8005ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bae:	6892      	ldr	r2, [r2, #8]
 8005bb0:	605a      	str	r2, [r3, #4]
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bb8:	3304      	adds	r3, #4
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d103      	bne.n	8005bc6 <xTaskGenericNotifyFromISR+0x1ba>
 8005bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	605a      	str	r2, [r3, #4]
 8005bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bc8:	2200      	movs	r2, #0
 8005bca:	615a      	str	r2, [r3, #20]
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	1e5a      	subs	r2, r3, #1
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd4:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f001 f977 	bl	8006ecc <SEGGER_SYSVIEW_OnTaskStartReady>
 8005bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be2:	2201      	movs	r2, #1
 8005be4:	409a      	lsls	r2, r3
 8005be6:	4b3b      	ldr	r3, [pc, #236]	; (8005cd4 <xTaskGenericNotifyFromISR+0x2c8>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	4a39      	ldr	r2, [pc, #228]	; (8005cd4 <xTaskGenericNotifyFromISR+0x2c8>)
 8005bee:	6013      	str	r3, [r2, #0]
 8005bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf4:	4938      	ldr	r1, [pc, #224]	; (8005cd8 <xTaskGenericNotifyFromISR+0x2cc>)
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	440b      	add	r3, r1
 8005c00:	3304      	adds	r3, #4
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c0a:	609a      	str	r2, [r3, #8]
 8005c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c12:	60da      	str	r2, [r3, #12]
 8005c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c1a:	3204      	adds	r2, #4
 8005c1c:	605a      	str	r2, [r3, #4]
 8005c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c20:	1d1a      	adds	r2, r3, #4
 8005c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c24:	609a      	str	r2, [r3, #8]
 8005c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4a29      	ldr	r2, [pc, #164]	; (8005cd8 <xTaskGenericNotifyFromISR+0x2cc>)
 8005c34:	441a      	add	r2, r3
 8005c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c38:	615a      	str	r2, [r3, #20]
 8005c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c3e:	4926      	ldr	r1, [pc, #152]	; (8005cd8 <xTaskGenericNotifyFromISR+0x2cc>)
 8005c40:	4613      	mov	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	440b      	add	r3, r1
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	1c59      	adds	r1, r3, #1
 8005c4e:	4822      	ldr	r0, [pc, #136]	; (8005cd8 <xTaskGenericNotifyFromISR+0x2cc>)
 8005c50:	4613      	mov	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4403      	add	r3, r0
 8005c5a:	6019      	str	r1, [r3, #0]
 8005c5c:	e01b      	b.n	8005c96 <xTaskGenericNotifyFromISR+0x28a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005c5e:	4b1f      	ldr	r3, [pc, #124]	; (8005cdc <xTaskGenericNotifyFromISR+0x2d0>)
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	637b      	str	r3, [r7, #52]	; 0x34
 8005c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c68:	61da      	str	r2, [r3, #28]
 8005c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6c:	689a      	ldr	r2, [r3, #8]
 8005c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c70:	621a      	str	r2, [r3, #32]
 8005c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c78:	3218      	adds	r2, #24
 8005c7a:	605a      	str	r2, [r3, #4]
 8005c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c7e:	f103 0218 	add.w	r2, r3, #24
 8005c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c84:	609a      	str	r2, [r3, #8]
 8005c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c88:	4a14      	ldr	r2, [pc, #80]	; (8005cdc <xTaskGenericNotifyFromISR+0x2d0>)
 8005c8a:	629a      	str	r2, [r3, #40]	; 0x28
 8005c8c:	4b13      	ldr	r3, [pc, #76]	; (8005cdc <xTaskGenericNotifyFromISR+0x2d0>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3301      	adds	r3, #1
 8005c92:	4a12      	ldr	r2, [pc, #72]	; (8005cdc <xTaskGenericNotifyFromISR+0x2d0>)
 8005c94:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c9a:	4b11      	ldr	r3, [pc, #68]	; (8005ce0 <xTaskGenericNotifyFromISR+0x2d4>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d908      	bls.n	8005cb6 <xTaskGenericNotifyFromISR+0x2aa>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8005ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d002      	beq.n	8005cb0 <xTaskGenericNotifyFromISR+0x2a4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8005caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cac:	2201      	movs	r2, #1
 8005cae:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8005cb0:	4b0c      	ldr	r3, [pc, #48]	; (8005ce4 <xTaskGenericNotifyFromISR+0x2d8>)
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005cc0:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8005cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3748      	adds	r7, #72	; 0x48
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	200007bc 	.word	0x200007bc
 8005cd0:	200007d8 	.word	0x200007d8
 8005cd4:	200007c0 	.word	0x200007c0
 8005cd8:	2000073c 	.word	0x2000073c
 8005cdc:	200007a8 	.word	0x200007a8
 8005ce0:	20000738 	.word	0x20000738
 8005ce4:	200007c8 	.word	0x200007c8
	...

08005cf0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005cf0:	4b07      	ldr	r3, [pc, #28]	; (8005d10 <pxCurrentTCBConst2>)
 8005cf2:	6819      	ldr	r1, [r3, #0]
 8005cf4:	6808      	ldr	r0, [r1, #0]
 8005cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfa:	f380 8809 	msr	PSP, r0
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f04f 0000 	mov.w	r0, #0
 8005d06:	f380 8811 	msr	BASEPRI, r0
 8005d0a:	4770      	bx	lr
 8005d0c:	f3af 8000 	nop.w

08005d10 <pxCurrentTCBConst2>:
 8005d10:	20000738 	.word	0x20000738
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005d14:	bf00      	nop
 8005d16:	bf00      	nop
	...

08005d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005d20:	f3ef 8009 	mrs	r0, PSP
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	4b15      	ldr	r3, [pc, #84]	; (8005d80 <pxCurrentTCBConst>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	f01e 0f10 	tst.w	lr, #16
 8005d30:	bf08      	it	eq
 8005d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d3a:	6010      	str	r0, [r2, #0]
 8005d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d44:	f380 8811 	msr	BASEPRI, r0
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f7ff fdd6 	bl	8005900 <vTaskSwitchContext>
 8005d54:	f04f 0000 	mov.w	r0, #0
 8005d58:	f380 8811 	msr	BASEPRI, r0
 8005d5c:	bc09      	pop	{r0, r3}
 8005d5e:	6819      	ldr	r1, [r3, #0]
 8005d60:	6808      	ldr	r0, [r1, #0]
 8005d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d66:	f01e 0f10 	tst.w	lr, #16
 8005d6a:	bf08      	it	eq
 8005d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d70:	f380 8809 	msr	PSP, r0
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	f3af 8000 	nop.w

08005d80 <pxCurrentTCBConst>:
 8005d80:	20000738 	.word	0x20000738
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop

08005d88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
        __asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	607b      	str	r3, [r7, #4]
    }
 8005da0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8005da2:	f000 ffbb 	bl	8006d1c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005da6:	f7ff fc91 	bl	80056cc <xTaskIncrementTick>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d006      	beq.n	8005dbe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8005db0:	f001 f812 	bl	8006dd8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005db4:	4b08      	ldr	r3, [pc, #32]	; (8005dd8 <SysTick_Handler+0x50>)
 8005db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	e001      	b.n	8005dc2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8005dbe:	f000 ffef 	bl	8006da0 <SEGGER_SYSVIEW_RecordExitISR>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	f383 8811 	msr	BASEPRI, r3
    }
 8005dcc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8005dce:	bf00      	nop
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	e000ed04 	.word	0xe000ed04

08005ddc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005de2:	f3ef 8305 	mrs	r3, IPSR
 8005de6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2b0f      	cmp	r3, #15
 8005dec:	d914      	bls.n	8005e18 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005dee:	4a17      	ldr	r2, [pc, #92]	; (8005e4c <vPortValidateInterruptPriority+0x70>)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	4413      	add	r3, r2
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005df8:	4b15      	ldr	r3, [pc, #84]	; (8005e50 <vPortValidateInterruptPriority+0x74>)
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	7afa      	ldrb	r2, [r7, #11]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d20a      	bcs.n	8005e18 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	607b      	str	r3, [r7, #4]
    }
 8005e14:	bf00      	nop
 8005e16:	e7fe      	b.n	8005e16 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e18:	4b0e      	ldr	r3, [pc, #56]	; (8005e54 <vPortValidateInterruptPriority+0x78>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e20:	4b0d      	ldr	r3, [pc, #52]	; (8005e58 <vPortValidateInterruptPriority+0x7c>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d90a      	bls.n	8005e3e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	603b      	str	r3, [r7, #0]
    }
 8005e3a:	bf00      	nop
 8005e3c:	e7fe      	b.n	8005e3c <vPortValidateInterruptPriority+0x60>
    }
 8005e3e:	bf00      	nop
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	e000e3f0 	.word	0xe000e3f0
 8005e50:	200007dc 	.word	0x200007dc
 8005e54:	e000ed0c 	.word	0xe000ed0c
 8005e58:	200007e0 	.word	0x200007e0

08005e5c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005e62:	4b24      	ldr	r3, [pc, #144]	; (8005ef4 <_DoInit+0x98>)
 8005e64:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2203      	movs	r2, #3
 8005e6a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2203      	movs	r2, #3
 8005e70:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a20      	ldr	r2, [pc, #128]	; (8005ef8 <_DoInit+0x9c>)
 8005e76:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a20      	ldr	r2, [pc, #128]	; (8005efc <_DoInit+0xa0>)
 8005e7c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e84:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a17      	ldr	r2, [pc, #92]	; (8005ef8 <_DoInit+0x9c>)
 8005e9c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a17      	ldr	r2, [pc, #92]	; (8005f00 <_DoInit+0xa4>)
 8005ea2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2210      	movs	r2, #16
 8005ea8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	3307      	adds	r3, #7
 8005ec0:	4a10      	ldr	r2, [pc, #64]	; (8005f04 <_DoInit+0xa8>)
 8005ec2:	6810      	ldr	r0, [r2, #0]
 8005ec4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005ec6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a0e      	ldr	r2, [pc, #56]	; (8005f08 <_DoInit+0xac>)
 8005ece:	6810      	ldr	r0, [r2, #0]
 8005ed0:	6018      	str	r0, [r3, #0]
 8005ed2:	8891      	ldrh	r1, [r2, #4]
 8005ed4:	7992      	ldrb	r2, [r2, #6]
 8005ed6:	8099      	strh	r1, [r3, #4]
 8005ed8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005eda:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005ee4:	f3bf 8f5f 	dmb	sy
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	200007e4 	.word	0x200007e4
 8005ef8:	08009b68 	.word	0x08009b68
 8005efc:	2000088c 	.word	0x2000088c
 8005f00:	20000c8c 	.word	0x20000c8c
 8005f04:	08009b74 	.word	0x08009b74
 8005f08:	08009b78 	.word	0x08009b78

08005f0c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b08a      	sub	sp, #40	; 0x28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d905      	bls.n	8005f3c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	3b01      	subs	r3, #1
 8005f38:	627b      	str	r3, [r7, #36]	; 0x24
 8005f3a:	e007      	b.n	8005f4c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	69b9      	ldr	r1, [r7, #24]
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	1acb      	subs	r3, r1, r3
 8005f46:	4413      	add	r3, r2
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f56:	4293      	cmp	r3, r2
 8005f58:	bf28      	it	cs
 8005f5a:	4613      	movcs	r3, r2
 8005f5c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4293      	cmp	r3, r2
 8005f64:	bf28      	it	cs
 8005f66:	4613      	movcs	r3, r2
 8005f68:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	4413      	add	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f76:	68b9      	ldr	r1, [r7, #8]
 8005f78:	6978      	ldr	r0, [r7, #20]
 8005f7a:	f001 fec0 	bl	8007cfe <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005f7e:	6a3a      	ldr	r2, [r7, #32]
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	4413      	add	r3, r2
 8005f84:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	4413      	add	r3, r2
 8005f8c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005f96:	69fa      	ldr	r2, [r7, #28]
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	4413      	add	r3, r2
 8005f9c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	69fa      	ldr	r2, [r7, #28]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d101      	bne.n	8005fac <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005fac:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	69fa      	ldr	r2, [r7, #28]
 8005fb4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1b2      	bne.n	8005f22 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3728      	adds	r7, #40	; 0x28
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b088      	sub	sp, #32
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	60f8      	str	r0, [r7, #12]
 8005fce:	60b9      	str	r1, [r7, #8]
 8005fd0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	689a      	ldr	r2, [r3, #8]
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d911      	bls.n	800600e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	68b9      	ldr	r1, [r7, #8]
 8005ff8:	6938      	ldr	r0, [r7, #16]
 8005ffa:	f001 fe80 	bl	8007cfe <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005ffe:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8006002:	69fa      	ldr	r2, [r7, #28]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	441a      	add	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800600c:	e01f      	b.n	800604e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	4413      	add	r3, r2
 800601a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	68b9      	ldr	r1, [r7, #8]
 8006020:	6938      	ldr	r0, [r7, #16]
 8006022:	f001 fe6c 	bl	8007cfe <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	4413      	add	r3, r2
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	4619      	mov	r1, r3
 800603e:	6938      	ldr	r0, [r7, #16]
 8006040:	f001 fe5d 	bl	8007cfe <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006044:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	60da      	str	r2, [r3, #12]
}
 800604e:	bf00      	nop
 8006050:	3720      	adds	r7, #32
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8006056:	b480      	push	{r7}
 8006058:	b087      	sub	sp, #28
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	429a      	cmp	r2, r3
 8006070:	d808      	bhi.n	8006084 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	689a      	ldr	r2, [r3, #8]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	1ad2      	subs	r2, r2, r3
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	4413      	add	r3, r2
 800607e:	3b01      	subs	r3, #1
 8006080:	617b      	str	r3, [r7, #20]
 8006082:	e004      	b.n	800608e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	3b01      	subs	r3, #1
 800608c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800608e:	697b      	ldr	r3, [r7, #20]
}
 8006090:	4618      	mov	r0, r3
 8006092:	371c      	adds	r7, #28
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800609c:	b580      	push	{r7, lr}
 800609e:	b08c      	sub	sp, #48	; 0x30
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80060a8:	4b3e      	ldr	r3, [pc, #248]	; (80061a4 <SEGGER_RTT_ReadNoLock+0x108>)
 80060aa:	623b      	str	r3, [r7, #32]
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <SEGGER_RTT_ReadNoLock+0x1e>
 80060b6:	f7ff fed1 	bl	8005e5c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	4613      	mov	r3, r2
 80060be:	005b      	lsls	r3, r3, #1
 80060c0:	4413      	add	r3, r2
 80060c2:	00db      	lsls	r3, r3, #3
 80060c4:	3360      	adds	r3, #96	; 0x60
 80060c6:	4a37      	ldr	r2, [pc, #220]	; (80061a4 <SEGGER_RTT_ReadNoLock+0x108>)
 80060c8:	4413      	add	r3, r2
 80060ca:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80060dc:	2300      	movs	r3, #0
 80060de:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80060e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d92b      	bls.n	8006140 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4293      	cmp	r3, r2
 80060f8:	bf28      	it	cs
 80060fa:	4613      	movcs	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006104:	4413      	add	r3, r2
 8006106:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	6939      	ldr	r1, [r7, #16]
 800610c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800610e:	f001 fdf6 	bl	8007cfe <memcpy>
    NumBytesRead += NumBytesRem;
 8006112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	4413      	add	r3, r2
 8006118:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800611a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	4413      	add	r3, r2
 8006120:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800612a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	4413      	add	r3, r2
 8006130:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006138:	429a      	cmp	r2, r3
 800613a:	d101      	bne.n	8006140 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800613c:	2300      	movs	r3, #0
 800613e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4293      	cmp	r3, r2
 800614e:	bf28      	it	cs
 8006150:	4613      	movcs	r3, r2
 8006152:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d019      	beq.n	800618e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006160:	4413      	add	r3, r2
 8006162:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	6939      	ldr	r1, [r7, #16]
 8006168:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800616a:	f001 fdc8 	bl	8007cfe <memcpy>
    NumBytesRead += NumBytesRem;
 800616e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	4413      	add	r3, r2
 8006174:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	4413      	add	r3, r2
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	4413      	add	r3, r2
 800618c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800618e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006198:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800619a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800619c:	4618      	mov	r0, r3
 800619e:	3730      	adds	r7, #48	; 0x30
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	200007e4 	.word	0x200007e4

080061a8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b088      	sub	sp, #32
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	4613      	mov	r3, r2
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	4413      	add	r3, r2
 80061c2:	00db      	lsls	r3, r3, #3
 80061c4:	4a1f      	ldr	r2, [pc, #124]	; (8006244 <SEGGER_RTT_WriteNoLock+0x9c>)
 80061c6:	4413      	add	r3, r2
 80061c8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d029      	beq.n	8006226 <SEGGER_RTT_WriteNoLock+0x7e>
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d82e      	bhi.n	8006234 <SEGGER_RTT_WriteNoLock+0x8c>
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d002      	beq.n	80061e0 <SEGGER_RTT_WriteNoLock+0x38>
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d013      	beq.n	8006206 <SEGGER_RTT_WriteNoLock+0x5e>
 80061de:	e029      	b.n	8006234 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80061e0:	6978      	ldr	r0, [r7, #20]
 80061e2:	f7ff ff38 	bl	8006056 <_GetAvailWriteSpace>
 80061e6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d202      	bcs.n	80061f6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80061f0:	2300      	movs	r3, #0
 80061f2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80061f4:	e021      	b.n	800623a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	69b9      	ldr	r1, [r7, #24]
 80061fe:	6978      	ldr	r0, [r7, #20]
 8006200:	f7ff fee1 	bl	8005fc6 <_WriteNoCheck>
    break;
 8006204:	e019      	b.n	800623a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006206:	6978      	ldr	r0, [r7, #20]
 8006208:	f7ff ff25 	bl	8006056 <_GetAvailWriteSpace>
 800620c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	4293      	cmp	r3, r2
 8006214:	bf28      	it	cs
 8006216:	4613      	movcs	r3, r2
 8006218:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800621a:	69fa      	ldr	r2, [r7, #28]
 800621c:	69b9      	ldr	r1, [r7, #24]
 800621e:	6978      	ldr	r0, [r7, #20]
 8006220:	f7ff fed1 	bl	8005fc6 <_WriteNoCheck>
    break;
 8006224:	e009      	b.n	800623a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	69b9      	ldr	r1, [r7, #24]
 800622a:	6978      	ldr	r0, [r7, #20]
 800622c:	f7ff fe6e 	bl	8005f0c <_WriteBlocking>
 8006230:	61f8      	str	r0, [r7, #28]
    break;
 8006232:	e002      	b.n	800623a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8006234:	2300      	movs	r3, #0
 8006236:	61fb      	str	r3, [r7, #28]
    break;
 8006238:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800623a:	69fb      	ldr	r3, [r7, #28]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3720      	adds	r7, #32
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	200007e4 	.word	0x200007e4

08006248 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006248:	b580      	push	{r7, lr}
 800624a:	b088      	sub	sp, #32
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8006254:	4b0e      	ldr	r3, [pc, #56]	; (8006290 <SEGGER_RTT_Write+0x48>)
 8006256:	61fb      	str	r3, [r7, #28]
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <SEGGER_RTT_Write+0x1e>
 8006262:	f7ff fdfb 	bl	8005e5c <_DoInit>
  SEGGER_RTT_LOCK();
 8006266:	f3ef 8311 	mrs	r3, BASEPRI
 800626a:	f04f 0120 	mov.w	r1, #32
 800626e:	f381 8811 	msr	BASEPRI, r1
 8006272:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	68b9      	ldr	r1, [r7, #8]
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f7ff ff95 	bl	80061a8 <SEGGER_RTT_WriteNoLock>
 800627e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8006286:	697b      	ldr	r3, [r7, #20]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3720      	adds	r7, #32
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	200007e4 	.word	0x200007e4

08006294 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006294:	b480      	push	{r7}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80062a0:	2300      	movs	r3, #0
 80062a2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80062a4:	e002      	b.n	80062ac <_EncodeStr+0x18>
    Len++;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	3301      	adds	r3, #1
 80062aa:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	4413      	add	r3, r2
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1f6      	bne.n	80062a6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d901      	bls.n	80062c4 <_EncodeStr+0x30>
    Len = Limit;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	2bfe      	cmp	r3, #254	; 0xfe
 80062c8:	d806      	bhi.n	80062d8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	60fa      	str	r2, [r7, #12]
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	701a      	strb	r2, [r3, #0]
 80062d6:	e011      	b.n	80062fc <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	1c5a      	adds	r2, r3, #1
 80062dc:	60fa      	str	r2, [r7, #12]
 80062de:	22ff      	movs	r2, #255	; 0xff
 80062e0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	1c5a      	adds	r2, r3, #1
 80062e6:	60fa      	str	r2, [r7, #12]
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	b2d2      	uxtb	r2, r2
 80062ec:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	0a19      	lsrs	r1, r3, #8
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	1c5a      	adds	r2, r3, #1
 80062f6:	60fa      	str	r2, [r7, #12]
 80062f8:	b2ca      	uxtb	r2, r1
 80062fa:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80062fc:	2300      	movs	r3, #0
 80062fe:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006300:	e00a      	b.n	8006318 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	1c53      	adds	r3, r2, #1
 8006306:	60bb      	str	r3, [r7, #8]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	1c59      	adds	r1, r3, #1
 800630c:	60f9      	str	r1, [r7, #12]
 800630e:	7812      	ldrb	r2, [r2, #0]
 8006310:	701a      	strb	r2, [r3, #0]
    n++;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	3301      	adds	r3, #1
 8006316:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	429a      	cmp	r2, r3
 800631e:	d3f0      	bcc.n	8006302 <_EncodeStr+0x6e>
  }
  return pPayload;
 8006320:	68fb      	ldr	r3, [r7, #12]
}
 8006322:	4618      	mov	r0, r3
 8006324:	371c      	adds	r7, #28
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800632e:	b480      	push	{r7}
 8006330:	b083      	sub	sp, #12
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	3304      	adds	r3, #4
}
 800633a:	4618      	mov	r0, r3
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
	...

08006348 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800634e:	4b35      	ldr	r3, [pc, #212]	; (8006424 <_HandleIncomingPacket+0xdc>)
 8006350:	7e1b      	ldrb	r3, [r3, #24]
 8006352:	4618      	mov	r0, r3
 8006354:	1cfb      	adds	r3, r7, #3
 8006356:	2201      	movs	r2, #1
 8006358:	4619      	mov	r1, r3
 800635a:	f7ff fe9f 	bl	800609c <SEGGER_RTT_ReadNoLock>
 800635e:	4603      	mov	r3, r0
 8006360:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	dd59      	ble.n	800641c <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	2b80      	cmp	r3, #128	; 0x80
 800636c:	d032      	beq.n	80063d4 <_HandleIncomingPacket+0x8c>
 800636e:	2b80      	cmp	r3, #128	; 0x80
 8006370:	dc42      	bgt.n	80063f8 <_HandleIncomingPacket+0xb0>
 8006372:	2b07      	cmp	r3, #7
 8006374:	dc16      	bgt.n	80063a4 <_HandleIncomingPacket+0x5c>
 8006376:	2b00      	cmp	r3, #0
 8006378:	dd3e      	ble.n	80063f8 <_HandleIncomingPacket+0xb0>
 800637a:	3b01      	subs	r3, #1
 800637c:	2b06      	cmp	r3, #6
 800637e:	d83b      	bhi.n	80063f8 <_HandleIncomingPacket+0xb0>
 8006380:	a201      	add	r2, pc, #4	; (adr r2, 8006388 <_HandleIncomingPacket+0x40>)
 8006382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006386:	bf00      	nop
 8006388:	080063ab 	.word	0x080063ab
 800638c:	080063b1 	.word	0x080063b1
 8006390:	080063b7 	.word	0x080063b7
 8006394:	080063bd 	.word	0x080063bd
 8006398:	080063c3 	.word	0x080063c3
 800639c:	080063c9 	.word	0x080063c9
 80063a0:	080063cf 	.word	0x080063cf
 80063a4:	2b7f      	cmp	r3, #127	; 0x7f
 80063a6:	d034      	beq.n	8006412 <_HandleIncomingPacket+0xca>
 80063a8:	e026      	b.n	80063f8 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80063aa:	f000 faf7 	bl	800699c <SEGGER_SYSVIEW_Start>
      break;
 80063ae:	e035      	b.n	800641c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80063b0:	f000 fbae 	bl	8006b10 <SEGGER_SYSVIEW_Stop>
      break;
 80063b4:	e032      	b.n	800641c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80063b6:	f000 fc7f 	bl	8006cb8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80063ba:	e02f      	b.n	800641c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80063bc:	f000 fc68 	bl	8006c90 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80063c0:	e02c      	b.n	800641c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80063c2:	f000 fbcb 	bl	8006b5c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80063c6:	e029      	b.n	800641c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80063c8:	f000 fe70 	bl	80070ac <SEGGER_SYSVIEW_SendNumModules>
      break;
 80063cc:	e026      	b.n	800641c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80063ce:	f000 fe4f 	bl	8007070 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80063d2:	e023      	b.n	800641c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80063d4:	4b13      	ldr	r3, [pc, #76]	; (8006424 <_HandleIncomingPacket+0xdc>)
 80063d6:	7e1b      	ldrb	r3, [r3, #24]
 80063d8:	4618      	mov	r0, r3
 80063da:	1cfb      	adds	r3, r7, #3
 80063dc:	2201      	movs	r2, #1
 80063de:	4619      	mov	r1, r3
 80063e0:	f7ff fe5c 	bl	800609c <SEGGER_RTT_ReadNoLock>
 80063e4:	4603      	mov	r3, r0
 80063e6:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	dd13      	ble.n	8006416 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80063ee:	78fb      	ldrb	r3, [r7, #3]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f000 fdbd 	bl	8006f70 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80063f6:	e00e      	b.n	8006416 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80063f8:	78fb      	ldrb	r3, [r7, #3]
 80063fa:	b25b      	sxtb	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	da0c      	bge.n	800641a <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006400:	4b08      	ldr	r3, [pc, #32]	; (8006424 <_HandleIncomingPacket+0xdc>)
 8006402:	7e1b      	ldrb	r3, [r3, #24]
 8006404:	4618      	mov	r0, r3
 8006406:	1cfb      	adds	r3, r7, #3
 8006408:	2201      	movs	r2, #1
 800640a:	4619      	mov	r1, r3
 800640c:	f7ff fe46 	bl	800609c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006410:	e003      	b.n	800641a <_HandleIncomingPacket+0xd2>
      break;
 8006412:	bf00      	nop
 8006414:	e002      	b.n	800641c <_HandleIncomingPacket+0xd4>
      break;
 8006416:	bf00      	nop
 8006418:	e000      	b.n	800641c <_HandleIncomingPacket+0xd4>
      break;
 800641a:	bf00      	nop
    }
  }
}
 800641c:	bf00      	nop
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	20000c9c 	.word	0x20000c9c

08006428 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006428:	b580      	push	{r7, lr}
 800642a:	b08c      	sub	sp, #48	; 0x30
 800642c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800642e:	2301      	movs	r3, #1
 8006430:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006432:	1d3b      	adds	r3, r7, #4
 8006434:	3301      	adds	r3, #1
 8006436:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800643c:	4b31      	ldr	r3, [pc, #196]	; (8006504 <_TrySendOverflowPacket+0xdc>)
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	62bb      	str	r3, [r7, #40]	; 0x28
 8006442:	e00b      	b.n	800645c <_TrySendOverflowPacket+0x34>
 8006444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006446:	b2da      	uxtb	r2, r3
 8006448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644a:	1c59      	adds	r1, r3, #1
 800644c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800644e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006452:	b2d2      	uxtb	r2, r2
 8006454:	701a      	strb	r2, [r3, #0]
 8006456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006458:	09db      	lsrs	r3, r3, #7
 800645a:	62bb      	str	r3, [r7, #40]	; 0x28
 800645c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645e:	2b7f      	cmp	r3, #127	; 0x7f
 8006460:	d8f0      	bhi.n	8006444 <_TrySendOverflowPacket+0x1c>
 8006462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800646a:	b2d2      	uxtb	r2, r2
 800646c:	701a      	strb	r2, [r3, #0]
 800646e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006470:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006472:	4b25      	ldr	r3, [pc, #148]	; (8006508 <_TrySendOverflowPacket+0xe0>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006478:	4b22      	ldr	r3, [pc, #136]	; (8006504 <_TrySendOverflowPacket+0xdc>)
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	627b      	str	r3, [r7, #36]	; 0x24
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	623b      	str	r3, [r7, #32]
 800648a:	e00b      	b.n	80064a4 <_TrySendOverflowPacket+0x7c>
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	b2da      	uxtb	r2, r3
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	1c59      	adds	r1, r3, #1
 8006494:	6279      	str	r1, [r7, #36]	; 0x24
 8006496:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800649a:	b2d2      	uxtb	r2, r2
 800649c:	701a      	strb	r2, [r3, #0]
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	09db      	lsrs	r3, r3, #7
 80064a2:	623b      	str	r3, [r7, #32]
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	2b7f      	cmp	r3, #127	; 0x7f
 80064a8:	d8f0      	bhi.n	800648c <_TrySendOverflowPacket+0x64>
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	1c5a      	adds	r2, r3, #1
 80064ae:	627a      	str	r2, [r7, #36]	; 0x24
 80064b0:	6a3a      	ldr	r2, [r7, #32]
 80064b2:	b2d2      	uxtb	r2, r2
 80064b4:	701a      	strb	r2, [r3, #0]
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80064ba:	4b12      	ldr	r3, [pc, #72]	; (8006504 <_TrySendOverflowPacket+0xdc>)
 80064bc:	785b      	ldrb	r3, [r3, #1]
 80064be:	4618      	mov	r0, r3
 80064c0:	1d3b      	adds	r3, r7, #4
 80064c2:	69fa      	ldr	r2, [r7, #28]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	461a      	mov	r2, r3
 80064c8:	1d3b      	adds	r3, r7, #4
 80064ca:	4619      	mov	r1, r3
 80064cc:	f7f9 fea0 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80064d0:	4603      	mov	r3, r0
 80064d2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d009      	beq.n	80064ee <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80064da:	4a0a      	ldr	r2, [pc, #40]	; (8006504 <_TrySendOverflowPacket+0xdc>)
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80064e0:	4b08      	ldr	r3, [pc, #32]	; (8006504 <_TrySendOverflowPacket+0xdc>)
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	3b01      	subs	r3, #1
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	4b06      	ldr	r3, [pc, #24]	; (8006504 <_TrySendOverflowPacket+0xdc>)
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	e004      	b.n	80064f8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80064ee:	4b05      	ldr	r3, [pc, #20]	; (8006504 <_TrySendOverflowPacket+0xdc>)
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	3301      	adds	r3, #1
 80064f4:	4a03      	ldr	r2, [pc, #12]	; (8006504 <_TrySendOverflowPacket+0xdc>)
 80064f6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80064f8:	693b      	ldr	r3, [r7, #16]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3730      	adds	r7, #48	; 0x30
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	20000c9c 	.word	0x20000c9c
 8006508:	e0001004 	.word	0xe0001004

0800650c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800650c:	b580      	push	{r7, lr}
 800650e:	b08a      	sub	sp, #40	; 0x28
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006518:	4b6c      	ldr	r3, [pc, #432]	; (80066cc <_SendPacket+0x1c0>)
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d010      	beq.n	8006542 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006520:	4b6a      	ldr	r3, [pc, #424]	; (80066cc <_SendPacket+0x1c0>)
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 80a3 	beq.w	8006670 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800652a:	4b68      	ldr	r3, [pc, #416]	; (80066cc <_SendPacket+0x1c0>)
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2b02      	cmp	r3, #2
 8006530:	d109      	bne.n	8006546 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006532:	f7ff ff79 	bl	8006428 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006536:	4b65      	ldr	r3, [pc, #404]	; (80066cc <_SendPacket+0x1c0>)
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	2b01      	cmp	r3, #1
 800653c:	f040 809a 	bne.w	8006674 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8006540:	e001      	b.n	8006546 <_SendPacket+0x3a>
    goto Send;
 8006542:	bf00      	nop
 8006544:	e000      	b.n	8006548 <_SendPacket+0x3c>
Send:
 8006546:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b1f      	cmp	r3, #31
 800654c:	d809      	bhi.n	8006562 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800654e:	4b5f      	ldr	r3, [pc, #380]	; (80066cc <_SendPacket+0x1c0>)
 8006550:	69da      	ldr	r2, [r3, #28]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	fa22 f303 	lsr.w	r3, r2, r3
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	2b00      	cmp	r3, #0
 800655e:	f040 808b 	bne.w	8006678 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b17      	cmp	r3, #23
 8006566:	d807      	bhi.n	8006578 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	3b01      	subs	r3, #1
 800656c:	60fb      	str	r3, [r7, #12]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	b2da      	uxtb	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	701a      	strb	r2, [r3, #0]
 8006576:	e03d      	b.n	80065f4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	2b7f      	cmp	r3, #127	; 0x7f
 8006584:	d912      	bls.n	80065ac <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	09da      	lsrs	r2, r3, #7
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3b01      	subs	r3, #1
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	b2d2      	uxtb	r2, r2
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	b2db      	uxtb	r3, r3
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	3a01      	subs	r2, #1
 800659e:	60fa      	str	r2, [r7, #12]
 80065a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	701a      	strb	r2, [r3, #0]
 80065aa:	e006      	b.n	80065ba <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	3b01      	subs	r3, #1
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b7f      	cmp	r3, #127	; 0x7f
 80065be:	d912      	bls.n	80065e6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	09da      	lsrs	r2, r3, #7
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	60fb      	str	r3, [r7, #12]
 80065ca:	b2d2      	uxtb	r2, r2
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	3a01      	subs	r2, #1
 80065d8:	60fa      	str	r2, [r7, #12]
 80065da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	701a      	strb	r2, [r3, #0]
 80065e4:	e006      	b.n	80065f4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	3b01      	subs	r3, #1
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80065f4:	4b36      	ldr	r3, [pc, #216]	; (80066d0 <_SendPacket+0x1c4>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80065fa:	4b34      	ldr	r3, [pc, #208]	; (80066cc <_SendPacket+0x1c0>)
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	627b      	str	r3, [r7, #36]	; 0x24
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	623b      	str	r3, [r7, #32]
 800660c:	e00b      	b.n	8006626 <_SendPacket+0x11a>
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	b2da      	uxtb	r2, r3
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	1c59      	adds	r1, r3, #1
 8006616:	6279      	str	r1, [r7, #36]	; 0x24
 8006618:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	701a      	strb	r2, [r3, #0]
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	09db      	lsrs	r3, r3, #7
 8006624:	623b      	str	r3, [r7, #32]
 8006626:	6a3b      	ldr	r3, [r7, #32]
 8006628:	2b7f      	cmp	r3, #127	; 0x7f
 800662a:	d8f0      	bhi.n	800660e <_SendPacket+0x102>
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	627a      	str	r2, [r7, #36]	; 0x24
 8006632:	6a3a      	ldr	r2, [r7, #32]
 8006634:	b2d2      	uxtb	r2, r2
 8006636:	701a      	strb	r2, [r3, #0]
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800663c:	4b23      	ldr	r3, [pc, #140]	; (80066cc <_SendPacket+0x1c0>)
 800663e:	785b      	ldrb	r3, [r3, #1]
 8006640:	4618      	mov	r0, r3
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	461a      	mov	r2, r3
 800664a:	68f9      	ldr	r1, [r7, #12]
 800664c:	f7f9 fde0 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006650:	4603      	mov	r3, r0
 8006652:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800665a:	4a1c      	ldr	r2, [pc, #112]	; (80066cc <_SendPacket+0x1c0>)
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	60d3      	str	r3, [r2, #12]
 8006660:	e00b      	b.n	800667a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006662:	4b1a      	ldr	r3, [pc, #104]	; (80066cc <_SendPacket+0x1c0>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	3301      	adds	r3, #1
 8006668:	b2da      	uxtb	r2, r3
 800666a:	4b18      	ldr	r3, [pc, #96]	; (80066cc <_SendPacket+0x1c0>)
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	e004      	b.n	800667a <_SendPacket+0x16e>
    goto SendDone;
 8006670:	bf00      	nop
 8006672:	e002      	b.n	800667a <_SendPacket+0x16e>
      goto SendDone;
 8006674:	bf00      	nop
 8006676:	e000      	b.n	800667a <_SendPacket+0x16e>
      goto SendDone;
 8006678:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800667a:	4b14      	ldr	r3, [pc, #80]	; (80066cc <_SendPacket+0x1c0>)
 800667c:	7e1b      	ldrb	r3, [r3, #24]
 800667e:	4619      	mov	r1, r3
 8006680:	4a14      	ldr	r2, [pc, #80]	; (80066d4 <_SendPacket+0x1c8>)
 8006682:	460b      	mov	r3, r1
 8006684:	005b      	lsls	r3, r3, #1
 8006686:	440b      	add	r3, r1
 8006688:	00db      	lsls	r3, r3, #3
 800668a:	4413      	add	r3, r2
 800668c:	336c      	adds	r3, #108	; 0x6c
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	4b0e      	ldr	r3, [pc, #56]	; (80066cc <_SendPacket+0x1c0>)
 8006692:	7e1b      	ldrb	r3, [r3, #24]
 8006694:	4618      	mov	r0, r3
 8006696:	490f      	ldr	r1, [pc, #60]	; (80066d4 <_SendPacket+0x1c8>)
 8006698:	4603      	mov	r3, r0
 800669a:	005b      	lsls	r3, r3, #1
 800669c:	4403      	add	r3, r0
 800669e:	00db      	lsls	r3, r3, #3
 80066a0:	440b      	add	r3, r1
 80066a2:	3370      	adds	r3, #112	; 0x70
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d00b      	beq.n	80066c2 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80066aa:	4b08      	ldr	r3, [pc, #32]	; (80066cc <_SendPacket+0x1c0>)
 80066ac:	789b      	ldrb	r3, [r3, #2]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d107      	bne.n	80066c2 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80066b2:	4b06      	ldr	r3, [pc, #24]	; (80066cc <_SendPacket+0x1c0>)
 80066b4:	2201      	movs	r2, #1
 80066b6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80066b8:	f7ff fe46 	bl	8006348 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80066bc:	4b03      	ldr	r3, [pc, #12]	; (80066cc <_SendPacket+0x1c0>)
 80066be:	2200      	movs	r2, #0
 80066c0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80066c2:	bf00      	nop
 80066c4:	3728      	adds	r7, #40	; 0x28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	20000c9c 	.word	0x20000c9c
 80066d0:	e0001004 	.word	0xe0001004
 80066d4:	200007e4 	.word	0x200007e4

080066d8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80066e0:	f3ef 8311 	mrs	r3, BASEPRI
 80066e4:	f04f 0120 	mov.w	r1, #32
 80066e8:	f381 8811 	msr	BASEPRI, r1
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	4808      	ldr	r0, [pc, #32]	; (8006710 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80066f0:	f7ff fe1d 	bl	800632e <_PreparePacket>
 80066f4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	68b9      	ldr	r1, [r7, #8]
 80066fa:	68b8      	ldr	r0, [r7, #8]
 80066fc:	f7ff ff06 	bl	800650c <_SendPacket>
  RECORD_END();
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f383 8811 	msr	BASEPRI, r3
}
 8006706:	bf00      	nop
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	20000ccc 	.word	0x20000ccc

08006714 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006714:	b580      	push	{r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800671e:	f3ef 8311 	mrs	r3, BASEPRI
 8006722:	f04f 0120 	mov.w	r1, #32
 8006726:	f381 8811 	msr	BASEPRI, r1
 800672a:	617b      	str	r3, [r7, #20]
 800672c:	4816      	ldr	r0, [pc, #88]	; (8006788 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800672e:	f7ff fdfe 	bl	800632e <_PreparePacket>
 8006732:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	61fb      	str	r3, [r7, #28]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	61bb      	str	r3, [r7, #24]
 8006740:	e00b      	b.n	800675a <SEGGER_SYSVIEW_RecordU32+0x46>
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	b2da      	uxtb	r2, r3
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	1c59      	adds	r1, r3, #1
 800674a:	61f9      	str	r1, [r7, #28]
 800674c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006750:	b2d2      	uxtb	r2, r2
 8006752:	701a      	strb	r2, [r3, #0]
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	09db      	lsrs	r3, r3, #7
 8006758:	61bb      	str	r3, [r7, #24]
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	2b7f      	cmp	r3, #127	; 0x7f
 800675e:	d8f0      	bhi.n	8006742 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	1c5a      	adds	r2, r3, #1
 8006764:	61fa      	str	r2, [r7, #28]
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	701a      	strb	r2, [r3, #0]
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	68f9      	ldr	r1, [r7, #12]
 8006774:	6938      	ldr	r0, [r7, #16]
 8006776:	f7ff fec9 	bl	800650c <_SendPacket>
  RECORD_END();
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f383 8811 	msr	BASEPRI, r3
}
 8006780:	bf00      	nop
 8006782:	3720      	adds	r7, #32
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	20000ccc 	.word	0x20000ccc

0800678c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800678c:	b580      	push	{r7, lr}
 800678e:	b08c      	sub	sp, #48	; 0x30
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006798:	f3ef 8311 	mrs	r3, BASEPRI
 800679c:	f04f 0120 	mov.w	r1, #32
 80067a0:	f381 8811 	msr	BASEPRI, r1
 80067a4:	61fb      	str	r3, [r7, #28]
 80067a6:	4825      	ldr	r0, [pc, #148]	; (800683c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80067a8:	f7ff fdc1 	bl	800632e <_PreparePacket>
 80067ac:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80067ba:	e00b      	b.n	80067d4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80067bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c2:	1c59      	adds	r1, r3, #1
 80067c4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80067c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067ca:	b2d2      	uxtb	r2, r2
 80067cc:	701a      	strb	r2, [r3, #0]
 80067ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d0:	09db      	lsrs	r3, r3, #7
 80067d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80067d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d6:	2b7f      	cmp	r3, #127	; 0x7f
 80067d8:	d8f0      	bhi.n	80067bc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80067da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067e2:	b2d2      	uxtb	r2, r2
 80067e4:	701a      	strb	r2, [r3, #0]
 80067e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	627b      	str	r3, [r7, #36]	; 0x24
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	623b      	str	r3, [r7, #32]
 80067f2:	e00b      	b.n	800680c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	1c59      	adds	r1, r3, #1
 80067fc:	6279      	str	r1, [r7, #36]	; 0x24
 80067fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006802:	b2d2      	uxtb	r2, r2
 8006804:	701a      	strb	r2, [r3, #0]
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	09db      	lsrs	r3, r3, #7
 800680a:	623b      	str	r3, [r7, #32]
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	2b7f      	cmp	r3, #127	; 0x7f
 8006810:	d8f0      	bhi.n	80067f4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006814:	1c5a      	adds	r2, r3, #1
 8006816:	627a      	str	r2, [r7, #36]	; 0x24
 8006818:	6a3a      	ldr	r2, [r7, #32]
 800681a:	b2d2      	uxtb	r2, r2
 800681c:	701a      	strb	r2, [r3, #0]
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	6979      	ldr	r1, [r7, #20]
 8006826:	69b8      	ldr	r0, [r7, #24]
 8006828:	f7ff fe70 	bl	800650c <_SendPacket>
  RECORD_END();
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	f383 8811 	msr	BASEPRI, r3
}
 8006832:	bf00      	nop
 8006834:	3730      	adds	r7, #48	; 0x30
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	20000ccc 	.word	0x20000ccc

08006840 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8006840:	b580      	push	{r7, lr}
 8006842:	b092      	sub	sp, #72	; 0x48
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
 800684c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 800684e:	f3ef 8311 	mrs	r3, BASEPRI
 8006852:	f04f 0120 	mov.w	r1, #32
 8006856:	f381 8811 	msr	BASEPRI, r1
 800685a:	61fb      	str	r3, [r7, #28]
 800685c:	484e      	ldr	r0, [pc, #312]	; (8006998 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 800685e:	f7ff fd66 	bl	800632e <_PreparePacket>
 8006862:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	647b      	str	r3, [r7, #68]	; 0x44
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	643b      	str	r3, [r7, #64]	; 0x40
 8006870:	e00b      	b.n	800688a <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8006872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006874:	b2da      	uxtb	r2, r3
 8006876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006878:	1c59      	adds	r1, r3, #1
 800687a:	6479      	str	r1, [r7, #68]	; 0x44
 800687c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006880:	b2d2      	uxtb	r2, r2
 8006882:	701a      	strb	r2, [r3, #0]
 8006884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006886:	09db      	lsrs	r3, r3, #7
 8006888:	643b      	str	r3, [r7, #64]	; 0x40
 800688a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800688c:	2b7f      	cmp	r3, #127	; 0x7f
 800688e:	d8f0      	bhi.n	8006872 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8006890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	647a      	str	r2, [r7, #68]	; 0x44
 8006896:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006898:	b2d2      	uxtb	r2, r2
 800689a:	701a      	strb	r2, [r3, #0]
 800689c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800689e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80068a8:	e00b      	b.n	80068c2 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 80068aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b0:	1c59      	adds	r1, r3, #1
 80068b2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80068b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068b8:	b2d2      	uxtb	r2, r2
 80068ba:	701a      	strb	r2, [r3, #0]
 80068bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068be:	09db      	lsrs	r3, r3, #7
 80068c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80068c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c4:	2b7f      	cmp	r3, #127	; 0x7f
 80068c6:	d8f0      	bhi.n	80068aa <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 80068c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ca:	1c5a      	adds	r2, r3, #1
 80068cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80068ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068d0:	b2d2      	uxtb	r2, r2
 80068d2:	701a      	strb	r2, [r3, #0]
 80068d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	637b      	str	r3, [r7, #52]	; 0x34
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	633b      	str	r3, [r7, #48]	; 0x30
 80068e0:	e00b      	b.n	80068fa <SEGGER_SYSVIEW_RecordU32x5+0xba>
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	b2da      	uxtb	r2, r3
 80068e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e8:	1c59      	adds	r1, r3, #1
 80068ea:	6379      	str	r1, [r7, #52]	; 0x34
 80068ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068f0:	b2d2      	uxtb	r2, r2
 80068f2:	701a      	strb	r2, [r3, #0]
 80068f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f6:	09db      	lsrs	r3, r3, #7
 80068f8:	633b      	str	r3, [r7, #48]	; 0x30
 80068fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fc:	2b7f      	cmp	r3, #127	; 0x7f
 80068fe:	d8f0      	bhi.n	80068e2 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8006900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006902:	1c5a      	adds	r2, r3, #1
 8006904:	637a      	str	r2, [r7, #52]	; 0x34
 8006906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006908:	b2d2      	uxtb	r2, r2
 800690a:	701a      	strb	r2, [r3, #0]
 800690c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006916:	62bb      	str	r3, [r7, #40]	; 0x28
 8006918:	e00b      	b.n	8006932 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 800691a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691c:	b2da      	uxtb	r2, r3
 800691e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006920:	1c59      	adds	r1, r3, #1
 8006922:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006924:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006928:	b2d2      	uxtb	r2, r2
 800692a:	701a      	strb	r2, [r3, #0]
 800692c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692e:	09db      	lsrs	r3, r3, #7
 8006930:	62bb      	str	r3, [r7, #40]	; 0x28
 8006932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006934:	2b7f      	cmp	r3, #127	; 0x7f
 8006936:	d8f0      	bhi.n	800691a <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8006938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800693e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006940:	b2d2      	uxtb	r2, r2
 8006942:	701a      	strb	r2, [r3, #0]
 8006944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006946:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	627b      	str	r3, [r7, #36]	; 0x24
 800694c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800694e:	623b      	str	r3, [r7, #32]
 8006950:	e00b      	b.n	800696a <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	b2da      	uxtb	r2, r3
 8006956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006958:	1c59      	adds	r1, r3, #1
 800695a:	6279      	str	r1, [r7, #36]	; 0x24
 800695c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006960:	b2d2      	uxtb	r2, r2
 8006962:	701a      	strb	r2, [r3, #0]
 8006964:	6a3b      	ldr	r3, [r7, #32]
 8006966:	09db      	lsrs	r3, r3, #7
 8006968:	623b      	str	r3, [r7, #32]
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	2b7f      	cmp	r3, #127	; 0x7f
 800696e:	d8f0      	bhi.n	8006952 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	1c5a      	adds	r2, r3, #1
 8006974:	627a      	str	r2, [r7, #36]	; 0x24
 8006976:	6a3a      	ldr	r2, [r7, #32]
 8006978:	b2d2      	uxtb	r2, r2
 800697a:	701a      	strb	r2, [r3, #0]
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	6979      	ldr	r1, [r7, #20]
 8006984:	69b8      	ldr	r0, [r7, #24]
 8006986:	f7ff fdc1 	bl	800650c <_SendPacket>
  RECORD_END();
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	f383 8811 	msr	BASEPRI, r3
}
 8006990:	bf00      	nop
 8006992:	3748      	adds	r7, #72	; 0x48
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	20000ccc 	.word	0x20000ccc

0800699c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800699c:	b580      	push	{r7, lr}
 800699e:	b08c      	sub	sp, #48	; 0x30
 80069a0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80069a2:	4b58      	ldr	r3, [pc, #352]	; (8006b04 <SEGGER_SYSVIEW_Start+0x168>)
 80069a4:	2201      	movs	r2, #1
 80069a6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80069a8:	f3ef 8311 	mrs	r3, BASEPRI
 80069ac:	f04f 0120 	mov.w	r1, #32
 80069b0:	f381 8811 	msr	BASEPRI, r1
 80069b4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80069b6:	4b53      	ldr	r3, [pc, #332]	; (8006b04 <SEGGER_SYSVIEW_Start+0x168>)
 80069b8:	785b      	ldrb	r3, [r3, #1]
 80069ba:	220a      	movs	r2, #10
 80069bc:	4952      	ldr	r1, [pc, #328]	; (8006b08 <SEGGER_SYSVIEW_Start+0x16c>)
 80069be:	4618      	mov	r0, r3
 80069c0:	f7f9 fc26 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80069ca:	200a      	movs	r0, #10
 80069cc:	f7ff fe84 	bl	80066d8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80069d0:	f3ef 8311 	mrs	r3, BASEPRI
 80069d4:	f04f 0120 	mov.w	r1, #32
 80069d8:	f381 8811 	msr	BASEPRI, r1
 80069dc:	60bb      	str	r3, [r7, #8]
 80069de:	484b      	ldr	r0, [pc, #300]	; (8006b0c <SEGGER_SYSVIEW_Start+0x170>)
 80069e0:	f7ff fca5 	bl	800632e <_PreparePacket>
 80069e4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069ee:	4b45      	ldr	r3, [pc, #276]	; (8006b04 <SEGGER_SYSVIEW_Start+0x168>)
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80069f4:	e00b      	b.n	8006a0e <SEGGER_SYSVIEW_Start+0x72>
 80069f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fc:	1c59      	adds	r1, r3, #1
 80069fe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006a00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	701a      	strb	r2, [r3, #0]
 8006a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0a:	09db      	lsrs	r3, r3, #7
 8006a0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a10:	2b7f      	cmp	r3, #127	; 0x7f
 8006a12:	d8f0      	bhi.n	80069f6 <SEGGER_SYSVIEW_Start+0x5a>
 8006a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a16:	1c5a      	adds	r2, r3, #1
 8006a18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a1c:	b2d2      	uxtb	r2, r2
 8006a1e:	701a      	strb	r2, [r3, #0]
 8006a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a22:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	627b      	str	r3, [r7, #36]	; 0x24
 8006a28:	4b36      	ldr	r3, [pc, #216]	; (8006b04 <SEGGER_SYSVIEW_Start+0x168>)
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	623b      	str	r3, [r7, #32]
 8006a2e:	e00b      	b.n	8006a48 <SEGGER_SYSVIEW_Start+0xac>
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	1c59      	adds	r1, r3, #1
 8006a38:	6279      	str	r1, [r7, #36]	; 0x24
 8006a3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	701a      	strb	r2, [r3, #0]
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	09db      	lsrs	r3, r3, #7
 8006a46:	623b      	str	r3, [r7, #32]
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a4c:	d8f0      	bhi.n	8006a30 <SEGGER_SYSVIEW_Start+0x94>
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a50:	1c5a      	adds	r2, r3, #1
 8006a52:	627a      	str	r2, [r7, #36]	; 0x24
 8006a54:	6a3a      	ldr	r2, [r7, #32]
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	701a      	strb	r2, [r3, #0]
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	61fb      	str	r3, [r7, #28]
 8006a62:	4b28      	ldr	r3, [pc, #160]	; (8006b04 <SEGGER_SYSVIEW_Start+0x168>)
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	61bb      	str	r3, [r7, #24]
 8006a68:	e00b      	b.n	8006a82 <SEGGER_SYSVIEW_Start+0xe6>
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	1c59      	adds	r1, r3, #1
 8006a72:	61f9      	str	r1, [r7, #28]
 8006a74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a78:	b2d2      	uxtb	r2, r2
 8006a7a:	701a      	strb	r2, [r3, #0]
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	09db      	lsrs	r3, r3, #7
 8006a80:	61bb      	str	r3, [r7, #24]
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	2b7f      	cmp	r3, #127	; 0x7f
 8006a86:	d8f0      	bhi.n	8006a6a <SEGGER_SYSVIEW_Start+0xce>
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	61fa      	str	r2, [r7, #28]
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	b2d2      	uxtb	r2, r2
 8006a92:	701a      	strb	r2, [r3, #0]
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	617b      	str	r3, [r7, #20]
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	613b      	str	r3, [r7, #16]
 8006aa0:	e00b      	b.n	8006aba <SEGGER_SYSVIEW_Start+0x11e>
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	1c59      	adds	r1, r3, #1
 8006aaa:	6179      	str	r1, [r7, #20]
 8006aac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ab0:	b2d2      	uxtb	r2, r2
 8006ab2:	701a      	strb	r2, [r3, #0]
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	09db      	lsrs	r3, r3, #7
 8006ab8:	613b      	str	r3, [r7, #16]
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b7f      	cmp	r3, #127	; 0x7f
 8006abe:	d8f0      	bhi.n	8006aa2 <SEGGER_SYSVIEW_Start+0x106>
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	1c5a      	adds	r2, r3, #1
 8006ac4:	617a      	str	r2, [r7, #20]
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	b2d2      	uxtb	r2, r2
 8006aca:	701a      	strb	r2, [r3, #0]
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006ad0:	2218      	movs	r2, #24
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7ff fd19 	bl	800650c <_SendPacket>
      RECORD_END();
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006ae0:	4b08      	ldr	r3, [pc, #32]	; (8006b04 <SEGGER_SYSVIEW_Start+0x168>)
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006ae8:	4b06      	ldr	r3, [pc, #24]	; (8006b04 <SEGGER_SYSVIEW_Start+0x168>)
 8006aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aec:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006aee:	f000 f8e3 	bl	8006cb8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006af2:	f000 f8cd 	bl	8006c90 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006af6:	f000 fad9 	bl	80070ac <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006afa:	bf00      	nop
 8006afc:	3730      	adds	r7, #48	; 0x30
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20000c9c 	.word	0x20000c9c
 8006b08:	08009b98 	.word	0x08009b98
 8006b0c:	20000ccc 	.word	0x20000ccc

08006b10 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b16:	f3ef 8311 	mrs	r3, BASEPRI
 8006b1a:	f04f 0120 	mov.w	r1, #32
 8006b1e:	f381 8811 	msr	BASEPRI, r1
 8006b22:	607b      	str	r3, [r7, #4]
 8006b24:	480b      	ldr	r0, [pc, #44]	; (8006b54 <SEGGER_SYSVIEW_Stop+0x44>)
 8006b26:	f7ff fc02 	bl	800632e <_PreparePacket>
 8006b2a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006b2c:	4b0a      	ldr	r3, [pc, #40]	; (8006b58 <SEGGER_SYSVIEW_Stop+0x48>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d007      	beq.n	8006b44 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006b34:	220b      	movs	r2, #11
 8006b36:	6839      	ldr	r1, [r7, #0]
 8006b38:	6838      	ldr	r0, [r7, #0]
 8006b3a:	f7ff fce7 	bl	800650c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006b3e:	4b06      	ldr	r3, [pc, #24]	; (8006b58 <SEGGER_SYSVIEW_Stop+0x48>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f383 8811 	msr	BASEPRI, r3
}
 8006b4a:	bf00      	nop
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	20000ccc 	.word	0x20000ccc
 8006b58:	20000c9c 	.word	0x20000c9c

08006b5c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b08c      	sub	sp, #48	; 0x30
 8006b60:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b62:	f3ef 8311 	mrs	r3, BASEPRI
 8006b66:	f04f 0120 	mov.w	r1, #32
 8006b6a:	f381 8811 	msr	BASEPRI, r1
 8006b6e:	60fb      	str	r3, [r7, #12]
 8006b70:	4845      	ldr	r0, [pc, #276]	; (8006c88 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006b72:	f7ff fbdc 	bl	800632e <_PreparePacket>
 8006b76:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b80:	4b42      	ldr	r3, [pc, #264]	; (8006c8c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b86:	e00b      	b.n	8006ba0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8a:	b2da      	uxtb	r2, r3
 8006b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8e:	1c59      	adds	r1, r3, #1
 8006b90:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006b92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b96:	b2d2      	uxtb	r2, r2
 8006b98:	701a      	strb	r2, [r3, #0]
 8006b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9c:	09db      	lsrs	r3, r3, #7
 8006b9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ba4:	d8f0      	bhi.n	8006b88 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bae:	b2d2      	uxtb	r2, r2
 8006bb0:	701a      	strb	r2, [r3, #0]
 8006bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bba:	4b34      	ldr	r3, [pc, #208]	; (8006c8c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	623b      	str	r3, [r7, #32]
 8006bc0:	e00b      	b.n	8006bda <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	b2da      	uxtb	r2, r3
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	1c59      	adds	r1, r3, #1
 8006bca:	6279      	str	r1, [r7, #36]	; 0x24
 8006bcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bd0:	b2d2      	uxtb	r2, r2
 8006bd2:	701a      	strb	r2, [r3, #0]
 8006bd4:	6a3b      	ldr	r3, [r7, #32]
 8006bd6:	09db      	lsrs	r3, r3, #7
 8006bd8:	623b      	str	r3, [r7, #32]
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	2b7f      	cmp	r3, #127	; 0x7f
 8006bde:	d8f0      	bhi.n	8006bc2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	1c5a      	adds	r2, r3, #1
 8006be4:	627a      	str	r2, [r7, #36]	; 0x24
 8006be6:	6a3a      	ldr	r2, [r7, #32]
 8006be8:	b2d2      	uxtb	r2, r2
 8006bea:	701a      	strb	r2, [r3, #0]
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	61fb      	str	r3, [r7, #28]
 8006bf4:	4b25      	ldr	r3, [pc, #148]	; (8006c8c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	61bb      	str	r3, [r7, #24]
 8006bfa:	e00b      	b.n	8006c14 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	1c59      	adds	r1, r3, #1
 8006c04:	61f9      	str	r1, [r7, #28]
 8006c06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c0a:	b2d2      	uxtb	r2, r2
 8006c0c:	701a      	strb	r2, [r3, #0]
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	09db      	lsrs	r3, r3, #7
 8006c12:	61bb      	str	r3, [r7, #24]
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	2b7f      	cmp	r3, #127	; 0x7f
 8006c18:	d8f0      	bhi.n	8006bfc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	1c5a      	adds	r2, r3, #1
 8006c1e:	61fa      	str	r2, [r7, #28]
 8006c20:	69ba      	ldr	r2, [r7, #24]
 8006c22:	b2d2      	uxtb	r2, r2
 8006c24:	701a      	strb	r2, [r3, #0]
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	617b      	str	r3, [r7, #20]
 8006c2e:	2300      	movs	r3, #0
 8006c30:	613b      	str	r3, [r7, #16]
 8006c32:	e00b      	b.n	8006c4c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	1c59      	adds	r1, r3, #1
 8006c3c:	6179      	str	r1, [r7, #20]
 8006c3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c42:	b2d2      	uxtb	r2, r2
 8006c44:	701a      	strb	r2, [r3, #0]
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	09db      	lsrs	r3, r3, #7
 8006c4a:	613b      	str	r3, [r7, #16]
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c50:	d8f0      	bhi.n	8006c34 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	1c5a      	adds	r2, r3, #1
 8006c56:	617a      	str	r2, [r7, #20]
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	b2d2      	uxtb	r2, r2
 8006c5c:	701a      	strb	r2, [r3, #0]
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006c62:	2218      	movs	r2, #24
 8006c64:	6879      	ldr	r1, [r7, #4]
 8006c66:	68b8      	ldr	r0, [r7, #8]
 8006c68:	f7ff fc50 	bl	800650c <_SendPacket>
  RECORD_END();
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006c72:	4b06      	ldr	r3, [pc, #24]	; (8006c8c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006c7a:	4b04      	ldr	r3, [pc, #16]	; (8006c8c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7e:	4798      	blx	r3
  }
}
 8006c80:	bf00      	nop
 8006c82:	3730      	adds	r7, #48	; 0x30
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	20000ccc 	.word	0x20000ccc
 8006c8c:	20000c9c 	.word	0x20000c9c

08006c90 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006c90:	b580      	push	{r7, lr}
 8006c92:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006c94:	4b07      	ldr	r3, [pc, #28]	; (8006cb4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d008      	beq.n	8006cae <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006c9c:	4b05      	ldr	r3, [pc, #20]	; (8006cb4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006ca6:	4b03      	ldr	r3, [pc, #12]	; (8006cb4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	4798      	blx	r3
  }
}
 8006cae:	bf00      	nop
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20000c9c 	.word	0x20000c9c

08006cb8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006cb8:	b590      	push	{r4, r7, lr}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006cbe:	4b15      	ldr	r3, [pc, #84]	; (8006d14 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d01a      	beq.n	8006cfc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006cc6:	4b13      	ldr	r3, [pc, #76]	; (8006d14 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d015      	beq.n	8006cfc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006cd0:	4b10      	ldr	r3, [pc, #64]	; (8006d14 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4798      	blx	r3
 8006cd8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006cdc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006cde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ce2:	f04f 0200 	mov.w	r2, #0
 8006ce6:	f04f 0300 	mov.w	r3, #0
 8006cea:	000a      	movs	r2, r1
 8006cec:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006cee:	4613      	mov	r3, r2
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	4621      	mov	r1, r4
 8006cf4:	200d      	movs	r0, #13
 8006cf6:	f7ff fd49 	bl	800678c <SEGGER_SYSVIEW_RecordU32x2>
 8006cfa:	e006      	b.n	8006d0a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006cfc:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4619      	mov	r1, r3
 8006d02:	200c      	movs	r0, #12
 8006d04:	f7ff fd06 	bl	8006714 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd90      	pop	{r4, r7, pc}
 8006d12:	bf00      	nop
 8006d14:	20000c9c 	.word	0x20000c9c
 8006d18:	e0001004 	.word	0xe0001004

08006d1c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d22:	f3ef 8311 	mrs	r3, BASEPRI
 8006d26:	f04f 0120 	mov.w	r1, #32
 8006d2a:	f381 8811 	msr	BASEPRI, r1
 8006d2e:	60fb      	str	r3, [r7, #12]
 8006d30:	4819      	ldr	r0, [pc, #100]	; (8006d98 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006d32:	f7ff fafc 	bl	800632e <_PreparePacket>
 8006d36:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006d3c:	4b17      	ldr	r3, [pc, #92]	; (8006d9c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d44:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	617b      	str	r3, [r7, #20]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	613b      	str	r3, [r7, #16]
 8006d4e:	e00b      	b.n	8006d68 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	1c59      	adds	r1, r3, #1
 8006d58:	6179      	str	r1, [r7, #20]
 8006d5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d5e:	b2d2      	uxtb	r2, r2
 8006d60:	701a      	strb	r2, [r3, #0]
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	09db      	lsrs	r3, r3, #7
 8006d66:	613b      	str	r3, [r7, #16]
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d6c:	d8f0      	bhi.n	8006d50 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	1c5a      	adds	r2, r3, #1
 8006d72:	617a      	str	r2, [r7, #20]
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	b2d2      	uxtb	r2, r2
 8006d78:	701a      	strb	r2, [r3, #0]
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006d7e:	2202      	movs	r2, #2
 8006d80:	6879      	ldr	r1, [r7, #4]
 8006d82:	68b8      	ldr	r0, [r7, #8]
 8006d84:	f7ff fbc2 	bl	800650c <_SendPacket>
  RECORD_END();
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f383 8811 	msr	BASEPRI, r3
}
 8006d8e:	bf00      	nop
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20000ccc 	.word	0x20000ccc
 8006d9c:	e000ed04 	.word	0xe000ed04

08006da0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006da6:	f3ef 8311 	mrs	r3, BASEPRI
 8006daa:	f04f 0120 	mov.w	r1, #32
 8006dae:	f381 8811 	msr	BASEPRI, r1
 8006db2:	607b      	str	r3, [r7, #4]
 8006db4:	4807      	ldr	r0, [pc, #28]	; (8006dd4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006db6:	f7ff faba 	bl	800632e <_PreparePacket>
 8006dba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006dbc:	2203      	movs	r2, #3
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6838      	ldr	r0, [r7, #0]
 8006dc2:	f7ff fba3 	bl	800650c <_SendPacket>
  RECORD_END();
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f383 8811 	msr	BASEPRI, r3
}
 8006dcc:	bf00      	nop
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	20000ccc 	.word	0x20000ccc

08006dd8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006dde:	f3ef 8311 	mrs	r3, BASEPRI
 8006de2:	f04f 0120 	mov.w	r1, #32
 8006de6:	f381 8811 	msr	BASEPRI, r1
 8006dea:	607b      	str	r3, [r7, #4]
 8006dec:	4807      	ldr	r0, [pc, #28]	; (8006e0c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006dee:	f7ff fa9e 	bl	800632e <_PreparePacket>
 8006df2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006df4:	2212      	movs	r2, #18
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	6838      	ldr	r0, [r7, #0]
 8006dfa:	f7ff fb87 	bl	800650c <_SendPacket>
  RECORD_END();
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f383 8811 	msr	BASEPRI, r3
}
 8006e04:	bf00      	nop
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	20000ccc 	.word	0x20000ccc

08006e10 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e16:	f3ef 8311 	mrs	r3, BASEPRI
 8006e1a:	f04f 0120 	mov.w	r1, #32
 8006e1e:	f381 8811 	msr	BASEPRI, r1
 8006e22:	607b      	str	r3, [r7, #4]
 8006e24:	4807      	ldr	r0, [pc, #28]	; (8006e44 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006e26:	f7ff fa82 	bl	800632e <_PreparePacket>
 8006e2a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006e2c:	2211      	movs	r2, #17
 8006e2e:	6839      	ldr	r1, [r7, #0]
 8006e30:	6838      	ldr	r0, [r7, #0]
 8006e32:	f7ff fb6b 	bl	800650c <_SendPacket>
  RECORD_END();
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f383 8811 	msr	BASEPRI, r3
}
 8006e3c:	bf00      	nop
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	20000ccc 	.word	0x20000ccc

08006e48 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b088      	sub	sp, #32
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e50:	f3ef 8311 	mrs	r3, BASEPRI
 8006e54:	f04f 0120 	mov.w	r1, #32
 8006e58:	f381 8811 	msr	BASEPRI, r1
 8006e5c:	617b      	str	r3, [r7, #20]
 8006e5e:	4819      	ldr	r0, [pc, #100]	; (8006ec4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006e60:	f7ff fa65 	bl	800632e <_PreparePacket>
 8006e64:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e6a:	4b17      	ldr	r3, [pc, #92]	; (8006ec8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	61fb      	str	r3, [r7, #28]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	61bb      	str	r3, [r7, #24]
 8006e7c:	e00b      	b.n	8006e96 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	1c59      	adds	r1, r3, #1
 8006e86:	61f9      	str	r1, [r7, #28]
 8006e88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e8c:	b2d2      	uxtb	r2, r2
 8006e8e:	701a      	strb	r2, [r3, #0]
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	09db      	lsrs	r3, r3, #7
 8006e94:	61bb      	str	r3, [r7, #24]
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	2b7f      	cmp	r3, #127	; 0x7f
 8006e9a:	d8f0      	bhi.n	8006e7e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	61fa      	str	r2, [r7, #28]
 8006ea2:	69ba      	ldr	r2, [r7, #24]
 8006ea4:	b2d2      	uxtb	r2, r2
 8006ea6:	701a      	strb	r2, [r3, #0]
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006eac:	2204      	movs	r2, #4
 8006eae:	68f9      	ldr	r1, [r7, #12]
 8006eb0:	6938      	ldr	r0, [r7, #16]
 8006eb2:	f7ff fb2b 	bl	800650c <_SendPacket>
  RECORD_END();
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f383 8811 	msr	BASEPRI, r3
}
 8006ebc:	bf00      	nop
 8006ebe:	3720      	adds	r7, #32
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	20000ccc 	.word	0x20000ccc
 8006ec8:	20000c9c 	.word	0x20000c9c

08006ecc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ed4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ed8:	f04f 0120 	mov.w	r1, #32
 8006edc:	f381 8811 	msr	BASEPRI, r1
 8006ee0:	617b      	str	r3, [r7, #20]
 8006ee2:	4819      	ldr	r0, [pc, #100]	; (8006f48 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006ee4:	f7ff fa23 	bl	800632e <_PreparePacket>
 8006ee8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006eee:	4b17      	ldr	r3, [pc, #92]	; (8006f4c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	61fb      	str	r3, [r7, #28]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	61bb      	str	r3, [r7, #24]
 8006f00:	e00b      	b.n	8006f1a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	1c59      	adds	r1, r3, #1
 8006f0a:	61f9      	str	r1, [r7, #28]
 8006f0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f10:	b2d2      	uxtb	r2, r2
 8006f12:	701a      	strb	r2, [r3, #0]
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	09db      	lsrs	r3, r3, #7
 8006f18:	61bb      	str	r3, [r7, #24]
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	2b7f      	cmp	r3, #127	; 0x7f
 8006f1e:	d8f0      	bhi.n	8006f02 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	1c5a      	adds	r2, r3, #1
 8006f24:	61fa      	str	r2, [r7, #28]
 8006f26:	69ba      	ldr	r2, [r7, #24]
 8006f28:	b2d2      	uxtb	r2, r2
 8006f2a:	701a      	strb	r2, [r3, #0]
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006f30:	2206      	movs	r2, #6
 8006f32:	68f9      	ldr	r1, [r7, #12]
 8006f34:	6938      	ldr	r0, [r7, #16]
 8006f36:	f7ff fae9 	bl	800650c <_SendPacket>
  RECORD_END();
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f383 8811 	msr	BASEPRI, r3
}
 8006f40:	bf00      	nop
 8006f42:	3720      	adds	r7, #32
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	20000ccc 	.word	0x20000ccc
 8006f4c:	20000c9c 	.word	0x20000c9c

08006f50 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006f58:	4b04      	ldr	r3, [pc, #16]	; (8006f6c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	1ad3      	subs	r3, r2, r3
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	20000c9c 	.word	0x20000c9c

08006f70 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b08c      	sub	sp, #48	; 0x30
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	4603      	mov	r3, r0
 8006f78:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006f7a:	4b3b      	ldr	r3, [pc, #236]	; (8007068 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d06d      	beq.n	800705e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006f82:	4b39      	ldr	r3, [pc, #228]	; (8007068 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006f88:	2300      	movs	r3, #0
 8006f8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f8c:	e008      	b.n	8006fa0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d007      	beq.n	8006faa <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fa0:	79fb      	ldrb	r3, [r7, #7]
 8006fa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d3f2      	bcc.n	8006f8e <SEGGER_SYSVIEW_SendModule+0x1e>
 8006fa8:	e000      	b.n	8006fac <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006faa:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d055      	beq.n	800705e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006fb2:	f3ef 8311 	mrs	r3, BASEPRI
 8006fb6:	f04f 0120 	mov.w	r1, #32
 8006fba:	f381 8811 	msr	BASEPRI, r1
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	482a      	ldr	r0, [pc, #168]	; (800706c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006fc2:	f7ff f9b4 	bl	800632e <_PreparePacket>
 8006fc6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	627b      	str	r3, [r7, #36]	; 0x24
 8006fd0:	79fb      	ldrb	r3, [r7, #7]
 8006fd2:	623b      	str	r3, [r7, #32]
 8006fd4:	e00b      	b.n	8006fee <SEGGER_SYSVIEW_SendModule+0x7e>
 8006fd6:	6a3b      	ldr	r3, [r7, #32]
 8006fd8:	b2da      	uxtb	r2, r3
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	1c59      	adds	r1, r3, #1
 8006fde:	6279      	str	r1, [r7, #36]	; 0x24
 8006fe0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fe4:	b2d2      	uxtb	r2, r2
 8006fe6:	701a      	strb	r2, [r3, #0]
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	09db      	lsrs	r3, r3, #7
 8006fec:	623b      	str	r3, [r7, #32]
 8006fee:	6a3b      	ldr	r3, [r7, #32]
 8006ff0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ff2:	d8f0      	bhi.n	8006fd6 <SEGGER_SYSVIEW_SendModule+0x66>
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff6:	1c5a      	adds	r2, r3, #1
 8006ff8:	627a      	str	r2, [r7, #36]	; 0x24
 8006ffa:	6a3a      	ldr	r2, [r7, #32]
 8006ffc:	b2d2      	uxtb	r2, r2
 8006ffe:	701a      	strb	r2, [r3, #0]
 8007000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007002:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	61fb      	str	r3, [r7, #28]
 8007008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	61bb      	str	r3, [r7, #24]
 800700e:	e00b      	b.n	8007028 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	b2da      	uxtb	r2, r3
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	1c59      	adds	r1, r3, #1
 8007018:	61f9      	str	r1, [r7, #28]
 800701a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800701e:	b2d2      	uxtb	r2, r2
 8007020:	701a      	strb	r2, [r3, #0]
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	09db      	lsrs	r3, r3, #7
 8007026:	61bb      	str	r3, [r7, #24]
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	2b7f      	cmp	r3, #127	; 0x7f
 800702c:	d8f0      	bhi.n	8007010 <SEGGER_SYSVIEW_SendModule+0xa0>
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	1c5a      	adds	r2, r3, #1
 8007032:	61fa      	str	r2, [r7, #28]
 8007034:	69ba      	ldr	r2, [r7, #24]
 8007036:	b2d2      	uxtb	r2, r2
 8007038:	701a      	strb	r2, [r3, #0]
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800703e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2280      	movs	r2, #128	; 0x80
 8007044:	4619      	mov	r1, r3
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f7ff f924 	bl	8006294 <_EncodeStr>
 800704c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800704e:	2216      	movs	r2, #22
 8007050:	68f9      	ldr	r1, [r7, #12]
 8007052:	6938      	ldr	r0, [r7, #16]
 8007054:	f7ff fa5a 	bl	800650c <_SendPacket>
      RECORD_END();
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800705e:	bf00      	nop
 8007060:	3730      	adds	r7, #48	; 0x30
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	20000cc4 	.word	0x20000cc4
 800706c:	20000ccc 	.word	0x20000ccc

08007070 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007076:	4b0c      	ldr	r3, [pc, #48]	; (80070a8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00f      	beq.n	800709e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800707e:	4b0a      	ldr	r3, [pc, #40]	; (80070a8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d002      	beq.n	8007092 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1f2      	bne.n	8007084 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800709e:	bf00      	nop
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20000cc4 	.word	0x20000cc4

080070ac <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80070b2:	f3ef 8311 	mrs	r3, BASEPRI
 80070b6:	f04f 0120 	mov.w	r1, #32
 80070ba:	f381 8811 	msr	BASEPRI, r1
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	4817      	ldr	r0, [pc, #92]	; (8007120 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80070c2:	f7ff f934 	bl	800632e <_PreparePacket>
 80070c6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	617b      	str	r3, [r7, #20]
 80070d0:	4b14      	ldr	r3, [pc, #80]	; (8007124 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	613b      	str	r3, [r7, #16]
 80070d6:	e00b      	b.n	80070f0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	1c59      	adds	r1, r3, #1
 80070e0:	6179      	str	r1, [r7, #20]
 80070e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070e6:	b2d2      	uxtb	r2, r2
 80070e8:	701a      	strb	r2, [r3, #0]
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	09db      	lsrs	r3, r3, #7
 80070ee:	613b      	str	r3, [r7, #16]
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	2b7f      	cmp	r3, #127	; 0x7f
 80070f4:	d8f0      	bhi.n	80070d8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	617a      	str	r2, [r7, #20]
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	b2d2      	uxtb	r2, r2
 8007100:	701a      	strb	r2, [r3, #0]
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007106:	221b      	movs	r2, #27
 8007108:	6879      	ldr	r1, [r7, #4]
 800710a:	68b8      	ldr	r0, [r7, #8]
 800710c:	f7ff f9fe 	bl	800650c <_SendPacket>
  RECORD_END();
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f383 8811 	msr	BASEPRI, r3
}
 8007116:	bf00      	nop
 8007118:	3718      	adds	r7, #24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	20000ccc 	.word	0x20000ccc
 8007124:	20000cc8 	.word	0x20000cc8

08007128 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
 8007134:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	6879      	ldr	r1, [r7, #4]
 800713a:	2000      	movs	r0, #0
 800713c:	f7ff f884 	bl	8006248 <SEGGER_RTT_Write>
  return len;
 8007140:	683b      	ldr	r3, [r7, #0]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <__cvt>:
 800714a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800714e:	ec55 4b10 	vmov	r4, r5, d0
 8007152:	2d00      	cmp	r5, #0
 8007154:	460e      	mov	r6, r1
 8007156:	4619      	mov	r1, r3
 8007158:	462b      	mov	r3, r5
 800715a:	bfbb      	ittet	lt
 800715c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007160:	461d      	movlt	r5, r3
 8007162:	2300      	movge	r3, #0
 8007164:	232d      	movlt	r3, #45	; 0x2d
 8007166:	700b      	strb	r3, [r1, #0]
 8007168:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800716a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800716e:	4691      	mov	r9, r2
 8007170:	f023 0820 	bic.w	r8, r3, #32
 8007174:	bfbc      	itt	lt
 8007176:	4622      	movlt	r2, r4
 8007178:	4614      	movlt	r4, r2
 800717a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800717e:	d005      	beq.n	800718c <__cvt+0x42>
 8007180:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007184:	d100      	bne.n	8007188 <__cvt+0x3e>
 8007186:	3601      	adds	r6, #1
 8007188:	2102      	movs	r1, #2
 800718a:	e000      	b.n	800718e <__cvt+0x44>
 800718c:	2103      	movs	r1, #3
 800718e:	ab03      	add	r3, sp, #12
 8007190:	9301      	str	r3, [sp, #4]
 8007192:	ab02      	add	r3, sp, #8
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	ec45 4b10 	vmov	d0, r4, r5
 800719a:	4653      	mov	r3, sl
 800719c:	4632      	mov	r2, r6
 800719e:	f000 fe47 	bl	8007e30 <_dtoa_r>
 80071a2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80071a6:	4607      	mov	r7, r0
 80071a8:	d102      	bne.n	80071b0 <__cvt+0x66>
 80071aa:	f019 0f01 	tst.w	r9, #1
 80071ae:	d022      	beq.n	80071f6 <__cvt+0xac>
 80071b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80071b4:	eb07 0906 	add.w	r9, r7, r6
 80071b8:	d110      	bne.n	80071dc <__cvt+0x92>
 80071ba:	783b      	ldrb	r3, [r7, #0]
 80071bc:	2b30      	cmp	r3, #48	; 0x30
 80071be:	d10a      	bne.n	80071d6 <__cvt+0x8c>
 80071c0:	2200      	movs	r2, #0
 80071c2:	2300      	movs	r3, #0
 80071c4:	4620      	mov	r0, r4
 80071c6:	4629      	mov	r1, r5
 80071c8:	f7f9 fcee 	bl	8000ba8 <__aeabi_dcmpeq>
 80071cc:	b918      	cbnz	r0, 80071d6 <__cvt+0x8c>
 80071ce:	f1c6 0601 	rsb	r6, r6, #1
 80071d2:	f8ca 6000 	str.w	r6, [sl]
 80071d6:	f8da 3000 	ldr.w	r3, [sl]
 80071da:	4499      	add	r9, r3
 80071dc:	2200      	movs	r2, #0
 80071de:	2300      	movs	r3, #0
 80071e0:	4620      	mov	r0, r4
 80071e2:	4629      	mov	r1, r5
 80071e4:	f7f9 fce0 	bl	8000ba8 <__aeabi_dcmpeq>
 80071e8:	b108      	cbz	r0, 80071ee <__cvt+0xa4>
 80071ea:	f8cd 900c 	str.w	r9, [sp, #12]
 80071ee:	2230      	movs	r2, #48	; 0x30
 80071f0:	9b03      	ldr	r3, [sp, #12]
 80071f2:	454b      	cmp	r3, r9
 80071f4:	d307      	bcc.n	8007206 <__cvt+0xbc>
 80071f6:	9b03      	ldr	r3, [sp, #12]
 80071f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071fa:	1bdb      	subs	r3, r3, r7
 80071fc:	4638      	mov	r0, r7
 80071fe:	6013      	str	r3, [r2, #0]
 8007200:	b004      	add	sp, #16
 8007202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007206:	1c59      	adds	r1, r3, #1
 8007208:	9103      	str	r1, [sp, #12]
 800720a:	701a      	strb	r2, [r3, #0]
 800720c:	e7f0      	b.n	80071f0 <__cvt+0xa6>

0800720e <__exponent>:
 800720e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007210:	4603      	mov	r3, r0
 8007212:	2900      	cmp	r1, #0
 8007214:	bfb8      	it	lt
 8007216:	4249      	neglt	r1, r1
 8007218:	f803 2b02 	strb.w	r2, [r3], #2
 800721c:	bfb4      	ite	lt
 800721e:	222d      	movlt	r2, #45	; 0x2d
 8007220:	222b      	movge	r2, #43	; 0x2b
 8007222:	2909      	cmp	r1, #9
 8007224:	7042      	strb	r2, [r0, #1]
 8007226:	dd2a      	ble.n	800727e <__exponent+0x70>
 8007228:	f10d 0207 	add.w	r2, sp, #7
 800722c:	4617      	mov	r7, r2
 800722e:	260a      	movs	r6, #10
 8007230:	4694      	mov	ip, r2
 8007232:	fb91 f5f6 	sdiv	r5, r1, r6
 8007236:	fb06 1415 	mls	r4, r6, r5, r1
 800723a:	3430      	adds	r4, #48	; 0x30
 800723c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007240:	460c      	mov	r4, r1
 8007242:	2c63      	cmp	r4, #99	; 0x63
 8007244:	f102 32ff 	add.w	r2, r2, #4294967295
 8007248:	4629      	mov	r1, r5
 800724a:	dcf1      	bgt.n	8007230 <__exponent+0x22>
 800724c:	3130      	adds	r1, #48	; 0x30
 800724e:	f1ac 0402 	sub.w	r4, ip, #2
 8007252:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007256:	1c41      	adds	r1, r0, #1
 8007258:	4622      	mov	r2, r4
 800725a:	42ba      	cmp	r2, r7
 800725c:	d30a      	bcc.n	8007274 <__exponent+0x66>
 800725e:	f10d 0209 	add.w	r2, sp, #9
 8007262:	eba2 020c 	sub.w	r2, r2, ip
 8007266:	42bc      	cmp	r4, r7
 8007268:	bf88      	it	hi
 800726a:	2200      	movhi	r2, #0
 800726c:	4413      	add	r3, r2
 800726e:	1a18      	subs	r0, r3, r0
 8007270:	b003      	add	sp, #12
 8007272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007274:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007278:	f801 5f01 	strb.w	r5, [r1, #1]!
 800727c:	e7ed      	b.n	800725a <__exponent+0x4c>
 800727e:	2330      	movs	r3, #48	; 0x30
 8007280:	3130      	adds	r1, #48	; 0x30
 8007282:	7083      	strb	r3, [r0, #2]
 8007284:	70c1      	strb	r1, [r0, #3]
 8007286:	1d03      	adds	r3, r0, #4
 8007288:	e7f1      	b.n	800726e <__exponent+0x60>
	...

0800728c <_printf_float>:
 800728c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007290:	ed2d 8b02 	vpush	{d8}
 8007294:	b08d      	sub	sp, #52	; 0x34
 8007296:	460c      	mov	r4, r1
 8007298:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800729c:	4616      	mov	r6, r2
 800729e:	461f      	mov	r7, r3
 80072a0:	4605      	mov	r5, r0
 80072a2:	f000 fcc7 	bl	8007c34 <_localeconv_r>
 80072a6:	f8d0 a000 	ldr.w	sl, [r0]
 80072aa:	4650      	mov	r0, sl
 80072ac:	f7f9 f850 	bl	8000350 <strlen>
 80072b0:	2300      	movs	r3, #0
 80072b2:	930a      	str	r3, [sp, #40]	; 0x28
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	9305      	str	r3, [sp, #20]
 80072b8:	f8d8 3000 	ldr.w	r3, [r8]
 80072bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80072c0:	3307      	adds	r3, #7
 80072c2:	f023 0307 	bic.w	r3, r3, #7
 80072c6:	f103 0208 	add.w	r2, r3, #8
 80072ca:	f8c8 2000 	str.w	r2, [r8]
 80072ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80072d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80072d6:	9307      	str	r3, [sp, #28]
 80072d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80072dc:	ee08 0a10 	vmov	s16, r0
 80072e0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80072e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072e8:	4b9e      	ldr	r3, [pc, #632]	; (8007564 <_printf_float+0x2d8>)
 80072ea:	f04f 32ff 	mov.w	r2, #4294967295
 80072ee:	f7f9 fc8d 	bl	8000c0c <__aeabi_dcmpun>
 80072f2:	bb88      	cbnz	r0, 8007358 <_printf_float+0xcc>
 80072f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072f8:	4b9a      	ldr	r3, [pc, #616]	; (8007564 <_printf_float+0x2d8>)
 80072fa:	f04f 32ff 	mov.w	r2, #4294967295
 80072fe:	f7f9 fc67 	bl	8000bd0 <__aeabi_dcmple>
 8007302:	bb48      	cbnz	r0, 8007358 <_printf_float+0xcc>
 8007304:	2200      	movs	r2, #0
 8007306:	2300      	movs	r3, #0
 8007308:	4640      	mov	r0, r8
 800730a:	4649      	mov	r1, r9
 800730c:	f7f9 fc56 	bl	8000bbc <__aeabi_dcmplt>
 8007310:	b110      	cbz	r0, 8007318 <_printf_float+0x8c>
 8007312:	232d      	movs	r3, #45	; 0x2d
 8007314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007318:	4a93      	ldr	r2, [pc, #588]	; (8007568 <_printf_float+0x2dc>)
 800731a:	4b94      	ldr	r3, [pc, #592]	; (800756c <_printf_float+0x2e0>)
 800731c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007320:	bf94      	ite	ls
 8007322:	4690      	movls	r8, r2
 8007324:	4698      	movhi	r8, r3
 8007326:	2303      	movs	r3, #3
 8007328:	6123      	str	r3, [r4, #16]
 800732a:	9b05      	ldr	r3, [sp, #20]
 800732c:	f023 0304 	bic.w	r3, r3, #4
 8007330:	6023      	str	r3, [r4, #0]
 8007332:	f04f 0900 	mov.w	r9, #0
 8007336:	9700      	str	r7, [sp, #0]
 8007338:	4633      	mov	r3, r6
 800733a:	aa0b      	add	r2, sp, #44	; 0x2c
 800733c:	4621      	mov	r1, r4
 800733e:	4628      	mov	r0, r5
 8007340:	f000 f9da 	bl	80076f8 <_printf_common>
 8007344:	3001      	adds	r0, #1
 8007346:	f040 8090 	bne.w	800746a <_printf_float+0x1de>
 800734a:	f04f 30ff 	mov.w	r0, #4294967295
 800734e:	b00d      	add	sp, #52	; 0x34
 8007350:	ecbd 8b02 	vpop	{d8}
 8007354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007358:	4642      	mov	r2, r8
 800735a:	464b      	mov	r3, r9
 800735c:	4640      	mov	r0, r8
 800735e:	4649      	mov	r1, r9
 8007360:	f7f9 fc54 	bl	8000c0c <__aeabi_dcmpun>
 8007364:	b140      	cbz	r0, 8007378 <_printf_float+0xec>
 8007366:	464b      	mov	r3, r9
 8007368:	2b00      	cmp	r3, #0
 800736a:	bfbc      	itt	lt
 800736c:	232d      	movlt	r3, #45	; 0x2d
 800736e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007372:	4a7f      	ldr	r2, [pc, #508]	; (8007570 <_printf_float+0x2e4>)
 8007374:	4b7f      	ldr	r3, [pc, #508]	; (8007574 <_printf_float+0x2e8>)
 8007376:	e7d1      	b.n	800731c <_printf_float+0x90>
 8007378:	6863      	ldr	r3, [r4, #4]
 800737a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800737e:	9206      	str	r2, [sp, #24]
 8007380:	1c5a      	adds	r2, r3, #1
 8007382:	d13f      	bne.n	8007404 <_printf_float+0x178>
 8007384:	2306      	movs	r3, #6
 8007386:	6063      	str	r3, [r4, #4]
 8007388:	9b05      	ldr	r3, [sp, #20]
 800738a:	6861      	ldr	r1, [r4, #4]
 800738c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007390:	2300      	movs	r3, #0
 8007392:	9303      	str	r3, [sp, #12]
 8007394:	ab0a      	add	r3, sp, #40	; 0x28
 8007396:	e9cd b301 	strd	fp, r3, [sp, #4]
 800739a:	ab09      	add	r3, sp, #36	; 0x24
 800739c:	ec49 8b10 	vmov	d0, r8, r9
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	6022      	str	r2, [r4, #0]
 80073a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80073a8:	4628      	mov	r0, r5
 80073aa:	f7ff fece 	bl	800714a <__cvt>
 80073ae:	9b06      	ldr	r3, [sp, #24]
 80073b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073b2:	2b47      	cmp	r3, #71	; 0x47
 80073b4:	4680      	mov	r8, r0
 80073b6:	d108      	bne.n	80073ca <_printf_float+0x13e>
 80073b8:	1cc8      	adds	r0, r1, #3
 80073ba:	db02      	blt.n	80073c2 <_printf_float+0x136>
 80073bc:	6863      	ldr	r3, [r4, #4]
 80073be:	4299      	cmp	r1, r3
 80073c0:	dd41      	ble.n	8007446 <_printf_float+0x1ba>
 80073c2:	f1ab 0302 	sub.w	r3, fp, #2
 80073c6:	fa5f fb83 	uxtb.w	fp, r3
 80073ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80073ce:	d820      	bhi.n	8007412 <_printf_float+0x186>
 80073d0:	3901      	subs	r1, #1
 80073d2:	465a      	mov	r2, fp
 80073d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80073d8:	9109      	str	r1, [sp, #36]	; 0x24
 80073da:	f7ff ff18 	bl	800720e <__exponent>
 80073de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073e0:	1813      	adds	r3, r2, r0
 80073e2:	2a01      	cmp	r2, #1
 80073e4:	4681      	mov	r9, r0
 80073e6:	6123      	str	r3, [r4, #16]
 80073e8:	dc02      	bgt.n	80073f0 <_printf_float+0x164>
 80073ea:	6822      	ldr	r2, [r4, #0]
 80073ec:	07d2      	lsls	r2, r2, #31
 80073ee:	d501      	bpl.n	80073f4 <_printf_float+0x168>
 80073f0:	3301      	adds	r3, #1
 80073f2:	6123      	str	r3, [r4, #16]
 80073f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d09c      	beq.n	8007336 <_printf_float+0xaa>
 80073fc:	232d      	movs	r3, #45	; 0x2d
 80073fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007402:	e798      	b.n	8007336 <_printf_float+0xaa>
 8007404:	9a06      	ldr	r2, [sp, #24]
 8007406:	2a47      	cmp	r2, #71	; 0x47
 8007408:	d1be      	bne.n	8007388 <_printf_float+0xfc>
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1bc      	bne.n	8007388 <_printf_float+0xfc>
 800740e:	2301      	movs	r3, #1
 8007410:	e7b9      	b.n	8007386 <_printf_float+0xfa>
 8007412:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007416:	d118      	bne.n	800744a <_printf_float+0x1be>
 8007418:	2900      	cmp	r1, #0
 800741a:	6863      	ldr	r3, [r4, #4]
 800741c:	dd0b      	ble.n	8007436 <_printf_float+0x1aa>
 800741e:	6121      	str	r1, [r4, #16]
 8007420:	b913      	cbnz	r3, 8007428 <_printf_float+0x19c>
 8007422:	6822      	ldr	r2, [r4, #0]
 8007424:	07d0      	lsls	r0, r2, #31
 8007426:	d502      	bpl.n	800742e <_printf_float+0x1a2>
 8007428:	3301      	adds	r3, #1
 800742a:	440b      	add	r3, r1
 800742c:	6123      	str	r3, [r4, #16]
 800742e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007430:	f04f 0900 	mov.w	r9, #0
 8007434:	e7de      	b.n	80073f4 <_printf_float+0x168>
 8007436:	b913      	cbnz	r3, 800743e <_printf_float+0x1b2>
 8007438:	6822      	ldr	r2, [r4, #0]
 800743a:	07d2      	lsls	r2, r2, #31
 800743c:	d501      	bpl.n	8007442 <_printf_float+0x1b6>
 800743e:	3302      	adds	r3, #2
 8007440:	e7f4      	b.n	800742c <_printf_float+0x1a0>
 8007442:	2301      	movs	r3, #1
 8007444:	e7f2      	b.n	800742c <_printf_float+0x1a0>
 8007446:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800744a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800744c:	4299      	cmp	r1, r3
 800744e:	db05      	blt.n	800745c <_printf_float+0x1d0>
 8007450:	6823      	ldr	r3, [r4, #0]
 8007452:	6121      	str	r1, [r4, #16]
 8007454:	07d8      	lsls	r0, r3, #31
 8007456:	d5ea      	bpl.n	800742e <_printf_float+0x1a2>
 8007458:	1c4b      	adds	r3, r1, #1
 800745a:	e7e7      	b.n	800742c <_printf_float+0x1a0>
 800745c:	2900      	cmp	r1, #0
 800745e:	bfd4      	ite	le
 8007460:	f1c1 0202 	rsble	r2, r1, #2
 8007464:	2201      	movgt	r2, #1
 8007466:	4413      	add	r3, r2
 8007468:	e7e0      	b.n	800742c <_printf_float+0x1a0>
 800746a:	6823      	ldr	r3, [r4, #0]
 800746c:	055a      	lsls	r2, r3, #21
 800746e:	d407      	bmi.n	8007480 <_printf_float+0x1f4>
 8007470:	6923      	ldr	r3, [r4, #16]
 8007472:	4642      	mov	r2, r8
 8007474:	4631      	mov	r1, r6
 8007476:	4628      	mov	r0, r5
 8007478:	47b8      	blx	r7
 800747a:	3001      	adds	r0, #1
 800747c:	d12c      	bne.n	80074d8 <_printf_float+0x24c>
 800747e:	e764      	b.n	800734a <_printf_float+0xbe>
 8007480:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007484:	f240 80e0 	bls.w	8007648 <_printf_float+0x3bc>
 8007488:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800748c:	2200      	movs	r2, #0
 800748e:	2300      	movs	r3, #0
 8007490:	f7f9 fb8a 	bl	8000ba8 <__aeabi_dcmpeq>
 8007494:	2800      	cmp	r0, #0
 8007496:	d034      	beq.n	8007502 <_printf_float+0x276>
 8007498:	4a37      	ldr	r2, [pc, #220]	; (8007578 <_printf_float+0x2ec>)
 800749a:	2301      	movs	r3, #1
 800749c:	4631      	mov	r1, r6
 800749e:	4628      	mov	r0, r5
 80074a0:	47b8      	blx	r7
 80074a2:	3001      	adds	r0, #1
 80074a4:	f43f af51 	beq.w	800734a <_printf_float+0xbe>
 80074a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074ac:	429a      	cmp	r2, r3
 80074ae:	db02      	blt.n	80074b6 <_printf_float+0x22a>
 80074b0:	6823      	ldr	r3, [r4, #0]
 80074b2:	07d8      	lsls	r0, r3, #31
 80074b4:	d510      	bpl.n	80074d8 <_printf_float+0x24c>
 80074b6:	ee18 3a10 	vmov	r3, s16
 80074ba:	4652      	mov	r2, sl
 80074bc:	4631      	mov	r1, r6
 80074be:	4628      	mov	r0, r5
 80074c0:	47b8      	blx	r7
 80074c2:	3001      	adds	r0, #1
 80074c4:	f43f af41 	beq.w	800734a <_printf_float+0xbe>
 80074c8:	f04f 0800 	mov.w	r8, #0
 80074cc:	f104 091a 	add.w	r9, r4, #26
 80074d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074d2:	3b01      	subs	r3, #1
 80074d4:	4543      	cmp	r3, r8
 80074d6:	dc09      	bgt.n	80074ec <_printf_float+0x260>
 80074d8:	6823      	ldr	r3, [r4, #0]
 80074da:	079b      	lsls	r3, r3, #30
 80074dc:	f100 8107 	bmi.w	80076ee <_printf_float+0x462>
 80074e0:	68e0      	ldr	r0, [r4, #12]
 80074e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074e4:	4298      	cmp	r0, r3
 80074e6:	bfb8      	it	lt
 80074e8:	4618      	movlt	r0, r3
 80074ea:	e730      	b.n	800734e <_printf_float+0xc2>
 80074ec:	2301      	movs	r3, #1
 80074ee:	464a      	mov	r2, r9
 80074f0:	4631      	mov	r1, r6
 80074f2:	4628      	mov	r0, r5
 80074f4:	47b8      	blx	r7
 80074f6:	3001      	adds	r0, #1
 80074f8:	f43f af27 	beq.w	800734a <_printf_float+0xbe>
 80074fc:	f108 0801 	add.w	r8, r8, #1
 8007500:	e7e6      	b.n	80074d0 <_printf_float+0x244>
 8007502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007504:	2b00      	cmp	r3, #0
 8007506:	dc39      	bgt.n	800757c <_printf_float+0x2f0>
 8007508:	4a1b      	ldr	r2, [pc, #108]	; (8007578 <_printf_float+0x2ec>)
 800750a:	2301      	movs	r3, #1
 800750c:	4631      	mov	r1, r6
 800750e:	4628      	mov	r0, r5
 8007510:	47b8      	blx	r7
 8007512:	3001      	adds	r0, #1
 8007514:	f43f af19 	beq.w	800734a <_printf_float+0xbe>
 8007518:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800751c:	4313      	orrs	r3, r2
 800751e:	d102      	bne.n	8007526 <_printf_float+0x29a>
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	07d9      	lsls	r1, r3, #31
 8007524:	d5d8      	bpl.n	80074d8 <_printf_float+0x24c>
 8007526:	ee18 3a10 	vmov	r3, s16
 800752a:	4652      	mov	r2, sl
 800752c:	4631      	mov	r1, r6
 800752e:	4628      	mov	r0, r5
 8007530:	47b8      	blx	r7
 8007532:	3001      	adds	r0, #1
 8007534:	f43f af09 	beq.w	800734a <_printf_float+0xbe>
 8007538:	f04f 0900 	mov.w	r9, #0
 800753c:	f104 0a1a 	add.w	sl, r4, #26
 8007540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007542:	425b      	negs	r3, r3
 8007544:	454b      	cmp	r3, r9
 8007546:	dc01      	bgt.n	800754c <_printf_float+0x2c0>
 8007548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800754a:	e792      	b.n	8007472 <_printf_float+0x1e6>
 800754c:	2301      	movs	r3, #1
 800754e:	4652      	mov	r2, sl
 8007550:	4631      	mov	r1, r6
 8007552:	4628      	mov	r0, r5
 8007554:	47b8      	blx	r7
 8007556:	3001      	adds	r0, #1
 8007558:	f43f aef7 	beq.w	800734a <_printf_float+0xbe>
 800755c:	f109 0901 	add.w	r9, r9, #1
 8007560:	e7ee      	b.n	8007540 <_printf_float+0x2b4>
 8007562:	bf00      	nop
 8007564:	7fefffff 	.word	0x7fefffff
 8007568:	08009ca3 	.word	0x08009ca3
 800756c:	08009ca7 	.word	0x08009ca7
 8007570:	08009cab 	.word	0x08009cab
 8007574:	08009caf 	.word	0x08009caf
 8007578:	08009cb3 	.word	0x08009cb3
 800757c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800757e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007580:	429a      	cmp	r2, r3
 8007582:	bfa8      	it	ge
 8007584:	461a      	movge	r2, r3
 8007586:	2a00      	cmp	r2, #0
 8007588:	4691      	mov	r9, r2
 800758a:	dc37      	bgt.n	80075fc <_printf_float+0x370>
 800758c:	f04f 0b00 	mov.w	fp, #0
 8007590:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007594:	f104 021a 	add.w	r2, r4, #26
 8007598:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800759a:	9305      	str	r3, [sp, #20]
 800759c:	eba3 0309 	sub.w	r3, r3, r9
 80075a0:	455b      	cmp	r3, fp
 80075a2:	dc33      	bgt.n	800760c <_printf_float+0x380>
 80075a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075a8:	429a      	cmp	r2, r3
 80075aa:	db3b      	blt.n	8007624 <_printf_float+0x398>
 80075ac:	6823      	ldr	r3, [r4, #0]
 80075ae:	07da      	lsls	r2, r3, #31
 80075b0:	d438      	bmi.n	8007624 <_printf_float+0x398>
 80075b2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80075b6:	eba2 0903 	sub.w	r9, r2, r3
 80075ba:	9b05      	ldr	r3, [sp, #20]
 80075bc:	1ad2      	subs	r2, r2, r3
 80075be:	4591      	cmp	r9, r2
 80075c0:	bfa8      	it	ge
 80075c2:	4691      	movge	r9, r2
 80075c4:	f1b9 0f00 	cmp.w	r9, #0
 80075c8:	dc35      	bgt.n	8007636 <_printf_float+0x3aa>
 80075ca:	f04f 0800 	mov.w	r8, #0
 80075ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075d2:	f104 0a1a 	add.w	sl, r4, #26
 80075d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075da:	1a9b      	subs	r3, r3, r2
 80075dc:	eba3 0309 	sub.w	r3, r3, r9
 80075e0:	4543      	cmp	r3, r8
 80075e2:	f77f af79 	ble.w	80074d8 <_printf_float+0x24c>
 80075e6:	2301      	movs	r3, #1
 80075e8:	4652      	mov	r2, sl
 80075ea:	4631      	mov	r1, r6
 80075ec:	4628      	mov	r0, r5
 80075ee:	47b8      	blx	r7
 80075f0:	3001      	adds	r0, #1
 80075f2:	f43f aeaa 	beq.w	800734a <_printf_float+0xbe>
 80075f6:	f108 0801 	add.w	r8, r8, #1
 80075fa:	e7ec      	b.n	80075d6 <_printf_float+0x34a>
 80075fc:	4613      	mov	r3, r2
 80075fe:	4631      	mov	r1, r6
 8007600:	4642      	mov	r2, r8
 8007602:	4628      	mov	r0, r5
 8007604:	47b8      	blx	r7
 8007606:	3001      	adds	r0, #1
 8007608:	d1c0      	bne.n	800758c <_printf_float+0x300>
 800760a:	e69e      	b.n	800734a <_printf_float+0xbe>
 800760c:	2301      	movs	r3, #1
 800760e:	4631      	mov	r1, r6
 8007610:	4628      	mov	r0, r5
 8007612:	9205      	str	r2, [sp, #20]
 8007614:	47b8      	blx	r7
 8007616:	3001      	adds	r0, #1
 8007618:	f43f ae97 	beq.w	800734a <_printf_float+0xbe>
 800761c:	9a05      	ldr	r2, [sp, #20]
 800761e:	f10b 0b01 	add.w	fp, fp, #1
 8007622:	e7b9      	b.n	8007598 <_printf_float+0x30c>
 8007624:	ee18 3a10 	vmov	r3, s16
 8007628:	4652      	mov	r2, sl
 800762a:	4631      	mov	r1, r6
 800762c:	4628      	mov	r0, r5
 800762e:	47b8      	blx	r7
 8007630:	3001      	adds	r0, #1
 8007632:	d1be      	bne.n	80075b2 <_printf_float+0x326>
 8007634:	e689      	b.n	800734a <_printf_float+0xbe>
 8007636:	9a05      	ldr	r2, [sp, #20]
 8007638:	464b      	mov	r3, r9
 800763a:	4442      	add	r2, r8
 800763c:	4631      	mov	r1, r6
 800763e:	4628      	mov	r0, r5
 8007640:	47b8      	blx	r7
 8007642:	3001      	adds	r0, #1
 8007644:	d1c1      	bne.n	80075ca <_printf_float+0x33e>
 8007646:	e680      	b.n	800734a <_printf_float+0xbe>
 8007648:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800764a:	2a01      	cmp	r2, #1
 800764c:	dc01      	bgt.n	8007652 <_printf_float+0x3c6>
 800764e:	07db      	lsls	r3, r3, #31
 8007650:	d53a      	bpl.n	80076c8 <_printf_float+0x43c>
 8007652:	2301      	movs	r3, #1
 8007654:	4642      	mov	r2, r8
 8007656:	4631      	mov	r1, r6
 8007658:	4628      	mov	r0, r5
 800765a:	47b8      	blx	r7
 800765c:	3001      	adds	r0, #1
 800765e:	f43f ae74 	beq.w	800734a <_printf_float+0xbe>
 8007662:	ee18 3a10 	vmov	r3, s16
 8007666:	4652      	mov	r2, sl
 8007668:	4631      	mov	r1, r6
 800766a:	4628      	mov	r0, r5
 800766c:	47b8      	blx	r7
 800766e:	3001      	adds	r0, #1
 8007670:	f43f ae6b 	beq.w	800734a <_printf_float+0xbe>
 8007674:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007678:	2200      	movs	r2, #0
 800767a:	2300      	movs	r3, #0
 800767c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007680:	f7f9 fa92 	bl	8000ba8 <__aeabi_dcmpeq>
 8007684:	b9d8      	cbnz	r0, 80076be <_printf_float+0x432>
 8007686:	f10a 33ff 	add.w	r3, sl, #4294967295
 800768a:	f108 0201 	add.w	r2, r8, #1
 800768e:	4631      	mov	r1, r6
 8007690:	4628      	mov	r0, r5
 8007692:	47b8      	blx	r7
 8007694:	3001      	adds	r0, #1
 8007696:	d10e      	bne.n	80076b6 <_printf_float+0x42a>
 8007698:	e657      	b.n	800734a <_printf_float+0xbe>
 800769a:	2301      	movs	r3, #1
 800769c:	4652      	mov	r2, sl
 800769e:	4631      	mov	r1, r6
 80076a0:	4628      	mov	r0, r5
 80076a2:	47b8      	blx	r7
 80076a4:	3001      	adds	r0, #1
 80076a6:	f43f ae50 	beq.w	800734a <_printf_float+0xbe>
 80076aa:	f108 0801 	add.w	r8, r8, #1
 80076ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076b0:	3b01      	subs	r3, #1
 80076b2:	4543      	cmp	r3, r8
 80076b4:	dcf1      	bgt.n	800769a <_printf_float+0x40e>
 80076b6:	464b      	mov	r3, r9
 80076b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80076bc:	e6da      	b.n	8007474 <_printf_float+0x1e8>
 80076be:	f04f 0800 	mov.w	r8, #0
 80076c2:	f104 0a1a 	add.w	sl, r4, #26
 80076c6:	e7f2      	b.n	80076ae <_printf_float+0x422>
 80076c8:	2301      	movs	r3, #1
 80076ca:	4642      	mov	r2, r8
 80076cc:	e7df      	b.n	800768e <_printf_float+0x402>
 80076ce:	2301      	movs	r3, #1
 80076d0:	464a      	mov	r2, r9
 80076d2:	4631      	mov	r1, r6
 80076d4:	4628      	mov	r0, r5
 80076d6:	47b8      	blx	r7
 80076d8:	3001      	adds	r0, #1
 80076da:	f43f ae36 	beq.w	800734a <_printf_float+0xbe>
 80076de:	f108 0801 	add.w	r8, r8, #1
 80076e2:	68e3      	ldr	r3, [r4, #12]
 80076e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076e6:	1a5b      	subs	r3, r3, r1
 80076e8:	4543      	cmp	r3, r8
 80076ea:	dcf0      	bgt.n	80076ce <_printf_float+0x442>
 80076ec:	e6f8      	b.n	80074e0 <_printf_float+0x254>
 80076ee:	f04f 0800 	mov.w	r8, #0
 80076f2:	f104 0919 	add.w	r9, r4, #25
 80076f6:	e7f4      	b.n	80076e2 <_printf_float+0x456>

080076f8 <_printf_common>:
 80076f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076fc:	4616      	mov	r6, r2
 80076fe:	4699      	mov	r9, r3
 8007700:	688a      	ldr	r2, [r1, #8]
 8007702:	690b      	ldr	r3, [r1, #16]
 8007704:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007708:	4293      	cmp	r3, r2
 800770a:	bfb8      	it	lt
 800770c:	4613      	movlt	r3, r2
 800770e:	6033      	str	r3, [r6, #0]
 8007710:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007714:	4607      	mov	r7, r0
 8007716:	460c      	mov	r4, r1
 8007718:	b10a      	cbz	r2, 800771e <_printf_common+0x26>
 800771a:	3301      	adds	r3, #1
 800771c:	6033      	str	r3, [r6, #0]
 800771e:	6823      	ldr	r3, [r4, #0]
 8007720:	0699      	lsls	r1, r3, #26
 8007722:	bf42      	ittt	mi
 8007724:	6833      	ldrmi	r3, [r6, #0]
 8007726:	3302      	addmi	r3, #2
 8007728:	6033      	strmi	r3, [r6, #0]
 800772a:	6825      	ldr	r5, [r4, #0]
 800772c:	f015 0506 	ands.w	r5, r5, #6
 8007730:	d106      	bne.n	8007740 <_printf_common+0x48>
 8007732:	f104 0a19 	add.w	sl, r4, #25
 8007736:	68e3      	ldr	r3, [r4, #12]
 8007738:	6832      	ldr	r2, [r6, #0]
 800773a:	1a9b      	subs	r3, r3, r2
 800773c:	42ab      	cmp	r3, r5
 800773e:	dc26      	bgt.n	800778e <_printf_common+0x96>
 8007740:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007744:	1e13      	subs	r3, r2, #0
 8007746:	6822      	ldr	r2, [r4, #0]
 8007748:	bf18      	it	ne
 800774a:	2301      	movne	r3, #1
 800774c:	0692      	lsls	r2, r2, #26
 800774e:	d42b      	bmi.n	80077a8 <_printf_common+0xb0>
 8007750:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007754:	4649      	mov	r1, r9
 8007756:	4638      	mov	r0, r7
 8007758:	47c0      	blx	r8
 800775a:	3001      	adds	r0, #1
 800775c:	d01e      	beq.n	800779c <_printf_common+0xa4>
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	6922      	ldr	r2, [r4, #16]
 8007762:	f003 0306 	and.w	r3, r3, #6
 8007766:	2b04      	cmp	r3, #4
 8007768:	bf02      	ittt	eq
 800776a:	68e5      	ldreq	r5, [r4, #12]
 800776c:	6833      	ldreq	r3, [r6, #0]
 800776e:	1aed      	subeq	r5, r5, r3
 8007770:	68a3      	ldr	r3, [r4, #8]
 8007772:	bf0c      	ite	eq
 8007774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007778:	2500      	movne	r5, #0
 800777a:	4293      	cmp	r3, r2
 800777c:	bfc4      	itt	gt
 800777e:	1a9b      	subgt	r3, r3, r2
 8007780:	18ed      	addgt	r5, r5, r3
 8007782:	2600      	movs	r6, #0
 8007784:	341a      	adds	r4, #26
 8007786:	42b5      	cmp	r5, r6
 8007788:	d11a      	bne.n	80077c0 <_printf_common+0xc8>
 800778a:	2000      	movs	r0, #0
 800778c:	e008      	b.n	80077a0 <_printf_common+0xa8>
 800778e:	2301      	movs	r3, #1
 8007790:	4652      	mov	r2, sl
 8007792:	4649      	mov	r1, r9
 8007794:	4638      	mov	r0, r7
 8007796:	47c0      	blx	r8
 8007798:	3001      	adds	r0, #1
 800779a:	d103      	bne.n	80077a4 <_printf_common+0xac>
 800779c:	f04f 30ff 	mov.w	r0, #4294967295
 80077a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a4:	3501      	adds	r5, #1
 80077a6:	e7c6      	b.n	8007736 <_printf_common+0x3e>
 80077a8:	18e1      	adds	r1, r4, r3
 80077aa:	1c5a      	adds	r2, r3, #1
 80077ac:	2030      	movs	r0, #48	; 0x30
 80077ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077b2:	4422      	add	r2, r4
 80077b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077bc:	3302      	adds	r3, #2
 80077be:	e7c7      	b.n	8007750 <_printf_common+0x58>
 80077c0:	2301      	movs	r3, #1
 80077c2:	4622      	mov	r2, r4
 80077c4:	4649      	mov	r1, r9
 80077c6:	4638      	mov	r0, r7
 80077c8:	47c0      	blx	r8
 80077ca:	3001      	adds	r0, #1
 80077cc:	d0e6      	beq.n	800779c <_printf_common+0xa4>
 80077ce:	3601      	adds	r6, #1
 80077d0:	e7d9      	b.n	8007786 <_printf_common+0x8e>
	...

080077d4 <_printf_i>:
 80077d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077d8:	7e0f      	ldrb	r7, [r1, #24]
 80077da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077dc:	2f78      	cmp	r7, #120	; 0x78
 80077de:	4691      	mov	r9, r2
 80077e0:	4680      	mov	r8, r0
 80077e2:	460c      	mov	r4, r1
 80077e4:	469a      	mov	sl, r3
 80077e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80077ea:	d807      	bhi.n	80077fc <_printf_i+0x28>
 80077ec:	2f62      	cmp	r7, #98	; 0x62
 80077ee:	d80a      	bhi.n	8007806 <_printf_i+0x32>
 80077f0:	2f00      	cmp	r7, #0
 80077f2:	f000 80d4 	beq.w	800799e <_printf_i+0x1ca>
 80077f6:	2f58      	cmp	r7, #88	; 0x58
 80077f8:	f000 80c0 	beq.w	800797c <_printf_i+0x1a8>
 80077fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007800:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007804:	e03a      	b.n	800787c <_printf_i+0xa8>
 8007806:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800780a:	2b15      	cmp	r3, #21
 800780c:	d8f6      	bhi.n	80077fc <_printf_i+0x28>
 800780e:	a101      	add	r1, pc, #4	; (adr r1, 8007814 <_printf_i+0x40>)
 8007810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007814:	0800786d 	.word	0x0800786d
 8007818:	08007881 	.word	0x08007881
 800781c:	080077fd 	.word	0x080077fd
 8007820:	080077fd 	.word	0x080077fd
 8007824:	080077fd 	.word	0x080077fd
 8007828:	080077fd 	.word	0x080077fd
 800782c:	08007881 	.word	0x08007881
 8007830:	080077fd 	.word	0x080077fd
 8007834:	080077fd 	.word	0x080077fd
 8007838:	080077fd 	.word	0x080077fd
 800783c:	080077fd 	.word	0x080077fd
 8007840:	08007985 	.word	0x08007985
 8007844:	080078ad 	.word	0x080078ad
 8007848:	0800793f 	.word	0x0800793f
 800784c:	080077fd 	.word	0x080077fd
 8007850:	080077fd 	.word	0x080077fd
 8007854:	080079a7 	.word	0x080079a7
 8007858:	080077fd 	.word	0x080077fd
 800785c:	080078ad 	.word	0x080078ad
 8007860:	080077fd 	.word	0x080077fd
 8007864:	080077fd 	.word	0x080077fd
 8007868:	08007947 	.word	0x08007947
 800786c:	682b      	ldr	r3, [r5, #0]
 800786e:	1d1a      	adds	r2, r3, #4
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	602a      	str	r2, [r5, #0]
 8007874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800787c:	2301      	movs	r3, #1
 800787e:	e09f      	b.n	80079c0 <_printf_i+0x1ec>
 8007880:	6820      	ldr	r0, [r4, #0]
 8007882:	682b      	ldr	r3, [r5, #0]
 8007884:	0607      	lsls	r7, r0, #24
 8007886:	f103 0104 	add.w	r1, r3, #4
 800788a:	6029      	str	r1, [r5, #0]
 800788c:	d501      	bpl.n	8007892 <_printf_i+0xbe>
 800788e:	681e      	ldr	r6, [r3, #0]
 8007890:	e003      	b.n	800789a <_printf_i+0xc6>
 8007892:	0646      	lsls	r6, r0, #25
 8007894:	d5fb      	bpl.n	800788e <_printf_i+0xba>
 8007896:	f9b3 6000 	ldrsh.w	r6, [r3]
 800789a:	2e00      	cmp	r6, #0
 800789c:	da03      	bge.n	80078a6 <_printf_i+0xd2>
 800789e:	232d      	movs	r3, #45	; 0x2d
 80078a0:	4276      	negs	r6, r6
 80078a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078a6:	485a      	ldr	r0, [pc, #360]	; (8007a10 <_printf_i+0x23c>)
 80078a8:	230a      	movs	r3, #10
 80078aa:	e012      	b.n	80078d2 <_printf_i+0xfe>
 80078ac:	682b      	ldr	r3, [r5, #0]
 80078ae:	6820      	ldr	r0, [r4, #0]
 80078b0:	1d19      	adds	r1, r3, #4
 80078b2:	6029      	str	r1, [r5, #0]
 80078b4:	0605      	lsls	r5, r0, #24
 80078b6:	d501      	bpl.n	80078bc <_printf_i+0xe8>
 80078b8:	681e      	ldr	r6, [r3, #0]
 80078ba:	e002      	b.n	80078c2 <_printf_i+0xee>
 80078bc:	0641      	lsls	r1, r0, #25
 80078be:	d5fb      	bpl.n	80078b8 <_printf_i+0xe4>
 80078c0:	881e      	ldrh	r6, [r3, #0]
 80078c2:	4853      	ldr	r0, [pc, #332]	; (8007a10 <_printf_i+0x23c>)
 80078c4:	2f6f      	cmp	r7, #111	; 0x6f
 80078c6:	bf0c      	ite	eq
 80078c8:	2308      	moveq	r3, #8
 80078ca:	230a      	movne	r3, #10
 80078cc:	2100      	movs	r1, #0
 80078ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078d2:	6865      	ldr	r5, [r4, #4]
 80078d4:	60a5      	str	r5, [r4, #8]
 80078d6:	2d00      	cmp	r5, #0
 80078d8:	bfa2      	ittt	ge
 80078da:	6821      	ldrge	r1, [r4, #0]
 80078dc:	f021 0104 	bicge.w	r1, r1, #4
 80078e0:	6021      	strge	r1, [r4, #0]
 80078e2:	b90e      	cbnz	r6, 80078e8 <_printf_i+0x114>
 80078e4:	2d00      	cmp	r5, #0
 80078e6:	d04b      	beq.n	8007980 <_printf_i+0x1ac>
 80078e8:	4615      	mov	r5, r2
 80078ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80078ee:	fb03 6711 	mls	r7, r3, r1, r6
 80078f2:	5dc7      	ldrb	r7, [r0, r7]
 80078f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80078f8:	4637      	mov	r7, r6
 80078fa:	42bb      	cmp	r3, r7
 80078fc:	460e      	mov	r6, r1
 80078fe:	d9f4      	bls.n	80078ea <_printf_i+0x116>
 8007900:	2b08      	cmp	r3, #8
 8007902:	d10b      	bne.n	800791c <_printf_i+0x148>
 8007904:	6823      	ldr	r3, [r4, #0]
 8007906:	07de      	lsls	r6, r3, #31
 8007908:	d508      	bpl.n	800791c <_printf_i+0x148>
 800790a:	6923      	ldr	r3, [r4, #16]
 800790c:	6861      	ldr	r1, [r4, #4]
 800790e:	4299      	cmp	r1, r3
 8007910:	bfde      	ittt	le
 8007912:	2330      	movle	r3, #48	; 0x30
 8007914:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007918:	f105 35ff 	addle.w	r5, r5, #4294967295
 800791c:	1b52      	subs	r2, r2, r5
 800791e:	6122      	str	r2, [r4, #16]
 8007920:	f8cd a000 	str.w	sl, [sp]
 8007924:	464b      	mov	r3, r9
 8007926:	aa03      	add	r2, sp, #12
 8007928:	4621      	mov	r1, r4
 800792a:	4640      	mov	r0, r8
 800792c:	f7ff fee4 	bl	80076f8 <_printf_common>
 8007930:	3001      	adds	r0, #1
 8007932:	d14a      	bne.n	80079ca <_printf_i+0x1f6>
 8007934:	f04f 30ff 	mov.w	r0, #4294967295
 8007938:	b004      	add	sp, #16
 800793a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800793e:	6823      	ldr	r3, [r4, #0]
 8007940:	f043 0320 	orr.w	r3, r3, #32
 8007944:	6023      	str	r3, [r4, #0]
 8007946:	4833      	ldr	r0, [pc, #204]	; (8007a14 <_printf_i+0x240>)
 8007948:	2778      	movs	r7, #120	; 0x78
 800794a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800794e:	6823      	ldr	r3, [r4, #0]
 8007950:	6829      	ldr	r1, [r5, #0]
 8007952:	061f      	lsls	r7, r3, #24
 8007954:	f851 6b04 	ldr.w	r6, [r1], #4
 8007958:	d402      	bmi.n	8007960 <_printf_i+0x18c>
 800795a:	065f      	lsls	r7, r3, #25
 800795c:	bf48      	it	mi
 800795e:	b2b6      	uxthmi	r6, r6
 8007960:	07df      	lsls	r7, r3, #31
 8007962:	bf48      	it	mi
 8007964:	f043 0320 	orrmi.w	r3, r3, #32
 8007968:	6029      	str	r1, [r5, #0]
 800796a:	bf48      	it	mi
 800796c:	6023      	strmi	r3, [r4, #0]
 800796e:	b91e      	cbnz	r6, 8007978 <_printf_i+0x1a4>
 8007970:	6823      	ldr	r3, [r4, #0]
 8007972:	f023 0320 	bic.w	r3, r3, #32
 8007976:	6023      	str	r3, [r4, #0]
 8007978:	2310      	movs	r3, #16
 800797a:	e7a7      	b.n	80078cc <_printf_i+0xf8>
 800797c:	4824      	ldr	r0, [pc, #144]	; (8007a10 <_printf_i+0x23c>)
 800797e:	e7e4      	b.n	800794a <_printf_i+0x176>
 8007980:	4615      	mov	r5, r2
 8007982:	e7bd      	b.n	8007900 <_printf_i+0x12c>
 8007984:	682b      	ldr	r3, [r5, #0]
 8007986:	6826      	ldr	r6, [r4, #0]
 8007988:	6961      	ldr	r1, [r4, #20]
 800798a:	1d18      	adds	r0, r3, #4
 800798c:	6028      	str	r0, [r5, #0]
 800798e:	0635      	lsls	r5, r6, #24
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	d501      	bpl.n	8007998 <_printf_i+0x1c4>
 8007994:	6019      	str	r1, [r3, #0]
 8007996:	e002      	b.n	800799e <_printf_i+0x1ca>
 8007998:	0670      	lsls	r0, r6, #25
 800799a:	d5fb      	bpl.n	8007994 <_printf_i+0x1c0>
 800799c:	8019      	strh	r1, [r3, #0]
 800799e:	2300      	movs	r3, #0
 80079a0:	6123      	str	r3, [r4, #16]
 80079a2:	4615      	mov	r5, r2
 80079a4:	e7bc      	b.n	8007920 <_printf_i+0x14c>
 80079a6:	682b      	ldr	r3, [r5, #0]
 80079a8:	1d1a      	adds	r2, r3, #4
 80079aa:	602a      	str	r2, [r5, #0]
 80079ac:	681d      	ldr	r5, [r3, #0]
 80079ae:	6862      	ldr	r2, [r4, #4]
 80079b0:	2100      	movs	r1, #0
 80079b2:	4628      	mov	r0, r5
 80079b4:	f7f8 fc7c 	bl	80002b0 <memchr>
 80079b8:	b108      	cbz	r0, 80079be <_printf_i+0x1ea>
 80079ba:	1b40      	subs	r0, r0, r5
 80079bc:	6060      	str	r0, [r4, #4]
 80079be:	6863      	ldr	r3, [r4, #4]
 80079c0:	6123      	str	r3, [r4, #16]
 80079c2:	2300      	movs	r3, #0
 80079c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079c8:	e7aa      	b.n	8007920 <_printf_i+0x14c>
 80079ca:	6923      	ldr	r3, [r4, #16]
 80079cc:	462a      	mov	r2, r5
 80079ce:	4649      	mov	r1, r9
 80079d0:	4640      	mov	r0, r8
 80079d2:	47d0      	blx	sl
 80079d4:	3001      	adds	r0, #1
 80079d6:	d0ad      	beq.n	8007934 <_printf_i+0x160>
 80079d8:	6823      	ldr	r3, [r4, #0]
 80079da:	079b      	lsls	r3, r3, #30
 80079dc:	d413      	bmi.n	8007a06 <_printf_i+0x232>
 80079de:	68e0      	ldr	r0, [r4, #12]
 80079e0:	9b03      	ldr	r3, [sp, #12]
 80079e2:	4298      	cmp	r0, r3
 80079e4:	bfb8      	it	lt
 80079e6:	4618      	movlt	r0, r3
 80079e8:	e7a6      	b.n	8007938 <_printf_i+0x164>
 80079ea:	2301      	movs	r3, #1
 80079ec:	4632      	mov	r2, r6
 80079ee:	4649      	mov	r1, r9
 80079f0:	4640      	mov	r0, r8
 80079f2:	47d0      	blx	sl
 80079f4:	3001      	adds	r0, #1
 80079f6:	d09d      	beq.n	8007934 <_printf_i+0x160>
 80079f8:	3501      	adds	r5, #1
 80079fa:	68e3      	ldr	r3, [r4, #12]
 80079fc:	9903      	ldr	r1, [sp, #12]
 80079fe:	1a5b      	subs	r3, r3, r1
 8007a00:	42ab      	cmp	r3, r5
 8007a02:	dcf2      	bgt.n	80079ea <_printf_i+0x216>
 8007a04:	e7eb      	b.n	80079de <_printf_i+0x20a>
 8007a06:	2500      	movs	r5, #0
 8007a08:	f104 0619 	add.w	r6, r4, #25
 8007a0c:	e7f5      	b.n	80079fa <_printf_i+0x226>
 8007a0e:	bf00      	nop
 8007a10:	08009cb5 	.word	0x08009cb5
 8007a14:	08009cc6 	.word	0x08009cc6

08007a18 <std>:
 8007a18:	2300      	movs	r3, #0
 8007a1a:	b510      	push	{r4, lr}
 8007a1c:	4604      	mov	r4, r0
 8007a1e:	e9c0 3300 	strd	r3, r3, [r0]
 8007a22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a26:	6083      	str	r3, [r0, #8]
 8007a28:	8181      	strh	r1, [r0, #12]
 8007a2a:	6643      	str	r3, [r0, #100]	; 0x64
 8007a2c:	81c2      	strh	r2, [r0, #14]
 8007a2e:	6183      	str	r3, [r0, #24]
 8007a30:	4619      	mov	r1, r3
 8007a32:	2208      	movs	r2, #8
 8007a34:	305c      	adds	r0, #92	; 0x5c
 8007a36:	f000 f8f4 	bl	8007c22 <memset>
 8007a3a:	4b0d      	ldr	r3, [pc, #52]	; (8007a70 <std+0x58>)
 8007a3c:	6263      	str	r3, [r4, #36]	; 0x24
 8007a3e:	4b0d      	ldr	r3, [pc, #52]	; (8007a74 <std+0x5c>)
 8007a40:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a42:	4b0d      	ldr	r3, [pc, #52]	; (8007a78 <std+0x60>)
 8007a44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a46:	4b0d      	ldr	r3, [pc, #52]	; (8007a7c <std+0x64>)
 8007a48:	6323      	str	r3, [r4, #48]	; 0x30
 8007a4a:	4b0d      	ldr	r3, [pc, #52]	; (8007a80 <std+0x68>)
 8007a4c:	6224      	str	r4, [r4, #32]
 8007a4e:	429c      	cmp	r4, r3
 8007a50:	d006      	beq.n	8007a60 <std+0x48>
 8007a52:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007a56:	4294      	cmp	r4, r2
 8007a58:	d002      	beq.n	8007a60 <std+0x48>
 8007a5a:	33d0      	adds	r3, #208	; 0xd0
 8007a5c:	429c      	cmp	r4, r3
 8007a5e:	d105      	bne.n	8007a6c <std+0x54>
 8007a60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a68:	f000 b946 	b.w	8007cf8 <__retarget_lock_init_recursive>
 8007a6c:	bd10      	pop	{r4, pc}
 8007a6e:	bf00      	nop
 8007a70:	08007b9d 	.word	0x08007b9d
 8007a74:	08007bbf 	.word	0x08007bbf
 8007a78:	08007bf7 	.word	0x08007bf7
 8007a7c:	08007c1b 	.word	0x08007c1b
 8007a80:	20000db0 	.word	0x20000db0

08007a84 <stdio_exit_handler>:
 8007a84:	4a02      	ldr	r2, [pc, #8]	; (8007a90 <stdio_exit_handler+0xc>)
 8007a86:	4903      	ldr	r1, [pc, #12]	; (8007a94 <stdio_exit_handler+0x10>)
 8007a88:	4803      	ldr	r0, [pc, #12]	; (8007a98 <stdio_exit_handler+0x14>)
 8007a8a:	f000 b869 	b.w	8007b60 <_fwalk_sglue>
 8007a8e:	bf00      	nop
 8007a90:	2000000c 	.word	0x2000000c
 8007a94:	08009459 	.word	0x08009459
 8007a98:	20000184 	.word	0x20000184

08007a9c <cleanup_stdio>:
 8007a9c:	6841      	ldr	r1, [r0, #4]
 8007a9e:	4b0c      	ldr	r3, [pc, #48]	; (8007ad0 <cleanup_stdio+0x34>)
 8007aa0:	4299      	cmp	r1, r3
 8007aa2:	b510      	push	{r4, lr}
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	d001      	beq.n	8007aac <cleanup_stdio+0x10>
 8007aa8:	f001 fcd6 	bl	8009458 <_fflush_r>
 8007aac:	68a1      	ldr	r1, [r4, #8]
 8007aae:	4b09      	ldr	r3, [pc, #36]	; (8007ad4 <cleanup_stdio+0x38>)
 8007ab0:	4299      	cmp	r1, r3
 8007ab2:	d002      	beq.n	8007aba <cleanup_stdio+0x1e>
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	f001 fccf 	bl	8009458 <_fflush_r>
 8007aba:	68e1      	ldr	r1, [r4, #12]
 8007abc:	4b06      	ldr	r3, [pc, #24]	; (8007ad8 <cleanup_stdio+0x3c>)
 8007abe:	4299      	cmp	r1, r3
 8007ac0:	d004      	beq.n	8007acc <cleanup_stdio+0x30>
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ac8:	f001 bcc6 	b.w	8009458 <_fflush_r>
 8007acc:	bd10      	pop	{r4, pc}
 8007ace:	bf00      	nop
 8007ad0:	20000db0 	.word	0x20000db0
 8007ad4:	20000e18 	.word	0x20000e18
 8007ad8:	20000e80 	.word	0x20000e80

08007adc <global_stdio_init.part.0>:
 8007adc:	b510      	push	{r4, lr}
 8007ade:	4b0b      	ldr	r3, [pc, #44]	; (8007b0c <global_stdio_init.part.0+0x30>)
 8007ae0:	4c0b      	ldr	r4, [pc, #44]	; (8007b10 <global_stdio_init.part.0+0x34>)
 8007ae2:	4a0c      	ldr	r2, [pc, #48]	; (8007b14 <global_stdio_init.part.0+0x38>)
 8007ae4:	601a      	str	r2, [r3, #0]
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	2200      	movs	r2, #0
 8007aea:	2104      	movs	r1, #4
 8007aec:	f7ff ff94 	bl	8007a18 <std>
 8007af0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007af4:	2201      	movs	r2, #1
 8007af6:	2109      	movs	r1, #9
 8007af8:	f7ff ff8e 	bl	8007a18 <std>
 8007afc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007b00:	2202      	movs	r2, #2
 8007b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b06:	2112      	movs	r1, #18
 8007b08:	f7ff bf86 	b.w	8007a18 <std>
 8007b0c:	20000ee8 	.word	0x20000ee8
 8007b10:	20000db0 	.word	0x20000db0
 8007b14:	08007a85 	.word	0x08007a85

08007b18 <__sfp_lock_acquire>:
 8007b18:	4801      	ldr	r0, [pc, #4]	; (8007b20 <__sfp_lock_acquire+0x8>)
 8007b1a:	f000 b8ee 	b.w	8007cfa <__retarget_lock_acquire_recursive>
 8007b1e:	bf00      	nop
 8007b20:	20000ef1 	.word	0x20000ef1

08007b24 <__sfp_lock_release>:
 8007b24:	4801      	ldr	r0, [pc, #4]	; (8007b2c <__sfp_lock_release+0x8>)
 8007b26:	f000 b8e9 	b.w	8007cfc <__retarget_lock_release_recursive>
 8007b2a:	bf00      	nop
 8007b2c:	20000ef1 	.word	0x20000ef1

08007b30 <__sinit>:
 8007b30:	b510      	push	{r4, lr}
 8007b32:	4604      	mov	r4, r0
 8007b34:	f7ff fff0 	bl	8007b18 <__sfp_lock_acquire>
 8007b38:	6a23      	ldr	r3, [r4, #32]
 8007b3a:	b11b      	cbz	r3, 8007b44 <__sinit+0x14>
 8007b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b40:	f7ff bff0 	b.w	8007b24 <__sfp_lock_release>
 8007b44:	4b04      	ldr	r3, [pc, #16]	; (8007b58 <__sinit+0x28>)
 8007b46:	6223      	str	r3, [r4, #32]
 8007b48:	4b04      	ldr	r3, [pc, #16]	; (8007b5c <__sinit+0x2c>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1f5      	bne.n	8007b3c <__sinit+0xc>
 8007b50:	f7ff ffc4 	bl	8007adc <global_stdio_init.part.0>
 8007b54:	e7f2      	b.n	8007b3c <__sinit+0xc>
 8007b56:	bf00      	nop
 8007b58:	08007a9d 	.word	0x08007a9d
 8007b5c:	20000ee8 	.word	0x20000ee8

08007b60 <_fwalk_sglue>:
 8007b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b64:	4607      	mov	r7, r0
 8007b66:	4688      	mov	r8, r1
 8007b68:	4614      	mov	r4, r2
 8007b6a:	2600      	movs	r6, #0
 8007b6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b70:	f1b9 0901 	subs.w	r9, r9, #1
 8007b74:	d505      	bpl.n	8007b82 <_fwalk_sglue+0x22>
 8007b76:	6824      	ldr	r4, [r4, #0]
 8007b78:	2c00      	cmp	r4, #0
 8007b7a:	d1f7      	bne.n	8007b6c <_fwalk_sglue+0xc>
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b82:	89ab      	ldrh	r3, [r5, #12]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d907      	bls.n	8007b98 <_fwalk_sglue+0x38>
 8007b88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	d003      	beq.n	8007b98 <_fwalk_sglue+0x38>
 8007b90:	4629      	mov	r1, r5
 8007b92:	4638      	mov	r0, r7
 8007b94:	47c0      	blx	r8
 8007b96:	4306      	orrs	r6, r0
 8007b98:	3568      	adds	r5, #104	; 0x68
 8007b9a:	e7e9      	b.n	8007b70 <_fwalk_sglue+0x10>

08007b9c <__sread>:
 8007b9c:	b510      	push	{r4, lr}
 8007b9e:	460c      	mov	r4, r1
 8007ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ba4:	f000 f86c 	bl	8007c80 <_read_r>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	bfab      	itete	ge
 8007bac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007bae:	89a3      	ldrhlt	r3, [r4, #12]
 8007bb0:	181b      	addge	r3, r3, r0
 8007bb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007bb6:	bfac      	ite	ge
 8007bb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007bba:	81a3      	strhlt	r3, [r4, #12]
 8007bbc:	bd10      	pop	{r4, pc}

08007bbe <__swrite>:
 8007bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc2:	461f      	mov	r7, r3
 8007bc4:	898b      	ldrh	r3, [r1, #12]
 8007bc6:	05db      	lsls	r3, r3, #23
 8007bc8:	4605      	mov	r5, r0
 8007bca:	460c      	mov	r4, r1
 8007bcc:	4616      	mov	r6, r2
 8007bce:	d505      	bpl.n	8007bdc <__swrite+0x1e>
 8007bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f000 f840 	bl	8007c5c <_lseek_r>
 8007bdc:	89a3      	ldrh	r3, [r4, #12]
 8007bde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007be2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007be6:	81a3      	strh	r3, [r4, #12]
 8007be8:	4632      	mov	r2, r6
 8007bea:	463b      	mov	r3, r7
 8007bec:	4628      	mov	r0, r5
 8007bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf2:	f7ff ba99 	b.w	8007128 <_write_r>

08007bf6 <__sseek>:
 8007bf6:	b510      	push	{r4, lr}
 8007bf8:	460c      	mov	r4, r1
 8007bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bfe:	f000 f82d 	bl	8007c5c <_lseek_r>
 8007c02:	1c43      	adds	r3, r0, #1
 8007c04:	89a3      	ldrh	r3, [r4, #12]
 8007c06:	bf15      	itete	ne
 8007c08:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c12:	81a3      	strheq	r3, [r4, #12]
 8007c14:	bf18      	it	ne
 8007c16:	81a3      	strhne	r3, [r4, #12]
 8007c18:	bd10      	pop	{r4, pc}

08007c1a <__sclose>:
 8007c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c1e:	f000 b80d 	b.w	8007c3c <_close_r>

08007c22 <memset>:
 8007c22:	4402      	add	r2, r0
 8007c24:	4603      	mov	r3, r0
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d100      	bne.n	8007c2c <memset+0xa>
 8007c2a:	4770      	bx	lr
 8007c2c:	f803 1b01 	strb.w	r1, [r3], #1
 8007c30:	e7f9      	b.n	8007c26 <memset+0x4>
	...

08007c34 <_localeconv_r>:
 8007c34:	4800      	ldr	r0, [pc, #0]	; (8007c38 <_localeconv_r+0x4>)
 8007c36:	4770      	bx	lr
 8007c38:	20000108 	.word	0x20000108

08007c3c <_close_r>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	4d06      	ldr	r5, [pc, #24]	; (8007c58 <_close_r+0x1c>)
 8007c40:	2300      	movs	r3, #0
 8007c42:	4604      	mov	r4, r0
 8007c44:	4608      	mov	r0, r1
 8007c46:	602b      	str	r3, [r5, #0]
 8007c48:	f7fa fb0b 	bl	8002262 <_close>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d102      	bne.n	8007c56 <_close_r+0x1a>
 8007c50:	682b      	ldr	r3, [r5, #0]
 8007c52:	b103      	cbz	r3, 8007c56 <_close_r+0x1a>
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	bd38      	pop	{r3, r4, r5, pc}
 8007c58:	20000eec 	.word	0x20000eec

08007c5c <_lseek_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	4d07      	ldr	r5, [pc, #28]	; (8007c7c <_lseek_r+0x20>)
 8007c60:	4604      	mov	r4, r0
 8007c62:	4608      	mov	r0, r1
 8007c64:	4611      	mov	r1, r2
 8007c66:	2200      	movs	r2, #0
 8007c68:	602a      	str	r2, [r5, #0]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f7fa fb20 	bl	80022b0 <_lseek>
 8007c70:	1c43      	adds	r3, r0, #1
 8007c72:	d102      	bne.n	8007c7a <_lseek_r+0x1e>
 8007c74:	682b      	ldr	r3, [r5, #0]
 8007c76:	b103      	cbz	r3, 8007c7a <_lseek_r+0x1e>
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	20000eec 	.word	0x20000eec

08007c80 <_read_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4d07      	ldr	r5, [pc, #28]	; (8007ca0 <_read_r+0x20>)
 8007c84:	4604      	mov	r4, r0
 8007c86:	4608      	mov	r0, r1
 8007c88:	4611      	mov	r1, r2
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	602a      	str	r2, [r5, #0]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	f7fa faca 	bl	8002228 <_read>
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	d102      	bne.n	8007c9e <_read_r+0x1e>
 8007c98:	682b      	ldr	r3, [r5, #0]
 8007c9a:	b103      	cbz	r3, 8007c9e <_read_r+0x1e>
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ca0:	20000eec 	.word	0x20000eec

08007ca4 <__errno>:
 8007ca4:	4b01      	ldr	r3, [pc, #4]	; (8007cac <__errno+0x8>)
 8007ca6:	6818      	ldr	r0, [r3, #0]
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	200001d0 	.word	0x200001d0

08007cb0 <__libc_init_array>:
 8007cb0:	b570      	push	{r4, r5, r6, lr}
 8007cb2:	4d0d      	ldr	r5, [pc, #52]	; (8007ce8 <__libc_init_array+0x38>)
 8007cb4:	4c0d      	ldr	r4, [pc, #52]	; (8007cec <__libc_init_array+0x3c>)
 8007cb6:	1b64      	subs	r4, r4, r5
 8007cb8:	10a4      	asrs	r4, r4, #2
 8007cba:	2600      	movs	r6, #0
 8007cbc:	42a6      	cmp	r6, r4
 8007cbe:	d109      	bne.n	8007cd4 <__libc_init_array+0x24>
 8007cc0:	4d0b      	ldr	r5, [pc, #44]	; (8007cf0 <__libc_init_array+0x40>)
 8007cc2:	4c0c      	ldr	r4, [pc, #48]	; (8007cf4 <__libc_init_array+0x44>)
 8007cc4:	f001 ff44 	bl	8009b50 <_init>
 8007cc8:	1b64      	subs	r4, r4, r5
 8007cca:	10a4      	asrs	r4, r4, #2
 8007ccc:	2600      	movs	r6, #0
 8007cce:	42a6      	cmp	r6, r4
 8007cd0:	d105      	bne.n	8007cde <__libc_init_array+0x2e>
 8007cd2:	bd70      	pop	{r4, r5, r6, pc}
 8007cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cd8:	4798      	blx	r3
 8007cda:	3601      	adds	r6, #1
 8007cdc:	e7ee      	b.n	8007cbc <__libc_init_array+0xc>
 8007cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ce2:	4798      	blx	r3
 8007ce4:	3601      	adds	r6, #1
 8007ce6:	e7f2      	b.n	8007cce <__libc_init_array+0x1e>
 8007ce8:	08009f1c 	.word	0x08009f1c
 8007cec:	08009f1c 	.word	0x08009f1c
 8007cf0:	08009f1c 	.word	0x08009f1c
 8007cf4:	08009f20 	.word	0x08009f20

08007cf8 <__retarget_lock_init_recursive>:
 8007cf8:	4770      	bx	lr

08007cfa <__retarget_lock_acquire_recursive>:
 8007cfa:	4770      	bx	lr

08007cfc <__retarget_lock_release_recursive>:
 8007cfc:	4770      	bx	lr

08007cfe <memcpy>:
 8007cfe:	440a      	add	r2, r1
 8007d00:	4291      	cmp	r1, r2
 8007d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d06:	d100      	bne.n	8007d0a <memcpy+0xc>
 8007d08:	4770      	bx	lr
 8007d0a:	b510      	push	{r4, lr}
 8007d0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d14:	4291      	cmp	r1, r2
 8007d16:	d1f9      	bne.n	8007d0c <memcpy+0xe>
 8007d18:	bd10      	pop	{r4, pc}

08007d1a <quorem>:
 8007d1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d1e:	6903      	ldr	r3, [r0, #16]
 8007d20:	690c      	ldr	r4, [r1, #16]
 8007d22:	42a3      	cmp	r3, r4
 8007d24:	4607      	mov	r7, r0
 8007d26:	db7e      	blt.n	8007e26 <quorem+0x10c>
 8007d28:	3c01      	subs	r4, #1
 8007d2a:	f101 0814 	add.w	r8, r1, #20
 8007d2e:	f100 0514 	add.w	r5, r0, #20
 8007d32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d36:	9301      	str	r3, [sp, #4]
 8007d38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d40:	3301      	adds	r3, #1
 8007d42:	429a      	cmp	r2, r3
 8007d44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d50:	d331      	bcc.n	8007db6 <quorem+0x9c>
 8007d52:	f04f 0e00 	mov.w	lr, #0
 8007d56:	4640      	mov	r0, r8
 8007d58:	46ac      	mov	ip, r5
 8007d5a:	46f2      	mov	sl, lr
 8007d5c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d60:	b293      	uxth	r3, r2
 8007d62:	fb06 e303 	mla	r3, r6, r3, lr
 8007d66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d6a:	0c1a      	lsrs	r2, r3, #16
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	ebaa 0303 	sub.w	r3, sl, r3
 8007d72:	f8dc a000 	ldr.w	sl, [ip]
 8007d76:	fa13 f38a 	uxtah	r3, r3, sl
 8007d7a:	fb06 220e 	mla	r2, r6, lr, r2
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	9b00      	ldr	r3, [sp, #0]
 8007d82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d86:	b292      	uxth	r2, r2
 8007d88:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007d8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d90:	f8bd 3000 	ldrh.w	r3, [sp]
 8007d94:	4581      	cmp	r9, r0
 8007d96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d9a:	f84c 3b04 	str.w	r3, [ip], #4
 8007d9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007da2:	d2db      	bcs.n	8007d5c <quorem+0x42>
 8007da4:	f855 300b 	ldr.w	r3, [r5, fp]
 8007da8:	b92b      	cbnz	r3, 8007db6 <quorem+0x9c>
 8007daa:	9b01      	ldr	r3, [sp, #4]
 8007dac:	3b04      	subs	r3, #4
 8007dae:	429d      	cmp	r5, r3
 8007db0:	461a      	mov	r2, r3
 8007db2:	d32c      	bcc.n	8007e0e <quorem+0xf4>
 8007db4:	613c      	str	r4, [r7, #16]
 8007db6:	4638      	mov	r0, r7
 8007db8:	f001 f9ba 	bl	8009130 <__mcmp>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	db22      	blt.n	8007e06 <quorem+0xec>
 8007dc0:	3601      	adds	r6, #1
 8007dc2:	4629      	mov	r1, r5
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	f858 2b04 	ldr.w	r2, [r8], #4
 8007dca:	f8d1 c000 	ldr.w	ip, [r1]
 8007dce:	b293      	uxth	r3, r2
 8007dd0:	1ac3      	subs	r3, r0, r3
 8007dd2:	0c12      	lsrs	r2, r2, #16
 8007dd4:	fa13 f38c 	uxtah	r3, r3, ip
 8007dd8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007ddc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007de6:	45c1      	cmp	r9, r8
 8007de8:	f841 3b04 	str.w	r3, [r1], #4
 8007dec:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007df0:	d2e9      	bcs.n	8007dc6 <quorem+0xac>
 8007df2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007df6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dfa:	b922      	cbnz	r2, 8007e06 <quorem+0xec>
 8007dfc:	3b04      	subs	r3, #4
 8007dfe:	429d      	cmp	r5, r3
 8007e00:	461a      	mov	r2, r3
 8007e02:	d30a      	bcc.n	8007e1a <quorem+0x100>
 8007e04:	613c      	str	r4, [r7, #16]
 8007e06:	4630      	mov	r0, r6
 8007e08:	b003      	add	sp, #12
 8007e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e0e:	6812      	ldr	r2, [r2, #0]
 8007e10:	3b04      	subs	r3, #4
 8007e12:	2a00      	cmp	r2, #0
 8007e14:	d1ce      	bne.n	8007db4 <quorem+0x9a>
 8007e16:	3c01      	subs	r4, #1
 8007e18:	e7c9      	b.n	8007dae <quorem+0x94>
 8007e1a:	6812      	ldr	r2, [r2, #0]
 8007e1c:	3b04      	subs	r3, #4
 8007e1e:	2a00      	cmp	r2, #0
 8007e20:	d1f0      	bne.n	8007e04 <quorem+0xea>
 8007e22:	3c01      	subs	r4, #1
 8007e24:	e7eb      	b.n	8007dfe <quorem+0xe4>
 8007e26:	2000      	movs	r0, #0
 8007e28:	e7ee      	b.n	8007e08 <quorem+0xee>
 8007e2a:	0000      	movs	r0, r0
 8007e2c:	0000      	movs	r0, r0
	...

08007e30 <_dtoa_r>:
 8007e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e34:	ed2d 8b04 	vpush	{d8-d9}
 8007e38:	69c5      	ldr	r5, [r0, #28]
 8007e3a:	b093      	sub	sp, #76	; 0x4c
 8007e3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007e40:	ec57 6b10 	vmov	r6, r7, d0
 8007e44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e48:	9107      	str	r1, [sp, #28]
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	920a      	str	r2, [sp, #40]	; 0x28
 8007e4e:	930d      	str	r3, [sp, #52]	; 0x34
 8007e50:	b975      	cbnz	r5, 8007e70 <_dtoa_r+0x40>
 8007e52:	2010      	movs	r0, #16
 8007e54:	f000 fe2a 	bl	8008aac <malloc>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	61e0      	str	r0, [r4, #28]
 8007e5c:	b920      	cbnz	r0, 8007e68 <_dtoa_r+0x38>
 8007e5e:	4bae      	ldr	r3, [pc, #696]	; (8008118 <_dtoa_r+0x2e8>)
 8007e60:	21ef      	movs	r1, #239	; 0xef
 8007e62:	48ae      	ldr	r0, [pc, #696]	; (800811c <_dtoa_r+0x2ec>)
 8007e64:	f001 fb30 	bl	80094c8 <__assert_func>
 8007e68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e6c:	6005      	str	r5, [r0, #0]
 8007e6e:	60c5      	str	r5, [r0, #12]
 8007e70:	69e3      	ldr	r3, [r4, #28]
 8007e72:	6819      	ldr	r1, [r3, #0]
 8007e74:	b151      	cbz	r1, 8007e8c <_dtoa_r+0x5c>
 8007e76:	685a      	ldr	r2, [r3, #4]
 8007e78:	604a      	str	r2, [r1, #4]
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	4093      	lsls	r3, r2
 8007e7e:	608b      	str	r3, [r1, #8]
 8007e80:	4620      	mov	r0, r4
 8007e82:	f000 ff19 	bl	8008cb8 <_Bfree>
 8007e86:	69e3      	ldr	r3, [r4, #28]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	1e3b      	subs	r3, r7, #0
 8007e8e:	bfbb      	ittet	lt
 8007e90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e94:	9303      	strlt	r3, [sp, #12]
 8007e96:	2300      	movge	r3, #0
 8007e98:	2201      	movlt	r2, #1
 8007e9a:	bfac      	ite	ge
 8007e9c:	f8c8 3000 	strge.w	r3, [r8]
 8007ea0:	f8c8 2000 	strlt.w	r2, [r8]
 8007ea4:	4b9e      	ldr	r3, [pc, #632]	; (8008120 <_dtoa_r+0x2f0>)
 8007ea6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007eaa:	ea33 0308 	bics.w	r3, r3, r8
 8007eae:	d11b      	bne.n	8007ee8 <_dtoa_r+0xb8>
 8007eb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007eb2:	f242 730f 	movw	r3, #9999	; 0x270f
 8007eb6:	6013      	str	r3, [r2, #0]
 8007eb8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007ebc:	4333      	orrs	r3, r6
 8007ebe:	f000 8593 	beq.w	80089e8 <_dtoa_r+0xbb8>
 8007ec2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ec4:	b963      	cbnz	r3, 8007ee0 <_dtoa_r+0xb0>
 8007ec6:	4b97      	ldr	r3, [pc, #604]	; (8008124 <_dtoa_r+0x2f4>)
 8007ec8:	e027      	b.n	8007f1a <_dtoa_r+0xea>
 8007eca:	4b97      	ldr	r3, [pc, #604]	; (8008128 <_dtoa_r+0x2f8>)
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	3308      	adds	r3, #8
 8007ed0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ed2:	6013      	str	r3, [r2, #0]
 8007ed4:	9800      	ldr	r0, [sp, #0]
 8007ed6:	b013      	add	sp, #76	; 0x4c
 8007ed8:	ecbd 8b04 	vpop	{d8-d9}
 8007edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee0:	4b90      	ldr	r3, [pc, #576]	; (8008124 <_dtoa_r+0x2f4>)
 8007ee2:	9300      	str	r3, [sp, #0]
 8007ee4:	3303      	adds	r3, #3
 8007ee6:	e7f3      	b.n	8007ed0 <_dtoa_r+0xa0>
 8007ee8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007eec:	2200      	movs	r2, #0
 8007eee:	ec51 0b17 	vmov	r0, r1, d7
 8007ef2:	eeb0 8a47 	vmov.f32	s16, s14
 8007ef6:	eef0 8a67 	vmov.f32	s17, s15
 8007efa:	2300      	movs	r3, #0
 8007efc:	f7f8 fe54 	bl	8000ba8 <__aeabi_dcmpeq>
 8007f00:	4681      	mov	r9, r0
 8007f02:	b160      	cbz	r0, 8007f1e <_dtoa_r+0xee>
 8007f04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f06:	2301      	movs	r3, #1
 8007f08:	6013      	str	r3, [r2, #0]
 8007f0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f000 8568 	beq.w	80089e2 <_dtoa_r+0xbb2>
 8007f12:	4b86      	ldr	r3, [pc, #536]	; (800812c <_dtoa_r+0x2fc>)
 8007f14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f16:	6013      	str	r3, [r2, #0]
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	e7da      	b.n	8007ed4 <_dtoa_r+0xa4>
 8007f1e:	aa10      	add	r2, sp, #64	; 0x40
 8007f20:	a911      	add	r1, sp, #68	; 0x44
 8007f22:	4620      	mov	r0, r4
 8007f24:	eeb0 0a48 	vmov.f32	s0, s16
 8007f28:	eef0 0a68 	vmov.f32	s1, s17
 8007f2c:	f001 f9a6 	bl	800927c <__d2b>
 8007f30:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007f34:	4682      	mov	sl, r0
 8007f36:	2d00      	cmp	r5, #0
 8007f38:	d07f      	beq.n	800803a <_dtoa_r+0x20a>
 8007f3a:	ee18 3a90 	vmov	r3, s17
 8007f3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f42:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007f46:	ec51 0b18 	vmov	r0, r1, d8
 8007f4a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007f4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f52:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007f56:	4619      	mov	r1, r3
 8007f58:	2200      	movs	r2, #0
 8007f5a:	4b75      	ldr	r3, [pc, #468]	; (8008130 <_dtoa_r+0x300>)
 8007f5c:	f7f8 fa04 	bl	8000368 <__aeabi_dsub>
 8007f60:	a367      	add	r3, pc, #412	; (adr r3, 8008100 <_dtoa_r+0x2d0>)
 8007f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f66:	f7f8 fbb7 	bl	80006d8 <__aeabi_dmul>
 8007f6a:	a367      	add	r3, pc, #412	; (adr r3, 8008108 <_dtoa_r+0x2d8>)
 8007f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f70:	f7f8 f9fc 	bl	800036c <__adddf3>
 8007f74:	4606      	mov	r6, r0
 8007f76:	4628      	mov	r0, r5
 8007f78:	460f      	mov	r7, r1
 8007f7a:	f7f8 fb43 	bl	8000604 <__aeabi_i2d>
 8007f7e:	a364      	add	r3, pc, #400	; (adr r3, 8008110 <_dtoa_r+0x2e0>)
 8007f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f84:	f7f8 fba8 	bl	80006d8 <__aeabi_dmul>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	4639      	mov	r1, r7
 8007f90:	f7f8 f9ec 	bl	800036c <__adddf3>
 8007f94:	4606      	mov	r6, r0
 8007f96:	460f      	mov	r7, r1
 8007f98:	f7f8 fe4e 	bl	8000c38 <__aeabi_d2iz>
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	4683      	mov	fp, r0
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	4639      	mov	r1, r7
 8007fa6:	f7f8 fe09 	bl	8000bbc <__aeabi_dcmplt>
 8007faa:	b148      	cbz	r0, 8007fc0 <_dtoa_r+0x190>
 8007fac:	4658      	mov	r0, fp
 8007fae:	f7f8 fb29 	bl	8000604 <__aeabi_i2d>
 8007fb2:	4632      	mov	r2, r6
 8007fb4:	463b      	mov	r3, r7
 8007fb6:	f7f8 fdf7 	bl	8000ba8 <__aeabi_dcmpeq>
 8007fba:	b908      	cbnz	r0, 8007fc0 <_dtoa_r+0x190>
 8007fbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007fc0:	f1bb 0f16 	cmp.w	fp, #22
 8007fc4:	d857      	bhi.n	8008076 <_dtoa_r+0x246>
 8007fc6:	4b5b      	ldr	r3, [pc, #364]	; (8008134 <_dtoa_r+0x304>)
 8007fc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd0:	ec51 0b18 	vmov	r0, r1, d8
 8007fd4:	f7f8 fdf2 	bl	8000bbc <__aeabi_dcmplt>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d04e      	beq.n	800807a <_dtoa_r+0x24a>
 8007fdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	930c      	str	r3, [sp, #48]	; 0x30
 8007fe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fe6:	1b5b      	subs	r3, r3, r5
 8007fe8:	1e5a      	subs	r2, r3, #1
 8007fea:	bf45      	ittet	mi
 8007fec:	f1c3 0301 	rsbmi	r3, r3, #1
 8007ff0:	9305      	strmi	r3, [sp, #20]
 8007ff2:	2300      	movpl	r3, #0
 8007ff4:	2300      	movmi	r3, #0
 8007ff6:	9206      	str	r2, [sp, #24]
 8007ff8:	bf54      	ite	pl
 8007ffa:	9305      	strpl	r3, [sp, #20]
 8007ffc:	9306      	strmi	r3, [sp, #24]
 8007ffe:	f1bb 0f00 	cmp.w	fp, #0
 8008002:	db3c      	blt.n	800807e <_dtoa_r+0x24e>
 8008004:	9b06      	ldr	r3, [sp, #24]
 8008006:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800800a:	445b      	add	r3, fp
 800800c:	9306      	str	r3, [sp, #24]
 800800e:	2300      	movs	r3, #0
 8008010:	9308      	str	r3, [sp, #32]
 8008012:	9b07      	ldr	r3, [sp, #28]
 8008014:	2b09      	cmp	r3, #9
 8008016:	d868      	bhi.n	80080ea <_dtoa_r+0x2ba>
 8008018:	2b05      	cmp	r3, #5
 800801a:	bfc4      	itt	gt
 800801c:	3b04      	subgt	r3, #4
 800801e:	9307      	strgt	r3, [sp, #28]
 8008020:	9b07      	ldr	r3, [sp, #28]
 8008022:	f1a3 0302 	sub.w	r3, r3, #2
 8008026:	bfcc      	ite	gt
 8008028:	2500      	movgt	r5, #0
 800802a:	2501      	movle	r5, #1
 800802c:	2b03      	cmp	r3, #3
 800802e:	f200 8085 	bhi.w	800813c <_dtoa_r+0x30c>
 8008032:	e8df f003 	tbb	[pc, r3]
 8008036:	3b2e      	.short	0x3b2e
 8008038:	5839      	.short	0x5839
 800803a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800803e:	441d      	add	r5, r3
 8008040:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008044:	2b20      	cmp	r3, #32
 8008046:	bfc1      	itttt	gt
 8008048:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800804c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008050:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008054:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008058:	bfd6      	itet	le
 800805a:	f1c3 0320 	rsble	r3, r3, #32
 800805e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008062:	fa06 f003 	lslle.w	r0, r6, r3
 8008066:	f7f8 fabd 	bl	80005e4 <__aeabi_ui2d>
 800806a:	2201      	movs	r2, #1
 800806c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008070:	3d01      	subs	r5, #1
 8008072:	920e      	str	r2, [sp, #56]	; 0x38
 8008074:	e76f      	b.n	8007f56 <_dtoa_r+0x126>
 8008076:	2301      	movs	r3, #1
 8008078:	e7b3      	b.n	8007fe2 <_dtoa_r+0x1b2>
 800807a:	900c      	str	r0, [sp, #48]	; 0x30
 800807c:	e7b2      	b.n	8007fe4 <_dtoa_r+0x1b4>
 800807e:	9b05      	ldr	r3, [sp, #20]
 8008080:	eba3 030b 	sub.w	r3, r3, fp
 8008084:	9305      	str	r3, [sp, #20]
 8008086:	f1cb 0300 	rsb	r3, fp, #0
 800808a:	9308      	str	r3, [sp, #32]
 800808c:	2300      	movs	r3, #0
 800808e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008090:	e7bf      	b.n	8008012 <_dtoa_r+0x1e2>
 8008092:	2300      	movs	r3, #0
 8008094:	9309      	str	r3, [sp, #36]	; 0x24
 8008096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008098:	2b00      	cmp	r3, #0
 800809a:	dc52      	bgt.n	8008142 <_dtoa_r+0x312>
 800809c:	2301      	movs	r3, #1
 800809e:	9301      	str	r3, [sp, #4]
 80080a0:	9304      	str	r3, [sp, #16]
 80080a2:	461a      	mov	r2, r3
 80080a4:	920a      	str	r2, [sp, #40]	; 0x28
 80080a6:	e00b      	b.n	80080c0 <_dtoa_r+0x290>
 80080a8:	2301      	movs	r3, #1
 80080aa:	e7f3      	b.n	8008094 <_dtoa_r+0x264>
 80080ac:	2300      	movs	r3, #0
 80080ae:	9309      	str	r3, [sp, #36]	; 0x24
 80080b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080b2:	445b      	add	r3, fp
 80080b4:	9301      	str	r3, [sp, #4]
 80080b6:	3301      	adds	r3, #1
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	9304      	str	r3, [sp, #16]
 80080bc:	bfb8      	it	lt
 80080be:	2301      	movlt	r3, #1
 80080c0:	69e0      	ldr	r0, [r4, #28]
 80080c2:	2100      	movs	r1, #0
 80080c4:	2204      	movs	r2, #4
 80080c6:	f102 0614 	add.w	r6, r2, #20
 80080ca:	429e      	cmp	r6, r3
 80080cc:	d93d      	bls.n	800814a <_dtoa_r+0x31a>
 80080ce:	6041      	str	r1, [r0, #4]
 80080d0:	4620      	mov	r0, r4
 80080d2:	f000 fdb1 	bl	8008c38 <_Balloc>
 80080d6:	9000      	str	r0, [sp, #0]
 80080d8:	2800      	cmp	r0, #0
 80080da:	d139      	bne.n	8008150 <_dtoa_r+0x320>
 80080dc:	4b16      	ldr	r3, [pc, #88]	; (8008138 <_dtoa_r+0x308>)
 80080de:	4602      	mov	r2, r0
 80080e0:	f240 11af 	movw	r1, #431	; 0x1af
 80080e4:	e6bd      	b.n	8007e62 <_dtoa_r+0x32>
 80080e6:	2301      	movs	r3, #1
 80080e8:	e7e1      	b.n	80080ae <_dtoa_r+0x27e>
 80080ea:	2501      	movs	r5, #1
 80080ec:	2300      	movs	r3, #0
 80080ee:	9307      	str	r3, [sp, #28]
 80080f0:	9509      	str	r5, [sp, #36]	; 0x24
 80080f2:	f04f 33ff 	mov.w	r3, #4294967295
 80080f6:	9301      	str	r3, [sp, #4]
 80080f8:	9304      	str	r3, [sp, #16]
 80080fa:	2200      	movs	r2, #0
 80080fc:	2312      	movs	r3, #18
 80080fe:	e7d1      	b.n	80080a4 <_dtoa_r+0x274>
 8008100:	636f4361 	.word	0x636f4361
 8008104:	3fd287a7 	.word	0x3fd287a7
 8008108:	8b60c8b3 	.word	0x8b60c8b3
 800810c:	3fc68a28 	.word	0x3fc68a28
 8008110:	509f79fb 	.word	0x509f79fb
 8008114:	3fd34413 	.word	0x3fd34413
 8008118:	08009cee 	.word	0x08009cee
 800811c:	08009d05 	.word	0x08009d05
 8008120:	7ff00000 	.word	0x7ff00000
 8008124:	08009cea 	.word	0x08009cea
 8008128:	08009ce1 	.word	0x08009ce1
 800812c:	08009cb4 	.word	0x08009cb4
 8008130:	3ff80000 	.word	0x3ff80000
 8008134:	08009df0 	.word	0x08009df0
 8008138:	08009d5d 	.word	0x08009d5d
 800813c:	2301      	movs	r3, #1
 800813e:	9309      	str	r3, [sp, #36]	; 0x24
 8008140:	e7d7      	b.n	80080f2 <_dtoa_r+0x2c2>
 8008142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008144:	9301      	str	r3, [sp, #4]
 8008146:	9304      	str	r3, [sp, #16]
 8008148:	e7ba      	b.n	80080c0 <_dtoa_r+0x290>
 800814a:	3101      	adds	r1, #1
 800814c:	0052      	lsls	r2, r2, #1
 800814e:	e7ba      	b.n	80080c6 <_dtoa_r+0x296>
 8008150:	69e3      	ldr	r3, [r4, #28]
 8008152:	9a00      	ldr	r2, [sp, #0]
 8008154:	601a      	str	r2, [r3, #0]
 8008156:	9b04      	ldr	r3, [sp, #16]
 8008158:	2b0e      	cmp	r3, #14
 800815a:	f200 80a8 	bhi.w	80082ae <_dtoa_r+0x47e>
 800815e:	2d00      	cmp	r5, #0
 8008160:	f000 80a5 	beq.w	80082ae <_dtoa_r+0x47e>
 8008164:	f1bb 0f00 	cmp.w	fp, #0
 8008168:	dd38      	ble.n	80081dc <_dtoa_r+0x3ac>
 800816a:	4bc0      	ldr	r3, [pc, #768]	; (800846c <_dtoa_r+0x63c>)
 800816c:	f00b 020f 	and.w	r2, fp, #15
 8008170:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008174:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008178:	e9d3 6700 	ldrd	r6, r7, [r3]
 800817c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008180:	d019      	beq.n	80081b6 <_dtoa_r+0x386>
 8008182:	4bbb      	ldr	r3, [pc, #748]	; (8008470 <_dtoa_r+0x640>)
 8008184:	ec51 0b18 	vmov	r0, r1, d8
 8008188:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800818c:	f7f8 fbce 	bl	800092c <__aeabi_ddiv>
 8008190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008194:	f008 080f 	and.w	r8, r8, #15
 8008198:	2503      	movs	r5, #3
 800819a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008470 <_dtoa_r+0x640>
 800819e:	f1b8 0f00 	cmp.w	r8, #0
 80081a2:	d10a      	bne.n	80081ba <_dtoa_r+0x38a>
 80081a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081a8:	4632      	mov	r2, r6
 80081aa:	463b      	mov	r3, r7
 80081ac:	f7f8 fbbe 	bl	800092c <__aeabi_ddiv>
 80081b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081b4:	e02b      	b.n	800820e <_dtoa_r+0x3de>
 80081b6:	2502      	movs	r5, #2
 80081b8:	e7ef      	b.n	800819a <_dtoa_r+0x36a>
 80081ba:	f018 0f01 	tst.w	r8, #1
 80081be:	d008      	beq.n	80081d2 <_dtoa_r+0x3a2>
 80081c0:	4630      	mov	r0, r6
 80081c2:	4639      	mov	r1, r7
 80081c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80081c8:	f7f8 fa86 	bl	80006d8 <__aeabi_dmul>
 80081cc:	3501      	adds	r5, #1
 80081ce:	4606      	mov	r6, r0
 80081d0:	460f      	mov	r7, r1
 80081d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80081d6:	f109 0908 	add.w	r9, r9, #8
 80081da:	e7e0      	b.n	800819e <_dtoa_r+0x36e>
 80081dc:	f000 809f 	beq.w	800831e <_dtoa_r+0x4ee>
 80081e0:	f1cb 0600 	rsb	r6, fp, #0
 80081e4:	4ba1      	ldr	r3, [pc, #644]	; (800846c <_dtoa_r+0x63c>)
 80081e6:	4fa2      	ldr	r7, [pc, #648]	; (8008470 <_dtoa_r+0x640>)
 80081e8:	f006 020f 	and.w	r2, r6, #15
 80081ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f4:	ec51 0b18 	vmov	r0, r1, d8
 80081f8:	f7f8 fa6e 	bl	80006d8 <__aeabi_dmul>
 80081fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008200:	1136      	asrs	r6, r6, #4
 8008202:	2300      	movs	r3, #0
 8008204:	2502      	movs	r5, #2
 8008206:	2e00      	cmp	r6, #0
 8008208:	d17e      	bne.n	8008308 <_dtoa_r+0x4d8>
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1d0      	bne.n	80081b0 <_dtoa_r+0x380>
 800820e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008210:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 8084 	beq.w	8008322 <_dtoa_r+0x4f2>
 800821a:	4b96      	ldr	r3, [pc, #600]	; (8008474 <_dtoa_r+0x644>)
 800821c:	2200      	movs	r2, #0
 800821e:	4640      	mov	r0, r8
 8008220:	4649      	mov	r1, r9
 8008222:	f7f8 fccb 	bl	8000bbc <__aeabi_dcmplt>
 8008226:	2800      	cmp	r0, #0
 8008228:	d07b      	beq.n	8008322 <_dtoa_r+0x4f2>
 800822a:	9b04      	ldr	r3, [sp, #16]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d078      	beq.n	8008322 <_dtoa_r+0x4f2>
 8008230:	9b01      	ldr	r3, [sp, #4]
 8008232:	2b00      	cmp	r3, #0
 8008234:	dd39      	ble.n	80082aa <_dtoa_r+0x47a>
 8008236:	4b90      	ldr	r3, [pc, #576]	; (8008478 <_dtoa_r+0x648>)
 8008238:	2200      	movs	r2, #0
 800823a:	4640      	mov	r0, r8
 800823c:	4649      	mov	r1, r9
 800823e:	f7f8 fa4b 	bl	80006d8 <__aeabi_dmul>
 8008242:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008246:	9e01      	ldr	r6, [sp, #4]
 8008248:	f10b 37ff 	add.w	r7, fp, #4294967295
 800824c:	3501      	adds	r5, #1
 800824e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008252:	4628      	mov	r0, r5
 8008254:	f7f8 f9d6 	bl	8000604 <__aeabi_i2d>
 8008258:	4642      	mov	r2, r8
 800825a:	464b      	mov	r3, r9
 800825c:	f7f8 fa3c 	bl	80006d8 <__aeabi_dmul>
 8008260:	4b86      	ldr	r3, [pc, #536]	; (800847c <_dtoa_r+0x64c>)
 8008262:	2200      	movs	r2, #0
 8008264:	f7f8 f882 	bl	800036c <__adddf3>
 8008268:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800826c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008270:	9303      	str	r3, [sp, #12]
 8008272:	2e00      	cmp	r6, #0
 8008274:	d158      	bne.n	8008328 <_dtoa_r+0x4f8>
 8008276:	4b82      	ldr	r3, [pc, #520]	; (8008480 <_dtoa_r+0x650>)
 8008278:	2200      	movs	r2, #0
 800827a:	4640      	mov	r0, r8
 800827c:	4649      	mov	r1, r9
 800827e:	f7f8 f873 	bl	8000368 <__aeabi_dsub>
 8008282:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008286:	4680      	mov	r8, r0
 8008288:	4689      	mov	r9, r1
 800828a:	f7f8 fcb5 	bl	8000bf8 <__aeabi_dcmpgt>
 800828e:	2800      	cmp	r0, #0
 8008290:	f040 8296 	bne.w	80087c0 <_dtoa_r+0x990>
 8008294:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008298:	4640      	mov	r0, r8
 800829a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800829e:	4649      	mov	r1, r9
 80082a0:	f7f8 fc8c 	bl	8000bbc <__aeabi_dcmplt>
 80082a4:	2800      	cmp	r0, #0
 80082a6:	f040 8289 	bne.w	80087bc <_dtoa_r+0x98c>
 80082aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80082ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f2c0 814e 	blt.w	8008552 <_dtoa_r+0x722>
 80082b6:	f1bb 0f0e 	cmp.w	fp, #14
 80082ba:	f300 814a 	bgt.w	8008552 <_dtoa_r+0x722>
 80082be:	4b6b      	ldr	r3, [pc, #428]	; (800846c <_dtoa_r+0x63c>)
 80082c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80082c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f280 80dc 	bge.w	8008488 <_dtoa_r+0x658>
 80082d0:	9b04      	ldr	r3, [sp, #16]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f300 80d8 	bgt.w	8008488 <_dtoa_r+0x658>
 80082d8:	f040 826f 	bne.w	80087ba <_dtoa_r+0x98a>
 80082dc:	4b68      	ldr	r3, [pc, #416]	; (8008480 <_dtoa_r+0x650>)
 80082de:	2200      	movs	r2, #0
 80082e0:	4640      	mov	r0, r8
 80082e2:	4649      	mov	r1, r9
 80082e4:	f7f8 f9f8 	bl	80006d8 <__aeabi_dmul>
 80082e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082ec:	f7f8 fc7a 	bl	8000be4 <__aeabi_dcmpge>
 80082f0:	9e04      	ldr	r6, [sp, #16]
 80082f2:	4637      	mov	r7, r6
 80082f4:	2800      	cmp	r0, #0
 80082f6:	f040 8245 	bne.w	8008784 <_dtoa_r+0x954>
 80082fa:	9d00      	ldr	r5, [sp, #0]
 80082fc:	2331      	movs	r3, #49	; 0x31
 80082fe:	f805 3b01 	strb.w	r3, [r5], #1
 8008302:	f10b 0b01 	add.w	fp, fp, #1
 8008306:	e241      	b.n	800878c <_dtoa_r+0x95c>
 8008308:	07f2      	lsls	r2, r6, #31
 800830a:	d505      	bpl.n	8008318 <_dtoa_r+0x4e8>
 800830c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008310:	f7f8 f9e2 	bl	80006d8 <__aeabi_dmul>
 8008314:	3501      	adds	r5, #1
 8008316:	2301      	movs	r3, #1
 8008318:	1076      	asrs	r6, r6, #1
 800831a:	3708      	adds	r7, #8
 800831c:	e773      	b.n	8008206 <_dtoa_r+0x3d6>
 800831e:	2502      	movs	r5, #2
 8008320:	e775      	b.n	800820e <_dtoa_r+0x3de>
 8008322:	9e04      	ldr	r6, [sp, #16]
 8008324:	465f      	mov	r7, fp
 8008326:	e792      	b.n	800824e <_dtoa_r+0x41e>
 8008328:	9900      	ldr	r1, [sp, #0]
 800832a:	4b50      	ldr	r3, [pc, #320]	; (800846c <_dtoa_r+0x63c>)
 800832c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008330:	4431      	add	r1, r6
 8008332:	9102      	str	r1, [sp, #8]
 8008334:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008336:	eeb0 9a47 	vmov.f32	s18, s14
 800833a:	eef0 9a67 	vmov.f32	s19, s15
 800833e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008342:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008346:	2900      	cmp	r1, #0
 8008348:	d044      	beq.n	80083d4 <_dtoa_r+0x5a4>
 800834a:	494e      	ldr	r1, [pc, #312]	; (8008484 <_dtoa_r+0x654>)
 800834c:	2000      	movs	r0, #0
 800834e:	f7f8 faed 	bl	800092c <__aeabi_ddiv>
 8008352:	ec53 2b19 	vmov	r2, r3, d9
 8008356:	f7f8 f807 	bl	8000368 <__aeabi_dsub>
 800835a:	9d00      	ldr	r5, [sp, #0]
 800835c:	ec41 0b19 	vmov	d9, r0, r1
 8008360:	4649      	mov	r1, r9
 8008362:	4640      	mov	r0, r8
 8008364:	f7f8 fc68 	bl	8000c38 <__aeabi_d2iz>
 8008368:	4606      	mov	r6, r0
 800836a:	f7f8 f94b 	bl	8000604 <__aeabi_i2d>
 800836e:	4602      	mov	r2, r0
 8008370:	460b      	mov	r3, r1
 8008372:	4640      	mov	r0, r8
 8008374:	4649      	mov	r1, r9
 8008376:	f7f7 fff7 	bl	8000368 <__aeabi_dsub>
 800837a:	3630      	adds	r6, #48	; 0x30
 800837c:	f805 6b01 	strb.w	r6, [r5], #1
 8008380:	ec53 2b19 	vmov	r2, r3, d9
 8008384:	4680      	mov	r8, r0
 8008386:	4689      	mov	r9, r1
 8008388:	f7f8 fc18 	bl	8000bbc <__aeabi_dcmplt>
 800838c:	2800      	cmp	r0, #0
 800838e:	d164      	bne.n	800845a <_dtoa_r+0x62a>
 8008390:	4642      	mov	r2, r8
 8008392:	464b      	mov	r3, r9
 8008394:	4937      	ldr	r1, [pc, #220]	; (8008474 <_dtoa_r+0x644>)
 8008396:	2000      	movs	r0, #0
 8008398:	f7f7 ffe6 	bl	8000368 <__aeabi_dsub>
 800839c:	ec53 2b19 	vmov	r2, r3, d9
 80083a0:	f7f8 fc0c 	bl	8000bbc <__aeabi_dcmplt>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	f040 80b6 	bne.w	8008516 <_dtoa_r+0x6e6>
 80083aa:	9b02      	ldr	r3, [sp, #8]
 80083ac:	429d      	cmp	r5, r3
 80083ae:	f43f af7c 	beq.w	80082aa <_dtoa_r+0x47a>
 80083b2:	4b31      	ldr	r3, [pc, #196]	; (8008478 <_dtoa_r+0x648>)
 80083b4:	ec51 0b19 	vmov	r0, r1, d9
 80083b8:	2200      	movs	r2, #0
 80083ba:	f7f8 f98d 	bl	80006d8 <__aeabi_dmul>
 80083be:	4b2e      	ldr	r3, [pc, #184]	; (8008478 <_dtoa_r+0x648>)
 80083c0:	ec41 0b19 	vmov	d9, r0, r1
 80083c4:	2200      	movs	r2, #0
 80083c6:	4640      	mov	r0, r8
 80083c8:	4649      	mov	r1, r9
 80083ca:	f7f8 f985 	bl	80006d8 <__aeabi_dmul>
 80083ce:	4680      	mov	r8, r0
 80083d0:	4689      	mov	r9, r1
 80083d2:	e7c5      	b.n	8008360 <_dtoa_r+0x530>
 80083d4:	ec51 0b17 	vmov	r0, r1, d7
 80083d8:	f7f8 f97e 	bl	80006d8 <__aeabi_dmul>
 80083dc:	9b02      	ldr	r3, [sp, #8]
 80083de:	9d00      	ldr	r5, [sp, #0]
 80083e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80083e2:	ec41 0b19 	vmov	d9, r0, r1
 80083e6:	4649      	mov	r1, r9
 80083e8:	4640      	mov	r0, r8
 80083ea:	f7f8 fc25 	bl	8000c38 <__aeabi_d2iz>
 80083ee:	4606      	mov	r6, r0
 80083f0:	f7f8 f908 	bl	8000604 <__aeabi_i2d>
 80083f4:	3630      	adds	r6, #48	; 0x30
 80083f6:	4602      	mov	r2, r0
 80083f8:	460b      	mov	r3, r1
 80083fa:	4640      	mov	r0, r8
 80083fc:	4649      	mov	r1, r9
 80083fe:	f7f7 ffb3 	bl	8000368 <__aeabi_dsub>
 8008402:	f805 6b01 	strb.w	r6, [r5], #1
 8008406:	9b02      	ldr	r3, [sp, #8]
 8008408:	429d      	cmp	r5, r3
 800840a:	4680      	mov	r8, r0
 800840c:	4689      	mov	r9, r1
 800840e:	f04f 0200 	mov.w	r2, #0
 8008412:	d124      	bne.n	800845e <_dtoa_r+0x62e>
 8008414:	4b1b      	ldr	r3, [pc, #108]	; (8008484 <_dtoa_r+0x654>)
 8008416:	ec51 0b19 	vmov	r0, r1, d9
 800841a:	f7f7 ffa7 	bl	800036c <__adddf3>
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	4640      	mov	r0, r8
 8008424:	4649      	mov	r1, r9
 8008426:	f7f8 fbe7 	bl	8000bf8 <__aeabi_dcmpgt>
 800842a:	2800      	cmp	r0, #0
 800842c:	d173      	bne.n	8008516 <_dtoa_r+0x6e6>
 800842e:	ec53 2b19 	vmov	r2, r3, d9
 8008432:	4914      	ldr	r1, [pc, #80]	; (8008484 <_dtoa_r+0x654>)
 8008434:	2000      	movs	r0, #0
 8008436:	f7f7 ff97 	bl	8000368 <__aeabi_dsub>
 800843a:	4602      	mov	r2, r0
 800843c:	460b      	mov	r3, r1
 800843e:	4640      	mov	r0, r8
 8008440:	4649      	mov	r1, r9
 8008442:	f7f8 fbbb 	bl	8000bbc <__aeabi_dcmplt>
 8008446:	2800      	cmp	r0, #0
 8008448:	f43f af2f 	beq.w	80082aa <_dtoa_r+0x47a>
 800844c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800844e:	1e6b      	subs	r3, r5, #1
 8008450:	930f      	str	r3, [sp, #60]	; 0x3c
 8008452:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008456:	2b30      	cmp	r3, #48	; 0x30
 8008458:	d0f8      	beq.n	800844c <_dtoa_r+0x61c>
 800845a:	46bb      	mov	fp, r7
 800845c:	e04a      	b.n	80084f4 <_dtoa_r+0x6c4>
 800845e:	4b06      	ldr	r3, [pc, #24]	; (8008478 <_dtoa_r+0x648>)
 8008460:	f7f8 f93a 	bl	80006d8 <__aeabi_dmul>
 8008464:	4680      	mov	r8, r0
 8008466:	4689      	mov	r9, r1
 8008468:	e7bd      	b.n	80083e6 <_dtoa_r+0x5b6>
 800846a:	bf00      	nop
 800846c:	08009df0 	.word	0x08009df0
 8008470:	08009dc8 	.word	0x08009dc8
 8008474:	3ff00000 	.word	0x3ff00000
 8008478:	40240000 	.word	0x40240000
 800847c:	401c0000 	.word	0x401c0000
 8008480:	40140000 	.word	0x40140000
 8008484:	3fe00000 	.word	0x3fe00000
 8008488:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800848c:	9d00      	ldr	r5, [sp, #0]
 800848e:	4642      	mov	r2, r8
 8008490:	464b      	mov	r3, r9
 8008492:	4630      	mov	r0, r6
 8008494:	4639      	mov	r1, r7
 8008496:	f7f8 fa49 	bl	800092c <__aeabi_ddiv>
 800849a:	f7f8 fbcd 	bl	8000c38 <__aeabi_d2iz>
 800849e:	9001      	str	r0, [sp, #4]
 80084a0:	f7f8 f8b0 	bl	8000604 <__aeabi_i2d>
 80084a4:	4642      	mov	r2, r8
 80084a6:	464b      	mov	r3, r9
 80084a8:	f7f8 f916 	bl	80006d8 <__aeabi_dmul>
 80084ac:	4602      	mov	r2, r0
 80084ae:	460b      	mov	r3, r1
 80084b0:	4630      	mov	r0, r6
 80084b2:	4639      	mov	r1, r7
 80084b4:	f7f7 ff58 	bl	8000368 <__aeabi_dsub>
 80084b8:	9e01      	ldr	r6, [sp, #4]
 80084ba:	9f04      	ldr	r7, [sp, #16]
 80084bc:	3630      	adds	r6, #48	; 0x30
 80084be:	f805 6b01 	strb.w	r6, [r5], #1
 80084c2:	9e00      	ldr	r6, [sp, #0]
 80084c4:	1bae      	subs	r6, r5, r6
 80084c6:	42b7      	cmp	r7, r6
 80084c8:	4602      	mov	r2, r0
 80084ca:	460b      	mov	r3, r1
 80084cc:	d134      	bne.n	8008538 <_dtoa_r+0x708>
 80084ce:	f7f7 ff4d 	bl	800036c <__adddf3>
 80084d2:	4642      	mov	r2, r8
 80084d4:	464b      	mov	r3, r9
 80084d6:	4606      	mov	r6, r0
 80084d8:	460f      	mov	r7, r1
 80084da:	f7f8 fb8d 	bl	8000bf8 <__aeabi_dcmpgt>
 80084de:	b9c8      	cbnz	r0, 8008514 <_dtoa_r+0x6e4>
 80084e0:	4642      	mov	r2, r8
 80084e2:	464b      	mov	r3, r9
 80084e4:	4630      	mov	r0, r6
 80084e6:	4639      	mov	r1, r7
 80084e8:	f7f8 fb5e 	bl	8000ba8 <__aeabi_dcmpeq>
 80084ec:	b110      	cbz	r0, 80084f4 <_dtoa_r+0x6c4>
 80084ee:	9b01      	ldr	r3, [sp, #4]
 80084f0:	07db      	lsls	r3, r3, #31
 80084f2:	d40f      	bmi.n	8008514 <_dtoa_r+0x6e4>
 80084f4:	4651      	mov	r1, sl
 80084f6:	4620      	mov	r0, r4
 80084f8:	f000 fbde 	bl	8008cb8 <_Bfree>
 80084fc:	2300      	movs	r3, #0
 80084fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008500:	702b      	strb	r3, [r5, #0]
 8008502:	f10b 0301 	add.w	r3, fp, #1
 8008506:	6013      	str	r3, [r2, #0]
 8008508:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800850a:	2b00      	cmp	r3, #0
 800850c:	f43f ace2 	beq.w	8007ed4 <_dtoa_r+0xa4>
 8008510:	601d      	str	r5, [r3, #0]
 8008512:	e4df      	b.n	8007ed4 <_dtoa_r+0xa4>
 8008514:	465f      	mov	r7, fp
 8008516:	462b      	mov	r3, r5
 8008518:	461d      	mov	r5, r3
 800851a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800851e:	2a39      	cmp	r2, #57	; 0x39
 8008520:	d106      	bne.n	8008530 <_dtoa_r+0x700>
 8008522:	9a00      	ldr	r2, [sp, #0]
 8008524:	429a      	cmp	r2, r3
 8008526:	d1f7      	bne.n	8008518 <_dtoa_r+0x6e8>
 8008528:	9900      	ldr	r1, [sp, #0]
 800852a:	2230      	movs	r2, #48	; 0x30
 800852c:	3701      	adds	r7, #1
 800852e:	700a      	strb	r2, [r1, #0]
 8008530:	781a      	ldrb	r2, [r3, #0]
 8008532:	3201      	adds	r2, #1
 8008534:	701a      	strb	r2, [r3, #0]
 8008536:	e790      	b.n	800845a <_dtoa_r+0x62a>
 8008538:	4ba3      	ldr	r3, [pc, #652]	; (80087c8 <_dtoa_r+0x998>)
 800853a:	2200      	movs	r2, #0
 800853c:	f7f8 f8cc 	bl	80006d8 <__aeabi_dmul>
 8008540:	2200      	movs	r2, #0
 8008542:	2300      	movs	r3, #0
 8008544:	4606      	mov	r6, r0
 8008546:	460f      	mov	r7, r1
 8008548:	f7f8 fb2e 	bl	8000ba8 <__aeabi_dcmpeq>
 800854c:	2800      	cmp	r0, #0
 800854e:	d09e      	beq.n	800848e <_dtoa_r+0x65e>
 8008550:	e7d0      	b.n	80084f4 <_dtoa_r+0x6c4>
 8008552:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008554:	2a00      	cmp	r2, #0
 8008556:	f000 80ca 	beq.w	80086ee <_dtoa_r+0x8be>
 800855a:	9a07      	ldr	r2, [sp, #28]
 800855c:	2a01      	cmp	r2, #1
 800855e:	f300 80ad 	bgt.w	80086bc <_dtoa_r+0x88c>
 8008562:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008564:	2a00      	cmp	r2, #0
 8008566:	f000 80a5 	beq.w	80086b4 <_dtoa_r+0x884>
 800856a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800856e:	9e08      	ldr	r6, [sp, #32]
 8008570:	9d05      	ldr	r5, [sp, #20]
 8008572:	9a05      	ldr	r2, [sp, #20]
 8008574:	441a      	add	r2, r3
 8008576:	9205      	str	r2, [sp, #20]
 8008578:	9a06      	ldr	r2, [sp, #24]
 800857a:	2101      	movs	r1, #1
 800857c:	441a      	add	r2, r3
 800857e:	4620      	mov	r0, r4
 8008580:	9206      	str	r2, [sp, #24]
 8008582:	f000 fc4f 	bl	8008e24 <__i2b>
 8008586:	4607      	mov	r7, r0
 8008588:	b165      	cbz	r5, 80085a4 <_dtoa_r+0x774>
 800858a:	9b06      	ldr	r3, [sp, #24]
 800858c:	2b00      	cmp	r3, #0
 800858e:	dd09      	ble.n	80085a4 <_dtoa_r+0x774>
 8008590:	42ab      	cmp	r3, r5
 8008592:	9a05      	ldr	r2, [sp, #20]
 8008594:	bfa8      	it	ge
 8008596:	462b      	movge	r3, r5
 8008598:	1ad2      	subs	r2, r2, r3
 800859a:	9205      	str	r2, [sp, #20]
 800859c:	9a06      	ldr	r2, [sp, #24]
 800859e:	1aed      	subs	r5, r5, r3
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	9306      	str	r3, [sp, #24]
 80085a4:	9b08      	ldr	r3, [sp, #32]
 80085a6:	b1f3      	cbz	r3, 80085e6 <_dtoa_r+0x7b6>
 80085a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f000 80a3 	beq.w	80086f6 <_dtoa_r+0x8c6>
 80085b0:	2e00      	cmp	r6, #0
 80085b2:	dd10      	ble.n	80085d6 <_dtoa_r+0x7a6>
 80085b4:	4639      	mov	r1, r7
 80085b6:	4632      	mov	r2, r6
 80085b8:	4620      	mov	r0, r4
 80085ba:	f000 fcf3 	bl	8008fa4 <__pow5mult>
 80085be:	4652      	mov	r2, sl
 80085c0:	4601      	mov	r1, r0
 80085c2:	4607      	mov	r7, r0
 80085c4:	4620      	mov	r0, r4
 80085c6:	f000 fc43 	bl	8008e50 <__multiply>
 80085ca:	4651      	mov	r1, sl
 80085cc:	4680      	mov	r8, r0
 80085ce:	4620      	mov	r0, r4
 80085d0:	f000 fb72 	bl	8008cb8 <_Bfree>
 80085d4:	46c2      	mov	sl, r8
 80085d6:	9b08      	ldr	r3, [sp, #32]
 80085d8:	1b9a      	subs	r2, r3, r6
 80085da:	d004      	beq.n	80085e6 <_dtoa_r+0x7b6>
 80085dc:	4651      	mov	r1, sl
 80085de:	4620      	mov	r0, r4
 80085e0:	f000 fce0 	bl	8008fa4 <__pow5mult>
 80085e4:	4682      	mov	sl, r0
 80085e6:	2101      	movs	r1, #1
 80085e8:	4620      	mov	r0, r4
 80085ea:	f000 fc1b 	bl	8008e24 <__i2b>
 80085ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	4606      	mov	r6, r0
 80085f4:	f340 8081 	ble.w	80086fa <_dtoa_r+0x8ca>
 80085f8:	461a      	mov	r2, r3
 80085fa:	4601      	mov	r1, r0
 80085fc:	4620      	mov	r0, r4
 80085fe:	f000 fcd1 	bl	8008fa4 <__pow5mult>
 8008602:	9b07      	ldr	r3, [sp, #28]
 8008604:	2b01      	cmp	r3, #1
 8008606:	4606      	mov	r6, r0
 8008608:	dd7a      	ble.n	8008700 <_dtoa_r+0x8d0>
 800860a:	f04f 0800 	mov.w	r8, #0
 800860e:	6933      	ldr	r3, [r6, #16]
 8008610:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008614:	6918      	ldr	r0, [r3, #16]
 8008616:	f000 fbb7 	bl	8008d88 <__hi0bits>
 800861a:	f1c0 0020 	rsb	r0, r0, #32
 800861e:	9b06      	ldr	r3, [sp, #24]
 8008620:	4418      	add	r0, r3
 8008622:	f010 001f 	ands.w	r0, r0, #31
 8008626:	f000 8094 	beq.w	8008752 <_dtoa_r+0x922>
 800862a:	f1c0 0320 	rsb	r3, r0, #32
 800862e:	2b04      	cmp	r3, #4
 8008630:	f340 8085 	ble.w	800873e <_dtoa_r+0x90e>
 8008634:	9b05      	ldr	r3, [sp, #20]
 8008636:	f1c0 001c 	rsb	r0, r0, #28
 800863a:	4403      	add	r3, r0
 800863c:	9305      	str	r3, [sp, #20]
 800863e:	9b06      	ldr	r3, [sp, #24]
 8008640:	4403      	add	r3, r0
 8008642:	4405      	add	r5, r0
 8008644:	9306      	str	r3, [sp, #24]
 8008646:	9b05      	ldr	r3, [sp, #20]
 8008648:	2b00      	cmp	r3, #0
 800864a:	dd05      	ble.n	8008658 <_dtoa_r+0x828>
 800864c:	4651      	mov	r1, sl
 800864e:	461a      	mov	r2, r3
 8008650:	4620      	mov	r0, r4
 8008652:	f000 fd01 	bl	8009058 <__lshift>
 8008656:	4682      	mov	sl, r0
 8008658:	9b06      	ldr	r3, [sp, #24]
 800865a:	2b00      	cmp	r3, #0
 800865c:	dd05      	ble.n	800866a <_dtoa_r+0x83a>
 800865e:	4631      	mov	r1, r6
 8008660:	461a      	mov	r2, r3
 8008662:	4620      	mov	r0, r4
 8008664:	f000 fcf8 	bl	8009058 <__lshift>
 8008668:	4606      	mov	r6, r0
 800866a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800866c:	2b00      	cmp	r3, #0
 800866e:	d072      	beq.n	8008756 <_dtoa_r+0x926>
 8008670:	4631      	mov	r1, r6
 8008672:	4650      	mov	r0, sl
 8008674:	f000 fd5c 	bl	8009130 <__mcmp>
 8008678:	2800      	cmp	r0, #0
 800867a:	da6c      	bge.n	8008756 <_dtoa_r+0x926>
 800867c:	2300      	movs	r3, #0
 800867e:	4651      	mov	r1, sl
 8008680:	220a      	movs	r2, #10
 8008682:	4620      	mov	r0, r4
 8008684:	f000 fb3a 	bl	8008cfc <__multadd>
 8008688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800868a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800868e:	4682      	mov	sl, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	f000 81b0 	beq.w	80089f6 <_dtoa_r+0xbc6>
 8008696:	2300      	movs	r3, #0
 8008698:	4639      	mov	r1, r7
 800869a:	220a      	movs	r2, #10
 800869c:	4620      	mov	r0, r4
 800869e:	f000 fb2d 	bl	8008cfc <__multadd>
 80086a2:	9b01      	ldr	r3, [sp, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	4607      	mov	r7, r0
 80086a8:	f300 8096 	bgt.w	80087d8 <_dtoa_r+0x9a8>
 80086ac:	9b07      	ldr	r3, [sp, #28]
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	dc59      	bgt.n	8008766 <_dtoa_r+0x936>
 80086b2:	e091      	b.n	80087d8 <_dtoa_r+0x9a8>
 80086b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80086ba:	e758      	b.n	800856e <_dtoa_r+0x73e>
 80086bc:	9b04      	ldr	r3, [sp, #16]
 80086be:	1e5e      	subs	r6, r3, #1
 80086c0:	9b08      	ldr	r3, [sp, #32]
 80086c2:	42b3      	cmp	r3, r6
 80086c4:	bfbf      	itttt	lt
 80086c6:	9b08      	ldrlt	r3, [sp, #32]
 80086c8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80086ca:	9608      	strlt	r6, [sp, #32]
 80086cc:	1af3      	sublt	r3, r6, r3
 80086ce:	bfb4      	ite	lt
 80086d0:	18d2      	addlt	r2, r2, r3
 80086d2:	1b9e      	subge	r6, r3, r6
 80086d4:	9b04      	ldr	r3, [sp, #16]
 80086d6:	bfbc      	itt	lt
 80086d8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80086da:	2600      	movlt	r6, #0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	bfb7      	itett	lt
 80086e0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80086e4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80086e8:	1a9d      	sublt	r5, r3, r2
 80086ea:	2300      	movlt	r3, #0
 80086ec:	e741      	b.n	8008572 <_dtoa_r+0x742>
 80086ee:	9e08      	ldr	r6, [sp, #32]
 80086f0:	9d05      	ldr	r5, [sp, #20]
 80086f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80086f4:	e748      	b.n	8008588 <_dtoa_r+0x758>
 80086f6:	9a08      	ldr	r2, [sp, #32]
 80086f8:	e770      	b.n	80085dc <_dtoa_r+0x7ac>
 80086fa:	9b07      	ldr	r3, [sp, #28]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	dc19      	bgt.n	8008734 <_dtoa_r+0x904>
 8008700:	9b02      	ldr	r3, [sp, #8]
 8008702:	b9bb      	cbnz	r3, 8008734 <_dtoa_r+0x904>
 8008704:	9b03      	ldr	r3, [sp, #12]
 8008706:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800870a:	b99b      	cbnz	r3, 8008734 <_dtoa_r+0x904>
 800870c:	9b03      	ldr	r3, [sp, #12]
 800870e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008712:	0d1b      	lsrs	r3, r3, #20
 8008714:	051b      	lsls	r3, r3, #20
 8008716:	b183      	cbz	r3, 800873a <_dtoa_r+0x90a>
 8008718:	9b05      	ldr	r3, [sp, #20]
 800871a:	3301      	adds	r3, #1
 800871c:	9305      	str	r3, [sp, #20]
 800871e:	9b06      	ldr	r3, [sp, #24]
 8008720:	3301      	adds	r3, #1
 8008722:	9306      	str	r3, [sp, #24]
 8008724:	f04f 0801 	mov.w	r8, #1
 8008728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800872a:	2b00      	cmp	r3, #0
 800872c:	f47f af6f 	bne.w	800860e <_dtoa_r+0x7de>
 8008730:	2001      	movs	r0, #1
 8008732:	e774      	b.n	800861e <_dtoa_r+0x7ee>
 8008734:	f04f 0800 	mov.w	r8, #0
 8008738:	e7f6      	b.n	8008728 <_dtoa_r+0x8f8>
 800873a:	4698      	mov	r8, r3
 800873c:	e7f4      	b.n	8008728 <_dtoa_r+0x8f8>
 800873e:	d082      	beq.n	8008646 <_dtoa_r+0x816>
 8008740:	9a05      	ldr	r2, [sp, #20]
 8008742:	331c      	adds	r3, #28
 8008744:	441a      	add	r2, r3
 8008746:	9205      	str	r2, [sp, #20]
 8008748:	9a06      	ldr	r2, [sp, #24]
 800874a:	441a      	add	r2, r3
 800874c:	441d      	add	r5, r3
 800874e:	9206      	str	r2, [sp, #24]
 8008750:	e779      	b.n	8008646 <_dtoa_r+0x816>
 8008752:	4603      	mov	r3, r0
 8008754:	e7f4      	b.n	8008740 <_dtoa_r+0x910>
 8008756:	9b04      	ldr	r3, [sp, #16]
 8008758:	2b00      	cmp	r3, #0
 800875a:	dc37      	bgt.n	80087cc <_dtoa_r+0x99c>
 800875c:	9b07      	ldr	r3, [sp, #28]
 800875e:	2b02      	cmp	r3, #2
 8008760:	dd34      	ble.n	80087cc <_dtoa_r+0x99c>
 8008762:	9b04      	ldr	r3, [sp, #16]
 8008764:	9301      	str	r3, [sp, #4]
 8008766:	9b01      	ldr	r3, [sp, #4]
 8008768:	b963      	cbnz	r3, 8008784 <_dtoa_r+0x954>
 800876a:	4631      	mov	r1, r6
 800876c:	2205      	movs	r2, #5
 800876e:	4620      	mov	r0, r4
 8008770:	f000 fac4 	bl	8008cfc <__multadd>
 8008774:	4601      	mov	r1, r0
 8008776:	4606      	mov	r6, r0
 8008778:	4650      	mov	r0, sl
 800877a:	f000 fcd9 	bl	8009130 <__mcmp>
 800877e:	2800      	cmp	r0, #0
 8008780:	f73f adbb 	bgt.w	80082fa <_dtoa_r+0x4ca>
 8008784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008786:	9d00      	ldr	r5, [sp, #0]
 8008788:	ea6f 0b03 	mvn.w	fp, r3
 800878c:	f04f 0800 	mov.w	r8, #0
 8008790:	4631      	mov	r1, r6
 8008792:	4620      	mov	r0, r4
 8008794:	f000 fa90 	bl	8008cb8 <_Bfree>
 8008798:	2f00      	cmp	r7, #0
 800879a:	f43f aeab 	beq.w	80084f4 <_dtoa_r+0x6c4>
 800879e:	f1b8 0f00 	cmp.w	r8, #0
 80087a2:	d005      	beq.n	80087b0 <_dtoa_r+0x980>
 80087a4:	45b8      	cmp	r8, r7
 80087a6:	d003      	beq.n	80087b0 <_dtoa_r+0x980>
 80087a8:	4641      	mov	r1, r8
 80087aa:	4620      	mov	r0, r4
 80087ac:	f000 fa84 	bl	8008cb8 <_Bfree>
 80087b0:	4639      	mov	r1, r7
 80087b2:	4620      	mov	r0, r4
 80087b4:	f000 fa80 	bl	8008cb8 <_Bfree>
 80087b8:	e69c      	b.n	80084f4 <_dtoa_r+0x6c4>
 80087ba:	2600      	movs	r6, #0
 80087bc:	4637      	mov	r7, r6
 80087be:	e7e1      	b.n	8008784 <_dtoa_r+0x954>
 80087c0:	46bb      	mov	fp, r7
 80087c2:	4637      	mov	r7, r6
 80087c4:	e599      	b.n	80082fa <_dtoa_r+0x4ca>
 80087c6:	bf00      	nop
 80087c8:	40240000 	.word	0x40240000
 80087cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f000 80c8 	beq.w	8008964 <_dtoa_r+0xb34>
 80087d4:	9b04      	ldr	r3, [sp, #16]
 80087d6:	9301      	str	r3, [sp, #4]
 80087d8:	2d00      	cmp	r5, #0
 80087da:	dd05      	ble.n	80087e8 <_dtoa_r+0x9b8>
 80087dc:	4639      	mov	r1, r7
 80087de:	462a      	mov	r2, r5
 80087e0:	4620      	mov	r0, r4
 80087e2:	f000 fc39 	bl	8009058 <__lshift>
 80087e6:	4607      	mov	r7, r0
 80087e8:	f1b8 0f00 	cmp.w	r8, #0
 80087ec:	d05b      	beq.n	80088a6 <_dtoa_r+0xa76>
 80087ee:	6879      	ldr	r1, [r7, #4]
 80087f0:	4620      	mov	r0, r4
 80087f2:	f000 fa21 	bl	8008c38 <_Balloc>
 80087f6:	4605      	mov	r5, r0
 80087f8:	b928      	cbnz	r0, 8008806 <_dtoa_r+0x9d6>
 80087fa:	4b83      	ldr	r3, [pc, #524]	; (8008a08 <_dtoa_r+0xbd8>)
 80087fc:	4602      	mov	r2, r0
 80087fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008802:	f7ff bb2e 	b.w	8007e62 <_dtoa_r+0x32>
 8008806:	693a      	ldr	r2, [r7, #16]
 8008808:	3202      	adds	r2, #2
 800880a:	0092      	lsls	r2, r2, #2
 800880c:	f107 010c 	add.w	r1, r7, #12
 8008810:	300c      	adds	r0, #12
 8008812:	f7ff fa74 	bl	8007cfe <memcpy>
 8008816:	2201      	movs	r2, #1
 8008818:	4629      	mov	r1, r5
 800881a:	4620      	mov	r0, r4
 800881c:	f000 fc1c 	bl	8009058 <__lshift>
 8008820:	9b00      	ldr	r3, [sp, #0]
 8008822:	3301      	adds	r3, #1
 8008824:	9304      	str	r3, [sp, #16]
 8008826:	e9dd 2300 	ldrd	r2, r3, [sp]
 800882a:	4413      	add	r3, r2
 800882c:	9308      	str	r3, [sp, #32]
 800882e:	9b02      	ldr	r3, [sp, #8]
 8008830:	f003 0301 	and.w	r3, r3, #1
 8008834:	46b8      	mov	r8, r7
 8008836:	9306      	str	r3, [sp, #24]
 8008838:	4607      	mov	r7, r0
 800883a:	9b04      	ldr	r3, [sp, #16]
 800883c:	4631      	mov	r1, r6
 800883e:	3b01      	subs	r3, #1
 8008840:	4650      	mov	r0, sl
 8008842:	9301      	str	r3, [sp, #4]
 8008844:	f7ff fa69 	bl	8007d1a <quorem>
 8008848:	4641      	mov	r1, r8
 800884a:	9002      	str	r0, [sp, #8]
 800884c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008850:	4650      	mov	r0, sl
 8008852:	f000 fc6d 	bl	8009130 <__mcmp>
 8008856:	463a      	mov	r2, r7
 8008858:	9005      	str	r0, [sp, #20]
 800885a:	4631      	mov	r1, r6
 800885c:	4620      	mov	r0, r4
 800885e:	f000 fc83 	bl	8009168 <__mdiff>
 8008862:	68c2      	ldr	r2, [r0, #12]
 8008864:	4605      	mov	r5, r0
 8008866:	bb02      	cbnz	r2, 80088aa <_dtoa_r+0xa7a>
 8008868:	4601      	mov	r1, r0
 800886a:	4650      	mov	r0, sl
 800886c:	f000 fc60 	bl	8009130 <__mcmp>
 8008870:	4602      	mov	r2, r0
 8008872:	4629      	mov	r1, r5
 8008874:	4620      	mov	r0, r4
 8008876:	9209      	str	r2, [sp, #36]	; 0x24
 8008878:	f000 fa1e 	bl	8008cb8 <_Bfree>
 800887c:	9b07      	ldr	r3, [sp, #28]
 800887e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008880:	9d04      	ldr	r5, [sp, #16]
 8008882:	ea43 0102 	orr.w	r1, r3, r2
 8008886:	9b06      	ldr	r3, [sp, #24]
 8008888:	4319      	orrs	r1, r3
 800888a:	d110      	bne.n	80088ae <_dtoa_r+0xa7e>
 800888c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008890:	d029      	beq.n	80088e6 <_dtoa_r+0xab6>
 8008892:	9b05      	ldr	r3, [sp, #20]
 8008894:	2b00      	cmp	r3, #0
 8008896:	dd02      	ble.n	800889e <_dtoa_r+0xa6e>
 8008898:	9b02      	ldr	r3, [sp, #8]
 800889a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800889e:	9b01      	ldr	r3, [sp, #4]
 80088a0:	f883 9000 	strb.w	r9, [r3]
 80088a4:	e774      	b.n	8008790 <_dtoa_r+0x960>
 80088a6:	4638      	mov	r0, r7
 80088a8:	e7ba      	b.n	8008820 <_dtoa_r+0x9f0>
 80088aa:	2201      	movs	r2, #1
 80088ac:	e7e1      	b.n	8008872 <_dtoa_r+0xa42>
 80088ae:	9b05      	ldr	r3, [sp, #20]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	db04      	blt.n	80088be <_dtoa_r+0xa8e>
 80088b4:	9907      	ldr	r1, [sp, #28]
 80088b6:	430b      	orrs	r3, r1
 80088b8:	9906      	ldr	r1, [sp, #24]
 80088ba:	430b      	orrs	r3, r1
 80088bc:	d120      	bne.n	8008900 <_dtoa_r+0xad0>
 80088be:	2a00      	cmp	r2, #0
 80088c0:	dded      	ble.n	800889e <_dtoa_r+0xa6e>
 80088c2:	4651      	mov	r1, sl
 80088c4:	2201      	movs	r2, #1
 80088c6:	4620      	mov	r0, r4
 80088c8:	f000 fbc6 	bl	8009058 <__lshift>
 80088cc:	4631      	mov	r1, r6
 80088ce:	4682      	mov	sl, r0
 80088d0:	f000 fc2e 	bl	8009130 <__mcmp>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	dc03      	bgt.n	80088e0 <_dtoa_r+0xab0>
 80088d8:	d1e1      	bne.n	800889e <_dtoa_r+0xa6e>
 80088da:	f019 0f01 	tst.w	r9, #1
 80088de:	d0de      	beq.n	800889e <_dtoa_r+0xa6e>
 80088e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80088e4:	d1d8      	bne.n	8008898 <_dtoa_r+0xa68>
 80088e6:	9a01      	ldr	r2, [sp, #4]
 80088e8:	2339      	movs	r3, #57	; 0x39
 80088ea:	7013      	strb	r3, [r2, #0]
 80088ec:	462b      	mov	r3, r5
 80088ee:	461d      	mov	r5, r3
 80088f0:	3b01      	subs	r3, #1
 80088f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80088f6:	2a39      	cmp	r2, #57	; 0x39
 80088f8:	d06c      	beq.n	80089d4 <_dtoa_r+0xba4>
 80088fa:	3201      	adds	r2, #1
 80088fc:	701a      	strb	r2, [r3, #0]
 80088fe:	e747      	b.n	8008790 <_dtoa_r+0x960>
 8008900:	2a00      	cmp	r2, #0
 8008902:	dd07      	ble.n	8008914 <_dtoa_r+0xae4>
 8008904:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008908:	d0ed      	beq.n	80088e6 <_dtoa_r+0xab6>
 800890a:	9a01      	ldr	r2, [sp, #4]
 800890c:	f109 0301 	add.w	r3, r9, #1
 8008910:	7013      	strb	r3, [r2, #0]
 8008912:	e73d      	b.n	8008790 <_dtoa_r+0x960>
 8008914:	9b04      	ldr	r3, [sp, #16]
 8008916:	9a08      	ldr	r2, [sp, #32]
 8008918:	f803 9c01 	strb.w	r9, [r3, #-1]
 800891c:	4293      	cmp	r3, r2
 800891e:	d043      	beq.n	80089a8 <_dtoa_r+0xb78>
 8008920:	4651      	mov	r1, sl
 8008922:	2300      	movs	r3, #0
 8008924:	220a      	movs	r2, #10
 8008926:	4620      	mov	r0, r4
 8008928:	f000 f9e8 	bl	8008cfc <__multadd>
 800892c:	45b8      	cmp	r8, r7
 800892e:	4682      	mov	sl, r0
 8008930:	f04f 0300 	mov.w	r3, #0
 8008934:	f04f 020a 	mov.w	r2, #10
 8008938:	4641      	mov	r1, r8
 800893a:	4620      	mov	r0, r4
 800893c:	d107      	bne.n	800894e <_dtoa_r+0xb1e>
 800893e:	f000 f9dd 	bl	8008cfc <__multadd>
 8008942:	4680      	mov	r8, r0
 8008944:	4607      	mov	r7, r0
 8008946:	9b04      	ldr	r3, [sp, #16]
 8008948:	3301      	adds	r3, #1
 800894a:	9304      	str	r3, [sp, #16]
 800894c:	e775      	b.n	800883a <_dtoa_r+0xa0a>
 800894e:	f000 f9d5 	bl	8008cfc <__multadd>
 8008952:	4639      	mov	r1, r7
 8008954:	4680      	mov	r8, r0
 8008956:	2300      	movs	r3, #0
 8008958:	220a      	movs	r2, #10
 800895a:	4620      	mov	r0, r4
 800895c:	f000 f9ce 	bl	8008cfc <__multadd>
 8008960:	4607      	mov	r7, r0
 8008962:	e7f0      	b.n	8008946 <_dtoa_r+0xb16>
 8008964:	9b04      	ldr	r3, [sp, #16]
 8008966:	9301      	str	r3, [sp, #4]
 8008968:	9d00      	ldr	r5, [sp, #0]
 800896a:	4631      	mov	r1, r6
 800896c:	4650      	mov	r0, sl
 800896e:	f7ff f9d4 	bl	8007d1a <quorem>
 8008972:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008976:	9b00      	ldr	r3, [sp, #0]
 8008978:	f805 9b01 	strb.w	r9, [r5], #1
 800897c:	1aea      	subs	r2, r5, r3
 800897e:	9b01      	ldr	r3, [sp, #4]
 8008980:	4293      	cmp	r3, r2
 8008982:	dd07      	ble.n	8008994 <_dtoa_r+0xb64>
 8008984:	4651      	mov	r1, sl
 8008986:	2300      	movs	r3, #0
 8008988:	220a      	movs	r2, #10
 800898a:	4620      	mov	r0, r4
 800898c:	f000 f9b6 	bl	8008cfc <__multadd>
 8008990:	4682      	mov	sl, r0
 8008992:	e7ea      	b.n	800896a <_dtoa_r+0xb3a>
 8008994:	9b01      	ldr	r3, [sp, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	bfc8      	it	gt
 800899a:	461d      	movgt	r5, r3
 800899c:	9b00      	ldr	r3, [sp, #0]
 800899e:	bfd8      	it	le
 80089a0:	2501      	movle	r5, #1
 80089a2:	441d      	add	r5, r3
 80089a4:	f04f 0800 	mov.w	r8, #0
 80089a8:	4651      	mov	r1, sl
 80089aa:	2201      	movs	r2, #1
 80089ac:	4620      	mov	r0, r4
 80089ae:	f000 fb53 	bl	8009058 <__lshift>
 80089b2:	4631      	mov	r1, r6
 80089b4:	4682      	mov	sl, r0
 80089b6:	f000 fbbb 	bl	8009130 <__mcmp>
 80089ba:	2800      	cmp	r0, #0
 80089bc:	dc96      	bgt.n	80088ec <_dtoa_r+0xabc>
 80089be:	d102      	bne.n	80089c6 <_dtoa_r+0xb96>
 80089c0:	f019 0f01 	tst.w	r9, #1
 80089c4:	d192      	bne.n	80088ec <_dtoa_r+0xabc>
 80089c6:	462b      	mov	r3, r5
 80089c8:	461d      	mov	r5, r3
 80089ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089ce:	2a30      	cmp	r2, #48	; 0x30
 80089d0:	d0fa      	beq.n	80089c8 <_dtoa_r+0xb98>
 80089d2:	e6dd      	b.n	8008790 <_dtoa_r+0x960>
 80089d4:	9a00      	ldr	r2, [sp, #0]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d189      	bne.n	80088ee <_dtoa_r+0xabe>
 80089da:	f10b 0b01 	add.w	fp, fp, #1
 80089de:	2331      	movs	r3, #49	; 0x31
 80089e0:	e796      	b.n	8008910 <_dtoa_r+0xae0>
 80089e2:	4b0a      	ldr	r3, [pc, #40]	; (8008a0c <_dtoa_r+0xbdc>)
 80089e4:	f7ff ba99 	b.w	8007f1a <_dtoa_r+0xea>
 80089e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f47f aa6d 	bne.w	8007eca <_dtoa_r+0x9a>
 80089f0:	4b07      	ldr	r3, [pc, #28]	; (8008a10 <_dtoa_r+0xbe0>)
 80089f2:	f7ff ba92 	b.w	8007f1a <_dtoa_r+0xea>
 80089f6:	9b01      	ldr	r3, [sp, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	dcb5      	bgt.n	8008968 <_dtoa_r+0xb38>
 80089fc:	9b07      	ldr	r3, [sp, #28]
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	f73f aeb1 	bgt.w	8008766 <_dtoa_r+0x936>
 8008a04:	e7b0      	b.n	8008968 <_dtoa_r+0xb38>
 8008a06:	bf00      	nop
 8008a08:	08009d5d 	.word	0x08009d5d
 8008a0c:	08009cb3 	.word	0x08009cb3
 8008a10:	08009ce1 	.word	0x08009ce1

08008a14 <_free_r>:
 8008a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a16:	2900      	cmp	r1, #0
 8008a18:	d044      	beq.n	8008aa4 <_free_r+0x90>
 8008a1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a1e:	9001      	str	r0, [sp, #4]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f1a1 0404 	sub.w	r4, r1, #4
 8008a26:	bfb8      	it	lt
 8008a28:	18e4      	addlt	r4, r4, r3
 8008a2a:	f000 f8f9 	bl	8008c20 <__malloc_lock>
 8008a2e:	4a1e      	ldr	r2, [pc, #120]	; (8008aa8 <_free_r+0x94>)
 8008a30:	9801      	ldr	r0, [sp, #4]
 8008a32:	6813      	ldr	r3, [r2, #0]
 8008a34:	b933      	cbnz	r3, 8008a44 <_free_r+0x30>
 8008a36:	6063      	str	r3, [r4, #4]
 8008a38:	6014      	str	r4, [r2, #0]
 8008a3a:	b003      	add	sp, #12
 8008a3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a40:	f000 b8f4 	b.w	8008c2c <__malloc_unlock>
 8008a44:	42a3      	cmp	r3, r4
 8008a46:	d908      	bls.n	8008a5a <_free_r+0x46>
 8008a48:	6825      	ldr	r5, [r4, #0]
 8008a4a:	1961      	adds	r1, r4, r5
 8008a4c:	428b      	cmp	r3, r1
 8008a4e:	bf01      	itttt	eq
 8008a50:	6819      	ldreq	r1, [r3, #0]
 8008a52:	685b      	ldreq	r3, [r3, #4]
 8008a54:	1949      	addeq	r1, r1, r5
 8008a56:	6021      	streq	r1, [r4, #0]
 8008a58:	e7ed      	b.n	8008a36 <_free_r+0x22>
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	b10b      	cbz	r3, 8008a64 <_free_r+0x50>
 8008a60:	42a3      	cmp	r3, r4
 8008a62:	d9fa      	bls.n	8008a5a <_free_r+0x46>
 8008a64:	6811      	ldr	r1, [r2, #0]
 8008a66:	1855      	adds	r5, r2, r1
 8008a68:	42a5      	cmp	r5, r4
 8008a6a:	d10b      	bne.n	8008a84 <_free_r+0x70>
 8008a6c:	6824      	ldr	r4, [r4, #0]
 8008a6e:	4421      	add	r1, r4
 8008a70:	1854      	adds	r4, r2, r1
 8008a72:	42a3      	cmp	r3, r4
 8008a74:	6011      	str	r1, [r2, #0]
 8008a76:	d1e0      	bne.n	8008a3a <_free_r+0x26>
 8008a78:	681c      	ldr	r4, [r3, #0]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	6053      	str	r3, [r2, #4]
 8008a7e:	440c      	add	r4, r1
 8008a80:	6014      	str	r4, [r2, #0]
 8008a82:	e7da      	b.n	8008a3a <_free_r+0x26>
 8008a84:	d902      	bls.n	8008a8c <_free_r+0x78>
 8008a86:	230c      	movs	r3, #12
 8008a88:	6003      	str	r3, [r0, #0]
 8008a8a:	e7d6      	b.n	8008a3a <_free_r+0x26>
 8008a8c:	6825      	ldr	r5, [r4, #0]
 8008a8e:	1961      	adds	r1, r4, r5
 8008a90:	428b      	cmp	r3, r1
 8008a92:	bf04      	itt	eq
 8008a94:	6819      	ldreq	r1, [r3, #0]
 8008a96:	685b      	ldreq	r3, [r3, #4]
 8008a98:	6063      	str	r3, [r4, #4]
 8008a9a:	bf04      	itt	eq
 8008a9c:	1949      	addeq	r1, r1, r5
 8008a9e:	6021      	streq	r1, [r4, #0]
 8008aa0:	6054      	str	r4, [r2, #4]
 8008aa2:	e7ca      	b.n	8008a3a <_free_r+0x26>
 8008aa4:	b003      	add	sp, #12
 8008aa6:	bd30      	pop	{r4, r5, pc}
 8008aa8:	20000ef4 	.word	0x20000ef4

08008aac <malloc>:
 8008aac:	4b02      	ldr	r3, [pc, #8]	; (8008ab8 <malloc+0xc>)
 8008aae:	4601      	mov	r1, r0
 8008ab0:	6818      	ldr	r0, [r3, #0]
 8008ab2:	f000 b823 	b.w	8008afc <_malloc_r>
 8008ab6:	bf00      	nop
 8008ab8:	200001d0 	.word	0x200001d0

08008abc <sbrk_aligned>:
 8008abc:	b570      	push	{r4, r5, r6, lr}
 8008abe:	4e0e      	ldr	r6, [pc, #56]	; (8008af8 <sbrk_aligned+0x3c>)
 8008ac0:	460c      	mov	r4, r1
 8008ac2:	6831      	ldr	r1, [r6, #0]
 8008ac4:	4605      	mov	r5, r0
 8008ac6:	b911      	cbnz	r1, 8008ace <sbrk_aligned+0x12>
 8008ac8:	f000 fcee 	bl	80094a8 <_sbrk_r>
 8008acc:	6030      	str	r0, [r6, #0]
 8008ace:	4621      	mov	r1, r4
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	f000 fce9 	bl	80094a8 <_sbrk_r>
 8008ad6:	1c43      	adds	r3, r0, #1
 8008ad8:	d00a      	beq.n	8008af0 <sbrk_aligned+0x34>
 8008ada:	1cc4      	adds	r4, r0, #3
 8008adc:	f024 0403 	bic.w	r4, r4, #3
 8008ae0:	42a0      	cmp	r0, r4
 8008ae2:	d007      	beq.n	8008af4 <sbrk_aligned+0x38>
 8008ae4:	1a21      	subs	r1, r4, r0
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	f000 fcde 	bl	80094a8 <_sbrk_r>
 8008aec:	3001      	adds	r0, #1
 8008aee:	d101      	bne.n	8008af4 <sbrk_aligned+0x38>
 8008af0:	f04f 34ff 	mov.w	r4, #4294967295
 8008af4:	4620      	mov	r0, r4
 8008af6:	bd70      	pop	{r4, r5, r6, pc}
 8008af8:	20000ef8 	.word	0x20000ef8

08008afc <_malloc_r>:
 8008afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b00:	1ccd      	adds	r5, r1, #3
 8008b02:	f025 0503 	bic.w	r5, r5, #3
 8008b06:	3508      	adds	r5, #8
 8008b08:	2d0c      	cmp	r5, #12
 8008b0a:	bf38      	it	cc
 8008b0c:	250c      	movcc	r5, #12
 8008b0e:	2d00      	cmp	r5, #0
 8008b10:	4607      	mov	r7, r0
 8008b12:	db01      	blt.n	8008b18 <_malloc_r+0x1c>
 8008b14:	42a9      	cmp	r1, r5
 8008b16:	d905      	bls.n	8008b24 <_malloc_r+0x28>
 8008b18:	230c      	movs	r3, #12
 8008b1a:	603b      	str	r3, [r7, #0]
 8008b1c:	2600      	movs	r6, #0
 8008b1e:	4630      	mov	r0, r6
 8008b20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008bf8 <_malloc_r+0xfc>
 8008b28:	f000 f87a 	bl	8008c20 <__malloc_lock>
 8008b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8008b30:	461c      	mov	r4, r3
 8008b32:	bb5c      	cbnz	r4, 8008b8c <_malloc_r+0x90>
 8008b34:	4629      	mov	r1, r5
 8008b36:	4638      	mov	r0, r7
 8008b38:	f7ff ffc0 	bl	8008abc <sbrk_aligned>
 8008b3c:	1c43      	adds	r3, r0, #1
 8008b3e:	4604      	mov	r4, r0
 8008b40:	d155      	bne.n	8008bee <_malloc_r+0xf2>
 8008b42:	f8d8 4000 	ldr.w	r4, [r8]
 8008b46:	4626      	mov	r6, r4
 8008b48:	2e00      	cmp	r6, #0
 8008b4a:	d145      	bne.n	8008bd8 <_malloc_r+0xdc>
 8008b4c:	2c00      	cmp	r4, #0
 8008b4e:	d048      	beq.n	8008be2 <_malloc_r+0xe6>
 8008b50:	6823      	ldr	r3, [r4, #0]
 8008b52:	4631      	mov	r1, r6
 8008b54:	4638      	mov	r0, r7
 8008b56:	eb04 0903 	add.w	r9, r4, r3
 8008b5a:	f000 fca5 	bl	80094a8 <_sbrk_r>
 8008b5e:	4581      	cmp	r9, r0
 8008b60:	d13f      	bne.n	8008be2 <_malloc_r+0xe6>
 8008b62:	6821      	ldr	r1, [r4, #0]
 8008b64:	1a6d      	subs	r5, r5, r1
 8008b66:	4629      	mov	r1, r5
 8008b68:	4638      	mov	r0, r7
 8008b6a:	f7ff ffa7 	bl	8008abc <sbrk_aligned>
 8008b6e:	3001      	adds	r0, #1
 8008b70:	d037      	beq.n	8008be2 <_malloc_r+0xe6>
 8008b72:	6823      	ldr	r3, [r4, #0]
 8008b74:	442b      	add	r3, r5
 8008b76:	6023      	str	r3, [r4, #0]
 8008b78:	f8d8 3000 	ldr.w	r3, [r8]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d038      	beq.n	8008bf2 <_malloc_r+0xf6>
 8008b80:	685a      	ldr	r2, [r3, #4]
 8008b82:	42a2      	cmp	r2, r4
 8008b84:	d12b      	bne.n	8008bde <_malloc_r+0xe2>
 8008b86:	2200      	movs	r2, #0
 8008b88:	605a      	str	r2, [r3, #4]
 8008b8a:	e00f      	b.n	8008bac <_malloc_r+0xb0>
 8008b8c:	6822      	ldr	r2, [r4, #0]
 8008b8e:	1b52      	subs	r2, r2, r5
 8008b90:	d41f      	bmi.n	8008bd2 <_malloc_r+0xd6>
 8008b92:	2a0b      	cmp	r2, #11
 8008b94:	d917      	bls.n	8008bc6 <_malloc_r+0xca>
 8008b96:	1961      	adds	r1, r4, r5
 8008b98:	42a3      	cmp	r3, r4
 8008b9a:	6025      	str	r5, [r4, #0]
 8008b9c:	bf18      	it	ne
 8008b9e:	6059      	strne	r1, [r3, #4]
 8008ba0:	6863      	ldr	r3, [r4, #4]
 8008ba2:	bf08      	it	eq
 8008ba4:	f8c8 1000 	streq.w	r1, [r8]
 8008ba8:	5162      	str	r2, [r4, r5]
 8008baa:	604b      	str	r3, [r1, #4]
 8008bac:	4638      	mov	r0, r7
 8008bae:	f104 060b 	add.w	r6, r4, #11
 8008bb2:	f000 f83b 	bl	8008c2c <__malloc_unlock>
 8008bb6:	f026 0607 	bic.w	r6, r6, #7
 8008bba:	1d23      	adds	r3, r4, #4
 8008bbc:	1af2      	subs	r2, r6, r3
 8008bbe:	d0ae      	beq.n	8008b1e <_malloc_r+0x22>
 8008bc0:	1b9b      	subs	r3, r3, r6
 8008bc2:	50a3      	str	r3, [r4, r2]
 8008bc4:	e7ab      	b.n	8008b1e <_malloc_r+0x22>
 8008bc6:	42a3      	cmp	r3, r4
 8008bc8:	6862      	ldr	r2, [r4, #4]
 8008bca:	d1dd      	bne.n	8008b88 <_malloc_r+0x8c>
 8008bcc:	f8c8 2000 	str.w	r2, [r8]
 8008bd0:	e7ec      	b.n	8008bac <_malloc_r+0xb0>
 8008bd2:	4623      	mov	r3, r4
 8008bd4:	6864      	ldr	r4, [r4, #4]
 8008bd6:	e7ac      	b.n	8008b32 <_malloc_r+0x36>
 8008bd8:	4634      	mov	r4, r6
 8008bda:	6876      	ldr	r6, [r6, #4]
 8008bdc:	e7b4      	b.n	8008b48 <_malloc_r+0x4c>
 8008bde:	4613      	mov	r3, r2
 8008be0:	e7cc      	b.n	8008b7c <_malloc_r+0x80>
 8008be2:	230c      	movs	r3, #12
 8008be4:	603b      	str	r3, [r7, #0]
 8008be6:	4638      	mov	r0, r7
 8008be8:	f000 f820 	bl	8008c2c <__malloc_unlock>
 8008bec:	e797      	b.n	8008b1e <_malloc_r+0x22>
 8008bee:	6025      	str	r5, [r4, #0]
 8008bf0:	e7dc      	b.n	8008bac <_malloc_r+0xb0>
 8008bf2:	605b      	str	r3, [r3, #4]
 8008bf4:	deff      	udf	#255	; 0xff
 8008bf6:	bf00      	nop
 8008bf8:	20000ef4 	.word	0x20000ef4

08008bfc <__ascii_mbtowc>:
 8008bfc:	b082      	sub	sp, #8
 8008bfe:	b901      	cbnz	r1, 8008c02 <__ascii_mbtowc+0x6>
 8008c00:	a901      	add	r1, sp, #4
 8008c02:	b142      	cbz	r2, 8008c16 <__ascii_mbtowc+0x1a>
 8008c04:	b14b      	cbz	r3, 8008c1a <__ascii_mbtowc+0x1e>
 8008c06:	7813      	ldrb	r3, [r2, #0]
 8008c08:	600b      	str	r3, [r1, #0]
 8008c0a:	7812      	ldrb	r2, [r2, #0]
 8008c0c:	1e10      	subs	r0, r2, #0
 8008c0e:	bf18      	it	ne
 8008c10:	2001      	movne	r0, #1
 8008c12:	b002      	add	sp, #8
 8008c14:	4770      	bx	lr
 8008c16:	4610      	mov	r0, r2
 8008c18:	e7fb      	b.n	8008c12 <__ascii_mbtowc+0x16>
 8008c1a:	f06f 0001 	mvn.w	r0, #1
 8008c1e:	e7f8      	b.n	8008c12 <__ascii_mbtowc+0x16>

08008c20 <__malloc_lock>:
 8008c20:	4801      	ldr	r0, [pc, #4]	; (8008c28 <__malloc_lock+0x8>)
 8008c22:	f7ff b86a 	b.w	8007cfa <__retarget_lock_acquire_recursive>
 8008c26:	bf00      	nop
 8008c28:	20000ef0 	.word	0x20000ef0

08008c2c <__malloc_unlock>:
 8008c2c:	4801      	ldr	r0, [pc, #4]	; (8008c34 <__malloc_unlock+0x8>)
 8008c2e:	f7ff b865 	b.w	8007cfc <__retarget_lock_release_recursive>
 8008c32:	bf00      	nop
 8008c34:	20000ef0 	.word	0x20000ef0

08008c38 <_Balloc>:
 8008c38:	b570      	push	{r4, r5, r6, lr}
 8008c3a:	69c6      	ldr	r6, [r0, #28]
 8008c3c:	4604      	mov	r4, r0
 8008c3e:	460d      	mov	r5, r1
 8008c40:	b976      	cbnz	r6, 8008c60 <_Balloc+0x28>
 8008c42:	2010      	movs	r0, #16
 8008c44:	f7ff ff32 	bl	8008aac <malloc>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	61e0      	str	r0, [r4, #28]
 8008c4c:	b920      	cbnz	r0, 8008c58 <_Balloc+0x20>
 8008c4e:	4b18      	ldr	r3, [pc, #96]	; (8008cb0 <_Balloc+0x78>)
 8008c50:	4818      	ldr	r0, [pc, #96]	; (8008cb4 <_Balloc+0x7c>)
 8008c52:	216b      	movs	r1, #107	; 0x6b
 8008c54:	f000 fc38 	bl	80094c8 <__assert_func>
 8008c58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c5c:	6006      	str	r6, [r0, #0]
 8008c5e:	60c6      	str	r6, [r0, #12]
 8008c60:	69e6      	ldr	r6, [r4, #28]
 8008c62:	68f3      	ldr	r3, [r6, #12]
 8008c64:	b183      	cbz	r3, 8008c88 <_Balloc+0x50>
 8008c66:	69e3      	ldr	r3, [r4, #28]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c6e:	b9b8      	cbnz	r0, 8008ca0 <_Balloc+0x68>
 8008c70:	2101      	movs	r1, #1
 8008c72:	fa01 f605 	lsl.w	r6, r1, r5
 8008c76:	1d72      	adds	r2, r6, #5
 8008c78:	0092      	lsls	r2, r2, #2
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f000 fc42 	bl	8009504 <_calloc_r>
 8008c80:	b160      	cbz	r0, 8008c9c <_Balloc+0x64>
 8008c82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c86:	e00e      	b.n	8008ca6 <_Balloc+0x6e>
 8008c88:	2221      	movs	r2, #33	; 0x21
 8008c8a:	2104      	movs	r1, #4
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f000 fc39 	bl	8009504 <_calloc_r>
 8008c92:	69e3      	ldr	r3, [r4, #28]
 8008c94:	60f0      	str	r0, [r6, #12]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1e4      	bne.n	8008c66 <_Balloc+0x2e>
 8008c9c:	2000      	movs	r0, #0
 8008c9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ca0:	6802      	ldr	r2, [r0, #0]
 8008ca2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008cac:	e7f7      	b.n	8008c9e <_Balloc+0x66>
 8008cae:	bf00      	nop
 8008cb0:	08009cee 	.word	0x08009cee
 8008cb4:	08009d6e 	.word	0x08009d6e

08008cb8 <_Bfree>:
 8008cb8:	b570      	push	{r4, r5, r6, lr}
 8008cba:	69c6      	ldr	r6, [r0, #28]
 8008cbc:	4605      	mov	r5, r0
 8008cbe:	460c      	mov	r4, r1
 8008cc0:	b976      	cbnz	r6, 8008ce0 <_Bfree+0x28>
 8008cc2:	2010      	movs	r0, #16
 8008cc4:	f7ff fef2 	bl	8008aac <malloc>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	61e8      	str	r0, [r5, #28]
 8008ccc:	b920      	cbnz	r0, 8008cd8 <_Bfree+0x20>
 8008cce:	4b09      	ldr	r3, [pc, #36]	; (8008cf4 <_Bfree+0x3c>)
 8008cd0:	4809      	ldr	r0, [pc, #36]	; (8008cf8 <_Bfree+0x40>)
 8008cd2:	218f      	movs	r1, #143	; 0x8f
 8008cd4:	f000 fbf8 	bl	80094c8 <__assert_func>
 8008cd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cdc:	6006      	str	r6, [r0, #0]
 8008cde:	60c6      	str	r6, [r0, #12]
 8008ce0:	b13c      	cbz	r4, 8008cf2 <_Bfree+0x3a>
 8008ce2:	69eb      	ldr	r3, [r5, #28]
 8008ce4:	6862      	ldr	r2, [r4, #4]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008cec:	6021      	str	r1, [r4, #0]
 8008cee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008cf2:	bd70      	pop	{r4, r5, r6, pc}
 8008cf4:	08009cee 	.word	0x08009cee
 8008cf8:	08009d6e 	.word	0x08009d6e

08008cfc <__multadd>:
 8008cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d00:	690d      	ldr	r5, [r1, #16]
 8008d02:	4607      	mov	r7, r0
 8008d04:	460c      	mov	r4, r1
 8008d06:	461e      	mov	r6, r3
 8008d08:	f101 0c14 	add.w	ip, r1, #20
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	f8dc 3000 	ldr.w	r3, [ip]
 8008d12:	b299      	uxth	r1, r3
 8008d14:	fb02 6101 	mla	r1, r2, r1, r6
 8008d18:	0c1e      	lsrs	r6, r3, #16
 8008d1a:	0c0b      	lsrs	r3, r1, #16
 8008d1c:	fb02 3306 	mla	r3, r2, r6, r3
 8008d20:	b289      	uxth	r1, r1
 8008d22:	3001      	adds	r0, #1
 8008d24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d28:	4285      	cmp	r5, r0
 8008d2a:	f84c 1b04 	str.w	r1, [ip], #4
 8008d2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d32:	dcec      	bgt.n	8008d0e <__multadd+0x12>
 8008d34:	b30e      	cbz	r6, 8008d7a <__multadd+0x7e>
 8008d36:	68a3      	ldr	r3, [r4, #8]
 8008d38:	42ab      	cmp	r3, r5
 8008d3a:	dc19      	bgt.n	8008d70 <__multadd+0x74>
 8008d3c:	6861      	ldr	r1, [r4, #4]
 8008d3e:	4638      	mov	r0, r7
 8008d40:	3101      	adds	r1, #1
 8008d42:	f7ff ff79 	bl	8008c38 <_Balloc>
 8008d46:	4680      	mov	r8, r0
 8008d48:	b928      	cbnz	r0, 8008d56 <__multadd+0x5a>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	4b0c      	ldr	r3, [pc, #48]	; (8008d80 <__multadd+0x84>)
 8008d4e:	480d      	ldr	r0, [pc, #52]	; (8008d84 <__multadd+0x88>)
 8008d50:	21ba      	movs	r1, #186	; 0xba
 8008d52:	f000 fbb9 	bl	80094c8 <__assert_func>
 8008d56:	6922      	ldr	r2, [r4, #16]
 8008d58:	3202      	adds	r2, #2
 8008d5a:	f104 010c 	add.w	r1, r4, #12
 8008d5e:	0092      	lsls	r2, r2, #2
 8008d60:	300c      	adds	r0, #12
 8008d62:	f7fe ffcc 	bl	8007cfe <memcpy>
 8008d66:	4621      	mov	r1, r4
 8008d68:	4638      	mov	r0, r7
 8008d6a:	f7ff ffa5 	bl	8008cb8 <_Bfree>
 8008d6e:	4644      	mov	r4, r8
 8008d70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d74:	3501      	adds	r5, #1
 8008d76:	615e      	str	r6, [r3, #20]
 8008d78:	6125      	str	r5, [r4, #16]
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d80:	08009d5d 	.word	0x08009d5d
 8008d84:	08009d6e 	.word	0x08009d6e

08008d88 <__hi0bits>:
 8008d88:	0c03      	lsrs	r3, r0, #16
 8008d8a:	041b      	lsls	r3, r3, #16
 8008d8c:	b9d3      	cbnz	r3, 8008dc4 <__hi0bits+0x3c>
 8008d8e:	0400      	lsls	r0, r0, #16
 8008d90:	2310      	movs	r3, #16
 8008d92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008d96:	bf04      	itt	eq
 8008d98:	0200      	lsleq	r0, r0, #8
 8008d9a:	3308      	addeq	r3, #8
 8008d9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008da0:	bf04      	itt	eq
 8008da2:	0100      	lsleq	r0, r0, #4
 8008da4:	3304      	addeq	r3, #4
 8008da6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008daa:	bf04      	itt	eq
 8008dac:	0080      	lsleq	r0, r0, #2
 8008dae:	3302      	addeq	r3, #2
 8008db0:	2800      	cmp	r0, #0
 8008db2:	db05      	blt.n	8008dc0 <__hi0bits+0x38>
 8008db4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008db8:	f103 0301 	add.w	r3, r3, #1
 8008dbc:	bf08      	it	eq
 8008dbe:	2320      	moveq	r3, #32
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	4770      	bx	lr
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	e7e4      	b.n	8008d92 <__hi0bits+0xa>

08008dc8 <__lo0bits>:
 8008dc8:	6803      	ldr	r3, [r0, #0]
 8008dca:	f013 0207 	ands.w	r2, r3, #7
 8008dce:	d00c      	beq.n	8008dea <__lo0bits+0x22>
 8008dd0:	07d9      	lsls	r1, r3, #31
 8008dd2:	d422      	bmi.n	8008e1a <__lo0bits+0x52>
 8008dd4:	079a      	lsls	r2, r3, #30
 8008dd6:	bf49      	itett	mi
 8008dd8:	085b      	lsrmi	r3, r3, #1
 8008dda:	089b      	lsrpl	r3, r3, #2
 8008ddc:	6003      	strmi	r3, [r0, #0]
 8008dde:	2201      	movmi	r2, #1
 8008de0:	bf5c      	itt	pl
 8008de2:	6003      	strpl	r3, [r0, #0]
 8008de4:	2202      	movpl	r2, #2
 8008de6:	4610      	mov	r0, r2
 8008de8:	4770      	bx	lr
 8008dea:	b299      	uxth	r1, r3
 8008dec:	b909      	cbnz	r1, 8008df2 <__lo0bits+0x2a>
 8008dee:	0c1b      	lsrs	r3, r3, #16
 8008df0:	2210      	movs	r2, #16
 8008df2:	b2d9      	uxtb	r1, r3
 8008df4:	b909      	cbnz	r1, 8008dfa <__lo0bits+0x32>
 8008df6:	3208      	adds	r2, #8
 8008df8:	0a1b      	lsrs	r3, r3, #8
 8008dfa:	0719      	lsls	r1, r3, #28
 8008dfc:	bf04      	itt	eq
 8008dfe:	091b      	lsreq	r3, r3, #4
 8008e00:	3204      	addeq	r2, #4
 8008e02:	0799      	lsls	r1, r3, #30
 8008e04:	bf04      	itt	eq
 8008e06:	089b      	lsreq	r3, r3, #2
 8008e08:	3202      	addeq	r2, #2
 8008e0a:	07d9      	lsls	r1, r3, #31
 8008e0c:	d403      	bmi.n	8008e16 <__lo0bits+0x4e>
 8008e0e:	085b      	lsrs	r3, r3, #1
 8008e10:	f102 0201 	add.w	r2, r2, #1
 8008e14:	d003      	beq.n	8008e1e <__lo0bits+0x56>
 8008e16:	6003      	str	r3, [r0, #0]
 8008e18:	e7e5      	b.n	8008de6 <__lo0bits+0x1e>
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	e7e3      	b.n	8008de6 <__lo0bits+0x1e>
 8008e1e:	2220      	movs	r2, #32
 8008e20:	e7e1      	b.n	8008de6 <__lo0bits+0x1e>
	...

08008e24 <__i2b>:
 8008e24:	b510      	push	{r4, lr}
 8008e26:	460c      	mov	r4, r1
 8008e28:	2101      	movs	r1, #1
 8008e2a:	f7ff ff05 	bl	8008c38 <_Balloc>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	b928      	cbnz	r0, 8008e3e <__i2b+0x1a>
 8008e32:	4b05      	ldr	r3, [pc, #20]	; (8008e48 <__i2b+0x24>)
 8008e34:	4805      	ldr	r0, [pc, #20]	; (8008e4c <__i2b+0x28>)
 8008e36:	f240 1145 	movw	r1, #325	; 0x145
 8008e3a:	f000 fb45 	bl	80094c8 <__assert_func>
 8008e3e:	2301      	movs	r3, #1
 8008e40:	6144      	str	r4, [r0, #20]
 8008e42:	6103      	str	r3, [r0, #16]
 8008e44:	bd10      	pop	{r4, pc}
 8008e46:	bf00      	nop
 8008e48:	08009d5d 	.word	0x08009d5d
 8008e4c:	08009d6e 	.word	0x08009d6e

08008e50 <__multiply>:
 8008e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e54:	4691      	mov	r9, r2
 8008e56:	690a      	ldr	r2, [r1, #16]
 8008e58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	bfb8      	it	lt
 8008e60:	460b      	movlt	r3, r1
 8008e62:	460c      	mov	r4, r1
 8008e64:	bfbc      	itt	lt
 8008e66:	464c      	movlt	r4, r9
 8008e68:	4699      	movlt	r9, r3
 8008e6a:	6927      	ldr	r7, [r4, #16]
 8008e6c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008e70:	68a3      	ldr	r3, [r4, #8]
 8008e72:	6861      	ldr	r1, [r4, #4]
 8008e74:	eb07 060a 	add.w	r6, r7, sl
 8008e78:	42b3      	cmp	r3, r6
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	bfb8      	it	lt
 8008e7e:	3101      	addlt	r1, #1
 8008e80:	f7ff feda 	bl	8008c38 <_Balloc>
 8008e84:	b930      	cbnz	r0, 8008e94 <__multiply+0x44>
 8008e86:	4602      	mov	r2, r0
 8008e88:	4b44      	ldr	r3, [pc, #272]	; (8008f9c <__multiply+0x14c>)
 8008e8a:	4845      	ldr	r0, [pc, #276]	; (8008fa0 <__multiply+0x150>)
 8008e8c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008e90:	f000 fb1a 	bl	80094c8 <__assert_func>
 8008e94:	f100 0514 	add.w	r5, r0, #20
 8008e98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008e9c:	462b      	mov	r3, r5
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	4543      	cmp	r3, r8
 8008ea2:	d321      	bcc.n	8008ee8 <__multiply+0x98>
 8008ea4:	f104 0314 	add.w	r3, r4, #20
 8008ea8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008eac:	f109 0314 	add.w	r3, r9, #20
 8008eb0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008eb4:	9202      	str	r2, [sp, #8]
 8008eb6:	1b3a      	subs	r2, r7, r4
 8008eb8:	3a15      	subs	r2, #21
 8008eba:	f022 0203 	bic.w	r2, r2, #3
 8008ebe:	3204      	adds	r2, #4
 8008ec0:	f104 0115 	add.w	r1, r4, #21
 8008ec4:	428f      	cmp	r7, r1
 8008ec6:	bf38      	it	cc
 8008ec8:	2204      	movcc	r2, #4
 8008eca:	9201      	str	r2, [sp, #4]
 8008ecc:	9a02      	ldr	r2, [sp, #8]
 8008ece:	9303      	str	r3, [sp, #12]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d80c      	bhi.n	8008eee <__multiply+0x9e>
 8008ed4:	2e00      	cmp	r6, #0
 8008ed6:	dd03      	ble.n	8008ee0 <__multiply+0x90>
 8008ed8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d05b      	beq.n	8008f98 <__multiply+0x148>
 8008ee0:	6106      	str	r6, [r0, #16]
 8008ee2:	b005      	add	sp, #20
 8008ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee8:	f843 2b04 	str.w	r2, [r3], #4
 8008eec:	e7d8      	b.n	8008ea0 <__multiply+0x50>
 8008eee:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ef2:	f1ba 0f00 	cmp.w	sl, #0
 8008ef6:	d024      	beq.n	8008f42 <__multiply+0xf2>
 8008ef8:	f104 0e14 	add.w	lr, r4, #20
 8008efc:	46a9      	mov	r9, r5
 8008efe:	f04f 0c00 	mov.w	ip, #0
 8008f02:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008f06:	f8d9 1000 	ldr.w	r1, [r9]
 8008f0a:	fa1f fb82 	uxth.w	fp, r2
 8008f0e:	b289      	uxth	r1, r1
 8008f10:	fb0a 110b 	mla	r1, sl, fp, r1
 8008f14:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008f18:	f8d9 2000 	ldr.w	r2, [r9]
 8008f1c:	4461      	add	r1, ip
 8008f1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f22:	fb0a c20b 	mla	r2, sl, fp, ip
 8008f26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008f2a:	b289      	uxth	r1, r1
 8008f2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008f30:	4577      	cmp	r7, lr
 8008f32:	f849 1b04 	str.w	r1, [r9], #4
 8008f36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f3a:	d8e2      	bhi.n	8008f02 <__multiply+0xb2>
 8008f3c:	9a01      	ldr	r2, [sp, #4]
 8008f3e:	f845 c002 	str.w	ip, [r5, r2]
 8008f42:	9a03      	ldr	r2, [sp, #12]
 8008f44:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008f48:	3304      	adds	r3, #4
 8008f4a:	f1b9 0f00 	cmp.w	r9, #0
 8008f4e:	d021      	beq.n	8008f94 <__multiply+0x144>
 8008f50:	6829      	ldr	r1, [r5, #0]
 8008f52:	f104 0c14 	add.w	ip, r4, #20
 8008f56:	46ae      	mov	lr, r5
 8008f58:	f04f 0a00 	mov.w	sl, #0
 8008f5c:	f8bc b000 	ldrh.w	fp, [ip]
 8008f60:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008f64:	fb09 220b 	mla	r2, r9, fp, r2
 8008f68:	4452      	add	r2, sl
 8008f6a:	b289      	uxth	r1, r1
 8008f6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008f70:	f84e 1b04 	str.w	r1, [lr], #4
 8008f74:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008f78:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008f7c:	f8be 1000 	ldrh.w	r1, [lr]
 8008f80:	fb09 110a 	mla	r1, r9, sl, r1
 8008f84:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008f88:	4567      	cmp	r7, ip
 8008f8a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008f8e:	d8e5      	bhi.n	8008f5c <__multiply+0x10c>
 8008f90:	9a01      	ldr	r2, [sp, #4]
 8008f92:	50a9      	str	r1, [r5, r2]
 8008f94:	3504      	adds	r5, #4
 8008f96:	e799      	b.n	8008ecc <__multiply+0x7c>
 8008f98:	3e01      	subs	r6, #1
 8008f9a:	e79b      	b.n	8008ed4 <__multiply+0x84>
 8008f9c:	08009d5d 	.word	0x08009d5d
 8008fa0:	08009d6e 	.word	0x08009d6e

08008fa4 <__pow5mult>:
 8008fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fa8:	4615      	mov	r5, r2
 8008faa:	f012 0203 	ands.w	r2, r2, #3
 8008fae:	4606      	mov	r6, r0
 8008fb0:	460f      	mov	r7, r1
 8008fb2:	d007      	beq.n	8008fc4 <__pow5mult+0x20>
 8008fb4:	4c25      	ldr	r4, [pc, #148]	; (800904c <__pow5mult+0xa8>)
 8008fb6:	3a01      	subs	r2, #1
 8008fb8:	2300      	movs	r3, #0
 8008fba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008fbe:	f7ff fe9d 	bl	8008cfc <__multadd>
 8008fc2:	4607      	mov	r7, r0
 8008fc4:	10ad      	asrs	r5, r5, #2
 8008fc6:	d03d      	beq.n	8009044 <__pow5mult+0xa0>
 8008fc8:	69f4      	ldr	r4, [r6, #28]
 8008fca:	b97c      	cbnz	r4, 8008fec <__pow5mult+0x48>
 8008fcc:	2010      	movs	r0, #16
 8008fce:	f7ff fd6d 	bl	8008aac <malloc>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	61f0      	str	r0, [r6, #28]
 8008fd6:	b928      	cbnz	r0, 8008fe4 <__pow5mult+0x40>
 8008fd8:	4b1d      	ldr	r3, [pc, #116]	; (8009050 <__pow5mult+0xac>)
 8008fda:	481e      	ldr	r0, [pc, #120]	; (8009054 <__pow5mult+0xb0>)
 8008fdc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008fe0:	f000 fa72 	bl	80094c8 <__assert_func>
 8008fe4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fe8:	6004      	str	r4, [r0, #0]
 8008fea:	60c4      	str	r4, [r0, #12]
 8008fec:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008ff0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ff4:	b94c      	cbnz	r4, 800900a <__pow5mult+0x66>
 8008ff6:	f240 2171 	movw	r1, #625	; 0x271
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	f7ff ff12 	bl	8008e24 <__i2b>
 8009000:	2300      	movs	r3, #0
 8009002:	f8c8 0008 	str.w	r0, [r8, #8]
 8009006:	4604      	mov	r4, r0
 8009008:	6003      	str	r3, [r0, #0]
 800900a:	f04f 0900 	mov.w	r9, #0
 800900e:	07eb      	lsls	r3, r5, #31
 8009010:	d50a      	bpl.n	8009028 <__pow5mult+0x84>
 8009012:	4639      	mov	r1, r7
 8009014:	4622      	mov	r2, r4
 8009016:	4630      	mov	r0, r6
 8009018:	f7ff ff1a 	bl	8008e50 <__multiply>
 800901c:	4639      	mov	r1, r7
 800901e:	4680      	mov	r8, r0
 8009020:	4630      	mov	r0, r6
 8009022:	f7ff fe49 	bl	8008cb8 <_Bfree>
 8009026:	4647      	mov	r7, r8
 8009028:	106d      	asrs	r5, r5, #1
 800902a:	d00b      	beq.n	8009044 <__pow5mult+0xa0>
 800902c:	6820      	ldr	r0, [r4, #0]
 800902e:	b938      	cbnz	r0, 8009040 <__pow5mult+0x9c>
 8009030:	4622      	mov	r2, r4
 8009032:	4621      	mov	r1, r4
 8009034:	4630      	mov	r0, r6
 8009036:	f7ff ff0b 	bl	8008e50 <__multiply>
 800903a:	6020      	str	r0, [r4, #0]
 800903c:	f8c0 9000 	str.w	r9, [r0]
 8009040:	4604      	mov	r4, r0
 8009042:	e7e4      	b.n	800900e <__pow5mult+0x6a>
 8009044:	4638      	mov	r0, r7
 8009046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800904a:	bf00      	nop
 800904c:	08009eb8 	.word	0x08009eb8
 8009050:	08009cee 	.word	0x08009cee
 8009054:	08009d6e 	.word	0x08009d6e

08009058 <__lshift>:
 8009058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800905c:	460c      	mov	r4, r1
 800905e:	6849      	ldr	r1, [r1, #4]
 8009060:	6923      	ldr	r3, [r4, #16]
 8009062:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009066:	68a3      	ldr	r3, [r4, #8]
 8009068:	4607      	mov	r7, r0
 800906a:	4691      	mov	r9, r2
 800906c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009070:	f108 0601 	add.w	r6, r8, #1
 8009074:	42b3      	cmp	r3, r6
 8009076:	db0b      	blt.n	8009090 <__lshift+0x38>
 8009078:	4638      	mov	r0, r7
 800907a:	f7ff fddd 	bl	8008c38 <_Balloc>
 800907e:	4605      	mov	r5, r0
 8009080:	b948      	cbnz	r0, 8009096 <__lshift+0x3e>
 8009082:	4602      	mov	r2, r0
 8009084:	4b28      	ldr	r3, [pc, #160]	; (8009128 <__lshift+0xd0>)
 8009086:	4829      	ldr	r0, [pc, #164]	; (800912c <__lshift+0xd4>)
 8009088:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800908c:	f000 fa1c 	bl	80094c8 <__assert_func>
 8009090:	3101      	adds	r1, #1
 8009092:	005b      	lsls	r3, r3, #1
 8009094:	e7ee      	b.n	8009074 <__lshift+0x1c>
 8009096:	2300      	movs	r3, #0
 8009098:	f100 0114 	add.w	r1, r0, #20
 800909c:	f100 0210 	add.w	r2, r0, #16
 80090a0:	4618      	mov	r0, r3
 80090a2:	4553      	cmp	r3, sl
 80090a4:	db33      	blt.n	800910e <__lshift+0xb6>
 80090a6:	6920      	ldr	r0, [r4, #16]
 80090a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090ac:	f104 0314 	add.w	r3, r4, #20
 80090b0:	f019 091f 	ands.w	r9, r9, #31
 80090b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80090bc:	d02b      	beq.n	8009116 <__lshift+0xbe>
 80090be:	f1c9 0e20 	rsb	lr, r9, #32
 80090c2:	468a      	mov	sl, r1
 80090c4:	2200      	movs	r2, #0
 80090c6:	6818      	ldr	r0, [r3, #0]
 80090c8:	fa00 f009 	lsl.w	r0, r0, r9
 80090cc:	4310      	orrs	r0, r2
 80090ce:	f84a 0b04 	str.w	r0, [sl], #4
 80090d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80090d6:	459c      	cmp	ip, r3
 80090d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80090dc:	d8f3      	bhi.n	80090c6 <__lshift+0x6e>
 80090de:	ebac 0304 	sub.w	r3, ip, r4
 80090e2:	3b15      	subs	r3, #21
 80090e4:	f023 0303 	bic.w	r3, r3, #3
 80090e8:	3304      	adds	r3, #4
 80090ea:	f104 0015 	add.w	r0, r4, #21
 80090ee:	4584      	cmp	ip, r0
 80090f0:	bf38      	it	cc
 80090f2:	2304      	movcc	r3, #4
 80090f4:	50ca      	str	r2, [r1, r3]
 80090f6:	b10a      	cbz	r2, 80090fc <__lshift+0xa4>
 80090f8:	f108 0602 	add.w	r6, r8, #2
 80090fc:	3e01      	subs	r6, #1
 80090fe:	4638      	mov	r0, r7
 8009100:	612e      	str	r6, [r5, #16]
 8009102:	4621      	mov	r1, r4
 8009104:	f7ff fdd8 	bl	8008cb8 <_Bfree>
 8009108:	4628      	mov	r0, r5
 800910a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800910e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009112:	3301      	adds	r3, #1
 8009114:	e7c5      	b.n	80090a2 <__lshift+0x4a>
 8009116:	3904      	subs	r1, #4
 8009118:	f853 2b04 	ldr.w	r2, [r3], #4
 800911c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009120:	459c      	cmp	ip, r3
 8009122:	d8f9      	bhi.n	8009118 <__lshift+0xc0>
 8009124:	e7ea      	b.n	80090fc <__lshift+0xa4>
 8009126:	bf00      	nop
 8009128:	08009d5d 	.word	0x08009d5d
 800912c:	08009d6e 	.word	0x08009d6e

08009130 <__mcmp>:
 8009130:	b530      	push	{r4, r5, lr}
 8009132:	6902      	ldr	r2, [r0, #16]
 8009134:	690c      	ldr	r4, [r1, #16]
 8009136:	1b12      	subs	r2, r2, r4
 8009138:	d10e      	bne.n	8009158 <__mcmp+0x28>
 800913a:	f100 0314 	add.w	r3, r0, #20
 800913e:	3114      	adds	r1, #20
 8009140:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009144:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009148:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800914c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009150:	42a5      	cmp	r5, r4
 8009152:	d003      	beq.n	800915c <__mcmp+0x2c>
 8009154:	d305      	bcc.n	8009162 <__mcmp+0x32>
 8009156:	2201      	movs	r2, #1
 8009158:	4610      	mov	r0, r2
 800915a:	bd30      	pop	{r4, r5, pc}
 800915c:	4283      	cmp	r3, r0
 800915e:	d3f3      	bcc.n	8009148 <__mcmp+0x18>
 8009160:	e7fa      	b.n	8009158 <__mcmp+0x28>
 8009162:	f04f 32ff 	mov.w	r2, #4294967295
 8009166:	e7f7      	b.n	8009158 <__mcmp+0x28>

08009168 <__mdiff>:
 8009168:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916c:	460c      	mov	r4, r1
 800916e:	4606      	mov	r6, r0
 8009170:	4611      	mov	r1, r2
 8009172:	4620      	mov	r0, r4
 8009174:	4690      	mov	r8, r2
 8009176:	f7ff ffdb 	bl	8009130 <__mcmp>
 800917a:	1e05      	subs	r5, r0, #0
 800917c:	d110      	bne.n	80091a0 <__mdiff+0x38>
 800917e:	4629      	mov	r1, r5
 8009180:	4630      	mov	r0, r6
 8009182:	f7ff fd59 	bl	8008c38 <_Balloc>
 8009186:	b930      	cbnz	r0, 8009196 <__mdiff+0x2e>
 8009188:	4b3a      	ldr	r3, [pc, #232]	; (8009274 <__mdiff+0x10c>)
 800918a:	4602      	mov	r2, r0
 800918c:	f240 2137 	movw	r1, #567	; 0x237
 8009190:	4839      	ldr	r0, [pc, #228]	; (8009278 <__mdiff+0x110>)
 8009192:	f000 f999 	bl	80094c8 <__assert_func>
 8009196:	2301      	movs	r3, #1
 8009198:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800919c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a0:	bfa4      	itt	ge
 80091a2:	4643      	movge	r3, r8
 80091a4:	46a0      	movge	r8, r4
 80091a6:	4630      	mov	r0, r6
 80091a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80091ac:	bfa6      	itte	ge
 80091ae:	461c      	movge	r4, r3
 80091b0:	2500      	movge	r5, #0
 80091b2:	2501      	movlt	r5, #1
 80091b4:	f7ff fd40 	bl	8008c38 <_Balloc>
 80091b8:	b920      	cbnz	r0, 80091c4 <__mdiff+0x5c>
 80091ba:	4b2e      	ldr	r3, [pc, #184]	; (8009274 <__mdiff+0x10c>)
 80091bc:	4602      	mov	r2, r0
 80091be:	f240 2145 	movw	r1, #581	; 0x245
 80091c2:	e7e5      	b.n	8009190 <__mdiff+0x28>
 80091c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80091c8:	6926      	ldr	r6, [r4, #16]
 80091ca:	60c5      	str	r5, [r0, #12]
 80091cc:	f104 0914 	add.w	r9, r4, #20
 80091d0:	f108 0514 	add.w	r5, r8, #20
 80091d4:	f100 0e14 	add.w	lr, r0, #20
 80091d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80091dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80091e0:	f108 0210 	add.w	r2, r8, #16
 80091e4:	46f2      	mov	sl, lr
 80091e6:	2100      	movs	r1, #0
 80091e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80091ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80091f0:	fa11 f88b 	uxtah	r8, r1, fp
 80091f4:	b299      	uxth	r1, r3
 80091f6:	0c1b      	lsrs	r3, r3, #16
 80091f8:	eba8 0801 	sub.w	r8, r8, r1
 80091fc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009200:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009204:	fa1f f888 	uxth.w	r8, r8
 8009208:	1419      	asrs	r1, r3, #16
 800920a:	454e      	cmp	r6, r9
 800920c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009210:	f84a 3b04 	str.w	r3, [sl], #4
 8009214:	d8e8      	bhi.n	80091e8 <__mdiff+0x80>
 8009216:	1b33      	subs	r3, r6, r4
 8009218:	3b15      	subs	r3, #21
 800921a:	f023 0303 	bic.w	r3, r3, #3
 800921e:	3304      	adds	r3, #4
 8009220:	3415      	adds	r4, #21
 8009222:	42a6      	cmp	r6, r4
 8009224:	bf38      	it	cc
 8009226:	2304      	movcc	r3, #4
 8009228:	441d      	add	r5, r3
 800922a:	4473      	add	r3, lr
 800922c:	469e      	mov	lr, r3
 800922e:	462e      	mov	r6, r5
 8009230:	4566      	cmp	r6, ip
 8009232:	d30e      	bcc.n	8009252 <__mdiff+0xea>
 8009234:	f10c 0203 	add.w	r2, ip, #3
 8009238:	1b52      	subs	r2, r2, r5
 800923a:	f022 0203 	bic.w	r2, r2, #3
 800923e:	3d03      	subs	r5, #3
 8009240:	45ac      	cmp	ip, r5
 8009242:	bf38      	it	cc
 8009244:	2200      	movcc	r2, #0
 8009246:	4413      	add	r3, r2
 8009248:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800924c:	b17a      	cbz	r2, 800926e <__mdiff+0x106>
 800924e:	6107      	str	r7, [r0, #16]
 8009250:	e7a4      	b.n	800919c <__mdiff+0x34>
 8009252:	f856 8b04 	ldr.w	r8, [r6], #4
 8009256:	fa11 f288 	uxtah	r2, r1, r8
 800925a:	1414      	asrs	r4, r2, #16
 800925c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009260:	b292      	uxth	r2, r2
 8009262:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009266:	f84e 2b04 	str.w	r2, [lr], #4
 800926a:	1421      	asrs	r1, r4, #16
 800926c:	e7e0      	b.n	8009230 <__mdiff+0xc8>
 800926e:	3f01      	subs	r7, #1
 8009270:	e7ea      	b.n	8009248 <__mdiff+0xe0>
 8009272:	bf00      	nop
 8009274:	08009d5d 	.word	0x08009d5d
 8009278:	08009d6e 	.word	0x08009d6e

0800927c <__d2b>:
 800927c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009280:	460f      	mov	r7, r1
 8009282:	2101      	movs	r1, #1
 8009284:	ec59 8b10 	vmov	r8, r9, d0
 8009288:	4616      	mov	r6, r2
 800928a:	f7ff fcd5 	bl	8008c38 <_Balloc>
 800928e:	4604      	mov	r4, r0
 8009290:	b930      	cbnz	r0, 80092a0 <__d2b+0x24>
 8009292:	4602      	mov	r2, r0
 8009294:	4b24      	ldr	r3, [pc, #144]	; (8009328 <__d2b+0xac>)
 8009296:	4825      	ldr	r0, [pc, #148]	; (800932c <__d2b+0xb0>)
 8009298:	f240 310f 	movw	r1, #783	; 0x30f
 800929c:	f000 f914 	bl	80094c8 <__assert_func>
 80092a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80092a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092a8:	bb2d      	cbnz	r5, 80092f6 <__d2b+0x7a>
 80092aa:	9301      	str	r3, [sp, #4]
 80092ac:	f1b8 0300 	subs.w	r3, r8, #0
 80092b0:	d026      	beq.n	8009300 <__d2b+0x84>
 80092b2:	4668      	mov	r0, sp
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	f7ff fd87 	bl	8008dc8 <__lo0bits>
 80092ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 80092be:	b1e8      	cbz	r0, 80092fc <__d2b+0x80>
 80092c0:	f1c0 0320 	rsb	r3, r0, #32
 80092c4:	fa02 f303 	lsl.w	r3, r2, r3
 80092c8:	430b      	orrs	r3, r1
 80092ca:	40c2      	lsrs	r2, r0
 80092cc:	6163      	str	r3, [r4, #20]
 80092ce:	9201      	str	r2, [sp, #4]
 80092d0:	9b01      	ldr	r3, [sp, #4]
 80092d2:	61a3      	str	r3, [r4, #24]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	bf14      	ite	ne
 80092d8:	2202      	movne	r2, #2
 80092da:	2201      	moveq	r2, #1
 80092dc:	6122      	str	r2, [r4, #16]
 80092de:	b1bd      	cbz	r5, 8009310 <__d2b+0x94>
 80092e0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80092e4:	4405      	add	r5, r0
 80092e6:	603d      	str	r5, [r7, #0]
 80092e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80092ec:	6030      	str	r0, [r6, #0]
 80092ee:	4620      	mov	r0, r4
 80092f0:	b003      	add	sp, #12
 80092f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092fa:	e7d6      	b.n	80092aa <__d2b+0x2e>
 80092fc:	6161      	str	r1, [r4, #20]
 80092fe:	e7e7      	b.n	80092d0 <__d2b+0x54>
 8009300:	a801      	add	r0, sp, #4
 8009302:	f7ff fd61 	bl	8008dc8 <__lo0bits>
 8009306:	9b01      	ldr	r3, [sp, #4]
 8009308:	6163      	str	r3, [r4, #20]
 800930a:	3020      	adds	r0, #32
 800930c:	2201      	movs	r2, #1
 800930e:	e7e5      	b.n	80092dc <__d2b+0x60>
 8009310:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009314:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009318:	6038      	str	r0, [r7, #0]
 800931a:	6918      	ldr	r0, [r3, #16]
 800931c:	f7ff fd34 	bl	8008d88 <__hi0bits>
 8009320:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009324:	e7e2      	b.n	80092ec <__d2b+0x70>
 8009326:	bf00      	nop
 8009328:	08009d5d 	.word	0x08009d5d
 800932c:	08009d6e 	.word	0x08009d6e

08009330 <__ascii_wctomb>:
 8009330:	b149      	cbz	r1, 8009346 <__ascii_wctomb+0x16>
 8009332:	2aff      	cmp	r2, #255	; 0xff
 8009334:	bf85      	ittet	hi
 8009336:	238a      	movhi	r3, #138	; 0x8a
 8009338:	6003      	strhi	r3, [r0, #0]
 800933a:	700a      	strbls	r2, [r1, #0]
 800933c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009340:	bf98      	it	ls
 8009342:	2001      	movls	r0, #1
 8009344:	4770      	bx	lr
 8009346:	4608      	mov	r0, r1
 8009348:	4770      	bx	lr
	...

0800934c <__sflush_r>:
 800934c:	898a      	ldrh	r2, [r1, #12]
 800934e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009352:	4605      	mov	r5, r0
 8009354:	0710      	lsls	r0, r2, #28
 8009356:	460c      	mov	r4, r1
 8009358:	d458      	bmi.n	800940c <__sflush_r+0xc0>
 800935a:	684b      	ldr	r3, [r1, #4]
 800935c:	2b00      	cmp	r3, #0
 800935e:	dc05      	bgt.n	800936c <__sflush_r+0x20>
 8009360:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009362:	2b00      	cmp	r3, #0
 8009364:	dc02      	bgt.n	800936c <__sflush_r+0x20>
 8009366:	2000      	movs	r0, #0
 8009368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800936c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800936e:	2e00      	cmp	r6, #0
 8009370:	d0f9      	beq.n	8009366 <__sflush_r+0x1a>
 8009372:	2300      	movs	r3, #0
 8009374:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009378:	682f      	ldr	r7, [r5, #0]
 800937a:	6a21      	ldr	r1, [r4, #32]
 800937c:	602b      	str	r3, [r5, #0]
 800937e:	d032      	beq.n	80093e6 <__sflush_r+0x9a>
 8009380:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009382:	89a3      	ldrh	r3, [r4, #12]
 8009384:	075a      	lsls	r2, r3, #29
 8009386:	d505      	bpl.n	8009394 <__sflush_r+0x48>
 8009388:	6863      	ldr	r3, [r4, #4]
 800938a:	1ac0      	subs	r0, r0, r3
 800938c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800938e:	b10b      	cbz	r3, 8009394 <__sflush_r+0x48>
 8009390:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009392:	1ac0      	subs	r0, r0, r3
 8009394:	2300      	movs	r3, #0
 8009396:	4602      	mov	r2, r0
 8009398:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800939a:	6a21      	ldr	r1, [r4, #32]
 800939c:	4628      	mov	r0, r5
 800939e:	47b0      	blx	r6
 80093a0:	1c43      	adds	r3, r0, #1
 80093a2:	89a3      	ldrh	r3, [r4, #12]
 80093a4:	d106      	bne.n	80093b4 <__sflush_r+0x68>
 80093a6:	6829      	ldr	r1, [r5, #0]
 80093a8:	291d      	cmp	r1, #29
 80093aa:	d82b      	bhi.n	8009404 <__sflush_r+0xb8>
 80093ac:	4a29      	ldr	r2, [pc, #164]	; (8009454 <__sflush_r+0x108>)
 80093ae:	410a      	asrs	r2, r1
 80093b0:	07d6      	lsls	r6, r2, #31
 80093b2:	d427      	bmi.n	8009404 <__sflush_r+0xb8>
 80093b4:	2200      	movs	r2, #0
 80093b6:	6062      	str	r2, [r4, #4]
 80093b8:	04d9      	lsls	r1, r3, #19
 80093ba:	6922      	ldr	r2, [r4, #16]
 80093bc:	6022      	str	r2, [r4, #0]
 80093be:	d504      	bpl.n	80093ca <__sflush_r+0x7e>
 80093c0:	1c42      	adds	r2, r0, #1
 80093c2:	d101      	bne.n	80093c8 <__sflush_r+0x7c>
 80093c4:	682b      	ldr	r3, [r5, #0]
 80093c6:	b903      	cbnz	r3, 80093ca <__sflush_r+0x7e>
 80093c8:	6560      	str	r0, [r4, #84]	; 0x54
 80093ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093cc:	602f      	str	r7, [r5, #0]
 80093ce:	2900      	cmp	r1, #0
 80093d0:	d0c9      	beq.n	8009366 <__sflush_r+0x1a>
 80093d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093d6:	4299      	cmp	r1, r3
 80093d8:	d002      	beq.n	80093e0 <__sflush_r+0x94>
 80093da:	4628      	mov	r0, r5
 80093dc:	f7ff fb1a 	bl	8008a14 <_free_r>
 80093e0:	2000      	movs	r0, #0
 80093e2:	6360      	str	r0, [r4, #52]	; 0x34
 80093e4:	e7c0      	b.n	8009368 <__sflush_r+0x1c>
 80093e6:	2301      	movs	r3, #1
 80093e8:	4628      	mov	r0, r5
 80093ea:	47b0      	blx	r6
 80093ec:	1c41      	adds	r1, r0, #1
 80093ee:	d1c8      	bne.n	8009382 <__sflush_r+0x36>
 80093f0:	682b      	ldr	r3, [r5, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d0c5      	beq.n	8009382 <__sflush_r+0x36>
 80093f6:	2b1d      	cmp	r3, #29
 80093f8:	d001      	beq.n	80093fe <__sflush_r+0xb2>
 80093fa:	2b16      	cmp	r3, #22
 80093fc:	d101      	bne.n	8009402 <__sflush_r+0xb6>
 80093fe:	602f      	str	r7, [r5, #0]
 8009400:	e7b1      	b.n	8009366 <__sflush_r+0x1a>
 8009402:	89a3      	ldrh	r3, [r4, #12]
 8009404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009408:	81a3      	strh	r3, [r4, #12]
 800940a:	e7ad      	b.n	8009368 <__sflush_r+0x1c>
 800940c:	690f      	ldr	r7, [r1, #16]
 800940e:	2f00      	cmp	r7, #0
 8009410:	d0a9      	beq.n	8009366 <__sflush_r+0x1a>
 8009412:	0793      	lsls	r3, r2, #30
 8009414:	680e      	ldr	r6, [r1, #0]
 8009416:	bf08      	it	eq
 8009418:	694b      	ldreq	r3, [r1, #20]
 800941a:	600f      	str	r7, [r1, #0]
 800941c:	bf18      	it	ne
 800941e:	2300      	movne	r3, #0
 8009420:	eba6 0807 	sub.w	r8, r6, r7
 8009424:	608b      	str	r3, [r1, #8]
 8009426:	f1b8 0f00 	cmp.w	r8, #0
 800942a:	dd9c      	ble.n	8009366 <__sflush_r+0x1a>
 800942c:	6a21      	ldr	r1, [r4, #32]
 800942e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009430:	4643      	mov	r3, r8
 8009432:	463a      	mov	r2, r7
 8009434:	4628      	mov	r0, r5
 8009436:	47b0      	blx	r6
 8009438:	2800      	cmp	r0, #0
 800943a:	dc06      	bgt.n	800944a <__sflush_r+0xfe>
 800943c:	89a3      	ldrh	r3, [r4, #12]
 800943e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009442:	81a3      	strh	r3, [r4, #12]
 8009444:	f04f 30ff 	mov.w	r0, #4294967295
 8009448:	e78e      	b.n	8009368 <__sflush_r+0x1c>
 800944a:	4407      	add	r7, r0
 800944c:	eba8 0800 	sub.w	r8, r8, r0
 8009450:	e7e9      	b.n	8009426 <__sflush_r+0xda>
 8009452:	bf00      	nop
 8009454:	dfbffffe 	.word	0xdfbffffe

08009458 <_fflush_r>:
 8009458:	b538      	push	{r3, r4, r5, lr}
 800945a:	690b      	ldr	r3, [r1, #16]
 800945c:	4605      	mov	r5, r0
 800945e:	460c      	mov	r4, r1
 8009460:	b913      	cbnz	r3, 8009468 <_fflush_r+0x10>
 8009462:	2500      	movs	r5, #0
 8009464:	4628      	mov	r0, r5
 8009466:	bd38      	pop	{r3, r4, r5, pc}
 8009468:	b118      	cbz	r0, 8009472 <_fflush_r+0x1a>
 800946a:	6a03      	ldr	r3, [r0, #32]
 800946c:	b90b      	cbnz	r3, 8009472 <_fflush_r+0x1a>
 800946e:	f7fe fb5f 	bl	8007b30 <__sinit>
 8009472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d0f3      	beq.n	8009462 <_fflush_r+0xa>
 800947a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800947c:	07d0      	lsls	r0, r2, #31
 800947e:	d404      	bmi.n	800948a <_fflush_r+0x32>
 8009480:	0599      	lsls	r1, r3, #22
 8009482:	d402      	bmi.n	800948a <_fflush_r+0x32>
 8009484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009486:	f7fe fc38 	bl	8007cfa <__retarget_lock_acquire_recursive>
 800948a:	4628      	mov	r0, r5
 800948c:	4621      	mov	r1, r4
 800948e:	f7ff ff5d 	bl	800934c <__sflush_r>
 8009492:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009494:	07da      	lsls	r2, r3, #31
 8009496:	4605      	mov	r5, r0
 8009498:	d4e4      	bmi.n	8009464 <_fflush_r+0xc>
 800949a:	89a3      	ldrh	r3, [r4, #12]
 800949c:	059b      	lsls	r3, r3, #22
 800949e:	d4e1      	bmi.n	8009464 <_fflush_r+0xc>
 80094a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094a2:	f7fe fc2b 	bl	8007cfc <__retarget_lock_release_recursive>
 80094a6:	e7dd      	b.n	8009464 <_fflush_r+0xc>

080094a8 <_sbrk_r>:
 80094a8:	b538      	push	{r3, r4, r5, lr}
 80094aa:	4d06      	ldr	r5, [pc, #24]	; (80094c4 <_sbrk_r+0x1c>)
 80094ac:	2300      	movs	r3, #0
 80094ae:	4604      	mov	r4, r0
 80094b0:	4608      	mov	r0, r1
 80094b2:	602b      	str	r3, [r5, #0]
 80094b4:	f000 fb3e 	bl	8009b34 <_sbrk>
 80094b8:	1c43      	adds	r3, r0, #1
 80094ba:	d102      	bne.n	80094c2 <_sbrk_r+0x1a>
 80094bc:	682b      	ldr	r3, [r5, #0]
 80094be:	b103      	cbz	r3, 80094c2 <_sbrk_r+0x1a>
 80094c0:	6023      	str	r3, [r4, #0]
 80094c2:	bd38      	pop	{r3, r4, r5, pc}
 80094c4:	20000eec 	.word	0x20000eec

080094c8 <__assert_func>:
 80094c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094ca:	4614      	mov	r4, r2
 80094cc:	461a      	mov	r2, r3
 80094ce:	4b09      	ldr	r3, [pc, #36]	; (80094f4 <__assert_func+0x2c>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4605      	mov	r5, r0
 80094d4:	68d8      	ldr	r0, [r3, #12]
 80094d6:	b14c      	cbz	r4, 80094ec <__assert_func+0x24>
 80094d8:	4b07      	ldr	r3, [pc, #28]	; (80094f8 <__assert_func+0x30>)
 80094da:	9100      	str	r1, [sp, #0]
 80094dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80094e0:	4906      	ldr	r1, [pc, #24]	; (80094fc <__assert_func+0x34>)
 80094e2:	462b      	mov	r3, r5
 80094e4:	f000 f824 	bl	8009530 <fiprintf>
 80094e8:	f000 f834 	bl	8009554 <abort>
 80094ec:	4b04      	ldr	r3, [pc, #16]	; (8009500 <__assert_func+0x38>)
 80094ee:	461c      	mov	r4, r3
 80094f0:	e7f3      	b.n	80094da <__assert_func+0x12>
 80094f2:	bf00      	nop
 80094f4:	200001d0 	.word	0x200001d0
 80094f8:	08009ec4 	.word	0x08009ec4
 80094fc:	08009ed1 	.word	0x08009ed1
 8009500:	08009eff 	.word	0x08009eff

08009504 <_calloc_r>:
 8009504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009506:	fba1 2402 	umull	r2, r4, r1, r2
 800950a:	b94c      	cbnz	r4, 8009520 <_calloc_r+0x1c>
 800950c:	4611      	mov	r1, r2
 800950e:	9201      	str	r2, [sp, #4]
 8009510:	f7ff faf4 	bl	8008afc <_malloc_r>
 8009514:	9a01      	ldr	r2, [sp, #4]
 8009516:	4605      	mov	r5, r0
 8009518:	b930      	cbnz	r0, 8009528 <_calloc_r+0x24>
 800951a:	4628      	mov	r0, r5
 800951c:	b003      	add	sp, #12
 800951e:	bd30      	pop	{r4, r5, pc}
 8009520:	220c      	movs	r2, #12
 8009522:	6002      	str	r2, [r0, #0]
 8009524:	2500      	movs	r5, #0
 8009526:	e7f8      	b.n	800951a <_calloc_r+0x16>
 8009528:	4621      	mov	r1, r4
 800952a:	f7fe fb7a 	bl	8007c22 <memset>
 800952e:	e7f4      	b.n	800951a <_calloc_r+0x16>

08009530 <fiprintf>:
 8009530:	b40e      	push	{r1, r2, r3}
 8009532:	b503      	push	{r0, r1, lr}
 8009534:	4601      	mov	r1, r0
 8009536:	ab03      	add	r3, sp, #12
 8009538:	4805      	ldr	r0, [pc, #20]	; (8009550 <fiprintf+0x20>)
 800953a:	f853 2b04 	ldr.w	r2, [r3], #4
 800953e:	6800      	ldr	r0, [r0, #0]
 8009540:	9301      	str	r3, [sp, #4]
 8009542:	f000 f837 	bl	80095b4 <_vfiprintf_r>
 8009546:	b002      	add	sp, #8
 8009548:	f85d eb04 	ldr.w	lr, [sp], #4
 800954c:	b003      	add	sp, #12
 800954e:	4770      	bx	lr
 8009550:	200001d0 	.word	0x200001d0

08009554 <abort>:
 8009554:	b508      	push	{r3, lr}
 8009556:	2006      	movs	r0, #6
 8009558:	f000 fa04 	bl	8009964 <raise>
 800955c:	2001      	movs	r0, #1
 800955e:	f7f8 fe59 	bl	8002214 <_exit>

08009562 <__sfputc_r>:
 8009562:	6893      	ldr	r3, [r2, #8]
 8009564:	3b01      	subs	r3, #1
 8009566:	2b00      	cmp	r3, #0
 8009568:	b410      	push	{r4}
 800956a:	6093      	str	r3, [r2, #8]
 800956c:	da08      	bge.n	8009580 <__sfputc_r+0x1e>
 800956e:	6994      	ldr	r4, [r2, #24]
 8009570:	42a3      	cmp	r3, r4
 8009572:	db01      	blt.n	8009578 <__sfputc_r+0x16>
 8009574:	290a      	cmp	r1, #10
 8009576:	d103      	bne.n	8009580 <__sfputc_r+0x1e>
 8009578:	f85d 4b04 	ldr.w	r4, [sp], #4
 800957c:	f000 b934 	b.w	80097e8 <__swbuf_r>
 8009580:	6813      	ldr	r3, [r2, #0]
 8009582:	1c58      	adds	r0, r3, #1
 8009584:	6010      	str	r0, [r2, #0]
 8009586:	7019      	strb	r1, [r3, #0]
 8009588:	4608      	mov	r0, r1
 800958a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800958e:	4770      	bx	lr

08009590 <__sfputs_r>:
 8009590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009592:	4606      	mov	r6, r0
 8009594:	460f      	mov	r7, r1
 8009596:	4614      	mov	r4, r2
 8009598:	18d5      	adds	r5, r2, r3
 800959a:	42ac      	cmp	r4, r5
 800959c:	d101      	bne.n	80095a2 <__sfputs_r+0x12>
 800959e:	2000      	movs	r0, #0
 80095a0:	e007      	b.n	80095b2 <__sfputs_r+0x22>
 80095a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095a6:	463a      	mov	r2, r7
 80095a8:	4630      	mov	r0, r6
 80095aa:	f7ff ffda 	bl	8009562 <__sfputc_r>
 80095ae:	1c43      	adds	r3, r0, #1
 80095b0:	d1f3      	bne.n	800959a <__sfputs_r+0xa>
 80095b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080095b4 <_vfiprintf_r>:
 80095b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b8:	460d      	mov	r5, r1
 80095ba:	b09d      	sub	sp, #116	; 0x74
 80095bc:	4614      	mov	r4, r2
 80095be:	4698      	mov	r8, r3
 80095c0:	4606      	mov	r6, r0
 80095c2:	b118      	cbz	r0, 80095cc <_vfiprintf_r+0x18>
 80095c4:	6a03      	ldr	r3, [r0, #32]
 80095c6:	b90b      	cbnz	r3, 80095cc <_vfiprintf_r+0x18>
 80095c8:	f7fe fab2 	bl	8007b30 <__sinit>
 80095cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095ce:	07d9      	lsls	r1, r3, #31
 80095d0:	d405      	bmi.n	80095de <_vfiprintf_r+0x2a>
 80095d2:	89ab      	ldrh	r3, [r5, #12]
 80095d4:	059a      	lsls	r2, r3, #22
 80095d6:	d402      	bmi.n	80095de <_vfiprintf_r+0x2a>
 80095d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095da:	f7fe fb8e 	bl	8007cfa <__retarget_lock_acquire_recursive>
 80095de:	89ab      	ldrh	r3, [r5, #12]
 80095e0:	071b      	lsls	r3, r3, #28
 80095e2:	d501      	bpl.n	80095e8 <_vfiprintf_r+0x34>
 80095e4:	692b      	ldr	r3, [r5, #16]
 80095e6:	b99b      	cbnz	r3, 8009610 <_vfiprintf_r+0x5c>
 80095e8:	4629      	mov	r1, r5
 80095ea:	4630      	mov	r0, r6
 80095ec:	f000 f93a 	bl	8009864 <__swsetup_r>
 80095f0:	b170      	cbz	r0, 8009610 <_vfiprintf_r+0x5c>
 80095f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095f4:	07dc      	lsls	r4, r3, #31
 80095f6:	d504      	bpl.n	8009602 <_vfiprintf_r+0x4e>
 80095f8:	f04f 30ff 	mov.w	r0, #4294967295
 80095fc:	b01d      	add	sp, #116	; 0x74
 80095fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009602:	89ab      	ldrh	r3, [r5, #12]
 8009604:	0598      	lsls	r0, r3, #22
 8009606:	d4f7      	bmi.n	80095f8 <_vfiprintf_r+0x44>
 8009608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800960a:	f7fe fb77 	bl	8007cfc <__retarget_lock_release_recursive>
 800960e:	e7f3      	b.n	80095f8 <_vfiprintf_r+0x44>
 8009610:	2300      	movs	r3, #0
 8009612:	9309      	str	r3, [sp, #36]	; 0x24
 8009614:	2320      	movs	r3, #32
 8009616:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800961a:	f8cd 800c 	str.w	r8, [sp, #12]
 800961e:	2330      	movs	r3, #48	; 0x30
 8009620:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80097d4 <_vfiprintf_r+0x220>
 8009624:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009628:	f04f 0901 	mov.w	r9, #1
 800962c:	4623      	mov	r3, r4
 800962e:	469a      	mov	sl, r3
 8009630:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009634:	b10a      	cbz	r2, 800963a <_vfiprintf_r+0x86>
 8009636:	2a25      	cmp	r2, #37	; 0x25
 8009638:	d1f9      	bne.n	800962e <_vfiprintf_r+0x7a>
 800963a:	ebba 0b04 	subs.w	fp, sl, r4
 800963e:	d00b      	beq.n	8009658 <_vfiprintf_r+0xa4>
 8009640:	465b      	mov	r3, fp
 8009642:	4622      	mov	r2, r4
 8009644:	4629      	mov	r1, r5
 8009646:	4630      	mov	r0, r6
 8009648:	f7ff ffa2 	bl	8009590 <__sfputs_r>
 800964c:	3001      	adds	r0, #1
 800964e:	f000 80a9 	beq.w	80097a4 <_vfiprintf_r+0x1f0>
 8009652:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009654:	445a      	add	r2, fp
 8009656:	9209      	str	r2, [sp, #36]	; 0x24
 8009658:	f89a 3000 	ldrb.w	r3, [sl]
 800965c:	2b00      	cmp	r3, #0
 800965e:	f000 80a1 	beq.w	80097a4 <_vfiprintf_r+0x1f0>
 8009662:	2300      	movs	r3, #0
 8009664:	f04f 32ff 	mov.w	r2, #4294967295
 8009668:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800966c:	f10a 0a01 	add.w	sl, sl, #1
 8009670:	9304      	str	r3, [sp, #16]
 8009672:	9307      	str	r3, [sp, #28]
 8009674:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009678:	931a      	str	r3, [sp, #104]	; 0x68
 800967a:	4654      	mov	r4, sl
 800967c:	2205      	movs	r2, #5
 800967e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009682:	4854      	ldr	r0, [pc, #336]	; (80097d4 <_vfiprintf_r+0x220>)
 8009684:	f7f6 fe14 	bl	80002b0 <memchr>
 8009688:	9a04      	ldr	r2, [sp, #16]
 800968a:	b9d8      	cbnz	r0, 80096c4 <_vfiprintf_r+0x110>
 800968c:	06d1      	lsls	r1, r2, #27
 800968e:	bf44      	itt	mi
 8009690:	2320      	movmi	r3, #32
 8009692:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009696:	0713      	lsls	r3, r2, #28
 8009698:	bf44      	itt	mi
 800969a:	232b      	movmi	r3, #43	; 0x2b
 800969c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096a0:	f89a 3000 	ldrb.w	r3, [sl]
 80096a4:	2b2a      	cmp	r3, #42	; 0x2a
 80096a6:	d015      	beq.n	80096d4 <_vfiprintf_r+0x120>
 80096a8:	9a07      	ldr	r2, [sp, #28]
 80096aa:	4654      	mov	r4, sl
 80096ac:	2000      	movs	r0, #0
 80096ae:	f04f 0c0a 	mov.w	ip, #10
 80096b2:	4621      	mov	r1, r4
 80096b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096b8:	3b30      	subs	r3, #48	; 0x30
 80096ba:	2b09      	cmp	r3, #9
 80096bc:	d94d      	bls.n	800975a <_vfiprintf_r+0x1a6>
 80096be:	b1b0      	cbz	r0, 80096ee <_vfiprintf_r+0x13a>
 80096c0:	9207      	str	r2, [sp, #28]
 80096c2:	e014      	b.n	80096ee <_vfiprintf_r+0x13a>
 80096c4:	eba0 0308 	sub.w	r3, r0, r8
 80096c8:	fa09 f303 	lsl.w	r3, r9, r3
 80096cc:	4313      	orrs	r3, r2
 80096ce:	9304      	str	r3, [sp, #16]
 80096d0:	46a2      	mov	sl, r4
 80096d2:	e7d2      	b.n	800967a <_vfiprintf_r+0xc6>
 80096d4:	9b03      	ldr	r3, [sp, #12]
 80096d6:	1d19      	adds	r1, r3, #4
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	9103      	str	r1, [sp, #12]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	bfbb      	ittet	lt
 80096e0:	425b      	neglt	r3, r3
 80096e2:	f042 0202 	orrlt.w	r2, r2, #2
 80096e6:	9307      	strge	r3, [sp, #28]
 80096e8:	9307      	strlt	r3, [sp, #28]
 80096ea:	bfb8      	it	lt
 80096ec:	9204      	strlt	r2, [sp, #16]
 80096ee:	7823      	ldrb	r3, [r4, #0]
 80096f0:	2b2e      	cmp	r3, #46	; 0x2e
 80096f2:	d10c      	bne.n	800970e <_vfiprintf_r+0x15a>
 80096f4:	7863      	ldrb	r3, [r4, #1]
 80096f6:	2b2a      	cmp	r3, #42	; 0x2a
 80096f8:	d134      	bne.n	8009764 <_vfiprintf_r+0x1b0>
 80096fa:	9b03      	ldr	r3, [sp, #12]
 80096fc:	1d1a      	adds	r2, r3, #4
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	9203      	str	r2, [sp, #12]
 8009702:	2b00      	cmp	r3, #0
 8009704:	bfb8      	it	lt
 8009706:	f04f 33ff 	movlt.w	r3, #4294967295
 800970a:	3402      	adds	r4, #2
 800970c:	9305      	str	r3, [sp, #20]
 800970e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80097e4 <_vfiprintf_r+0x230>
 8009712:	7821      	ldrb	r1, [r4, #0]
 8009714:	2203      	movs	r2, #3
 8009716:	4650      	mov	r0, sl
 8009718:	f7f6 fdca 	bl	80002b0 <memchr>
 800971c:	b138      	cbz	r0, 800972e <_vfiprintf_r+0x17a>
 800971e:	9b04      	ldr	r3, [sp, #16]
 8009720:	eba0 000a 	sub.w	r0, r0, sl
 8009724:	2240      	movs	r2, #64	; 0x40
 8009726:	4082      	lsls	r2, r0
 8009728:	4313      	orrs	r3, r2
 800972a:	3401      	adds	r4, #1
 800972c:	9304      	str	r3, [sp, #16]
 800972e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009732:	4829      	ldr	r0, [pc, #164]	; (80097d8 <_vfiprintf_r+0x224>)
 8009734:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009738:	2206      	movs	r2, #6
 800973a:	f7f6 fdb9 	bl	80002b0 <memchr>
 800973e:	2800      	cmp	r0, #0
 8009740:	d03f      	beq.n	80097c2 <_vfiprintf_r+0x20e>
 8009742:	4b26      	ldr	r3, [pc, #152]	; (80097dc <_vfiprintf_r+0x228>)
 8009744:	bb1b      	cbnz	r3, 800978e <_vfiprintf_r+0x1da>
 8009746:	9b03      	ldr	r3, [sp, #12]
 8009748:	3307      	adds	r3, #7
 800974a:	f023 0307 	bic.w	r3, r3, #7
 800974e:	3308      	adds	r3, #8
 8009750:	9303      	str	r3, [sp, #12]
 8009752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009754:	443b      	add	r3, r7
 8009756:	9309      	str	r3, [sp, #36]	; 0x24
 8009758:	e768      	b.n	800962c <_vfiprintf_r+0x78>
 800975a:	fb0c 3202 	mla	r2, ip, r2, r3
 800975e:	460c      	mov	r4, r1
 8009760:	2001      	movs	r0, #1
 8009762:	e7a6      	b.n	80096b2 <_vfiprintf_r+0xfe>
 8009764:	2300      	movs	r3, #0
 8009766:	3401      	adds	r4, #1
 8009768:	9305      	str	r3, [sp, #20]
 800976a:	4619      	mov	r1, r3
 800976c:	f04f 0c0a 	mov.w	ip, #10
 8009770:	4620      	mov	r0, r4
 8009772:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009776:	3a30      	subs	r2, #48	; 0x30
 8009778:	2a09      	cmp	r2, #9
 800977a:	d903      	bls.n	8009784 <_vfiprintf_r+0x1d0>
 800977c:	2b00      	cmp	r3, #0
 800977e:	d0c6      	beq.n	800970e <_vfiprintf_r+0x15a>
 8009780:	9105      	str	r1, [sp, #20]
 8009782:	e7c4      	b.n	800970e <_vfiprintf_r+0x15a>
 8009784:	fb0c 2101 	mla	r1, ip, r1, r2
 8009788:	4604      	mov	r4, r0
 800978a:	2301      	movs	r3, #1
 800978c:	e7f0      	b.n	8009770 <_vfiprintf_r+0x1bc>
 800978e:	ab03      	add	r3, sp, #12
 8009790:	9300      	str	r3, [sp, #0]
 8009792:	462a      	mov	r2, r5
 8009794:	4b12      	ldr	r3, [pc, #72]	; (80097e0 <_vfiprintf_r+0x22c>)
 8009796:	a904      	add	r1, sp, #16
 8009798:	4630      	mov	r0, r6
 800979a:	f7fd fd77 	bl	800728c <_printf_float>
 800979e:	4607      	mov	r7, r0
 80097a0:	1c78      	adds	r0, r7, #1
 80097a2:	d1d6      	bne.n	8009752 <_vfiprintf_r+0x19e>
 80097a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097a6:	07d9      	lsls	r1, r3, #31
 80097a8:	d405      	bmi.n	80097b6 <_vfiprintf_r+0x202>
 80097aa:	89ab      	ldrh	r3, [r5, #12]
 80097ac:	059a      	lsls	r2, r3, #22
 80097ae:	d402      	bmi.n	80097b6 <_vfiprintf_r+0x202>
 80097b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097b2:	f7fe faa3 	bl	8007cfc <__retarget_lock_release_recursive>
 80097b6:	89ab      	ldrh	r3, [r5, #12]
 80097b8:	065b      	lsls	r3, r3, #25
 80097ba:	f53f af1d 	bmi.w	80095f8 <_vfiprintf_r+0x44>
 80097be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097c0:	e71c      	b.n	80095fc <_vfiprintf_r+0x48>
 80097c2:	ab03      	add	r3, sp, #12
 80097c4:	9300      	str	r3, [sp, #0]
 80097c6:	462a      	mov	r2, r5
 80097c8:	4b05      	ldr	r3, [pc, #20]	; (80097e0 <_vfiprintf_r+0x22c>)
 80097ca:	a904      	add	r1, sp, #16
 80097cc:	4630      	mov	r0, r6
 80097ce:	f7fe f801 	bl	80077d4 <_printf_i>
 80097d2:	e7e4      	b.n	800979e <_vfiprintf_r+0x1ea>
 80097d4:	08009f00 	.word	0x08009f00
 80097d8:	08009f0a 	.word	0x08009f0a
 80097dc:	0800728d 	.word	0x0800728d
 80097e0:	08009591 	.word	0x08009591
 80097e4:	08009f06 	.word	0x08009f06

080097e8 <__swbuf_r>:
 80097e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ea:	460e      	mov	r6, r1
 80097ec:	4614      	mov	r4, r2
 80097ee:	4605      	mov	r5, r0
 80097f0:	b118      	cbz	r0, 80097fa <__swbuf_r+0x12>
 80097f2:	6a03      	ldr	r3, [r0, #32]
 80097f4:	b90b      	cbnz	r3, 80097fa <__swbuf_r+0x12>
 80097f6:	f7fe f99b 	bl	8007b30 <__sinit>
 80097fa:	69a3      	ldr	r3, [r4, #24]
 80097fc:	60a3      	str	r3, [r4, #8]
 80097fe:	89a3      	ldrh	r3, [r4, #12]
 8009800:	071a      	lsls	r2, r3, #28
 8009802:	d525      	bpl.n	8009850 <__swbuf_r+0x68>
 8009804:	6923      	ldr	r3, [r4, #16]
 8009806:	b31b      	cbz	r3, 8009850 <__swbuf_r+0x68>
 8009808:	6823      	ldr	r3, [r4, #0]
 800980a:	6922      	ldr	r2, [r4, #16]
 800980c:	1a98      	subs	r0, r3, r2
 800980e:	6963      	ldr	r3, [r4, #20]
 8009810:	b2f6      	uxtb	r6, r6
 8009812:	4283      	cmp	r3, r0
 8009814:	4637      	mov	r7, r6
 8009816:	dc04      	bgt.n	8009822 <__swbuf_r+0x3a>
 8009818:	4621      	mov	r1, r4
 800981a:	4628      	mov	r0, r5
 800981c:	f7ff fe1c 	bl	8009458 <_fflush_r>
 8009820:	b9e0      	cbnz	r0, 800985c <__swbuf_r+0x74>
 8009822:	68a3      	ldr	r3, [r4, #8]
 8009824:	3b01      	subs	r3, #1
 8009826:	60a3      	str	r3, [r4, #8]
 8009828:	6823      	ldr	r3, [r4, #0]
 800982a:	1c5a      	adds	r2, r3, #1
 800982c:	6022      	str	r2, [r4, #0]
 800982e:	701e      	strb	r6, [r3, #0]
 8009830:	6962      	ldr	r2, [r4, #20]
 8009832:	1c43      	adds	r3, r0, #1
 8009834:	429a      	cmp	r2, r3
 8009836:	d004      	beq.n	8009842 <__swbuf_r+0x5a>
 8009838:	89a3      	ldrh	r3, [r4, #12]
 800983a:	07db      	lsls	r3, r3, #31
 800983c:	d506      	bpl.n	800984c <__swbuf_r+0x64>
 800983e:	2e0a      	cmp	r6, #10
 8009840:	d104      	bne.n	800984c <__swbuf_r+0x64>
 8009842:	4621      	mov	r1, r4
 8009844:	4628      	mov	r0, r5
 8009846:	f7ff fe07 	bl	8009458 <_fflush_r>
 800984a:	b938      	cbnz	r0, 800985c <__swbuf_r+0x74>
 800984c:	4638      	mov	r0, r7
 800984e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009850:	4621      	mov	r1, r4
 8009852:	4628      	mov	r0, r5
 8009854:	f000 f806 	bl	8009864 <__swsetup_r>
 8009858:	2800      	cmp	r0, #0
 800985a:	d0d5      	beq.n	8009808 <__swbuf_r+0x20>
 800985c:	f04f 37ff 	mov.w	r7, #4294967295
 8009860:	e7f4      	b.n	800984c <__swbuf_r+0x64>
	...

08009864 <__swsetup_r>:
 8009864:	b538      	push	{r3, r4, r5, lr}
 8009866:	4b2a      	ldr	r3, [pc, #168]	; (8009910 <__swsetup_r+0xac>)
 8009868:	4605      	mov	r5, r0
 800986a:	6818      	ldr	r0, [r3, #0]
 800986c:	460c      	mov	r4, r1
 800986e:	b118      	cbz	r0, 8009878 <__swsetup_r+0x14>
 8009870:	6a03      	ldr	r3, [r0, #32]
 8009872:	b90b      	cbnz	r3, 8009878 <__swsetup_r+0x14>
 8009874:	f7fe f95c 	bl	8007b30 <__sinit>
 8009878:	89a3      	ldrh	r3, [r4, #12]
 800987a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800987e:	0718      	lsls	r0, r3, #28
 8009880:	d422      	bmi.n	80098c8 <__swsetup_r+0x64>
 8009882:	06d9      	lsls	r1, r3, #27
 8009884:	d407      	bmi.n	8009896 <__swsetup_r+0x32>
 8009886:	2309      	movs	r3, #9
 8009888:	602b      	str	r3, [r5, #0]
 800988a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800988e:	81a3      	strh	r3, [r4, #12]
 8009890:	f04f 30ff 	mov.w	r0, #4294967295
 8009894:	e034      	b.n	8009900 <__swsetup_r+0x9c>
 8009896:	0758      	lsls	r0, r3, #29
 8009898:	d512      	bpl.n	80098c0 <__swsetup_r+0x5c>
 800989a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800989c:	b141      	cbz	r1, 80098b0 <__swsetup_r+0x4c>
 800989e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098a2:	4299      	cmp	r1, r3
 80098a4:	d002      	beq.n	80098ac <__swsetup_r+0x48>
 80098a6:	4628      	mov	r0, r5
 80098a8:	f7ff f8b4 	bl	8008a14 <_free_r>
 80098ac:	2300      	movs	r3, #0
 80098ae:	6363      	str	r3, [r4, #52]	; 0x34
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80098b6:	81a3      	strh	r3, [r4, #12]
 80098b8:	2300      	movs	r3, #0
 80098ba:	6063      	str	r3, [r4, #4]
 80098bc:	6923      	ldr	r3, [r4, #16]
 80098be:	6023      	str	r3, [r4, #0]
 80098c0:	89a3      	ldrh	r3, [r4, #12]
 80098c2:	f043 0308 	orr.w	r3, r3, #8
 80098c6:	81a3      	strh	r3, [r4, #12]
 80098c8:	6923      	ldr	r3, [r4, #16]
 80098ca:	b94b      	cbnz	r3, 80098e0 <__swsetup_r+0x7c>
 80098cc:	89a3      	ldrh	r3, [r4, #12]
 80098ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80098d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098d6:	d003      	beq.n	80098e0 <__swsetup_r+0x7c>
 80098d8:	4621      	mov	r1, r4
 80098da:	4628      	mov	r0, r5
 80098dc:	f000 f884 	bl	80099e8 <__smakebuf_r>
 80098e0:	89a0      	ldrh	r0, [r4, #12]
 80098e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098e6:	f010 0301 	ands.w	r3, r0, #1
 80098ea:	d00a      	beq.n	8009902 <__swsetup_r+0x9e>
 80098ec:	2300      	movs	r3, #0
 80098ee:	60a3      	str	r3, [r4, #8]
 80098f0:	6963      	ldr	r3, [r4, #20]
 80098f2:	425b      	negs	r3, r3
 80098f4:	61a3      	str	r3, [r4, #24]
 80098f6:	6923      	ldr	r3, [r4, #16]
 80098f8:	b943      	cbnz	r3, 800990c <__swsetup_r+0xa8>
 80098fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098fe:	d1c4      	bne.n	800988a <__swsetup_r+0x26>
 8009900:	bd38      	pop	{r3, r4, r5, pc}
 8009902:	0781      	lsls	r1, r0, #30
 8009904:	bf58      	it	pl
 8009906:	6963      	ldrpl	r3, [r4, #20]
 8009908:	60a3      	str	r3, [r4, #8]
 800990a:	e7f4      	b.n	80098f6 <__swsetup_r+0x92>
 800990c:	2000      	movs	r0, #0
 800990e:	e7f7      	b.n	8009900 <__swsetup_r+0x9c>
 8009910:	200001d0 	.word	0x200001d0

08009914 <_raise_r>:
 8009914:	291f      	cmp	r1, #31
 8009916:	b538      	push	{r3, r4, r5, lr}
 8009918:	4604      	mov	r4, r0
 800991a:	460d      	mov	r5, r1
 800991c:	d904      	bls.n	8009928 <_raise_r+0x14>
 800991e:	2316      	movs	r3, #22
 8009920:	6003      	str	r3, [r0, #0]
 8009922:	f04f 30ff 	mov.w	r0, #4294967295
 8009926:	bd38      	pop	{r3, r4, r5, pc}
 8009928:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800992a:	b112      	cbz	r2, 8009932 <_raise_r+0x1e>
 800992c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009930:	b94b      	cbnz	r3, 8009946 <_raise_r+0x32>
 8009932:	4620      	mov	r0, r4
 8009934:	f000 f830 	bl	8009998 <_getpid_r>
 8009938:	462a      	mov	r2, r5
 800993a:	4601      	mov	r1, r0
 800993c:	4620      	mov	r0, r4
 800993e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009942:	f000 b817 	b.w	8009974 <_kill_r>
 8009946:	2b01      	cmp	r3, #1
 8009948:	d00a      	beq.n	8009960 <_raise_r+0x4c>
 800994a:	1c59      	adds	r1, r3, #1
 800994c:	d103      	bne.n	8009956 <_raise_r+0x42>
 800994e:	2316      	movs	r3, #22
 8009950:	6003      	str	r3, [r0, #0]
 8009952:	2001      	movs	r0, #1
 8009954:	e7e7      	b.n	8009926 <_raise_r+0x12>
 8009956:	2400      	movs	r4, #0
 8009958:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800995c:	4628      	mov	r0, r5
 800995e:	4798      	blx	r3
 8009960:	2000      	movs	r0, #0
 8009962:	e7e0      	b.n	8009926 <_raise_r+0x12>

08009964 <raise>:
 8009964:	4b02      	ldr	r3, [pc, #8]	; (8009970 <raise+0xc>)
 8009966:	4601      	mov	r1, r0
 8009968:	6818      	ldr	r0, [r3, #0]
 800996a:	f7ff bfd3 	b.w	8009914 <_raise_r>
 800996e:	bf00      	nop
 8009970:	200001d0 	.word	0x200001d0

08009974 <_kill_r>:
 8009974:	b538      	push	{r3, r4, r5, lr}
 8009976:	4d07      	ldr	r5, [pc, #28]	; (8009994 <_kill_r+0x20>)
 8009978:	2300      	movs	r3, #0
 800997a:	4604      	mov	r4, r0
 800997c:	4608      	mov	r0, r1
 800997e:	4611      	mov	r1, r2
 8009980:	602b      	str	r3, [r5, #0]
 8009982:	f7f8 fc37 	bl	80021f4 <_kill>
 8009986:	1c43      	adds	r3, r0, #1
 8009988:	d102      	bne.n	8009990 <_kill_r+0x1c>
 800998a:	682b      	ldr	r3, [r5, #0]
 800998c:	b103      	cbz	r3, 8009990 <_kill_r+0x1c>
 800998e:	6023      	str	r3, [r4, #0]
 8009990:	bd38      	pop	{r3, r4, r5, pc}
 8009992:	bf00      	nop
 8009994:	20000eec 	.word	0x20000eec

08009998 <_getpid_r>:
 8009998:	f7f8 bc24 	b.w	80021e4 <_getpid>

0800999c <__swhatbuf_r>:
 800999c:	b570      	push	{r4, r5, r6, lr}
 800999e:	460c      	mov	r4, r1
 80099a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099a4:	2900      	cmp	r1, #0
 80099a6:	b096      	sub	sp, #88	; 0x58
 80099a8:	4615      	mov	r5, r2
 80099aa:	461e      	mov	r6, r3
 80099ac:	da0d      	bge.n	80099ca <__swhatbuf_r+0x2e>
 80099ae:	89a3      	ldrh	r3, [r4, #12]
 80099b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80099b4:	f04f 0100 	mov.w	r1, #0
 80099b8:	bf0c      	ite	eq
 80099ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80099be:	2340      	movne	r3, #64	; 0x40
 80099c0:	2000      	movs	r0, #0
 80099c2:	6031      	str	r1, [r6, #0]
 80099c4:	602b      	str	r3, [r5, #0]
 80099c6:	b016      	add	sp, #88	; 0x58
 80099c8:	bd70      	pop	{r4, r5, r6, pc}
 80099ca:	466a      	mov	r2, sp
 80099cc:	f000 f848 	bl	8009a60 <_fstat_r>
 80099d0:	2800      	cmp	r0, #0
 80099d2:	dbec      	blt.n	80099ae <__swhatbuf_r+0x12>
 80099d4:	9901      	ldr	r1, [sp, #4]
 80099d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80099da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80099de:	4259      	negs	r1, r3
 80099e0:	4159      	adcs	r1, r3
 80099e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099e6:	e7eb      	b.n	80099c0 <__swhatbuf_r+0x24>

080099e8 <__smakebuf_r>:
 80099e8:	898b      	ldrh	r3, [r1, #12]
 80099ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099ec:	079d      	lsls	r5, r3, #30
 80099ee:	4606      	mov	r6, r0
 80099f0:	460c      	mov	r4, r1
 80099f2:	d507      	bpl.n	8009a04 <__smakebuf_r+0x1c>
 80099f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099f8:	6023      	str	r3, [r4, #0]
 80099fa:	6123      	str	r3, [r4, #16]
 80099fc:	2301      	movs	r3, #1
 80099fe:	6163      	str	r3, [r4, #20]
 8009a00:	b002      	add	sp, #8
 8009a02:	bd70      	pop	{r4, r5, r6, pc}
 8009a04:	ab01      	add	r3, sp, #4
 8009a06:	466a      	mov	r2, sp
 8009a08:	f7ff ffc8 	bl	800999c <__swhatbuf_r>
 8009a0c:	9900      	ldr	r1, [sp, #0]
 8009a0e:	4605      	mov	r5, r0
 8009a10:	4630      	mov	r0, r6
 8009a12:	f7ff f873 	bl	8008afc <_malloc_r>
 8009a16:	b948      	cbnz	r0, 8009a2c <__smakebuf_r+0x44>
 8009a18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a1c:	059a      	lsls	r2, r3, #22
 8009a1e:	d4ef      	bmi.n	8009a00 <__smakebuf_r+0x18>
 8009a20:	f023 0303 	bic.w	r3, r3, #3
 8009a24:	f043 0302 	orr.w	r3, r3, #2
 8009a28:	81a3      	strh	r3, [r4, #12]
 8009a2a:	e7e3      	b.n	80099f4 <__smakebuf_r+0xc>
 8009a2c:	89a3      	ldrh	r3, [r4, #12]
 8009a2e:	6020      	str	r0, [r4, #0]
 8009a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a34:	81a3      	strh	r3, [r4, #12]
 8009a36:	9b00      	ldr	r3, [sp, #0]
 8009a38:	6163      	str	r3, [r4, #20]
 8009a3a:	9b01      	ldr	r3, [sp, #4]
 8009a3c:	6120      	str	r0, [r4, #16]
 8009a3e:	b15b      	cbz	r3, 8009a58 <__smakebuf_r+0x70>
 8009a40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a44:	4630      	mov	r0, r6
 8009a46:	f000 f81d 	bl	8009a84 <_isatty_r>
 8009a4a:	b128      	cbz	r0, 8009a58 <__smakebuf_r+0x70>
 8009a4c:	89a3      	ldrh	r3, [r4, #12]
 8009a4e:	f023 0303 	bic.w	r3, r3, #3
 8009a52:	f043 0301 	orr.w	r3, r3, #1
 8009a56:	81a3      	strh	r3, [r4, #12]
 8009a58:	89a3      	ldrh	r3, [r4, #12]
 8009a5a:	431d      	orrs	r5, r3
 8009a5c:	81a5      	strh	r5, [r4, #12]
 8009a5e:	e7cf      	b.n	8009a00 <__smakebuf_r+0x18>

08009a60 <_fstat_r>:
 8009a60:	b538      	push	{r3, r4, r5, lr}
 8009a62:	4d07      	ldr	r5, [pc, #28]	; (8009a80 <_fstat_r+0x20>)
 8009a64:	2300      	movs	r3, #0
 8009a66:	4604      	mov	r4, r0
 8009a68:	4608      	mov	r0, r1
 8009a6a:	4611      	mov	r1, r2
 8009a6c:	602b      	str	r3, [r5, #0]
 8009a6e:	f7f8 fc04 	bl	800227a <_fstat>
 8009a72:	1c43      	adds	r3, r0, #1
 8009a74:	d102      	bne.n	8009a7c <_fstat_r+0x1c>
 8009a76:	682b      	ldr	r3, [r5, #0]
 8009a78:	b103      	cbz	r3, 8009a7c <_fstat_r+0x1c>
 8009a7a:	6023      	str	r3, [r4, #0]
 8009a7c:	bd38      	pop	{r3, r4, r5, pc}
 8009a7e:	bf00      	nop
 8009a80:	20000eec 	.word	0x20000eec

08009a84 <_isatty_r>:
 8009a84:	b538      	push	{r3, r4, r5, lr}
 8009a86:	4d06      	ldr	r5, [pc, #24]	; (8009aa0 <_isatty_r+0x1c>)
 8009a88:	2300      	movs	r3, #0
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	4608      	mov	r0, r1
 8009a8e:	602b      	str	r3, [r5, #0]
 8009a90:	f7f8 fc03 	bl	800229a <_isatty>
 8009a94:	1c43      	adds	r3, r0, #1
 8009a96:	d102      	bne.n	8009a9e <_isatty_r+0x1a>
 8009a98:	682b      	ldr	r3, [r5, #0]
 8009a9a:	b103      	cbz	r3, 8009a9e <_isatty_r+0x1a>
 8009a9c:	6023      	str	r3, [r4, #0]
 8009a9e:	bd38      	pop	{r3, r4, r5, pc}
 8009aa0:	20000eec 	.word	0x20000eec

08009aa4 <round>:
 8009aa4:	ec53 2b10 	vmov	r2, r3, d0
 8009aa8:	b570      	push	{r4, r5, r6, lr}
 8009aaa:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8009aae:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8009ab2:	2813      	cmp	r0, #19
 8009ab4:	ee10 5a10 	vmov	r5, s0
 8009ab8:	4619      	mov	r1, r3
 8009aba:	dc18      	bgt.n	8009aee <round+0x4a>
 8009abc:	2800      	cmp	r0, #0
 8009abe:	da09      	bge.n	8009ad4 <round+0x30>
 8009ac0:	3001      	adds	r0, #1
 8009ac2:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8009ac6:	d103      	bne.n	8009ad0 <round+0x2c>
 8009ac8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8009acc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	e02a      	b.n	8009b2a <round+0x86>
 8009ad4:	4c16      	ldr	r4, [pc, #88]	; (8009b30 <round+0x8c>)
 8009ad6:	4104      	asrs	r4, r0
 8009ad8:	ea03 0604 	and.w	r6, r3, r4
 8009adc:	4316      	orrs	r6, r2
 8009ade:	d011      	beq.n	8009b04 <round+0x60>
 8009ae0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009ae4:	4103      	asrs	r3, r0
 8009ae6:	440b      	add	r3, r1
 8009ae8:	ea23 0104 	bic.w	r1, r3, r4
 8009aec:	e7f0      	b.n	8009ad0 <round+0x2c>
 8009aee:	2833      	cmp	r0, #51	; 0x33
 8009af0:	dd0b      	ble.n	8009b0a <round+0x66>
 8009af2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009af6:	d105      	bne.n	8009b04 <round+0x60>
 8009af8:	ee10 0a10 	vmov	r0, s0
 8009afc:	f7f6 fc36 	bl	800036c <__adddf3>
 8009b00:	4602      	mov	r2, r0
 8009b02:	460b      	mov	r3, r1
 8009b04:	ec43 2b10 	vmov	d0, r2, r3
 8009b08:	bd70      	pop	{r4, r5, r6, pc}
 8009b0a:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8009b0e:	f04f 34ff 	mov.w	r4, #4294967295
 8009b12:	40f4      	lsrs	r4, r6
 8009b14:	4214      	tst	r4, r2
 8009b16:	d0f5      	beq.n	8009b04 <round+0x60>
 8009b18:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	4083      	lsls	r3, r0
 8009b20:	195b      	adds	r3, r3, r5
 8009b22:	bf28      	it	cs
 8009b24:	3101      	addcs	r1, #1
 8009b26:	ea23 0304 	bic.w	r3, r3, r4
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	e7e9      	b.n	8009b04 <round+0x60>
 8009b30:	000fffff 	.word	0x000fffff

08009b34 <_sbrk>:
 8009b34:	4a04      	ldr	r2, [pc, #16]	; (8009b48 <_sbrk+0x14>)
 8009b36:	6811      	ldr	r1, [r2, #0]
 8009b38:	4603      	mov	r3, r0
 8009b3a:	b909      	cbnz	r1, 8009b40 <_sbrk+0xc>
 8009b3c:	4903      	ldr	r1, [pc, #12]	; (8009b4c <_sbrk+0x18>)
 8009b3e:	6011      	str	r1, [r2, #0]
 8009b40:	6810      	ldr	r0, [r2, #0]
 8009b42:	4403      	add	r3, r0
 8009b44:	6013      	str	r3, [r2, #0]
 8009b46:	4770      	bx	lr
 8009b48:	20000efc 	.word	0x20000efc
 8009b4c:	20000f00 	.word	0x20000f00

08009b50 <_init>:
 8009b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b52:	bf00      	nop
 8009b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b56:	bc08      	pop	{r3}
 8009b58:	469e      	mov	lr, r3
 8009b5a:	4770      	bx	lr

08009b5c <_fini>:
 8009b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5e:	bf00      	nop
 8009b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b62:	bc08      	pop	{r3}
 8009b64:	469e      	mov	lr, r3
 8009b66:	4770      	bx	lr
