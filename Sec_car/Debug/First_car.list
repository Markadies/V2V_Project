
First_car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b34  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08009d04  08009d04  00019d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e98  08009e98  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08009e98  08009e98  00019e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ea0  08009ea0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ea0  08009ea0  00019ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ea4  08009ea4  00019ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08009ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014984  20000014  08009ebc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014998  08009ebc  00024998  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d85b  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004350  00000000  00000000  0003d8e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ae0  00000000  00000000  00041c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014fd  00000000  00000000  00043718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025327  00000000  00000000  00044c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002206a  00000000  00000000  00069f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2bc9  00000000  00000000  0008bfa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007218  00000000  00000000  0016eb70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  00175d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009cec 	.word	0x08009cec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	08009cec 	.word	0x08009cec

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	200133c4 	.word	0x200133c4

080002a4 <__aeabi_drsub>:
 80002a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a8:	e002      	b.n	80002b0 <__adddf3>
 80002aa:	bf00      	nop

080002ac <__aeabi_dsub>:
 80002ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002b0 <__adddf3>:
 80002b0:	b530      	push	{r4, r5, lr}
 80002b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ba:	ea94 0f05 	teq	r4, r5
 80002be:	bf08      	it	eq
 80002c0:	ea90 0f02 	teqeq	r0, r2
 80002c4:	bf1f      	itttt	ne
 80002c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d6:	f000 80e2 	beq.w	800049e <__adddf3+0x1ee>
 80002da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e2:	bfb8      	it	lt
 80002e4:	426d      	neglt	r5, r5
 80002e6:	dd0c      	ble.n	8000302 <__adddf3+0x52>
 80002e8:	442c      	add	r4, r5
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	ea82 0000 	eor.w	r0, r2, r0
 80002f6:	ea83 0101 	eor.w	r1, r3, r1
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	2d36      	cmp	r5, #54	; 0x36
 8000304:	bf88      	it	hi
 8000306:	bd30      	pophi	{r4, r5, pc}
 8000308:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800030c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000310:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000314:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x70>
 800031a:	4240      	negs	r0, r0
 800031c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000320:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000324:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000328:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x84>
 800032e:	4252      	negs	r2, r2
 8000330:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000334:	ea94 0f05 	teq	r4, r5
 8000338:	f000 80a7 	beq.w	800048a <__adddf3+0x1da>
 800033c:	f1a4 0401 	sub.w	r4, r4, #1
 8000340:	f1d5 0e20 	rsbs	lr, r5, #32
 8000344:	db0d      	blt.n	8000362 <__adddf3+0xb2>
 8000346:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034a:	fa22 f205 	lsr.w	r2, r2, r5
 800034e:	1880      	adds	r0, r0, r2
 8000350:	f141 0100 	adc.w	r1, r1, #0
 8000354:	fa03 f20e 	lsl.w	r2, r3, lr
 8000358:	1880      	adds	r0, r0, r2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	4159      	adcs	r1, r3
 8000360:	e00e      	b.n	8000380 <__adddf3+0xd0>
 8000362:	f1a5 0520 	sub.w	r5, r5, #32
 8000366:	f10e 0e20 	add.w	lr, lr, #32
 800036a:	2a01      	cmp	r2, #1
 800036c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000370:	bf28      	it	cs
 8000372:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	18c0      	adds	r0, r0, r3
 800037c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000380:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000384:	d507      	bpl.n	8000396 <__adddf3+0xe6>
 8000386:	f04f 0e00 	mov.w	lr, #0
 800038a:	f1dc 0c00 	rsbs	ip, ip, #0
 800038e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000392:	eb6e 0101 	sbc.w	r1, lr, r1
 8000396:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800039a:	d31b      	bcc.n	80003d4 <__adddf3+0x124>
 800039c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003a0:	d30c      	bcc.n	80003bc <__adddf3+0x10c>
 80003a2:	0849      	lsrs	r1, r1, #1
 80003a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003ac:	f104 0401 	add.w	r4, r4, #1
 80003b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b8:	f080 809a 	bcs.w	80004f0 <__adddf3+0x240>
 80003bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c0:	bf08      	it	eq
 80003c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c6:	f150 0000 	adcs.w	r0, r0, #0
 80003ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ce:	ea41 0105 	orr.w	r1, r1, r5
 80003d2:	bd30      	pop	{r4, r5, pc}
 80003d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d8:	4140      	adcs	r0, r0
 80003da:	eb41 0101 	adc.w	r1, r1, r1
 80003de:	3c01      	subs	r4, #1
 80003e0:	bf28      	it	cs
 80003e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e6:	d2e9      	bcs.n	80003bc <__adddf3+0x10c>
 80003e8:	f091 0f00 	teq	r1, #0
 80003ec:	bf04      	itt	eq
 80003ee:	4601      	moveq	r1, r0
 80003f0:	2000      	moveq	r0, #0
 80003f2:	fab1 f381 	clz	r3, r1
 80003f6:	bf08      	it	eq
 80003f8:	3320      	addeq	r3, #32
 80003fa:	f1a3 030b 	sub.w	r3, r3, #11
 80003fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000402:	da0c      	bge.n	800041e <__adddf3+0x16e>
 8000404:	320c      	adds	r2, #12
 8000406:	dd08      	ble.n	800041a <__adddf3+0x16a>
 8000408:	f102 0c14 	add.w	ip, r2, #20
 800040c:	f1c2 020c 	rsb	r2, r2, #12
 8000410:	fa01 f00c 	lsl.w	r0, r1, ip
 8000414:	fa21 f102 	lsr.w	r1, r1, r2
 8000418:	e00c      	b.n	8000434 <__adddf3+0x184>
 800041a:	f102 0214 	add.w	r2, r2, #20
 800041e:	bfd8      	it	le
 8000420:	f1c2 0c20 	rsble	ip, r2, #32
 8000424:	fa01 f102 	lsl.w	r1, r1, r2
 8000428:	fa20 fc0c 	lsr.w	ip, r0, ip
 800042c:	bfdc      	itt	le
 800042e:	ea41 010c 	orrle.w	r1, r1, ip
 8000432:	4090      	lslle	r0, r2
 8000434:	1ae4      	subs	r4, r4, r3
 8000436:	bfa2      	ittt	ge
 8000438:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800043c:	4329      	orrge	r1, r5
 800043e:	bd30      	popge	{r4, r5, pc}
 8000440:	ea6f 0404 	mvn.w	r4, r4
 8000444:	3c1f      	subs	r4, #31
 8000446:	da1c      	bge.n	8000482 <__adddf3+0x1d2>
 8000448:	340c      	adds	r4, #12
 800044a:	dc0e      	bgt.n	800046a <__adddf3+0x1ba>
 800044c:	f104 0414 	add.w	r4, r4, #20
 8000450:	f1c4 0220 	rsb	r2, r4, #32
 8000454:	fa20 f004 	lsr.w	r0, r0, r4
 8000458:	fa01 f302 	lsl.w	r3, r1, r2
 800045c:	ea40 0003 	orr.w	r0, r0, r3
 8000460:	fa21 f304 	lsr.w	r3, r1, r4
 8000464:	ea45 0103 	orr.w	r1, r5, r3
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	f1c4 040c 	rsb	r4, r4, #12
 800046e:	f1c4 0220 	rsb	r2, r4, #32
 8000472:	fa20 f002 	lsr.w	r0, r0, r2
 8000476:	fa01 f304 	lsl.w	r3, r1, r4
 800047a:	ea40 0003 	orr.w	r0, r0, r3
 800047e:	4629      	mov	r1, r5
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	fa21 f004 	lsr.w	r0, r1, r4
 8000486:	4629      	mov	r1, r5
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	f094 0f00 	teq	r4, #0
 800048e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000492:	bf06      	itte	eq
 8000494:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000498:	3401      	addeq	r4, #1
 800049a:	3d01      	subne	r5, #1
 800049c:	e74e      	b.n	800033c <__adddf3+0x8c>
 800049e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a2:	bf18      	it	ne
 80004a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a8:	d029      	beq.n	80004fe <__adddf3+0x24e>
 80004aa:	ea94 0f05 	teq	r4, r5
 80004ae:	bf08      	it	eq
 80004b0:	ea90 0f02 	teqeq	r0, r2
 80004b4:	d005      	beq.n	80004c2 <__adddf3+0x212>
 80004b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ba:	bf04      	itt	eq
 80004bc:	4619      	moveq	r1, r3
 80004be:	4610      	moveq	r0, r2
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	ea91 0f03 	teq	r1, r3
 80004c6:	bf1e      	ittt	ne
 80004c8:	2100      	movne	r1, #0
 80004ca:	2000      	movne	r0, #0
 80004cc:	bd30      	popne	{r4, r5, pc}
 80004ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d2:	d105      	bne.n	80004e0 <__adddf3+0x230>
 80004d4:	0040      	lsls	r0, r0, #1
 80004d6:	4149      	adcs	r1, r1
 80004d8:	bf28      	it	cs
 80004da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e4:	bf3c      	itt	cc
 80004e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ea:	bd30      	popcc	{r4, r5, pc}
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f8:	f04f 0000 	mov.w	r0, #0
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000502:	bf1a      	itte	ne
 8000504:	4619      	movne	r1, r3
 8000506:	4610      	movne	r0, r2
 8000508:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800050c:	bf1c      	itt	ne
 800050e:	460b      	movne	r3, r1
 8000510:	4602      	movne	r2, r0
 8000512:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000516:	bf06      	itte	eq
 8000518:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800051c:	ea91 0f03 	teqeq	r1, r3
 8000520:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	bf00      	nop

08000528 <__aeabi_ui2d>:
 8000528:	f090 0f00 	teq	r0, #0
 800052c:	bf04      	itt	eq
 800052e:	2100      	moveq	r1, #0
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000538:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053c:	f04f 0500 	mov.w	r5, #0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e750      	b.n	80003e8 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_i2d>:
 8000548:	f090 0f00 	teq	r0, #0
 800054c:	bf04      	itt	eq
 800054e:	2100      	moveq	r1, #0
 8000550:	4770      	bxeq	lr
 8000552:	b530      	push	{r4, r5, lr}
 8000554:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000558:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000560:	bf48      	it	mi
 8000562:	4240      	negmi	r0, r0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e73e      	b.n	80003e8 <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_f2d>:
 800056c:	0042      	lsls	r2, r0, #1
 800056e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000572:	ea4f 0131 	mov.w	r1, r1, rrx
 8000576:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057a:	bf1f      	itttt	ne
 800057c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000580:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000584:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000588:	4770      	bxne	lr
 800058a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058e:	bf08      	it	eq
 8000590:	4770      	bxeq	lr
 8000592:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000596:	bf04      	itt	eq
 8000598:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ac:	e71c      	b.n	80003e8 <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_ul2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	e00a      	b.n	80005d6 <__aeabi_l2d+0x16>

080005c0 <__aeabi_l2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ce:	d502      	bpl.n	80005d6 <__aeabi_l2d+0x16>
 80005d0:	4240      	negs	r0, r0
 80005d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e2:	f43f aed8 	beq.w	8000396 <__adddf3+0xe6>
 80005e6:	f04f 0203 	mov.w	r2, #3
 80005ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ee:	bf18      	it	ne
 80005f0:	3203      	addne	r2, #3
 80005f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f6:	bf18      	it	ne
 80005f8:	3203      	addne	r2, #3
 80005fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fe:	f1c2 0320 	rsb	r3, r2, #32
 8000602:	fa00 fc03 	lsl.w	ip, r0, r3
 8000606:	fa20 f002 	lsr.w	r0, r0, r2
 800060a:	fa01 fe03 	lsl.w	lr, r1, r3
 800060e:	ea40 000e 	orr.w	r0, r0, lr
 8000612:	fa21 f102 	lsr.w	r1, r1, r2
 8000616:	4414      	add	r4, r2
 8000618:	e6bd      	b.n	8000396 <__adddf3+0xe6>
 800061a:	bf00      	nop

0800061c <__aeabi_dmul>:
 800061c:	b570      	push	{r4, r5, r6, lr}
 800061e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000622:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000626:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062a:	bf1d      	ittte	ne
 800062c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000630:	ea94 0f0c 	teqne	r4, ip
 8000634:	ea95 0f0c 	teqne	r5, ip
 8000638:	f000 f8de 	bleq	80007f8 <__aeabi_dmul+0x1dc>
 800063c:	442c      	add	r4, r5
 800063e:	ea81 0603 	eor.w	r6, r1, r3
 8000642:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000646:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064e:	bf18      	it	ne
 8000650:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800065c:	d038      	beq.n	80006d0 <__aeabi_dmul+0xb4>
 800065e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000662:	f04f 0500 	mov.w	r5, #0
 8000666:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000672:	f04f 0600 	mov.w	r6, #0
 8000676:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067a:	f09c 0f00 	teq	ip, #0
 800067e:	bf18      	it	ne
 8000680:	f04e 0e01 	orrne.w	lr, lr, #1
 8000684:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000688:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800068c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000690:	d204      	bcs.n	800069c <__aeabi_dmul+0x80>
 8000692:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000696:	416d      	adcs	r5, r5
 8000698:	eb46 0606 	adc.w	r6, r6, r6
 800069c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b4:	bf88      	it	hi
 80006b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ba:	d81e      	bhi.n	80006fa <__aeabi_dmul+0xde>
 80006bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006c0:	bf08      	it	eq
 80006c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c6:	f150 0000 	adcs.w	r0, r0, #0
 80006ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d4:	ea46 0101 	orr.w	r1, r6, r1
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	ea81 0103 	eor.w	r1, r1, r3
 80006e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e4:	bfc2      	ittt	gt
 80006e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ee:	bd70      	popgt	{r4, r5, r6, pc}
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f04f 0e00 	mov.w	lr, #0
 80006f8:	3c01      	subs	r4, #1
 80006fa:	f300 80ab 	bgt.w	8000854 <__aeabi_dmul+0x238>
 80006fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000702:	bfde      	ittt	le
 8000704:	2000      	movle	r0, #0
 8000706:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800070a:	bd70      	pople	{r4, r5, r6, pc}
 800070c:	f1c4 0400 	rsb	r4, r4, #0
 8000710:	3c20      	subs	r4, #32
 8000712:	da35      	bge.n	8000780 <__aeabi_dmul+0x164>
 8000714:	340c      	adds	r4, #12
 8000716:	dc1b      	bgt.n	8000750 <__aeabi_dmul+0x134>
 8000718:	f104 0414 	add.w	r4, r4, #20
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f305 	lsl.w	r3, r0, r5
 8000724:	fa20 f004 	lsr.w	r0, r0, r4
 8000728:	fa01 f205 	lsl.w	r2, r1, r5
 800072c:	ea40 0002 	orr.w	r0, r0, r2
 8000730:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000734:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	fa21 f604 	lsr.w	r6, r1, r4
 8000740:	eb42 0106 	adc.w	r1, r2, r6
 8000744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000748:	bf08      	it	eq
 800074a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f1c4 040c 	rsb	r4, r4, #12
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f304 	lsl.w	r3, r0, r4
 800075c:	fa20 f005 	lsr.w	r0, r0, r5
 8000760:	fa01 f204 	lsl.w	r2, r1, r4
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	f141 0100 	adc.w	r1, r1, #0
 8000774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000778:	bf08      	it	eq
 800077a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f205 	lsl.w	r2, r0, r5
 8000788:	ea4e 0e02 	orr.w	lr, lr, r2
 800078c:	fa20 f304 	lsr.w	r3, r0, r4
 8000790:	fa01 f205 	lsl.w	r2, r1, r5
 8000794:	ea43 0302 	orr.w	r3, r3, r2
 8000798:	fa21 f004 	lsr.w	r0, r1, r4
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	fa21 f204 	lsr.w	r2, r1, r4
 80007a4:	ea20 0002 	bic.w	r0, r0, r2
 80007a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f094 0f00 	teq	r4, #0
 80007bc:	d10f      	bne.n	80007de <__aeabi_dmul+0x1c2>
 80007be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007c2:	0040      	lsls	r0, r0, #1
 80007c4:	eb41 0101 	adc.w	r1, r1, r1
 80007c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007cc:	bf08      	it	eq
 80007ce:	3c01      	subeq	r4, #1
 80007d0:	d0f7      	beq.n	80007c2 <__aeabi_dmul+0x1a6>
 80007d2:	ea41 0106 	orr.w	r1, r1, r6
 80007d6:	f095 0f00 	teq	r5, #0
 80007da:	bf18      	it	ne
 80007dc:	4770      	bxne	lr
 80007de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007e2:	0052      	lsls	r2, r2, #1
 80007e4:	eb43 0303 	adc.w	r3, r3, r3
 80007e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ec:	bf08      	it	eq
 80007ee:	3d01      	subeq	r5, #1
 80007f0:	d0f7      	beq.n	80007e2 <__aeabi_dmul+0x1c6>
 80007f2:	ea43 0306 	orr.w	r3, r3, r6
 80007f6:	4770      	bx	lr
 80007f8:	ea94 0f0c 	teq	r4, ip
 80007fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000800:	bf18      	it	ne
 8000802:	ea95 0f0c 	teqne	r5, ip
 8000806:	d00c      	beq.n	8000822 <__aeabi_dmul+0x206>
 8000808:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080c:	bf18      	it	ne
 800080e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000812:	d1d1      	bne.n	80007b8 <__aeabi_dmul+0x19c>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	bd70      	pop	{r4, r5, r6, pc}
 8000822:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000826:	bf06      	itte	eq
 8000828:	4610      	moveq	r0, r2
 800082a:	4619      	moveq	r1, r3
 800082c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000830:	d019      	beq.n	8000866 <__aeabi_dmul+0x24a>
 8000832:	ea94 0f0c 	teq	r4, ip
 8000836:	d102      	bne.n	800083e <__aeabi_dmul+0x222>
 8000838:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800083c:	d113      	bne.n	8000866 <__aeabi_dmul+0x24a>
 800083e:	ea95 0f0c 	teq	r5, ip
 8000842:	d105      	bne.n	8000850 <__aeabi_dmul+0x234>
 8000844:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000848:	bf1c      	itt	ne
 800084a:	4610      	movne	r0, r2
 800084c:	4619      	movne	r1, r3
 800084e:	d10a      	bne.n	8000866 <__aeabi_dmul+0x24a>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000860:	f04f 0000 	mov.w	r0, #0
 8000864:	bd70      	pop	{r4, r5, r6, pc}
 8000866:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086e:	bd70      	pop	{r4, r5, r6, pc}

08000870 <__aeabi_ddiv>:
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000876:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800087a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087e:	bf1d      	ittte	ne
 8000880:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000884:	ea94 0f0c 	teqne	r4, ip
 8000888:	ea95 0f0c 	teqne	r5, ip
 800088c:	f000 f8a7 	bleq	80009de <__aeabi_ddiv+0x16e>
 8000890:	eba4 0405 	sub.w	r4, r4, r5
 8000894:	ea81 0e03 	eor.w	lr, r1, r3
 8000898:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800089c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a0:	f000 8088 	beq.w	80009b4 <__aeabi_ddiv+0x144>
 80008a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c8:	429d      	cmp	r5, r3
 80008ca:	bf08      	it	eq
 80008cc:	4296      	cmpeq	r6, r2
 80008ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d6:	d202      	bcs.n	80008de <__aeabi_ddiv+0x6e>
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	1ab6      	subs	r6, r6, r2
 80008e0:	eb65 0503 	sbc.w	r5, r5, r3
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fa:	bf22      	ittt	cs
 80008fc:	1ab6      	subcs	r6, r6, r2
 80008fe:	4675      	movcs	r5, lr
 8000900:	ea40 000c 	orrcs.w	r0, r0, ip
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	ebb6 0e02 	subs.w	lr, r6, r2
 800090e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000912:	bf22      	ittt	cs
 8000914:	1ab6      	subcs	r6, r6, r2
 8000916:	4675      	movcs	r5, lr
 8000918:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800094c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000950:	d018      	beq.n	8000984 <__aeabi_ddiv+0x114>
 8000952:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000956:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000962:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000966:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096e:	d1c0      	bne.n	80008f2 <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	d10b      	bne.n	800098e <__aeabi_ddiv+0x11e>
 8000976:	ea41 0100 	orr.w	r1, r1, r0
 800097a:	f04f 0000 	mov.w	r0, #0
 800097e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000982:	e7b6      	b.n	80008f2 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	bf04      	itt	eq
 800098a:	4301      	orreq	r1, r0
 800098c:	2000      	moveq	r0, #0
 800098e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000992:	bf88      	it	hi
 8000994:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000998:	f63f aeaf 	bhi.w	80006fa <__aeabi_dmul+0xde>
 800099c:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a0:	bf04      	itt	eq
 80009a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009aa:	f150 0000 	adcs.w	r0, r0, #0
 80009ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b2:	bd70      	pop	{r4, r5, r6, pc}
 80009b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c0:	bfc2      	ittt	gt
 80009c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ca:	bd70      	popgt	{r4, r5, r6, pc}
 80009cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d0:	f04f 0e00 	mov.w	lr, #0
 80009d4:	3c01      	subs	r4, #1
 80009d6:	e690      	b.n	80006fa <__aeabi_dmul+0xde>
 80009d8:	ea45 0e06 	orr.w	lr, r5, r6
 80009dc:	e68d      	b.n	80006fa <__aeabi_dmul+0xde>
 80009de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e2:	ea94 0f0c 	teq	r4, ip
 80009e6:	bf08      	it	eq
 80009e8:	ea95 0f0c 	teqeq	r5, ip
 80009ec:	f43f af3b 	beq.w	8000866 <__aeabi_dmul+0x24a>
 80009f0:	ea94 0f0c 	teq	r4, ip
 80009f4:	d10a      	bne.n	8000a0c <__aeabi_ddiv+0x19c>
 80009f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fa:	f47f af34 	bne.w	8000866 <__aeabi_dmul+0x24a>
 80009fe:	ea95 0f0c 	teq	r5, ip
 8000a02:	f47f af25 	bne.w	8000850 <__aeabi_dmul+0x234>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e72c      	b.n	8000866 <__aeabi_dmul+0x24a>
 8000a0c:	ea95 0f0c 	teq	r5, ip
 8000a10:	d106      	bne.n	8000a20 <__aeabi_ddiv+0x1b0>
 8000a12:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a16:	f43f aefd 	beq.w	8000814 <__aeabi_dmul+0x1f8>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e722      	b.n	8000866 <__aeabi_dmul+0x24a>
 8000a20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2a:	f47f aec5 	bne.w	80007b8 <__aeabi_dmul+0x19c>
 8000a2e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a32:	f47f af0d 	bne.w	8000850 <__aeabi_dmul+0x234>
 8000a36:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3a:	f47f aeeb 	bne.w	8000814 <__aeabi_dmul+0x1f8>
 8000a3e:	e712      	b.n	8000866 <__aeabi_dmul+0x24a>

08000a40 <__aeabi_d2uiz>:
 8000a40:	004a      	lsls	r2, r1, #1
 8000a42:	d211      	bcs.n	8000a68 <__aeabi_d2uiz+0x28>
 8000a44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a48:	d211      	bcs.n	8000a6e <__aeabi_d2uiz+0x2e>
 8000a4a:	d50d      	bpl.n	8000a68 <__aeabi_d2uiz+0x28>
 8000a4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a54:	d40e      	bmi.n	8000a74 <__aeabi_d2uiz+0x34>
 8000a56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a62:	fa23 f002 	lsr.w	r0, r3, r2
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d102      	bne.n	8000a7a <__aeabi_d2uiz+0x3a>
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295
 8000a78:	4770      	bx	lr
 8000a7a:	f04f 0000 	mov.w	r0, #0
 8000a7e:	4770      	bx	lr

08000a80 <__aeabi_d2f>:
 8000a80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a88:	bf24      	itt	cs
 8000a8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a92:	d90d      	bls.n	8000ab0 <__aeabi_d2f+0x30>
 8000a94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa8:	bf08      	it	eq
 8000aaa:	f020 0001 	biceq.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab4:	d121      	bne.n	8000afa <__aeabi_d2f+0x7a>
 8000ab6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aba:	bfbc      	itt	lt
 8000abc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	4770      	bxlt	lr
 8000ac2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aca:	f1c2 0218 	rsb	r2, r2, #24
 8000ace:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad6:	fa20 f002 	lsr.w	r0, r0, r2
 8000ada:	bf18      	it	ne
 8000adc:	f040 0001 	orrne.w	r0, r0, #1
 8000ae0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aec:	ea40 000c 	orr.w	r0, r0, ip
 8000af0:	fa23 f302 	lsr.w	r3, r3, r2
 8000af4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af8:	e7cc      	b.n	8000a94 <__aeabi_d2f+0x14>
 8000afa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afe:	d107      	bne.n	8000b10 <__aeabi_d2f+0x90>
 8000b00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b04:	bf1e      	ittt	ne
 8000b06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0e:	4770      	bxne	lr
 8000b10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <__aeabi_uldivmod>:
 8000b20:	b953      	cbnz	r3, 8000b38 <__aeabi_uldivmod+0x18>
 8000b22:	b94a      	cbnz	r2, 8000b38 <__aeabi_uldivmod+0x18>
 8000b24:	2900      	cmp	r1, #0
 8000b26:	bf08      	it	eq
 8000b28:	2800      	cmpeq	r0, #0
 8000b2a:	bf1c      	itt	ne
 8000b2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b30:	f04f 30ff 	movne.w	r0, #4294967295
 8000b34:	f000 b970 	b.w	8000e18 <__aeabi_idiv0>
 8000b38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b40:	f000 f806 	bl	8000b50 <__udivmoddi4>
 8000b44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b4c:	b004      	add	sp, #16
 8000b4e:	4770      	bx	lr

08000b50 <__udivmoddi4>:
 8000b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b54:	9e08      	ldr	r6, [sp, #32]
 8000b56:	460d      	mov	r5, r1
 8000b58:	4604      	mov	r4, r0
 8000b5a:	460f      	mov	r7, r1
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d14a      	bne.n	8000bf6 <__udivmoddi4+0xa6>
 8000b60:	428a      	cmp	r2, r1
 8000b62:	4694      	mov	ip, r2
 8000b64:	d965      	bls.n	8000c32 <__udivmoddi4+0xe2>
 8000b66:	fab2 f382 	clz	r3, r2
 8000b6a:	b143      	cbz	r3, 8000b7e <__udivmoddi4+0x2e>
 8000b6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b70:	f1c3 0220 	rsb	r2, r3, #32
 8000b74:	409f      	lsls	r7, r3
 8000b76:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7a:	4317      	orrs	r7, r2
 8000b7c:	409c      	lsls	r4, r3
 8000b7e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b82:	fa1f f58c 	uxth.w	r5, ip
 8000b86:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b8a:	0c22      	lsrs	r2, r4, #16
 8000b8c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b90:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b94:	fb01 f005 	mul.w	r0, r1, r5
 8000b98:	4290      	cmp	r0, r2
 8000b9a:	d90a      	bls.n	8000bb2 <__udivmoddi4+0x62>
 8000b9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ba4:	f080 811c 	bcs.w	8000de0 <__udivmoddi4+0x290>
 8000ba8:	4290      	cmp	r0, r2
 8000baa:	f240 8119 	bls.w	8000de0 <__udivmoddi4+0x290>
 8000bae:	3902      	subs	r1, #2
 8000bb0:	4462      	add	r2, ip
 8000bb2:	1a12      	subs	r2, r2, r0
 8000bb4:	b2a4      	uxth	r4, r4
 8000bb6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bba:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bbe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc2:	fb00 f505 	mul.w	r5, r0, r5
 8000bc6:	42a5      	cmp	r5, r4
 8000bc8:	d90a      	bls.n	8000be0 <__udivmoddi4+0x90>
 8000bca:	eb1c 0404 	adds.w	r4, ip, r4
 8000bce:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd2:	f080 8107 	bcs.w	8000de4 <__udivmoddi4+0x294>
 8000bd6:	42a5      	cmp	r5, r4
 8000bd8:	f240 8104 	bls.w	8000de4 <__udivmoddi4+0x294>
 8000bdc:	4464      	add	r4, ip
 8000bde:	3802      	subs	r0, #2
 8000be0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000be4:	1b64      	subs	r4, r4, r5
 8000be6:	2100      	movs	r1, #0
 8000be8:	b11e      	cbz	r6, 8000bf2 <__udivmoddi4+0xa2>
 8000bea:	40dc      	lsrs	r4, r3
 8000bec:	2300      	movs	r3, #0
 8000bee:	e9c6 4300 	strd	r4, r3, [r6]
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d908      	bls.n	8000c0c <__udivmoddi4+0xbc>
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	f000 80ed 	beq.w	8000dda <__udivmoddi4+0x28a>
 8000c00:	2100      	movs	r1, #0
 8000c02:	e9c6 0500 	strd	r0, r5, [r6]
 8000c06:	4608      	mov	r0, r1
 8000c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0c:	fab3 f183 	clz	r1, r3
 8000c10:	2900      	cmp	r1, #0
 8000c12:	d149      	bne.n	8000ca8 <__udivmoddi4+0x158>
 8000c14:	42ab      	cmp	r3, r5
 8000c16:	d302      	bcc.n	8000c1e <__udivmoddi4+0xce>
 8000c18:	4282      	cmp	r2, r0
 8000c1a:	f200 80f8 	bhi.w	8000e0e <__udivmoddi4+0x2be>
 8000c1e:	1a84      	subs	r4, r0, r2
 8000c20:	eb65 0203 	sbc.w	r2, r5, r3
 8000c24:	2001      	movs	r0, #1
 8000c26:	4617      	mov	r7, r2
 8000c28:	2e00      	cmp	r6, #0
 8000c2a:	d0e2      	beq.n	8000bf2 <__udivmoddi4+0xa2>
 8000c2c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c30:	e7df      	b.n	8000bf2 <__udivmoddi4+0xa2>
 8000c32:	b902      	cbnz	r2, 8000c36 <__udivmoddi4+0xe6>
 8000c34:	deff      	udf	#255	; 0xff
 8000c36:	fab2 f382 	clz	r3, r2
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f040 8090 	bne.w	8000d60 <__udivmoddi4+0x210>
 8000c40:	1a8a      	subs	r2, r1, r2
 8000c42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c46:	fa1f fe8c 	uxth.w	lr, ip
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c50:	fb07 2015 	mls	r0, r7, r5, r2
 8000c54:	0c22      	lsrs	r2, r4, #16
 8000c56:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c5a:	fb0e f005 	mul.w	r0, lr, r5
 8000c5e:	4290      	cmp	r0, r2
 8000c60:	d908      	bls.n	8000c74 <__udivmoddi4+0x124>
 8000c62:	eb1c 0202 	adds.w	r2, ip, r2
 8000c66:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c6a:	d202      	bcs.n	8000c72 <__udivmoddi4+0x122>
 8000c6c:	4290      	cmp	r0, r2
 8000c6e:	f200 80cb 	bhi.w	8000e08 <__udivmoddi4+0x2b8>
 8000c72:	4645      	mov	r5, r8
 8000c74:	1a12      	subs	r2, r2, r0
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c7c:	fb07 2210 	mls	r2, r7, r0, r2
 8000c80:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c84:	fb0e fe00 	mul.w	lr, lr, r0
 8000c88:	45a6      	cmp	lr, r4
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x14e>
 8000c8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c94:	d202      	bcs.n	8000c9c <__udivmoddi4+0x14c>
 8000c96:	45a6      	cmp	lr, r4
 8000c98:	f200 80bb 	bhi.w	8000e12 <__udivmoddi4+0x2c2>
 8000c9c:	4610      	mov	r0, r2
 8000c9e:	eba4 040e 	sub.w	r4, r4, lr
 8000ca2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ca6:	e79f      	b.n	8000be8 <__udivmoddi4+0x98>
 8000ca8:	f1c1 0720 	rsb	r7, r1, #32
 8000cac:	408b      	lsls	r3, r1
 8000cae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cb2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cb6:	fa05 f401 	lsl.w	r4, r5, r1
 8000cba:	fa20 f307 	lsr.w	r3, r0, r7
 8000cbe:	40fd      	lsrs	r5, r7
 8000cc0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cc4:	4323      	orrs	r3, r4
 8000cc6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cca:	fa1f fe8c 	uxth.w	lr, ip
 8000cce:	fb09 5518 	mls	r5, r9, r8, r5
 8000cd2:	0c1c      	lsrs	r4, r3, #16
 8000cd4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cd8:	fb08 f50e 	mul.w	r5, r8, lr
 8000cdc:	42a5      	cmp	r5, r4
 8000cde:	fa02 f201 	lsl.w	r2, r2, r1
 8000ce2:	fa00 f001 	lsl.w	r0, r0, r1
 8000ce6:	d90b      	bls.n	8000d00 <__udivmoddi4+0x1b0>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cf0:	f080 8088 	bcs.w	8000e04 <__udivmoddi4+0x2b4>
 8000cf4:	42a5      	cmp	r5, r4
 8000cf6:	f240 8085 	bls.w	8000e04 <__udivmoddi4+0x2b4>
 8000cfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000cfe:	4464      	add	r4, ip
 8000d00:	1b64      	subs	r4, r4, r5
 8000d02:	b29d      	uxth	r5, r3
 8000d04:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d08:	fb09 4413 	mls	r4, r9, r3, r4
 8000d0c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d10:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d14:	45a6      	cmp	lr, r4
 8000d16:	d908      	bls.n	8000d2a <__udivmoddi4+0x1da>
 8000d18:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d20:	d26c      	bcs.n	8000dfc <__udivmoddi4+0x2ac>
 8000d22:	45a6      	cmp	lr, r4
 8000d24:	d96a      	bls.n	8000dfc <__udivmoddi4+0x2ac>
 8000d26:	3b02      	subs	r3, #2
 8000d28:	4464      	add	r4, ip
 8000d2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d32:	eba4 040e 	sub.w	r4, r4, lr
 8000d36:	42ac      	cmp	r4, r5
 8000d38:	46c8      	mov	r8, r9
 8000d3a:	46ae      	mov	lr, r5
 8000d3c:	d356      	bcc.n	8000dec <__udivmoddi4+0x29c>
 8000d3e:	d053      	beq.n	8000de8 <__udivmoddi4+0x298>
 8000d40:	b156      	cbz	r6, 8000d58 <__udivmoddi4+0x208>
 8000d42:	ebb0 0208 	subs.w	r2, r0, r8
 8000d46:	eb64 040e 	sbc.w	r4, r4, lr
 8000d4a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d4e:	40ca      	lsrs	r2, r1
 8000d50:	40cc      	lsrs	r4, r1
 8000d52:	4317      	orrs	r7, r2
 8000d54:	e9c6 7400 	strd	r7, r4, [r6]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d60:	f1c3 0120 	rsb	r1, r3, #32
 8000d64:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d68:	fa20 f201 	lsr.w	r2, r0, r1
 8000d6c:	fa25 f101 	lsr.w	r1, r5, r1
 8000d70:	409d      	lsls	r5, r3
 8000d72:	432a      	orrs	r2, r5
 8000d74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d78:	fa1f fe8c 	uxth.w	lr, ip
 8000d7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d80:	fb07 1510 	mls	r5, r7, r0, r1
 8000d84:	0c11      	lsrs	r1, r2, #16
 8000d86:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d8a:	fb00 f50e 	mul.w	r5, r0, lr
 8000d8e:	428d      	cmp	r5, r1
 8000d90:	fa04 f403 	lsl.w	r4, r4, r3
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x258>
 8000d96:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d9e:	d22f      	bcs.n	8000e00 <__udivmoddi4+0x2b0>
 8000da0:	428d      	cmp	r5, r1
 8000da2:	d92d      	bls.n	8000e00 <__udivmoddi4+0x2b0>
 8000da4:	3802      	subs	r0, #2
 8000da6:	4461      	add	r1, ip
 8000da8:	1b49      	subs	r1, r1, r5
 8000daa:	b292      	uxth	r2, r2
 8000dac:	fbb1 f5f7 	udiv	r5, r1, r7
 8000db0:	fb07 1115 	mls	r1, r7, r5, r1
 8000db4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000db8:	fb05 f10e 	mul.w	r1, r5, lr
 8000dbc:	4291      	cmp	r1, r2
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x282>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc8:	d216      	bcs.n	8000df8 <__udivmoddi4+0x2a8>
 8000dca:	4291      	cmp	r1, r2
 8000dcc:	d914      	bls.n	8000df8 <__udivmoddi4+0x2a8>
 8000dce:	3d02      	subs	r5, #2
 8000dd0:	4462      	add	r2, ip
 8000dd2:	1a52      	subs	r2, r2, r1
 8000dd4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000dd8:	e738      	b.n	8000c4c <__udivmoddi4+0xfc>
 8000dda:	4631      	mov	r1, r6
 8000ddc:	4630      	mov	r0, r6
 8000dde:	e708      	b.n	8000bf2 <__udivmoddi4+0xa2>
 8000de0:	4639      	mov	r1, r7
 8000de2:	e6e6      	b.n	8000bb2 <__udivmoddi4+0x62>
 8000de4:	4610      	mov	r0, r2
 8000de6:	e6fb      	b.n	8000be0 <__udivmoddi4+0x90>
 8000de8:	4548      	cmp	r0, r9
 8000dea:	d2a9      	bcs.n	8000d40 <__udivmoddi4+0x1f0>
 8000dec:	ebb9 0802 	subs.w	r8, r9, r2
 8000df0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000df4:	3b01      	subs	r3, #1
 8000df6:	e7a3      	b.n	8000d40 <__udivmoddi4+0x1f0>
 8000df8:	4645      	mov	r5, r8
 8000dfa:	e7ea      	b.n	8000dd2 <__udivmoddi4+0x282>
 8000dfc:	462b      	mov	r3, r5
 8000dfe:	e794      	b.n	8000d2a <__udivmoddi4+0x1da>
 8000e00:	4640      	mov	r0, r8
 8000e02:	e7d1      	b.n	8000da8 <__udivmoddi4+0x258>
 8000e04:	46d0      	mov	r8, sl
 8000e06:	e77b      	b.n	8000d00 <__udivmoddi4+0x1b0>
 8000e08:	3d02      	subs	r5, #2
 8000e0a:	4462      	add	r2, ip
 8000e0c:	e732      	b.n	8000c74 <__udivmoddi4+0x124>
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e70a      	b.n	8000c28 <__udivmoddi4+0xd8>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	e742      	b.n	8000c9e <__udivmoddi4+0x14e>

08000e18 <__aeabi_idiv0>:
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <Buzzer_voidHighSound>:
#endif


}
void Buzzer_voidHighSound(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0


#endif
#elif Buzzer_Timer_Connected == TIMER12
#if Buzzer_TimerChannel_Connected == TIMER_CHANNEL_1
	TIM12->CCR1=90;
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <Buzzer_voidHighSound+0x18>)
 8000e22:	225a      	movs	r2, #90	; 0x5a
 8000e24:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);
 8000e26:	2100      	movs	r1, #0
 8000e28:	4803      	ldr	r0, [pc, #12]	; (8000e38 <Buzzer_voidHighSound+0x1c>)
 8000e2a:	f003 f91f 	bl	800406c <HAL_TIM_PWM_Start>

#endif



}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40001800 	.word	0x40001800
 8000e38:	20000410 	.word	0x20000410

08000e3c <LCD_HighLightIntensity_Warning>:




void LCD_HighLightIntensity_Warning()
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0

	/*Printing the warning sign*/
	LCD_Print_WarningSign();
 8000e40:	f000 f814 	bl	8000e6c <LCD_Print_WarningSign>

	/*Printing the warning message to the driver*/
	LCD_voidSetPositionXY(1,0);
 8000e44:	2100      	movs	r1, #0
 8000e46:	2001      	movs	r0, #1
 8000e48:	f000 f96e 	bl	8001128 <LCD_voidSetPositionXY>
	LCD_voidSendString("Dim your");
 8000e4c:	4805      	ldr	r0, [pc, #20]	; (8000e64 <LCD_HighLightIntensity_Warning+0x28>)
 8000e4e:	f000 f94f 	bl	80010f0 <LCD_voidSendString>

	LCD_voidSetPositionXY(2,0);
 8000e52:	2100      	movs	r1, #0
 8000e54:	2002      	movs	r0, #2
 8000e56:	f000 f967 	bl	8001128 <LCD_voidSetPositionXY>
	LCD_voidSendString("Light ASAP!");
 8000e5a:	4803      	ldr	r0, [pc, #12]	; (8000e68 <LCD_HighLightIntensity_Warning+0x2c>)
 8000e5c:	f000 f948 	bl	80010f0 <LCD_voidSendString>

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	08009d04 	.word	0x08009d04
 8000e68:	08009d10 	.word	0x08009d10

08000e6c <LCD_Print_WarningSign>:
	LCD_voidSendString("Slow Down");


}
static void LCD_Print_WarningSign(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b096      	sub	sp, #88	; 0x58
 8000e70:	af00      	add	r7, sp, #0
	/*Saving the elemetents of each block of the LCD in multiple arrays to be sent to the special charachter function*/

	uint8_t LCD_R1_C16_Array[8] =
 8000e72:	4a4e      	ldr	r2, [pc, #312]	; (8000fac <LCD_Print_WarningSign+0x140>)
 8000e74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e7c:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00001110,
			0b00001110,
			0b00001110
	};
	uint8_t LCD_R1_C15_Array[8] =
 8000e80:	4a4b      	ldr	r2, [pc, #300]	; (8000fb0 <LCD_Print_WarningSign+0x144>)
 8000e82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e8a:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00001000,
			0b00010000,
			0b00000000
	};

	uint8_t LCD_R1_C14_Array[8] =
 8000e8e:	4a49      	ldr	r2, [pc, #292]	; (8000fb4 <LCD_Print_WarningSign+0x148>)
 8000e90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e98:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00000001
	};
	uint8_t LCD_R1_C18_Array[8] =
 8000e9c:	4a46      	ldr	r2, [pc, #280]	; (8000fb8 <LCD_Print_WarningSign+0x14c>)
 8000e9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ea2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ea6:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00010000
	};
	uint8_t LCD_R2_C14_Array[8] =
 8000eaa:	4a44      	ldr	r2, [pc, #272]	; (8000fbc <LCD_Print_WarningSign+0x150>)
 8000eac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eb4:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00011111
	};

	uint8_t LCD_R2_C18_Array[8] =
 8000eb8:	4a41      	ldr	r2, [pc, #260]	; (8000fc0 <LCD_Print_WarningSign+0x154>)
 8000eba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ebe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ec2:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C13_Array[8] =
 8000ec6:	4a3f      	ldr	r2, [pc, #252]	; (8000fc4 <LCD_Print_WarningSign+0x158>)
 8000ec8:	f107 0320 	add.w	r3, r7, #32
 8000ecc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ed0:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000010,
			0b00000100,
			0b00001000,
			0b00011111
	};
	uint8_t LCD_R2_C19_Array[8] =
 8000ed4:	4a3c      	ldr	r2, [pc, #240]	; (8000fc8 <LCD_Print_WarningSign+0x15c>)
 8000ed6:	f107 0318 	add.w	r3, r7, #24
 8000eda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ede:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00001000,
			0b00000100,
			0b00000010,
			0b00011111
	};
	uint8_t LCD_R2_C15_Array[8] =
 8000ee2:	4a3a      	ldr	r2, [pc, #232]	; (8000fcc <LCD_Print_WarningSign+0x160>)
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eec:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C17_Array[8] =
 8000ef0:	4a36      	ldr	r2, [pc, #216]	; (8000fcc <LCD_Print_WarningSign+0x160>)
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000efa:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C16_Array[8] =
 8000efe:	4a34      	ldr	r2, [pc, #208]	; (8000fd0 <LCD_Print_WarningSign+0x164>)
 8000f00:	463b      	mov	r3, r7
 8000f02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f06:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00011111
	};

	LCD_voidDrawSpecialCharachter(&LCD_R1_C14_Array, 0, 1, 14);
 8000f0a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000f0e:	230e      	movs	r3, #14
 8000f10:	2201      	movs	r2, #1
 8000f12:	2100      	movs	r1, #0
 8000f14:	f000 f94e 	bl	80011b4 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R1_C15_Array, 0, 1, 15);
 8000f18:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8000f1c:	230f      	movs	r3, #15
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2100      	movs	r1, #0
 8000f22:	f000 f947 	bl	80011b4 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R1_C16_Array, 0, 1, 16);
 8000f26:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000f2a:	2310      	movs	r3, #16
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2100      	movs	r1, #0
 8000f30:	f000 f940 	bl	80011b4 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R1_C18_Array, 0, 1, 18);
 8000f34:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000f38:	2312      	movs	r3, #18
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	f000 f939 	bl	80011b4 <LCD_voidDrawSpecialCharachter>

	LCD_voidDrawSpecialCharachter(&LCD_R2_C13_Array, 0, 2, 13);
 8000f42:	f107 0020 	add.w	r0, r7, #32
 8000f46:	230d      	movs	r3, #13
 8000f48:	2202      	movs	r2, #2
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	f000 f932 	bl	80011b4 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C14_Array, 0, 2, 14);
 8000f50:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000f54:	230e      	movs	r3, #14
 8000f56:	2202      	movs	r2, #2
 8000f58:	2100      	movs	r1, #0
 8000f5a:	f000 f92b 	bl	80011b4 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C15_Array, 0, 2, 15);
 8000f5e:	f107 0010 	add.w	r0, r7, #16
 8000f62:	230f      	movs	r3, #15
 8000f64:	2202      	movs	r2, #2
 8000f66:	2100      	movs	r1, #0
 8000f68:	f000 f924 	bl	80011b4 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C16_Array, 0, 2, 16);
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	2310      	movs	r3, #16
 8000f70:	2202      	movs	r2, #2
 8000f72:	2100      	movs	r1, #0
 8000f74:	f000 f91e 	bl	80011b4 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C17_Array, 0, 2, 17);
 8000f78:	f107 0008 	add.w	r0, r7, #8
 8000f7c:	2311      	movs	r3, #17
 8000f7e:	2202      	movs	r2, #2
 8000f80:	2100      	movs	r1, #0
 8000f82:	f000 f917 	bl	80011b4 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C18_Array, 0, 2, 18);
 8000f86:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000f8a:	2312      	movs	r3, #18
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	2100      	movs	r1, #0
 8000f90:	f000 f910 	bl	80011b4 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C19_Array, 0, 2, 19);
 8000f94:	f107 0018 	add.w	r0, r7, #24
 8000f98:	2313      	movs	r3, #19
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	f000 f909 	bl	80011b4 <LCD_voidDrawSpecialCharachter>



}
 8000fa2:	bf00      	nop
 8000fa4:	3758      	adds	r7, #88	; 0x58
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	08009d3c 	.word	0x08009d3c
 8000fb0:	08009d44 	.word	0x08009d44
 8000fb4:	08009d4c 	.word	0x08009d4c
 8000fb8:	08009d54 	.word	0x08009d54
 8000fbc:	08009d5c 	.word	0x08009d5c
 8000fc0:	08009d64 	.word	0x08009d64
 8000fc4:	08009d6c 	.word	0x08009d6c
 8000fc8:	08009d74 	.word	0x08009d74
 8000fcc:	08009d7c 	.word	0x08009d7c
 8000fd0:	08009d84 	.word	0x08009d84

08000fd4 <LCD_voidInit>:
#define LCD_SLAVE_ADDRESS 0b01001110

extern I2C_HandleTypeDef hi2c1;

void LCD_voidInit(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	/*Setting 4 bits interface(Twice as the datasheet specefies)*/
	LCD_voidSendCommand(0b00110011);
 8000fd8:	2033      	movs	r0, #51	; 0x33
 8000fda:	f000 f829 	bl	8001030 <LCD_voidSendCommand>
	LCD_voidSendCommand(0b00110010);
 8000fde:	2032      	movs	r0, #50	; 0x32
 8000fe0:	f000 f826 	bl	8001030 <LCD_voidSendCommand>
	HAL_Delay(50);
 8000fe4:	2032      	movs	r0, #50	; 0x32
 8000fe6:	f001 fa0b 	bl	8002400 <HAL_Delay>
	/*Setting the LCD Function*/
	LCD_voidSendCommand(0b00101000);
 8000fea:	2028      	movs	r0, #40	; 0x28
 8000fec:	f000 f820 	bl	8001030 <LCD_voidSendCommand>
	HAL_Delay(50);
 8000ff0:	2032      	movs	r0, #50	; 0x32
 8000ff2:	f001 fa05 	bl	8002400 <HAL_Delay>
	/*Clearing the display*/
	LCD_voidSendCommand(0b00000001);
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f000 f81a 	bl	8001030 <LCD_voidSendCommand>
	HAL_Delay(50);
 8000ffc:	2032      	movs	r0, #50	; 0x32
 8000ffe:	f001 f9ff 	bl	8002400 <HAL_Delay>
	/*Set the entry mode*/
	LCD_voidSendCommand(0b00000110);
 8001002:	2006      	movs	r0, #6
 8001004:	f000 f814 	bl	8001030 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001008:	2032      	movs	r0, #50	; 0x32
 800100a:	f001 f9f9 	bl	8002400 <HAL_Delay>
	/*Set the display to on*/
	LCD_voidSendCommand(0b00001100);
 800100e:	200c      	movs	r0, #12
 8001010:	f000 f80e 	bl	8001030 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001014:	2032      	movs	r0, #50	; 0x32
 8001016:	f001 f9f3 	bl	8002400 <HAL_Delay>
	/*Set the cursor to home */
	LCD_voidSendCommand(0b00000010);
 800101a:	2002      	movs	r0, #2
 800101c:	f000 f808 	bl	8001030 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001020:	2032      	movs	r0, #50	; 0x32
 8001022:	f001 f9ed 	bl	8002400 <HAL_Delay>
	/*and the Data address to 0*/
	LCD_voidSendCommand(0b10000000);
 8001026:	2080      	movs	r0, #128	; 0x80
 8001028:	f000 f802 	bl	8001030 <LCD_voidSendCommand>

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <LCD_voidSendCommand>:
void LCD_voidSendCommand(uint8_t Copy_uint8Command)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af02      	add	r7, sp, #8
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
 *
 *
 * 0b00000001 --> DataU --> 0b000000000-->0b00000001100
 *
 * */
	Local_uint8Local_uint8DataU=(Copy_uint8Command&0b11110000);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f023 030f 	bic.w	r3, r3, #15
 8001040:	73fb      	strb	r3, [r7, #15]
	Local_uint8Local_uint8DataL=((Copy_uint8Command<<4)&0b11110000);
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	011b      	lsls	r3, r3, #4
 8001046:	73bb      	strb	r3, [r7, #14]

	Local_uint8Local_uint8DataT[0]=Local_uint8Local_uint8DataU|0b00001100; //EN=1 RS=0
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	f043 030c 	orr.w	r3, r3, #12
 800104e:	b2db      	uxtb	r3, r3
 8001050:	723b      	strb	r3, [r7, #8]
	Local_uint8Local_uint8DataT[1]=Local_uint8Local_uint8DataU|0b00001000; //EN=0 RS=0
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	f043 0308 	orr.w	r3, r3, #8
 8001058:	b2db      	uxtb	r3, r3
 800105a:	727b      	strb	r3, [r7, #9]
	Local_uint8Local_uint8DataT[2]=Local_uint8Local_uint8DataL|0b00001100; //EN=1 RS=0
 800105c:	7bbb      	ldrb	r3, [r7, #14]
 800105e:	f043 030c 	orr.w	r3, r3, #12
 8001062:	b2db      	uxtb	r3, r3
 8001064:	72bb      	strb	r3, [r7, #10]
	Local_uint8Local_uint8DataT[3]=Local_uint8Local_uint8DataL|0b00001000; //EN=0 RS=0
 8001066:	7bbb      	ldrb	r3, [r7, #14]
 8001068:	f043 0308 	orr.w	r3, r3, #8
 800106c:	b2db      	uxtb	r3, r3
 800106e:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDRESS,(uint8_t*)Local_uint8Local_uint8DataT , 4, 100);
 8001070:	f107 0208 	add.w	r2, r7, #8
 8001074:	2364      	movs	r3, #100	; 0x64
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	2304      	movs	r3, #4
 800107a:	214e      	movs	r1, #78	; 0x4e
 800107c:	4803      	ldr	r0, [pc, #12]	; (800108c <LCD_voidSendCommand+0x5c>)
 800107e:	f001 fe49 	bl	8002d14 <HAL_I2C_Master_Transmit>
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2000023c 	.word	0x2000023c

08001090 <LCD_voidSendCharachter>:

void LCD_voidSendCharachter(uint8_t Copy_uint8Charachter)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af02      	add	r7, sp, #8
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_uint8Local_uint8DataU,Local_uint8Local_uint8DataL;
	uint8_t Local_uint8Local_uint8DataT[4];
	Local_uint8Local_uint8DataU=(Copy_uint8Charachter&0b11110000);
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	f023 030f 	bic.w	r3, r3, #15
 80010a0:	73fb      	strb	r3, [r7, #15]
	Local_uint8Local_uint8DataL=((Copy_uint8Charachter<<4)&0b11110000);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	73bb      	strb	r3, [r7, #14]

	Local_uint8Local_uint8DataT[0]=Local_uint8Local_uint8DataU|0b00001101; //EN=1 RS=0
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	f043 030d 	orr.w	r3, r3, #13
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	723b      	strb	r3, [r7, #8]
	Local_uint8Local_uint8DataT[1]=Local_uint8Local_uint8DataU|0b00001001; //EN=0 RS=0
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	f043 0309 	orr.w	r3, r3, #9
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	727b      	strb	r3, [r7, #9]
	Local_uint8Local_uint8DataT[2]=Local_uint8Local_uint8DataL|0b00001101; //EN=1 RS=0
 80010bc:	7bbb      	ldrb	r3, [r7, #14]
 80010be:	f043 030d 	orr.w	r3, r3, #13
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	72bb      	strb	r3, [r7, #10]
	Local_uint8Local_uint8DataT[3]=Local_uint8Local_uint8DataL|0b00001001; //EN=0 RS=0
 80010c6:	7bbb      	ldrb	r3, [r7, #14]
 80010c8:	f043 0309 	orr.w	r3, r3, #9
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDRESS,(uint8_t*)Local_uint8Local_uint8DataT , 4, 100);
 80010d0:	f107 0208 	add.w	r2, r7, #8
 80010d4:	2364      	movs	r3, #100	; 0x64
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2304      	movs	r3, #4
 80010da:	214e      	movs	r1, #78	; 0x4e
 80010dc:	4803      	ldr	r0, [pc, #12]	; (80010ec <LCD_voidSendCharachter+0x5c>)
 80010de:	f001 fe19 	bl	8002d14 <HAL_I2C_Master_Transmit>

}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2000023c 	.word	0x2000023c

080010f0 <LCD_voidSendString>:

void LCD_voidSendString (uint8_t *Copy_pu8StringOfCharachters)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8Counter=0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8StringOfCharachters[Local_uint8Counter] !='\0')
 80010fc:	e009      	b.n	8001112 <LCD_voidSendString+0x22>
	{
		LCD_voidSendCharachter(Copy_pu8StringOfCharachters[Local_uint8Counter]);
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	4413      	add	r3, r2
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ffc2 	bl	8001090 <LCD_voidSendCharachter>
		Local_uint8Counter++;
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	3301      	adds	r3, #1
 8001110:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8StringOfCharachters[Local_uint8Counter] !='\0')
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	4413      	add	r3, r2
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1ef      	bne.n	80010fe <LCD_voidSendString+0xe>
	}


}
 800111e:	bf00      	nop
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <LCD_voidSetPositionXY>:
void LCD_voidSetPositionXY(uint8_t Copy_uint8Row,uint8_t Copy_uint8Column)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	460a      	mov	r2, r1
 8001132:	71fb      	strb	r3, [r7, #7]
 8001134:	4613      	mov	r3, r2
 8001136:	71bb      	strb	r3, [r7, #6]
	//1,add,add,add,add,add,add,add,0,0
	uint8_t Local_uint8PositionAddress = 0b10000000;
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	73fb      	strb	r3, [r7, #15]
	switch(Copy_uint8Row){
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	2b03      	cmp	r3, #3
 8001140:	d82d      	bhi.n	800119e <LCD_voidSetPositionXY+0x76>
 8001142:	a201      	add	r2, pc, #4	; (adr r2, 8001148 <LCD_voidSetPositionXY+0x20>)
 8001144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001148:	08001159 	.word	0x08001159
 800114c:	08001163 	.word	0x08001163
 8001150:	08001177 	.word	0x08001177
 8001154:	0800118b 	.word	0x0800118b
	case 0:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 0);
 8001158:	7bfa      	ldrb	r2, [r7, #15]
 800115a:	79bb      	ldrb	r3, [r7, #6]
 800115c:	4313      	orrs	r3, r2
 800115e:	73fb      	strb	r3, [r7, #15]
		break;
 8001160:	e01d      	b.n	800119e <LCD_voidSetPositionXY+0x76>
	case 1:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 64);
 8001162:	79bb      	ldrb	r3, [r7, #6]
 8001164:	3340      	adds	r3, #64	; 0x40
 8001166:	b2db      	uxtb	r3, r3
 8001168:	b25a      	sxtb	r2, r3
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	4313      	orrs	r3, r2
 8001170:	b25b      	sxtb	r3, r3
 8001172:	73fb      	strb	r3, [r7, #15]
		break;
 8001174:	e013      	b.n	800119e <LCD_voidSetPositionXY+0x76>
	case 2:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 20);
 8001176:	79bb      	ldrb	r3, [r7, #6]
 8001178:	3314      	adds	r3, #20
 800117a:	b2db      	uxtb	r3, r3
 800117c:	b25a      	sxtb	r2, r3
 800117e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001182:	4313      	orrs	r3, r2
 8001184:	b25b      	sxtb	r3, r3
 8001186:	73fb      	strb	r3, [r7, #15]
		break;
 8001188:	e009      	b.n	800119e <LCD_voidSetPositionXY+0x76>
	case 3:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 84);
 800118a:	79bb      	ldrb	r3, [r7, #6]
 800118c:	3354      	adds	r3, #84	; 0x54
 800118e:	b2db      	uxtb	r3, r3
 8001190:	b25a      	sxtb	r2, r3
 8001192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001196:	4313      	orrs	r3, r2
 8001198:	b25b      	sxtb	r3, r3
 800119a:	73fb      	strb	r3, [r7, #15]
		break;
 800119c:	bf00      	nop
	}
		LCD_voidSendCommand(Local_uint8PositionAddress);
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff45 	bl	8001030 <LCD_voidSendCommand>
		HAL_Delay(1);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f001 f92a 	bl	8002400 <HAL_Delay>

}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <LCD_voidDrawSpecialCharachter>:
		}
	}
}

void LCD_voidDrawSpecialCharachter(uint8_t*Copy_puint8Pattern,uint8_t Copy_uint8LocationNum,uint8_t Copy_uint8RowNum,uint8_t Copy_uint8ColNum)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	4608      	mov	r0, r1
 80011be:	4611      	mov	r1, r2
 80011c0:	461a      	mov	r2, r3
 80011c2:	4603      	mov	r3, r0
 80011c4:	70fb      	strb	r3, [r7, #3]
 80011c6:	460b      	mov	r3, r1
 80011c8:	70bb      	strb	r3, [r7, #2]
 80011ca:	4613      	mov	r3, r2
 80011cc:	707b      	strb	r3, [r7, #1]
	/*Accessing the CGRAM address*/
	uint8_t Local_uint8CGRAMAddress,Local_uint8Counter;
	Local_uint8CGRAMAddress=Copy_uint8LocationNum*8;
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	73bb      	strb	r3, [r7, #14]
	/*Accessing CGRAM of lcd by command 0b01xxxxxx*/
	LCD_voidSendCommand(Local_uint8CGRAMAddress+64);
 80011d4:	7bbb      	ldrb	r3, [r7, #14]
 80011d6:	3340      	adds	r3, #64	; 0x40
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff28 	bl	8001030 <LCD_voidSendCommand>
	/*Write the pattern on CGRAM*/
	/*zy makont ba3mel fel string ha3mel hena , bas al fekra ane hawa2f al loop 3nd (((8))) ale howa max bytes
	 * in a location in the CGRAM fal user masaln e5tar location 0 fa2a5ro feh 8 charachters ale homa 8 bytes*/
	for(Local_uint8Counter=0;Local_uint8Counter<8;Local_uint8Counter++)
 80011e0:	2300      	movs	r3, #0
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	e009      	b.n	80011fa <LCD_voidDrawSpecialCharachter+0x46>
	{
		LCD_voidSendCharachter(Copy_puint8Pattern[Local_uint8Counter]);
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	4413      	add	r3, r2
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ff4e 	bl	8001090 <LCD_voidSendCharachter>
	for(Local_uint8Counter=0;Local_uint8Counter<8;Local_uint8Counter++)
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	3301      	adds	r3, #1
 80011f8:	73fb      	strb	r3, [r7, #15]
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	2b07      	cmp	r3, #7
 80011fe:	d9f2      	bls.n	80011e6 <LCD_voidDrawSpecialCharachter+0x32>
	}
	/*Keda e7na 7atena al pattern fe location mo3yn fel CGRAM, fa na2esna bas neb3at al pattern lel DDRAM 34an n7oto fel LCD */
	/*kona fo2 3malna command 34an ne access al CGRAM 34an ne access al DDRAM lazem command tany
	 * wel set position feha asln al command dah*/
	LCD_voidSetPositionXY(Copy_uint8RowNum,Copy_uint8ColNum);
 8001200:	787a      	ldrb	r2, [r7, #1]
 8001202:	78bb      	ldrb	r3, [r7, #2]
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff8e 	bl	8001128 <LCD_voidSetPositionXY>
	LCD_voidSendCharachter(Copy_uint8LocationNum);
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff3e 	bl	8001090 <LCD_voidSendCharachter>
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <TASK_LCDBuzzer>:
#include "GPS.h"
#include "bluetooth.h"


void TASK_LCDBuzzer (void *parameters)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

	while(1)
	{
      //xTaskNotifyWait((uint32_t)NULL,0xFFFFFFFF,&Local_uint8NotificationValue, portMAX_DELAY);

	 switch(Local_uint8NotificationValue)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d104      	bne.n	8001234 <TASK_LCDBuzzer+0x18>
	 {
	 case Notify_TASK_LCDBuzzer_Break:

         Buzzer_voidHighSound();
 800122a:	f7ff fdf7 	bl	8000e1c <Buzzer_voidHighSound>
         LCD_HighLightIntensity_Warning();
 800122e:	f7ff fe05 	bl	8000e3c <LCD_HighLightIntensity_Warning>



		 break;
 8001232:	e000      	b.n	8001236 <TASK_LCDBuzzer+0x1a>

	 default:
		 /*Do Nothing*/
		 break;
 8001234:	bf00      	nop
	 switch(Local_uint8NotificationValue)
 8001236:	e7f5      	b.n	8001224 <TASK_LCDBuzzer+0x8>

08001238 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	71fb      	strb	r3, [r7, #7]
	 * increments by 1 for future storing, it doesnt coincide with the tail
	 * the % UART_BUFFER_SIZE checking if the index of the next storing procedure
	 * is bigger than the buffer size(ex this iteration stores in 512 byte and the next one
	 * will be in the 513 so i should reset the (i) to zero to repeat again)*/

  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800124a:	3301      	adds	r3, #1
 800124c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001250:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	429a      	cmp	r2, r3
 800125c:	d009      	beq.n	8001272 <store_char+0x3a>
  {
	  /*Storing the charachter in the recent head pointed location*/
    buffer->buffer[buffer->head] = c;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	79f9      	ldrb	r1, [r7, #7]
 8001268:	54d1      	strb	r1, [r2, r3]

    /*After storing the character, incrementing the head for the next storing */
    buffer->head = i;
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8001272:	bf00      	nop
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f003 0320 	and.w	r3, r3, #32
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d013      	beq.n	80012ca <Uart_isr+0x4a>
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	f003 0320 	and.w	r3, r3, #32
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00e      	beq.n	80012ca <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80012ba:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <Uart_isr+0xb4>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ffb8 	bl	8001238 <store_char>
        return;
 80012c8:	e031      	b.n	800132e <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d02c      	beq.n	800132e <Uart_isr+0xae>
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d027      	beq.n	800132e <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <Uart_isr+0xb8>)
 80012e0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <Uart_isr+0xb8>)
 80012e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d108      	bne.n	8001300 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012fc:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80012fe:	e015      	b.n	800132c <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001300:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <Uart_isr+0xb8>)
 8001302:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001306:	4a0c      	ldr	r2, [pc, #48]	; (8001338 <Uart_isr+0xb8>)
 8001308:	5cd3      	ldrb	r3, [r2, r3]
 800130a:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 800130c:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <Uart_isr+0xb8>)
 800130e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001312:	3301      	adds	r3, #1
 8001314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <Uart_isr+0xb8>)
 800131a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	7bba      	ldrb	r2, [r7, #14]
 800132a:	605a      	str	r2, [r3, #4]
    	return;
 800132c:	bf00      	nop
    }
}
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000238 	.word	0x20000238
 8001338:	20000030 	.word	0x20000030

0800133c <Calculate_Car_Speed>:
#include "calculateSpeed.h"

extern uint32_t edges_counter;

float Calculate_Car_Speed()
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
	float Local_uint16Speed;
	Local_uint16Speed = (edges_counter/50)/(2000.0*60);
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <Calculate_Car_Speed+0x48>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a10      	ldr	r2, [pc, #64]	; (8001388 <Calculate_Car_Speed+0x4c>)
 8001348:	fba2 2303 	umull	r2, r3, r2, r3
 800134c:	091b      	lsrs	r3, r3, #4
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f8ea 	bl	8000528 <__aeabi_ui2d>
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <Calculate_Car_Speed+0x50>)
 800135a:	f7ff fa89 	bl	8000870 <__aeabi_ddiv>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4610      	mov	r0, r2
 8001364:	4619      	mov	r1, r3
 8001366:	f7ff fb8b 	bl	8000a80 <__aeabi_d2f>
 800136a:	4603      	mov	r3, r0
 800136c:	607b      	str	r3, [r7, #4]
	edges_counter=0;
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <Calculate_Car_Speed+0x48>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
	return Local_uint16Speed;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	ee07 3a90 	vmov	s15, r3
}
 800137a:	eeb0 0a67 	vmov.f32	s0, s15
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000528 	.word	0x20000528
 8001388:	51eb851f 	.word	0x51eb851f
 800138c:	40fd4c00 	.word	0x40fd4c00

08001390 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001396:	f000 fff1 	bl	800237c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800139a:	f000 f845 	bl	8001428 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800139e:	f000 fb0b 	bl	80019b8 <MX_GPIO_Init>
	MX_I2C1_Init();
 80013a2:	f000 f8ad 	bl	8001500 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80013a6:	f000 fab3 	bl	8001910 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 80013aa:	f000 fadb 	bl	8001964 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 80013ae:	f000 f931 	bl	8001614 <MX_TIM2_Init>
	MX_I2C2_Init();
 80013b2:	f000 f8d3 	bl	800155c <MX_I2C2_Init>
	MX_I2C3_Init();
 80013b6:	f000 f8ff 	bl	80015b8 <MX_I2C3_Init>
	MX_TIM3_Init();
 80013ba:	f000 f98b 	bl	80016d4 <MX_TIM3_Init>
	MX_UART5_Init();
 80013be:	f000 fa7d 	bl	80018bc <MX_UART5_Init>
	MX_TIM6_Init();
 80013c2:	f000 fa01 	bl	80017c8 <MX_TIM6_Init>
	MX_TIM12_Init();
 80013c6:	f000 fa35 	bl	8001834 <MX_TIM12_Init>
	/* USER CODE BEGIN 2 */
	LCD_voidInit();
 80013ca:	f7ff fe03 	bl	8000fd4 <LCD_voidInit>

	//Enable the CYCCN counter (For SEGGER)
	DWT_CTRL |= (1<<0);
 80013ce:	4b13      	ldr	r3, [pc, #76]	; (800141c <main+0x8c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a12      	ldr	r2, [pc, #72]	; (800141c <main+0x8c>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6013      	str	r3, [r2, #0]

	SEGGER_SYSVIEW_Conf();
 80013da:	f006 ff59 	bl	8008290 <SEGGER_SYSVIEW_Conf>

	SEGGER_SYSVIEW_Start();
 80013de:	f007 fe87 	bl	80090f0 <SEGGER_SYSVIEW_Start>

	Task1_Status=xTaskCreate(TASK_LCDBuzzer, "LED1", 200, NULL, 2, &Task1_Handle);
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	2302      	movs	r3, #2
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2300      	movs	r3, #0
 80013ec:	22c8      	movs	r2, #200	; 0xc8
 80013ee:	490c      	ldr	r1, [pc, #48]	; (8001420 <main+0x90>)
 80013f0:	480c      	ldr	r0, [pc, #48]	; (8001424 <main+0x94>)
 80013f2:	f005 f8db 	bl	80065ac <xTaskCreate>
 80013f6:	60f8      	str	r0, [r7, #12]

	configASSERT(Task1_Status==pdPASS);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d00a      	beq.n	8001414 <main+0x84>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80013fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001402:	f383 8811 	msr	BASEPRI, r3
 8001406:	f3bf 8f6f 	isb	sy
 800140a:	f3bf 8f4f 	dsb	sy
 800140e:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001410:	bf00      	nop
 8001412:	e7fe      	b.n	8001412 <main+0x82>

	vTaskStartScheduler();
 8001414:	f005 fa52 	bl	80068bc <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001418:	e7fe      	b.n	8001418 <main+0x88>
 800141a:	bf00      	nop
 800141c:	e0001000 	.word	0xe0001000
 8001420:	08009d8c 	.word	0x08009d8c
 8001424:	0800121d 	.word	0x0800121d

08001428 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b094      	sub	sp, #80	; 0x50
 800142c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	2234      	movs	r2, #52	; 0x34
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f008 fbd6 	bl	8009be8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800144c:	2300      	movs	r3, #0
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	4b29      	ldr	r3, [pc, #164]	; (80014f8 <SystemClock_Config+0xd0>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	4a28      	ldr	r2, [pc, #160]	; (80014f8 <SystemClock_Config+0xd0>)
 8001456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145a:	6413      	str	r3, [r2, #64]	; 0x40
 800145c:	4b26      	ldr	r3, [pc, #152]	; (80014f8 <SystemClock_Config+0xd0>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001468:	2300      	movs	r3, #0
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	4b23      	ldr	r3, [pc, #140]	; (80014fc <SystemClock_Config+0xd4>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001474:	4a21      	ldr	r2, [pc, #132]	; (80014fc <SystemClock_Config+0xd4>)
 8001476:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <SystemClock_Config+0xd4>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001488:	2302      	movs	r3, #2
 800148a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800148c:	2301      	movs	r3, #1
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001490:	2310      	movs	r3, #16
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001494:	2302      	movs	r3, #2
 8001496:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001498:	2300      	movs	r3, #0
 800149a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 800149c:	2308      	movs	r3, #8
 800149e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 64;
 80014a0:	2340      	movs	r3, #64	; 0x40
 80014a2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014a4:	2302      	movs	r3, #2
 80014a6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80014a8:	2302      	movs	r3, #2
 80014aa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80014ac:	2302      	movs	r3, #2
 80014ae:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 fa2b 	bl	8003910 <HAL_RCC_OscConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 80014c0:	f000 fb22 	bl	8001b08 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c4:	230f      	movs	r3, #15
 80014c6:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c8:	2302      	movs	r3, #2
 80014ca:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014d8:	f107 0308 	add.w	r3, r7, #8
 80014dc:	2101      	movs	r1, #1
 80014de:	4618      	mov	r0, r3
 80014e0:	f001 ff20 	bl	8003324 <HAL_RCC_ClockConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <SystemClock_Config+0xc6>
	{
		Error_Handler();
 80014ea:	f000 fb0d 	bl	8001b08 <Error_Handler>
	}
}
 80014ee:	bf00      	nop
 80014f0:	3750      	adds	r7, #80	; 0x50
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40007000 	.word	0x40007000

08001500 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <MX_I2C1_Init+0x54>)
 8001506:	4a14      	ldr	r2, [pc, #80]	; (8001558 <MX_I2C1_Init+0x58>)
 8001508:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 1000;
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <MX_I2C1_Init+0x54>)
 800150c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001510:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <MX_I2C1_Init+0x54>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <MX_I2C1_Init+0x54>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <MX_I2C1_Init+0x54>)
 8001520:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001524:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <MX_I2C1_Init+0x54>)
 8001528:	2200      	movs	r2, #0
 800152a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <MX_I2C1_Init+0x54>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <MX_I2C1_Init+0x54>)
 8001534:	2200      	movs	r2, #0
 8001536:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MX_I2C1_Init+0x54>)
 800153a:	2200      	movs	r2, #0
 800153c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_I2C1_Init+0x54>)
 8001540:	f001 faa4 	bl	8002a8c <HAL_I2C_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_I2C1_Init+0x4e>
	{
		Error_Handler();
 800154a:	f000 fadd 	bl	8001b08 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2000023c 	.word	0x2000023c
 8001558:	40005400 	.word	0x40005400

0800155c <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <MX_I2C2_Init+0x54>)
 8001562:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <MX_I2C2_Init+0x58>)
 8001564:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 1000;
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <MX_I2C2_Init+0x54>)
 8001568:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800156c:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <MX_I2C2_Init+0x54>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 120;
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <MX_I2C2_Init+0x54>)
 8001576:	2278      	movs	r2, #120	; 0x78
 8001578:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <MX_I2C2_Init+0x54>)
 800157c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001580:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <MX_I2C2_Init+0x54>)
 8001584:	2200      	movs	r2, #0
 8001586:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <MX_I2C2_Init+0x54>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <MX_I2C2_Init+0x54>)
 8001590:	2200      	movs	r2, #0
 8001592:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <MX_I2C2_Init+0x54>)
 8001596:	2200      	movs	r2, #0
 8001598:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_I2C2_Init+0x54>)
 800159c:	f001 fa76 	bl	8002a8c <HAL_I2C_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_I2C2_Init+0x4e>
	{
		Error_Handler();
 80015a6:	f000 faaf 	bl	8001b08 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000290 	.word	0x20000290
 80015b4:	40005800 	.word	0x40005800

080015b8 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <MX_I2C3_Init+0x50>)
 80015be:	4a13      	ldr	r2, [pc, #76]	; (800160c <MX_I2C3_Init+0x54>)
 80015c0:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <MX_I2C3_Init+0x50>)
 80015c4:	4a12      	ldr	r2, [pc, #72]	; (8001610 <MX_I2C3_Init+0x58>)
 80015c6:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <MX_I2C3_Init+0x50>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <MX_I2C3_Init+0x50>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <MX_I2C3_Init+0x50>)
 80015d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015da:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <MX_I2C3_Init+0x50>)
 80015de:	2200      	movs	r2, #0
 80015e0:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <MX_I2C3_Init+0x50>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015e8:	4b07      	ldr	r3, [pc, #28]	; (8001608 <MX_I2C3_Init+0x50>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <MX_I2C3_Init+0x50>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015f4:	4804      	ldr	r0, [pc, #16]	; (8001608 <MX_I2C3_Init+0x50>)
 80015f6:	f001 fa49 	bl	8002a8c <HAL_I2C_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_I2C3_Init+0x4c>
	{
		Error_Handler();
 8001600:	f000 fa82 	bl	8001b08 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200002e4 	.word	0x200002e4
 800160c:	40005c00 	.word	0x40005c00
 8001610:	000186a0 	.word	0x000186a0

08001614 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8001624:	463b      	mov	r3, r7
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001630:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <MX_TIM2_Init+0xbc>)
 8001632:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001636:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 15999;
 8001638:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <MX_TIM2_Init+0xbc>)
 800163a:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800163e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001640:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <MX_TIM2_Init+0xbc>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 12000;
 8001646:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <MX_TIM2_Init+0xbc>)
 8001648:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800164c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164e:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <MX_TIM2_Init+0xbc>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001654:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <MX_TIM2_Init+0xbc>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800165a:	481d      	ldr	r0, [pc, #116]	; (80016d0 <MX_TIM2_Init+0xbc>)
 800165c:	f002 fdce 	bl	80041fc <HAL_TIM_IC_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 8001666:	f000 fa4f 	bl	8001b08 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001672:	f107 0310 	add.w	r3, r7, #16
 8001676:	4619      	mov	r1, r3
 8001678:	4815      	ldr	r0, [pc, #84]	; (80016d0 <MX_TIM2_Init+0xbc>)
 800167a:	f003 fc33 	bl	8004ee4 <HAL_TIMEx_MasterConfigSynchronization>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM2_Init+0x74>
	{
		Error_Handler();
 8001684:	f000 fa40 	bl	8001b08 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001688:	230a      	movs	r3, #10
 800168a:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800168c:	2301      	movs	r3, #1
 800168e:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001698:	463b      	mov	r3, r7
 800169a:	2200      	movs	r2, #0
 800169c:	4619      	mov	r1, r3
 800169e:	480c      	ldr	r0, [pc, #48]	; (80016d0 <MX_TIM2_Init+0xbc>)
 80016a0:	f002 ff03 	bl	80044aa <HAL_TIM_IC_ConfigChannel>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM2_Init+0x9a>
	{
		Error_Handler();
 80016aa:	f000 fa2d 	bl	8001b08 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016ae:	2300      	movs	r3, #0
 80016b0:	603b      	str	r3, [r7, #0]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80016b2:	463b      	mov	r3, r7
 80016b4:	2204      	movs	r2, #4
 80016b6:	4619      	mov	r1, r3
 80016b8:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_TIM2_Init+0xbc>)
 80016ba:	f002 fef6 	bl	80044aa <HAL_TIM_IC_ConfigChannel>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 80016c4:	f000 fa20 	bl	8001b08 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000338 	.word	0x20000338

080016d4 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	; 0x28
 80016d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016da:	f107 0320 	add.w	r3, r7, #32
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]
 80016f2:	615a      	str	r2, [r3, #20]
 80016f4:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80016f6:	4b32      	ldr	r3, [pc, #200]	; (80017c0 <MX_TIM3_Init+0xec>)
 80016f8:	4a32      	ldr	r2, [pc, #200]	; (80017c4 <MX_TIM3_Init+0xf0>)
 80016fa:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 320-1;
 80016fc:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <MX_TIM3_Init+0xec>)
 80016fe:	f240 123f 	movw	r2, #319	; 0x13f
 8001702:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001704:	4b2e      	ldr	r3, [pc, #184]	; (80017c0 <MX_TIM3_Init+0xec>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100-1;
 800170a:	4b2d      	ldr	r3, [pc, #180]	; (80017c0 <MX_TIM3_Init+0xec>)
 800170c:	2263      	movs	r2, #99	; 0x63
 800170e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001710:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <MX_TIM3_Init+0xec>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001716:	4b2a      	ldr	r3, [pc, #168]	; (80017c0 <MX_TIM3_Init+0xec>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800171c:	4828      	ldr	r0, [pc, #160]	; (80017c0 <MX_TIM3_Init+0xec>)
 800171e:	f002 fc55 	bl	8003fcc <HAL_TIM_PWM_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM3_Init+0x58>
	{
		Error_Handler();
 8001728:	f000 f9ee 	bl	8001b08 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001734:	f107 0320 	add.w	r3, r7, #32
 8001738:	4619      	mov	r1, r3
 800173a:	4821      	ldr	r0, [pc, #132]	; (80017c0 <MX_TIM3_Init+0xec>)
 800173c:	f003 fbd2 	bl	8004ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM3_Init+0x76>
	{
		Error_Handler();
 8001746:	f000 f9df 	bl	8001b08 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800174a:	2360      	movs	r3, #96	; 0x60
 800174c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	2200      	movs	r2, #0
 800175e:	4619      	mov	r1, r3
 8001760:	4817      	ldr	r0, [pc, #92]	; (80017c0 <MX_TIM3_Init+0xec>)
 8001762:	f002 ff3f 	bl	80045e4 <HAL_TIM_PWM_ConfigChannel>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM3_Init+0x9c>
	{
		Error_Handler();
 800176c:	f000 f9cc 	bl	8001b08 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	2204      	movs	r2, #4
 8001774:	4619      	mov	r1, r3
 8001776:	4812      	ldr	r0, [pc, #72]	; (80017c0 <MX_TIM3_Init+0xec>)
 8001778:	f002 ff34 	bl	80045e4 <HAL_TIM_PWM_ConfigChannel>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 8001782:	f000 f9c1 	bl	8001b08 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	2208      	movs	r2, #8
 800178a:	4619      	mov	r1, r3
 800178c:	480c      	ldr	r0, [pc, #48]	; (80017c0 <MX_TIM3_Init+0xec>)
 800178e:	f002 ff29 	bl	80045e4 <HAL_TIM_PWM_ConfigChannel>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM3_Init+0xc8>
	{
		Error_Handler();
 8001798:	f000 f9b6 	bl	8001b08 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	220c      	movs	r2, #12
 80017a0:	4619      	mov	r1, r3
 80017a2:	4807      	ldr	r0, [pc, #28]	; (80017c0 <MX_TIM3_Init+0xec>)
 80017a4:	f002 ff1e 	bl	80045e4 <HAL_TIM_PWM_ConfigChannel>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM3_Init+0xde>
	{
		Error_Handler();
 80017ae:	f000 f9ab 	bl	8001b08 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80017b2:	4803      	ldr	r0, [pc, #12]	; (80017c0 <MX_TIM3_Init+0xec>)
 80017b4:	f000 fb50 	bl	8001e58 <HAL_TIM_MspPostInit>

}
 80017b8:	bf00      	nop
 80017ba:	3728      	adds	r7, #40	; 0x28
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000380 	.word	0x20000380
 80017c4:	40000400 	.word	0x40000400

080017c8 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ce:	463b      	mov	r3, r7
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <MX_TIM6_Init+0x64>)
 80017d8:	4a15      	ldr	r2, [pc, #84]	; (8001830 <MX_TIM6_Init+0x68>)
 80017da:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <MX_TIM6_Init+0x64>)
 80017de:	2200      	movs	r2, #0
 80017e0:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <MX_TIM6_Init+0x64>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 65535;
 80017e8:	4b10      	ldr	r3, [pc, #64]	; (800182c <MX_TIM6_Init+0x64>)
 80017ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ee:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f0:	4b0e      	ldr	r3, [pc, #56]	; (800182c <MX_TIM6_Init+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017f6:	480d      	ldr	r0, [pc, #52]	; (800182c <MX_TIM6_Init+0x64>)
 80017f8:	f002 fb28 	bl	8003e4c <HAL_TIM_Base_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM6_Init+0x3e>
	{
		Error_Handler();
 8001802:	f000 f981 	bl	8001b08 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001806:	2300      	movs	r3, #0
 8001808:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800180e:	463b      	mov	r3, r7
 8001810:	4619      	mov	r1, r3
 8001812:	4806      	ldr	r0, [pc, #24]	; (800182c <MX_TIM6_Init+0x64>)
 8001814:	f003 fb66 	bl	8004ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM6_Init+0x5a>
	{
		Error_Handler();
 800181e:	f000 f973 	bl	8001b08 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200003c8 	.word	0x200003c8
 8001830:	40001000 	.word	0x40001000

08001834 <MX_TIM12_Init>:
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
 8001848:	615a      	str	r2, [r3, #20]
 800184a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <MX_TIM12_Init+0x80>)
 800184e:	4a1a      	ldr	r2, [pc, #104]	; (80018b8 <MX_TIM12_Init+0x84>)
 8001850:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 160-1;
 8001852:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <MX_TIM12_Init+0x80>)
 8001854:	229f      	movs	r2, #159	; 0x9f
 8001856:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001858:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <MX_TIM12_Init+0x80>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 100-1;
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <MX_TIM12_Init+0x80>)
 8001860:	2263      	movs	r2, #99	; 0x63
 8001862:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <MX_TIM12_Init+0x80>)
 8001866:	2200      	movs	r2, #0
 8001868:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186a:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <MX_TIM12_Init+0x80>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001870:	4810      	ldr	r0, [pc, #64]	; (80018b4 <MX_TIM12_Init+0x80>)
 8001872:	f002 fbab 	bl	8003fcc <HAL_TIM_PWM_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM12_Init+0x4c>
	{
		Error_Handler();
 800187c:	f000 f944 	bl	8001b08 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001880:	2360      	movs	r3, #96	; 0x60
 8001882:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	2200      	movs	r2, #0
 8001894:	4619      	mov	r1, r3
 8001896:	4807      	ldr	r0, [pc, #28]	; (80018b4 <MX_TIM12_Init+0x80>)
 8001898:	f002 fea4 	bl	80045e4 <HAL_TIM_PWM_ConfigChannel>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM12_Init+0x72>
	{
		Error_Handler();
 80018a2:	f000 f931 	bl	8001b08 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 80018a6:	4803      	ldr	r0, [pc, #12]	; (80018b4 <MX_TIM12_Init+0x80>)
 80018a8:	f000 fad6 	bl	8001e58 <HAL_TIM_MspPostInit>

}
 80018ac:	bf00      	nop
 80018ae:	3720      	adds	r7, #32
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000410 	.word	0x20000410
 80018b8:	40001800 	.word	0x40001800

080018bc <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <MX_UART5_Init+0x4c>)
 80018c2:	4a12      	ldr	r2, [pc, #72]	; (800190c <MX_UART5_Init+0x50>)
 80018c4:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 9600;
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <MX_UART5_Init+0x4c>)
 80018c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018cc:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <MX_UART5_Init+0x4c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <MX_UART5_Init+0x4c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <MX_UART5_Init+0x4c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <MX_UART5_Init+0x4c>)
 80018e2:	220c      	movs	r2, #12
 80018e4:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e6:	4b08      	ldr	r3, [pc, #32]	; (8001908 <MX_UART5_Init+0x4c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <MX_UART5_Init+0x4c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK)
 80018f2:	4805      	ldr	r0, [pc, #20]	; (8001908 <MX_UART5_Init+0x4c>)
 80018f4:	f003 fb86 	bl	8005004 <HAL_UART_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_UART5_Init+0x46>
	{
		Error_Handler();
 80018fe:	f000 f903 	bl	8001b08 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000458 	.word	0x20000458
 800190c:	40005000 	.word	0x40005000

08001910 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <MX_USART1_UART_Init+0x4c>)
 8001916:	4a12      	ldr	r2, [pc, #72]	; (8001960 <MX_USART1_UART_Init+0x50>)
 8001918:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <MX_USART1_UART_Init+0x4c>)
 800191c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001920:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <MX_USART1_UART_Init+0x4c>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <MX_USART1_UART_Init+0x4c>)
 800192a:	2200      	movs	r2, #0
 800192c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800192e:	4b0b      	ldr	r3, [pc, #44]	; (800195c <MX_USART1_UART_Init+0x4c>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <MX_USART1_UART_Init+0x4c>)
 8001936:	220c      	movs	r2, #12
 8001938:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <MX_USART1_UART_Init+0x4c>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <MX_USART1_UART_Init+0x4c>)
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <MX_USART1_UART_Init+0x4c>)
 8001948:	f003 fb5c 	bl	8005004 <HAL_UART_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8001952:	f000 f8d9 	bl	8001b08 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	2000049c 	.word	0x2000049c
 8001960:	40011000 	.word	0x40011000

08001964 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <MX_USART3_UART_Init+0x4c>)
 800196a:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <MX_USART3_UART_Init+0x50>)
 800196c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <MX_USART3_UART_Init+0x4c>)
 8001970:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001974:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <MX_USART3_UART_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <MX_USART3_UART_Init+0x4c>)
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <MX_USART3_UART_Init+0x4c>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <MX_USART3_UART_Init+0x4c>)
 800198a:	220c      	movs	r2, #12
 800198c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <MX_USART3_UART_Init+0x4c>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <MX_USART3_UART_Init+0x4c>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_USART3_UART_Init+0x4c>)
 800199c:	f003 fb32 	bl	8005004 <HAL_UART_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 80019a6:	f000 f8af 	bl	8001b08 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200004e0 	.word	0x200004e0
 80019b4:	40004800 	.word	0x40004800

080019b8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	; 0x28
 80019bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
 80019cc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	4b32      	ldr	r3, [pc, #200]	; (8001a9c <MX_GPIO_Init+0xe4>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a31      	ldr	r2, [pc, #196]	; (8001a9c <MX_GPIO_Init+0xe4>)
 80019d8:	f043 0304 	orr.w	r3, r3, #4
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b2f      	ldr	r3, [pc, #188]	; (8001a9c <MX_GPIO_Init+0xe4>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <MX_GPIO_Init+0xe4>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a2a      	ldr	r2, [pc, #168]	; (8001a9c <MX_GPIO_Init+0xe4>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <MX_GPIO_Init+0xe4>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <MX_GPIO_Init+0xe4>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a23      	ldr	r2, [pc, #140]	; (8001a9c <MX_GPIO_Init+0xe4>)
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <MX_GPIO_Init+0xe4>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <MX_GPIO_Init+0xe4>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a1c      	ldr	r2, [pc, #112]	; (8001a9c <MX_GPIO_Init+0xe4>)
 8001a2c:	f043 0308 	orr.w	r3, r3, #8
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <MX_GPIO_Init+0xe4>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f242 311c 	movw	r1, #8988	; 0x231c
 8001a44:	4816      	ldr	r0, [pc, #88]	; (8001aa0 <MX_GPIO_Init+0xe8>)
 8001a46:	f001 f807 	bl	8002a58 <HAL_GPIO_WritePin>
			|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001a50:	4814      	ldr	r0, [pc, #80]	; (8001aa4 <MX_GPIO_Init+0xec>)
 8001a52:	f001 f801 	bl	8002a58 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC13 PC2 PC3 PC4
                           PC8 PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001a56:	f242 331c 	movw	r3, #8988	; 0x231c
 8001a5a:	617b      	str	r3, [r7, #20]
			|GPIO_PIN_8|GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480c      	ldr	r0, [pc, #48]	; (8001aa0 <MX_GPIO_Init+0xe8>)
 8001a70:	f000 fe5e 	bl	8002730 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB5 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 8001a74:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001a78:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a82:	2300      	movs	r3, #0
 8001a84:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_GPIO_Init+0xec>)
 8001a8e:	f000 fe4f 	bl	8002730 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001a92:	bf00      	nop
 8001a94:	3728      	adds	r7, #40	; 0x28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020800 	.word	0x40020800
 8001aa4:	40020400 	.word	0x40020400

08001aa8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 || htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_TIM_IC_CaptureCallback+0x2c>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	7f1b      	ldrb	r3, [r3, #28]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d003      	beq.n	8001aca <HAL_TIM_IC_CaptureCallback+0x22>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	7f1b      	ldrb	r3, [r3, #28]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d104      	bne.n	8001ad4 <HAL_TIM_IC_CaptureCallback+0x2c>
	{
		edges_counter++;
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_TIM_IC_CaptureCallback+0x38>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	4a03      	ldr	r2, [pc, #12]	; (8001ae0 <HAL_TIM_IC_CaptureCallback+0x38>)
 8001ad2:	6013      	str	r3, [r2, #0]
	}
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	20000528 	.word	0x20000528

08001ae4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d101      	bne.n	8001afa <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001af6:	f000 fc63 	bl	80023c0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40001400 	.word	0x40001400

08001b08 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b0c:	b672      	cpsid	i
}
 8001b0e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001b10:	e7fe      	b.n	8001b10 <Error_Handler+0x8>
	...

08001b14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	4a0f      	ldr	r2, [pc, #60]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b28:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	4a08      	ldr	r2, [pc, #32]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800

08001b64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08e      	sub	sp, #56	; 0x38
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a5b      	ldr	r2, [pc, #364]	; (8001cf0 <HAL_I2C_MspInit+0x18c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d12c      	bne.n	8001be0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	623b      	str	r3, [r7, #32]
 8001b8a:	4b5a      	ldr	r3, [pc, #360]	; (8001cf4 <HAL_I2C_MspInit+0x190>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a59      	ldr	r2, [pc, #356]	; (8001cf4 <HAL_I2C_MspInit+0x190>)
 8001b90:	f043 0302 	orr.w	r3, r3, #2
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b57      	ldr	r3, [pc, #348]	; (8001cf4 <HAL_I2C_MspInit+0x190>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	623b      	str	r3, [r7, #32]
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ba2:	23c0      	movs	r3, #192	; 0xc0
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba6:	2312      	movs	r3, #18
 8001ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bba:	4619      	mov	r1, r3
 8001bbc:	484e      	ldr	r0, [pc, #312]	; (8001cf8 <HAL_I2C_MspInit+0x194>)
 8001bbe:	f000 fdb7 	bl	8002730 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	4b4b      	ldr	r3, [pc, #300]	; (8001cf4 <HAL_I2C_MspInit+0x190>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	4a4a      	ldr	r2, [pc, #296]	; (8001cf4 <HAL_I2C_MspInit+0x190>)
 8001bcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd2:	4b48      	ldr	r3, [pc, #288]	; (8001cf4 <HAL_I2C_MspInit+0x190>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bda:	61fb      	str	r3, [r7, #28]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001bde:	e082      	b.n	8001ce6 <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C2)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a45      	ldr	r2, [pc, #276]	; (8001cfc <HAL_I2C_MspInit+0x198>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d12d      	bne.n	8001c46 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	61bb      	str	r3, [r7, #24]
 8001bee:	4b41      	ldr	r3, [pc, #260]	; (8001cf4 <HAL_I2C_MspInit+0x190>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a40      	ldr	r2, [pc, #256]	; (8001cf4 <HAL_I2C_MspInit+0x190>)
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b3e      	ldr	r3, [pc, #248]	; (8001cf4 <HAL_I2C_MspInit+0x190>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	61bb      	str	r3, [r7, #24]
 8001c04:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001c06:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c0c:	2312      	movs	r3, #18
 8001c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c18:	2304      	movs	r3, #4
 8001c1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c20:	4619      	mov	r1, r3
 8001c22:	4835      	ldr	r0, [pc, #212]	; (8001cf8 <HAL_I2C_MspInit+0x194>)
 8001c24:	f000 fd84 	bl	8002730 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <HAL_I2C_MspInit+0x190>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	4a30      	ldr	r2, [pc, #192]	; (8001cf4 <HAL_I2C_MspInit+0x190>)
 8001c32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c36:	6413      	str	r3, [r2, #64]	; 0x40
 8001c38:	4b2e      	ldr	r3, [pc, #184]	; (8001cf4 <HAL_I2C_MspInit+0x190>)
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	697b      	ldr	r3, [r7, #20]
}
 8001c44:	e04f      	b.n	8001ce6 <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C3)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a2d      	ldr	r2, [pc, #180]	; (8001d00 <HAL_I2C_MspInit+0x19c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d14a      	bne.n	8001ce6 <HAL_I2C_MspInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	4b27      	ldr	r3, [pc, #156]	; (8001cf4 <HAL_I2C_MspInit+0x190>)
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	4a26      	ldr	r2, [pc, #152]	; (8001cf4 <HAL_I2C_MspInit+0x190>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c60:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <HAL_I2C_MspInit+0x190>)
 8001c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <HAL_I2C_MspInit+0x190>)
 8001c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c74:	4a1f      	ldr	r2, [pc, #124]	; (8001cf4 <HAL_I2C_MspInit+0x190>)
 8001c76:	f043 0302 	orr.w	r3, r3, #2
 8001c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <HAL_I2C_MspInit+0x190>)
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c8e:	2312      	movs	r3, #18
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c96:	2303      	movs	r3, #3
 8001c98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4817      	ldr	r0, [pc, #92]	; (8001d04 <HAL_I2C_MspInit+0x1a0>)
 8001ca6:	f000 fd43 	bl	8002730 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001caa:	2310      	movs	r3, #16
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cae:	2312      	movs	r3, #18
 8001cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cba:	2304      	movs	r3, #4
 8001cbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	480c      	ldr	r0, [pc, #48]	; (8001cf8 <HAL_I2C_MspInit+0x194>)
 8001cc6:	f000 fd33 	bl	8002730 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_I2C_MspInit+0x190>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	4a08      	ldr	r2, [pc, #32]	; (8001cf4 <HAL_I2C_MspInit+0x190>)
 8001cd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_I2C_MspInit+0x190>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
}
 8001ce6:	bf00      	nop
 8001ce8:	3738      	adds	r7, #56	; 0x38
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40005400 	.word	0x40005400
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020400 	.word	0x40020400
 8001cfc:	40005800 	.word	0x40005800
 8001d00:	40005c00 	.word	0x40005c00
 8001d04:	40020000 	.word	0x40020000

08001d08 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	; 0x28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d28:	d133      	bne.n	8001d92 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <HAL_TIM_IC_MspInit+0x94>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	4a1a      	ldr	r2, [pc, #104]	; (8001d9c <HAL_TIM_IC_MspInit+0x94>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3a:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <HAL_TIM_IC_MspInit+0x94>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <HAL_TIM_IC_MspInit+0x94>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a13      	ldr	r2, [pc, #76]	; (8001d9c <HAL_TIM_IC_MspInit+0x94>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HAL_TIM_IC_MspInit+0x94>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d62:	2303      	movs	r3, #3
 8001d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	2302      	movs	r3, #2
 8001d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d72:	2301      	movs	r3, #1
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d76:	f107 0314 	add.w	r3, r7, #20
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4808      	ldr	r0, [pc, #32]	; (8001da0 <HAL_TIM_IC_MspInit+0x98>)
 8001d7e:	f000 fcd7 	bl	8002730 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2100      	movs	r1, #0
 8001d86:	201c      	movs	r0, #28
 8001d88:	f000 fc16 	bl	80025b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d8c:	201c      	movs	r0, #28
 8001d8e:	f000 fc2f 	bl	80025f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d92:	bf00      	nop
 8001d94:	3728      	adds	r7, #40	; 0x28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020000 	.word	0x40020000

08001da4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a15      	ldr	r2, [pc, #84]	; (8001e08 <HAL_TIM_PWM_MspInit+0x64>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d10e      	bne.n	8001dd4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <HAL_TIM_PWM_MspInit+0x68>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a13      	ldr	r2, [pc, #76]	; (8001e0c <HAL_TIM_PWM_MspInit+0x68>)
 8001dc0:	f043 0302 	orr.w	r3, r3, #2
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <HAL_TIM_PWM_MspInit+0x68>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001dd2:	e012      	b.n	8001dfa <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0d      	ldr	r2, [pc, #52]	; (8001e10 <HAL_TIM_PWM_MspInit+0x6c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d10d      	bne.n	8001dfa <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <HAL_TIM_PWM_MspInit+0x68>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <HAL_TIM_PWM_MspInit+0x68>)
 8001de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
 8001dee:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <HAL_TIM_PWM_MspInit+0x68>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
}
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40000400 	.word	0x40000400
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40001800 	.word	0x40001800

08001e14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0b      	ldr	r2, [pc, #44]	; (8001e50 <HAL_TIM_Base_MspInit+0x3c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d10d      	bne.n	8001e42 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <HAL_TIM_Base_MspInit+0x40>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	4a09      	ldr	r2, [pc, #36]	; (8001e54 <HAL_TIM_Base_MspInit+0x40>)
 8001e30:	f043 0310 	orr.w	r3, r3, #16
 8001e34:	6413      	str	r3, [r2, #64]	; 0x40
 8001e36:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <HAL_TIM_Base_MspInit+0x40>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f003 0310 	and.w	r3, r3, #16
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001e42:	bf00      	nop
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40001000 	.word	0x40001000
 8001e54:	40023800 	.word	0x40023800

08001e58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08a      	sub	sp, #40	; 0x28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a33      	ldr	r2, [pc, #204]	; (8001f44 <HAL_TIM_MspPostInit+0xec>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d13c      	bne.n	8001ef4 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	4b32      	ldr	r3, [pc, #200]	; (8001f48 <HAL_TIM_MspPostInit+0xf0>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a31      	ldr	r2, [pc, #196]	; (8001f48 <HAL_TIM_MspPostInit+0xf0>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b2f      	ldr	r3, [pc, #188]	; (8001f48 <HAL_TIM_MspPostInit+0xf0>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	4b2b      	ldr	r3, [pc, #172]	; (8001f48 <HAL_TIM_MspPostInit+0xf0>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a2a      	ldr	r2, [pc, #168]	; (8001f48 <HAL_TIM_MspPostInit+0xf0>)
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b28      	ldr	r3, [pc, #160]	; (8001f48 <HAL_TIM_MspPostInit+0xf0>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eb2:	23c0      	movs	r3, #192	; 0xc0
 8001eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec6:	f107 0314 	add.w	r3, r7, #20
 8001eca:	4619      	mov	r1, r3
 8001ecc:	481f      	ldr	r0, [pc, #124]	; (8001f4c <HAL_TIM_MspPostInit+0xf4>)
 8001ece:	f000 fc2f 	bl	8002730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	4818      	ldr	r0, [pc, #96]	; (8001f50 <HAL_TIM_MspPostInit+0xf8>)
 8001eee:	f000 fc1f 	bl	8002730 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001ef2:	e023      	b.n	8001f3c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM12)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a16      	ldr	r2, [pc, #88]	; (8001f54 <HAL_TIM_MspPostInit+0xfc>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d11e      	bne.n	8001f3c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <HAL_TIM_MspPostInit+0xf0>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	4a10      	ldr	r2, [pc, #64]	; (8001f48 <HAL_TIM_MspPostInit+0xf0>)
 8001f08:	f043 0302 	orr.w	r3, r3, #2
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <HAL_TIM_MspPostInit+0xf0>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001f1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	2302      	movs	r3, #2
 8001f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001f2c:	2309      	movs	r3, #9
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	4619      	mov	r1, r3
 8001f36:	4806      	ldr	r0, [pc, #24]	; (8001f50 <HAL_TIM_MspPostInit+0xf8>)
 8001f38:	f000 fbfa 	bl	8002730 <HAL_GPIO_Init>
}
 8001f3c:	bf00      	nop
 8001f3e:	3728      	adds	r7, #40	; 0x28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40000400 	.word	0x40000400
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40020000 	.word	0x40020000
 8001f50:	40020400 	.word	0x40020400
 8001f54:	40001800 	.word	0x40001800

08001f58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08e      	sub	sp, #56	; 0x38
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a67      	ldr	r2, [pc, #412]	; (8002114 <HAL_UART_MspInit+0x1bc>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d153      	bne.n	8002022 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	623b      	str	r3, [r7, #32]
 8001f7e:	4b66      	ldr	r3, [pc, #408]	; (8002118 <HAL_UART_MspInit+0x1c0>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	4a65      	ldr	r2, [pc, #404]	; (8002118 <HAL_UART_MspInit+0x1c0>)
 8001f84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f88:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8a:	4b63      	ldr	r3, [pc, #396]	; (8002118 <HAL_UART_MspInit+0x1c0>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f92:	623b      	str	r3, [r7, #32]
 8001f94:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
 8001f9a:	4b5f      	ldr	r3, [pc, #380]	; (8002118 <HAL_UART_MspInit+0x1c0>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4a5e      	ldr	r2, [pc, #376]	; (8002118 <HAL_UART_MspInit+0x1c0>)
 8001fa0:	f043 0304 	orr.w	r3, r3, #4
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa6:	4b5c      	ldr	r3, [pc, #368]	; (8002118 <HAL_UART_MspInit+0x1c0>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	61fb      	str	r3, [r7, #28]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	4b58      	ldr	r3, [pc, #352]	; (8002118 <HAL_UART_MspInit+0x1c0>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a57      	ldr	r2, [pc, #348]	; (8002118 <HAL_UART_MspInit+0x1c0>)
 8001fbc:	f043 0308 	orr.w	r3, r3, #8
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b55      	ldr	r3, [pc, #340]	; (8002118 <HAL_UART_MspInit+0x1c0>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	61bb      	str	r3, [r7, #24]
 8001fcc:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe8:	4619      	mov	r1, r3
 8001fea:	484c      	ldr	r0, [pc, #304]	; (800211c <HAL_UART_MspInit+0x1c4>)
 8001fec:	f000 fba0 	bl	8002730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002000:	2308      	movs	r3, #8
 8002002:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002008:	4619      	mov	r1, r3
 800200a:	4845      	ldr	r0, [pc, #276]	; (8002120 <HAL_UART_MspInit+0x1c8>)
 800200c:	f000 fb90 	bl	8002730 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002010:	2200      	movs	r2, #0
 8002012:	2100      	movs	r1, #0
 8002014:	2035      	movs	r0, #53	; 0x35
 8002016:	f000 facf 	bl	80025b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800201a:	2035      	movs	r0, #53	; 0x35
 800201c:	f000 fae8 	bl	80025f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002020:	e074      	b.n	800210c <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART1)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a3f      	ldr	r2, [pc, #252]	; (8002124 <HAL_UART_MspInit+0x1cc>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d135      	bne.n	8002098 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	4b39      	ldr	r3, [pc, #228]	; (8002118 <HAL_UART_MspInit+0x1c0>)
 8002032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002034:	4a38      	ldr	r2, [pc, #224]	; (8002118 <HAL_UART_MspInit+0x1c0>)
 8002036:	f043 0310 	orr.w	r3, r3, #16
 800203a:	6453      	str	r3, [r2, #68]	; 0x44
 800203c:	4b36      	ldr	r3, [pc, #216]	; (8002118 <HAL_UART_MspInit+0x1c0>)
 800203e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002040:	f003 0310 	and.w	r3, r3, #16
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	4b32      	ldr	r3, [pc, #200]	; (8002118 <HAL_UART_MspInit+0x1c0>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	4a31      	ldr	r2, [pc, #196]	; (8002118 <HAL_UART_MspInit+0x1c0>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6313      	str	r3, [r2, #48]	; 0x30
 8002058:	4b2f      	ldr	r3, [pc, #188]	; (8002118 <HAL_UART_MspInit+0x1c0>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002064:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002072:	2303      	movs	r3, #3
 8002074:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002076:	2307      	movs	r3, #7
 8002078:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207e:	4619      	mov	r1, r3
 8002080:	4829      	ldr	r0, [pc, #164]	; (8002128 <HAL_UART_MspInit+0x1d0>)
 8002082:	f000 fb55 	bl	8002730 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	2106      	movs	r1, #6
 800208a:	2025      	movs	r0, #37	; 0x25
 800208c:	f000 fa94 	bl	80025b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002090:	2025      	movs	r0, #37	; 0x25
 8002092:	f000 faad 	bl	80025f0 <HAL_NVIC_EnableIRQ>
}
 8002096:	e039      	b.n	800210c <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART3)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a23      	ldr	r2, [pc, #140]	; (800212c <HAL_UART_MspInit+0x1d4>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d134      	bne.n	800210c <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <HAL_UART_MspInit+0x1c0>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	4a1b      	ldr	r2, [pc, #108]	; (8002118 <HAL_UART_MspInit+0x1c0>)
 80020ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b0:	6413      	str	r3, [r2, #64]	; 0x40
 80020b2:	4b19      	ldr	r3, [pc, #100]	; (8002118 <HAL_UART_MspInit+0x1c0>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <HAL_UART_MspInit+0x1c0>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a14      	ldr	r2, [pc, #80]	; (8002118 <HAL_UART_MspInit+0x1c0>)
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b12      	ldr	r3, [pc, #72]	; (8002118 <HAL_UART_MspInit+0x1c0>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 80020da:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e0:	2302      	movs	r3, #2
 80020e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e8:	2303      	movs	r3, #3
 80020ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020ec:	2307      	movs	r3, #7
 80020ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f4:	4619      	mov	r1, r3
 80020f6:	4809      	ldr	r0, [pc, #36]	; (800211c <HAL_UART_MspInit+0x1c4>)
 80020f8:	f000 fb1a 	bl	8002730 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2101      	movs	r1, #1
 8002100:	2027      	movs	r0, #39	; 0x27
 8002102:	f000 fa59 	bl	80025b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002106:	2027      	movs	r0, #39	; 0x27
 8002108:	f000 fa72 	bl	80025f0 <HAL_NVIC_EnableIRQ>
}
 800210c:	bf00      	nop
 800210e:	3738      	adds	r7, #56	; 0x38
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40005000 	.word	0x40005000
 8002118:	40023800 	.word	0x40023800
 800211c:	40020800 	.word	0x40020800
 8002120:	40020c00 	.word	0x40020c00
 8002124:	40011000 	.word	0x40011000
 8002128:	40020000 	.word	0x40020000
 800212c:	40004800 	.word	0x40004800

08002130 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08e      	sub	sp, #56	; 0x38
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002140:	2300      	movs	r3, #0
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	4b33      	ldr	r3, [pc, #204]	; (8002214 <HAL_InitTick+0xe4>)
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	4a32      	ldr	r2, [pc, #200]	; (8002214 <HAL_InitTick+0xe4>)
 800214a:	f043 0320 	orr.w	r3, r3, #32
 800214e:	6413      	str	r3, [r2, #64]	; 0x40
 8002150:	4b30      	ldr	r3, [pc, #192]	; (8002214 <HAL_InitTick+0xe4>)
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	f003 0320 	and.w	r3, r3, #32
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800215c:	f107 0210 	add.w	r2, r7, #16
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	4611      	mov	r1, r2
 8002166:	4618      	mov	r0, r3
 8002168:	f001 f9f6 	bl	8003558 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002172:	2b00      	cmp	r3, #0
 8002174:	d103      	bne.n	800217e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002176:	f001 f9c7 	bl	8003508 <HAL_RCC_GetPCLK1Freq>
 800217a:	6378      	str	r0, [r7, #52]	; 0x34
 800217c:	e004      	b.n	8002188 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800217e:	f001 f9c3 	bl	8003508 <HAL_RCC_GetPCLK1Freq>
 8002182:	4603      	mov	r3, r0
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800218a:	4a23      	ldr	r2, [pc, #140]	; (8002218 <HAL_InitTick+0xe8>)
 800218c:	fba2 2303 	umull	r2, r3, r2, r3
 8002190:	0c9b      	lsrs	r3, r3, #18
 8002192:	3b01      	subs	r3, #1
 8002194:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002196:	4b21      	ldr	r3, [pc, #132]	; (800221c <HAL_InitTick+0xec>)
 8002198:	4a21      	ldr	r2, [pc, #132]	; (8002220 <HAL_InitTick+0xf0>)
 800219a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800219c:	4b1f      	ldr	r3, [pc, #124]	; (800221c <HAL_InitTick+0xec>)
 800219e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021a2:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80021a4:	4a1d      	ldr	r2, [pc, #116]	; (800221c <HAL_InitTick+0xec>)
 80021a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a8:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80021aa:	4b1c      	ldr	r3, [pc, #112]	; (800221c <HAL_InitTick+0xec>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b0:	4b1a      	ldr	r3, [pc, #104]	; (800221c <HAL_InitTick+0xec>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b6:	4b19      	ldr	r3, [pc, #100]	; (800221c <HAL_InitTick+0xec>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80021bc:	4817      	ldr	r0, [pc, #92]	; (800221c <HAL_InitTick+0xec>)
 80021be:	f001 fe45 	bl	8003e4c <HAL_TIM_Base_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80021c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d11b      	bne.n	8002208 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80021d0:	4812      	ldr	r0, [pc, #72]	; (800221c <HAL_InitTick+0xec>)
 80021d2:	f001 fe8b 	bl	8003eec <HAL_TIM_Base_Start_IT>
 80021d6:	4603      	mov	r3, r0
 80021d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80021dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d111      	bne.n	8002208 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80021e4:	2037      	movs	r0, #55	; 0x37
 80021e6:	f000 fa03 	bl	80025f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b0f      	cmp	r3, #15
 80021ee:	d808      	bhi.n	8002202 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80021f0:	2200      	movs	r2, #0
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	2037      	movs	r0, #55	; 0x37
 80021f6:	f000 f9df 	bl	80025b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021fa:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <HAL_InitTick+0xf4>)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	e002      	b.n	8002208 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002208:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800220c:	4618      	mov	r0, r3
 800220e:	3738      	adds	r7, #56	; 0x38
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40023800 	.word	0x40023800
 8002218:	431bde83 	.word	0x431bde83
 800221c:	20000530 	.word	0x20000530
 8002220:	40001400 	.word	0x40001400
 8002224:	20000004 	.word	0x20000004

08002228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800222c:	e7fe      	b.n	800222c <NMI_Handler+0x4>

0800222e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002232:	e7fe      	b.n	8002232 <HardFault_Handler+0x4>

08002234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <MemManage_Handler+0x4>

0800223a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223e:	e7fe      	b.n	800223e <BusFault_Handler+0x4>

08002240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002244:	e7fe      	b.n	8002244 <UsageFault_Handler+0x4>
	...

08002248 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	float Local_fSpeed_In_Decimals;
	is_two_readings++;
 800224e:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <TIM2_IRQHandler+0x5c>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	3301      	adds	r3, #1
 8002254:	b2da      	uxtb	r2, r3
 8002256:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <TIM2_IRQHandler+0x5c>)
 8002258:	701a      	strb	r2, [r3, #0]
	if(is_two_readings == 2){
 800225a:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <TIM2_IRQHandler+0x5c>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d119      	bne.n	8002296 <TIM2_IRQHandler+0x4e>
		Local_fSpeed_In_Decimals=Calculate_Car_Speed();
 8002262:	f7ff f86b 	bl	800133c <Calculate_Car_Speed>
 8002266:	ed87 0a01 	vstr	s0, [r7, #4]
         Global_Speed=round(Local_fSpeed_In_Decimals);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7fe f97e 	bl	800056c <__aeabi_f2d>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	ec43 2b10 	vmov	d0, r2, r3
 8002278:	f007 fcf0 	bl	8009c5c <round>
 800227c:	ec53 2b10 	vmov	r2, r3, d0
 8002280:	4610      	mov	r0, r2
 8002282:	4619      	mov	r1, r3
 8002284:	f7fe fbdc 	bl	8000a40 <__aeabi_d2uiz>
 8002288:	4603      	mov	r3, r0
 800228a:	b29a      	uxth	r2, r3
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <TIM2_IRQHandler+0x60>)
 800228e:	801a      	strh	r2, [r3, #0]
		is_two_readings = 0;
 8002290:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <TIM2_IRQHandler+0x5c>)
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002296:	4805      	ldr	r0, [pc, #20]	; (80022ac <TIM2_IRQHandler+0x64>)
 8002298:	f001 ffff 	bl	800429a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000524 	.word	0x20000524
 80022a8:	2000052c 	.word	0x2000052c
 80022ac:	20000338 	.word	0x20000338

080022b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 80022b4:	4803      	ldr	r0, [pc, #12]	; (80022c4 <USART1_IRQHandler+0x14>)
 80022b6:	f7fe ffe3 	bl	8001280 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022ba:	4802      	ldr	r0, [pc, #8]	; (80022c4 <USART1_IRQHandler+0x14>)
 80022bc:	f002 fef0 	bl	80050a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022c0:	bf00      	nop
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	2000049c 	.word	0x2000049c

080022c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80022cc:	4802      	ldr	r0, [pc, #8]	; (80022d8 <USART3_IRQHandler+0x10>)
 80022ce:	f002 fee7 	bl	80050a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	200004e0 	.word	0x200004e0

080022dc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <UART5_IRQHandler+0x10>)
 80022e2:	f002 fedd 	bl	80050a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000458 	.word	0x20000458

080022f0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80022f4:	4802      	ldr	r0, [pc, #8]	; (8002300 <TIM7_IRQHandler+0x10>)
 80022f6:	f001 ffd0 	bl	800429a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000530 	.word	0x20000530

08002304 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <SystemInit+0x20>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230e:	4a05      	ldr	r2, [pc, #20]	; (8002324 <SystemInit+0x20>)
 8002310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002360 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800232c:	480d      	ldr	r0, [pc, #52]	; (8002364 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800232e:	490e      	ldr	r1, [pc, #56]	; (8002368 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002330:	4a0e      	ldr	r2, [pc, #56]	; (800236c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002334:	e002      	b.n	800233c <LoopCopyDataInit>

08002336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800233a:	3304      	adds	r3, #4

0800233c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800233c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800233e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002340:	d3f9      	bcc.n	8002336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002342:	4a0b      	ldr	r2, [pc, #44]	; (8002370 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002344:	4c0b      	ldr	r4, [pc, #44]	; (8002374 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002348:	e001      	b.n	800234e <LoopFillZerobss>

0800234a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800234a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800234c:	3204      	adds	r2, #4

0800234e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800234e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002350:	d3fb      	bcc.n	800234a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002352:	f7ff ffd7 	bl	8002304 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002356:	f007 fc4f 	bl	8009bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800235a:	f7ff f819 	bl	8001390 <main>
  bx  lr    
 800235e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002360:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002368:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800236c:	08009ea8 	.word	0x08009ea8
  ldr r2, =_sbss
 8002370:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002374:	20014998 	.word	0x20014998

08002378 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002378:	e7fe      	b.n	8002378 <ADC_IRQHandler>
	...

0800237c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002380:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <HAL_Init+0x40>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0d      	ldr	r2, [pc, #52]	; (80023bc <HAL_Init+0x40>)
 8002386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800238a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_Init+0x40>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0a      	ldr	r2, [pc, #40]	; (80023bc <HAL_Init+0x40>)
 8002392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002396:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002398:	4b08      	ldr	r3, [pc, #32]	; (80023bc <HAL_Init+0x40>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a07      	ldr	r2, [pc, #28]	; (80023bc <HAL_Init+0x40>)
 800239e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a4:	2003      	movs	r0, #3
 80023a6:	f000 f8fc 	bl	80025a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023aa:	200f      	movs	r0, #15
 80023ac:	f7ff fec0 	bl	8002130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023b0:	f7ff fbb0 	bl	8001b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40023c00 	.word	0x40023c00

080023c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <HAL_IncTick+0x20>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_IncTick+0x24>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4413      	add	r3, r2
 80023d0:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <HAL_IncTick+0x24>)
 80023d2:	6013      	str	r3, [r2, #0]
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	20000008 	.word	0x20000008
 80023e4:	20000578 	.word	0x20000578

080023e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return uwTick;
 80023ec:	4b03      	ldr	r3, [pc, #12]	; (80023fc <HAL_GetTick+0x14>)
 80023ee:	681b      	ldr	r3, [r3, #0]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	20000578 	.word	0x20000578

08002400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002408:	f7ff ffee 	bl	80023e8 <HAL_GetTick>
 800240c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002418:	d005      	beq.n	8002426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800241a:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <HAL_Delay+0x44>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4413      	add	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002426:	bf00      	nop
 8002428:	f7ff ffde 	bl	80023e8 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	429a      	cmp	r2, r3
 8002436:	d8f7      	bhi.n	8002428 <HAL_Delay+0x28>
  {
  }
}
 8002438:	bf00      	nop
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000008 	.word	0x20000008

08002448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002458:	4b0c      	ldr	r3, [pc, #48]	; (800248c <__NVIC_SetPriorityGrouping+0x44>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002464:	4013      	ands	r3, r2
 8002466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002470:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800247a:	4a04      	ldr	r2, [pc, #16]	; (800248c <__NVIC_SetPriorityGrouping+0x44>)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	60d3      	str	r3, [r2, #12]
}
 8002480:	bf00      	nop
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002494:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	0a1b      	lsrs	r3, r3, #8
 800249a:	f003 0307 	and.w	r3, r3, #7
}
 800249e:	4618      	mov	r0, r3
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	db0b      	blt.n	80024d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	f003 021f 	and.w	r2, r3, #31
 80024c4:	4907      	ldr	r1, [pc, #28]	; (80024e4 <__NVIC_EnableIRQ+0x38>)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	095b      	lsrs	r3, r3, #5
 80024cc:	2001      	movs	r0, #1
 80024ce:	fa00 f202 	lsl.w	r2, r0, r2
 80024d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	e000e100 	.word	0xe000e100

080024e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	6039      	str	r1, [r7, #0]
 80024f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	db0a      	blt.n	8002512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	490c      	ldr	r1, [pc, #48]	; (8002534 <__NVIC_SetPriority+0x4c>)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	0112      	lsls	r2, r2, #4
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	440b      	add	r3, r1
 800250c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002510:	e00a      	b.n	8002528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	b2da      	uxtb	r2, r3
 8002516:	4908      	ldr	r1, [pc, #32]	; (8002538 <__NVIC_SetPriority+0x50>)
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	3b04      	subs	r3, #4
 8002520:	0112      	lsls	r2, r2, #4
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	440b      	add	r3, r1
 8002526:	761a      	strb	r2, [r3, #24]
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	e000e100 	.word	0xe000e100
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800253c:	b480      	push	{r7}
 800253e:	b089      	sub	sp, #36	; 0x24
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f1c3 0307 	rsb	r3, r3, #7
 8002556:	2b04      	cmp	r3, #4
 8002558:	bf28      	it	cs
 800255a:	2304      	movcs	r3, #4
 800255c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3304      	adds	r3, #4
 8002562:	2b06      	cmp	r3, #6
 8002564:	d902      	bls.n	800256c <NVIC_EncodePriority+0x30>
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3b03      	subs	r3, #3
 800256a:	e000      	b.n	800256e <NVIC_EncodePriority+0x32>
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002570:	f04f 32ff 	mov.w	r2, #4294967295
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43da      	mvns	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	401a      	ands	r2, r3
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002584:	f04f 31ff 	mov.w	r1, #4294967295
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	fa01 f303 	lsl.w	r3, r1, r3
 800258e:	43d9      	mvns	r1, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002594:	4313      	orrs	r3, r2
         );
}
 8002596:	4618      	mov	r0, r3
 8002598:	3724      	adds	r7, #36	; 0x24
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ff4c 	bl	8002448 <__NVIC_SetPriorityGrouping>
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
 80025c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025ca:	f7ff ff61 	bl	8002490 <__NVIC_GetPriorityGrouping>
 80025ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	68b9      	ldr	r1, [r7, #8]
 80025d4:	6978      	ldr	r0, [r7, #20]
 80025d6:	f7ff ffb1 	bl	800253c <NVIC_EncodePriority>
 80025da:	4602      	mov	r2, r0
 80025dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025e0:	4611      	mov	r1, r2
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff ff80 	bl	80024e8 <__NVIC_SetPriority>
}
 80025e8:	bf00      	nop
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff ff54 	bl	80024ac <__NVIC_EnableIRQ>
}
 8002604:	bf00      	nop
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002618:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800261a:	f7ff fee5 	bl	80023e8 <HAL_GetTick>
 800261e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d008      	beq.n	800263e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2280      	movs	r2, #128	; 0x80
 8002630:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e052      	b.n	80026e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0216 	bic.w	r2, r2, #22
 800264c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800265c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	2b00      	cmp	r3, #0
 8002664:	d103      	bne.n	800266e <HAL_DMA_Abort+0x62>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800266a:	2b00      	cmp	r3, #0
 800266c:	d007      	beq.n	800267e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0208 	bic.w	r2, r2, #8
 800267c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0201 	bic.w	r2, r2, #1
 800268c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800268e:	e013      	b.n	80026b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002690:	f7ff feaa 	bl	80023e8 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b05      	cmp	r3, #5
 800269c:	d90c      	bls.n	80026b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2220      	movs	r2, #32
 80026a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2203      	movs	r2, #3
 80026a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e015      	b.n	80026e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1e4      	bne.n	8002690 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ca:	223f      	movs	r2, #63	; 0x3f
 80026cc:	409a      	lsls	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d004      	beq.n	800270a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2280      	movs	r2, #128	; 0x80
 8002704:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e00c      	b.n	8002724 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2205      	movs	r2, #5
 800270e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0201 	bic.w	r2, r2, #1
 8002720:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002730:	b480      	push	{r7}
 8002732:	b089      	sub	sp, #36	; 0x24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002742:	2300      	movs	r3, #0
 8002744:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
 800274a:	e165      	b.n	8002a18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800274c:	2201      	movs	r2, #1
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	4013      	ands	r3, r2
 800275e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	429a      	cmp	r2, r3
 8002766:	f040 8154 	bne.w	8002a12 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b01      	cmp	r3, #1
 8002774:	d005      	beq.n	8002782 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800277e:	2b02      	cmp	r3, #2
 8002780:	d130      	bne.n	80027e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	2203      	movs	r2, #3
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4013      	ands	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027b8:	2201      	movs	r2, #1
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f003 0201 	and.w	r2, r3, #1
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d017      	beq.n	8002820 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	2203      	movs	r2, #3
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d123      	bne.n	8002874 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	08da      	lsrs	r2, r3, #3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3208      	adds	r2, #8
 8002834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002838:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	220f      	movs	r2, #15
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	08da      	lsrs	r2, r3, #3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3208      	adds	r2, #8
 800286e:	69b9      	ldr	r1, [r7, #24]
 8002870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	2203      	movs	r2, #3
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0203 	and.w	r2, r3, #3
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80ae 	beq.w	8002a12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	4b5d      	ldr	r3, [pc, #372]	; (8002a30 <HAL_GPIO_Init+0x300>)
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	4a5c      	ldr	r2, [pc, #368]	; (8002a30 <HAL_GPIO_Init+0x300>)
 80028c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c4:	6453      	str	r3, [r2, #68]	; 0x44
 80028c6:	4b5a      	ldr	r3, [pc, #360]	; (8002a30 <HAL_GPIO_Init+0x300>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028d2:	4a58      	ldr	r2, [pc, #352]	; (8002a34 <HAL_GPIO_Init+0x304>)
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	089b      	lsrs	r3, r3, #2
 80028d8:	3302      	adds	r3, #2
 80028da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	220f      	movs	r2, #15
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4013      	ands	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a4f      	ldr	r2, [pc, #316]	; (8002a38 <HAL_GPIO_Init+0x308>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d025      	beq.n	800294a <HAL_GPIO_Init+0x21a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a4e      	ldr	r2, [pc, #312]	; (8002a3c <HAL_GPIO_Init+0x30c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d01f      	beq.n	8002946 <HAL_GPIO_Init+0x216>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a4d      	ldr	r2, [pc, #308]	; (8002a40 <HAL_GPIO_Init+0x310>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d019      	beq.n	8002942 <HAL_GPIO_Init+0x212>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a4c      	ldr	r2, [pc, #304]	; (8002a44 <HAL_GPIO_Init+0x314>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d013      	beq.n	800293e <HAL_GPIO_Init+0x20e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a4b      	ldr	r2, [pc, #300]	; (8002a48 <HAL_GPIO_Init+0x318>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d00d      	beq.n	800293a <HAL_GPIO_Init+0x20a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4a      	ldr	r2, [pc, #296]	; (8002a4c <HAL_GPIO_Init+0x31c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d007      	beq.n	8002936 <HAL_GPIO_Init+0x206>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a49      	ldr	r2, [pc, #292]	; (8002a50 <HAL_GPIO_Init+0x320>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d101      	bne.n	8002932 <HAL_GPIO_Init+0x202>
 800292e:	2306      	movs	r3, #6
 8002930:	e00c      	b.n	800294c <HAL_GPIO_Init+0x21c>
 8002932:	2307      	movs	r3, #7
 8002934:	e00a      	b.n	800294c <HAL_GPIO_Init+0x21c>
 8002936:	2305      	movs	r3, #5
 8002938:	e008      	b.n	800294c <HAL_GPIO_Init+0x21c>
 800293a:	2304      	movs	r3, #4
 800293c:	e006      	b.n	800294c <HAL_GPIO_Init+0x21c>
 800293e:	2303      	movs	r3, #3
 8002940:	e004      	b.n	800294c <HAL_GPIO_Init+0x21c>
 8002942:	2302      	movs	r3, #2
 8002944:	e002      	b.n	800294c <HAL_GPIO_Init+0x21c>
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <HAL_GPIO_Init+0x21c>
 800294a:	2300      	movs	r3, #0
 800294c:	69fa      	ldr	r2, [r7, #28]
 800294e:	f002 0203 	and.w	r2, r2, #3
 8002952:	0092      	lsls	r2, r2, #2
 8002954:	4093      	lsls	r3, r2
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800295c:	4935      	ldr	r1, [pc, #212]	; (8002a34 <HAL_GPIO_Init+0x304>)
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	089b      	lsrs	r3, r3, #2
 8002962:	3302      	adds	r3, #2
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800296a:	4b3a      	ldr	r3, [pc, #232]	; (8002a54 <HAL_GPIO_Init+0x324>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	43db      	mvns	r3, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4013      	ands	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800298e:	4a31      	ldr	r2, [pc, #196]	; (8002a54 <HAL_GPIO_Init+0x324>)
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002994:	4b2f      	ldr	r3, [pc, #188]	; (8002a54 <HAL_GPIO_Init+0x324>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029b8:	4a26      	ldr	r2, [pc, #152]	; (8002a54 <HAL_GPIO_Init+0x324>)
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029be:	4b25      	ldr	r3, [pc, #148]	; (8002a54 <HAL_GPIO_Init+0x324>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	43db      	mvns	r3, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4013      	ands	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029e2:	4a1c      	ldr	r2, [pc, #112]	; (8002a54 <HAL_GPIO_Init+0x324>)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029e8:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <HAL_GPIO_Init+0x324>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a0c:	4a11      	ldr	r2, [pc, #68]	; (8002a54 <HAL_GPIO_Init+0x324>)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3301      	adds	r3, #1
 8002a16:	61fb      	str	r3, [r7, #28]
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	2b0f      	cmp	r3, #15
 8002a1c:	f67f ae96 	bls.w	800274c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a20:	bf00      	nop
 8002a22:	bf00      	nop
 8002a24:	3724      	adds	r7, #36	; 0x24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40013800 	.word	0x40013800
 8002a38:	40020000 	.word	0x40020000
 8002a3c:	40020400 	.word	0x40020400
 8002a40:	40020800 	.word	0x40020800
 8002a44:	40020c00 	.word	0x40020c00
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	40021400 	.word	0x40021400
 8002a50:	40021800 	.word	0x40021800
 8002a54:	40013c00 	.word	0x40013c00

08002a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	807b      	strh	r3, [r7, #2]
 8002a64:	4613      	mov	r3, r2
 8002a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a68:	787b      	ldrb	r3, [r7, #1]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a6e:	887a      	ldrh	r2, [r7, #2]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a74:	e003      	b.n	8002a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a76:	887b      	ldrh	r3, [r7, #2]
 8002a78:	041a      	lsls	r2, r3, #16
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	619a      	str	r2, [r3, #24]
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
	...

08002a8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e12b      	b.n	8002cf6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d106      	bne.n	8002ab8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7ff f856 	bl	8001b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2224      	movs	r2, #36	; 0x24
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0201 	bic.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ade:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002af0:	f000 fd0a 	bl	8003508 <HAL_RCC_GetPCLK1Freq>
 8002af4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	4a81      	ldr	r2, [pc, #516]	; (8002d00 <HAL_I2C_Init+0x274>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d807      	bhi.n	8002b10 <HAL_I2C_Init+0x84>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4a80      	ldr	r2, [pc, #512]	; (8002d04 <HAL_I2C_Init+0x278>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	bf94      	ite	ls
 8002b08:	2301      	movls	r3, #1
 8002b0a:	2300      	movhi	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	e006      	b.n	8002b1e <HAL_I2C_Init+0x92>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4a7d      	ldr	r2, [pc, #500]	; (8002d08 <HAL_I2C_Init+0x27c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	bf94      	ite	ls
 8002b18:	2301      	movls	r3, #1
 8002b1a:	2300      	movhi	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e0e7      	b.n	8002cf6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4a78      	ldr	r2, [pc, #480]	; (8002d0c <HAL_I2C_Init+0x280>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	0c9b      	lsrs	r3, r3, #18
 8002b30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	4a6a      	ldr	r2, [pc, #424]	; (8002d00 <HAL_I2C_Init+0x274>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d802      	bhi.n	8002b60 <HAL_I2C_Init+0xd4>
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	e009      	b.n	8002b74 <HAL_I2C_Init+0xe8>
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b66:	fb02 f303 	mul.w	r3, r2, r3
 8002b6a:	4a69      	ldr	r2, [pc, #420]	; (8002d10 <HAL_I2C_Init+0x284>)
 8002b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b70:	099b      	lsrs	r3, r3, #6
 8002b72:	3301      	adds	r3, #1
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6812      	ldr	r2, [r2, #0]
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	495c      	ldr	r1, [pc, #368]	; (8002d00 <HAL_I2C_Init+0x274>)
 8002b90:	428b      	cmp	r3, r1
 8002b92:	d819      	bhi.n	8002bc8 <HAL_I2C_Init+0x13c>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	1e59      	subs	r1, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ba2:	1c59      	adds	r1, r3, #1
 8002ba4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ba8:	400b      	ands	r3, r1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00a      	beq.n	8002bc4 <HAL_I2C_Init+0x138>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	1e59      	subs	r1, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc2:	e051      	b.n	8002c68 <HAL_I2C_Init+0x1dc>
 8002bc4:	2304      	movs	r3, #4
 8002bc6:	e04f      	b.n	8002c68 <HAL_I2C_Init+0x1dc>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d111      	bne.n	8002bf4 <HAL_I2C_Init+0x168>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	1e58      	subs	r0, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6859      	ldr	r1, [r3, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	440b      	add	r3, r1
 8002bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002be2:	3301      	adds	r3, #1
 8002be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	bf0c      	ite	eq
 8002bec:	2301      	moveq	r3, #1
 8002bee:	2300      	movne	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	e012      	b.n	8002c1a <HAL_I2C_Init+0x18e>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	1e58      	subs	r0, r3, #1
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6859      	ldr	r1, [r3, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	0099      	lsls	r1, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf0c      	ite	eq
 8002c14:	2301      	moveq	r3, #1
 8002c16:	2300      	movne	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_I2C_Init+0x196>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e022      	b.n	8002c68 <HAL_I2C_Init+0x1dc>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10e      	bne.n	8002c48 <HAL_I2C_Init+0x1bc>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	1e58      	subs	r0, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6859      	ldr	r1, [r3, #4]
 8002c32:	460b      	mov	r3, r1
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	440b      	add	r3, r1
 8002c38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c46:	e00f      	b.n	8002c68 <HAL_I2C_Init+0x1dc>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1e58      	subs	r0, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6859      	ldr	r1, [r3, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	0099      	lsls	r1, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c5e:	3301      	adds	r3, #1
 8002c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	6809      	ldr	r1, [r1, #0]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69da      	ldr	r2, [r3, #28]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6911      	ldr	r1, [r2, #16]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	68d2      	ldr	r2, [r2, #12]
 8002ca2:	4311      	orrs	r1, r2
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	430b      	orrs	r3, r1
 8002caa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695a      	ldr	r2, [r3, #20]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	000186a0 	.word	0x000186a0
 8002d04:	001e847f 	.word	0x001e847f
 8002d08:	003d08ff 	.word	0x003d08ff
 8002d0c:	431bde83 	.word	0x431bde83
 8002d10:	10624dd3 	.word	0x10624dd3

08002d14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	460b      	mov	r3, r1
 8002d22:	817b      	strh	r3, [r7, #10]
 8002d24:	4613      	mov	r3, r2
 8002d26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d28:	f7ff fb5e 	bl	80023e8 <HAL_GetTick>
 8002d2c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	f040 80e0 	bne.w	8002efc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	2319      	movs	r3, #25
 8002d42:	2201      	movs	r2, #1
 8002d44:	4970      	ldr	r1, [pc, #448]	; (8002f08 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 f964 	bl	8003014 <I2C_WaitOnFlagUntilTimeout>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d52:	2302      	movs	r3, #2
 8002d54:	e0d3      	b.n	8002efe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_I2C_Master_Transmit+0x50>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e0cc      	b.n	8002efe <HAL_I2C_Master_Transmit+0x1ea>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d007      	beq.n	8002d8a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f042 0201 	orr.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2221      	movs	r2, #33	; 0x21
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2210      	movs	r2, #16
 8002da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	893a      	ldrh	r2, [r7, #8]
 8002dba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4a50      	ldr	r2, [pc, #320]	; (8002f0c <HAL_I2C_Master_Transmit+0x1f8>)
 8002dca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002dcc:	8979      	ldrh	r1, [r7, #10]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	6a3a      	ldr	r2, [r7, #32]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f89c 	bl	8002f10 <I2C_MasterRequestWrite>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e08d      	b.n	8002efe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de2:	2300      	movs	r3, #0
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002df8:	e066      	b.n	8002ec8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	6a39      	ldr	r1, [r7, #32]
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f9de 	bl	80031c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00d      	beq.n	8002e26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d107      	bne.n	8002e22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e06b      	b.n	8002efe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	781a      	ldrb	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d11b      	bne.n	8002e9c <HAL_I2C_Master_Transmit+0x188>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d017      	beq.n	8002e9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	781a      	ldrb	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	6a39      	ldr	r1, [r7, #32]
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 f9ce 	bl	8003242 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00d      	beq.n	8002ec8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d107      	bne.n	8002ec4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e01a      	b.n	8002efe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d194      	bne.n	8002dfa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ede:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e000      	b.n	8002efe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002efc:	2302      	movs	r3, #2
  }
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	00100002 	.word	0x00100002
 8002f0c:	ffff0000 	.word	0xffff0000

08002f10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b088      	sub	sp, #32
 8002f14:	af02      	add	r7, sp, #8
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	607a      	str	r2, [r7, #4]
 8002f1a:	603b      	str	r3, [r7, #0]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d006      	beq.n	8002f3a <I2C_MasterRequestWrite+0x2a>
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d003      	beq.n	8002f3a <I2C_MasterRequestWrite+0x2a>
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f38:	d108      	bne.n	8002f4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	e00b      	b.n	8002f64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	2b12      	cmp	r3, #18
 8002f52:	d107      	bne.n	8002f64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f84f 	bl	8003014 <I2C_WaitOnFlagUntilTimeout>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00d      	beq.n	8002f98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f8a:	d103      	bne.n	8002f94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e035      	b.n	8003004 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fa0:	d108      	bne.n	8002fb4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fa2:	897b      	ldrh	r3, [r7, #10]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fb0:	611a      	str	r2, [r3, #16]
 8002fb2:	e01b      	b.n	8002fec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fb4:	897b      	ldrh	r3, [r7, #10]
 8002fb6:	11db      	asrs	r3, r3, #7
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	f003 0306 	and.w	r3, r3, #6
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	f063 030f 	orn	r3, r3, #15
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	490e      	ldr	r1, [pc, #56]	; (800300c <I2C_MasterRequestWrite+0xfc>)
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f875 	bl	80030c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e010      	b.n	8003004 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fe2:	897b      	ldrh	r3, [r7, #10]
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	4907      	ldr	r1, [pc, #28]	; (8003010 <I2C_MasterRequestWrite+0x100>)
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f865 	bl	80030c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	00010008 	.word	0x00010008
 8003010:	00010002 	.word	0x00010002

08003014 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	603b      	str	r3, [r7, #0]
 8003020:	4613      	mov	r3, r2
 8003022:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003024:	e025      	b.n	8003072 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302c:	d021      	beq.n	8003072 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302e:	f7ff f9db 	bl	80023e8 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d302      	bcc.n	8003044 <I2C_WaitOnFlagUntilTimeout+0x30>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d116      	bne.n	8003072 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f043 0220 	orr.w	r2, r3, #32
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e023      	b.n	80030ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	0c1b      	lsrs	r3, r3, #16
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b01      	cmp	r3, #1
 800307a:	d10d      	bne.n	8003098 <I2C_WaitOnFlagUntilTimeout+0x84>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	43da      	mvns	r2, r3
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4013      	ands	r3, r2
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	bf0c      	ite	eq
 800308e:	2301      	moveq	r3, #1
 8003090:	2300      	movne	r3, #0
 8003092:	b2db      	uxtb	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	e00c      	b.n	80030b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	43da      	mvns	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4013      	ands	r3, r2
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	bf0c      	ite	eq
 80030aa:	2301      	moveq	r3, #1
 80030ac:	2300      	movne	r3, #0
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	461a      	mov	r2, r3
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d0b6      	beq.n	8003026 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b084      	sub	sp, #16
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	60f8      	str	r0, [r7, #12]
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	607a      	str	r2, [r7, #4]
 80030ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030d0:	e051      	b.n	8003176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e0:	d123      	bne.n	800312a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f043 0204 	orr.w	r2, r3, #4
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e046      	b.n	80031b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003130:	d021      	beq.n	8003176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003132:	f7ff f959 	bl	80023e8 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	429a      	cmp	r2, r3
 8003140:	d302      	bcc.n	8003148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d116      	bne.n	8003176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f043 0220 	orr.w	r2, r3, #32
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e020      	b.n	80031b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	0c1b      	lsrs	r3, r3, #16
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b01      	cmp	r3, #1
 800317e:	d10c      	bne.n	800319a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	43da      	mvns	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4013      	ands	r3, r2
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	bf14      	ite	ne
 8003192:	2301      	movne	r3, #1
 8003194:	2300      	moveq	r3, #0
 8003196:	b2db      	uxtb	r3, r3
 8003198:	e00b      	b.n	80031b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	43da      	mvns	r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	4013      	ands	r3, r2
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	bf14      	ite	ne
 80031ac:	2301      	movne	r3, #1
 80031ae:	2300      	moveq	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d18d      	bne.n	80030d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031cc:	e02d      	b.n	800322a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 f878 	bl	80032c4 <I2C_IsAcknowledgeFailed>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e02d      	b.n	800323a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e4:	d021      	beq.n	800322a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e6:	f7ff f8ff 	bl	80023e8 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d302      	bcc.n	80031fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d116      	bne.n	800322a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	f043 0220 	orr.w	r2, r3, #32
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e007      	b.n	800323a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003234:	2b80      	cmp	r3, #128	; 0x80
 8003236:	d1ca      	bne.n	80031ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b084      	sub	sp, #16
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800324e:	e02d      	b.n	80032ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 f837 	bl	80032c4 <I2C_IsAcknowledgeFailed>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e02d      	b.n	80032bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003266:	d021      	beq.n	80032ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003268:	f7ff f8be 	bl	80023e8 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	429a      	cmp	r2, r3
 8003276:	d302      	bcc.n	800327e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d116      	bne.n	80032ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	f043 0220 	orr.w	r2, r3, #32
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e007      	b.n	80032bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d1ca      	bne.n	8003250 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032da:	d11b      	bne.n	8003314 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	f043 0204 	orr.w	r2, r3, #4
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
	...

08003324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0cc      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003338:	4b68      	ldr	r3, [pc, #416]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 030f 	and.w	r3, r3, #15
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d90c      	bls.n	8003360 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003346:	4b65      	ldr	r3, [pc, #404]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800334e:	4b63      	ldr	r3, [pc, #396]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0b8      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d020      	beq.n	80033ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003378:	4b59      	ldr	r3, [pc, #356]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	4a58      	ldr	r2, [pc, #352]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003382:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003390:	4b53      	ldr	r3, [pc, #332]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	4a52      	ldr	r2, [pc, #328]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800339a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800339c:	4b50      	ldr	r3, [pc, #320]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	494d      	ldr	r1, [pc, #308]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d044      	beq.n	8003444 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d107      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c2:	4b47      	ldr	r3, [pc, #284]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d119      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e07f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d107      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e2:	4b3f      	ldr	r3, [pc, #252]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d109      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e06f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f2:	4b3b      	ldr	r3, [pc, #236]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e067      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003402:	4b37      	ldr	r3, [pc, #220]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f023 0203 	bic.w	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	4934      	ldr	r1, [pc, #208]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	4313      	orrs	r3, r2
 8003412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003414:	f7fe ffe8 	bl	80023e8 <HAL_GetTick>
 8003418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341a:	e00a      	b.n	8003432 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800341c:	f7fe ffe4 	bl	80023e8 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	f241 3288 	movw	r2, #5000	; 0x1388
 800342a:	4293      	cmp	r3, r2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e04f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003432:	4b2b      	ldr	r3, [pc, #172]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 020c 	and.w	r2, r3, #12
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	429a      	cmp	r2, r3
 8003442:	d1eb      	bne.n	800341c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003444:	4b25      	ldr	r3, [pc, #148]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d20c      	bcs.n	800346c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003452:	4b22      	ldr	r3, [pc, #136]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800345a:	4b20      	ldr	r3, [pc, #128]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d001      	beq.n	800346c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e032      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003478:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	4916      	ldr	r1, [pc, #88]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	4313      	orrs	r3, r2
 8003488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003496:	4b12      	ldr	r3, [pc, #72]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	490e      	ldr	r1, [pc, #56]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034aa:	f000 f887 	bl	80035bc <HAL_RCC_GetSysClockFreq>
 80034ae:	4602      	mov	r2, r0
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	490a      	ldr	r1, [pc, #40]	; (80034e4 <HAL_RCC_ClockConfig+0x1c0>)
 80034bc:	5ccb      	ldrb	r3, [r1, r3]
 80034be:	fa22 f303 	lsr.w	r3, r2, r3
 80034c2:	4a09      	ldr	r2, [pc, #36]	; (80034e8 <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034c6:	4b09      	ldr	r3, [pc, #36]	; (80034ec <HAL_RCC_ClockConfig+0x1c8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe fe30 	bl	8002130 <HAL_InitTick>

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40023c00 	.word	0x40023c00
 80034e0:	40023800 	.word	0x40023800
 80034e4:	08009e6c 	.word	0x08009e6c
 80034e8:	20000000 	.word	0x20000000
 80034ec:	20000004 	.word	0x20000004

080034f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034f4:	4b03      	ldr	r3, [pc, #12]	; (8003504 <HAL_RCC_GetHCLKFreq+0x14>)
 80034f6:	681b      	ldr	r3, [r3, #0]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20000000 	.word	0x20000000

08003508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800350c:	f7ff fff0 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 8003510:	4602      	mov	r2, r0
 8003512:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	0a9b      	lsrs	r3, r3, #10
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	4903      	ldr	r1, [pc, #12]	; (800352c <HAL_RCC_GetPCLK1Freq+0x24>)
 800351e:	5ccb      	ldrb	r3, [r1, r3]
 8003520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003524:	4618      	mov	r0, r3
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40023800 	.word	0x40023800
 800352c:	08009e7c 	.word	0x08009e7c

08003530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003534:	f7ff ffdc 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 8003538:	4602      	mov	r2, r0
 800353a:	4b05      	ldr	r3, [pc, #20]	; (8003550 <HAL_RCC_GetPCLK2Freq+0x20>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	0b5b      	lsrs	r3, r3, #13
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	4903      	ldr	r1, [pc, #12]	; (8003554 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003546:	5ccb      	ldrb	r3, [r1, r3]
 8003548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800354c:	4618      	mov	r0, r3
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40023800 	.word	0x40023800
 8003554:	08009e7c 	.word	0x08009e7c

08003558 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	220f      	movs	r2, #15
 8003566:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003568:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <HAL_RCC_GetClockConfig+0x5c>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 0203 	and.w	r2, r3, #3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003574:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003580:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800358c:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <HAL_RCC_GetClockConfig+0x5c>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	08db      	lsrs	r3, r3, #3
 8003592:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800359a:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <HAL_RCC_GetClockConfig+0x60>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 020f 	and.w	r2, r3, #15
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	601a      	str	r2, [r3, #0]
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40023800 	.word	0x40023800
 80035b8:	40023c00 	.word	0x40023c00

080035bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035c0:	b0a6      	sub	sp, #152	; 0x98
 80035c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035e2:	4bc8      	ldr	r3, [pc, #800]	; (8003904 <HAL_RCC_GetSysClockFreq+0x348>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
 80035ea:	2b0c      	cmp	r3, #12
 80035ec:	f200 817e 	bhi.w	80038ec <HAL_RCC_GetSysClockFreq+0x330>
 80035f0:	a201      	add	r2, pc, #4	; (adr r2, 80035f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80035f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f6:	bf00      	nop
 80035f8:	0800362d 	.word	0x0800362d
 80035fc:	080038ed 	.word	0x080038ed
 8003600:	080038ed 	.word	0x080038ed
 8003604:	080038ed 	.word	0x080038ed
 8003608:	08003635 	.word	0x08003635
 800360c:	080038ed 	.word	0x080038ed
 8003610:	080038ed 	.word	0x080038ed
 8003614:	080038ed 	.word	0x080038ed
 8003618:	0800363d 	.word	0x0800363d
 800361c:	080038ed 	.word	0x080038ed
 8003620:	080038ed 	.word	0x080038ed
 8003624:	080038ed 	.word	0x080038ed
 8003628:	080037a7 	.word	0x080037a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800362c:	4bb6      	ldr	r3, [pc, #728]	; (8003908 <HAL_RCC_GetSysClockFreq+0x34c>)
 800362e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003632:	e15f      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003634:	4bb5      	ldr	r3, [pc, #724]	; (800390c <HAL_RCC_GetSysClockFreq+0x350>)
 8003636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800363a:	e15b      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800363c:	4bb1      	ldr	r3, [pc, #708]	; (8003904 <HAL_RCC_GetSysClockFreq+0x348>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003644:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003648:	4bae      	ldr	r3, [pc, #696]	; (8003904 <HAL_RCC_GetSysClockFreq+0x348>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d031      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003654:	4bab      	ldr	r3, [pc, #684]	; (8003904 <HAL_RCC_GetSysClockFreq+0x348>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	099b      	lsrs	r3, r3, #6
 800365a:	2200      	movs	r2, #0
 800365c:	66bb      	str	r3, [r7, #104]	; 0x68
 800365e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003660:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003666:	663b      	str	r3, [r7, #96]	; 0x60
 8003668:	2300      	movs	r3, #0
 800366a:	667b      	str	r3, [r7, #100]	; 0x64
 800366c:	4ba7      	ldr	r3, [pc, #668]	; (800390c <HAL_RCC_GetSysClockFreq+0x350>)
 800366e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003672:	462a      	mov	r2, r5
 8003674:	fb03 f202 	mul.w	r2, r3, r2
 8003678:	2300      	movs	r3, #0
 800367a:	4621      	mov	r1, r4
 800367c:	fb01 f303 	mul.w	r3, r1, r3
 8003680:	4413      	add	r3, r2
 8003682:	4aa2      	ldr	r2, [pc, #648]	; (800390c <HAL_RCC_GetSysClockFreq+0x350>)
 8003684:	4621      	mov	r1, r4
 8003686:	fba1 1202 	umull	r1, r2, r1, r2
 800368a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800368c:	460a      	mov	r2, r1
 800368e:	67ba      	str	r2, [r7, #120]	; 0x78
 8003690:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003692:	4413      	add	r3, r2
 8003694:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003696:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800369a:	2200      	movs	r2, #0
 800369c:	65bb      	str	r3, [r7, #88]	; 0x58
 800369e:	65fa      	str	r2, [r7, #92]	; 0x5c
 80036a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80036a4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80036a8:	f7fd fa3a 	bl	8000b20 <__aeabi_uldivmod>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4613      	mov	r3, r2
 80036b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80036b6:	e064      	b.n	8003782 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036b8:	4b92      	ldr	r3, [pc, #584]	; (8003904 <HAL_RCC_GetSysClockFreq+0x348>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	099b      	lsrs	r3, r3, #6
 80036be:	2200      	movs	r2, #0
 80036c0:	653b      	str	r3, [r7, #80]	; 0x50
 80036c2:	657a      	str	r2, [r7, #84]	; 0x54
 80036c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80036cc:	2300      	movs	r3, #0
 80036ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036d0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80036d4:	4622      	mov	r2, r4
 80036d6:	462b      	mov	r3, r5
 80036d8:	f04f 0000 	mov.w	r0, #0
 80036dc:	f04f 0100 	mov.w	r1, #0
 80036e0:	0159      	lsls	r1, r3, #5
 80036e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036e6:	0150      	lsls	r0, r2, #5
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4621      	mov	r1, r4
 80036ee:	1a51      	subs	r1, r2, r1
 80036f0:	6139      	str	r1, [r7, #16]
 80036f2:	4629      	mov	r1, r5
 80036f4:	eb63 0301 	sbc.w	r3, r3, r1
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	f04f 0300 	mov.w	r3, #0
 8003702:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003706:	4659      	mov	r1, fp
 8003708:	018b      	lsls	r3, r1, #6
 800370a:	4651      	mov	r1, sl
 800370c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003710:	4651      	mov	r1, sl
 8003712:	018a      	lsls	r2, r1, #6
 8003714:	4651      	mov	r1, sl
 8003716:	ebb2 0801 	subs.w	r8, r2, r1
 800371a:	4659      	mov	r1, fp
 800371c:	eb63 0901 	sbc.w	r9, r3, r1
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800372c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003730:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003734:	4690      	mov	r8, r2
 8003736:	4699      	mov	r9, r3
 8003738:	4623      	mov	r3, r4
 800373a:	eb18 0303 	adds.w	r3, r8, r3
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	462b      	mov	r3, r5
 8003742:	eb49 0303 	adc.w	r3, r9, r3
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003754:	4629      	mov	r1, r5
 8003756:	028b      	lsls	r3, r1, #10
 8003758:	4621      	mov	r1, r4
 800375a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800375e:	4621      	mov	r1, r4
 8003760:	028a      	lsls	r2, r1, #10
 8003762:	4610      	mov	r0, r2
 8003764:	4619      	mov	r1, r3
 8003766:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800376a:	2200      	movs	r2, #0
 800376c:	643b      	str	r3, [r7, #64]	; 0x40
 800376e:	647a      	str	r2, [r7, #68]	; 0x44
 8003770:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003774:	f7fd f9d4 	bl	8000b20 <__aeabi_uldivmod>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4613      	mov	r3, r2
 800377e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003782:	4b60      	ldr	r3, [pc, #384]	; (8003904 <HAL_RCC_GetSysClockFreq+0x348>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	0c1b      	lsrs	r3, r3, #16
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	3301      	adds	r3, #1
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003794:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003798:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800379c:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80037a4:	e0a6      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037a6:	4b57      	ldr	r3, [pc, #348]	; (8003904 <HAL_RCC_GetSysClockFreq+0x348>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037b2:	4b54      	ldr	r3, [pc, #336]	; (8003904 <HAL_RCC_GetSysClockFreq+0x348>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d02a      	beq.n	8003814 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037be:	4b51      	ldr	r3, [pc, #324]	; (8003904 <HAL_RCC_GetSysClockFreq+0x348>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	099b      	lsrs	r3, r3, #6
 80037c4:	2200      	movs	r2, #0
 80037c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80037c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037d0:	2100      	movs	r1, #0
 80037d2:	4b4e      	ldr	r3, [pc, #312]	; (800390c <HAL_RCC_GetSysClockFreq+0x350>)
 80037d4:	fb03 f201 	mul.w	r2, r3, r1
 80037d8:	2300      	movs	r3, #0
 80037da:	fb00 f303 	mul.w	r3, r0, r3
 80037de:	4413      	add	r3, r2
 80037e0:	4a4a      	ldr	r2, [pc, #296]	; (800390c <HAL_RCC_GetSysClockFreq+0x350>)
 80037e2:	fba0 1202 	umull	r1, r2, r0, r2
 80037e6:	677a      	str	r2, [r7, #116]	; 0x74
 80037e8:	460a      	mov	r2, r1
 80037ea:	673a      	str	r2, [r7, #112]	; 0x70
 80037ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80037ee:	4413      	add	r3, r2
 80037f0:	677b      	str	r3, [r7, #116]	; 0x74
 80037f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037f6:	2200      	movs	r2, #0
 80037f8:	633b      	str	r3, [r7, #48]	; 0x30
 80037fa:	637a      	str	r2, [r7, #52]	; 0x34
 80037fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003800:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003804:	f7fd f98c 	bl	8000b20 <__aeabi_uldivmod>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4613      	mov	r3, r2
 800380e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003812:	e05b      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003814:	4b3b      	ldr	r3, [pc, #236]	; (8003904 <HAL_RCC_GetSysClockFreq+0x348>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	099b      	lsrs	r3, r3, #6
 800381a:	2200      	movs	r2, #0
 800381c:	62bb      	str	r3, [r7, #40]	; 0x28
 800381e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003826:	623b      	str	r3, [r7, #32]
 8003828:	2300      	movs	r3, #0
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
 800382c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003830:	4642      	mov	r2, r8
 8003832:	464b      	mov	r3, r9
 8003834:	f04f 0000 	mov.w	r0, #0
 8003838:	f04f 0100 	mov.w	r1, #0
 800383c:	0159      	lsls	r1, r3, #5
 800383e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003842:	0150      	lsls	r0, r2, #5
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4641      	mov	r1, r8
 800384a:	ebb2 0a01 	subs.w	sl, r2, r1
 800384e:	4649      	mov	r1, r9
 8003850:	eb63 0b01 	sbc.w	fp, r3, r1
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003860:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003864:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003868:	ebb2 040a 	subs.w	r4, r2, sl
 800386c:	eb63 050b 	sbc.w	r5, r3, fp
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	f04f 0300 	mov.w	r3, #0
 8003878:	00eb      	lsls	r3, r5, #3
 800387a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800387e:	00e2      	lsls	r2, r4, #3
 8003880:	4614      	mov	r4, r2
 8003882:	461d      	mov	r5, r3
 8003884:	4643      	mov	r3, r8
 8003886:	18e3      	adds	r3, r4, r3
 8003888:	603b      	str	r3, [r7, #0]
 800388a:	464b      	mov	r3, r9
 800388c:	eb45 0303 	adc.w	r3, r5, r3
 8003890:	607b      	str	r3, [r7, #4]
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800389e:	4629      	mov	r1, r5
 80038a0:	028b      	lsls	r3, r1, #10
 80038a2:	4621      	mov	r1, r4
 80038a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038a8:	4621      	mov	r1, r4
 80038aa:	028a      	lsls	r2, r1, #10
 80038ac:	4610      	mov	r0, r2
 80038ae:	4619      	mov	r1, r3
 80038b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038b4:	2200      	movs	r2, #0
 80038b6:	61bb      	str	r3, [r7, #24]
 80038b8:	61fa      	str	r2, [r7, #28]
 80038ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038be:	f7fd f92f 	bl	8000b20 <__aeabi_uldivmod>
 80038c2:	4602      	mov	r2, r0
 80038c4:	460b      	mov	r3, r1
 80038c6:	4613      	mov	r3, r2
 80038c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80038cc:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <HAL_RCC_GetSysClockFreq+0x348>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	0f1b      	lsrs	r3, r3, #28
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80038da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80038ea:	e003      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038ec:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HAL_RCC_GetSysClockFreq+0x34c>)
 80038ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80038f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3798      	adds	r7, #152	; 0x98
 80038fc:	46bd      	mov	sp, r7
 80038fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003902:	bf00      	nop
 8003904:	40023800 	.word	0x40023800
 8003908:	00f42400 	.word	0x00f42400
 800390c:	017d7840 	.word	0x017d7840

08003910 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e28d      	b.n	8003e3e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 8083 	beq.w	8003a36 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003930:	4b94      	ldr	r3, [pc, #592]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 030c 	and.w	r3, r3, #12
 8003938:	2b04      	cmp	r3, #4
 800393a:	d019      	beq.n	8003970 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800393c:	4b91      	ldr	r3, [pc, #580]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003944:	2b08      	cmp	r3, #8
 8003946:	d106      	bne.n	8003956 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003948:	4b8e      	ldr	r3, [pc, #568]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003954:	d00c      	beq.n	8003970 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003956:	4b8b      	ldr	r3, [pc, #556]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800395e:	2b0c      	cmp	r3, #12
 8003960:	d112      	bne.n	8003988 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003962:	4b88      	ldr	r3, [pc, #544]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800396a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800396e:	d10b      	bne.n	8003988 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003970:	4b84      	ldr	r3, [pc, #528]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d05b      	beq.n	8003a34 <HAL_RCC_OscConfig+0x124>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d157      	bne.n	8003a34 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e25a      	b.n	8003e3e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003990:	d106      	bne.n	80039a0 <HAL_RCC_OscConfig+0x90>
 8003992:	4b7c      	ldr	r3, [pc, #496]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a7b      	ldr	r2, [pc, #492]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 8003998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	e01d      	b.n	80039dc <HAL_RCC_OscConfig+0xcc>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039a8:	d10c      	bne.n	80039c4 <HAL_RCC_OscConfig+0xb4>
 80039aa:	4b76      	ldr	r3, [pc, #472]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a75      	ldr	r2, [pc, #468]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 80039b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	4b73      	ldr	r3, [pc, #460]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a72      	ldr	r2, [pc, #456]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 80039bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	e00b      	b.n	80039dc <HAL_RCC_OscConfig+0xcc>
 80039c4:	4b6f      	ldr	r3, [pc, #444]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a6e      	ldr	r2, [pc, #440]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 80039ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	4b6c      	ldr	r3, [pc, #432]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a6b      	ldr	r2, [pc, #428]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 80039d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d013      	beq.n	8003a0c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e4:	f7fe fd00 	bl	80023e8 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039ec:	f7fe fcfc 	bl	80023e8 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b64      	cmp	r3, #100	; 0x64
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e21f      	b.n	8003e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fe:	4b61      	ldr	r3, [pc, #388]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f0      	beq.n	80039ec <HAL_RCC_OscConfig+0xdc>
 8003a0a:	e014      	b.n	8003a36 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0c:	f7fe fcec 	bl	80023e8 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a14:	f7fe fce8 	bl	80023e8 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b64      	cmp	r3, #100	; 0x64
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e20b      	b.n	8003e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a26:	4b57      	ldr	r3, [pc, #348]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <HAL_RCC_OscConfig+0x104>
 8003a32:	e000      	b.n	8003a36 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d06f      	beq.n	8003b22 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a42:	4b50      	ldr	r3, [pc, #320]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d017      	beq.n	8003a7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a4e:	4b4d      	ldr	r3, [pc, #308]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d105      	bne.n	8003a66 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a5a:	4b4a      	ldr	r3, [pc, #296]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00b      	beq.n	8003a7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a66:	4b47      	ldr	r3, [pc, #284]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a6e:	2b0c      	cmp	r3, #12
 8003a70:	d11c      	bne.n	8003aac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a72:	4b44      	ldr	r3, [pc, #272]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d116      	bne.n	8003aac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7e:	4b41      	ldr	r3, [pc, #260]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d005      	beq.n	8003a96 <HAL_RCC_OscConfig+0x186>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d001      	beq.n	8003a96 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e1d3      	b.n	8003e3e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a96:	4b3b      	ldr	r3, [pc, #236]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4937      	ldr	r1, [pc, #220]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aaa:	e03a      	b.n	8003b22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d020      	beq.n	8003af6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ab4:	4b34      	ldr	r3, [pc, #208]	; (8003b88 <HAL_RCC_OscConfig+0x278>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aba:	f7fe fc95 	bl	80023e8 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac2:	f7fe fc91 	bl	80023e8 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e1b4      	b.n	8003e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad4:	4b2b      	ldr	r3, [pc, #172]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae0:	4b28      	ldr	r3, [pc, #160]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4925      	ldr	r1, [pc, #148]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	600b      	str	r3, [r1, #0]
 8003af4:	e015      	b.n	8003b22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003af6:	4b24      	ldr	r3, [pc, #144]	; (8003b88 <HAL_RCC_OscConfig+0x278>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7fe fc74 	bl	80023e8 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b04:	f7fe fc70 	bl	80023e8 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e193      	b.n	8003e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b16:	4b1b      	ldr	r3, [pc, #108]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d036      	beq.n	8003b9c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d016      	beq.n	8003b64 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b36:	4b15      	ldr	r3, [pc, #84]	; (8003b8c <HAL_RCC_OscConfig+0x27c>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3c:	f7fe fc54 	bl	80023e8 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b44:	f7fe fc50 	bl	80023e8 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e173      	b.n	8003e3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b56:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 8003b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCC_OscConfig+0x234>
 8003b62:	e01b      	b.n	8003b9c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b64:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <HAL_RCC_OscConfig+0x27c>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6a:	f7fe fc3d 	bl	80023e8 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b70:	e00e      	b.n	8003b90 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b72:	f7fe fc39 	bl	80023e8 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d907      	bls.n	8003b90 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e15c      	b.n	8003e3e <HAL_RCC_OscConfig+0x52e>
 8003b84:	40023800 	.word	0x40023800
 8003b88:	42470000 	.word	0x42470000
 8003b8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b90:	4b8a      	ldr	r3, [pc, #552]	; (8003dbc <HAL_RCC_OscConfig+0x4ac>)
 8003b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1ea      	bne.n	8003b72 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 8097 	beq.w	8003cd8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003baa:	2300      	movs	r3, #0
 8003bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bae:	4b83      	ldr	r3, [pc, #524]	; (8003dbc <HAL_RCC_OscConfig+0x4ac>)
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10f      	bne.n	8003bda <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	4b7f      	ldr	r3, [pc, #508]	; (8003dbc <HAL_RCC_OscConfig+0x4ac>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	4a7e      	ldr	r2, [pc, #504]	; (8003dbc <HAL_RCC_OscConfig+0x4ac>)
 8003bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bca:	4b7c      	ldr	r3, [pc, #496]	; (8003dbc <HAL_RCC_OscConfig+0x4ac>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	60bb      	str	r3, [r7, #8]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bda:	4b79      	ldr	r3, [pc, #484]	; (8003dc0 <HAL_RCC_OscConfig+0x4b0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d118      	bne.n	8003c18 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003be6:	4b76      	ldr	r3, [pc, #472]	; (8003dc0 <HAL_RCC_OscConfig+0x4b0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a75      	ldr	r2, [pc, #468]	; (8003dc0 <HAL_RCC_OscConfig+0x4b0>)
 8003bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf2:	f7fe fbf9 	bl	80023e8 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bfa:	f7fe fbf5 	bl	80023e8 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e118      	b.n	8003e3e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0c:	4b6c      	ldr	r3, [pc, #432]	; (8003dc0 <HAL_RCC_OscConfig+0x4b0>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0f0      	beq.n	8003bfa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d106      	bne.n	8003c2e <HAL_RCC_OscConfig+0x31e>
 8003c20:	4b66      	ldr	r3, [pc, #408]	; (8003dbc <HAL_RCC_OscConfig+0x4ac>)
 8003c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c24:	4a65      	ldr	r2, [pc, #404]	; (8003dbc <HAL_RCC_OscConfig+0x4ac>)
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c2c:	e01c      	b.n	8003c68 <HAL_RCC_OscConfig+0x358>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2b05      	cmp	r3, #5
 8003c34:	d10c      	bne.n	8003c50 <HAL_RCC_OscConfig+0x340>
 8003c36:	4b61      	ldr	r3, [pc, #388]	; (8003dbc <HAL_RCC_OscConfig+0x4ac>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3a:	4a60      	ldr	r2, [pc, #384]	; (8003dbc <HAL_RCC_OscConfig+0x4ac>)
 8003c3c:	f043 0304 	orr.w	r3, r3, #4
 8003c40:	6713      	str	r3, [r2, #112]	; 0x70
 8003c42:	4b5e      	ldr	r3, [pc, #376]	; (8003dbc <HAL_RCC_OscConfig+0x4ac>)
 8003c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c46:	4a5d      	ldr	r2, [pc, #372]	; (8003dbc <HAL_RCC_OscConfig+0x4ac>)
 8003c48:	f043 0301 	orr.w	r3, r3, #1
 8003c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c4e:	e00b      	b.n	8003c68 <HAL_RCC_OscConfig+0x358>
 8003c50:	4b5a      	ldr	r3, [pc, #360]	; (8003dbc <HAL_RCC_OscConfig+0x4ac>)
 8003c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c54:	4a59      	ldr	r2, [pc, #356]	; (8003dbc <HAL_RCC_OscConfig+0x4ac>)
 8003c56:	f023 0301 	bic.w	r3, r3, #1
 8003c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5c:	4b57      	ldr	r3, [pc, #348]	; (8003dbc <HAL_RCC_OscConfig+0x4ac>)
 8003c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c60:	4a56      	ldr	r2, [pc, #344]	; (8003dbc <HAL_RCC_OscConfig+0x4ac>)
 8003c62:	f023 0304 	bic.w	r3, r3, #4
 8003c66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d015      	beq.n	8003c9c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c70:	f7fe fbba 	bl	80023e8 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c76:	e00a      	b.n	8003c8e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c78:	f7fe fbb6 	bl	80023e8 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e0d7      	b.n	8003e3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c8e:	4b4b      	ldr	r3, [pc, #300]	; (8003dbc <HAL_RCC_OscConfig+0x4ac>)
 8003c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0ee      	beq.n	8003c78 <HAL_RCC_OscConfig+0x368>
 8003c9a:	e014      	b.n	8003cc6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9c:	f7fe fba4 	bl	80023e8 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca2:	e00a      	b.n	8003cba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ca4:	f7fe fba0 	bl	80023e8 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e0c1      	b.n	8003e3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cba:	4b40      	ldr	r3, [pc, #256]	; (8003dbc <HAL_RCC_OscConfig+0x4ac>)
 8003cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1ee      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cc6:	7dfb      	ldrb	r3, [r7, #23]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d105      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ccc:	4b3b      	ldr	r3, [pc, #236]	; (8003dbc <HAL_RCC_OscConfig+0x4ac>)
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	4a3a      	ldr	r2, [pc, #232]	; (8003dbc <HAL_RCC_OscConfig+0x4ac>)
 8003cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80ad 	beq.w	8003e3c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ce2:	4b36      	ldr	r3, [pc, #216]	; (8003dbc <HAL_RCC_OscConfig+0x4ac>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d060      	beq.n	8003db0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d145      	bne.n	8003d82 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf6:	4b33      	ldr	r3, [pc, #204]	; (8003dc4 <HAL_RCC_OscConfig+0x4b4>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfc:	f7fe fb74 	bl	80023e8 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d04:	f7fe fb70 	bl	80023e8 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e093      	b.n	8003e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d16:	4b29      	ldr	r3, [pc, #164]	; (8003dbc <HAL_RCC_OscConfig+0x4ac>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1f0      	bne.n	8003d04 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69da      	ldr	r2, [r3, #28]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	019b      	lsls	r3, r3, #6
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d38:	085b      	lsrs	r3, r3, #1
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	041b      	lsls	r3, r3, #16
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	061b      	lsls	r3, r3, #24
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	071b      	lsls	r3, r3, #28
 8003d4e:	491b      	ldr	r1, [pc, #108]	; (8003dbc <HAL_RCC_OscConfig+0x4ac>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d54:	4b1b      	ldr	r3, [pc, #108]	; (8003dc4 <HAL_RCC_OscConfig+0x4b4>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5a:	f7fe fb45 	bl	80023e8 <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d62:	f7fe fb41 	bl	80023e8 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e064      	b.n	8003e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d74:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <HAL_RCC_OscConfig+0x4ac>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0f0      	beq.n	8003d62 <HAL_RCC_OscConfig+0x452>
 8003d80:	e05c      	b.n	8003e3c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d82:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <HAL_RCC_OscConfig+0x4b4>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d88:	f7fe fb2e 	bl	80023e8 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d90:	f7fe fb2a 	bl	80023e8 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e04d      	b.n	8003e3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da2:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <HAL_RCC_OscConfig+0x4ac>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0x480>
 8003dae:	e045      	b.n	8003e3c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d107      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e040      	b.n	8003e3e <HAL_RCC_OscConfig+0x52e>
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	40007000 	.word	0x40007000
 8003dc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dc8:	4b1f      	ldr	r3, [pc, #124]	; (8003e48 <HAL_RCC_OscConfig+0x538>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d030      	beq.n	8003e38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d129      	bne.n	8003e38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d122      	bne.n	8003e38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003df8:	4013      	ands	r3, r2
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d119      	bne.n	8003e38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0e:	085b      	lsrs	r3, r3, #1
 8003e10:	3b01      	subs	r3, #1
 8003e12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d10f      	bne.n	8003e38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d107      	bne.n	8003e38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e000      	b.n	8003e3e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40023800 	.word	0x40023800

08003e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e041      	b.n	8003ee2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fd ffce 	bl	8001e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3304      	adds	r3, #4
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	f000 fc8a 	bl	80047a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
	...

08003eec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d001      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e04e      	b.n	8003fa2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a23      	ldr	r2, [pc, #140]	; (8003fb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d022      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0x80>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2e:	d01d      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0x80>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a1f      	ldr	r2, [pc, #124]	; (8003fb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d018      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0x80>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a1e      	ldr	r2, [pc, #120]	; (8003fb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d013      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0x80>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a1c      	ldr	r2, [pc, #112]	; (8003fbc <HAL_TIM_Base_Start_IT+0xd0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00e      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0x80>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1b      	ldr	r2, [pc, #108]	; (8003fc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d009      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0x80>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a19      	ldr	r2, [pc, #100]	; (8003fc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d004      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0x80>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a18      	ldr	r2, [pc, #96]	; (8003fc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d111      	bne.n	8003f90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2b06      	cmp	r3, #6
 8003f7c:	d010      	beq.n	8003fa0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f042 0201 	orr.w	r2, r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f8e:	e007      	b.n	8003fa0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	40010000 	.word	0x40010000
 8003fb4:	40000400 	.word	0x40000400
 8003fb8:	40000800 	.word	0x40000800
 8003fbc:	40000c00 	.word	0x40000c00
 8003fc0:	40010400 	.word	0x40010400
 8003fc4:	40014000 	.word	0x40014000
 8003fc8:	40001800 	.word	0x40001800

08003fcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e041      	b.n	8004062 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fd fed6 	bl	8001da4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3304      	adds	r3, #4
 8004008:	4619      	mov	r1, r3
 800400a:	4610      	mov	r0, r2
 800400c:	f000 fbca 	bl	80047a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d109      	bne.n	8004090 <HAL_TIM_PWM_Start+0x24>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b01      	cmp	r3, #1
 8004086:	bf14      	ite	ne
 8004088:	2301      	movne	r3, #1
 800408a:	2300      	moveq	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	e022      	b.n	80040d6 <HAL_TIM_PWM_Start+0x6a>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	2b04      	cmp	r3, #4
 8004094:	d109      	bne.n	80040aa <HAL_TIM_PWM_Start+0x3e>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b01      	cmp	r3, #1
 80040a0:	bf14      	ite	ne
 80040a2:	2301      	movne	r3, #1
 80040a4:	2300      	moveq	r3, #0
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	e015      	b.n	80040d6 <HAL_TIM_PWM_Start+0x6a>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d109      	bne.n	80040c4 <HAL_TIM_PWM_Start+0x58>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	bf14      	ite	ne
 80040bc:	2301      	movne	r3, #1
 80040be:	2300      	moveq	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	e008      	b.n	80040d6 <HAL_TIM_PWM_Start+0x6a>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	bf14      	ite	ne
 80040d0:	2301      	movne	r3, #1
 80040d2:	2300      	moveq	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e07c      	b.n	80041d8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d104      	bne.n	80040ee <HAL_TIM_PWM_Start+0x82>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040ec:	e013      	b.n	8004116 <HAL_TIM_PWM_Start+0xaa>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	d104      	bne.n	80040fe <HAL_TIM_PWM_Start+0x92>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040fc:	e00b      	b.n	8004116 <HAL_TIM_PWM_Start+0xaa>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b08      	cmp	r3, #8
 8004102:	d104      	bne.n	800410e <HAL_TIM_PWM_Start+0xa2>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800410c:	e003      	b.n	8004116 <HAL_TIM_PWM_Start+0xaa>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2202      	movs	r2, #2
 8004112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2201      	movs	r2, #1
 800411c:	6839      	ldr	r1, [r7, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f000 feba 	bl	8004e98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a2d      	ldr	r2, [pc, #180]	; (80041e0 <HAL_TIM_PWM_Start+0x174>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d004      	beq.n	8004138 <HAL_TIM_PWM_Start+0xcc>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a2c      	ldr	r2, [pc, #176]	; (80041e4 <HAL_TIM_PWM_Start+0x178>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d101      	bne.n	800413c <HAL_TIM_PWM_Start+0xd0>
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <HAL_TIM_PWM_Start+0xd2>
 800413c:	2300      	movs	r3, #0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d007      	beq.n	8004152 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004150:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a22      	ldr	r2, [pc, #136]	; (80041e0 <HAL_TIM_PWM_Start+0x174>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d022      	beq.n	80041a2 <HAL_TIM_PWM_Start+0x136>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004164:	d01d      	beq.n	80041a2 <HAL_TIM_PWM_Start+0x136>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a1f      	ldr	r2, [pc, #124]	; (80041e8 <HAL_TIM_PWM_Start+0x17c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d018      	beq.n	80041a2 <HAL_TIM_PWM_Start+0x136>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a1d      	ldr	r2, [pc, #116]	; (80041ec <HAL_TIM_PWM_Start+0x180>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d013      	beq.n	80041a2 <HAL_TIM_PWM_Start+0x136>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a1c      	ldr	r2, [pc, #112]	; (80041f0 <HAL_TIM_PWM_Start+0x184>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00e      	beq.n	80041a2 <HAL_TIM_PWM_Start+0x136>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a16      	ldr	r2, [pc, #88]	; (80041e4 <HAL_TIM_PWM_Start+0x178>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d009      	beq.n	80041a2 <HAL_TIM_PWM_Start+0x136>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a18      	ldr	r2, [pc, #96]	; (80041f4 <HAL_TIM_PWM_Start+0x188>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d004      	beq.n	80041a2 <HAL_TIM_PWM_Start+0x136>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a16      	ldr	r2, [pc, #88]	; (80041f8 <HAL_TIM_PWM_Start+0x18c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d111      	bne.n	80041c6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b06      	cmp	r3, #6
 80041b2:	d010      	beq.n	80041d6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c4:	e007      	b.n	80041d6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f042 0201 	orr.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40010000 	.word	0x40010000
 80041e4:	40010400 	.word	0x40010400
 80041e8:	40000400 	.word	0x40000400
 80041ec:	40000800 	.word	0x40000800
 80041f0:	40000c00 	.word	0x40000c00
 80041f4:	40014000 	.word	0x40014000
 80041f8:	40001800 	.word	0x40001800

080041fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e041      	b.n	8004292 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d106      	bne.n	8004228 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7fd fd70 	bl	8001d08 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3304      	adds	r3, #4
 8004238:	4619      	mov	r1, r3
 800423a:	4610      	mov	r0, r2
 800423c:	f000 fab2 	bl	80047a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d122      	bne.n	80042f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d11b      	bne.n	80042f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f06f 0202 	mvn.w	r2, #2
 80042c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7fd fbe3 	bl	8001aa8 <HAL_TIM_IC_CaptureCallback>
 80042e2:	e005      	b.n	80042f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 fa3f 	bl	8004768 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fa46 	bl	800477c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b04      	cmp	r3, #4
 8004302:	d122      	bne.n	800434a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f003 0304 	and.w	r3, r3, #4
 800430e:	2b04      	cmp	r3, #4
 8004310:	d11b      	bne.n	800434a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f06f 0204 	mvn.w	r2, #4
 800431a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7fd fbb9 	bl	8001aa8 <HAL_TIM_IC_CaptureCallback>
 8004336:	e005      	b.n	8004344 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 fa15 	bl	8004768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fa1c 	bl	800477c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b08      	cmp	r3, #8
 8004356:	d122      	bne.n	800439e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b08      	cmp	r3, #8
 8004364:	d11b      	bne.n	800439e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f06f 0208 	mvn.w	r2, #8
 800436e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2204      	movs	r2, #4
 8004374:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	f003 0303 	and.w	r3, r3, #3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7fd fb8f 	bl	8001aa8 <HAL_TIM_IC_CaptureCallback>
 800438a:	e005      	b.n	8004398 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f9eb 	bl	8004768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f9f2 	bl	800477c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	f003 0310 	and.w	r3, r3, #16
 80043a8:	2b10      	cmp	r3, #16
 80043aa:	d122      	bne.n	80043f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f003 0310 	and.w	r3, r3, #16
 80043b6:	2b10      	cmp	r3, #16
 80043b8:	d11b      	bne.n	80043f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f06f 0210 	mvn.w	r2, #16
 80043c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2208      	movs	r2, #8
 80043c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7fd fb65 	bl	8001aa8 <HAL_TIM_IC_CaptureCallback>
 80043de:	e005      	b.n	80043ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f9c1 	bl	8004768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f9c8 	bl	800477c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d10e      	bne.n	800441e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b01      	cmp	r3, #1
 800440c:	d107      	bne.n	800441e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f06f 0201 	mvn.w	r2, #1
 8004416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7fd fb63 	bl	8001ae4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004428:	2b80      	cmp	r3, #128	; 0x80
 800442a:	d10e      	bne.n	800444a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004436:	2b80      	cmp	r3, #128	; 0x80
 8004438:	d107      	bne.n	800444a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 fdd3 	bl	8004ff0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004454:	2b40      	cmp	r3, #64	; 0x40
 8004456:	d10e      	bne.n	8004476 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004462:	2b40      	cmp	r3, #64	; 0x40
 8004464:	d107      	bne.n	8004476 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800446e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f98d 	bl	8004790 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	f003 0320 	and.w	r3, r3, #32
 8004480:	2b20      	cmp	r3, #32
 8004482:	d10e      	bne.n	80044a2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b20      	cmp	r3, #32
 8004490:	d107      	bne.n	80044a2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f06f 0220 	mvn.w	r2, #32
 800449a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 fd9d 	bl	8004fdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044a2:	bf00      	nop
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b086      	sub	sp, #24
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	60f8      	str	r0, [r7, #12]
 80044b2:	60b9      	str	r1, [r7, #8]
 80044b4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e088      	b.n	80045da <HAL_TIM_IC_ConfigChannel+0x130>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d11b      	bne.n	800450e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	6819      	ldr	r1, [r3, #0]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f000 fbad 	bl	8004c44 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	699a      	ldr	r2, [r3, #24]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 020c 	bic.w	r2, r2, #12
 80044f8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6999      	ldr	r1, [r3, #24]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	619a      	str	r2, [r3, #24]
 800450c:	e060      	b.n	80045d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b04      	cmp	r3, #4
 8004512:	d11c      	bne.n	800454e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6818      	ldr	r0, [r3, #0]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	6819      	ldr	r1, [r3, #0]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f000 fc02 	bl	8004d2c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004536:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6999      	ldr	r1, [r3, #24]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	021a      	lsls	r2, r3, #8
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	619a      	str	r2, [r3, #24]
 800454c:	e040      	b.n	80045d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b08      	cmp	r3, #8
 8004552:	d11b      	bne.n	800458c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6818      	ldr	r0, [r3, #0]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	6819      	ldr	r1, [r3, #0]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f000 fc1f 	bl	8004da6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	69da      	ldr	r2, [r3, #28]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 020c 	bic.w	r2, r2, #12
 8004576:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	69d9      	ldr	r1, [r3, #28]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	61da      	str	r2, [r3, #28]
 800458a:	e021      	b.n	80045d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b0c      	cmp	r3, #12
 8004590:	d11c      	bne.n	80045cc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	6819      	ldr	r1, [r3, #0]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f000 fc3c 	bl	8004e1e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80045b4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69d9      	ldr	r1, [r3, #28]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	021a      	lsls	r2, r3, #8
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	61da      	str	r2, [r3, #28]
 80045ca:	e001      	b.n	80045d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3718      	adds	r7, #24
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d101      	bne.n	8004602 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045fe:	2302      	movs	r3, #2
 8004600:	e0ae      	b.n	8004760 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b0c      	cmp	r3, #12
 800460e:	f200 809f 	bhi.w	8004750 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004612:	a201      	add	r2, pc, #4	; (adr r2, 8004618 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004618:	0800464d 	.word	0x0800464d
 800461c:	08004751 	.word	0x08004751
 8004620:	08004751 	.word	0x08004751
 8004624:	08004751 	.word	0x08004751
 8004628:	0800468d 	.word	0x0800468d
 800462c:	08004751 	.word	0x08004751
 8004630:	08004751 	.word	0x08004751
 8004634:	08004751 	.word	0x08004751
 8004638:	080046cf 	.word	0x080046cf
 800463c:	08004751 	.word	0x08004751
 8004640:	08004751 	.word	0x08004751
 8004644:	08004751 	.word	0x08004751
 8004648:	0800470f 	.word	0x0800470f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68b9      	ldr	r1, [r7, #8]
 8004652:	4618      	mov	r0, r3
 8004654:	f000 f946 	bl	80048e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699a      	ldr	r2, [r3, #24]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0208 	orr.w	r2, r2, #8
 8004666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699a      	ldr	r2, [r3, #24]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0204 	bic.w	r2, r2, #4
 8004676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6999      	ldr	r1, [r3, #24]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	691a      	ldr	r2, [r3, #16]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	619a      	str	r2, [r3, #24]
      break;
 800468a:	e064      	b.n	8004756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68b9      	ldr	r1, [r7, #8]
 8004692:	4618      	mov	r0, r3
 8004694:	f000 f996 	bl	80049c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699a      	ldr	r2, [r3, #24]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699a      	ldr	r2, [r3, #24]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6999      	ldr	r1, [r3, #24]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	021a      	lsls	r2, r3, #8
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	619a      	str	r2, [r3, #24]
      break;
 80046cc:	e043      	b.n	8004756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68b9      	ldr	r1, [r7, #8]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 f9eb 	bl	8004ab0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69da      	ldr	r2, [r3, #28]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f042 0208 	orr.w	r2, r2, #8
 80046e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	69da      	ldr	r2, [r3, #28]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0204 	bic.w	r2, r2, #4
 80046f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69d9      	ldr	r1, [r3, #28]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	691a      	ldr	r2, [r3, #16]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	61da      	str	r2, [r3, #28]
      break;
 800470c:	e023      	b.n	8004756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68b9      	ldr	r1, [r7, #8]
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fa3f 	bl	8004b98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69da      	ldr	r2, [r3, #28]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69d9      	ldr	r1, [r3, #28]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	021a      	lsls	r2, r3, #8
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	61da      	str	r2, [r3, #28]
      break;
 800474e:	e002      	b.n	8004756 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	75fb      	strb	r3, [r7, #23]
      break;
 8004754:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800475e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a40      	ldr	r2, [pc, #256]	; (80048b8 <TIM_Base_SetConfig+0x114>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d013      	beq.n	80047e4 <TIM_Base_SetConfig+0x40>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c2:	d00f      	beq.n	80047e4 <TIM_Base_SetConfig+0x40>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a3d      	ldr	r2, [pc, #244]	; (80048bc <TIM_Base_SetConfig+0x118>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d00b      	beq.n	80047e4 <TIM_Base_SetConfig+0x40>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a3c      	ldr	r2, [pc, #240]	; (80048c0 <TIM_Base_SetConfig+0x11c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d007      	beq.n	80047e4 <TIM_Base_SetConfig+0x40>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a3b      	ldr	r2, [pc, #236]	; (80048c4 <TIM_Base_SetConfig+0x120>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d003      	beq.n	80047e4 <TIM_Base_SetConfig+0x40>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a3a      	ldr	r2, [pc, #232]	; (80048c8 <TIM_Base_SetConfig+0x124>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d108      	bne.n	80047f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a2f      	ldr	r2, [pc, #188]	; (80048b8 <TIM_Base_SetConfig+0x114>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d02b      	beq.n	8004856 <TIM_Base_SetConfig+0xb2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004804:	d027      	beq.n	8004856 <TIM_Base_SetConfig+0xb2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a2c      	ldr	r2, [pc, #176]	; (80048bc <TIM_Base_SetConfig+0x118>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d023      	beq.n	8004856 <TIM_Base_SetConfig+0xb2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a2b      	ldr	r2, [pc, #172]	; (80048c0 <TIM_Base_SetConfig+0x11c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d01f      	beq.n	8004856 <TIM_Base_SetConfig+0xb2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a2a      	ldr	r2, [pc, #168]	; (80048c4 <TIM_Base_SetConfig+0x120>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d01b      	beq.n	8004856 <TIM_Base_SetConfig+0xb2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a29      	ldr	r2, [pc, #164]	; (80048c8 <TIM_Base_SetConfig+0x124>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d017      	beq.n	8004856 <TIM_Base_SetConfig+0xb2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a28      	ldr	r2, [pc, #160]	; (80048cc <TIM_Base_SetConfig+0x128>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d013      	beq.n	8004856 <TIM_Base_SetConfig+0xb2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a27      	ldr	r2, [pc, #156]	; (80048d0 <TIM_Base_SetConfig+0x12c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00f      	beq.n	8004856 <TIM_Base_SetConfig+0xb2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a26      	ldr	r2, [pc, #152]	; (80048d4 <TIM_Base_SetConfig+0x130>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00b      	beq.n	8004856 <TIM_Base_SetConfig+0xb2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a25      	ldr	r2, [pc, #148]	; (80048d8 <TIM_Base_SetConfig+0x134>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d007      	beq.n	8004856 <TIM_Base_SetConfig+0xb2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a24      	ldr	r2, [pc, #144]	; (80048dc <TIM_Base_SetConfig+0x138>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d003      	beq.n	8004856 <TIM_Base_SetConfig+0xb2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a23      	ldr	r2, [pc, #140]	; (80048e0 <TIM_Base_SetConfig+0x13c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d108      	bne.n	8004868 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800485c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	4313      	orrs	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a0a      	ldr	r2, [pc, #40]	; (80048b8 <TIM_Base_SetConfig+0x114>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d003      	beq.n	800489c <TIM_Base_SetConfig+0xf8>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a0c      	ldr	r2, [pc, #48]	; (80048c8 <TIM_Base_SetConfig+0x124>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d103      	bne.n	80048a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	691a      	ldr	r2, [r3, #16]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	615a      	str	r2, [r3, #20]
}
 80048aa:	bf00      	nop
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	40010000 	.word	0x40010000
 80048bc:	40000400 	.word	0x40000400
 80048c0:	40000800 	.word	0x40000800
 80048c4:	40000c00 	.word	0x40000c00
 80048c8:	40010400 	.word	0x40010400
 80048cc:	40014000 	.word	0x40014000
 80048d0:	40014400 	.word	0x40014400
 80048d4:	40014800 	.word	0x40014800
 80048d8:	40001800 	.word	0x40001800
 80048dc:	40001c00 	.word	0x40001c00
 80048e0:	40002000 	.word	0x40002000

080048e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	f023 0201 	bic.w	r2, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0303 	bic.w	r3, r3, #3
 800491a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f023 0302 	bic.w	r3, r3, #2
 800492c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	4313      	orrs	r3, r2
 8004936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a20      	ldr	r2, [pc, #128]	; (80049bc <TIM_OC1_SetConfig+0xd8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d003      	beq.n	8004948 <TIM_OC1_SetConfig+0x64>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a1f      	ldr	r2, [pc, #124]	; (80049c0 <TIM_OC1_SetConfig+0xdc>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d10c      	bne.n	8004962 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f023 0308 	bic.w	r3, r3, #8
 800494e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	4313      	orrs	r3, r2
 8004958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f023 0304 	bic.w	r3, r3, #4
 8004960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a15      	ldr	r2, [pc, #84]	; (80049bc <TIM_OC1_SetConfig+0xd8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d003      	beq.n	8004972 <TIM_OC1_SetConfig+0x8e>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a14      	ldr	r2, [pc, #80]	; (80049c0 <TIM_OC1_SetConfig+0xdc>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d111      	bne.n	8004996 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	621a      	str	r2, [r3, #32]
}
 80049b0:	bf00      	nop
 80049b2:	371c      	adds	r7, #28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	40010000 	.word	0x40010000
 80049c0:	40010400 	.word	0x40010400

080049c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	f023 0210 	bic.w	r2, r3, #16
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	021b      	lsls	r3, r3, #8
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f023 0320 	bic.w	r3, r3, #32
 8004a0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a22      	ldr	r2, [pc, #136]	; (8004aa8 <TIM_OC2_SetConfig+0xe4>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d003      	beq.n	8004a2c <TIM_OC2_SetConfig+0x68>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a21      	ldr	r2, [pc, #132]	; (8004aac <TIM_OC2_SetConfig+0xe8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d10d      	bne.n	8004a48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a17      	ldr	r2, [pc, #92]	; (8004aa8 <TIM_OC2_SetConfig+0xe4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <TIM_OC2_SetConfig+0x94>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a16      	ldr	r2, [pc, #88]	; (8004aac <TIM_OC2_SetConfig+0xe8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d113      	bne.n	8004a80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	621a      	str	r2, [r3, #32]
}
 8004a9a:	bf00      	nop
 8004a9c:	371c      	adds	r7, #28
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	40010000 	.word	0x40010000
 8004aac:	40010400 	.word	0x40010400

08004ab0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f023 0303 	bic.w	r3, r3, #3
 8004ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	021b      	lsls	r3, r3, #8
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a21      	ldr	r2, [pc, #132]	; (8004b90 <TIM_OC3_SetConfig+0xe0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d003      	beq.n	8004b16 <TIM_OC3_SetConfig+0x66>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a20      	ldr	r2, [pc, #128]	; (8004b94 <TIM_OC3_SetConfig+0xe4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d10d      	bne.n	8004b32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	021b      	lsls	r3, r3, #8
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a16      	ldr	r2, [pc, #88]	; (8004b90 <TIM_OC3_SetConfig+0xe0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d003      	beq.n	8004b42 <TIM_OC3_SetConfig+0x92>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a15      	ldr	r2, [pc, #84]	; (8004b94 <TIM_OC3_SetConfig+0xe4>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d113      	bne.n	8004b6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	621a      	str	r2, [r3, #32]
}
 8004b84:	bf00      	nop
 8004b86:	371c      	adds	r7, #28
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	40010000 	.word	0x40010000
 8004b94:	40010400 	.word	0x40010400

08004b98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	021b      	lsls	r3, r3, #8
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004be2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	031b      	lsls	r3, r3, #12
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a12      	ldr	r2, [pc, #72]	; (8004c3c <TIM_OC4_SetConfig+0xa4>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d003      	beq.n	8004c00 <TIM_OC4_SetConfig+0x68>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a11      	ldr	r2, [pc, #68]	; (8004c40 <TIM_OC4_SetConfig+0xa8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d109      	bne.n	8004c14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	019b      	lsls	r3, r3, #6
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	621a      	str	r2, [r3, #32]
}
 8004c2e:	bf00      	nop
 8004c30:	371c      	adds	r7, #28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40010000 	.word	0x40010000
 8004c40:	40010400 	.word	0x40010400

08004c44 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	f023 0201 	bic.w	r2, r3, #1
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4a28      	ldr	r2, [pc, #160]	; (8004d10 <TIM_TI1_SetConfig+0xcc>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d01b      	beq.n	8004caa <TIM_TI1_SetConfig+0x66>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c78:	d017      	beq.n	8004caa <TIM_TI1_SetConfig+0x66>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4a25      	ldr	r2, [pc, #148]	; (8004d14 <TIM_TI1_SetConfig+0xd0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d013      	beq.n	8004caa <TIM_TI1_SetConfig+0x66>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4a24      	ldr	r2, [pc, #144]	; (8004d18 <TIM_TI1_SetConfig+0xd4>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00f      	beq.n	8004caa <TIM_TI1_SetConfig+0x66>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4a23      	ldr	r2, [pc, #140]	; (8004d1c <TIM_TI1_SetConfig+0xd8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00b      	beq.n	8004caa <TIM_TI1_SetConfig+0x66>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4a22      	ldr	r2, [pc, #136]	; (8004d20 <TIM_TI1_SetConfig+0xdc>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d007      	beq.n	8004caa <TIM_TI1_SetConfig+0x66>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4a21      	ldr	r2, [pc, #132]	; (8004d24 <TIM_TI1_SetConfig+0xe0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d003      	beq.n	8004caa <TIM_TI1_SetConfig+0x66>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4a20      	ldr	r2, [pc, #128]	; (8004d28 <TIM_TI1_SetConfig+0xe4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d101      	bne.n	8004cae <TIM_TI1_SetConfig+0x6a>
 8004caa:	2301      	movs	r3, #1
 8004cac:	e000      	b.n	8004cb0 <TIM_TI1_SetConfig+0x6c>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d008      	beq.n	8004cc6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f023 0303 	bic.w	r3, r3, #3
 8004cba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	e003      	b.n	8004cce <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f043 0301 	orr.w	r3, r3, #1
 8004ccc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f023 030a 	bic.w	r3, r3, #10
 8004ce8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	f003 030a 	and.w	r3, r3, #10
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	621a      	str	r2, [r3, #32]
}
 8004d02:	bf00      	nop
 8004d04:	371c      	adds	r7, #28
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40010000 	.word	0x40010000
 8004d14:	40000400 	.word	0x40000400
 8004d18:	40000800 	.word	0x40000800
 8004d1c:	40000c00 	.word	0x40000c00
 8004d20:	40010400 	.word	0x40010400
 8004d24:	40014000 	.word	0x40014000
 8004d28:	40001800 	.word	0x40001800

08004d2c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
 8004d38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	f023 0210 	bic.w	r2, r3, #16
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	021b      	lsls	r3, r3, #8
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	031b      	lsls	r3, r3, #12
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d7e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	621a      	str	r2, [r3, #32]
}
 8004d9a:	bf00      	nop
 8004d9c:	371c      	adds	r7, #28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b087      	sub	sp, #28
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	60f8      	str	r0, [r7, #12]
 8004dae:	60b9      	str	r1, [r7, #8]
 8004db0:	607a      	str	r2, [r7, #4]
 8004db2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f023 0303 	bic.w	r3, r3, #3
 8004dd2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004de2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004df6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	021b      	lsls	r3, r3, #8
 8004dfc:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	621a      	str	r2, [r3, #32]
}
 8004e12:	bf00      	nop
 8004e14:	371c      	adds	r7, #28
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b087      	sub	sp, #28
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	60f8      	str	r0, [r7, #12]
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	607a      	str	r2, [r7, #4]
 8004e2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e4a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	021b      	lsls	r3, r3, #8
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	031b      	lsls	r3, r3, #12
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004e70:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	031b      	lsls	r3, r3, #12
 8004e76:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	621a      	str	r2, [r3, #32]
}
 8004e8c:	bf00      	nop
 8004e8e:	371c      	adds	r7, #28
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f003 031f 	and.w	r3, r3, #31
 8004eaa:	2201      	movs	r2, #1
 8004eac:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6a1a      	ldr	r2, [r3, #32]
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	401a      	ands	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a1a      	ldr	r2, [r3, #32]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	f003 031f 	and.w	r3, r3, #31
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	621a      	str	r2, [r3, #32]
}
 8004ed6:	bf00      	nop
 8004ed8:	371c      	adds	r7, #28
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
	...

08004ee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d101      	bne.n	8004efc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	e05a      	b.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a21      	ldr	r2, [pc, #132]	; (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d022      	beq.n	8004f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f48:	d01d      	beq.n	8004f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a1d      	ldr	r2, [pc, #116]	; (8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d018      	beq.n	8004f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a1b      	ldr	r2, [pc, #108]	; (8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d013      	beq.n	8004f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a1a      	ldr	r2, [pc, #104]	; (8004fcc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00e      	beq.n	8004f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a18      	ldr	r2, [pc, #96]	; (8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d009      	beq.n	8004f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a17      	ldr	r2, [pc, #92]	; (8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d004      	beq.n	8004f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a15      	ldr	r2, [pc, #84]	; (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d10c      	bne.n	8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	40010000 	.word	0x40010000
 8004fc4:	40000400 	.word	0x40000400
 8004fc8:	40000800 	.word	0x40000800
 8004fcc:	40000c00 	.word	0x40000c00
 8004fd0:	40010400 	.word	0x40010400
 8004fd4:	40014000 	.word	0x40014000
 8004fd8:	40001800 	.word	0x40001800

08004fdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e03f      	b.n	8005096 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fc ff94 	bl	8001f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2224      	movs	r2, #36	; 0x24
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005046:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 fc7b 	bl	8005944 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	691a      	ldr	r2, [r3, #16]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800505c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	695a      	ldr	r2, [r3, #20]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800506c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68da      	ldr	r2, [r3, #12]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800507c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2220      	movs	r2, #32
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
	...

080050a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b0ba      	sub	sp, #232	; 0xe8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80050de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10f      	bne.n	8005106 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ea:	f003 0320 	and.w	r3, r3, #32
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d009      	beq.n	8005106 <HAL_UART_IRQHandler+0x66>
 80050f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050f6:	f003 0320 	and.w	r3, r3, #32
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 fb65 	bl	80057ce <UART_Receive_IT>
      return;
 8005104:	e256      	b.n	80055b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005106:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 80de 	beq.w	80052cc <HAL_UART_IRQHandler+0x22c>
 8005110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b00      	cmp	r3, #0
 800511a:	d106      	bne.n	800512a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800511c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005120:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 80d1 	beq.w	80052cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800512a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00b      	beq.n	800514e <HAL_UART_IRQHandler+0xae>
 8005136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800513a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513e:	2b00      	cmp	r3, #0
 8005140:	d005      	beq.n	800514e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	f043 0201 	orr.w	r2, r3, #1
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800514e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005152:	f003 0304 	and.w	r3, r3, #4
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00b      	beq.n	8005172 <HAL_UART_IRQHandler+0xd2>
 800515a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d005      	beq.n	8005172 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	f043 0202 	orr.w	r2, r3, #2
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00b      	beq.n	8005196 <HAL_UART_IRQHandler+0xf6>
 800517e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d005      	beq.n	8005196 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	f043 0204 	orr.w	r2, r3, #4
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d011      	beq.n	80051c6 <HAL_UART_IRQHandler+0x126>
 80051a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051a6:	f003 0320 	and.w	r3, r3, #32
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d105      	bne.n	80051ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80051ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d005      	beq.n	80051c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	f043 0208 	orr.w	r2, r3, #8
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 81ed 	beq.w	80055aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d4:	f003 0320 	and.w	r3, r3, #32
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d008      	beq.n	80051ee <HAL_UART_IRQHandler+0x14e>
 80051dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051e0:	f003 0320 	and.w	r3, r3, #32
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 faf0 	bl	80057ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f8:	2b40      	cmp	r3, #64	; 0x40
 80051fa:	bf0c      	ite	eq
 80051fc:	2301      	moveq	r3, #1
 80051fe:	2300      	movne	r3, #0
 8005200:	b2db      	uxtb	r3, r3
 8005202:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	f003 0308 	and.w	r3, r3, #8
 800520e:	2b00      	cmp	r3, #0
 8005210:	d103      	bne.n	800521a <HAL_UART_IRQHandler+0x17a>
 8005212:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005216:	2b00      	cmp	r3, #0
 8005218:	d04f      	beq.n	80052ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f9f8 	bl	8005610 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522a:	2b40      	cmp	r3, #64	; 0x40
 800522c:	d141      	bne.n	80052b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	3314      	adds	r3, #20
 8005234:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005238:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800523c:	e853 3f00 	ldrex	r3, [r3]
 8005240:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005244:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800524c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3314      	adds	r3, #20
 8005256:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800525a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800525e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005266:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800526a:	e841 2300 	strex	r3, r2, [r1]
 800526e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005272:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1d9      	bne.n	800522e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527e:	2b00      	cmp	r3, #0
 8005280:	d013      	beq.n	80052aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005286:	4a7d      	ldr	r2, [pc, #500]	; (800547c <HAL_UART_IRQHandler+0x3dc>)
 8005288:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528e:	4618      	mov	r0, r3
 8005290:	f7fd fa2c 	bl	80026ec <HAL_DMA_Abort_IT>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d016      	beq.n	80052c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052a4:	4610      	mov	r0, r2
 80052a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a8:	e00e      	b.n	80052c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f99a 	bl	80055e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b0:	e00a      	b.n	80052c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f996 	bl	80055e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b8:	e006      	b.n	80052c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f992 	bl	80055e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80052c6:	e170      	b.n	80055aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c8:	bf00      	nop
    return;
 80052ca:	e16e      	b.n	80055aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	f040 814a 	bne.w	800556a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80052d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052da:	f003 0310 	and.w	r3, r3, #16
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 8143 	beq.w	800556a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80052e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052e8:	f003 0310 	and.w	r3, r3, #16
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 813c 	beq.w	800556a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052f2:	2300      	movs	r3, #0
 80052f4:	60bb      	str	r3, [r7, #8]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	60bb      	str	r3, [r7, #8]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	60bb      	str	r3, [r7, #8]
 8005306:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005312:	2b40      	cmp	r3, #64	; 0x40
 8005314:	f040 80b4 	bne.w	8005480 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005324:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 8140 	beq.w	80055ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005332:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005336:	429a      	cmp	r2, r3
 8005338:	f080 8139 	bcs.w	80055ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005342:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800534e:	f000 8088 	beq.w	8005462 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	330c      	adds	r3, #12
 8005358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005360:	e853 3f00 	ldrex	r3, [r3]
 8005364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005368:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800536c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005370:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	330c      	adds	r3, #12
 800537a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800537e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005382:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005386:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800538a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800538e:	e841 2300 	strex	r3, r2, [r1]
 8005392:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005396:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1d9      	bne.n	8005352 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3314      	adds	r3, #20
 80053a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053a8:	e853 3f00 	ldrex	r3, [r3]
 80053ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80053ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053b0:	f023 0301 	bic.w	r3, r3, #1
 80053b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	3314      	adds	r3, #20
 80053be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80053c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80053c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80053ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80053ce:	e841 2300 	strex	r3, r2, [r1]
 80053d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80053d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1e1      	bne.n	800539e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	3314      	adds	r3, #20
 80053e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053e4:	e853 3f00 	ldrex	r3, [r3]
 80053e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80053ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3314      	adds	r3, #20
 80053fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80053fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005400:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005402:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005404:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005406:	e841 2300 	strex	r3, r2, [r1]
 800540a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800540c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1e3      	bne.n	80053da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2220      	movs	r2, #32
 8005416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	330c      	adds	r3, #12
 8005426:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800542a:	e853 3f00 	ldrex	r3, [r3]
 800542e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005432:	f023 0310 	bic.w	r3, r3, #16
 8005436:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	330c      	adds	r3, #12
 8005440:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005444:	65ba      	str	r2, [r7, #88]	; 0x58
 8005446:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005448:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800544a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800544c:	e841 2300 	strex	r3, r2, [r1]
 8005450:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1e3      	bne.n	8005420 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545c:	4618      	mov	r0, r3
 800545e:	f7fd f8d5 	bl	800260c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800546a:	b29b      	uxth	r3, r3
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	b29b      	uxth	r3, r3
 8005470:	4619      	mov	r1, r3
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f8c0 	bl	80055f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005478:	e099      	b.n	80055ae <HAL_UART_IRQHandler+0x50e>
 800547a:	bf00      	nop
 800547c:	080056d7 	.word	0x080056d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005488:	b29b      	uxth	r3, r3
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005494:	b29b      	uxth	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 808b 	beq.w	80055b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800549c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 8086 	beq.w	80055b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	330c      	adds	r3, #12
 80054ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b0:	e853 3f00 	ldrex	r3, [r3]
 80054b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	330c      	adds	r3, #12
 80054c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80054ca:	647a      	str	r2, [r7, #68]	; 0x44
 80054cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054d2:	e841 2300 	strex	r3, r2, [r1]
 80054d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1e3      	bne.n	80054a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3314      	adds	r3, #20
 80054e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	e853 3f00 	ldrex	r3, [r3]
 80054ec:	623b      	str	r3, [r7, #32]
   return(result);
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	f023 0301 	bic.w	r3, r3, #1
 80054f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3314      	adds	r3, #20
 80054fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005502:	633a      	str	r2, [r7, #48]	; 0x30
 8005504:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005506:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800550a:	e841 2300 	strex	r3, r2, [r1]
 800550e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1e3      	bne.n	80054de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2220      	movs	r2, #32
 800551a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	330c      	adds	r3, #12
 800552a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	e853 3f00 	ldrex	r3, [r3]
 8005532:	60fb      	str	r3, [r7, #12]
   return(result);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0310 	bic.w	r3, r3, #16
 800553a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	330c      	adds	r3, #12
 8005544:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005548:	61fa      	str	r2, [r7, #28]
 800554a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554c:	69b9      	ldr	r1, [r7, #24]
 800554e:	69fa      	ldr	r2, [r7, #28]
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	617b      	str	r3, [r7, #20]
   return(result);
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e3      	bne.n	8005524 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800555c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005560:	4619      	mov	r1, r3
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f848 	bl	80055f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005568:	e023      	b.n	80055b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800556a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800556e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005572:	2b00      	cmp	r3, #0
 8005574:	d009      	beq.n	800558a <HAL_UART_IRQHandler+0x4ea>
 8005576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800557a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f8bb 	bl	80056fe <UART_Transmit_IT>
    return;
 8005588:	e014      	b.n	80055b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800558a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800558e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00e      	beq.n	80055b4 <HAL_UART_IRQHandler+0x514>
 8005596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800559a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d008      	beq.n	80055b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f8fb 	bl	800579e <UART_EndTransmit_IT>
    return;
 80055a8:	e004      	b.n	80055b4 <HAL_UART_IRQHandler+0x514>
    return;
 80055aa:	bf00      	nop
 80055ac:	e002      	b.n	80055b4 <HAL_UART_IRQHandler+0x514>
      return;
 80055ae:	bf00      	nop
 80055b0:	e000      	b.n	80055b4 <HAL_UART_IRQHandler+0x514>
      return;
 80055b2:	bf00      	nop
  }
}
 80055b4:	37e8      	adds	r7, #232	; 0xe8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop

080055bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	460b      	mov	r3, r1
 8005602:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005610:	b480      	push	{r7}
 8005612:	b095      	sub	sp, #84	; 0x54
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	330c      	adds	r3, #12
 800561e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005622:	e853 3f00 	ldrex	r3, [r3]
 8005626:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800562e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	330c      	adds	r3, #12
 8005636:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005638:	643a      	str	r2, [r7, #64]	; 0x40
 800563a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800563e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005640:	e841 2300 	strex	r3, r2, [r1]
 8005644:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1e5      	bne.n	8005618 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3314      	adds	r3, #20
 8005652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	e853 3f00 	ldrex	r3, [r3]
 800565a:	61fb      	str	r3, [r7, #28]
   return(result);
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	f023 0301 	bic.w	r3, r3, #1
 8005662:	64bb      	str	r3, [r7, #72]	; 0x48
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3314      	adds	r3, #20
 800566a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800566c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800566e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005670:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005674:	e841 2300 	strex	r3, r2, [r1]
 8005678:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1e5      	bne.n	800564c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005684:	2b01      	cmp	r3, #1
 8005686:	d119      	bne.n	80056bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	330c      	adds	r3, #12
 800568e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	e853 3f00 	ldrex	r3, [r3]
 8005696:	60bb      	str	r3, [r7, #8]
   return(result);
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f023 0310 	bic.w	r3, r3, #16
 800569e:	647b      	str	r3, [r7, #68]	; 0x44
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	330c      	adds	r3, #12
 80056a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056a8:	61ba      	str	r2, [r7, #24]
 80056aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ac:	6979      	ldr	r1, [r7, #20]
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	e841 2300 	strex	r3, r2, [r1]
 80056b4:	613b      	str	r3, [r7, #16]
   return(result);
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1e5      	bne.n	8005688 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80056ca:	bf00      	nop
 80056cc:	3754      	adds	r7, #84	; 0x54
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b084      	sub	sp, #16
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f7ff ff77 	bl	80055e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056f6:	bf00      	nop
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056fe:	b480      	push	{r7}
 8005700:	b085      	sub	sp, #20
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b21      	cmp	r3, #33	; 0x21
 8005710:	d13e      	bne.n	8005790 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800571a:	d114      	bne.n	8005746 <UART_Transmit_IT+0x48>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d110      	bne.n	8005746 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005738:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	1c9a      	adds	r2, r3, #2
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	621a      	str	r2, [r3, #32]
 8005744:	e008      	b.n	8005758 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	1c59      	adds	r1, r3, #1
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6211      	str	r1, [r2, #32]
 8005750:	781a      	ldrb	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800575c:	b29b      	uxth	r3, r3
 800575e:	3b01      	subs	r3, #1
 8005760:	b29b      	uxth	r3, r3
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	4619      	mov	r1, r3
 8005766:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10f      	bne.n	800578c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800577a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800578a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800578c:	2300      	movs	r3, #0
 800578e:	e000      	b.n	8005792 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005790:	2302      	movs	r3, #2
  }
}
 8005792:	4618      	mov	r0, r3
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b082      	sub	sp, #8
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68da      	ldr	r2, [r3, #12]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2220      	movs	r2, #32
 80057ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7ff fefc 	bl	80055bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b08c      	sub	sp, #48	; 0x30
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b22      	cmp	r3, #34	; 0x22
 80057e0:	f040 80ab 	bne.w	800593a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ec:	d117      	bne.n	800581e <UART_Receive_IT+0x50>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d113      	bne.n	800581e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80057f6:	2300      	movs	r3, #0
 80057f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	b29b      	uxth	r3, r3
 8005808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800580c:	b29a      	uxth	r2, r3
 800580e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005810:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005816:	1c9a      	adds	r2, r3, #2
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	629a      	str	r2, [r3, #40]	; 0x28
 800581c:	e026      	b.n	800586c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005822:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005824:	2300      	movs	r3, #0
 8005826:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005830:	d007      	beq.n	8005842 <UART_Receive_IT+0x74>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10a      	bne.n	8005850 <UART_Receive_IT+0x82>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	b2da      	uxtb	r2, r3
 800584a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584c:	701a      	strb	r2, [r3, #0]
 800584e:	e008      	b.n	8005862 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	b2db      	uxtb	r3, r3
 8005858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800585c:	b2da      	uxtb	r2, r3
 800585e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005860:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005870:	b29b      	uxth	r3, r3
 8005872:	3b01      	subs	r3, #1
 8005874:	b29b      	uxth	r3, r3
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	4619      	mov	r1, r3
 800587a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800587c:	2b00      	cmp	r3, #0
 800587e:	d15a      	bne.n	8005936 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0220 	bic.w	r2, r2, #32
 800588e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68da      	ldr	r2, [r3, #12]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800589e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	695a      	ldr	r2, [r3, #20]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 0201 	bic.w	r2, r2, #1
 80058ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2220      	movs	r2, #32
 80058b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d135      	bne.n	800592c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	330c      	adds	r3, #12
 80058cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	e853 3f00 	ldrex	r3, [r3]
 80058d4:	613b      	str	r3, [r7, #16]
   return(result);
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f023 0310 	bic.w	r3, r3, #16
 80058dc:	627b      	str	r3, [r7, #36]	; 0x24
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	330c      	adds	r3, #12
 80058e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e6:	623a      	str	r2, [r7, #32]
 80058e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ea:	69f9      	ldr	r1, [r7, #28]
 80058ec:	6a3a      	ldr	r2, [r7, #32]
 80058ee:	e841 2300 	strex	r3, r2, [r1]
 80058f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1e5      	bne.n	80058c6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0310 	and.w	r3, r3, #16
 8005904:	2b10      	cmp	r3, #16
 8005906:	d10a      	bne.n	800591e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005908:	2300      	movs	r3, #0
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	60fb      	str	r3, [r7, #12]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	60fb      	str	r3, [r7, #12]
 800591c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005922:	4619      	mov	r1, r3
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7ff fe67 	bl	80055f8 <HAL_UARTEx_RxEventCallback>
 800592a:	e002      	b.n	8005932 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f7ff fe4f 	bl	80055d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	e002      	b.n	800593c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005936:	2300      	movs	r3, #0
 8005938:	e000      	b.n	800593c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800593a:	2302      	movs	r3, #2
  }
}
 800593c:	4618      	mov	r0, r3
 800593e:	3730      	adds	r7, #48	; 0x30
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005948:	b0c0      	sub	sp, #256	; 0x100
 800594a:	af00      	add	r7, sp, #0
 800594c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800595c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005960:	68d9      	ldr	r1, [r3, #12]
 8005962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	ea40 0301 	orr.w	r3, r0, r1
 800596c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800596e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	431a      	orrs	r2, r3
 800597c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	431a      	orrs	r2, r3
 8005984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	4313      	orrs	r3, r2
 800598c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800599c:	f021 010c 	bic.w	r1, r1, #12
 80059a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80059aa:	430b      	orrs	r3, r1
 80059ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80059ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059be:	6999      	ldr	r1, [r3, #24]
 80059c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	ea40 0301 	orr.w	r3, r0, r1
 80059ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	4b8f      	ldr	r3, [pc, #572]	; (8005c10 <UART_SetConfig+0x2cc>)
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d005      	beq.n	80059e4 <UART_SetConfig+0xa0>
 80059d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	4b8d      	ldr	r3, [pc, #564]	; (8005c14 <UART_SetConfig+0x2d0>)
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d104      	bne.n	80059ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059e4:	f7fd fda4 	bl	8003530 <HAL_RCC_GetPCLK2Freq>
 80059e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80059ec:	e003      	b.n	80059f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059ee:	f7fd fd8b 	bl	8003508 <HAL_RCC_GetPCLK1Freq>
 80059f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a00:	f040 810c 	bne.w	8005c1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005a12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005a16:	4622      	mov	r2, r4
 8005a18:	462b      	mov	r3, r5
 8005a1a:	1891      	adds	r1, r2, r2
 8005a1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a1e:	415b      	adcs	r3, r3
 8005a20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a26:	4621      	mov	r1, r4
 8005a28:	eb12 0801 	adds.w	r8, r2, r1
 8005a2c:	4629      	mov	r1, r5
 8005a2e:	eb43 0901 	adc.w	r9, r3, r1
 8005a32:	f04f 0200 	mov.w	r2, #0
 8005a36:	f04f 0300 	mov.w	r3, #0
 8005a3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a46:	4690      	mov	r8, r2
 8005a48:	4699      	mov	r9, r3
 8005a4a:	4623      	mov	r3, r4
 8005a4c:	eb18 0303 	adds.w	r3, r8, r3
 8005a50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a54:	462b      	mov	r3, r5
 8005a56:	eb49 0303 	adc.w	r3, r9, r3
 8005a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005a6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005a72:	460b      	mov	r3, r1
 8005a74:	18db      	adds	r3, r3, r3
 8005a76:	653b      	str	r3, [r7, #80]	; 0x50
 8005a78:	4613      	mov	r3, r2
 8005a7a:	eb42 0303 	adc.w	r3, r2, r3
 8005a7e:	657b      	str	r3, [r7, #84]	; 0x54
 8005a80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005a84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005a88:	f7fb f84a 	bl	8000b20 <__aeabi_uldivmod>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4b61      	ldr	r3, [pc, #388]	; (8005c18 <UART_SetConfig+0x2d4>)
 8005a92:	fba3 2302 	umull	r2, r3, r3, r2
 8005a96:	095b      	lsrs	r3, r3, #5
 8005a98:	011c      	lsls	r4, r3, #4
 8005a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005aa4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005aa8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005aac:	4642      	mov	r2, r8
 8005aae:	464b      	mov	r3, r9
 8005ab0:	1891      	adds	r1, r2, r2
 8005ab2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ab4:	415b      	adcs	r3, r3
 8005ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ab8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005abc:	4641      	mov	r1, r8
 8005abe:	eb12 0a01 	adds.w	sl, r2, r1
 8005ac2:	4649      	mov	r1, r9
 8005ac4:	eb43 0b01 	adc.w	fp, r3, r1
 8005ac8:	f04f 0200 	mov.w	r2, #0
 8005acc:	f04f 0300 	mov.w	r3, #0
 8005ad0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ad4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ad8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005adc:	4692      	mov	sl, r2
 8005ade:	469b      	mov	fp, r3
 8005ae0:	4643      	mov	r3, r8
 8005ae2:	eb1a 0303 	adds.w	r3, sl, r3
 8005ae6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005aea:	464b      	mov	r3, r9
 8005aec:	eb4b 0303 	adc.w	r3, fp, r3
 8005af0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b08:	460b      	mov	r3, r1
 8005b0a:	18db      	adds	r3, r3, r3
 8005b0c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b0e:	4613      	mov	r3, r2
 8005b10:	eb42 0303 	adc.w	r3, r2, r3
 8005b14:	647b      	str	r3, [r7, #68]	; 0x44
 8005b16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005b1e:	f7fa ffff 	bl	8000b20 <__aeabi_uldivmod>
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	4611      	mov	r1, r2
 8005b28:	4b3b      	ldr	r3, [pc, #236]	; (8005c18 <UART_SetConfig+0x2d4>)
 8005b2a:	fba3 2301 	umull	r2, r3, r3, r1
 8005b2e:	095b      	lsrs	r3, r3, #5
 8005b30:	2264      	movs	r2, #100	; 0x64
 8005b32:	fb02 f303 	mul.w	r3, r2, r3
 8005b36:	1acb      	subs	r3, r1, r3
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005b3e:	4b36      	ldr	r3, [pc, #216]	; (8005c18 <UART_SetConfig+0x2d4>)
 8005b40:	fba3 2302 	umull	r2, r3, r3, r2
 8005b44:	095b      	lsrs	r3, r3, #5
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b4c:	441c      	add	r4, r3
 8005b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005b5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005b60:	4642      	mov	r2, r8
 8005b62:	464b      	mov	r3, r9
 8005b64:	1891      	adds	r1, r2, r2
 8005b66:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b68:	415b      	adcs	r3, r3
 8005b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b70:	4641      	mov	r1, r8
 8005b72:	1851      	adds	r1, r2, r1
 8005b74:	6339      	str	r1, [r7, #48]	; 0x30
 8005b76:	4649      	mov	r1, r9
 8005b78:	414b      	adcs	r3, r1
 8005b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b7c:	f04f 0200 	mov.w	r2, #0
 8005b80:	f04f 0300 	mov.w	r3, #0
 8005b84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005b88:	4659      	mov	r1, fp
 8005b8a:	00cb      	lsls	r3, r1, #3
 8005b8c:	4651      	mov	r1, sl
 8005b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b92:	4651      	mov	r1, sl
 8005b94:	00ca      	lsls	r2, r1, #3
 8005b96:	4610      	mov	r0, r2
 8005b98:	4619      	mov	r1, r3
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	4642      	mov	r2, r8
 8005b9e:	189b      	adds	r3, r3, r2
 8005ba0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ba4:	464b      	mov	r3, r9
 8005ba6:	460a      	mov	r2, r1
 8005ba8:	eb42 0303 	adc.w	r3, r2, r3
 8005bac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005bbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005bc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	18db      	adds	r3, r3, r3
 8005bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bca:	4613      	mov	r3, r2
 8005bcc:	eb42 0303 	adc.w	r3, r2, r3
 8005bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005bda:	f7fa ffa1 	bl	8000b20 <__aeabi_uldivmod>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	4b0d      	ldr	r3, [pc, #52]	; (8005c18 <UART_SetConfig+0x2d4>)
 8005be4:	fba3 1302 	umull	r1, r3, r3, r2
 8005be8:	095b      	lsrs	r3, r3, #5
 8005bea:	2164      	movs	r1, #100	; 0x64
 8005bec:	fb01 f303 	mul.w	r3, r1, r3
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	3332      	adds	r3, #50	; 0x32
 8005bf6:	4a08      	ldr	r2, [pc, #32]	; (8005c18 <UART_SetConfig+0x2d4>)
 8005bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	f003 0207 	and.w	r2, r3, #7
 8005c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4422      	add	r2, r4
 8005c0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c0c:	e106      	b.n	8005e1c <UART_SetConfig+0x4d8>
 8005c0e:	bf00      	nop
 8005c10:	40011000 	.word	0x40011000
 8005c14:	40011400 	.word	0x40011400
 8005c18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c20:	2200      	movs	r2, #0
 8005c22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005c2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005c2e:	4642      	mov	r2, r8
 8005c30:	464b      	mov	r3, r9
 8005c32:	1891      	adds	r1, r2, r2
 8005c34:	6239      	str	r1, [r7, #32]
 8005c36:	415b      	adcs	r3, r3
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
 8005c3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c3e:	4641      	mov	r1, r8
 8005c40:	1854      	adds	r4, r2, r1
 8005c42:	4649      	mov	r1, r9
 8005c44:	eb43 0501 	adc.w	r5, r3, r1
 8005c48:	f04f 0200 	mov.w	r2, #0
 8005c4c:	f04f 0300 	mov.w	r3, #0
 8005c50:	00eb      	lsls	r3, r5, #3
 8005c52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c56:	00e2      	lsls	r2, r4, #3
 8005c58:	4614      	mov	r4, r2
 8005c5a:	461d      	mov	r5, r3
 8005c5c:	4643      	mov	r3, r8
 8005c5e:	18e3      	adds	r3, r4, r3
 8005c60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005c64:	464b      	mov	r3, r9
 8005c66:	eb45 0303 	adc.w	r3, r5, r3
 8005c6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c7e:	f04f 0200 	mov.w	r2, #0
 8005c82:	f04f 0300 	mov.w	r3, #0
 8005c86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	008b      	lsls	r3, r1, #2
 8005c8e:	4621      	mov	r1, r4
 8005c90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c94:	4621      	mov	r1, r4
 8005c96:	008a      	lsls	r2, r1, #2
 8005c98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005c9c:	f7fa ff40 	bl	8000b20 <__aeabi_uldivmod>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	4b60      	ldr	r3, [pc, #384]	; (8005e28 <UART_SetConfig+0x4e4>)
 8005ca6:	fba3 2302 	umull	r2, r3, r3, r2
 8005caa:	095b      	lsrs	r3, r3, #5
 8005cac:	011c      	lsls	r4, r3, #4
 8005cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005cb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005cbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005cc0:	4642      	mov	r2, r8
 8005cc2:	464b      	mov	r3, r9
 8005cc4:	1891      	adds	r1, r2, r2
 8005cc6:	61b9      	str	r1, [r7, #24]
 8005cc8:	415b      	adcs	r3, r3
 8005cca:	61fb      	str	r3, [r7, #28]
 8005ccc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cd0:	4641      	mov	r1, r8
 8005cd2:	1851      	adds	r1, r2, r1
 8005cd4:	6139      	str	r1, [r7, #16]
 8005cd6:	4649      	mov	r1, r9
 8005cd8:	414b      	adcs	r3, r1
 8005cda:	617b      	str	r3, [r7, #20]
 8005cdc:	f04f 0200 	mov.w	r2, #0
 8005ce0:	f04f 0300 	mov.w	r3, #0
 8005ce4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ce8:	4659      	mov	r1, fp
 8005cea:	00cb      	lsls	r3, r1, #3
 8005cec:	4651      	mov	r1, sl
 8005cee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cf2:	4651      	mov	r1, sl
 8005cf4:	00ca      	lsls	r2, r1, #3
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	4642      	mov	r2, r8
 8005cfe:	189b      	adds	r3, r3, r2
 8005d00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d04:	464b      	mov	r3, r9
 8005d06:	460a      	mov	r2, r1
 8005d08:	eb42 0303 	adc.w	r3, r2, r3
 8005d0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d1c:	f04f 0200 	mov.w	r2, #0
 8005d20:	f04f 0300 	mov.w	r3, #0
 8005d24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005d28:	4649      	mov	r1, r9
 8005d2a:	008b      	lsls	r3, r1, #2
 8005d2c:	4641      	mov	r1, r8
 8005d2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d32:	4641      	mov	r1, r8
 8005d34:	008a      	lsls	r2, r1, #2
 8005d36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005d3a:	f7fa fef1 	bl	8000b20 <__aeabi_uldivmod>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	460b      	mov	r3, r1
 8005d42:	4611      	mov	r1, r2
 8005d44:	4b38      	ldr	r3, [pc, #224]	; (8005e28 <UART_SetConfig+0x4e4>)
 8005d46:	fba3 2301 	umull	r2, r3, r3, r1
 8005d4a:	095b      	lsrs	r3, r3, #5
 8005d4c:	2264      	movs	r2, #100	; 0x64
 8005d4e:	fb02 f303 	mul.w	r3, r2, r3
 8005d52:	1acb      	subs	r3, r1, r3
 8005d54:	011b      	lsls	r3, r3, #4
 8005d56:	3332      	adds	r3, #50	; 0x32
 8005d58:	4a33      	ldr	r2, [pc, #204]	; (8005e28 <UART_SetConfig+0x4e4>)
 8005d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d5e:	095b      	lsrs	r3, r3, #5
 8005d60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d64:	441c      	add	r4, r3
 8005d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	673b      	str	r3, [r7, #112]	; 0x70
 8005d6e:	677a      	str	r2, [r7, #116]	; 0x74
 8005d70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005d74:	4642      	mov	r2, r8
 8005d76:	464b      	mov	r3, r9
 8005d78:	1891      	adds	r1, r2, r2
 8005d7a:	60b9      	str	r1, [r7, #8]
 8005d7c:	415b      	adcs	r3, r3
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d84:	4641      	mov	r1, r8
 8005d86:	1851      	adds	r1, r2, r1
 8005d88:	6039      	str	r1, [r7, #0]
 8005d8a:	4649      	mov	r1, r9
 8005d8c:	414b      	adcs	r3, r1
 8005d8e:	607b      	str	r3, [r7, #4]
 8005d90:	f04f 0200 	mov.w	r2, #0
 8005d94:	f04f 0300 	mov.w	r3, #0
 8005d98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d9c:	4659      	mov	r1, fp
 8005d9e:	00cb      	lsls	r3, r1, #3
 8005da0:	4651      	mov	r1, sl
 8005da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005da6:	4651      	mov	r1, sl
 8005da8:	00ca      	lsls	r2, r1, #3
 8005daa:	4610      	mov	r0, r2
 8005dac:	4619      	mov	r1, r3
 8005dae:	4603      	mov	r3, r0
 8005db0:	4642      	mov	r2, r8
 8005db2:	189b      	adds	r3, r3, r2
 8005db4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005db6:	464b      	mov	r3, r9
 8005db8:	460a      	mov	r2, r1
 8005dba:	eb42 0303 	adc.w	r3, r2, r3
 8005dbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	663b      	str	r3, [r7, #96]	; 0x60
 8005dca:	667a      	str	r2, [r7, #100]	; 0x64
 8005dcc:	f04f 0200 	mov.w	r2, #0
 8005dd0:	f04f 0300 	mov.w	r3, #0
 8005dd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005dd8:	4649      	mov	r1, r9
 8005dda:	008b      	lsls	r3, r1, #2
 8005ddc:	4641      	mov	r1, r8
 8005dde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005de2:	4641      	mov	r1, r8
 8005de4:	008a      	lsls	r2, r1, #2
 8005de6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005dea:	f7fa fe99 	bl	8000b20 <__aeabi_uldivmod>
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	4b0d      	ldr	r3, [pc, #52]	; (8005e28 <UART_SetConfig+0x4e4>)
 8005df4:	fba3 1302 	umull	r1, r3, r3, r2
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	2164      	movs	r1, #100	; 0x64
 8005dfc:	fb01 f303 	mul.w	r3, r1, r3
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	011b      	lsls	r3, r3, #4
 8005e04:	3332      	adds	r3, #50	; 0x32
 8005e06:	4a08      	ldr	r2, [pc, #32]	; (8005e28 <UART_SetConfig+0x4e4>)
 8005e08:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0c:	095b      	lsrs	r3, r3, #5
 8005e0e:	f003 020f 	and.w	r2, r3, #15
 8005e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4422      	add	r2, r4
 8005e1a:	609a      	str	r2, [r3, #8]
}
 8005e1c:	bf00      	nop
 8005e1e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005e22:	46bd      	mov	sp, r7
 8005e24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e28:	51eb851f 	.word	0x51eb851f

08005e2c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f103 0208 	add.w	r2, r3, #8
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f04f 32ff 	mov.w	r2, #4294967295
 8005e44:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f103 0208 	add.w	r2, r3, #8
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f103 0208 	add.w	r2, r3, #8
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005e86:	b480      	push	{r7}
 8005e88:	b085      	sub	sp, #20
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9c:	d103      	bne.n	8005ea6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	e00c      	b.n	8005ec0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	3308      	adds	r3, #8
 8005eaa:	60fb      	str	r3, [r7, #12]
 8005eac:	e002      	b.n	8005eb4 <vListInsert+0x2e>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d2f6      	bcs.n	8005eae <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	601a      	str	r2, [r3, #0]
}
 8005eec:	bf00      	nop
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6892      	ldr	r2, [r2, #8]
 8005f0e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6852      	ldr	r2, [r2, #4]
 8005f18:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d103      	bne.n	8005f2c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	1e5a      	subs	r2, r3, #1
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8005f56:	2301      	movs	r3, #1
 8005f58:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10a      	bne.n	8005f7a <xQueueGenericReset+0x2e>
        __asm volatile
 8005f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	60fb      	str	r3, [r7, #12]
    }
 8005f76:	bf00      	nop
 8005f78:	e7fe      	b.n	8005f78 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d05d      	beq.n	800603c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d059      	beq.n	800603c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f90:	2100      	movs	r1, #0
 8005f92:	fba3 2302 	umull	r2, r3, r3, r2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d000      	beq.n	8005f9c <xQueueGenericReset+0x50>
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d14c      	bne.n	800603c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8005fa2:	f001 fe71 	bl	8007c88 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fae:	6939      	ldr	r1, [r7, #16]
 8005fb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005fb2:	fb01 f303 	mul.w	r3, r1, r3
 8005fb6:	441a      	add	r2, r3
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	6939      	ldr	r1, [r7, #16]
 8005fd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005fd8:	fb01 f303 	mul.w	r3, r1, r3
 8005fdc:	441a      	add	r2, r3
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	22ff      	movs	r2, #255	; 0xff
 8005fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	22ff      	movs	r2, #255	; 0xff
 8005fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d114      	bne.n	8006022 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d01a      	beq.n	8006036 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	3310      	adds	r3, #16
 8006004:	4618      	mov	r0, r3
 8006006:	f000 ffdb 	bl	8006fc0 <xTaskRemoveFromEventList>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d012      	beq.n	8006036 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006010:	4b15      	ldr	r3, [pc, #84]	; (8006068 <xQueueGenericReset+0x11c>)
 8006012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	e009      	b.n	8006036 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	3310      	adds	r3, #16
 8006026:	4618      	mov	r0, r3
 8006028:	f7ff ff00 	bl	8005e2c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	3324      	adds	r3, #36	; 0x24
 8006030:	4618      	mov	r0, r3
 8006032:	f7ff fefb 	bl	8005e2c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8006036:	f001 fe57 	bl	8007ce8 <vPortExitCritical>
 800603a:	e001      	b.n	8006040 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 800603c:	2300      	movs	r3, #0
 800603e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10a      	bne.n	800605c <xQueueGenericReset+0x110>
        __asm volatile
 8006046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604a:	f383 8811 	msr	BASEPRI, r3
 800604e:	f3bf 8f6f 	isb	sy
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	60bb      	str	r3, [r7, #8]
    }
 8006058:	bf00      	nop
 800605a:	e7fe      	b.n	800605a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800605c:	697b      	ldr	r3, [r7, #20]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3718      	adds	r7, #24
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	e000ed04 	.word	0xe000ed04

0800606c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800606c:	b580      	push	{r7, lr}
 800606e:	b08a      	sub	sp, #40	; 0x28
 8006070:	af02      	add	r7, sp, #8
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	4613      	mov	r3, r2
 8006078:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800607a:	2300      	movs	r3, #0
 800607c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d02e      	beq.n	80060e2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8006084:	2100      	movs	r1, #0
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	fba3 2302 	umull	r2, r3, r3, r2
 800608e:	2b00      	cmp	r3, #0
 8006090:	d000      	beq.n	8006094 <xQueueGenericCreate+0x28>
 8006092:	2101      	movs	r1, #1
 8006094:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8006096:	2b00      	cmp	r3, #0
 8006098:	d123      	bne.n	80060e2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80060a2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80060a6:	d81c      	bhi.n	80060e2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	fb02 f303 	mul.w	r3, r2, r3
 80060b0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	3350      	adds	r3, #80	; 0x50
 80060b6:	4618      	mov	r0, r3
 80060b8:	f001 ff10 	bl	8007edc <pvPortMalloc>
 80060bc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d01c      	beq.n	80060fe <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	3350      	adds	r3, #80	; 0x50
 80060cc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060ce:	79fa      	ldrb	r2, [r7, #7]
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	4613      	mov	r3, r2
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	68b9      	ldr	r1, [r7, #8]
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 f814 	bl	8006108 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80060e0:	e00d      	b.n	80060fe <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10a      	bne.n	80060fe <xQueueGenericCreate+0x92>
        __asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	613b      	str	r3, [r7, #16]
    }
 80060fa:	bf00      	nop
 80060fc:	e7fe      	b.n	80060fc <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80060fe:	69fb      	ldr	r3, [r7, #28]
    }
 8006100:	4618      	mov	r0, r3
 8006102:	3720      	adds	r7, #32
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
 8006114:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d103      	bne.n	8006124 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	e002      	b.n	800612a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006136:	2101      	movs	r1, #1
 8006138:	69b8      	ldr	r0, [r7, #24]
 800613a:	f7ff ff07 	bl	8005f4c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	78fa      	ldrb	r2, [r7, #3]
 8006142:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8006146:	78fb      	ldrb	r3, [r7, #3]
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	68f9      	ldr	r1, [r7, #12]
 800614c:	2073      	movs	r0, #115	; 0x73
 800614e:	f002 fec7 	bl	8008ee0 <SEGGER_SYSVIEW_RecordU32x3>
}
 8006152:	bf00      	nop
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
	...

0800615c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800615c:	b590      	push	{r4, r7, lr}
 800615e:	b08f      	sub	sp, #60	; 0x3c
 8006160:	af02      	add	r7, sp, #8
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006168:	2300      	movs	r3, #0
 800616a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10a      	bne.n	800618c <xQueueReceive+0x30>
        __asm volatile
 8006176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	623b      	str	r3, [r7, #32]
    }
 8006188:	bf00      	nop
 800618a:	e7fe      	b.n	800618a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d103      	bne.n	800619a <xQueueReceive+0x3e>
 8006192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <xQueueReceive+0x42>
 800619a:	2301      	movs	r3, #1
 800619c:	e000      	b.n	80061a0 <xQueueReceive+0x44>
 800619e:	2300      	movs	r3, #0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10a      	bne.n	80061ba <xQueueReceive+0x5e>
        __asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	61fb      	str	r3, [r7, #28]
    }
 80061b6:	bf00      	nop
 80061b8:	e7fe      	b.n	80061b8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061ba:	f001 f913 	bl	80073e4 <xTaskGetSchedulerState>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d102      	bne.n	80061ca <xQueueReceive+0x6e>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <xQueueReceive+0x72>
 80061ca:	2301      	movs	r3, #1
 80061cc:	e000      	b.n	80061d0 <xQueueReceive+0x74>
 80061ce:	2300      	movs	r3, #0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10a      	bne.n	80061ea <xQueueReceive+0x8e>
        __asm volatile
 80061d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d8:	f383 8811 	msr	BASEPRI, r3
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	61bb      	str	r3, [r7, #24]
    }
 80061e6:	bf00      	nop
 80061e8:	e7fe      	b.n	80061e8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80061ea:	f001 fd4d 	bl	8007c88 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d02f      	beq.n	800625a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80061fa:	68b9      	ldr	r1, [r7, #8]
 80061fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061fe:	f000 f8bd 	bl	800637c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8006202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006204:	4618      	mov	r0, r3
 8006206:	f003 fb97 	bl	8009938 <SEGGER_SYSVIEW_ShrinkId>
 800620a:	4604      	mov	r4, r0
 800620c:	2000      	movs	r0, #0
 800620e:	f003 fb93 	bl	8009938 <SEGGER_SYSVIEW_ShrinkId>
 8006212:	4602      	mov	r2, r0
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2101      	movs	r1, #1
 8006218:	9100      	str	r1, [sp, #0]
 800621a:	4621      	mov	r1, r4
 800621c:	205c      	movs	r0, #92	; 0x5c
 800621e:	f002 fed5 	bl	8008fcc <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	1e5a      	subs	r2, r3, #1
 8006226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006228:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00f      	beq.n	8006252 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006234:	3310      	adds	r3, #16
 8006236:	4618      	mov	r0, r3
 8006238:	f000 fec2 	bl	8006fc0 <xTaskRemoveFromEventList>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d007      	beq.n	8006252 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006242:	4b4d      	ldr	r3, [pc, #308]	; (8006378 <xQueueReceive+0x21c>)
 8006244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006252:	f001 fd49 	bl	8007ce8 <vPortExitCritical>
                return pdPASS;
 8006256:	2301      	movs	r3, #1
 8006258:	e08a      	b.n	8006370 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d113      	bne.n	8006288 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006260:	f001 fd42 	bl	8007ce8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8006264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006266:	4618      	mov	r0, r3
 8006268:	f003 fb66 	bl	8009938 <SEGGER_SYSVIEW_ShrinkId>
 800626c:	4604      	mov	r4, r0
 800626e:	2000      	movs	r0, #0
 8006270:	f003 fb62 	bl	8009938 <SEGGER_SYSVIEW_ShrinkId>
 8006274:	4602      	mov	r2, r0
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2101      	movs	r1, #1
 800627a:	9100      	str	r1, [sp, #0]
 800627c:	4621      	mov	r1, r4
 800627e:	205c      	movs	r0, #92	; 0x5c
 8006280:	f002 fea4 	bl	8008fcc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8006284:	2300      	movs	r3, #0
 8006286:	e073      	b.n	8006370 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628a:	2b00      	cmp	r3, #0
 800628c:	d106      	bne.n	800629c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800628e:	f107 0310 	add.w	r3, r7, #16
 8006292:	4618      	mov	r0, r3
 8006294:	f000 ff6c 	bl	8007170 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006298:	2301      	movs	r3, #1
 800629a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800629c:	f001 fd24 	bl	8007ce8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80062a0:	f000 fb6e 	bl	8006980 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80062a4:	f001 fcf0 	bl	8007c88 <vPortEnterCritical>
 80062a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062ae:	b25b      	sxtb	r3, r3
 80062b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b4:	d103      	bne.n	80062be <xQueueReceive+0x162>
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062c4:	b25b      	sxtb	r3, r3
 80062c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ca:	d103      	bne.n	80062d4 <xQueueReceive+0x178>
 80062cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062d4:	f001 fd08 	bl	8007ce8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062d8:	1d3a      	adds	r2, r7, #4
 80062da:	f107 0310 	add.w	r3, r7, #16
 80062de:	4611      	mov	r1, r2
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 ff5b 	bl	800719c <xTaskCheckForTimeOut>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d124      	bne.n	8006336 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ee:	f000 f8bd 	bl	800646c <prvIsQueueEmpty>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d018      	beq.n	800632a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fa:	3324      	adds	r3, #36	; 0x24
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	4611      	mov	r1, r2
 8006300:	4618      	mov	r0, r3
 8006302:	f000 fdf1 	bl	8006ee8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006306:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006308:	f000 f85e 	bl	80063c8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800630c:	f000 fb46 	bl	800699c <xTaskResumeAll>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	f47f af69 	bne.w	80061ea <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8006318:	4b17      	ldr	r3, [pc, #92]	; (8006378 <xQueueReceive+0x21c>)
 800631a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	e75f      	b.n	80061ea <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800632a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800632c:	f000 f84c 	bl	80063c8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006330:	f000 fb34 	bl	800699c <xTaskResumeAll>
 8006334:	e759      	b.n	80061ea <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8006336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006338:	f000 f846 	bl	80063c8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800633c:	f000 fb2e 	bl	800699c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006342:	f000 f893 	bl	800646c <prvIsQueueEmpty>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	f43f af4e 	beq.w	80061ea <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800634e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006350:	4618      	mov	r0, r3
 8006352:	f003 faf1 	bl	8009938 <SEGGER_SYSVIEW_ShrinkId>
 8006356:	4604      	mov	r4, r0
 8006358:	2000      	movs	r0, #0
 800635a:	f003 faed 	bl	8009938 <SEGGER_SYSVIEW_ShrinkId>
 800635e:	4602      	mov	r2, r0
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2101      	movs	r1, #1
 8006364:	9100      	str	r1, [sp, #0]
 8006366:	4621      	mov	r1, r4
 8006368:	205c      	movs	r0, #92	; 0x5c
 800636a:	f002 fe2f 	bl	8008fcc <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800636e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006370:	4618      	mov	r0, r3
 8006372:	3734      	adds	r7, #52	; 0x34
 8006374:	46bd      	mov	sp, r7
 8006376:	bd90      	pop	{r4, r7, pc}
 8006378:	e000ed04 	.word	0xe000ed04

0800637c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	2b00      	cmp	r3, #0
 800638c:	d018      	beq.n	80063c0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	441a      	add	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68da      	ldr	r2, [r3, #12]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d303      	bcc.n	80063b0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68d9      	ldr	r1, [r3, #12]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b8:	461a      	mov	r2, r3
 80063ba:	6838      	ldr	r0, [r7, #0]
 80063bc:	f003 fc40 	bl	8009c40 <memcpy>
    }
}
 80063c0:	bf00      	nop
 80063c2:	3708      	adds	r7, #8
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80063d0:	f001 fc5a 	bl	8007c88 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063da:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80063dc:	e011      	b.n	8006402 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d012      	beq.n	800640c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	3324      	adds	r3, #36	; 0x24
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 fde8 	bl	8006fc0 <xTaskRemoveFromEventList>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80063f6:	f000 ff37 	bl	8007268 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
 80063fc:	3b01      	subs	r3, #1
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006406:	2b00      	cmp	r3, #0
 8006408:	dce9      	bgt.n	80063de <prvUnlockQueue+0x16>
 800640a:	e000      	b.n	800640e <prvUnlockQueue+0x46>
                    break;
 800640c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	22ff      	movs	r2, #255	; 0xff
 8006412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8006416:	f001 fc67 	bl	8007ce8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800641a:	f001 fc35 	bl	8007c88 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006424:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006426:	e011      	b.n	800644c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d012      	beq.n	8006456 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	3310      	adds	r3, #16
 8006434:	4618      	mov	r0, r3
 8006436:	f000 fdc3 	bl	8006fc0 <xTaskRemoveFromEventList>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8006440:	f000 ff12 	bl	8007268 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006444:	7bbb      	ldrb	r3, [r7, #14]
 8006446:	3b01      	subs	r3, #1
 8006448:	b2db      	uxtb	r3, r3
 800644a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800644c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006450:	2b00      	cmp	r3, #0
 8006452:	dce9      	bgt.n	8006428 <prvUnlockQueue+0x60>
 8006454:	e000      	b.n	8006458 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8006456:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	22ff      	movs	r2, #255	; 0xff
 800645c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8006460:	f001 fc42 	bl	8007ce8 <vPortExitCritical>
}
 8006464:	bf00      	nop
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006474:	f001 fc08 	bl	8007c88 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647c:	2b00      	cmp	r3, #0
 800647e:	d102      	bne.n	8006486 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8006480:	2301      	movs	r3, #1
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	e001      	b.n	800648a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006486:	2300      	movs	r3, #0
 8006488:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800648a:	f001 fc2d 	bl	8007ce8 <vPortExitCritical>

    return xReturn;
 800648e:	68fb      	ldr	r3, [r7, #12]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80064a2:	2300      	movs	r3, #0
 80064a4:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10a      	bne.n	80064c2 <vQueueAddToRegistry+0x2a>
        __asm volatile
 80064ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b0:	f383 8811 	msr	BASEPRI, r3
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	60fb      	str	r3, [r7, #12]
    }
 80064be:	bf00      	nop
 80064c0:	e7fe      	b.n	80064c0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d024      	beq.n	8006512 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064c8:	2300      	movs	r3, #0
 80064ca:	617b      	str	r3, [r7, #20]
 80064cc:	e01e      	b.n	800650c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80064ce:	4a1c      	ldr	r2, [pc, #112]	; (8006540 <vQueueAddToRegistry+0xa8>)
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	00db      	lsls	r3, r3, #3
 80064d4:	4413      	add	r3, r2
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d105      	bne.n	80064ea <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	00db      	lsls	r3, r3, #3
 80064e2:	4a17      	ldr	r2, [pc, #92]	; (8006540 <vQueueAddToRegistry+0xa8>)
 80064e4:	4413      	add	r3, r2
 80064e6:	613b      	str	r3, [r7, #16]
                    break;
 80064e8:	e013      	b.n	8006512 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10a      	bne.n	8006506 <vQueueAddToRegistry+0x6e>
 80064f0:	4a13      	ldr	r2, [pc, #76]	; (8006540 <vQueueAddToRegistry+0xa8>)
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d104      	bne.n	8006506 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	4a0f      	ldr	r2, [pc, #60]	; (8006540 <vQueueAddToRegistry+0xa8>)
 8006502:	4413      	add	r3, r2
 8006504:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	3301      	adds	r3, #1
 800650a:	617b      	str	r3, [r7, #20]
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	2b07      	cmp	r3, #7
 8006510:	d9dd      	bls.n	80064ce <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00f      	beq.n	8006538 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4618      	mov	r0, r3
 8006528:	f003 fa06 	bl	8009938 <SEGGER_SYSVIEW_ShrinkId>
 800652c:	4601      	mov	r1, r0
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	461a      	mov	r2, r3
 8006532:	2071      	movs	r0, #113	; 0x71
 8006534:	f002 fc7a 	bl	8008e2c <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8006538:	bf00      	nop
 800653a:	3718      	adds	r7, #24
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	2000057c 	.word	0x2000057c

08006544 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006554:	f001 fb98 	bl	8007c88 <vPortEnterCritical>
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800655e:	b25b      	sxtb	r3, r3
 8006560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006564:	d103      	bne.n	800656e <vQueueWaitForMessageRestricted+0x2a>
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006574:	b25b      	sxtb	r3, r3
 8006576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657a:	d103      	bne.n	8006584 <vQueueWaitForMessageRestricted+0x40>
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006584:	f001 fbb0 	bl	8007ce8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658c:	2b00      	cmp	r3, #0
 800658e:	d106      	bne.n	800659e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	3324      	adds	r3, #36	; 0x24
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	68b9      	ldr	r1, [r7, #8]
 8006598:	4618      	mov	r0, r3
 800659a:	f000 fcc9 	bl	8006f30 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800659e:	6978      	ldr	r0, [r7, #20]
 80065a0:	f7ff ff12 	bl	80063c8 <prvUnlockQueue>
    }
 80065a4:	bf00      	nop
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08c      	sub	sp, #48	; 0x30
 80065b0:	af04      	add	r7, sp, #16
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	603b      	str	r3, [r7, #0]
 80065b8:	4613      	mov	r3, r2
 80065ba:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80065bc:	88fb      	ldrh	r3, [r7, #6]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4618      	mov	r0, r3
 80065c2:	f001 fc8b 	bl	8007edc <pvPortMalloc>
 80065c6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d013      	beq.n	80065f6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80065ce:	2058      	movs	r0, #88	; 0x58
 80065d0:	f001 fc84 	bl	8007edc <pvPortMalloc>
 80065d4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d008      	beq.n	80065ee <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80065dc:	2258      	movs	r2, #88	; 0x58
 80065de:	2100      	movs	r1, #0
 80065e0:	69f8      	ldr	r0, [r7, #28]
 80065e2:	f003 fb01 	bl	8009be8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	631a      	str	r2, [r3, #48]	; 0x30
 80065ec:	e005      	b.n	80065fa <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80065ee:	6978      	ldr	r0, [r7, #20]
 80065f0:	f001 fd2e 	bl	8008050 <vPortFree>
 80065f4:	e001      	b.n	80065fa <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80065f6:	2300      	movs	r3, #0
 80065f8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d013      	beq.n	8006628 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006600:	88fa      	ldrh	r2, [r7, #6]
 8006602:	2300      	movs	r3, #0
 8006604:	9303      	str	r3, [sp, #12]
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	9302      	str	r3, [sp, #8]
 800660a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660c:	9301      	str	r3, [sp, #4]
 800660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	68b9      	ldr	r1, [r7, #8]
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 f80e 	bl	8006638 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800661c:	69f8      	ldr	r0, [r7, #28]
 800661e:	f000 f899 	bl	8006754 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8006622:	2301      	movs	r3, #1
 8006624:	61bb      	str	r3, [r7, #24]
 8006626:	e002      	b.n	800662e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006628:	f04f 33ff 	mov.w	r3, #4294967295
 800662c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800662e:	69bb      	ldr	r3, [r7, #24]
    }
 8006630:	4618      	mov	r0, r3
 8006632:	3720      	adds	r7, #32
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b088      	sub	sp, #32
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
 8006644:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	461a      	mov	r2, r3
 8006650:	21a5      	movs	r1, #165	; 0xa5
 8006652:	f003 fac9 	bl	8009be8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006660:	3b01      	subs	r3, #1
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	f023 0307 	bic.w	r3, r3, #7
 800666e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <prvInitialiseNewTask+0x58>
        __asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	617b      	str	r3, [r7, #20]
    }
 800668c:	bf00      	nop
 800668e:	e7fe      	b.n	800668e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d01e      	beq.n	80066d4 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006696:	2300      	movs	r3, #0
 8006698:	61fb      	str	r3, [r7, #28]
 800669a:	e012      	b.n	80066c2 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	4413      	add	r3, r2
 80066a2:	7819      	ldrb	r1, [r3, #0]
 80066a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	4413      	add	r3, r2
 80066aa:	3334      	adds	r3, #52	; 0x34
 80066ac:	460a      	mov	r2, r1
 80066ae:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	4413      	add	r3, r2
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d006      	beq.n	80066ca <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	3301      	adds	r3, #1
 80066c0:	61fb      	str	r3, [r7, #28]
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	2b09      	cmp	r3, #9
 80066c6:	d9e9      	bls.n	800669c <prvInitialiseNewTask+0x64>
 80066c8:	e000      	b.n	80066cc <prvInitialiseNewTask+0x94>
            {
                break;
 80066ca:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80066d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d6:	2b04      	cmp	r3, #4
 80066d8:	d90a      	bls.n	80066f0 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80066da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	613b      	str	r3, [r7, #16]
    }
 80066ec:	bf00      	nop
 80066ee:	e7fe      	b.n	80066ee <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80066f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f2:	2b04      	cmp	r3, #4
 80066f4:	d901      	bls.n	80066fa <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80066f6:	2304      	movs	r3, #4
 80066f8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80066fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066fe:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8006700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006704:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006708:	3304      	adds	r3, #4
 800670a:	4618      	mov	r0, r3
 800670c:	f7ff fbae 	bl	8005e6c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006712:	3318      	adds	r3, #24
 8006714:	4618      	mov	r0, r3
 8006716:	f7ff fba9 	bl	8005e6c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800671a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800671e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006722:	f1c3 0205 	rsb	r2, r3, #5
 8006726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006728:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800672e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	68f9      	ldr	r1, [r7, #12]
 8006734:	69b8      	ldr	r0, [r7, #24]
 8006736:	f001 f977 	bl	8007a28 <pxPortInitialiseStack>
 800673a:	4602      	mov	r2, r0
 800673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8006740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006742:	2b00      	cmp	r3, #0
 8006744:	d002      	beq.n	800674c <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800674a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800674c:	bf00      	nop
 800674e:	3720      	adds	r7, #32
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006754:	b5b0      	push	{r4, r5, r7, lr}
 8006756:	b086      	sub	sp, #24
 8006758:	af02      	add	r7, sp, #8
 800675a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800675c:	f001 fa94 	bl	8007c88 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8006760:	4b4f      	ldr	r3, [pc, #316]	; (80068a0 <prvAddNewTaskToReadyList+0x14c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3301      	adds	r3, #1
 8006766:	4a4e      	ldr	r2, [pc, #312]	; (80068a0 <prvAddNewTaskToReadyList+0x14c>)
 8006768:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800676a:	4b4e      	ldr	r3, [pc, #312]	; (80068a4 <prvAddNewTaskToReadyList+0x150>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d109      	bne.n	8006786 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8006772:	4a4c      	ldr	r2, [pc, #304]	; (80068a4 <prvAddNewTaskToReadyList+0x150>)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006778:	4b49      	ldr	r3, [pc, #292]	; (80068a0 <prvAddNewTaskToReadyList+0x14c>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d110      	bne.n	80067a2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006780:	f000 fd96 	bl	80072b0 <prvInitialiseTaskLists>
 8006784:	e00d      	b.n	80067a2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8006786:	4b48      	ldr	r3, [pc, #288]	; (80068a8 <prvAddNewTaskToReadyList+0x154>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d109      	bne.n	80067a2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800678e:	4b45      	ldr	r3, [pc, #276]	; (80068a4 <prvAddNewTaskToReadyList+0x150>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006798:	429a      	cmp	r2, r3
 800679a:	d802      	bhi.n	80067a2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800679c:	4a41      	ldr	r2, [pc, #260]	; (80068a4 <prvAddNewTaskToReadyList+0x150>)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80067a2:	4b42      	ldr	r3, [pc, #264]	; (80068ac <prvAddNewTaskToReadyList+0x158>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3301      	adds	r3, #1
 80067a8:	4a40      	ldr	r2, [pc, #256]	; (80068ac <prvAddNewTaskToReadyList+0x158>)
 80067aa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80067ac:	4b3f      	ldr	r3, [pc, #252]	; (80068ac <prvAddNewTaskToReadyList+0x158>)
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d016      	beq.n	80067e8 <prvAddNewTaskToReadyList+0x94>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4618      	mov	r0, r3
 80067be:	f002 fff5 	bl	80097ac <SEGGER_SYSVIEW_OnTaskCreate>
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d2:	461d      	mov	r5, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	461c      	mov	r4, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067de:	1ae3      	subs	r3, r4, r3
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	462b      	mov	r3, r5
 80067e4:	f001 fdf6 	bl	80083d4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f003 f862 	bl	80098b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f4:	2201      	movs	r2, #1
 80067f6:	409a      	lsls	r2, r3
 80067f8:	4b2d      	ldr	r3, [pc, #180]	; (80068b0 <prvAddNewTaskToReadyList+0x15c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	4a2c      	ldr	r2, [pc, #176]	; (80068b0 <prvAddNewTaskToReadyList+0x15c>)
 8006800:	6013      	str	r3, [r2, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006806:	492b      	ldr	r1, [pc, #172]	; (80068b4 <prvAddNewTaskToReadyList+0x160>)
 8006808:	4613      	mov	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	440b      	add	r3, r1
 8006812:	3304      	adds	r3, #4
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	60fb      	str	r3, [r7, #12]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	609a      	str	r2, [r3, #8]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	689a      	ldr	r2, [r3, #8]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	60da      	str	r2, [r3, #12]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	3204      	adds	r2, #4
 800682e:	605a      	str	r2, [r3, #4]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	1d1a      	adds	r2, r3, #4
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	609a      	str	r2, [r3, #8]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800683c:	4613      	mov	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4a1b      	ldr	r2, [pc, #108]	; (80068b4 <prvAddNewTaskToReadyList+0x160>)
 8006846:	441a      	add	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	615a      	str	r2, [r3, #20]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006850:	4918      	ldr	r1, [pc, #96]	; (80068b4 <prvAddNewTaskToReadyList+0x160>)
 8006852:	4613      	mov	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4413      	add	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	440b      	add	r3, r1
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	1c59      	adds	r1, r3, #1
 8006860:	4814      	ldr	r0, [pc, #80]	; (80068b4 <prvAddNewTaskToReadyList+0x160>)
 8006862:	4613      	mov	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4403      	add	r3, r0
 800686c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800686e:	f001 fa3b 	bl	8007ce8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8006872:	4b0d      	ldr	r3, [pc, #52]	; (80068a8 <prvAddNewTaskToReadyList+0x154>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00e      	beq.n	8006898 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800687a:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <prvAddNewTaskToReadyList+0x150>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006884:	429a      	cmp	r2, r3
 8006886:	d207      	bcs.n	8006898 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8006888:	4b0b      	ldr	r3, [pc, #44]	; (80068b8 <prvAddNewTaskToReadyList+0x164>)
 800688a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006898:	bf00      	nop
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bdb0      	pop	{r4, r5, r7, pc}
 80068a0:	20000694 	.word	0x20000694
 80068a4:	200005bc 	.word	0x200005bc
 80068a8:	200006a0 	.word	0x200006a0
 80068ac:	200006b0 	.word	0x200006b0
 80068b0:	2000069c 	.word	0x2000069c
 80068b4:	200005c0 	.word	0x200005c0
 80068b8:	e000ed04 	.word	0xe000ed04

080068bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80068c2:	4b27      	ldr	r3, [pc, #156]	; (8006960 <vTaskStartScheduler+0xa4>)
 80068c4:	9301      	str	r3, [sp, #4]
 80068c6:	2300      	movs	r3, #0
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	2300      	movs	r3, #0
 80068cc:	2282      	movs	r2, #130	; 0x82
 80068ce:	4925      	ldr	r1, [pc, #148]	; (8006964 <vTaskStartScheduler+0xa8>)
 80068d0:	4825      	ldr	r0, [pc, #148]	; (8006968 <vTaskStartScheduler+0xac>)
 80068d2:	f7ff fe6b 	bl	80065ac <xTaskCreate>
 80068d6:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d102      	bne.n	80068e4 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80068de:	f000 fe1f 	bl	8007520 <xTimerCreateTimerTask>
 80068e2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d124      	bne.n	8006934 <vTaskStartScheduler+0x78>
        __asm volatile
 80068ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	60bb      	str	r3, [r7, #8]
    }
 80068fc:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80068fe:	4b1b      	ldr	r3, [pc, #108]	; (800696c <vTaskStartScheduler+0xb0>)
 8006900:	f04f 32ff 	mov.w	r2, #4294967295
 8006904:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006906:	4b1a      	ldr	r3, [pc, #104]	; (8006970 <vTaskStartScheduler+0xb4>)
 8006908:	2201      	movs	r2, #1
 800690a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800690c:	4b19      	ldr	r3, [pc, #100]	; (8006974 <vTaskStartScheduler+0xb8>)
 800690e:	2200      	movs	r2, #0
 8006910:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8006912:	4b19      	ldr	r3, [pc, #100]	; (8006978 <vTaskStartScheduler+0xbc>)
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	4b12      	ldr	r3, [pc, #72]	; (8006960 <vTaskStartScheduler+0xa4>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	429a      	cmp	r2, r3
 800691c:	d102      	bne.n	8006924 <vTaskStartScheduler+0x68>
 800691e:	f002 ff29 	bl	8009774 <SEGGER_SYSVIEW_OnIdle>
 8006922:	e004      	b.n	800692e <vTaskStartScheduler+0x72>
 8006924:	4b14      	ldr	r3, [pc, #80]	; (8006978 <vTaskStartScheduler+0xbc>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4618      	mov	r0, r3
 800692a:	f002 ff81 	bl	8009830 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800692e:	f001 f909 	bl	8007b44 <xPortStartScheduler>
 8006932:	e00e      	b.n	8006952 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693a:	d10a      	bne.n	8006952 <vTaskStartScheduler+0x96>
        __asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	607b      	str	r3, [r7, #4]
    }
 800694e:	bf00      	nop
 8006950:	e7fe      	b.n	8006950 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006952:	4b0a      	ldr	r3, [pc, #40]	; (800697c <vTaskStartScheduler+0xc0>)
 8006954:	681b      	ldr	r3, [r3, #0]
}
 8006956:	bf00      	nop
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	200006b8 	.word	0x200006b8
 8006964:	08009d94 	.word	0x08009d94
 8006968:	08007281 	.word	0x08007281
 800696c:	200006b4 	.word	0x200006b4
 8006970:	200006a0 	.word	0x200006a0
 8006974:	20000698 	.word	0x20000698
 8006978:	200005bc 	.word	0x200005bc
 800697c:	2000000c 	.word	0x2000000c

08006980 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006984:	4b04      	ldr	r3, [pc, #16]	; (8006998 <vTaskSuspendAll+0x18>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3301      	adds	r3, #1
 800698a:	4a03      	ldr	r2, [pc, #12]	; (8006998 <vTaskSuspendAll+0x18>)
 800698c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800698e:	bf00      	nop
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	200006bc 	.word	0x200006bc

0800699c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80069a6:	2300      	movs	r3, #0
 80069a8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80069aa:	4b73      	ldr	r3, [pc, #460]	; (8006b78 <xTaskResumeAll+0x1dc>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10a      	bne.n	80069c8 <xTaskResumeAll+0x2c>
        __asm volatile
 80069b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	607b      	str	r3, [r7, #4]
    }
 80069c4:	bf00      	nop
 80069c6:	e7fe      	b.n	80069c6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80069c8:	f001 f95e 	bl	8007c88 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80069cc:	4b6a      	ldr	r3, [pc, #424]	; (8006b78 <xTaskResumeAll+0x1dc>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3b01      	subs	r3, #1
 80069d2:	4a69      	ldr	r2, [pc, #420]	; (8006b78 <xTaskResumeAll+0x1dc>)
 80069d4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069d6:	4b68      	ldr	r3, [pc, #416]	; (8006b78 <xTaskResumeAll+0x1dc>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f040 80c4 	bne.w	8006b68 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069e0:	4b66      	ldr	r3, [pc, #408]	; (8006b7c <xTaskResumeAll+0x1e0>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 80bf 	beq.w	8006b68 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069ea:	e08e      	b.n	8006b0a <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069ec:	4b64      	ldr	r3, [pc, #400]	; (8006b80 <xTaskResumeAll+0x1e4>)
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f8:	613b      	str	r3, [r7, #16]
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	69fa      	ldr	r2, [r7, #28]
 8006a00:	6a12      	ldr	r2, [r2, #32]
 8006a02:	609a      	str	r2, [r3, #8]
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	69fa      	ldr	r2, [r7, #28]
 8006a0a:	69d2      	ldr	r2, [r2, #28]
 8006a0c:	605a      	str	r2, [r3, #4]
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	3318      	adds	r3, #24
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d103      	bne.n	8006a22 <xTaskResumeAll+0x86>
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	6a1a      	ldr	r2, [r3, #32]
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	605a      	str	r2, [r3, #4]
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	2200      	movs	r2, #0
 8006a26:	629a      	str	r2, [r3, #40]	; 0x28
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	1e5a      	subs	r2, r3, #1
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	60fb      	str	r3, [r7, #12]
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	69fa      	ldr	r2, [r7, #28]
 8006a3e:	68d2      	ldr	r2, [r2, #12]
 8006a40:	609a      	str	r2, [r3, #8]
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	69fa      	ldr	r2, [r7, #28]
 8006a48:	6892      	ldr	r2, [r2, #8]
 8006a4a:	605a      	str	r2, [r3, #4]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	3304      	adds	r3, #4
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d103      	bne.n	8006a60 <xTaskResumeAll+0xc4>
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	68da      	ldr	r2, [r3, #12]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	605a      	str	r2, [r3, #4]
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	2200      	movs	r2, #0
 8006a64:	615a      	str	r2, [r3, #20]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	1e5a      	subs	r2, r3, #1
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f002 ff1e 	bl	80098b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	409a      	lsls	r2, r3
 8006a80:	4b40      	ldr	r3, [pc, #256]	; (8006b84 <xTaskResumeAll+0x1e8>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	4a3f      	ldr	r2, [pc, #252]	; (8006b84 <xTaskResumeAll+0x1e8>)
 8006a88:	6013      	str	r3, [r2, #0]
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8e:	493e      	ldr	r1, [pc, #248]	; (8006b88 <xTaskResumeAll+0x1ec>)
 8006a90:	4613      	mov	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	440b      	add	r3, r1
 8006a9a:	3304      	adds	r3, #4
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	60bb      	str	r3, [r7, #8]
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	609a      	str	r2, [r3, #8]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	689a      	ldr	r2, [r3, #8]
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	60da      	str	r2, [r3, #12]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	69fa      	ldr	r2, [r7, #28]
 8006ab4:	3204      	adds	r2, #4
 8006ab6:	605a      	str	r2, [r3, #4]
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	1d1a      	adds	r2, r3, #4
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	609a      	str	r2, [r3, #8]
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4a2e      	ldr	r2, [pc, #184]	; (8006b88 <xTaskResumeAll+0x1ec>)
 8006ace:	441a      	add	r2, r3
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	615a      	str	r2, [r3, #20]
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad8:	492b      	ldr	r1, [pc, #172]	; (8006b88 <xTaskResumeAll+0x1ec>)
 8006ada:	4613      	mov	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	440b      	add	r3, r1
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	1c59      	adds	r1, r3, #1
 8006ae8:	4827      	ldr	r0, [pc, #156]	; (8006b88 <xTaskResumeAll+0x1ec>)
 8006aea:	4613      	mov	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4403      	add	r3, r0
 8006af4:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006afa:	4b24      	ldr	r3, [pc, #144]	; (8006b8c <xTaskResumeAll+0x1f0>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d302      	bcc.n	8006b0a <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8006b04:	4b22      	ldr	r3, [pc, #136]	; (8006b90 <xTaskResumeAll+0x1f4>)
 8006b06:	2201      	movs	r2, #1
 8006b08:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b0a:	4b1d      	ldr	r3, [pc, #116]	; (8006b80 <xTaskResumeAll+0x1e4>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f47f af6c 	bne.w	80069ec <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d001      	beq.n	8006b1e <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006b1a:	f000 fc47 	bl	80073ac <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006b1e:	4b1d      	ldr	r3, [pc, #116]	; (8006b94 <xTaskResumeAll+0x1f8>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d010      	beq.n	8006b4c <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006b2a:	f000 f859 	bl	8006be0 <xTaskIncrementTick>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d002      	beq.n	8006b3a <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8006b34:	4b16      	ldr	r3, [pc, #88]	; (8006b90 <xTaskResumeAll+0x1f4>)
 8006b36:	2201      	movs	r2, #1
 8006b38:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1f1      	bne.n	8006b2a <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8006b46:	4b13      	ldr	r3, [pc, #76]	; (8006b94 <xTaskResumeAll+0x1f8>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8006b4c:	4b10      	ldr	r3, [pc, #64]	; (8006b90 <xTaskResumeAll+0x1f4>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d009      	beq.n	8006b68 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8006b54:	2301      	movs	r3, #1
 8006b56:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8006b58:	4b0f      	ldr	r3, [pc, #60]	; (8006b98 <xTaskResumeAll+0x1fc>)
 8006b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006b68:	f001 f8be 	bl	8007ce8 <vPortExitCritical>

    return xAlreadyYielded;
 8006b6c:	69bb      	ldr	r3, [r7, #24]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3720      	adds	r7, #32
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	200006bc 	.word	0x200006bc
 8006b7c:	20000694 	.word	0x20000694
 8006b80:	20000654 	.word	0x20000654
 8006b84:	2000069c 	.word	0x2000069c
 8006b88:	200005c0 	.word	0x200005c0
 8006b8c:	200005bc 	.word	0x200005bc
 8006b90:	200006a8 	.word	0x200006a8
 8006b94:	200006a4 	.word	0x200006a4
 8006b98:	e000ed04 	.word	0xe000ed04

08006b9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8006ba2:	4b05      	ldr	r3, [pc, #20]	; (8006bb8 <xTaskGetTickCount+0x1c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006ba8:	687b      	ldr	r3, [r7, #4]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	20000698 	.word	0x20000698

08006bbc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006bc2:	f001 f94b 	bl	8007e5c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8006bca:	4b04      	ldr	r3, [pc, #16]	; (8006bdc <xTaskGetTickCountFromISR+0x20>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006bd0:	683b      	ldr	r3, [r7, #0]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	20000698 	.word	0x20000698

08006be0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b08a      	sub	sp, #40	; 0x28
 8006be4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006be6:	2300      	movs	r3, #0
 8006be8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bea:	4b7f      	ldr	r3, [pc, #508]	; (8006de8 <xTaskIncrementTick+0x208>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f040 80f0 	bne.w	8006dd4 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006bf4:	4b7d      	ldr	r3, [pc, #500]	; (8006dec <xTaskIncrementTick+0x20c>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006bfc:	4a7b      	ldr	r2, [pc, #492]	; (8006dec <xTaskIncrementTick+0x20c>)
 8006bfe:	6a3b      	ldr	r3, [r7, #32]
 8006c00:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d120      	bne.n	8006c4a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8006c08:	4b79      	ldr	r3, [pc, #484]	; (8006df0 <xTaskIncrementTick+0x210>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00a      	beq.n	8006c28 <xTaskIncrementTick+0x48>
        __asm volatile
 8006c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c16:	f383 8811 	msr	BASEPRI, r3
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	607b      	str	r3, [r7, #4]
    }
 8006c24:	bf00      	nop
 8006c26:	e7fe      	b.n	8006c26 <xTaskIncrementTick+0x46>
 8006c28:	4b71      	ldr	r3, [pc, #452]	; (8006df0 <xTaskIncrementTick+0x210>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	61fb      	str	r3, [r7, #28]
 8006c2e:	4b71      	ldr	r3, [pc, #452]	; (8006df4 <xTaskIncrementTick+0x214>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a6f      	ldr	r2, [pc, #444]	; (8006df0 <xTaskIncrementTick+0x210>)
 8006c34:	6013      	str	r3, [r2, #0]
 8006c36:	4a6f      	ldr	r2, [pc, #444]	; (8006df4 <xTaskIncrementTick+0x214>)
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	6013      	str	r3, [r2, #0]
 8006c3c:	4b6e      	ldr	r3, [pc, #440]	; (8006df8 <xTaskIncrementTick+0x218>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3301      	adds	r3, #1
 8006c42:	4a6d      	ldr	r2, [pc, #436]	; (8006df8 <xTaskIncrementTick+0x218>)
 8006c44:	6013      	str	r3, [r2, #0]
 8006c46:	f000 fbb1 	bl	80073ac <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006c4a:	4b6c      	ldr	r3, [pc, #432]	; (8006dfc <xTaskIncrementTick+0x21c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6a3a      	ldr	r2, [r7, #32]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	f0c0 80aa 	bcc.w	8006daa <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c56:	4b66      	ldr	r3, [pc, #408]	; (8006df0 <xTaskIncrementTick+0x210>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d104      	bne.n	8006c6a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c60:	4b66      	ldr	r3, [pc, #408]	; (8006dfc <xTaskIncrementTick+0x21c>)
 8006c62:	f04f 32ff 	mov.w	r2, #4294967295
 8006c66:	601a      	str	r2, [r3, #0]
                    break;
 8006c68:	e09f      	b.n	8006daa <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c6a:	4b61      	ldr	r3, [pc, #388]	; (8006df0 <xTaskIncrementTick+0x210>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8006c7a:	6a3a      	ldr	r2, [r7, #32]
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d203      	bcs.n	8006c8a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006c82:	4a5e      	ldr	r2, [pc, #376]	; (8006dfc <xTaskIncrementTick+0x21c>)
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8006c88:	e08f      	b.n	8006daa <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	613b      	str	r3, [r7, #16]
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	69ba      	ldr	r2, [r7, #24]
 8006c96:	68d2      	ldr	r2, [r2, #12]
 8006c98:	609a      	str	r2, [r3, #8]
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	69ba      	ldr	r2, [r7, #24]
 8006ca0:	6892      	ldr	r2, [r2, #8]
 8006ca2:	605a      	str	r2, [r3, #4]
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	685a      	ldr	r2, [r3, #4]
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	3304      	adds	r3, #4
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d103      	bne.n	8006cb8 <xTaskIncrementTick+0xd8>
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	68da      	ldr	r2, [r3, #12]
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	605a      	str	r2, [r3, #4]
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	615a      	str	r2, [r3, #20]
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	1e5a      	subs	r2, r3, #1
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d01e      	beq.n	8006d0e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd4:	60fb      	str	r3, [r7, #12]
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	6a12      	ldr	r2, [r2, #32]
 8006cde:	609a      	str	r2, [r3, #8]
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	6a1b      	ldr	r3, [r3, #32]
 8006ce4:	69ba      	ldr	r2, [r7, #24]
 8006ce6:	69d2      	ldr	r2, [r2, #28]
 8006ce8:	605a      	str	r2, [r3, #4]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	3318      	adds	r3, #24
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d103      	bne.n	8006cfe <xTaskIncrementTick+0x11e>
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	6a1a      	ldr	r2, [r3, #32]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	605a      	str	r2, [r3, #4]
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	2200      	movs	r2, #0
 8006d02:	629a      	str	r2, [r3, #40]	; 0x28
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	1e5a      	subs	r2, r3, #1
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f002 fdcf 	bl	80098b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	409a      	lsls	r2, r3
 8006d1e:	4b38      	ldr	r3, [pc, #224]	; (8006e00 <xTaskIncrementTick+0x220>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	4a36      	ldr	r2, [pc, #216]	; (8006e00 <xTaskIncrementTick+0x220>)
 8006d26:	6013      	str	r3, [r2, #0]
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2c:	4935      	ldr	r1, [pc, #212]	; (8006e04 <xTaskIncrementTick+0x224>)
 8006d2e:	4613      	mov	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	440b      	add	r3, r1
 8006d38:	3304      	adds	r3, #4
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	60bb      	str	r3, [r7, #8]
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	609a      	str	r2, [r3, #8]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	689a      	ldr	r2, [r3, #8]
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	60da      	str	r2, [r3, #12]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	69ba      	ldr	r2, [r7, #24]
 8006d52:	3204      	adds	r2, #4
 8006d54:	605a      	str	r2, [r3, #4]
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	1d1a      	adds	r2, r3, #4
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	609a      	str	r2, [r3, #8]
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d62:	4613      	mov	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4413      	add	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4a26      	ldr	r2, [pc, #152]	; (8006e04 <xTaskIncrementTick+0x224>)
 8006d6c:	441a      	add	r2, r3
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	615a      	str	r2, [r3, #20]
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d76:	4923      	ldr	r1, [pc, #140]	; (8006e04 <xTaskIncrementTick+0x224>)
 8006d78:	4613      	mov	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4413      	add	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	440b      	add	r3, r1
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	1c59      	adds	r1, r3, #1
 8006d86:	481f      	ldr	r0, [pc, #124]	; (8006e04 <xTaskIncrementTick+0x224>)
 8006d88:	4613      	mov	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4403      	add	r3, r0
 8006d92:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d98:	4b1b      	ldr	r3, [pc, #108]	; (8006e08 <xTaskIncrementTick+0x228>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	f67f af59 	bls.w	8006c56 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8006da4:	2301      	movs	r3, #1
 8006da6:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006da8:	e755      	b.n	8006c56 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006daa:	4b17      	ldr	r3, [pc, #92]	; (8006e08 <xTaskIncrementTick+0x228>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db0:	4914      	ldr	r1, [pc, #80]	; (8006e04 <xTaskIncrementTick+0x224>)
 8006db2:	4613      	mov	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	440b      	add	r3, r1
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d901      	bls.n	8006dc6 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8006dc6:	4b11      	ldr	r3, [pc, #68]	; (8006e0c <xTaskIncrementTick+0x22c>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d007      	beq.n	8006dde <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8006dd2:	e004      	b.n	8006dde <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006dd4:	4b0e      	ldr	r3, [pc, #56]	; (8006e10 <xTaskIncrementTick+0x230>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	4a0d      	ldr	r2, [pc, #52]	; (8006e10 <xTaskIncrementTick+0x230>)
 8006ddc:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3728      	adds	r7, #40	; 0x28
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	200006bc 	.word	0x200006bc
 8006dec:	20000698 	.word	0x20000698
 8006df0:	2000064c 	.word	0x2000064c
 8006df4:	20000650 	.word	0x20000650
 8006df8:	200006ac 	.word	0x200006ac
 8006dfc:	200006b4 	.word	0x200006b4
 8006e00:	2000069c 	.word	0x2000069c
 8006e04:	200005c0 	.word	0x200005c0
 8006e08:	200005bc 	.word	0x200005bc
 8006e0c:	200006a8 	.word	0x200006a8
 8006e10:	200006a4 	.word	0x200006a4

08006e14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e1a:	4b2d      	ldr	r3, [pc, #180]	; (8006ed0 <vTaskSwitchContext+0xbc>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006e22:	4b2c      	ldr	r3, [pc, #176]	; (8006ed4 <vTaskSwitchContext+0xc0>)
 8006e24:	2201      	movs	r2, #1
 8006e26:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8006e28:	e04d      	b.n	8006ec6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8006e2a:	4b2a      	ldr	r3, [pc, #168]	; (8006ed4 <vTaskSwitchContext+0xc0>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e30:	4b29      	ldr	r3, [pc, #164]	; (8006ed8 <vTaskSwitchContext+0xc4>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	fab3 f383 	clz	r3, r3
 8006e3c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006e3e:	7afb      	ldrb	r3, [r7, #11]
 8006e40:	f1c3 031f 	rsb	r3, r3, #31
 8006e44:	617b      	str	r3, [r7, #20]
 8006e46:	4925      	ldr	r1, [pc, #148]	; (8006edc <vTaskSwitchContext+0xc8>)
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	440b      	add	r3, r1
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10a      	bne.n	8006e70 <vTaskSwitchContext+0x5c>
        __asm volatile
 8006e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5e:	f383 8811 	msr	BASEPRI, r3
 8006e62:	f3bf 8f6f 	isb	sy
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	607b      	str	r3, [r7, #4]
    }
 8006e6c:	bf00      	nop
 8006e6e:	e7fe      	b.n	8006e6e <vTaskSwitchContext+0x5a>
 8006e70:	697a      	ldr	r2, [r7, #20]
 8006e72:	4613      	mov	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4413      	add	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4a18      	ldr	r2, [pc, #96]	; (8006edc <vTaskSwitchContext+0xc8>)
 8006e7c:	4413      	add	r3, r2
 8006e7e:	613b      	str	r3, [r7, #16]
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	605a      	str	r2, [r3, #4]
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	3308      	adds	r3, #8
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d104      	bne.n	8006ea0 <vTaskSwitchContext+0x8c>
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	685a      	ldr	r2, [r3, #4]
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	605a      	str	r2, [r3, #4]
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	4a0e      	ldr	r2, [pc, #56]	; (8006ee0 <vTaskSwitchContext+0xcc>)
 8006ea8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8006eaa:	4b0d      	ldr	r3, [pc, #52]	; (8006ee0 <vTaskSwitchContext+0xcc>)
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	4b0d      	ldr	r3, [pc, #52]	; (8006ee4 <vTaskSwitchContext+0xd0>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d102      	bne.n	8006ebc <vTaskSwitchContext+0xa8>
 8006eb6:	f002 fc5d 	bl	8009774 <SEGGER_SYSVIEW_OnIdle>
}
 8006eba:	e004      	b.n	8006ec6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8006ebc:	4b08      	ldr	r3, [pc, #32]	; (8006ee0 <vTaskSwitchContext+0xcc>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f002 fcb5 	bl	8009830 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8006ec6:	bf00      	nop
 8006ec8:	3718      	adds	r7, #24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	200006bc 	.word	0x200006bc
 8006ed4:	200006a8 	.word	0x200006a8
 8006ed8:	2000069c 	.word	0x2000069c
 8006edc:	200005c0 	.word	0x200005c0
 8006ee0:	200005bc 	.word	0x200005bc
 8006ee4:	200006b8 	.word	0x200006b8

08006ee8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10a      	bne.n	8006f0e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8006ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efc:	f383 8811 	msr	BASEPRI, r3
 8006f00:	f3bf 8f6f 	isb	sy
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	60fb      	str	r3, [r7, #12]
    }
 8006f0a:	bf00      	nop
 8006f0c:	e7fe      	b.n	8006f0c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f0e:	4b07      	ldr	r3, [pc, #28]	; (8006f2c <vTaskPlaceOnEventList+0x44>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3318      	adds	r3, #24
 8006f14:	4619      	mov	r1, r3
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7fe ffb5 	bl	8005e86 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f1c:	2101      	movs	r1, #1
 8006f1e:	6838      	ldr	r0, [r7, #0]
 8006f20:	f000 fa7e 	bl	8007420 <prvAddCurrentTaskToDelayedList>
}
 8006f24:	bf00      	nop
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	200005bc 	.word	0x200005bc

08006f30 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10a      	bne.n	8006f58 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8006f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f46:	f383 8811 	msr	BASEPRI, r3
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	613b      	str	r3, [r7, #16]
    }
 8006f54:	bf00      	nop
 8006f56:	e7fe      	b.n	8006f56 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	617b      	str	r3, [r7, #20]
 8006f5e:	4b17      	ldr	r3, [pc, #92]	; (8006fbc <vTaskPlaceOnEventListRestricted+0x8c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	61da      	str	r2, [r3, #28]
 8006f66:	4b15      	ldr	r3, [pc, #84]	; (8006fbc <vTaskPlaceOnEventListRestricted+0x8c>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	6892      	ldr	r2, [r2, #8]
 8006f6e:	621a      	str	r2, [r3, #32]
 8006f70:	4b12      	ldr	r3, [pc, #72]	; (8006fbc <vTaskPlaceOnEventListRestricted+0x8c>)
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	3218      	adds	r2, #24
 8006f7a:	605a      	str	r2, [r3, #4]
 8006f7c:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <vTaskPlaceOnEventListRestricted+0x8c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f103 0218 	add.w	r2, r3, #24
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	609a      	str	r2, [r3, #8]
 8006f88:	4b0c      	ldr	r3, [pc, #48]	; (8006fbc <vTaskPlaceOnEventListRestricted+0x8c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	629a      	str	r2, [r3, #40]	; 0x28
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	1c5a      	adds	r2, r3, #1
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8006fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8006fa6:	2024      	movs	r0, #36	; 0x24
 8006fa8:	f001 fee6 	bl	8008d78 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006fac:	6879      	ldr	r1, [r7, #4]
 8006fae:	68b8      	ldr	r0, [r7, #8]
 8006fb0:	f000 fa36 	bl	8007420 <prvAddCurrentTaskToDelayedList>
    }
 8006fb4:	bf00      	nop
 8006fb6:	3718      	adds	r7, #24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	200005bc 	.word	0x200005bc

08006fc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b08a      	sub	sp, #40	; 0x28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10a      	bne.n	8006fec <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8006fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	60fb      	str	r3, [r7, #12]
    }
 8006fe8:	bf00      	nop
 8006fea:	e7fe      	b.n	8006fea <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8006fec:	6a3b      	ldr	r3, [r7, #32]
 8006fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff0:	61fb      	str	r3, [r7, #28]
 8006ff2:	6a3b      	ldr	r3, [r7, #32]
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	6a3a      	ldr	r2, [r7, #32]
 8006ff8:	6a12      	ldr	r2, [r2, #32]
 8006ffa:	609a      	str	r2, [r3, #8]
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	6a3a      	ldr	r2, [r7, #32]
 8007002:	69d2      	ldr	r2, [r2, #28]
 8007004:	605a      	str	r2, [r3, #4]
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	685a      	ldr	r2, [r3, #4]
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	3318      	adds	r3, #24
 800700e:	429a      	cmp	r2, r3
 8007010:	d103      	bne.n	800701a <xTaskRemoveFromEventList+0x5a>
 8007012:	6a3b      	ldr	r3, [r7, #32]
 8007014:	6a1a      	ldr	r2, [r3, #32]
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	605a      	str	r2, [r3, #4]
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	2200      	movs	r2, #0
 800701e:	629a      	str	r2, [r3, #40]	; 0x28
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	1e5a      	subs	r2, r3, #1
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800702a:	4b4b      	ldr	r3, [pc, #300]	; (8007158 <xTaskRemoveFromEventList+0x198>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d162      	bne.n	80070f8 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	617b      	str	r3, [r7, #20]
 8007038:	6a3b      	ldr	r3, [r7, #32]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	6a3a      	ldr	r2, [r7, #32]
 800703e:	68d2      	ldr	r2, [r2, #12]
 8007040:	609a      	str	r2, [r3, #8]
 8007042:	6a3b      	ldr	r3, [r7, #32]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	6a3a      	ldr	r2, [r7, #32]
 8007048:	6892      	ldr	r2, [r2, #8]
 800704a:	605a      	str	r2, [r3, #4]
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	3304      	adds	r3, #4
 8007054:	429a      	cmp	r2, r3
 8007056:	d103      	bne.n	8007060 <xTaskRemoveFromEventList+0xa0>
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	68da      	ldr	r2, [r3, #12]
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	605a      	str	r2, [r3, #4]
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	2200      	movs	r2, #0
 8007064:	615a      	str	r2, [r3, #20]
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	1e5a      	subs	r2, r3, #1
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	4618      	mov	r0, r3
 8007074:	f002 fc1e 	bl	80098b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007078:	6a3b      	ldr	r3, [r7, #32]
 800707a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707c:	2201      	movs	r2, #1
 800707e:	409a      	lsls	r2, r3
 8007080:	4b36      	ldr	r3, [pc, #216]	; (800715c <xTaskRemoveFromEventList+0x19c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4313      	orrs	r3, r2
 8007086:	4a35      	ldr	r2, [pc, #212]	; (800715c <xTaskRemoveFromEventList+0x19c>)
 8007088:	6013      	str	r3, [r2, #0]
 800708a:	6a3b      	ldr	r3, [r7, #32]
 800708c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708e:	4934      	ldr	r1, [pc, #208]	; (8007160 <xTaskRemoveFromEventList+0x1a0>)
 8007090:	4613      	mov	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4413      	add	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	440b      	add	r3, r1
 800709a:	3304      	adds	r3, #4
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	613b      	str	r3, [r7, #16]
 80070a0:	6a3b      	ldr	r3, [r7, #32]
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	609a      	str	r2, [r3, #8]
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	689a      	ldr	r2, [r3, #8]
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	60da      	str	r2, [r3, #12]
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	6a3a      	ldr	r2, [r7, #32]
 80070b4:	3204      	adds	r2, #4
 80070b6:	605a      	str	r2, [r3, #4]
 80070b8:	6a3b      	ldr	r3, [r7, #32]
 80070ba:	1d1a      	adds	r2, r3, #4
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	609a      	str	r2, [r3, #8]
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c4:	4613      	mov	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4a24      	ldr	r2, [pc, #144]	; (8007160 <xTaskRemoveFromEventList+0x1a0>)
 80070ce:	441a      	add	r2, r3
 80070d0:	6a3b      	ldr	r3, [r7, #32]
 80070d2:	615a      	str	r2, [r3, #20]
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d8:	4921      	ldr	r1, [pc, #132]	; (8007160 <xTaskRemoveFromEventList+0x1a0>)
 80070da:	4613      	mov	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	440b      	add	r3, r1
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	1c59      	adds	r1, r3, #1
 80070e8:	481d      	ldr	r0, [pc, #116]	; (8007160 <xTaskRemoveFromEventList+0x1a0>)
 80070ea:	4613      	mov	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4413      	add	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	4403      	add	r3, r0
 80070f4:	6019      	str	r1, [r3, #0]
 80070f6:	e01b      	b.n	8007130 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80070f8:	4b1a      	ldr	r3, [pc, #104]	; (8007164 <xTaskRemoveFromEventList+0x1a4>)
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	61bb      	str	r3, [r7, #24]
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	61da      	str	r2, [r3, #28]
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	689a      	ldr	r2, [r3, #8]
 8007108:	6a3b      	ldr	r3, [r7, #32]
 800710a:	621a      	str	r2, [r3, #32]
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	6a3a      	ldr	r2, [r7, #32]
 8007112:	3218      	adds	r2, #24
 8007114:	605a      	str	r2, [r3, #4]
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	f103 0218 	add.w	r2, r3, #24
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	609a      	str	r2, [r3, #8]
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	4a10      	ldr	r2, [pc, #64]	; (8007164 <xTaskRemoveFromEventList+0x1a4>)
 8007124:	629a      	str	r2, [r3, #40]	; 0x28
 8007126:	4b0f      	ldr	r3, [pc, #60]	; (8007164 <xTaskRemoveFromEventList+0x1a4>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3301      	adds	r3, #1
 800712c:	4a0d      	ldr	r2, [pc, #52]	; (8007164 <xTaskRemoveFromEventList+0x1a4>)
 800712e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007130:	6a3b      	ldr	r3, [r7, #32]
 8007132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007134:	4b0c      	ldr	r3, [pc, #48]	; (8007168 <xTaskRemoveFromEventList+0x1a8>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713a:	429a      	cmp	r2, r3
 800713c:	d905      	bls.n	800714a <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800713e:	2301      	movs	r3, #1
 8007140:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8007142:	4b0a      	ldr	r3, [pc, #40]	; (800716c <xTaskRemoveFromEventList+0x1ac>)
 8007144:	2201      	movs	r2, #1
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	e001      	b.n	800714e <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 800714a:	2300      	movs	r3, #0
 800714c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800714e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007150:	4618      	mov	r0, r3
 8007152:	3728      	adds	r7, #40	; 0x28
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	200006bc 	.word	0x200006bc
 800715c:	2000069c 	.word	0x2000069c
 8007160:	200005c0 	.word	0x200005c0
 8007164:	20000654 	.word	0x20000654
 8007168:	200005bc 	.word	0x200005bc
 800716c:	200006a8 	.word	0x200006a8

08007170 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007178:	4b06      	ldr	r3, [pc, #24]	; (8007194 <vTaskInternalSetTimeOutState+0x24>)
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8007180:	4b05      	ldr	r3, [pc, #20]	; (8007198 <vTaskInternalSetTimeOutState+0x28>)
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	605a      	str	r2, [r3, #4]
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	200006ac 	.word	0x200006ac
 8007198:	20000698 	.word	0x20000698

0800719c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b088      	sub	sp, #32
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10a      	bne.n	80071c2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	613b      	str	r3, [r7, #16]
    }
 80071be:	bf00      	nop
 80071c0:	e7fe      	b.n	80071c0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10a      	bne.n	80071de <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80071c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	60fb      	str	r3, [r7, #12]
    }
 80071da:	bf00      	nop
 80071dc:	e7fe      	b.n	80071dc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80071de:	f000 fd53 	bl	8007c88 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80071e2:	4b1f      	ldr	r3, [pc, #124]	; (8007260 <xTaskCheckForTimeOut+0xc4>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	69ba      	ldr	r2, [r7, #24]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fa:	d102      	bne.n	8007202 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80071fc:	2300      	movs	r3, #0
 80071fe:	61fb      	str	r3, [r7, #28]
 8007200:	e026      	b.n	8007250 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	4b17      	ldr	r3, [pc, #92]	; (8007264 <xTaskCheckForTimeOut+0xc8>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	429a      	cmp	r2, r3
 800720c:	d00a      	beq.n	8007224 <xTaskCheckForTimeOut+0x88>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	69ba      	ldr	r2, [r7, #24]
 8007214:	429a      	cmp	r2, r3
 8007216:	d305      	bcc.n	8007224 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8007218:	2301      	movs	r3, #1
 800721a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	2200      	movs	r2, #0
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	e015      	b.n	8007250 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	429a      	cmp	r2, r3
 800722c:	d20b      	bcs.n	8007246 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	1ad2      	subs	r2, r2, r3
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f7ff ff98 	bl	8007170 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8007240:	2300      	movs	r3, #0
 8007242:	61fb      	str	r3, [r7, #28]
 8007244:	e004      	b.n	8007250 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	2200      	movs	r2, #0
 800724a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800724c:	2301      	movs	r3, #1
 800724e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8007250:	f000 fd4a 	bl	8007ce8 <vPortExitCritical>

    return xReturn;
 8007254:	69fb      	ldr	r3, [r7, #28]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3720      	adds	r7, #32
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	20000698 	.word	0x20000698
 8007264:	200006ac 	.word	0x200006ac

08007268 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007268:	b480      	push	{r7}
 800726a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800726c:	4b03      	ldr	r3, [pc, #12]	; (800727c <vTaskMissedYield+0x14>)
 800726e:	2201      	movs	r2, #1
 8007270:	601a      	str	r2, [r3, #0]
}
 8007272:	bf00      	nop
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr
 800727c:	200006a8 	.word	0x200006a8

08007280 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007288:	f000 f852 	bl	8007330 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800728c:	4b06      	ldr	r3, [pc, #24]	; (80072a8 <prvIdleTask+0x28>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d9f9      	bls.n	8007288 <prvIdleTask+0x8>
            {
                taskYIELD();
 8007294:	4b05      	ldr	r3, [pc, #20]	; (80072ac <prvIdleTask+0x2c>)
 8007296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80072a4:	e7f0      	b.n	8007288 <prvIdleTask+0x8>
 80072a6:	bf00      	nop
 80072a8:	200005c0 	.word	0x200005c0
 80072ac:	e000ed04 	.word	0xe000ed04

080072b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072b6:	2300      	movs	r3, #0
 80072b8:	607b      	str	r3, [r7, #4]
 80072ba:	e00c      	b.n	80072d6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	4613      	mov	r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4a12      	ldr	r2, [pc, #72]	; (8007310 <prvInitialiseTaskLists+0x60>)
 80072c8:	4413      	add	r3, r2
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fe fdae 	bl	8005e2c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	3301      	adds	r3, #1
 80072d4:	607b      	str	r3, [r7, #4]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b04      	cmp	r3, #4
 80072da:	d9ef      	bls.n	80072bc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80072dc:	480d      	ldr	r0, [pc, #52]	; (8007314 <prvInitialiseTaskLists+0x64>)
 80072de:	f7fe fda5 	bl	8005e2c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80072e2:	480d      	ldr	r0, [pc, #52]	; (8007318 <prvInitialiseTaskLists+0x68>)
 80072e4:	f7fe fda2 	bl	8005e2c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80072e8:	480c      	ldr	r0, [pc, #48]	; (800731c <prvInitialiseTaskLists+0x6c>)
 80072ea:	f7fe fd9f 	bl	8005e2c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80072ee:	480c      	ldr	r0, [pc, #48]	; (8007320 <prvInitialiseTaskLists+0x70>)
 80072f0:	f7fe fd9c 	bl	8005e2c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80072f4:	480b      	ldr	r0, [pc, #44]	; (8007324 <prvInitialiseTaskLists+0x74>)
 80072f6:	f7fe fd99 	bl	8005e2c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80072fa:	4b0b      	ldr	r3, [pc, #44]	; (8007328 <prvInitialiseTaskLists+0x78>)
 80072fc:	4a05      	ldr	r2, [pc, #20]	; (8007314 <prvInitialiseTaskLists+0x64>)
 80072fe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007300:	4b0a      	ldr	r3, [pc, #40]	; (800732c <prvInitialiseTaskLists+0x7c>)
 8007302:	4a05      	ldr	r2, [pc, #20]	; (8007318 <prvInitialiseTaskLists+0x68>)
 8007304:	601a      	str	r2, [r3, #0]
}
 8007306:	bf00      	nop
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	200005c0 	.word	0x200005c0
 8007314:	20000624 	.word	0x20000624
 8007318:	20000638 	.word	0x20000638
 800731c:	20000654 	.word	0x20000654
 8007320:	20000668 	.word	0x20000668
 8007324:	20000680 	.word	0x20000680
 8007328:	2000064c 	.word	0x2000064c
 800732c:	20000650 	.word	0x20000650

08007330 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007336:	e019      	b.n	800736c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8007338:	f000 fca6 	bl	8007c88 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800733c:	4b10      	ldr	r3, [pc, #64]	; (8007380 <prvCheckTasksWaitingTermination+0x50>)
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	3304      	adds	r3, #4
 8007348:	4618      	mov	r0, r3
 800734a:	f7fe fdd5 	bl	8005ef8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800734e:	4b0d      	ldr	r3, [pc, #52]	; (8007384 <prvCheckTasksWaitingTermination+0x54>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	3b01      	subs	r3, #1
 8007354:	4a0b      	ldr	r2, [pc, #44]	; (8007384 <prvCheckTasksWaitingTermination+0x54>)
 8007356:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8007358:	4b0b      	ldr	r3, [pc, #44]	; (8007388 <prvCheckTasksWaitingTermination+0x58>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	3b01      	subs	r3, #1
 800735e:	4a0a      	ldr	r2, [pc, #40]	; (8007388 <prvCheckTasksWaitingTermination+0x58>)
 8007360:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8007362:	f000 fcc1 	bl	8007ce8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f810 	bl	800738c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800736c:	4b06      	ldr	r3, [pc, #24]	; (8007388 <prvCheckTasksWaitingTermination+0x58>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e1      	bne.n	8007338 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8007374:	bf00      	nop
 8007376:	bf00      	nop
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	20000668 	.word	0x20000668
 8007384:	20000694 	.word	0x20000694
 8007388:	2000067c 	.word	0x2000067c

0800738c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007398:	4618      	mov	r0, r3
 800739a:	f000 fe59 	bl	8008050 <vPortFree>
            vPortFree( pxTCB );
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fe56 	bl	8008050 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80073a4:	bf00      	nop
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073ac:	b480      	push	{r7}
 80073ae:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073b0:	4b0a      	ldr	r3, [pc, #40]	; (80073dc <prvResetNextTaskUnblockTime+0x30>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d104      	bne.n	80073c4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80073ba:	4b09      	ldr	r3, [pc, #36]	; (80073e0 <prvResetNextTaskUnblockTime+0x34>)
 80073bc:	f04f 32ff 	mov.w	r2, #4294967295
 80073c0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80073c2:	e005      	b.n	80073d0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80073c4:	4b05      	ldr	r3, [pc, #20]	; (80073dc <prvResetNextTaskUnblockTime+0x30>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a04      	ldr	r2, [pc, #16]	; (80073e0 <prvResetNextTaskUnblockTime+0x34>)
 80073ce:	6013      	str	r3, [r2, #0]
}
 80073d0:	bf00      	nop
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	2000064c 	.word	0x2000064c
 80073e0:	200006b4 	.word	0x200006b4

080073e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80073ea:	4b0b      	ldr	r3, [pc, #44]	; (8007418 <xTaskGetSchedulerState+0x34>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d102      	bne.n	80073f8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80073f2:	2301      	movs	r3, #1
 80073f4:	607b      	str	r3, [r7, #4]
 80073f6:	e008      	b.n	800740a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073f8:	4b08      	ldr	r3, [pc, #32]	; (800741c <xTaskGetSchedulerState+0x38>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d102      	bne.n	8007406 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007400:	2302      	movs	r3, #2
 8007402:	607b      	str	r3, [r7, #4]
 8007404:	e001      	b.n	800740a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8007406:	2300      	movs	r3, #0
 8007408:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800740a:	687b      	ldr	r3, [r7, #4]
    }
 800740c:	4618      	mov	r0, r3
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	200006a0 	.word	0x200006a0
 800741c:	200006bc 	.word	0x200006bc

08007420 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800742a:	4b36      	ldr	r3, [pc, #216]	; (8007504 <prvAddCurrentTaskToDelayedList+0xe4>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007430:	4b35      	ldr	r3, [pc, #212]	; (8007508 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	3304      	adds	r3, #4
 8007436:	4618      	mov	r0, r3
 8007438:	f7fe fd5e 	bl	8005ef8 <uxListRemove>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10b      	bne.n	800745a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007442:	4b31      	ldr	r3, [pc, #196]	; (8007508 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007448:	2201      	movs	r2, #1
 800744a:	fa02 f303 	lsl.w	r3, r2, r3
 800744e:	43da      	mvns	r2, r3
 8007450:	4b2e      	ldr	r3, [pc, #184]	; (800750c <prvAddCurrentTaskToDelayedList+0xec>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4013      	ands	r3, r2
 8007456:	4a2d      	ldr	r2, [pc, #180]	; (800750c <prvAddCurrentTaskToDelayedList+0xec>)
 8007458:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007460:	d124      	bne.n	80074ac <prvAddCurrentTaskToDelayedList+0x8c>
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d021      	beq.n	80074ac <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007468:	4b29      	ldr	r3, [pc, #164]	; (8007510 <prvAddCurrentTaskToDelayedList+0xf0>)
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	613b      	str	r3, [r7, #16]
 800746e:	4b26      	ldr	r3, [pc, #152]	; (8007508 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	609a      	str	r2, [r3, #8]
 8007476:	4b24      	ldr	r3, [pc, #144]	; (8007508 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	6892      	ldr	r2, [r2, #8]
 800747e:	60da      	str	r2, [r3, #12]
 8007480:	4b21      	ldr	r3, [pc, #132]	; (8007508 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	3204      	adds	r2, #4
 800748a:	605a      	str	r2, [r3, #4]
 800748c:	4b1e      	ldr	r3, [pc, #120]	; (8007508 <prvAddCurrentTaskToDelayedList+0xe8>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	1d1a      	adds	r2, r3, #4
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	609a      	str	r2, [r3, #8]
 8007496:	4b1c      	ldr	r3, [pc, #112]	; (8007508 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a1d      	ldr	r2, [pc, #116]	; (8007510 <prvAddCurrentTaskToDelayedList+0xf0>)
 800749c:	615a      	str	r2, [r3, #20]
 800749e:	4b1c      	ldr	r3, [pc, #112]	; (8007510 <prvAddCurrentTaskToDelayedList+0xf0>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3301      	adds	r3, #1
 80074a4:	4a1a      	ldr	r2, [pc, #104]	; (8007510 <prvAddCurrentTaskToDelayedList+0xf0>)
 80074a6:	6013      	str	r3, [r2, #0]
 80074a8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80074aa:	e026      	b.n	80074fa <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4413      	add	r3, r2
 80074b2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80074b4:	4b14      	ldr	r3, [pc, #80]	; (8007508 <prvAddCurrentTaskToDelayedList+0xe8>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d209      	bcs.n	80074d8 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074c4:	4b13      	ldr	r3, [pc, #76]	; (8007514 <prvAddCurrentTaskToDelayedList+0xf4>)
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	4b0f      	ldr	r3, [pc, #60]	; (8007508 <prvAddCurrentTaskToDelayedList+0xe8>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	3304      	adds	r3, #4
 80074ce:	4619      	mov	r1, r3
 80074d0:	4610      	mov	r0, r2
 80074d2:	f7fe fcd8 	bl	8005e86 <vListInsert>
}
 80074d6:	e010      	b.n	80074fa <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074d8:	4b0f      	ldr	r3, [pc, #60]	; (8007518 <prvAddCurrentTaskToDelayedList+0xf8>)
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	4b0a      	ldr	r3, [pc, #40]	; (8007508 <prvAddCurrentTaskToDelayedList+0xe8>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3304      	adds	r3, #4
 80074e2:	4619      	mov	r1, r3
 80074e4:	4610      	mov	r0, r2
 80074e6:	f7fe fcce 	bl	8005e86 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80074ea:	4b0c      	ldr	r3, [pc, #48]	; (800751c <prvAddCurrentTaskToDelayedList+0xfc>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d202      	bcs.n	80074fa <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80074f4:	4a09      	ldr	r2, [pc, #36]	; (800751c <prvAddCurrentTaskToDelayedList+0xfc>)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6013      	str	r3, [r2, #0]
}
 80074fa:	bf00      	nop
 80074fc:	3718      	adds	r7, #24
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	20000698 	.word	0x20000698
 8007508:	200005bc 	.word	0x200005bc
 800750c:	2000069c 	.word	0x2000069c
 8007510:	20000680 	.word	0x20000680
 8007514:	20000650 	.word	0x20000650
 8007518:	2000064c 	.word	0x2000064c
 800751c:	200006b4 	.word	0x200006b4

08007520 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8007526:	2300      	movs	r3, #0
 8007528:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800752a:	f000 fa47 	bl	80079bc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800752e:	4b11      	ldr	r3, [pc, #68]	; (8007574 <xTimerCreateTimerTask+0x54>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00b      	beq.n	800754e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8007536:	4b10      	ldr	r3, [pc, #64]	; (8007578 <xTimerCreateTimerTask+0x58>)
 8007538:	9301      	str	r3, [sp, #4]
 800753a:	2302      	movs	r3, #2
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	2300      	movs	r3, #0
 8007540:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007544:	490d      	ldr	r1, [pc, #52]	; (800757c <xTimerCreateTimerTask+0x5c>)
 8007546:	480e      	ldr	r0, [pc, #56]	; (8007580 <xTimerCreateTimerTask+0x60>)
 8007548:	f7ff f830 	bl	80065ac <xTaskCreate>
 800754c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10a      	bne.n	800756a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8007554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	603b      	str	r3, [r7, #0]
    }
 8007566:	bf00      	nop
 8007568:	e7fe      	b.n	8007568 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800756a:	687b      	ldr	r3, [r7, #4]
    }
 800756c:	4618      	mov	r0, r3
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	200006f0 	.word	0x200006f0
 8007578:	200006f4 	.word	0x200006f4
 800757c:	08009d9c 	.word	0x08009d9c
 8007580:	08007629 	.word	0x08007629

08007584 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007590:	e008      	b.n	80075a4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	4413      	add	r3, r2
 800759a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6a1b      	ldr	r3, [r3, #32]
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	699a      	ldr	r2, [r3, #24]
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	18d1      	adds	r1, r2, r3
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f000 f8dd 	bl	8007770 <prvInsertTimerInActiveList>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1ea      	bne.n	8007592 <prvReloadTimer+0xe>
        }
    }
 80075bc:	bf00      	nop
 80075be:	bf00      	nop
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
	...

080075c8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075d2:	4b14      	ldr	r3, [pc, #80]	; (8007624 <prvProcessExpiredTimer+0x5c>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3304      	adds	r3, #4
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7fe fc89 	bl	8005ef8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075ec:	f003 0304 	and.w	r3, r3, #4
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d005      	beq.n	8007600 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80075f4:	683a      	ldr	r2, [r7, #0]
 80075f6:	6879      	ldr	r1, [r7, #4]
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f7ff ffc3 	bl	8007584 <prvReloadTimer>
 80075fe:	e008      	b.n	8007612 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007606:	f023 0301 	bic.w	r3, r3, #1
 800760a:	b2da      	uxtb	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	4798      	blx	r3
    }
 800761a:	bf00      	nop
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	200006e8 	.word	0x200006e8

08007628 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007630:	f107 0308 	add.w	r3, r7, #8
 8007634:	4618      	mov	r0, r3
 8007636:	f000 f857 	bl	80076e8 <prvGetNextExpireTime>
 800763a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	4619      	mov	r1, r3
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f000 f803 	bl	800764c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007646:	f000 f8d5 	bl	80077f4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800764a:	e7f1      	b.n	8007630 <prvTimerTask+0x8>

0800764c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007656:	f7ff f993 	bl	8006980 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800765a:	f107 0308 	add.w	r3, r7, #8
 800765e:	4618      	mov	r0, r3
 8007660:	f000 f866 	bl	8007730 <prvSampleTimeNow>
 8007664:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d130      	bne.n	80076ce <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10a      	bne.n	8007688 <prvProcessTimerOrBlockTask+0x3c>
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	429a      	cmp	r2, r3
 8007678:	d806      	bhi.n	8007688 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800767a:	f7ff f98f 	bl	800699c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800767e:	68f9      	ldr	r1, [r7, #12]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f7ff ffa1 	bl	80075c8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007686:	e024      	b.n	80076d2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d008      	beq.n	80076a0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800768e:	4b13      	ldr	r3, [pc, #76]	; (80076dc <prvProcessTimerOrBlockTask+0x90>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d101      	bne.n	800769c <prvProcessTimerOrBlockTask+0x50>
 8007698:	2301      	movs	r3, #1
 800769a:	e000      	b.n	800769e <prvProcessTimerOrBlockTask+0x52>
 800769c:	2300      	movs	r3, #0
 800769e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80076a0:	4b0f      	ldr	r3, [pc, #60]	; (80076e0 <prvProcessTimerOrBlockTask+0x94>)
 80076a2:	6818      	ldr	r0, [r3, #0]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	4619      	mov	r1, r3
 80076ae:	f7fe ff49 	bl	8006544 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80076b2:	f7ff f973 	bl	800699c <xTaskResumeAll>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10a      	bne.n	80076d2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80076bc:	4b09      	ldr	r3, [pc, #36]	; (80076e4 <prvProcessTimerOrBlockTask+0x98>)
 80076be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076c2:	601a      	str	r2, [r3, #0]
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	f3bf 8f6f 	isb	sy
    }
 80076cc:	e001      	b.n	80076d2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80076ce:	f7ff f965 	bl	800699c <xTaskResumeAll>
    }
 80076d2:	bf00      	nop
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	200006ec 	.word	0x200006ec
 80076e0:	200006f0 	.word	0x200006f0
 80076e4:	e000ed04 	.word	0xe000ed04

080076e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80076f0:	4b0e      	ldr	r3, [pc, #56]	; (800772c <prvGetNextExpireTime+0x44>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <prvGetNextExpireTime+0x16>
 80076fa:	2201      	movs	r2, #1
 80076fc:	e000      	b.n	8007700 <prvGetNextExpireTime+0x18>
 80076fe:	2200      	movs	r2, #0
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d105      	bne.n	8007718 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800770c:	4b07      	ldr	r3, [pc, #28]	; (800772c <prvGetNextExpireTime+0x44>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	60fb      	str	r3, [r7, #12]
 8007716:	e001      	b.n	800771c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007718:	2300      	movs	r3, #0
 800771a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800771c:	68fb      	ldr	r3, [r7, #12]
    }
 800771e:	4618      	mov	r0, r3
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	200006e8 	.word	0x200006e8

08007730 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007738:	f7ff fa30 	bl	8006b9c <xTaskGetTickCount>
 800773c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800773e:	4b0b      	ldr	r3, [pc, #44]	; (800776c <prvSampleTimeNow+0x3c>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	429a      	cmp	r2, r3
 8007746:	d205      	bcs.n	8007754 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007748:	f000 f912 	bl	8007970 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	601a      	str	r2, [r3, #0]
 8007752:	e002      	b.n	800775a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800775a:	4a04      	ldr	r2, [pc, #16]	; (800776c <prvSampleTimeNow+0x3c>)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007760:	68fb      	ldr	r3, [r7, #12]
    }
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	200006f8 	.word	0x200006f8

08007770 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
 800777c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800777e:	2300      	movs	r3, #0
 8007780:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	429a      	cmp	r2, r3
 8007794:	d812      	bhi.n	80077bc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	1ad2      	subs	r2, r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d302      	bcc.n	80077aa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80077a4:	2301      	movs	r3, #1
 80077a6:	617b      	str	r3, [r7, #20]
 80077a8:	e01b      	b.n	80077e2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80077aa:	4b10      	ldr	r3, [pc, #64]	; (80077ec <prvInsertTimerInActiveList+0x7c>)
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3304      	adds	r3, #4
 80077b2:	4619      	mov	r1, r3
 80077b4:	4610      	mov	r0, r2
 80077b6:	f7fe fb66 	bl	8005e86 <vListInsert>
 80077ba:	e012      	b.n	80077e2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d206      	bcs.n	80077d2 <prvInsertTimerInActiveList+0x62>
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d302      	bcc.n	80077d2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80077cc:	2301      	movs	r3, #1
 80077ce:	617b      	str	r3, [r7, #20]
 80077d0:	e007      	b.n	80077e2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077d2:	4b07      	ldr	r3, [pc, #28]	; (80077f0 <prvInsertTimerInActiveList+0x80>)
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	3304      	adds	r3, #4
 80077da:	4619      	mov	r1, r3
 80077dc:	4610      	mov	r0, r2
 80077de:	f7fe fb52 	bl	8005e86 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80077e2:	697b      	ldr	r3, [r7, #20]
    }
 80077e4:	4618      	mov	r0, r3
 80077e6:	3718      	adds	r7, #24
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	200006ec 	.word	0x200006ec
 80077f0:	200006e8 	.word	0x200006e8

080077f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b088      	sub	sp, #32
 80077f8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077fa:	e0a6      	b.n	800794a <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f2c0 80a3 	blt.w	800794a <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d004      	beq.n	800781a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	3304      	adds	r3, #4
 8007814:	4618      	mov	r0, r3
 8007816:	f7fe fb6f 	bl	8005ef8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800781a:	1d3b      	adds	r3, r7, #4
 800781c:	4618      	mov	r0, r3
 800781e:	f7ff ff87 	bl	8007730 <prvSampleTimeNow>
 8007822:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	3b01      	subs	r3, #1
 8007828:	2b08      	cmp	r3, #8
 800782a:	f200 808d 	bhi.w	8007948 <prvProcessReceivedCommands+0x154>
 800782e:	a201      	add	r2, pc, #4	; (adr r2, 8007834 <prvProcessReceivedCommands+0x40>)
 8007830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007834:	08007859 	.word	0x08007859
 8007838:	08007859 	.word	0x08007859
 800783c:	080078c1 	.word	0x080078c1
 8007840:	080078d5 	.word	0x080078d5
 8007844:	0800791f 	.word	0x0800791f
 8007848:	08007859 	.word	0x08007859
 800784c:	08007859 	.word	0x08007859
 8007850:	080078c1 	.word	0x080078c1
 8007854:	080078d5 	.word	0x080078d5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800785e:	f043 0301 	orr.w	r3, r3, #1
 8007862:	b2da      	uxtb	r2, r3
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	18d1      	adds	r1, r2, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	69f8      	ldr	r0, [r7, #28]
 8007878:	f7ff ff7a 	bl	8007770 <prvInsertTimerInActiveList>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d063      	beq.n	800794a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007888:	f003 0304 	and.w	r3, r3, #4
 800788c:	2b00      	cmp	r3, #0
 800788e:	d009      	beq.n	80078a4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	4413      	add	r3, r2
 8007898:	69ba      	ldr	r2, [r7, #24]
 800789a:	4619      	mov	r1, r3
 800789c:	69f8      	ldr	r0, [r7, #28]
 800789e:	f7ff fe71 	bl	8007584 <prvReloadTimer>
 80078a2:	e008      	b.n	80078b6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078aa:	f023 0301 	bic.w	r3, r3, #1
 80078ae:	b2da      	uxtb	r2, r3
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	69f8      	ldr	r0, [r7, #28]
 80078bc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80078be:	e044      	b.n	800794a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078c6:	f023 0301 	bic.w	r3, r3, #1
 80078ca:	b2da      	uxtb	r2, r3
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80078d2:	e03a      	b.n	800794a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078da:	f043 0301 	orr.w	r3, r3, #1
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10a      	bne.n	800790a <prvProcessReceivedCommands+0x116>
        __asm volatile
 80078f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f8:	f383 8811 	msr	BASEPRI, r3
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	617b      	str	r3, [r7, #20]
    }
 8007906:	bf00      	nop
 8007908:	e7fe      	b.n	8007908 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	699a      	ldr	r2, [r3, #24]
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	18d1      	adds	r1, r2, r3
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	69f8      	ldr	r0, [r7, #28]
 8007918:	f7ff ff2a 	bl	8007770 <prvInsertTimerInActiveList>
                        break;
 800791c:	e015      	b.n	800794a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007924:	f003 0302 	and.w	r3, r3, #2
 8007928:	2b00      	cmp	r3, #0
 800792a:	d103      	bne.n	8007934 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 800792c:	69f8      	ldr	r0, [r7, #28]
 800792e:	f000 fb8f 	bl	8008050 <vPortFree>
 8007932:	e00a      	b.n	800794a <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800793a:	f023 0301 	bic.w	r3, r3, #1
 800793e:	b2da      	uxtb	r2, r3
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007946:	e000      	b.n	800794a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8007948:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800794a:	4b08      	ldr	r3, [pc, #32]	; (800796c <prvProcessReceivedCommands+0x178>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f107 0108 	add.w	r1, r7, #8
 8007952:	2200      	movs	r2, #0
 8007954:	4618      	mov	r0, r3
 8007956:	f7fe fc01 	bl	800615c <xQueueReceive>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	f47f af4d 	bne.w	80077fc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8007962:	bf00      	nop
 8007964:	bf00      	nop
 8007966:	3720      	adds	r7, #32
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	200006f0 	.word	0x200006f0

08007970 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007976:	e009      	b.n	800798c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007978:	4b0e      	ldr	r3, [pc, #56]	; (80079b4 <prvSwitchTimerLists+0x44>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8007982:	f04f 31ff 	mov.w	r1, #4294967295
 8007986:	6838      	ldr	r0, [r7, #0]
 8007988:	f7ff fe1e 	bl	80075c8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800798c:	4b09      	ldr	r3, [pc, #36]	; (80079b4 <prvSwitchTimerLists+0x44>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1f0      	bne.n	8007978 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8007996:	4b07      	ldr	r3, [pc, #28]	; (80079b4 <prvSwitchTimerLists+0x44>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800799c:	4b06      	ldr	r3, [pc, #24]	; (80079b8 <prvSwitchTimerLists+0x48>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a04      	ldr	r2, [pc, #16]	; (80079b4 <prvSwitchTimerLists+0x44>)
 80079a2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80079a4:	4a04      	ldr	r2, [pc, #16]	; (80079b8 <prvSwitchTimerLists+0x48>)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6013      	str	r3, [r2, #0]
    }
 80079aa:	bf00      	nop
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	200006e8 	.word	0x200006e8
 80079b8:	200006ec 	.word	0x200006ec

080079bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80079bc:	b580      	push	{r7, lr}
 80079be:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80079c0:	f000 f962 	bl	8007c88 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80079c4:	4b12      	ldr	r3, [pc, #72]	; (8007a10 <prvCheckForValidListAndQueue+0x54>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d11d      	bne.n	8007a08 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80079cc:	4811      	ldr	r0, [pc, #68]	; (8007a14 <prvCheckForValidListAndQueue+0x58>)
 80079ce:	f7fe fa2d 	bl	8005e2c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80079d2:	4811      	ldr	r0, [pc, #68]	; (8007a18 <prvCheckForValidListAndQueue+0x5c>)
 80079d4:	f7fe fa2a 	bl	8005e2c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80079d8:	4b10      	ldr	r3, [pc, #64]	; (8007a1c <prvCheckForValidListAndQueue+0x60>)
 80079da:	4a0e      	ldr	r2, [pc, #56]	; (8007a14 <prvCheckForValidListAndQueue+0x58>)
 80079dc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80079de:	4b10      	ldr	r3, [pc, #64]	; (8007a20 <prvCheckForValidListAndQueue+0x64>)
 80079e0:	4a0d      	ldr	r2, [pc, #52]	; (8007a18 <prvCheckForValidListAndQueue+0x5c>)
 80079e2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80079e4:	2200      	movs	r2, #0
 80079e6:	210c      	movs	r1, #12
 80079e8:	200a      	movs	r0, #10
 80079ea:	f7fe fb3f 	bl	800606c <xQueueGenericCreate>
 80079ee:	4603      	mov	r3, r0
 80079f0:	4a07      	ldr	r2, [pc, #28]	; (8007a10 <prvCheckForValidListAndQueue+0x54>)
 80079f2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80079f4:	4b06      	ldr	r3, [pc, #24]	; (8007a10 <prvCheckForValidListAndQueue+0x54>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d005      	beq.n	8007a08 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80079fc:	4b04      	ldr	r3, [pc, #16]	; (8007a10 <prvCheckForValidListAndQueue+0x54>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4908      	ldr	r1, [pc, #32]	; (8007a24 <prvCheckForValidListAndQueue+0x68>)
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7fe fd48 	bl	8006498 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007a08:	f000 f96e 	bl	8007ce8 <vPortExitCritical>
    }
 8007a0c:	bf00      	nop
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	200006f0 	.word	0x200006f0
 8007a14:	200006c0 	.word	0x200006c0
 8007a18:	200006d4 	.word	0x200006d4
 8007a1c:	200006e8 	.word	0x200006e8
 8007a20:	200006ec 	.word	0x200006ec
 8007a24:	08009da4 	.word	0x08009da4

08007a28 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	3b04      	subs	r3, #4
 8007a38:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a40:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	3b04      	subs	r3, #4
 8007a46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	f023 0201 	bic.w	r2, r3, #1
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	3b04      	subs	r3, #4
 8007a56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007a58:	4a0c      	ldr	r2, [pc, #48]	; (8007a8c <pxPortInitialiseStack+0x64>)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	3b14      	subs	r3, #20
 8007a62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	3b04      	subs	r3, #4
 8007a6e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f06f 0202 	mvn.w	r2, #2
 8007a76:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	3b20      	subs	r3, #32
 8007a7c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	08007a91 	.word	0x08007a91

08007a90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007a96:	2300      	movs	r3, #0
 8007a98:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007a9a:	4b12      	ldr	r3, [pc, #72]	; (8007ae4 <prvTaskExitError+0x54>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa2:	d00a      	beq.n	8007aba <prvTaskExitError+0x2a>
        __asm volatile
 8007aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa8:	f383 8811 	msr	BASEPRI, r3
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	60fb      	str	r3, [r7, #12]
    }
 8007ab6:	bf00      	nop
 8007ab8:	e7fe      	b.n	8007ab8 <prvTaskExitError+0x28>
        __asm volatile
 8007aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	60bb      	str	r3, [r7, #8]
    }
 8007acc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007ace:	bf00      	nop
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d0fc      	beq.n	8007ad0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007ad6:	bf00      	nop
 8007ad8:	bf00      	nop
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	20000010 	.word	0x20000010
	...

08007af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007af0:	4b07      	ldr	r3, [pc, #28]	; (8007b10 <pxCurrentTCBConst2>)
 8007af2:	6819      	ldr	r1, [r3, #0]
 8007af4:	6808      	ldr	r0, [r1, #0]
 8007af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007afa:	f380 8809 	msr	PSP, r0
 8007afe:	f3bf 8f6f 	isb	sy
 8007b02:	f04f 0000 	mov.w	r0, #0
 8007b06:	f380 8811 	msr	BASEPRI, r0
 8007b0a:	4770      	bx	lr
 8007b0c:	f3af 8000 	nop.w

08007b10 <pxCurrentTCBConst2>:
 8007b10:	200005bc 	.word	0x200005bc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007b14:	bf00      	nop
 8007b16:	bf00      	nop

08007b18 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007b18:	4808      	ldr	r0, [pc, #32]	; (8007b3c <prvPortStartFirstTask+0x24>)
 8007b1a:	6800      	ldr	r0, [r0, #0]
 8007b1c:	6800      	ldr	r0, [r0, #0]
 8007b1e:	f380 8808 	msr	MSP, r0
 8007b22:	f04f 0000 	mov.w	r0, #0
 8007b26:	f380 8814 	msr	CONTROL, r0
 8007b2a:	b662      	cpsie	i
 8007b2c:	b661      	cpsie	f
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	df00      	svc	0
 8007b38:	bf00      	nop
 8007b3a:	0000      	.short	0x0000
 8007b3c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007b40:	bf00      	nop
 8007b42:	bf00      	nop

08007b44 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007b4a:	4b46      	ldr	r3, [pc, #280]	; (8007c64 <xPortStartScheduler+0x120>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a46      	ldr	r2, [pc, #280]	; (8007c68 <xPortStartScheduler+0x124>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d10a      	bne.n	8007b6a <xPortStartScheduler+0x26>
        __asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	613b      	str	r3, [r7, #16]
    }
 8007b66:	bf00      	nop
 8007b68:	e7fe      	b.n	8007b68 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007b6a:	4b3e      	ldr	r3, [pc, #248]	; (8007c64 <xPortStartScheduler+0x120>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a3f      	ldr	r2, [pc, #252]	; (8007c6c <xPortStartScheduler+0x128>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d10a      	bne.n	8007b8a <xPortStartScheduler+0x46>
        __asm volatile
 8007b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	60fb      	str	r3, [r7, #12]
    }
 8007b86:	bf00      	nop
 8007b88:	e7fe      	b.n	8007b88 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b8a:	4b39      	ldr	r3, [pc, #228]	; (8007c70 <xPortStartScheduler+0x12c>)
 8007b8c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	22ff      	movs	r2, #255	; 0xff
 8007b9a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ba4:	78fb      	ldrb	r3, [r7, #3]
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	4b31      	ldr	r3, [pc, #196]	; (8007c74 <xPortStartScheduler+0x130>)
 8007bb0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007bb2:	4b31      	ldr	r3, [pc, #196]	; (8007c78 <xPortStartScheduler+0x134>)
 8007bb4:	2207      	movs	r2, #7
 8007bb6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bb8:	e009      	b.n	8007bce <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8007bba:	4b2f      	ldr	r3, [pc, #188]	; (8007c78 <xPortStartScheduler+0x134>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	4a2d      	ldr	r2, [pc, #180]	; (8007c78 <xPortStartScheduler+0x134>)
 8007bc2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007bc4:	78fb      	ldrb	r3, [r7, #3]
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	005b      	lsls	r3, r3, #1
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bce:	78fb      	ldrb	r3, [r7, #3]
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd6:	2b80      	cmp	r3, #128	; 0x80
 8007bd8:	d0ef      	beq.n	8007bba <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007bda:	4b27      	ldr	r3, [pc, #156]	; (8007c78 <xPortStartScheduler+0x134>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f1c3 0307 	rsb	r3, r3, #7
 8007be2:	2b04      	cmp	r3, #4
 8007be4:	d00a      	beq.n	8007bfc <xPortStartScheduler+0xb8>
        __asm volatile
 8007be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	60bb      	str	r3, [r7, #8]
    }
 8007bf8:	bf00      	nop
 8007bfa:	e7fe      	b.n	8007bfa <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007bfc:	4b1e      	ldr	r3, [pc, #120]	; (8007c78 <xPortStartScheduler+0x134>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	021b      	lsls	r3, r3, #8
 8007c02:	4a1d      	ldr	r2, [pc, #116]	; (8007c78 <xPortStartScheduler+0x134>)
 8007c04:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c06:	4b1c      	ldr	r3, [pc, #112]	; (8007c78 <xPortStartScheduler+0x134>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c0e:	4a1a      	ldr	r2, [pc, #104]	; (8007c78 <xPortStartScheduler+0x134>)
 8007c10:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	b2da      	uxtb	r2, r3
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007c1a:	4b18      	ldr	r3, [pc, #96]	; (8007c7c <xPortStartScheduler+0x138>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a17      	ldr	r2, [pc, #92]	; (8007c7c <xPortStartScheduler+0x138>)
 8007c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c24:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007c26:	4b15      	ldr	r3, [pc, #84]	; (8007c7c <xPortStartScheduler+0x138>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a14      	ldr	r2, [pc, #80]	; (8007c7c <xPortStartScheduler+0x138>)
 8007c2c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007c30:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007c32:	f000 f8e3 	bl	8007dfc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007c36:	4b12      	ldr	r3, [pc, #72]	; (8007c80 <xPortStartScheduler+0x13c>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007c3c:	f000 f902 	bl	8007e44 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c40:	4b10      	ldr	r3, [pc, #64]	; (8007c84 <xPortStartScheduler+0x140>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a0f      	ldr	r2, [pc, #60]	; (8007c84 <xPortStartScheduler+0x140>)
 8007c46:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007c4a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007c4c:	f7ff ff64 	bl	8007b18 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007c50:	f7ff f8e0 	bl	8006e14 <vTaskSwitchContext>
    prvTaskExitError();
 8007c54:	f7ff ff1c 	bl	8007a90 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3718      	adds	r7, #24
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	e000ed00 	.word	0xe000ed00
 8007c68:	410fc271 	.word	0x410fc271
 8007c6c:	410fc270 	.word	0x410fc270
 8007c70:	e000e400 	.word	0xe000e400
 8007c74:	200006fc 	.word	0x200006fc
 8007c78:	20000700 	.word	0x20000700
 8007c7c:	e000ed20 	.word	0xe000ed20
 8007c80:	20000010 	.word	0x20000010
 8007c84:	e000ef34 	.word	0xe000ef34

08007c88 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
        __asm volatile
 8007c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	607b      	str	r3, [r7, #4]
    }
 8007ca0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007ca2:	4b0f      	ldr	r3, [pc, #60]	; (8007ce0 <vPortEnterCritical+0x58>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	4a0d      	ldr	r2, [pc, #52]	; (8007ce0 <vPortEnterCritical+0x58>)
 8007caa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007cac:	4b0c      	ldr	r3, [pc, #48]	; (8007ce0 <vPortEnterCritical+0x58>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d10f      	bne.n	8007cd4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007cb4:	4b0b      	ldr	r3, [pc, #44]	; (8007ce4 <vPortEnterCritical+0x5c>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00a      	beq.n	8007cd4 <vPortEnterCritical+0x4c>
        __asm volatile
 8007cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	603b      	str	r3, [r7, #0]
    }
 8007cd0:	bf00      	nop
 8007cd2:	e7fe      	b.n	8007cd2 <vPortEnterCritical+0x4a>
    }
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	20000010 	.word	0x20000010
 8007ce4:	e000ed04 	.word	0xe000ed04

08007ce8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007cee:	4b12      	ldr	r3, [pc, #72]	; (8007d38 <vPortExitCritical+0x50>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10a      	bne.n	8007d0c <vPortExitCritical+0x24>
        __asm volatile
 8007cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	607b      	str	r3, [r7, #4]
    }
 8007d08:	bf00      	nop
 8007d0a:	e7fe      	b.n	8007d0a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8007d0c:	4b0a      	ldr	r3, [pc, #40]	; (8007d38 <vPortExitCritical+0x50>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	3b01      	subs	r3, #1
 8007d12:	4a09      	ldr	r2, [pc, #36]	; (8007d38 <vPortExitCritical+0x50>)
 8007d14:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007d16:	4b08      	ldr	r3, [pc, #32]	; (8007d38 <vPortExitCritical+0x50>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d105      	bne.n	8007d2a <vPortExitCritical+0x42>
 8007d1e:	2300      	movs	r3, #0
 8007d20:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8007d28:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007d2a:	bf00      	nop
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	20000010 	.word	0x20000010
 8007d3c:	00000000 	.word	0x00000000

08007d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007d40:	f3ef 8009 	mrs	r0, PSP
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	4b15      	ldr	r3, [pc, #84]	; (8007da0 <pxCurrentTCBConst>)
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	f01e 0f10 	tst.w	lr, #16
 8007d50:	bf08      	it	eq
 8007d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d5a:	6010      	str	r0, [r2, #0]
 8007d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d64:	f380 8811 	msr	BASEPRI, r0
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f7ff f850 	bl	8006e14 <vTaskSwitchContext>
 8007d74:	f04f 0000 	mov.w	r0, #0
 8007d78:	f380 8811 	msr	BASEPRI, r0
 8007d7c:	bc09      	pop	{r0, r3}
 8007d7e:	6819      	ldr	r1, [r3, #0]
 8007d80:	6808      	ldr	r0, [r1, #0]
 8007d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d86:	f01e 0f10 	tst.w	lr, #16
 8007d8a:	bf08      	it	eq
 8007d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d90:	f380 8809 	msr	PSP, r0
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	f3af 8000 	nop.w

08007da0 <pxCurrentTCBConst>:
 8007da0:	200005bc 	.word	0x200005bc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007da4:	bf00      	nop
 8007da6:	bf00      	nop

08007da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
        __asm volatile
 8007dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	607b      	str	r3, [r7, #4]
    }
 8007dc0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8007dc2:	f001 fc5d 	bl	8009680 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007dc6:	f7fe ff0b 	bl	8006be0 <xTaskIncrementTick>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d006      	beq.n	8007dde <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8007dd0:	f001 fcb4 	bl	800973c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007dd4:	4b08      	ldr	r3, [pc, #32]	; (8007df8 <SysTick_Handler+0x50>)
 8007dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dda:	601a      	str	r2, [r3, #0]
 8007ddc:	e001      	b.n	8007de2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8007dde:	f001 fc91 	bl	8009704 <SEGGER_SYSVIEW_RecordExitISR>
 8007de2:	2300      	movs	r3, #0
 8007de4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	f383 8811 	msr	BASEPRI, r3
    }
 8007dec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8007dee:	bf00      	nop
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	e000ed04 	.word	0xe000ed04

08007dfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e00:	4b0b      	ldr	r3, [pc, #44]	; (8007e30 <vPortSetupTimerInterrupt+0x34>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e06:	4b0b      	ldr	r3, [pc, #44]	; (8007e34 <vPortSetupTimerInterrupt+0x38>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e0c:	4b0a      	ldr	r3, [pc, #40]	; (8007e38 <vPortSetupTimerInterrupt+0x3c>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a0a      	ldr	r2, [pc, #40]	; (8007e3c <vPortSetupTimerInterrupt+0x40>)
 8007e12:	fba2 2303 	umull	r2, r3, r2, r3
 8007e16:	099b      	lsrs	r3, r3, #6
 8007e18:	4a09      	ldr	r2, [pc, #36]	; (8007e40 <vPortSetupTimerInterrupt+0x44>)
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e1e:	4b04      	ldr	r3, [pc, #16]	; (8007e30 <vPortSetupTimerInterrupt+0x34>)
 8007e20:	2207      	movs	r2, #7
 8007e22:	601a      	str	r2, [r3, #0]
}
 8007e24:	bf00      	nop
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	e000e010 	.word	0xe000e010
 8007e34:	e000e018 	.word	0xe000e018
 8007e38:	20000000 	.word	0x20000000
 8007e3c:	10624dd3 	.word	0x10624dd3
 8007e40:	e000e014 	.word	0xe000e014

08007e44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007e44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007e54 <vPortEnableVFP+0x10>
 8007e48:	6801      	ldr	r1, [r0, #0]
 8007e4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007e4e:	6001      	str	r1, [r0, #0]
 8007e50:	4770      	bx	lr
 8007e52:	0000      	.short	0x0000
 8007e54:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007e58:	bf00      	nop
 8007e5a:	bf00      	nop

08007e5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007e62:	f3ef 8305 	mrs	r3, IPSR
 8007e66:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2b0f      	cmp	r3, #15
 8007e6c:	d914      	bls.n	8007e98 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e6e:	4a17      	ldr	r2, [pc, #92]	; (8007ecc <vPortValidateInterruptPriority+0x70>)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4413      	add	r3, r2
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e78:	4b15      	ldr	r3, [pc, #84]	; (8007ed0 <vPortValidateInterruptPriority+0x74>)
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	7afa      	ldrb	r2, [r7, #11]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d20a      	bcs.n	8007e98 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8007e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	607b      	str	r3, [r7, #4]
    }
 8007e94:	bf00      	nop
 8007e96:	e7fe      	b.n	8007e96 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e98:	4b0e      	ldr	r3, [pc, #56]	; (8007ed4 <vPortValidateInterruptPriority+0x78>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ea0:	4b0d      	ldr	r3, [pc, #52]	; (8007ed8 <vPortValidateInterruptPriority+0x7c>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d90a      	bls.n	8007ebe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eac:	f383 8811 	msr	BASEPRI, r3
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	603b      	str	r3, [r7, #0]
    }
 8007eba:	bf00      	nop
 8007ebc:	e7fe      	b.n	8007ebc <vPortValidateInterruptPriority+0x60>
    }
 8007ebe:	bf00      	nop
 8007ec0:	3714      	adds	r7, #20
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	e000e3f0 	.word	0xe000e3f0
 8007ed0:	200006fc 	.word	0x200006fc
 8007ed4:	e000ed0c 	.word	0xe000ed0c
 8007ed8:	20000700 	.word	0x20000700

08007edc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b08a      	sub	sp, #40	; 0x28
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8007ee8:	f7fe fd4a 	bl	8006980 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007eec:	4b53      	ldr	r3, [pc, #332]	; (800803c <pvPortMalloc+0x160>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d101      	bne.n	8007ef8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007ef4:	f000 f908 	bl	8008108 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d012      	beq.n	8007f24 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8007efe:	2208      	movs	r2, #8
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f003 0307 	and.w	r3, r3, #7
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	3308      	adds	r3, #8
 8007f0a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	43db      	mvns	r3, r3
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d804      	bhi.n	8007f20 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	607b      	str	r3, [r7, #4]
 8007f1e:	e001      	b.n	8007f24 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8007f20:	2300      	movs	r3, #0
 8007f22:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	db70      	blt.n	800800c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d06d      	beq.n	800800c <pvPortMalloc+0x130>
 8007f30:	4b43      	ldr	r3, [pc, #268]	; (8008040 <pvPortMalloc+0x164>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d868      	bhi.n	800800c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007f3a:	4b42      	ldr	r3, [pc, #264]	; (8008044 <pvPortMalloc+0x168>)
 8007f3c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007f3e:	4b41      	ldr	r3, [pc, #260]	; (8008044 <pvPortMalloc+0x168>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f44:	e004      	b.n	8007f50 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d903      	bls.n	8007f62 <pvPortMalloc+0x86>
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1f1      	bne.n	8007f46 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007f62:	4b36      	ldr	r3, [pc, #216]	; (800803c <pvPortMalloc+0x160>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d04f      	beq.n	800800c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f6c:	6a3b      	ldr	r3, [r7, #32]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2208      	movs	r2, #8
 8007f72:	4413      	add	r3, r2
 8007f74:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f80:	685a      	ldr	r2, [r3, #4]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	1ad2      	subs	r2, r2, r3
 8007f86:	2308      	movs	r3, #8
 8007f88:	005b      	lsls	r3, r3, #1
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d91f      	bls.n	8007fce <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4413      	add	r3, r2
 8007f94:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	f003 0307 	and.w	r3, r3, #7
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00a      	beq.n	8007fb6 <pvPortMalloc+0xda>
        __asm volatile
 8007fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	613b      	str	r3, [r7, #16]
    }
 8007fb2:	bf00      	nop
 8007fb4:	e7fe      	b.n	8007fb4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb8:	685a      	ldr	r2, [r3, #4]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	1ad2      	subs	r2, r2, r3
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007fc8:	6978      	ldr	r0, [r7, #20]
 8007fca:	f000 f8f9 	bl	80081c0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007fce:	4b1c      	ldr	r3, [pc, #112]	; (8008040 <pvPortMalloc+0x164>)
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	4a19      	ldr	r2, [pc, #100]	; (8008040 <pvPortMalloc+0x164>)
 8007fda:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007fdc:	4b18      	ldr	r3, [pc, #96]	; (8008040 <pvPortMalloc+0x164>)
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	4b19      	ldr	r3, [pc, #100]	; (8008048 <pvPortMalloc+0x16c>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d203      	bcs.n	8007ff0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007fe8:	4b15      	ldr	r3, [pc, #84]	; (8008040 <pvPortMalloc+0x164>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a16      	ldr	r2, [pc, #88]	; (8008048 <pvPortMalloc+0x16c>)
 8007fee:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	2200      	movs	r2, #0
 8008000:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008002:	4b12      	ldr	r3, [pc, #72]	; (800804c <pvPortMalloc+0x170>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	3301      	adds	r3, #1
 8008008:	4a10      	ldr	r2, [pc, #64]	; (800804c <pvPortMalloc+0x170>)
 800800a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800800c:	f7fe fcc6 	bl	800699c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	f003 0307 	and.w	r3, r3, #7
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00a      	beq.n	8008030 <pvPortMalloc+0x154>
        __asm volatile
 800801a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	60fb      	str	r3, [r7, #12]
    }
 800802c:	bf00      	nop
 800802e:	e7fe      	b.n	800802e <pvPortMalloc+0x152>
    return pvReturn;
 8008030:	69fb      	ldr	r3, [r7, #28]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3728      	adds	r7, #40	; 0x28
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	2001330c 	.word	0x2001330c
 8008040:	20013310 	.word	0x20013310
 8008044:	20013304 	.word	0x20013304
 8008048:	20013314 	.word	0x20013314
 800804c:	20013318 	.word	0x20013318

08008050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d049      	beq.n	80080f6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008062:	2308      	movs	r3, #8
 8008064:	425b      	negs	r3, r3
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	4413      	add	r3, r2
 800806a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	db0a      	blt.n	800808e <vPortFree+0x3e>
        __asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	60fb      	str	r3, [r7, #12]
    }
 800808a:	bf00      	nop
 800808c:	e7fe      	b.n	800808c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00a      	beq.n	80080ac <vPortFree+0x5c>
        __asm volatile
 8008096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809a:	f383 8811 	msr	BASEPRI, r3
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f3bf 8f4f 	dsb	sy
 80080a6:	60bb      	str	r3, [r7, #8]
    }
 80080a8:	bf00      	nop
 80080aa:	e7fe      	b.n	80080aa <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	0fdb      	lsrs	r3, r3, #31
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d01c      	beq.n	80080f6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d118      	bne.n	80080f6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80080d0:	f7fe fc56 	bl	8006980 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	4b09      	ldr	r3, [pc, #36]	; (8008100 <vPortFree+0xb0>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4413      	add	r3, r2
 80080de:	4a08      	ldr	r2, [pc, #32]	; (8008100 <vPortFree+0xb0>)
 80080e0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80080e2:	6938      	ldr	r0, [r7, #16]
 80080e4:	f000 f86c 	bl	80081c0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80080e8:	4b06      	ldr	r3, [pc, #24]	; (8008104 <vPortFree+0xb4>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	3301      	adds	r3, #1
 80080ee:	4a05      	ldr	r2, [pc, #20]	; (8008104 <vPortFree+0xb4>)
 80080f0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80080f2:	f7fe fc53 	bl	800699c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80080f6:	bf00      	nop
 80080f8:	3718      	adds	r7, #24
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	20013310 	.word	0x20013310
 8008104:	2001331c 	.word	0x2001331c

08008108 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800810e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8008112:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008114:	4b25      	ldr	r3, [pc, #148]	; (80081ac <prvHeapInit+0xa4>)
 8008116:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f003 0307 	and.w	r3, r3, #7
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00c      	beq.n	800813c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	3307      	adds	r3, #7
 8008126:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f023 0307 	bic.w	r3, r3, #7
 800812e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	4a1d      	ldr	r2, [pc, #116]	; (80081ac <prvHeapInit+0xa4>)
 8008138:	4413      	add	r3, r2
 800813a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008140:	4a1b      	ldr	r2, [pc, #108]	; (80081b0 <prvHeapInit+0xa8>)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008146:	4b1a      	ldr	r3, [pc, #104]	; (80081b0 <prvHeapInit+0xa8>)
 8008148:	2200      	movs	r2, #0
 800814a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	4413      	add	r3, r2
 8008152:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008154:	2208      	movs	r2, #8
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	1a9b      	subs	r3, r3, r2
 800815a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f023 0307 	bic.w	r3, r3, #7
 8008162:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	4a13      	ldr	r2, [pc, #76]	; (80081b4 <prvHeapInit+0xac>)
 8008168:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800816a:	4b12      	ldr	r3, [pc, #72]	; (80081b4 <prvHeapInit+0xac>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2200      	movs	r2, #0
 8008170:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008172:	4b10      	ldr	r3, [pc, #64]	; (80081b4 <prvHeapInit+0xac>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2200      	movs	r2, #0
 8008178:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	1ad2      	subs	r2, r2, r3
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008188:	4b0a      	ldr	r3, [pc, #40]	; (80081b4 <prvHeapInit+0xac>)
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	4a08      	ldr	r2, [pc, #32]	; (80081b8 <prvHeapInit+0xb0>)
 8008196:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	4a07      	ldr	r2, [pc, #28]	; (80081bc <prvHeapInit+0xb4>)
 800819e:	6013      	str	r3, [r2, #0]
}
 80081a0:	bf00      	nop
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr
 80081ac:	20000704 	.word	0x20000704
 80081b0:	20013304 	.word	0x20013304
 80081b4:	2001330c 	.word	0x2001330c
 80081b8:	20013314 	.word	0x20013314
 80081bc:	20013310 	.word	0x20013310

080081c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80081c8:	4b28      	ldr	r3, [pc, #160]	; (800826c <prvInsertBlockIntoFreeList+0xac>)
 80081ca:	60fb      	str	r3, [r7, #12]
 80081cc:	e002      	b.n	80081d4 <prvInsertBlockIntoFreeList+0x14>
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	60fb      	str	r3, [r7, #12]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d8f7      	bhi.n	80081ce <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	68ba      	ldr	r2, [r7, #8]
 80081e8:	4413      	add	r3, r2
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d108      	bne.n	8008202 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	685a      	ldr	r2, [r3, #4]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	441a      	add	r2, r3
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	441a      	add	r2, r3
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	429a      	cmp	r2, r3
 8008214:	d118      	bne.n	8008248 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	4b15      	ldr	r3, [pc, #84]	; (8008270 <prvInsertBlockIntoFreeList+0xb0>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	429a      	cmp	r2, r3
 8008220:	d00d      	beq.n	800823e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	441a      	add	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	601a      	str	r2, [r3, #0]
 800823c:	e008      	b.n	8008250 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800823e:	4b0c      	ldr	r3, [pc, #48]	; (8008270 <prvInsertBlockIntoFreeList+0xb0>)
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	601a      	str	r2, [r3, #0]
 8008246:	e003      	b.n	8008250 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	429a      	cmp	r2, r3
 8008256:	d002      	beq.n	800825e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800825e:	bf00      	nop
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	20013304 	.word	0x20013304
 8008270:	2001330c 	.word	0x2001330c

08008274 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8008274:	b580      	push	{r7, lr}
 8008276:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8008278:	4803      	ldr	r0, [pc, #12]	; (8008288 <_cbSendSystemDesc+0x14>)
 800827a:	f001 f9ab 	bl	80095d4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800827e:	4803      	ldr	r0, [pc, #12]	; (800828c <_cbSendSystemDesc+0x18>)
 8008280:	f001 f9a8 	bl	80095d4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8008284:	bf00      	nop
 8008286:	bd80      	pop	{r7, pc}
 8008288:	08009dac 	.word	0x08009dac
 800828c:	08009de4 	.word	0x08009de4

08008290 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8008290:	b580      	push	{r7, lr}
 8008292:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8008294:	4b06      	ldr	r3, [pc, #24]	; (80082b0 <SEGGER_SYSVIEW_Conf+0x20>)
 8008296:	6818      	ldr	r0, [r3, #0]
 8008298:	4b05      	ldr	r3, [pc, #20]	; (80082b0 <SEGGER_SYSVIEW_Conf+0x20>)
 800829a:	6819      	ldr	r1, [r3, #0]
 800829c:	4b05      	ldr	r3, [pc, #20]	; (80082b4 <SEGGER_SYSVIEW_Conf+0x24>)
 800829e:	4a06      	ldr	r2, [pc, #24]	; (80082b8 <SEGGER_SYSVIEW_Conf+0x28>)
 80082a0:	f000 fd16 	bl	8008cd0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80082a4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80082a8:	f000 fd56 	bl	8008d58 <SEGGER_SYSVIEW_SetRAMBase>
}
 80082ac:	bf00      	nop
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	20000000 	.word	0x20000000
 80082b4:	08008275 	.word	0x08008275
 80082b8:	08009e84 	.word	0x08009e84

080082bc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80082bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082be:	b085      	sub	sp, #20
 80082c0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80082c2:	2300      	movs	r3, #0
 80082c4:	607b      	str	r3, [r7, #4]
 80082c6:	e033      	b.n	8008330 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80082c8:	491e      	ldr	r1, [pc, #120]	; (8008344 <_cbSendTaskList+0x88>)
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	4613      	mov	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	440b      	add	r3, r1
 80082d6:	6818      	ldr	r0, [r3, #0]
 80082d8:	491a      	ldr	r1, [pc, #104]	; (8008344 <_cbSendTaskList+0x88>)
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	4613      	mov	r3, r2
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	4413      	add	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	440b      	add	r3, r1
 80082e6:	3304      	adds	r3, #4
 80082e8:	6819      	ldr	r1, [r3, #0]
 80082ea:	4c16      	ldr	r4, [pc, #88]	; (8008344 <_cbSendTaskList+0x88>)
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	4613      	mov	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4413      	add	r3, r2
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	4423      	add	r3, r4
 80082f8:	3308      	adds	r3, #8
 80082fa:	681c      	ldr	r4, [r3, #0]
 80082fc:	4d11      	ldr	r5, [pc, #68]	; (8008344 <_cbSendTaskList+0x88>)
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	4613      	mov	r3, r2
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	4413      	add	r3, r2
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	442b      	add	r3, r5
 800830a:	330c      	adds	r3, #12
 800830c:	681d      	ldr	r5, [r3, #0]
 800830e:	4e0d      	ldr	r6, [pc, #52]	; (8008344 <_cbSendTaskList+0x88>)
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	4613      	mov	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4413      	add	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4433      	add	r3, r6
 800831c:	3310      	adds	r3, #16
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	462b      	mov	r3, r5
 8008324:	4622      	mov	r2, r4
 8008326:	f000 f8bd 	bl	80084a4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	3301      	adds	r3, #1
 800832e:	607b      	str	r3, [r7, #4]
 8008330:	4b05      	ldr	r3, [pc, #20]	; (8008348 <_cbSendTaskList+0x8c>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	429a      	cmp	r2, r3
 8008338:	d3c6      	bcc.n	80082c8 <_cbSendTaskList+0xc>
  }
}
 800833a:	bf00      	nop
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008344:	20013320 	.word	0x20013320
 8008348:	200133c0 	.word	0x200133c0

0800834c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800834c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008350:	b082      	sub	sp, #8
 8008352:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8008354:	f7fe fc32 	bl	8006bbc <xTaskGetTickCountFromISR>
 8008358:	4603      	mov	r3, r0
 800835a:	2200      	movs	r2, #0
 800835c:	469a      	mov	sl, r3
 800835e:	4693      	mov	fp, r2
 8008360:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8008364:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008368:	4602      	mov	r2, r0
 800836a:	460b      	mov	r3, r1
 800836c:	f04f 0a00 	mov.w	sl, #0
 8008370:	f04f 0b00 	mov.w	fp, #0
 8008374:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8008378:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800837c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8008380:	4652      	mov	r2, sl
 8008382:	465b      	mov	r3, fp
 8008384:	1a14      	subs	r4, r2, r0
 8008386:	eb63 0501 	sbc.w	r5, r3, r1
 800838a:	f04f 0200 	mov.w	r2, #0
 800838e:	f04f 0300 	mov.w	r3, #0
 8008392:	00ab      	lsls	r3, r5, #2
 8008394:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8008398:	00a2      	lsls	r2, r4, #2
 800839a:	4614      	mov	r4, r2
 800839c:	461d      	mov	r5, r3
 800839e:	eb14 0800 	adds.w	r8, r4, r0
 80083a2:	eb45 0901 	adc.w	r9, r5, r1
 80083a6:	f04f 0200 	mov.w	r2, #0
 80083aa:	f04f 0300 	mov.w	r3, #0
 80083ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80083b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80083b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80083ba:	4690      	mov	r8, r2
 80083bc:	4699      	mov	r9, r3
 80083be:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80083c2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80083c6:	4610      	mov	r0, r2
 80083c8:	4619      	mov	r1, r3
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080083d4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b086      	sub	sp, #24
 80083d8:	af02      	add	r7, sp, #8
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
 80083e0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80083e2:	2205      	movs	r2, #5
 80083e4:	492b      	ldr	r1, [pc, #172]	; (8008494 <SYSVIEW_AddTask+0xc0>)
 80083e6:	68b8      	ldr	r0, [r7, #8]
 80083e8:	f001 fbee 	bl	8009bc8 <memcmp>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d04b      	beq.n	800848a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80083f2:	4b29      	ldr	r3, [pc, #164]	; (8008498 <SYSVIEW_AddTask+0xc4>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2b07      	cmp	r3, #7
 80083f8:	d903      	bls.n	8008402 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80083fa:	4828      	ldr	r0, [pc, #160]	; (800849c <SYSVIEW_AddTask+0xc8>)
 80083fc:	f001 fb88 	bl	8009b10 <SEGGER_SYSVIEW_Warn>
    return;
 8008400:	e044      	b.n	800848c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8008402:	4b25      	ldr	r3, [pc, #148]	; (8008498 <SYSVIEW_AddTask+0xc4>)
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	4926      	ldr	r1, [pc, #152]	; (80084a0 <SYSVIEW_AddTask+0xcc>)
 8008408:	4613      	mov	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	4413      	add	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	440b      	add	r3, r1
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8008416:	4b20      	ldr	r3, [pc, #128]	; (8008498 <SYSVIEW_AddTask+0xc4>)
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	4921      	ldr	r1, [pc, #132]	; (80084a0 <SYSVIEW_AddTask+0xcc>)
 800841c:	4613      	mov	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4413      	add	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	440b      	add	r3, r1
 8008426:	3304      	adds	r3, #4
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800842c:	4b1a      	ldr	r3, [pc, #104]	; (8008498 <SYSVIEW_AddTask+0xc4>)
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	491b      	ldr	r1, [pc, #108]	; (80084a0 <SYSVIEW_AddTask+0xcc>)
 8008432:	4613      	mov	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4413      	add	r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	440b      	add	r3, r1
 800843c:	3308      	adds	r3, #8
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8008442:	4b15      	ldr	r3, [pc, #84]	; (8008498 <SYSVIEW_AddTask+0xc4>)
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	4916      	ldr	r1, [pc, #88]	; (80084a0 <SYSVIEW_AddTask+0xcc>)
 8008448:	4613      	mov	r3, r2
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	4413      	add	r3, r2
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	440b      	add	r3, r1
 8008452:	330c      	adds	r3, #12
 8008454:	683a      	ldr	r2, [r7, #0]
 8008456:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8008458:	4b0f      	ldr	r3, [pc, #60]	; (8008498 <SYSVIEW_AddTask+0xc4>)
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	4910      	ldr	r1, [pc, #64]	; (80084a0 <SYSVIEW_AddTask+0xcc>)
 800845e:	4613      	mov	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	440b      	add	r3, r1
 8008468:	3310      	adds	r3, #16
 800846a:	69ba      	ldr	r2, [r7, #24]
 800846c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800846e:	4b0a      	ldr	r3, [pc, #40]	; (8008498 <SYSVIEW_AddTask+0xc4>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	3301      	adds	r3, #1
 8008474:	4a08      	ldr	r2, [pc, #32]	; (8008498 <SYSVIEW_AddTask+0xc4>)
 8008476:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	68b9      	ldr	r1, [r7, #8]
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f000 f80e 	bl	80084a4 <SYSVIEW_SendTaskInfo>
 8008488:	e000      	b.n	800848c <SYSVIEW_AddTask+0xb8>
    return;
 800848a:	bf00      	nop

}
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	08009df4 	.word	0x08009df4
 8008498:	200133c0 	.word	0x200133c0
 800849c:	08009dfc 	.word	0x08009dfc
 80084a0:	20013320 	.word	0x20013320

080084a4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b08a      	sub	sp, #40	; 0x28
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
 80084b0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80084b2:	f107 0314 	add.w	r3, r7, #20
 80084b6:	2214      	movs	r2, #20
 80084b8:	2100      	movs	r1, #0
 80084ba:	4618      	mov	r0, r3
 80084bc:	f001 fb94 	bl	8009be8 <memset>
  TaskInfo.TaskID     = TaskID;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80084d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80084d4:	f107 0314 	add.w	r3, r7, #20
 80084d8:	4618      	mov	r0, r3
 80084da:	f000 ff83 	bl	80093e4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80084de:	bf00      	nop
 80084e0:	3728      	adds	r7, #40	; 0x28
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
	...

080084e8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80084ee:	4b24      	ldr	r3, [pc, #144]	; (8008580 <_DoInit+0x98>)
 80084f0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2203      	movs	r2, #3
 80084f6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2203      	movs	r2, #3
 80084fc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a20      	ldr	r2, [pc, #128]	; (8008584 <_DoInit+0x9c>)
 8008502:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a20      	ldr	r2, [pc, #128]	; (8008588 <_DoInit+0xa0>)
 8008508:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008510:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a17      	ldr	r2, [pc, #92]	; (8008584 <_DoInit+0x9c>)
 8008528:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a17      	ldr	r2, [pc, #92]	; (800858c <_DoInit+0xa4>)
 800852e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2210      	movs	r2, #16
 8008534:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	3307      	adds	r3, #7
 800854c:	4a10      	ldr	r2, [pc, #64]	; (8008590 <_DoInit+0xa8>)
 800854e:	6810      	ldr	r0, [r2, #0]
 8008550:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8008552:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a0e      	ldr	r2, [pc, #56]	; (8008594 <_DoInit+0xac>)
 800855a:	6810      	ldr	r0, [r2, #0]
 800855c:	6018      	str	r0, [r3, #0]
 800855e:	8891      	ldrh	r1, [r2, #4]
 8008560:	7992      	ldrb	r2, [r2, #6]
 8008562:	8099      	strh	r1, [r3, #4]
 8008564:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8008566:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2220      	movs	r2, #32
 800856e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8008570:	f3bf 8f5f 	dmb	sy
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr
 8008580:	200133c4 	.word	0x200133c4
 8008584:	08009e4c 	.word	0x08009e4c
 8008588:	2001346c 	.word	0x2001346c
 800858c:	2001386c 	.word	0x2001386c
 8008590:	08009e58 	.word	0x08009e58
 8008594:	08009e5c 	.word	0x08009e5c

08008598 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8008598:	b580      	push	{r7, lr}
 800859a:	b08c      	sub	sp, #48	; 0x30
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80085a4:	4b3e      	ldr	r3, [pc, #248]	; (80086a0 <SEGGER_RTT_ReadNoLock+0x108>)
 80085a6:	623b      	str	r3, [r7, #32]
 80085a8:	6a3b      	ldr	r3, [r7, #32]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d101      	bne.n	80085b6 <SEGGER_RTT_ReadNoLock+0x1e>
 80085b2:	f7ff ff99 	bl	80084e8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	4613      	mov	r3, r2
 80085ba:	005b      	lsls	r3, r3, #1
 80085bc:	4413      	add	r3, r2
 80085be:	00db      	lsls	r3, r3, #3
 80085c0:	3360      	adds	r3, #96	; 0x60
 80085c2:	4a37      	ldr	r2, [pc, #220]	; (80086a0 <SEGGER_RTT_ReadNoLock+0x108>)
 80085c4:	4413      	add	r3, r2
 80085c6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80085d8:	2300      	movs	r3, #0
 80085da:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80085dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d92b      	bls.n	800863c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	689a      	ldr	r2, [r3, #8]
 80085e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4293      	cmp	r3, r2
 80085f4:	bf28      	it	cs
 80085f6:	4613      	movcs	r3, r2
 80085f8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	685a      	ldr	r2, [r3, #4]
 80085fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008600:	4413      	add	r3, r2
 8008602:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008604:	697a      	ldr	r2, [r7, #20]
 8008606:	6939      	ldr	r1, [r7, #16]
 8008608:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800860a:	f001 fb19 	bl	8009c40 <memcpy>
    NumBytesRead += NumBytesRem;
 800860e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	4413      	add	r3, r2
 8008614:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8008616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	4413      	add	r3, r2
 800861c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	4413      	add	r3, r2
 800862c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008634:	429a      	cmp	r2, r3
 8008636:	d101      	bne.n	800863c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8008638:	2300      	movs	r3, #0
 800863a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800863c:	69ba      	ldr	r2, [r7, #24]
 800863e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4293      	cmp	r3, r2
 800864a:	bf28      	it	cs
 800864c:	4613      	movcs	r3, r2
 800864e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d019      	beq.n	800868a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	685a      	ldr	r2, [r3, #4]
 800865a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865c:	4413      	add	r3, r2
 800865e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	6939      	ldr	r1, [r7, #16]
 8008664:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008666:	f001 faeb 	bl	8009c40 <memcpy>
    NumBytesRead += NumBytesRem;
 800866a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	4413      	add	r3, r2
 8008670:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8008672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	4413      	add	r3, r2
 8008678:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	4413      	add	r3, r2
 8008688:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800868a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868c:	2b00      	cmp	r3, #0
 800868e:	d002      	beq.n	8008696 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008694:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8008696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008698:	4618      	mov	r0, r3
 800869a:	3730      	adds	r7, #48	; 0x30
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	200133c4 	.word	0x200133c4

080086a4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b088      	sub	sp, #32
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
 80086b0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80086b2:	4b3d      	ldr	r3, [pc, #244]	; (80087a8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80086b4:	61bb      	str	r3, [r7, #24]
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d101      	bne.n	80086c4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80086c0:	f7ff ff12 	bl	80084e8 <_DoInit>
  SEGGER_RTT_LOCK();
 80086c4:	f3ef 8311 	mrs	r3, BASEPRI
 80086c8:	f04f 0120 	mov.w	r1, #32
 80086cc:	f381 8811 	msr	BASEPRI, r1
 80086d0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80086d2:	4b35      	ldr	r3, [pc, #212]	; (80087a8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80086d4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80086d6:	2300      	movs	r3, #0
 80086d8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80086da:	6939      	ldr	r1, [r7, #16]
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	1c5a      	adds	r2, r3, #1
 80086e0:	4613      	mov	r3, r2
 80086e2:	005b      	lsls	r3, r3, #1
 80086e4:	4413      	add	r3, r2
 80086e6:	00db      	lsls	r3, r3, #3
 80086e8:	440b      	add	r3, r1
 80086ea:	3304      	adds	r3, #4
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d008      	beq.n	8008704 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	3301      	adds	r3, #1
 80086f6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	69fa      	ldr	r2, [r7, #28]
 80086fe:	429a      	cmp	r2, r3
 8008700:	dbeb      	blt.n	80086da <SEGGER_RTT_AllocUpBuffer+0x36>
 8008702:	e000      	b.n	8008706 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8008704:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	69fa      	ldr	r2, [r7, #28]
 800870c:	429a      	cmp	r2, r3
 800870e:	da3f      	bge.n	8008790 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8008710:	6939      	ldr	r1, [r7, #16]
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	1c5a      	adds	r2, r3, #1
 8008716:	4613      	mov	r3, r2
 8008718:	005b      	lsls	r3, r3, #1
 800871a:	4413      	add	r3, r2
 800871c:	00db      	lsls	r3, r3, #3
 800871e:	440b      	add	r3, r1
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8008724:	6939      	ldr	r1, [r7, #16]
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	1c5a      	adds	r2, r3, #1
 800872a:	4613      	mov	r3, r2
 800872c:	005b      	lsls	r3, r3, #1
 800872e:	4413      	add	r3, r2
 8008730:	00db      	lsls	r3, r3, #3
 8008732:	440b      	add	r3, r1
 8008734:	3304      	adds	r3, #4
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800873a:	6939      	ldr	r1, [r7, #16]
 800873c:	69fa      	ldr	r2, [r7, #28]
 800873e:	4613      	mov	r3, r2
 8008740:	005b      	lsls	r3, r3, #1
 8008742:	4413      	add	r3, r2
 8008744:	00db      	lsls	r3, r3, #3
 8008746:	440b      	add	r3, r1
 8008748:	3320      	adds	r3, #32
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800874e:	6939      	ldr	r1, [r7, #16]
 8008750:	69fa      	ldr	r2, [r7, #28]
 8008752:	4613      	mov	r3, r2
 8008754:	005b      	lsls	r3, r3, #1
 8008756:	4413      	add	r3, r2
 8008758:	00db      	lsls	r3, r3, #3
 800875a:	440b      	add	r3, r1
 800875c:	3328      	adds	r3, #40	; 0x28
 800875e:	2200      	movs	r2, #0
 8008760:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8008762:	6939      	ldr	r1, [r7, #16]
 8008764:	69fa      	ldr	r2, [r7, #28]
 8008766:	4613      	mov	r3, r2
 8008768:	005b      	lsls	r3, r3, #1
 800876a:	4413      	add	r3, r2
 800876c:	00db      	lsls	r3, r3, #3
 800876e:	440b      	add	r3, r1
 8008770:	3324      	adds	r3, #36	; 0x24
 8008772:	2200      	movs	r2, #0
 8008774:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8008776:	6939      	ldr	r1, [r7, #16]
 8008778:	69fa      	ldr	r2, [r7, #28]
 800877a:	4613      	mov	r3, r2
 800877c:	005b      	lsls	r3, r3, #1
 800877e:	4413      	add	r3, r2
 8008780:	00db      	lsls	r3, r3, #3
 8008782:	440b      	add	r3, r1
 8008784:	332c      	adds	r3, #44	; 0x2c
 8008786:	683a      	ldr	r2, [r7, #0]
 8008788:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800878a:	f3bf 8f5f 	dmb	sy
 800878e:	e002      	b.n	8008796 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8008790:	f04f 33ff 	mov.w	r3, #4294967295
 8008794:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800879c:	69fb      	ldr	r3, [r7, #28]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3720      	adds	r7, #32
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	200133c4 	.word	0x200133c4

080087ac <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b088      	sub	sp, #32
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
 80087b8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80087ba:	4b33      	ldr	r3, [pc, #204]	; (8008888 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80087bc:	61bb      	str	r3, [r7, #24]
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d101      	bne.n	80087cc <SEGGER_RTT_ConfigDownBuffer+0x20>
 80087c8:	f7ff fe8e 	bl	80084e8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80087cc:	4b2e      	ldr	r3, [pc, #184]	; (8008888 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80087ce:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	695b      	ldr	r3, [r3, #20]
 80087d4:	461a      	mov	r2, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	4293      	cmp	r3, r2
 80087da:	d24d      	bcs.n	8008878 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80087dc:	f3ef 8311 	mrs	r3, BASEPRI
 80087e0:	f04f 0120 	mov.w	r1, #32
 80087e4:	f381 8811 	msr	BASEPRI, r1
 80087e8:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d031      	beq.n	8008854 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80087f0:	6979      	ldr	r1, [r7, #20]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	4613      	mov	r3, r2
 80087f6:	005b      	lsls	r3, r3, #1
 80087f8:	4413      	add	r3, r2
 80087fa:	00db      	lsls	r3, r3, #3
 80087fc:	440b      	add	r3, r1
 80087fe:	3360      	adds	r3, #96	; 0x60
 8008800:	68ba      	ldr	r2, [r7, #8]
 8008802:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8008804:	6979      	ldr	r1, [r7, #20]
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	4613      	mov	r3, r2
 800880a:	005b      	lsls	r3, r3, #1
 800880c:	4413      	add	r3, r2
 800880e:	00db      	lsls	r3, r3, #3
 8008810:	440b      	add	r3, r1
 8008812:	3364      	adds	r3, #100	; 0x64
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8008818:	6979      	ldr	r1, [r7, #20]
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	4613      	mov	r3, r2
 800881e:	005b      	lsls	r3, r3, #1
 8008820:	4413      	add	r3, r2
 8008822:	00db      	lsls	r3, r3, #3
 8008824:	440b      	add	r3, r1
 8008826:	3368      	adds	r3, #104	; 0x68
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800882c:	6979      	ldr	r1, [r7, #20]
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	4613      	mov	r3, r2
 8008832:	005b      	lsls	r3, r3, #1
 8008834:	4413      	add	r3, r2
 8008836:	00db      	lsls	r3, r3, #3
 8008838:	440b      	add	r3, r1
 800883a:	3370      	adds	r3, #112	; 0x70
 800883c:	2200      	movs	r2, #0
 800883e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8008840:	6979      	ldr	r1, [r7, #20]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	4613      	mov	r3, r2
 8008846:	005b      	lsls	r3, r3, #1
 8008848:	4413      	add	r3, r2
 800884a:	00db      	lsls	r3, r3, #3
 800884c:	440b      	add	r3, r1
 800884e:	336c      	adds	r3, #108	; 0x6c
 8008850:	2200      	movs	r2, #0
 8008852:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8008854:	6979      	ldr	r1, [r7, #20]
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	4613      	mov	r3, r2
 800885a:	005b      	lsls	r3, r3, #1
 800885c:	4413      	add	r3, r2
 800885e:	00db      	lsls	r3, r3, #3
 8008860:	440b      	add	r3, r1
 8008862:	3374      	adds	r3, #116	; 0x74
 8008864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008866:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008868:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8008872:	2300      	movs	r3, #0
 8008874:	61fb      	str	r3, [r7, #28]
 8008876:	e002      	b.n	800887e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8008878:	f04f 33ff 	mov.w	r3, #4294967295
 800887c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800887e:	69fb      	ldr	r3, [r7, #28]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3720      	adds	r7, #32
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	200133c4 	.word	0x200133c4

0800888c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800888c:	b480      	push	{r7}
 800888e:	b087      	sub	sp, #28
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8008898:	2300      	movs	r3, #0
 800889a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800889c:	e002      	b.n	80088a4 <_EncodeStr+0x18>
    Len++;
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	3301      	adds	r3, #1
 80088a2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	4413      	add	r3, r2
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1f6      	bne.n	800889e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80088b0:	693a      	ldr	r2, [r7, #16]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d901      	bls.n	80088bc <_EncodeStr+0x30>
    Len = Limit;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	2bfe      	cmp	r3, #254	; 0xfe
 80088c0:	d806      	bhi.n	80088d0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	1c5a      	adds	r2, r3, #1
 80088c6:	60fa      	str	r2, [r7, #12]
 80088c8:	693a      	ldr	r2, [r7, #16]
 80088ca:	b2d2      	uxtb	r2, r2
 80088cc:	701a      	strb	r2, [r3, #0]
 80088ce:	e011      	b.n	80088f4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	1c5a      	adds	r2, r3, #1
 80088d4:	60fa      	str	r2, [r7, #12]
 80088d6:	22ff      	movs	r2, #255	; 0xff
 80088d8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	1c5a      	adds	r2, r3, #1
 80088de:	60fa      	str	r2, [r7, #12]
 80088e0:	693a      	ldr	r2, [r7, #16]
 80088e2:	b2d2      	uxtb	r2, r2
 80088e4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	0a19      	lsrs	r1, r3, #8
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	1c5a      	adds	r2, r3, #1
 80088ee:	60fa      	str	r2, [r7, #12]
 80088f0:	b2ca      	uxtb	r2, r1
 80088f2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80088f4:	2300      	movs	r3, #0
 80088f6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80088f8:	e00a      	b.n	8008910 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	1c53      	adds	r3, r2, #1
 80088fe:	60bb      	str	r3, [r7, #8]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	1c59      	adds	r1, r3, #1
 8008904:	60f9      	str	r1, [r7, #12]
 8008906:	7812      	ldrb	r2, [r2, #0]
 8008908:	701a      	strb	r2, [r3, #0]
    n++;
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	3301      	adds	r3, #1
 800890e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8008910:	697a      	ldr	r2, [r7, #20]
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	429a      	cmp	r2, r3
 8008916:	d3f0      	bcc.n	80088fa <_EncodeStr+0x6e>
  }
  return pPayload;
 8008918:	68fb      	ldr	r3, [r7, #12]
}
 800891a:	4618      	mov	r0, r3
 800891c:	371c      	adds	r7, #28
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr

08008926 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8008926:	b480      	push	{r7}
 8008928:	b083      	sub	sp, #12
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	3304      	adds	r3, #4
}
 8008932:	4618      	mov	r0, r3
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
	...

08008940 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008946:	4b35      	ldr	r3, [pc, #212]	; (8008a1c <_HandleIncomingPacket+0xdc>)
 8008948:	7e1b      	ldrb	r3, [r3, #24]
 800894a:	4618      	mov	r0, r3
 800894c:	1cfb      	adds	r3, r7, #3
 800894e:	2201      	movs	r2, #1
 8008950:	4619      	mov	r1, r3
 8008952:	f7ff fe21 	bl	8008598 <SEGGER_RTT_ReadNoLock>
 8008956:	4603      	mov	r3, r0
 8008958:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	dd59      	ble.n	8008a14 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8008960:	78fb      	ldrb	r3, [r7, #3]
 8008962:	2b80      	cmp	r3, #128	; 0x80
 8008964:	d032      	beq.n	80089cc <_HandleIncomingPacket+0x8c>
 8008966:	2b80      	cmp	r3, #128	; 0x80
 8008968:	dc42      	bgt.n	80089f0 <_HandleIncomingPacket+0xb0>
 800896a:	2b07      	cmp	r3, #7
 800896c:	dc16      	bgt.n	800899c <_HandleIncomingPacket+0x5c>
 800896e:	2b00      	cmp	r3, #0
 8008970:	dd3e      	ble.n	80089f0 <_HandleIncomingPacket+0xb0>
 8008972:	3b01      	subs	r3, #1
 8008974:	2b06      	cmp	r3, #6
 8008976:	d83b      	bhi.n	80089f0 <_HandleIncomingPacket+0xb0>
 8008978:	a201      	add	r2, pc, #4	; (adr r2, 8008980 <_HandleIncomingPacket+0x40>)
 800897a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897e:	bf00      	nop
 8008980:	080089a3 	.word	0x080089a3
 8008984:	080089a9 	.word	0x080089a9
 8008988:	080089af 	.word	0x080089af
 800898c:	080089b5 	.word	0x080089b5
 8008990:	080089bb 	.word	0x080089bb
 8008994:	080089c1 	.word	0x080089c1
 8008998:	080089c7 	.word	0x080089c7
 800899c:	2b7f      	cmp	r3, #127	; 0x7f
 800899e:	d034      	beq.n	8008a0a <_HandleIncomingPacket+0xca>
 80089a0:	e026      	b.n	80089f0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80089a2:	f000 fba5 	bl	80090f0 <SEGGER_SYSVIEW_Start>
      break;
 80089a6:	e035      	b.n	8008a14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80089a8:	f000 fc5c 	bl	8009264 <SEGGER_SYSVIEW_Stop>
      break;
 80089ac:	e032      	b.n	8008a14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80089ae:	f000 fe35 	bl	800961c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80089b2:	e02f      	b.n	8008a14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80089b4:	f000 fdfa 	bl	80095ac <SEGGER_SYSVIEW_SendTaskList>
      break;
 80089b8:	e02c      	b.n	8008a14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80089ba:	f000 fc79 	bl	80092b0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80089be:	e029      	b.n	8008a14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80089c0:	f001 f868 	bl	8009a94 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80089c4:	e026      	b.n	8008a14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80089c6:	f001 f847 	bl	8009a58 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80089ca:	e023      	b.n	8008a14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80089cc:	4b13      	ldr	r3, [pc, #76]	; (8008a1c <_HandleIncomingPacket+0xdc>)
 80089ce:	7e1b      	ldrb	r3, [r3, #24]
 80089d0:	4618      	mov	r0, r3
 80089d2:	1cfb      	adds	r3, r7, #3
 80089d4:	2201      	movs	r2, #1
 80089d6:	4619      	mov	r1, r3
 80089d8:	f7ff fdde 	bl	8008598 <SEGGER_RTT_ReadNoLock>
 80089dc:	4603      	mov	r3, r0
 80089de:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	dd13      	ble.n	8008a0e <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80089e6:	78fb      	ldrb	r3, [r7, #3]
 80089e8:	4618      	mov	r0, r3
 80089ea:	f000 ffb5 	bl	8009958 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80089ee:	e00e      	b.n	8008a0e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80089f0:	78fb      	ldrb	r3, [r7, #3]
 80089f2:	b25b      	sxtb	r3, r3
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	da0c      	bge.n	8008a12 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80089f8:	4b08      	ldr	r3, [pc, #32]	; (8008a1c <_HandleIncomingPacket+0xdc>)
 80089fa:	7e1b      	ldrb	r3, [r3, #24]
 80089fc:	4618      	mov	r0, r3
 80089fe:	1cfb      	adds	r3, r7, #3
 8008a00:	2201      	movs	r2, #1
 8008a02:	4619      	mov	r1, r3
 8008a04:	f7ff fdc8 	bl	8008598 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8008a08:	e003      	b.n	8008a12 <_HandleIncomingPacket+0xd2>
      break;
 8008a0a:	bf00      	nop
 8008a0c:	e002      	b.n	8008a14 <_HandleIncomingPacket+0xd4>
      break;
 8008a0e:	bf00      	nop
 8008a10:	e000      	b.n	8008a14 <_HandleIncomingPacket+0xd4>
      break;
 8008a12:	bf00      	nop
    }
  }
}
 8008a14:	bf00      	nop
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	20014884 	.word	0x20014884

08008a20 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b08c      	sub	sp, #48	; 0x30
 8008a24:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8008a26:	2301      	movs	r3, #1
 8008a28:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8008a2a:	1d3b      	adds	r3, r7, #4
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a34:	4b31      	ldr	r3, [pc, #196]	; (8008afc <_TrySendOverflowPacket+0xdc>)
 8008a36:	695b      	ldr	r3, [r3, #20]
 8008a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a3a:	e00b      	b.n	8008a54 <_TrySendOverflowPacket+0x34>
 8008a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3e:	b2da      	uxtb	r2, r3
 8008a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a42:	1c59      	adds	r1, r3, #1
 8008a44:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008a46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a4a:	b2d2      	uxtb	r2, r2
 8008a4c:	701a      	strb	r2, [r3, #0]
 8008a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a50:	09db      	lsrs	r3, r3, #7
 8008a52:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a56:	2b7f      	cmp	r3, #127	; 0x7f
 8008a58:	d8f0      	bhi.n	8008a3c <_TrySendOverflowPacket+0x1c>
 8008a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5c:	1c5a      	adds	r2, r3, #1
 8008a5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a62:	b2d2      	uxtb	r2, r2
 8008a64:	701a      	strb	r2, [r3, #0]
 8008a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a68:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008a6a:	4b25      	ldr	r3, [pc, #148]	; (8008b00 <_TrySendOverflowPacket+0xe0>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8008a70:	4b22      	ldr	r3, [pc, #136]	; (8008afc <_TrySendOverflowPacket+0xdc>)
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	69ba      	ldr	r2, [r7, #24]
 8008a76:	1ad3      	subs	r3, r2, r3
 8008a78:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	623b      	str	r3, [r7, #32]
 8008a82:	e00b      	b.n	8008a9c <_TrySendOverflowPacket+0x7c>
 8008a84:	6a3b      	ldr	r3, [r7, #32]
 8008a86:	b2da      	uxtb	r2, r3
 8008a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8a:	1c59      	adds	r1, r3, #1
 8008a8c:	6279      	str	r1, [r7, #36]	; 0x24
 8008a8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a92:	b2d2      	uxtb	r2, r2
 8008a94:	701a      	strb	r2, [r3, #0]
 8008a96:	6a3b      	ldr	r3, [r7, #32]
 8008a98:	09db      	lsrs	r3, r3, #7
 8008a9a:	623b      	str	r3, [r7, #32]
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	2b7f      	cmp	r3, #127	; 0x7f
 8008aa0:	d8f0      	bhi.n	8008a84 <_TrySendOverflowPacket+0x64>
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa4:	1c5a      	adds	r2, r3, #1
 8008aa6:	627a      	str	r2, [r7, #36]	; 0x24
 8008aa8:	6a3a      	ldr	r2, [r7, #32]
 8008aaa:	b2d2      	uxtb	r2, r2
 8008aac:	701a      	strb	r2, [r3, #0]
 8008aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8008ab2:	4b12      	ldr	r3, [pc, #72]	; (8008afc <_TrySendOverflowPacket+0xdc>)
 8008ab4:	785b      	ldrb	r3, [r3, #1]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	1d3b      	adds	r3, r7, #4
 8008aba:	69fa      	ldr	r2, [r7, #28]
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	461a      	mov	r2, r3
 8008ac0:	1d3b      	adds	r3, r7, #4
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	f7f7 fba4 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d009      	beq.n	8008ae6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8008ad2:	4a0a      	ldr	r2, [pc, #40]	; (8008afc <_TrySendOverflowPacket+0xdc>)
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8008ad8:	4b08      	ldr	r3, [pc, #32]	; (8008afc <_TrySendOverflowPacket+0xdc>)
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	3b01      	subs	r3, #1
 8008ade:	b2da      	uxtb	r2, r3
 8008ae0:	4b06      	ldr	r3, [pc, #24]	; (8008afc <_TrySendOverflowPacket+0xdc>)
 8008ae2:	701a      	strb	r2, [r3, #0]
 8008ae4:	e004      	b.n	8008af0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8008ae6:	4b05      	ldr	r3, [pc, #20]	; (8008afc <_TrySendOverflowPacket+0xdc>)
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	3301      	adds	r3, #1
 8008aec:	4a03      	ldr	r2, [pc, #12]	; (8008afc <_TrySendOverflowPacket+0xdc>)
 8008aee:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8008af0:	693b      	ldr	r3, [r7, #16]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3730      	adds	r7, #48	; 0x30
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	20014884 	.word	0x20014884
 8008b00:	e0001004 	.word	0xe0001004

08008b04 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b08a      	sub	sp, #40	; 0x28
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8008b10:	4b6c      	ldr	r3, [pc, #432]	; (8008cc4 <_SendPacket+0x1c0>)
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d010      	beq.n	8008b3a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8008b18:	4b6a      	ldr	r3, [pc, #424]	; (8008cc4 <_SendPacket+0x1c0>)
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f000 80a3 	beq.w	8008c68 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8008b22:	4b68      	ldr	r3, [pc, #416]	; (8008cc4 <_SendPacket+0x1c0>)
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d109      	bne.n	8008b3e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8008b2a:	f7ff ff79 	bl	8008a20 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8008b2e:	4b65      	ldr	r3, [pc, #404]	; (8008cc4 <_SendPacket+0x1c0>)
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	f040 809a 	bne.w	8008c6c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8008b38:	e001      	b.n	8008b3e <_SendPacket+0x3a>
    goto Send;
 8008b3a:	bf00      	nop
 8008b3c:	e000      	b.n	8008b40 <_SendPacket+0x3c>
Send:
 8008b3e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b1f      	cmp	r3, #31
 8008b44:	d809      	bhi.n	8008b5a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8008b46:	4b5f      	ldr	r3, [pc, #380]	; (8008cc4 <_SendPacket+0x1c0>)
 8008b48:	69da      	ldr	r2, [r3, #28]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f040 808b 	bne.w	8008c70 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2b17      	cmp	r3, #23
 8008b5e:	d807      	bhi.n	8008b70 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	3b01      	subs	r3, #1
 8008b64:	60fb      	str	r3, [r7, #12]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	b2da      	uxtb	r2, r3
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	701a      	strb	r2, [r3, #0]
 8008b6e:	e03d      	b.n	8008bec <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8008b70:	68ba      	ldr	r2, [r7, #8]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	2b7f      	cmp	r3, #127	; 0x7f
 8008b7c:	d912      	bls.n	8008ba4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	09da      	lsrs	r2, r3, #7
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	3b01      	subs	r3, #1
 8008b86:	60fb      	str	r3, [r7, #12]
 8008b88:	b2d2      	uxtb	r2, r2
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	3a01      	subs	r2, #1
 8008b96:	60fa      	str	r2, [r7, #12]
 8008b98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b9c:	b2da      	uxtb	r2, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	701a      	strb	r2, [r3, #0]
 8008ba2:	e006      	b.n	8008bb2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	60fb      	str	r3, [r7, #12]
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	b2da      	uxtb	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2b7f      	cmp	r3, #127	; 0x7f
 8008bb6:	d912      	bls.n	8008bde <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	09da      	lsrs	r2, r3, #7
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	60fb      	str	r3, [r7, #12]
 8008bc2:	b2d2      	uxtb	r2, r2
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	3a01      	subs	r2, #1
 8008bd0:	60fa      	str	r2, [r7, #12]
 8008bd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bd6:	b2da      	uxtb	r2, r3
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	701a      	strb	r2, [r3, #0]
 8008bdc:	e006      	b.n	8008bec <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	3b01      	subs	r3, #1
 8008be2:	60fb      	str	r3, [r7, #12]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008bec:	4b36      	ldr	r3, [pc, #216]	; (8008cc8 <_SendPacket+0x1c4>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8008bf2:	4b34      	ldr	r3, [pc, #208]	; (8008cc4 <_SendPacket+0x1c0>)
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	69ba      	ldr	r2, [r7, #24]
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	623b      	str	r3, [r7, #32]
 8008c04:	e00b      	b.n	8008c1e <_SendPacket+0x11a>
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	b2da      	uxtb	r2, r3
 8008c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0c:	1c59      	adds	r1, r3, #1
 8008c0e:	6279      	str	r1, [r7, #36]	; 0x24
 8008c10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c14:	b2d2      	uxtb	r2, r2
 8008c16:	701a      	strb	r2, [r3, #0]
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	09db      	lsrs	r3, r3, #7
 8008c1c:	623b      	str	r3, [r7, #32]
 8008c1e:	6a3b      	ldr	r3, [r7, #32]
 8008c20:	2b7f      	cmp	r3, #127	; 0x7f
 8008c22:	d8f0      	bhi.n	8008c06 <_SendPacket+0x102>
 8008c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c26:	1c5a      	adds	r2, r3, #1
 8008c28:	627a      	str	r2, [r7, #36]	; 0x24
 8008c2a:	6a3a      	ldr	r2, [r7, #32]
 8008c2c:	b2d2      	uxtb	r2, r2
 8008c2e:	701a      	strb	r2, [r3, #0]
 8008c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c32:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8008c34:	4b23      	ldr	r3, [pc, #140]	; (8008cc4 <_SendPacket+0x1c0>)
 8008c36:	785b      	ldrb	r3, [r3, #1]
 8008c38:	4618      	mov	r0, r3
 8008c3a:	68ba      	ldr	r2, [r7, #8]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	461a      	mov	r2, r3
 8008c42:	68f9      	ldr	r1, [r7, #12]
 8008c44:	f7f7 fae4 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d003      	beq.n	8008c5a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8008c52:	4a1c      	ldr	r2, [pc, #112]	; (8008cc4 <_SendPacket+0x1c0>)
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	60d3      	str	r3, [r2, #12]
 8008c58:	e00b      	b.n	8008c72 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8008c5a:	4b1a      	ldr	r3, [pc, #104]	; (8008cc4 <_SendPacket+0x1c0>)
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	b2da      	uxtb	r2, r3
 8008c62:	4b18      	ldr	r3, [pc, #96]	; (8008cc4 <_SendPacket+0x1c0>)
 8008c64:	701a      	strb	r2, [r3, #0]
 8008c66:	e004      	b.n	8008c72 <_SendPacket+0x16e>
    goto SendDone;
 8008c68:	bf00      	nop
 8008c6a:	e002      	b.n	8008c72 <_SendPacket+0x16e>
      goto SendDone;
 8008c6c:	bf00      	nop
 8008c6e:	e000      	b.n	8008c72 <_SendPacket+0x16e>
      goto SendDone;
 8008c70:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8008c72:	4b14      	ldr	r3, [pc, #80]	; (8008cc4 <_SendPacket+0x1c0>)
 8008c74:	7e1b      	ldrb	r3, [r3, #24]
 8008c76:	4619      	mov	r1, r3
 8008c78:	4a14      	ldr	r2, [pc, #80]	; (8008ccc <_SendPacket+0x1c8>)
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	005b      	lsls	r3, r3, #1
 8008c7e:	440b      	add	r3, r1
 8008c80:	00db      	lsls	r3, r3, #3
 8008c82:	4413      	add	r3, r2
 8008c84:	336c      	adds	r3, #108	; 0x6c
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	4b0e      	ldr	r3, [pc, #56]	; (8008cc4 <_SendPacket+0x1c0>)
 8008c8a:	7e1b      	ldrb	r3, [r3, #24]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	490f      	ldr	r1, [pc, #60]	; (8008ccc <_SendPacket+0x1c8>)
 8008c90:	4603      	mov	r3, r0
 8008c92:	005b      	lsls	r3, r3, #1
 8008c94:	4403      	add	r3, r0
 8008c96:	00db      	lsls	r3, r3, #3
 8008c98:	440b      	add	r3, r1
 8008c9a:	3370      	adds	r3, #112	; 0x70
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d00b      	beq.n	8008cba <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8008ca2:	4b08      	ldr	r3, [pc, #32]	; (8008cc4 <_SendPacket+0x1c0>)
 8008ca4:	789b      	ldrb	r3, [r3, #2]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d107      	bne.n	8008cba <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8008caa:	4b06      	ldr	r3, [pc, #24]	; (8008cc4 <_SendPacket+0x1c0>)
 8008cac:	2201      	movs	r2, #1
 8008cae:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8008cb0:	f7ff fe46 	bl	8008940 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8008cb4:	4b03      	ldr	r3, [pc, #12]	; (8008cc4 <_SendPacket+0x1c0>)
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8008cba:	bf00      	nop
 8008cbc:	3728      	adds	r7, #40	; 0x28
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	20014884 	.word	0x20014884
 8008cc8:	e0001004 	.word	0xe0001004
 8008ccc:	200133c4 	.word	0x200133c4

08008cd0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b086      	sub	sp, #24
 8008cd4:	af02      	add	r7, sp, #8
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
 8008cdc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008ce4:	4917      	ldr	r1, [pc, #92]	; (8008d44 <SEGGER_SYSVIEW_Init+0x74>)
 8008ce6:	4818      	ldr	r0, [pc, #96]	; (8008d48 <SEGGER_SYSVIEW_Init+0x78>)
 8008ce8:	f7ff fcdc 	bl	80086a4 <SEGGER_RTT_AllocUpBuffer>
 8008cec:	4603      	mov	r3, r0
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	4b16      	ldr	r3, [pc, #88]	; (8008d4c <SEGGER_SYSVIEW_Init+0x7c>)
 8008cf2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8008cf4:	4b15      	ldr	r3, [pc, #84]	; (8008d4c <SEGGER_SYSVIEW_Init+0x7c>)
 8008cf6:	785a      	ldrb	r2, [r3, #1]
 8008cf8:	4b14      	ldr	r3, [pc, #80]	; (8008d4c <SEGGER_SYSVIEW_Init+0x7c>)
 8008cfa:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8008cfc:	4b13      	ldr	r3, [pc, #76]	; (8008d4c <SEGGER_SYSVIEW_Init+0x7c>)
 8008cfe:	7e1b      	ldrb	r3, [r3, #24]
 8008d00:	4618      	mov	r0, r3
 8008d02:	2300      	movs	r3, #0
 8008d04:	9300      	str	r3, [sp, #0]
 8008d06:	2308      	movs	r3, #8
 8008d08:	4a11      	ldr	r2, [pc, #68]	; (8008d50 <SEGGER_SYSVIEW_Init+0x80>)
 8008d0a:	490f      	ldr	r1, [pc, #60]	; (8008d48 <SEGGER_SYSVIEW_Init+0x78>)
 8008d0c:	f7ff fd4e 	bl	80087ac <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8008d10:	4b0e      	ldr	r3, [pc, #56]	; (8008d4c <SEGGER_SYSVIEW_Init+0x7c>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008d16:	4b0f      	ldr	r3, [pc, #60]	; (8008d54 <SEGGER_SYSVIEW_Init+0x84>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a0c      	ldr	r2, [pc, #48]	; (8008d4c <SEGGER_SYSVIEW_Init+0x7c>)
 8008d1c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8008d1e:	4a0b      	ldr	r2, [pc, #44]	; (8008d4c <SEGGER_SYSVIEW_Init+0x7c>)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8008d24:	4a09      	ldr	r2, [pc, #36]	; (8008d4c <SEGGER_SYSVIEW_Init+0x7c>)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8008d2a:	4a08      	ldr	r2, [pc, #32]	; (8008d4c <SEGGER_SYSVIEW_Init+0x7c>)
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8008d30:	4a06      	ldr	r2, [pc, #24]	; (8008d4c <SEGGER_SYSVIEW_Init+0x7c>)
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8008d36:	4b05      	ldr	r3, [pc, #20]	; (8008d4c <SEGGER_SYSVIEW_Init+0x7c>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8008d3c:	bf00      	nop
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	2001387c 	.word	0x2001387c
 8008d48:	08009e64 	.word	0x08009e64
 8008d4c:	20014884 	.word	0x20014884
 8008d50:	2001487c 	.word	0x2001487c
 8008d54:	e0001004 	.word	0xe0001004

08008d58 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8008d60:	4a04      	ldr	r2, [pc, #16]	; (8008d74 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6113      	str	r3, [r2, #16]
}
 8008d66:	bf00      	nop
 8008d68:	370c      	adds	r7, #12
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	20014884 	.word	0x20014884

08008d78 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008d80:	f3ef 8311 	mrs	r3, BASEPRI
 8008d84:	f04f 0120 	mov.w	r1, #32
 8008d88:	f381 8811 	msr	BASEPRI, r1
 8008d8c:	60fb      	str	r3, [r7, #12]
 8008d8e:	4808      	ldr	r0, [pc, #32]	; (8008db0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8008d90:	f7ff fdc9 	bl	8008926 <_PreparePacket>
 8008d94:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	68b9      	ldr	r1, [r7, #8]
 8008d9a:	68b8      	ldr	r0, [r7, #8]
 8008d9c:	f7ff feb2 	bl	8008b04 <_SendPacket>
  RECORD_END();
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f383 8811 	msr	BASEPRI, r3
}
 8008da6:	bf00      	nop
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	200148b4 	.word	0x200148b4

08008db4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b088      	sub	sp, #32
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008dbe:	f3ef 8311 	mrs	r3, BASEPRI
 8008dc2:	f04f 0120 	mov.w	r1, #32
 8008dc6:	f381 8811 	msr	BASEPRI, r1
 8008dca:	617b      	str	r3, [r7, #20]
 8008dcc:	4816      	ldr	r0, [pc, #88]	; (8008e28 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8008dce:	f7ff fdaa 	bl	8008926 <_PreparePacket>
 8008dd2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	61fb      	str	r3, [r7, #28]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	61bb      	str	r3, [r7, #24]
 8008de0:	e00b      	b.n	8008dfa <SEGGER_SYSVIEW_RecordU32+0x46>
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	b2da      	uxtb	r2, r3
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	1c59      	adds	r1, r3, #1
 8008dea:	61f9      	str	r1, [r7, #28]
 8008dec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008df0:	b2d2      	uxtb	r2, r2
 8008df2:	701a      	strb	r2, [r3, #0]
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	09db      	lsrs	r3, r3, #7
 8008df8:	61bb      	str	r3, [r7, #24]
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	2b7f      	cmp	r3, #127	; 0x7f
 8008dfe:	d8f0      	bhi.n	8008de2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	1c5a      	adds	r2, r3, #1
 8008e04:	61fa      	str	r2, [r7, #28]
 8008e06:	69ba      	ldr	r2, [r7, #24]
 8008e08:	b2d2      	uxtb	r2, r2
 8008e0a:	701a      	strb	r2, [r3, #0]
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	68f9      	ldr	r1, [r7, #12]
 8008e14:	6938      	ldr	r0, [r7, #16]
 8008e16:	f7ff fe75 	bl	8008b04 <_SendPacket>
  RECORD_END();
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	f383 8811 	msr	BASEPRI, r3
}
 8008e20:	bf00      	nop
 8008e22:	3720      	adds	r7, #32
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	200148b4 	.word	0x200148b4

08008e2c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b08c      	sub	sp, #48	; 0x30
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8008e38:	f3ef 8311 	mrs	r3, BASEPRI
 8008e3c:	f04f 0120 	mov.w	r1, #32
 8008e40:	f381 8811 	msr	BASEPRI, r1
 8008e44:	61fb      	str	r3, [r7, #28]
 8008e46:	4825      	ldr	r0, [pc, #148]	; (8008edc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8008e48:	f7ff fd6d 	bl	8008926 <_PreparePacket>
 8008e4c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e5a:	e00b      	b.n	8008e74 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8008e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5e:	b2da      	uxtb	r2, r3
 8008e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e62:	1c59      	adds	r1, r3, #1
 8008e64:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008e66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008e6a:	b2d2      	uxtb	r2, r2
 8008e6c:	701a      	strb	r2, [r3, #0]
 8008e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e70:	09db      	lsrs	r3, r3, #7
 8008e72:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e76:	2b7f      	cmp	r3, #127	; 0x7f
 8008e78:	d8f0      	bhi.n	8008e5c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8008e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7c:	1c5a      	adds	r2, r3, #1
 8008e7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e82:	b2d2      	uxtb	r2, r2
 8008e84:	701a      	strb	r2, [r3, #0]
 8008e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e88:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	623b      	str	r3, [r7, #32]
 8008e92:	e00b      	b.n	8008eac <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8008e94:	6a3b      	ldr	r3, [r7, #32]
 8008e96:	b2da      	uxtb	r2, r3
 8008e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9a:	1c59      	adds	r1, r3, #1
 8008e9c:	6279      	str	r1, [r7, #36]	; 0x24
 8008e9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008ea2:	b2d2      	uxtb	r2, r2
 8008ea4:	701a      	strb	r2, [r3, #0]
 8008ea6:	6a3b      	ldr	r3, [r7, #32]
 8008ea8:	09db      	lsrs	r3, r3, #7
 8008eaa:	623b      	str	r3, [r7, #32]
 8008eac:	6a3b      	ldr	r3, [r7, #32]
 8008eae:	2b7f      	cmp	r3, #127	; 0x7f
 8008eb0:	d8f0      	bhi.n	8008e94 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb4:	1c5a      	adds	r2, r3, #1
 8008eb6:	627a      	str	r2, [r7, #36]	; 0x24
 8008eb8:	6a3a      	ldr	r2, [r7, #32]
 8008eba:	b2d2      	uxtb	r2, r2
 8008ebc:	701a      	strb	r2, [r3, #0]
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008ec2:	68fa      	ldr	r2, [r7, #12]
 8008ec4:	6979      	ldr	r1, [r7, #20]
 8008ec6:	69b8      	ldr	r0, [r7, #24]
 8008ec8:	f7ff fe1c 	bl	8008b04 <_SendPacket>
  RECORD_END();
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	f383 8811 	msr	BASEPRI, r3
}
 8008ed2:	bf00      	nop
 8008ed4:	3730      	adds	r7, #48	; 0x30
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	200148b4 	.word	0x200148b4

08008ee0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b08e      	sub	sp, #56	; 0x38
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
 8008eec:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8008eee:	f3ef 8311 	mrs	r3, BASEPRI
 8008ef2:	f04f 0120 	mov.w	r1, #32
 8008ef6:	f381 8811 	msr	BASEPRI, r1
 8008efa:	61fb      	str	r3, [r7, #28]
 8008efc:	4832      	ldr	r0, [pc, #200]	; (8008fc8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8008efe:	f7ff fd12 	bl	8008926 <_PreparePacket>
 8008f02:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	633b      	str	r3, [r7, #48]	; 0x30
 8008f10:	e00b      	b.n	8008f2a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8008f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f14:	b2da      	uxtb	r2, r3
 8008f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f18:	1c59      	adds	r1, r3, #1
 8008f1a:	6379      	str	r1, [r7, #52]	; 0x34
 8008f1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f20:	b2d2      	uxtb	r2, r2
 8008f22:	701a      	strb	r2, [r3, #0]
 8008f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f26:	09db      	lsrs	r3, r3, #7
 8008f28:	633b      	str	r3, [r7, #48]	; 0x30
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2c:	2b7f      	cmp	r3, #127	; 0x7f
 8008f2e:	d8f0      	bhi.n	8008f12 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8008f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f32:	1c5a      	adds	r2, r3, #1
 8008f34:	637a      	str	r2, [r7, #52]	; 0x34
 8008f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f38:	b2d2      	uxtb	r2, r2
 8008f3a:	701a      	strb	r2, [r3, #0]
 8008f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f3e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f48:	e00b      	b.n	8008f62 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8008f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4c:	b2da      	uxtb	r2, r3
 8008f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f50:	1c59      	adds	r1, r3, #1
 8008f52:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008f54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f58:	b2d2      	uxtb	r2, r2
 8008f5a:	701a      	strb	r2, [r3, #0]
 8008f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5e:	09db      	lsrs	r3, r3, #7
 8008f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f64:	2b7f      	cmp	r3, #127	; 0x7f
 8008f66:	d8f0      	bhi.n	8008f4a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8008f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6a:	1c5a      	adds	r2, r3, #1
 8008f6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f70:	b2d2      	uxtb	r2, r2
 8008f72:	701a      	strb	r2, [r3, #0]
 8008f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f76:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	623b      	str	r3, [r7, #32]
 8008f80:	e00b      	b.n	8008f9a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8008f82:	6a3b      	ldr	r3, [r7, #32]
 8008f84:	b2da      	uxtb	r2, r3
 8008f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f88:	1c59      	adds	r1, r3, #1
 8008f8a:	6279      	str	r1, [r7, #36]	; 0x24
 8008f8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f90:	b2d2      	uxtb	r2, r2
 8008f92:	701a      	strb	r2, [r3, #0]
 8008f94:	6a3b      	ldr	r3, [r7, #32]
 8008f96:	09db      	lsrs	r3, r3, #7
 8008f98:	623b      	str	r3, [r7, #32]
 8008f9a:	6a3b      	ldr	r3, [r7, #32]
 8008f9c:	2b7f      	cmp	r3, #127	; 0x7f
 8008f9e:	d8f0      	bhi.n	8008f82 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa2:	1c5a      	adds	r2, r3, #1
 8008fa4:	627a      	str	r2, [r7, #36]	; 0x24
 8008fa6:	6a3a      	ldr	r2, [r7, #32]
 8008fa8:	b2d2      	uxtb	r2, r2
 8008faa:	701a      	strb	r2, [r3, #0]
 8008fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fae:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	6979      	ldr	r1, [r7, #20]
 8008fb4:	69b8      	ldr	r0, [r7, #24]
 8008fb6:	f7ff fda5 	bl	8008b04 <_SendPacket>
  RECORD_END();
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	f383 8811 	msr	BASEPRI, r3
}
 8008fc0:	bf00      	nop
 8008fc2:	3738      	adds	r7, #56	; 0x38
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	200148b4 	.word	0x200148b4

08008fcc <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b090      	sub	sp, #64	; 0x40
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
 8008fd8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008fda:	f3ef 8311 	mrs	r3, BASEPRI
 8008fde:	f04f 0120 	mov.w	r1, #32
 8008fe2:	f381 8811 	msr	BASEPRI, r1
 8008fe6:	61fb      	str	r3, [r7, #28]
 8008fe8:	4840      	ldr	r0, [pc, #256]	; (80090ec <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8008fea:	f7ff fc9c 	bl	8008926 <_PreparePacket>
 8008fee:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ffc:	e00b      	b.n	8009016 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8008ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009000:	b2da      	uxtb	r2, r3
 8009002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009004:	1c59      	adds	r1, r3, #1
 8009006:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009008:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800900c:	b2d2      	uxtb	r2, r2
 800900e:	701a      	strb	r2, [r3, #0]
 8009010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009012:	09db      	lsrs	r3, r3, #7
 8009014:	63bb      	str	r3, [r7, #56]	; 0x38
 8009016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009018:	2b7f      	cmp	r3, #127	; 0x7f
 800901a:	d8f0      	bhi.n	8008ffe <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800901c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800901e:	1c5a      	adds	r2, r3, #1
 8009020:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009022:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009024:	b2d2      	uxtb	r2, r2
 8009026:	701a      	strb	r2, [r3, #0]
 8009028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800902a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	637b      	str	r3, [r7, #52]	; 0x34
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	633b      	str	r3, [r7, #48]	; 0x30
 8009034:	e00b      	b.n	800904e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8009036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009038:	b2da      	uxtb	r2, r3
 800903a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800903c:	1c59      	adds	r1, r3, #1
 800903e:	6379      	str	r1, [r7, #52]	; 0x34
 8009040:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009044:	b2d2      	uxtb	r2, r2
 8009046:	701a      	strb	r2, [r3, #0]
 8009048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904a:	09db      	lsrs	r3, r3, #7
 800904c:	633b      	str	r3, [r7, #48]	; 0x30
 800904e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009050:	2b7f      	cmp	r3, #127	; 0x7f
 8009052:	d8f0      	bhi.n	8009036 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8009054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009056:	1c5a      	adds	r2, r3, #1
 8009058:	637a      	str	r2, [r7, #52]	; 0x34
 800905a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800905c:	b2d2      	uxtb	r2, r2
 800905e:	701a      	strb	r2, [r3, #0]
 8009060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009062:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	62bb      	str	r3, [r7, #40]	; 0x28
 800906c:	e00b      	b.n	8009086 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800906e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009070:	b2da      	uxtb	r2, r3
 8009072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009074:	1c59      	adds	r1, r3, #1
 8009076:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009078:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800907c:	b2d2      	uxtb	r2, r2
 800907e:	701a      	strb	r2, [r3, #0]
 8009080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009082:	09db      	lsrs	r3, r3, #7
 8009084:	62bb      	str	r3, [r7, #40]	; 0x28
 8009086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009088:	2b7f      	cmp	r3, #127	; 0x7f
 800908a:	d8f0      	bhi.n	800906e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800908c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908e:	1c5a      	adds	r2, r3, #1
 8009090:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009094:	b2d2      	uxtb	r2, r2
 8009096:	701a      	strb	r2, [r3, #0]
 8009098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	627b      	str	r3, [r7, #36]	; 0x24
 80090a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090a2:	623b      	str	r3, [r7, #32]
 80090a4:	e00b      	b.n	80090be <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80090a6:	6a3b      	ldr	r3, [r7, #32]
 80090a8:	b2da      	uxtb	r2, r3
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	1c59      	adds	r1, r3, #1
 80090ae:	6279      	str	r1, [r7, #36]	; 0x24
 80090b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80090b4:	b2d2      	uxtb	r2, r2
 80090b6:	701a      	strb	r2, [r3, #0]
 80090b8:	6a3b      	ldr	r3, [r7, #32]
 80090ba:	09db      	lsrs	r3, r3, #7
 80090bc:	623b      	str	r3, [r7, #32]
 80090be:	6a3b      	ldr	r3, [r7, #32]
 80090c0:	2b7f      	cmp	r3, #127	; 0x7f
 80090c2:	d8f0      	bhi.n	80090a6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80090c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c6:	1c5a      	adds	r2, r3, #1
 80090c8:	627a      	str	r2, [r7, #36]	; 0x24
 80090ca:	6a3a      	ldr	r2, [r7, #32]
 80090cc:	b2d2      	uxtb	r2, r2
 80090ce:	701a      	strb	r2, [r3, #0]
 80090d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	6979      	ldr	r1, [r7, #20]
 80090d8:	69b8      	ldr	r0, [r7, #24]
 80090da:	f7ff fd13 	bl	8008b04 <_SendPacket>
  RECORD_END();
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	f383 8811 	msr	BASEPRI, r3
}
 80090e4:	bf00      	nop
 80090e6:	3740      	adds	r7, #64	; 0x40
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	200148b4 	.word	0x200148b4

080090f0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b08c      	sub	sp, #48	; 0x30
 80090f4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80090f6:	4b58      	ldr	r3, [pc, #352]	; (8009258 <SEGGER_SYSVIEW_Start+0x168>)
 80090f8:	2201      	movs	r2, #1
 80090fa:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80090fc:	f3ef 8311 	mrs	r3, BASEPRI
 8009100:	f04f 0120 	mov.w	r1, #32
 8009104:	f381 8811 	msr	BASEPRI, r1
 8009108:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800910a:	4b53      	ldr	r3, [pc, #332]	; (8009258 <SEGGER_SYSVIEW_Start+0x168>)
 800910c:	785b      	ldrb	r3, [r3, #1]
 800910e:	220a      	movs	r2, #10
 8009110:	4952      	ldr	r1, [pc, #328]	; (800925c <SEGGER_SYSVIEW_Start+0x16c>)
 8009112:	4618      	mov	r0, r3
 8009114:	f7f7 f87c 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800911e:	200a      	movs	r0, #10
 8009120:	f7ff fe2a 	bl	8008d78 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009124:	f3ef 8311 	mrs	r3, BASEPRI
 8009128:	f04f 0120 	mov.w	r1, #32
 800912c:	f381 8811 	msr	BASEPRI, r1
 8009130:	60bb      	str	r3, [r7, #8]
 8009132:	484b      	ldr	r0, [pc, #300]	; (8009260 <SEGGER_SYSVIEW_Start+0x170>)
 8009134:	f7ff fbf7 	bl	8008926 <_PreparePacket>
 8009138:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009142:	4b45      	ldr	r3, [pc, #276]	; (8009258 <SEGGER_SYSVIEW_Start+0x168>)
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	62bb      	str	r3, [r7, #40]	; 0x28
 8009148:	e00b      	b.n	8009162 <SEGGER_SYSVIEW_Start+0x72>
 800914a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914c:	b2da      	uxtb	r2, r3
 800914e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009150:	1c59      	adds	r1, r3, #1
 8009152:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009154:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009158:	b2d2      	uxtb	r2, r2
 800915a:	701a      	strb	r2, [r3, #0]
 800915c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915e:	09db      	lsrs	r3, r3, #7
 8009160:	62bb      	str	r3, [r7, #40]	; 0x28
 8009162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009164:	2b7f      	cmp	r3, #127	; 0x7f
 8009166:	d8f0      	bhi.n	800914a <SEGGER_SYSVIEW_Start+0x5a>
 8009168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916a:	1c5a      	adds	r2, r3, #1
 800916c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800916e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009170:	b2d2      	uxtb	r2, r2
 8009172:	701a      	strb	r2, [r3, #0]
 8009174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009176:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	627b      	str	r3, [r7, #36]	; 0x24
 800917c:	4b36      	ldr	r3, [pc, #216]	; (8009258 <SEGGER_SYSVIEW_Start+0x168>)
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	623b      	str	r3, [r7, #32]
 8009182:	e00b      	b.n	800919c <SEGGER_SYSVIEW_Start+0xac>
 8009184:	6a3b      	ldr	r3, [r7, #32]
 8009186:	b2da      	uxtb	r2, r3
 8009188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918a:	1c59      	adds	r1, r3, #1
 800918c:	6279      	str	r1, [r7, #36]	; 0x24
 800918e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009192:	b2d2      	uxtb	r2, r2
 8009194:	701a      	strb	r2, [r3, #0]
 8009196:	6a3b      	ldr	r3, [r7, #32]
 8009198:	09db      	lsrs	r3, r3, #7
 800919a:	623b      	str	r3, [r7, #32]
 800919c:	6a3b      	ldr	r3, [r7, #32]
 800919e:	2b7f      	cmp	r3, #127	; 0x7f
 80091a0:	d8f0      	bhi.n	8009184 <SEGGER_SYSVIEW_Start+0x94>
 80091a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a4:	1c5a      	adds	r2, r3, #1
 80091a6:	627a      	str	r2, [r7, #36]	; 0x24
 80091a8:	6a3a      	ldr	r2, [r7, #32]
 80091aa:	b2d2      	uxtb	r2, r2
 80091ac:	701a      	strb	r2, [r3, #0]
 80091ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	61fb      	str	r3, [r7, #28]
 80091b6:	4b28      	ldr	r3, [pc, #160]	; (8009258 <SEGGER_SYSVIEW_Start+0x168>)
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	61bb      	str	r3, [r7, #24]
 80091bc:	e00b      	b.n	80091d6 <SEGGER_SYSVIEW_Start+0xe6>
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	b2da      	uxtb	r2, r3
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	1c59      	adds	r1, r3, #1
 80091c6:	61f9      	str	r1, [r7, #28]
 80091c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80091cc:	b2d2      	uxtb	r2, r2
 80091ce:	701a      	strb	r2, [r3, #0]
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	09db      	lsrs	r3, r3, #7
 80091d4:	61bb      	str	r3, [r7, #24]
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	2b7f      	cmp	r3, #127	; 0x7f
 80091da:	d8f0      	bhi.n	80091be <SEGGER_SYSVIEW_Start+0xce>
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	1c5a      	adds	r2, r3, #1
 80091e0:	61fa      	str	r2, [r7, #28]
 80091e2:	69ba      	ldr	r2, [r7, #24]
 80091e4:	b2d2      	uxtb	r2, r2
 80091e6:	701a      	strb	r2, [r3, #0]
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	617b      	str	r3, [r7, #20]
 80091f0:	2300      	movs	r3, #0
 80091f2:	613b      	str	r3, [r7, #16]
 80091f4:	e00b      	b.n	800920e <SEGGER_SYSVIEW_Start+0x11e>
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	b2da      	uxtb	r2, r3
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	1c59      	adds	r1, r3, #1
 80091fe:	6179      	str	r1, [r7, #20]
 8009200:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009204:	b2d2      	uxtb	r2, r2
 8009206:	701a      	strb	r2, [r3, #0]
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	09db      	lsrs	r3, r3, #7
 800920c:	613b      	str	r3, [r7, #16]
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	2b7f      	cmp	r3, #127	; 0x7f
 8009212:	d8f0      	bhi.n	80091f6 <SEGGER_SYSVIEW_Start+0x106>
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	1c5a      	adds	r2, r3, #1
 8009218:	617a      	str	r2, [r7, #20]
 800921a:	693a      	ldr	r2, [r7, #16]
 800921c:	b2d2      	uxtb	r2, r2
 800921e:	701a      	strb	r2, [r3, #0]
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8009224:	2218      	movs	r2, #24
 8009226:	6839      	ldr	r1, [r7, #0]
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7ff fc6b 	bl	8008b04 <_SendPacket>
      RECORD_END();
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009234:	4b08      	ldr	r3, [pc, #32]	; (8009258 <SEGGER_SYSVIEW_Start+0x168>)
 8009236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009238:	2b00      	cmp	r3, #0
 800923a:	d002      	beq.n	8009242 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800923c:	4b06      	ldr	r3, [pc, #24]	; (8009258 <SEGGER_SYSVIEW_Start+0x168>)
 800923e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009240:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8009242:	f000 f9eb 	bl	800961c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8009246:	f000 f9b1 	bl	80095ac <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800924a:	f000 fc23 	bl	8009a94 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800924e:	bf00      	nop
 8009250:	3730      	adds	r7, #48	; 0x30
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	20014884 	.word	0x20014884
 800925c:	08009e8c 	.word	0x08009e8c
 8009260:	200148b4 	.word	0x200148b4

08009264 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800926a:	f3ef 8311 	mrs	r3, BASEPRI
 800926e:	f04f 0120 	mov.w	r1, #32
 8009272:	f381 8811 	msr	BASEPRI, r1
 8009276:	607b      	str	r3, [r7, #4]
 8009278:	480b      	ldr	r0, [pc, #44]	; (80092a8 <SEGGER_SYSVIEW_Stop+0x44>)
 800927a:	f7ff fb54 	bl	8008926 <_PreparePacket>
 800927e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8009280:	4b0a      	ldr	r3, [pc, #40]	; (80092ac <SEGGER_SYSVIEW_Stop+0x48>)
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d007      	beq.n	8009298 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8009288:	220b      	movs	r2, #11
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	6838      	ldr	r0, [r7, #0]
 800928e:	f7ff fc39 	bl	8008b04 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8009292:	4b06      	ldr	r3, [pc, #24]	; (80092ac <SEGGER_SYSVIEW_Stop+0x48>)
 8009294:	2200      	movs	r2, #0
 8009296:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f383 8811 	msr	BASEPRI, r3
}
 800929e:	bf00      	nop
 80092a0:	3708      	adds	r7, #8
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	200148b4 	.word	0x200148b4
 80092ac:	20014884 	.word	0x20014884

080092b0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b08c      	sub	sp, #48	; 0x30
 80092b4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80092b6:	f3ef 8311 	mrs	r3, BASEPRI
 80092ba:	f04f 0120 	mov.w	r1, #32
 80092be:	f381 8811 	msr	BASEPRI, r1
 80092c2:	60fb      	str	r3, [r7, #12]
 80092c4:	4845      	ldr	r0, [pc, #276]	; (80093dc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80092c6:	f7ff fb2e 	bl	8008926 <_PreparePacket>
 80092ca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092d4:	4b42      	ldr	r3, [pc, #264]	; (80093e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80092da:	e00b      	b.n	80092f4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80092dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092de:	b2da      	uxtb	r2, r3
 80092e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e2:	1c59      	adds	r1, r3, #1
 80092e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80092e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80092ea:	b2d2      	uxtb	r2, r2
 80092ec:	701a      	strb	r2, [r3, #0]
 80092ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f0:	09db      	lsrs	r3, r3, #7
 80092f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80092f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f6:	2b7f      	cmp	r3, #127	; 0x7f
 80092f8:	d8f0      	bhi.n	80092dc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80092fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fc:	1c5a      	adds	r2, r3, #1
 80092fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009302:	b2d2      	uxtb	r2, r2
 8009304:	701a      	strb	r2, [r3, #0]
 8009306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009308:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	627b      	str	r3, [r7, #36]	; 0x24
 800930e:	4b34      	ldr	r3, [pc, #208]	; (80093e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	623b      	str	r3, [r7, #32]
 8009314:	e00b      	b.n	800932e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8009316:	6a3b      	ldr	r3, [r7, #32]
 8009318:	b2da      	uxtb	r2, r3
 800931a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931c:	1c59      	adds	r1, r3, #1
 800931e:	6279      	str	r1, [r7, #36]	; 0x24
 8009320:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009324:	b2d2      	uxtb	r2, r2
 8009326:	701a      	strb	r2, [r3, #0]
 8009328:	6a3b      	ldr	r3, [r7, #32]
 800932a:	09db      	lsrs	r3, r3, #7
 800932c:	623b      	str	r3, [r7, #32]
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	2b7f      	cmp	r3, #127	; 0x7f
 8009332:	d8f0      	bhi.n	8009316 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8009334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009336:	1c5a      	adds	r2, r3, #1
 8009338:	627a      	str	r2, [r7, #36]	; 0x24
 800933a:	6a3a      	ldr	r2, [r7, #32]
 800933c:	b2d2      	uxtb	r2, r2
 800933e:	701a      	strb	r2, [r3, #0]
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	61fb      	str	r3, [r7, #28]
 8009348:	4b25      	ldr	r3, [pc, #148]	; (80093e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800934a:	691b      	ldr	r3, [r3, #16]
 800934c:	61bb      	str	r3, [r7, #24]
 800934e:	e00b      	b.n	8009368 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	b2da      	uxtb	r2, r3
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	1c59      	adds	r1, r3, #1
 8009358:	61f9      	str	r1, [r7, #28]
 800935a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800935e:	b2d2      	uxtb	r2, r2
 8009360:	701a      	strb	r2, [r3, #0]
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	09db      	lsrs	r3, r3, #7
 8009366:	61bb      	str	r3, [r7, #24]
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	2b7f      	cmp	r3, #127	; 0x7f
 800936c:	d8f0      	bhi.n	8009350 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	1c5a      	adds	r2, r3, #1
 8009372:	61fa      	str	r2, [r7, #28]
 8009374:	69ba      	ldr	r2, [r7, #24]
 8009376:	b2d2      	uxtb	r2, r2
 8009378:	701a      	strb	r2, [r3, #0]
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	617b      	str	r3, [r7, #20]
 8009382:	2300      	movs	r3, #0
 8009384:	613b      	str	r3, [r7, #16]
 8009386:	e00b      	b.n	80093a0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	b2da      	uxtb	r2, r3
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	1c59      	adds	r1, r3, #1
 8009390:	6179      	str	r1, [r7, #20]
 8009392:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009396:	b2d2      	uxtb	r2, r2
 8009398:	701a      	strb	r2, [r3, #0]
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	09db      	lsrs	r3, r3, #7
 800939e:	613b      	str	r3, [r7, #16]
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	2b7f      	cmp	r3, #127	; 0x7f
 80093a4:	d8f0      	bhi.n	8009388 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	1c5a      	adds	r2, r3, #1
 80093aa:	617a      	str	r2, [r7, #20]
 80093ac:	693a      	ldr	r2, [r7, #16]
 80093ae:	b2d2      	uxtb	r2, r2
 80093b0:	701a      	strb	r2, [r3, #0]
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80093b6:	2218      	movs	r2, #24
 80093b8:	6879      	ldr	r1, [r7, #4]
 80093ba:	68b8      	ldr	r0, [r7, #8]
 80093bc:	f7ff fba2 	bl	8008b04 <_SendPacket>
  RECORD_END();
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80093c6:	4b06      	ldr	r3, [pc, #24]	; (80093e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80093c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d002      	beq.n	80093d4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80093ce:	4b04      	ldr	r3, [pc, #16]	; (80093e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80093d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d2:	4798      	blx	r3
  }
}
 80093d4:	bf00      	nop
 80093d6:	3730      	adds	r7, #48	; 0x30
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	200148b4 	.word	0x200148b4
 80093e0:	20014884 	.word	0x20014884

080093e4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b092      	sub	sp, #72	; 0x48
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80093ec:	f3ef 8311 	mrs	r3, BASEPRI
 80093f0:	f04f 0120 	mov.w	r1, #32
 80093f4:	f381 8811 	msr	BASEPRI, r1
 80093f8:	617b      	str	r3, [r7, #20]
 80093fa:	486a      	ldr	r0, [pc, #424]	; (80095a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80093fc:	f7ff fa93 	bl	8008926 <_PreparePacket>
 8009400:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	647b      	str	r3, [r7, #68]	; 0x44
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	4b66      	ldr	r3, [pc, #408]	; (80095a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	1ad3      	subs	r3, r2, r3
 8009414:	643b      	str	r3, [r7, #64]	; 0x40
 8009416:	e00b      	b.n	8009430 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8009418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800941a:	b2da      	uxtb	r2, r3
 800941c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800941e:	1c59      	adds	r1, r3, #1
 8009420:	6479      	str	r1, [r7, #68]	; 0x44
 8009422:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009426:	b2d2      	uxtb	r2, r2
 8009428:	701a      	strb	r2, [r3, #0]
 800942a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800942c:	09db      	lsrs	r3, r3, #7
 800942e:	643b      	str	r3, [r7, #64]	; 0x40
 8009430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009432:	2b7f      	cmp	r3, #127	; 0x7f
 8009434:	d8f0      	bhi.n	8009418 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8009436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009438:	1c5a      	adds	r2, r3, #1
 800943a:	647a      	str	r2, [r7, #68]	; 0x44
 800943c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800943e:	b2d2      	uxtb	r2, r2
 8009440:	701a      	strb	r2, [r3, #0]
 8009442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009444:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009450:	e00b      	b.n	800946a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8009452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009454:	b2da      	uxtb	r2, r3
 8009456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009458:	1c59      	adds	r1, r3, #1
 800945a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800945c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009460:	b2d2      	uxtb	r2, r2
 8009462:	701a      	strb	r2, [r3, #0]
 8009464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009466:	09db      	lsrs	r3, r3, #7
 8009468:	63bb      	str	r3, [r7, #56]	; 0x38
 800946a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946c:	2b7f      	cmp	r3, #127	; 0x7f
 800946e:	d8f0      	bhi.n	8009452 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8009470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009472:	1c5a      	adds	r2, r3, #1
 8009474:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009476:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009478:	b2d2      	uxtb	r2, r2
 800947a:	701a      	strb	r2, [r3, #0]
 800947c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800947e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	2220      	movs	r2, #32
 8009486:	4619      	mov	r1, r3
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	f7ff f9ff 	bl	800888c <_EncodeStr>
 800948e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8009490:	2209      	movs	r2, #9
 8009492:	68f9      	ldr	r1, [r7, #12]
 8009494:	6938      	ldr	r0, [r7, #16]
 8009496:	f7ff fb35 	bl	8008b04 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	637b      	str	r3, [r7, #52]	; 0x34
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	4b40      	ldr	r3, [pc, #256]	; (80095a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80094a8:	691b      	ldr	r3, [r3, #16]
 80094aa:	1ad3      	subs	r3, r2, r3
 80094ac:	633b      	str	r3, [r7, #48]	; 0x30
 80094ae:	e00b      	b.n	80094c8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80094b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b2:	b2da      	uxtb	r2, r3
 80094b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b6:	1c59      	adds	r1, r3, #1
 80094b8:	6379      	str	r1, [r7, #52]	; 0x34
 80094ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80094be:	b2d2      	uxtb	r2, r2
 80094c0:	701a      	strb	r2, [r3, #0]
 80094c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c4:	09db      	lsrs	r3, r3, #7
 80094c6:	633b      	str	r3, [r7, #48]	; 0x30
 80094c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ca:	2b7f      	cmp	r3, #127	; 0x7f
 80094cc:	d8f0      	bhi.n	80094b0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80094ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094d0:	1c5a      	adds	r2, r3, #1
 80094d2:	637a      	str	r2, [r7, #52]	; 0x34
 80094d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094d6:	b2d2      	uxtb	r2, r2
 80094d8:	701a      	strb	r2, [r3, #0]
 80094da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80094e8:	e00b      	b.n	8009502 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80094ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ec:	b2da      	uxtb	r2, r3
 80094ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f0:	1c59      	adds	r1, r3, #1
 80094f2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80094f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80094f8:	b2d2      	uxtb	r2, r2
 80094fa:	701a      	strb	r2, [r3, #0]
 80094fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fe:	09db      	lsrs	r3, r3, #7
 8009500:	62bb      	str	r3, [r7, #40]	; 0x28
 8009502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009504:	2b7f      	cmp	r3, #127	; 0x7f
 8009506:	d8f0      	bhi.n	80094ea <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8009508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950a:	1c5a      	adds	r2, r3, #1
 800950c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800950e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009510:	b2d2      	uxtb	r2, r2
 8009512:	701a      	strb	r2, [r3, #0]
 8009514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009516:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	627b      	str	r3, [r7, #36]	; 0x24
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	623b      	str	r3, [r7, #32]
 8009522:	e00b      	b.n	800953c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8009524:	6a3b      	ldr	r3, [r7, #32]
 8009526:	b2da      	uxtb	r2, r3
 8009528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952a:	1c59      	adds	r1, r3, #1
 800952c:	6279      	str	r1, [r7, #36]	; 0x24
 800952e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009532:	b2d2      	uxtb	r2, r2
 8009534:	701a      	strb	r2, [r3, #0]
 8009536:	6a3b      	ldr	r3, [r7, #32]
 8009538:	09db      	lsrs	r3, r3, #7
 800953a:	623b      	str	r3, [r7, #32]
 800953c:	6a3b      	ldr	r3, [r7, #32]
 800953e:	2b7f      	cmp	r3, #127	; 0x7f
 8009540:	d8f0      	bhi.n	8009524 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8009542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009544:	1c5a      	adds	r2, r3, #1
 8009546:	627a      	str	r2, [r7, #36]	; 0x24
 8009548:	6a3a      	ldr	r2, [r7, #32]
 800954a:	b2d2      	uxtb	r2, r2
 800954c:	701a      	strb	r2, [r3, #0]
 800954e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009550:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	61fb      	str	r3, [r7, #28]
 8009556:	2300      	movs	r3, #0
 8009558:	61bb      	str	r3, [r7, #24]
 800955a:	e00b      	b.n	8009574 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	b2da      	uxtb	r2, r3
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	1c59      	adds	r1, r3, #1
 8009564:	61f9      	str	r1, [r7, #28]
 8009566:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800956a:	b2d2      	uxtb	r2, r2
 800956c:	701a      	strb	r2, [r3, #0]
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	09db      	lsrs	r3, r3, #7
 8009572:	61bb      	str	r3, [r7, #24]
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	2b7f      	cmp	r3, #127	; 0x7f
 8009578:	d8f0      	bhi.n	800955c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	1c5a      	adds	r2, r3, #1
 800957e:	61fa      	str	r2, [r7, #28]
 8009580:	69ba      	ldr	r2, [r7, #24]
 8009582:	b2d2      	uxtb	r2, r2
 8009584:	701a      	strb	r2, [r3, #0]
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800958a:	2215      	movs	r2, #21
 800958c:	68f9      	ldr	r1, [r7, #12]
 800958e:	6938      	ldr	r0, [r7, #16]
 8009590:	f7ff fab8 	bl	8008b04 <_SendPacket>
  RECORD_END();
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	f383 8811 	msr	BASEPRI, r3
}
 800959a:	bf00      	nop
 800959c:	3748      	adds	r7, #72	; 0x48
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	200148b4 	.word	0x200148b4
 80095a8:	20014884 	.word	0x20014884

080095ac <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80095ac:	b580      	push	{r7, lr}
 80095ae:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80095b0:	4b07      	ldr	r3, [pc, #28]	; (80095d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80095b2:	6a1b      	ldr	r3, [r3, #32]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d008      	beq.n	80095ca <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80095b8:	4b05      	ldr	r3, [pc, #20]	; (80095d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80095ba:	6a1b      	ldr	r3, [r3, #32]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d003      	beq.n	80095ca <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80095c2:	4b03      	ldr	r3, [pc, #12]	; (80095d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	4798      	blx	r3
  }
}
 80095ca:	bf00      	nop
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	20014884 	.word	0x20014884

080095d4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b086      	sub	sp, #24
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80095dc:	f3ef 8311 	mrs	r3, BASEPRI
 80095e0:	f04f 0120 	mov.w	r1, #32
 80095e4:	f381 8811 	msr	BASEPRI, r1
 80095e8:	617b      	str	r3, [r7, #20]
 80095ea:	480b      	ldr	r0, [pc, #44]	; (8009618 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80095ec:	f7ff f99b 	bl	8008926 <_PreparePacket>
 80095f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80095f2:	2280      	movs	r2, #128	; 0x80
 80095f4:	6879      	ldr	r1, [r7, #4]
 80095f6:	6938      	ldr	r0, [r7, #16]
 80095f8:	f7ff f948 	bl	800888c <_EncodeStr>
 80095fc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80095fe:	220e      	movs	r2, #14
 8009600:	68f9      	ldr	r1, [r7, #12]
 8009602:	6938      	ldr	r0, [r7, #16]
 8009604:	f7ff fa7e 	bl	8008b04 <_SendPacket>
  RECORD_END();
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	f383 8811 	msr	BASEPRI, r3
}
 800960e:	bf00      	nop
 8009610:	3718      	adds	r7, #24
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	200148b4 	.word	0x200148b4

0800961c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800961c:	b590      	push	{r4, r7, lr}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8009622:	4b15      	ldr	r3, [pc, #84]	; (8009678 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8009624:	6a1b      	ldr	r3, [r3, #32]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d01a      	beq.n	8009660 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800962a:	4b13      	ldr	r3, [pc, #76]	; (8009678 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800962c:	6a1b      	ldr	r3, [r3, #32]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d015      	beq.n	8009660 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8009634:	4b10      	ldr	r3, [pc, #64]	; (8009678 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8009636:	6a1b      	ldr	r3, [r3, #32]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4798      	blx	r3
 800963c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8009640:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8009642:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009646:	f04f 0200 	mov.w	r2, #0
 800964a:	f04f 0300 	mov.w	r3, #0
 800964e:	000a      	movs	r2, r1
 8009650:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8009652:	4613      	mov	r3, r2
 8009654:	461a      	mov	r2, r3
 8009656:	4621      	mov	r1, r4
 8009658:	200d      	movs	r0, #13
 800965a:	f7ff fbe7 	bl	8008e2c <SEGGER_SYSVIEW_RecordU32x2>
 800965e:	e006      	b.n	800966e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8009660:	4b06      	ldr	r3, [pc, #24]	; (800967c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4619      	mov	r1, r3
 8009666:	200c      	movs	r0, #12
 8009668:	f7ff fba4 	bl	8008db4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800966c:	bf00      	nop
 800966e:	bf00      	nop
 8009670:	370c      	adds	r7, #12
 8009672:	46bd      	mov	sp, r7
 8009674:	bd90      	pop	{r4, r7, pc}
 8009676:	bf00      	nop
 8009678:	20014884 	.word	0x20014884
 800967c:	e0001004 	.word	0xe0001004

08009680 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8009680:	b580      	push	{r7, lr}
 8009682:	b086      	sub	sp, #24
 8009684:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009686:	f3ef 8311 	mrs	r3, BASEPRI
 800968a:	f04f 0120 	mov.w	r1, #32
 800968e:	f381 8811 	msr	BASEPRI, r1
 8009692:	60fb      	str	r3, [r7, #12]
 8009694:	4819      	ldr	r0, [pc, #100]	; (80096fc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8009696:	f7ff f946 	bl	8008926 <_PreparePacket>
 800969a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80096a0:	4b17      	ldr	r3, [pc, #92]	; (8009700 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096a8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	617b      	str	r3, [r7, #20]
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	613b      	str	r3, [r7, #16]
 80096b2:	e00b      	b.n	80096cc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	b2da      	uxtb	r2, r3
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	1c59      	adds	r1, r3, #1
 80096bc:	6179      	str	r1, [r7, #20]
 80096be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80096c2:	b2d2      	uxtb	r2, r2
 80096c4:	701a      	strb	r2, [r3, #0]
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	09db      	lsrs	r3, r3, #7
 80096ca:	613b      	str	r3, [r7, #16]
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	2b7f      	cmp	r3, #127	; 0x7f
 80096d0:	d8f0      	bhi.n	80096b4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	1c5a      	adds	r2, r3, #1
 80096d6:	617a      	str	r2, [r7, #20]
 80096d8:	693a      	ldr	r2, [r7, #16]
 80096da:	b2d2      	uxtb	r2, r2
 80096dc:	701a      	strb	r2, [r3, #0]
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80096e2:	2202      	movs	r2, #2
 80096e4:	6879      	ldr	r1, [r7, #4]
 80096e6:	68b8      	ldr	r0, [r7, #8]
 80096e8:	f7ff fa0c 	bl	8008b04 <_SendPacket>
  RECORD_END();
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f383 8811 	msr	BASEPRI, r3
}
 80096f2:	bf00      	nop
 80096f4:	3718      	adds	r7, #24
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	200148b4 	.word	0x200148b4
 8009700:	e000ed04 	.word	0xe000ed04

08009704 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800970a:	f3ef 8311 	mrs	r3, BASEPRI
 800970e:	f04f 0120 	mov.w	r1, #32
 8009712:	f381 8811 	msr	BASEPRI, r1
 8009716:	607b      	str	r3, [r7, #4]
 8009718:	4807      	ldr	r0, [pc, #28]	; (8009738 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800971a:	f7ff f904 	bl	8008926 <_PreparePacket>
 800971e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8009720:	2203      	movs	r2, #3
 8009722:	6839      	ldr	r1, [r7, #0]
 8009724:	6838      	ldr	r0, [r7, #0]
 8009726:	f7ff f9ed 	bl	8008b04 <_SendPacket>
  RECORD_END();
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f383 8811 	msr	BASEPRI, r3
}
 8009730:	bf00      	nop
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	200148b4 	.word	0x200148b4

0800973c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009742:	f3ef 8311 	mrs	r3, BASEPRI
 8009746:	f04f 0120 	mov.w	r1, #32
 800974a:	f381 8811 	msr	BASEPRI, r1
 800974e:	607b      	str	r3, [r7, #4]
 8009750:	4807      	ldr	r0, [pc, #28]	; (8009770 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8009752:	f7ff f8e8 	bl	8008926 <_PreparePacket>
 8009756:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8009758:	2212      	movs	r2, #18
 800975a:	6839      	ldr	r1, [r7, #0]
 800975c:	6838      	ldr	r0, [r7, #0]
 800975e:	f7ff f9d1 	bl	8008b04 <_SendPacket>
  RECORD_END();
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f383 8811 	msr	BASEPRI, r3
}
 8009768:	bf00      	nop
 800976a:	3708      	adds	r7, #8
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	200148b4 	.word	0x200148b4

08009774 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800977a:	f3ef 8311 	mrs	r3, BASEPRI
 800977e:	f04f 0120 	mov.w	r1, #32
 8009782:	f381 8811 	msr	BASEPRI, r1
 8009786:	607b      	str	r3, [r7, #4]
 8009788:	4807      	ldr	r0, [pc, #28]	; (80097a8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800978a:	f7ff f8cc 	bl	8008926 <_PreparePacket>
 800978e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8009790:	2211      	movs	r2, #17
 8009792:	6839      	ldr	r1, [r7, #0]
 8009794:	6838      	ldr	r0, [r7, #0]
 8009796:	f7ff f9b5 	bl	8008b04 <_SendPacket>
  RECORD_END();
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f383 8811 	msr	BASEPRI, r3
}
 80097a0:	bf00      	nop
 80097a2:	3708      	adds	r7, #8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	200148b4 	.word	0x200148b4

080097ac <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b088      	sub	sp, #32
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80097b4:	f3ef 8311 	mrs	r3, BASEPRI
 80097b8:	f04f 0120 	mov.w	r1, #32
 80097bc:	f381 8811 	msr	BASEPRI, r1
 80097c0:	617b      	str	r3, [r7, #20]
 80097c2:	4819      	ldr	r0, [pc, #100]	; (8009828 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80097c4:	f7ff f8af 	bl	8008926 <_PreparePacket>
 80097c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80097ce:	4b17      	ldr	r3, [pc, #92]	; (800982c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	61fb      	str	r3, [r7, #28]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	61bb      	str	r3, [r7, #24]
 80097e0:	e00b      	b.n	80097fa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80097e2:	69bb      	ldr	r3, [r7, #24]
 80097e4:	b2da      	uxtb	r2, r3
 80097e6:	69fb      	ldr	r3, [r7, #28]
 80097e8:	1c59      	adds	r1, r3, #1
 80097ea:	61f9      	str	r1, [r7, #28]
 80097ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80097f0:	b2d2      	uxtb	r2, r2
 80097f2:	701a      	strb	r2, [r3, #0]
 80097f4:	69bb      	ldr	r3, [r7, #24]
 80097f6:	09db      	lsrs	r3, r3, #7
 80097f8:	61bb      	str	r3, [r7, #24]
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	2b7f      	cmp	r3, #127	; 0x7f
 80097fe:	d8f0      	bhi.n	80097e2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	1c5a      	adds	r2, r3, #1
 8009804:	61fa      	str	r2, [r7, #28]
 8009806:	69ba      	ldr	r2, [r7, #24]
 8009808:	b2d2      	uxtb	r2, r2
 800980a:	701a      	strb	r2, [r3, #0]
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8009810:	2208      	movs	r2, #8
 8009812:	68f9      	ldr	r1, [r7, #12]
 8009814:	6938      	ldr	r0, [r7, #16]
 8009816:	f7ff f975 	bl	8008b04 <_SendPacket>
  RECORD_END();
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	f383 8811 	msr	BASEPRI, r3
}
 8009820:	bf00      	nop
 8009822:	3720      	adds	r7, #32
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	200148b4 	.word	0x200148b4
 800982c:	20014884 	.word	0x20014884

08009830 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8009830:	b580      	push	{r7, lr}
 8009832:	b088      	sub	sp, #32
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009838:	f3ef 8311 	mrs	r3, BASEPRI
 800983c:	f04f 0120 	mov.w	r1, #32
 8009840:	f381 8811 	msr	BASEPRI, r1
 8009844:	617b      	str	r3, [r7, #20]
 8009846:	4819      	ldr	r0, [pc, #100]	; (80098ac <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8009848:	f7ff f86d 	bl	8008926 <_PreparePacket>
 800984c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009852:	4b17      	ldr	r3, [pc, #92]	; (80098b0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	61fb      	str	r3, [r7, #28]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	61bb      	str	r3, [r7, #24]
 8009864:	e00b      	b.n	800987e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	b2da      	uxtb	r2, r3
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	1c59      	adds	r1, r3, #1
 800986e:	61f9      	str	r1, [r7, #28]
 8009870:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009874:	b2d2      	uxtb	r2, r2
 8009876:	701a      	strb	r2, [r3, #0]
 8009878:	69bb      	ldr	r3, [r7, #24]
 800987a:	09db      	lsrs	r3, r3, #7
 800987c:	61bb      	str	r3, [r7, #24]
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	2b7f      	cmp	r3, #127	; 0x7f
 8009882:	d8f0      	bhi.n	8009866 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	1c5a      	adds	r2, r3, #1
 8009888:	61fa      	str	r2, [r7, #28]
 800988a:	69ba      	ldr	r2, [r7, #24]
 800988c:	b2d2      	uxtb	r2, r2
 800988e:	701a      	strb	r2, [r3, #0]
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8009894:	2204      	movs	r2, #4
 8009896:	68f9      	ldr	r1, [r7, #12]
 8009898:	6938      	ldr	r0, [r7, #16]
 800989a:	f7ff f933 	bl	8008b04 <_SendPacket>
  RECORD_END();
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	f383 8811 	msr	BASEPRI, r3
}
 80098a4:	bf00      	nop
 80098a6:	3720      	adds	r7, #32
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	200148b4 	.word	0x200148b4
 80098b0:	20014884 	.word	0x20014884

080098b4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b088      	sub	sp, #32
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80098bc:	f3ef 8311 	mrs	r3, BASEPRI
 80098c0:	f04f 0120 	mov.w	r1, #32
 80098c4:	f381 8811 	msr	BASEPRI, r1
 80098c8:	617b      	str	r3, [r7, #20]
 80098ca:	4819      	ldr	r0, [pc, #100]	; (8009930 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80098cc:	f7ff f82b 	bl	8008926 <_PreparePacket>
 80098d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80098d6:	4b17      	ldr	r3, [pc, #92]	; (8009934 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	1ad3      	subs	r3, r2, r3
 80098de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	61fb      	str	r3, [r7, #28]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	61bb      	str	r3, [r7, #24]
 80098e8:	e00b      	b.n	8009902 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	b2da      	uxtb	r2, r3
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	1c59      	adds	r1, r3, #1
 80098f2:	61f9      	str	r1, [r7, #28]
 80098f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80098f8:	b2d2      	uxtb	r2, r2
 80098fa:	701a      	strb	r2, [r3, #0]
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	09db      	lsrs	r3, r3, #7
 8009900:	61bb      	str	r3, [r7, #24]
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	2b7f      	cmp	r3, #127	; 0x7f
 8009906:	d8f0      	bhi.n	80098ea <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	1c5a      	adds	r2, r3, #1
 800990c:	61fa      	str	r2, [r7, #28]
 800990e:	69ba      	ldr	r2, [r7, #24]
 8009910:	b2d2      	uxtb	r2, r2
 8009912:	701a      	strb	r2, [r3, #0]
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8009918:	2206      	movs	r2, #6
 800991a:	68f9      	ldr	r1, [r7, #12]
 800991c:	6938      	ldr	r0, [r7, #16]
 800991e:	f7ff f8f1 	bl	8008b04 <_SendPacket>
  RECORD_END();
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	f383 8811 	msr	BASEPRI, r3
}
 8009928:	bf00      	nop
 800992a:	3720      	adds	r7, #32
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}
 8009930:	200148b4 	.word	0x200148b4
 8009934:	20014884 	.word	0x20014884

08009938 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8009940:	4b04      	ldr	r3, [pc, #16]	; (8009954 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	1ad3      	subs	r3, r2, r3
}
 8009948:	4618      	mov	r0, r3
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr
 8009954:	20014884 	.word	0x20014884

08009958 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8009958:	b580      	push	{r7, lr}
 800995a:	b08c      	sub	sp, #48	; 0x30
 800995c:	af00      	add	r7, sp, #0
 800995e:	4603      	mov	r3, r0
 8009960:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8009962:	4b3b      	ldr	r3, [pc, #236]	; (8009a50 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d06d      	beq.n	8009a46 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800996a:	4b39      	ldr	r3, [pc, #228]	; (8009a50 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8009970:	2300      	movs	r3, #0
 8009972:	62bb      	str	r3, [r7, #40]	; 0x28
 8009974:	e008      	b.n	8009988 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8009976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009978:	691b      	ldr	r3, [r3, #16]
 800997a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800997c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800997e:	2b00      	cmp	r3, #0
 8009980:	d007      	beq.n	8009992 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8009982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009984:	3301      	adds	r3, #1
 8009986:	62bb      	str	r3, [r7, #40]	; 0x28
 8009988:	79fb      	ldrb	r3, [r7, #7]
 800998a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800998c:	429a      	cmp	r2, r3
 800998e:	d3f2      	bcc.n	8009976 <SEGGER_SYSVIEW_SendModule+0x1e>
 8009990:	e000      	b.n	8009994 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8009992:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8009994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009996:	2b00      	cmp	r3, #0
 8009998:	d055      	beq.n	8009a46 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800999a:	f3ef 8311 	mrs	r3, BASEPRI
 800999e:	f04f 0120 	mov.w	r1, #32
 80099a2:	f381 8811 	msr	BASEPRI, r1
 80099a6:	617b      	str	r3, [r7, #20]
 80099a8:	482a      	ldr	r0, [pc, #168]	; (8009a54 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80099aa:	f7fe ffbc 	bl	8008926 <_PreparePacket>
 80099ae:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	627b      	str	r3, [r7, #36]	; 0x24
 80099b8:	79fb      	ldrb	r3, [r7, #7]
 80099ba:	623b      	str	r3, [r7, #32]
 80099bc:	e00b      	b.n	80099d6 <SEGGER_SYSVIEW_SendModule+0x7e>
 80099be:	6a3b      	ldr	r3, [r7, #32]
 80099c0:	b2da      	uxtb	r2, r3
 80099c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c4:	1c59      	adds	r1, r3, #1
 80099c6:	6279      	str	r1, [r7, #36]	; 0x24
 80099c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80099cc:	b2d2      	uxtb	r2, r2
 80099ce:	701a      	strb	r2, [r3, #0]
 80099d0:	6a3b      	ldr	r3, [r7, #32]
 80099d2:	09db      	lsrs	r3, r3, #7
 80099d4:	623b      	str	r3, [r7, #32]
 80099d6:	6a3b      	ldr	r3, [r7, #32]
 80099d8:	2b7f      	cmp	r3, #127	; 0x7f
 80099da:	d8f0      	bhi.n	80099be <SEGGER_SYSVIEW_SendModule+0x66>
 80099dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099de:	1c5a      	adds	r2, r3, #1
 80099e0:	627a      	str	r2, [r7, #36]	; 0x24
 80099e2:	6a3a      	ldr	r2, [r7, #32]
 80099e4:	b2d2      	uxtb	r2, r2
 80099e6:	701a      	strb	r2, [r3, #0]
 80099e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ea:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	61fb      	str	r3, [r7, #28]
 80099f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	61bb      	str	r3, [r7, #24]
 80099f6:	e00b      	b.n	8009a10 <SEGGER_SYSVIEW_SendModule+0xb8>
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	b2da      	uxtb	r2, r3
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	1c59      	adds	r1, r3, #1
 8009a00:	61f9      	str	r1, [r7, #28]
 8009a02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009a06:	b2d2      	uxtb	r2, r2
 8009a08:	701a      	strb	r2, [r3, #0]
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	09db      	lsrs	r3, r3, #7
 8009a0e:	61bb      	str	r3, [r7, #24]
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	2b7f      	cmp	r3, #127	; 0x7f
 8009a14:	d8f0      	bhi.n	80099f8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8009a16:	69fb      	ldr	r3, [r7, #28]
 8009a18:	1c5a      	adds	r2, r3, #1
 8009a1a:	61fa      	str	r2, [r7, #28]
 8009a1c:	69ba      	ldr	r2, [r7, #24]
 8009a1e:	b2d2      	uxtb	r2, r2
 8009a20:	701a      	strb	r2, [r3, #0]
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2280      	movs	r2, #128	; 0x80
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	68f8      	ldr	r0, [r7, #12]
 8009a30:	f7fe ff2c 	bl	800888c <_EncodeStr>
 8009a34:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8009a36:	2216      	movs	r2, #22
 8009a38:	68f9      	ldr	r1, [r7, #12]
 8009a3a:	6938      	ldr	r0, [r7, #16]
 8009a3c:	f7ff f862 	bl	8008b04 <_SendPacket>
      RECORD_END();
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8009a46:	bf00      	nop
 8009a48:	3730      	adds	r7, #48	; 0x30
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	200148ac 	.word	0x200148ac
 8009a54:	200148b4 	.word	0x200148b4

08009a58 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8009a5e:	4b0c      	ldr	r3, [pc, #48]	; (8009a90 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00f      	beq.n	8009a86 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8009a66:	4b0a      	ldr	r3, [pc, #40]	; (8009a90 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d002      	beq.n	8009a7a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1f2      	bne.n	8009a6c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8009a86:	bf00      	nop
 8009a88:	3708      	adds	r7, #8
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	200148ac 	.word	0x200148ac

08009a94 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b086      	sub	sp, #24
 8009a98:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8009a9a:	f3ef 8311 	mrs	r3, BASEPRI
 8009a9e:	f04f 0120 	mov.w	r1, #32
 8009aa2:	f381 8811 	msr	BASEPRI, r1
 8009aa6:	60fb      	str	r3, [r7, #12]
 8009aa8:	4817      	ldr	r0, [pc, #92]	; (8009b08 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8009aaa:	f7fe ff3c 	bl	8008926 <_PreparePacket>
 8009aae:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	617b      	str	r3, [r7, #20]
 8009ab8:	4b14      	ldr	r3, [pc, #80]	; (8009b0c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	613b      	str	r3, [r7, #16]
 8009abe:	e00b      	b.n	8009ad8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	b2da      	uxtb	r2, r3
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	1c59      	adds	r1, r3, #1
 8009ac8:	6179      	str	r1, [r7, #20]
 8009aca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009ace:	b2d2      	uxtb	r2, r2
 8009ad0:	701a      	strb	r2, [r3, #0]
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	09db      	lsrs	r3, r3, #7
 8009ad6:	613b      	str	r3, [r7, #16]
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	2b7f      	cmp	r3, #127	; 0x7f
 8009adc:	d8f0      	bhi.n	8009ac0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	1c5a      	adds	r2, r3, #1
 8009ae2:	617a      	str	r2, [r7, #20]
 8009ae4:	693a      	ldr	r2, [r7, #16]
 8009ae6:	b2d2      	uxtb	r2, r2
 8009ae8:	701a      	strb	r2, [r3, #0]
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8009aee:	221b      	movs	r2, #27
 8009af0:	6879      	ldr	r1, [r7, #4]
 8009af2:	68b8      	ldr	r0, [r7, #8]
 8009af4:	f7ff f806 	bl	8008b04 <_SendPacket>
  RECORD_END();
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f383 8811 	msr	BASEPRI, r3
}
 8009afe:	bf00      	nop
 8009b00:	3718      	adds	r7, #24
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	200148b4 	.word	0x200148b4
 8009b0c:	200148b0 	.word	0x200148b0

08009b10 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b08a      	sub	sp, #40	; 0x28
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009b18:	f3ef 8311 	mrs	r3, BASEPRI
 8009b1c:	f04f 0120 	mov.w	r1, #32
 8009b20:	f381 8811 	msr	BASEPRI, r1
 8009b24:	617b      	str	r3, [r7, #20]
 8009b26:	4827      	ldr	r0, [pc, #156]	; (8009bc4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8009b28:	f7fe fefd 	bl	8008926 <_PreparePacket>
 8009b2c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009b2e:	2280      	movs	r2, #128	; 0x80
 8009b30:	6879      	ldr	r1, [r7, #4]
 8009b32:	6938      	ldr	r0, [r7, #16]
 8009b34:	f7fe feaa 	bl	800888c <_EncodeStr>
 8009b38:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8009b3e:	2301      	movs	r3, #1
 8009b40:	623b      	str	r3, [r7, #32]
 8009b42:	e00b      	b.n	8009b5c <SEGGER_SYSVIEW_Warn+0x4c>
 8009b44:	6a3b      	ldr	r3, [r7, #32]
 8009b46:	b2da      	uxtb	r2, r3
 8009b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4a:	1c59      	adds	r1, r3, #1
 8009b4c:	6279      	str	r1, [r7, #36]	; 0x24
 8009b4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009b52:	b2d2      	uxtb	r2, r2
 8009b54:	701a      	strb	r2, [r3, #0]
 8009b56:	6a3b      	ldr	r3, [r7, #32]
 8009b58:	09db      	lsrs	r3, r3, #7
 8009b5a:	623b      	str	r3, [r7, #32]
 8009b5c:	6a3b      	ldr	r3, [r7, #32]
 8009b5e:	2b7f      	cmp	r3, #127	; 0x7f
 8009b60:	d8f0      	bhi.n	8009b44 <SEGGER_SYSVIEW_Warn+0x34>
 8009b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b64:	1c5a      	adds	r2, r3, #1
 8009b66:	627a      	str	r2, [r7, #36]	; 0x24
 8009b68:	6a3a      	ldr	r2, [r7, #32]
 8009b6a:	b2d2      	uxtb	r2, r2
 8009b6c:	701a      	strb	r2, [r3, #0]
 8009b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b70:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	61fb      	str	r3, [r7, #28]
 8009b76:	2300      	movs	r3, #0
 8009b78:	61bb      	str	r3, [r7, #24]
 8009b7a:	e00b      	b.n	8009b94 <SEGGER_SYSVIEW_Warn+0x84>
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	b2da      	uxtb	r2, r3
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	1c59      	adds	r1, r3, #1
 8009b84:	61f9      	str	r1, [r7, #28]
 8009b86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009b8a:	b2d2      	uxtb	r2, r2
 8009b8c:	701a      	strb	r2, [r3, #0]
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	09db      	lsrs	r3, r3, #7
 8009b92:	61bb      	str	r3, [r7, #24]
 8009b94:	69bb      	ldr	r3, [r7, #24]
 8009b96:	2b7f      	cmp	r3, #127	; 0x7f
 8009b98:	d8f0      	bhi.n	8009b7c <SEGGER_SYSVIEW_Warn+0x6c>
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	1c5a      	adds	r2, r3, #1
 8009b9e:	61fa      	str	r2, [r7, #28]
 8009ba0:	69ba      	ldr	r2, [r7, #24]
 8009ba2:	b2d2      	uxtb	r2, r2
 8009ba4:	701a      	strb	r2, [r3, #0]
 8009ba6:	69fb      	ldr	r3, [r7, #28]
 8009ba8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8009baa:	221a      	movs	r2, #26
 8009bac:	68f9      	ldr	r1, [r7, #12]
 8009bae:	6938      	ldr	r0, [r7, #16]
 8009bb0:	f7fe ffa8 	bl	8008b04 <_SendPacket>
  RECORD_END();
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	f383 8811 	msr	BASEPRI, r3
}
 8009bba:	bf00      	nop
 8009bbc:	3728      	adds	r7, #40	; 0x28
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	200148b4 	.word	0x200148b4

08009bc8 <memcmp>:
 8009bc8:	b510      	push	{r4, lr}
 8009bca:	3901      	subs	r1, #1
 8009bcc:	4402      	add	r2, r0
 8009bce:	4290      	cmp	r0, r2
 8009bd0:	d101      	bne.n	8009bd6 <memcmp+0xe>
 8009bd2:	2000      	movs	r0, #0
 8009bd4:	e005      	b.n	8009be2 <memcmp+0x1a>
 8009bd6:	7803      	ldrb	r3, [r0, #0]
 8009bd8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009bdc:	42a3      	cmp	r3, r4
 8009bde:	d001      	beq.n	8009be4 <memcmp+0x1c>
 8009be0:	1b18      	subs	r0, r3, r4
 8009be2:	bd10      	pop	{r4, pc}
 8009be4:	3001      	adds	r0, #1
 8009be6:	e7f2      	b.n	8009bce <memcmp+0x6>

08009be8 <memset>:
 8009be8:	4402      	add	r2, r0
 8009bea:	4603      	mov	r3, r0
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d100      	bne.n	8009bf2 <memset+0xa>
 8009bf0:	4770      	bx	lr
 8009bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8009bf6:	e7f9      	b.n	8009bec <memset+0x4>

08009bf8 <__libc_init_array>:
 8009bf8:	b570      	push	{r4, r5, r6, lr}
 8009bfa:	4d0d      	ldr	r5, [pc, #52]	; (8009c30 <__libc_init_array+0x38>)
 8009bfc:	4c0d      	ldr	r4, [pc, #52]	; (8009c34 <__libc_init_array+0x3c>)
 8009bfe:	1b64      	subs	r4, r4, r5
 8009c00:	10a4      	asrs	r4, r4, #2
 8009c02:	2600      	movs	r6, #0
 8009c04:	42a6      	cmp	r6, r4
 8009c06:	d109      	bne.n	8009c1c <__libc_init_array+0x24>
 8009c08:	4d0b      	ldr	r5, [pc, #44]	; (8009c38 <__libc_init_array+0x40>)
 8009c0a:	4c0c      	ldr	r4, [pc, #48]	; (8009c3c <__libc_init_array+0x44>)
 8009c0c:	f000 f86e 	bl	8009cec <_init>
 8009c10:	1b64      	subs	r4, r4, r5
 8009c12:	10a4      	asrs	r4, r4, #2
 8009c14:	2600      	movs	r6, #0
 8009c16:	42a6      	cmp	r6, r4
 8009c18:	d105      	bne.n	8009c26 <__libc_init_array+0x2e>
 8009c1a:	bd70      	pop	{r4, r5, r6, pc}
 8009c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c20:	4798      	blx	r3
 8009c22:	3601      	adds	r6, #1
 8009c24:	e7ee      	b.n	8009c04 <__libc_init_array+0xc>
 8009c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c2a:	4798      	blx	r3
 8009c2c:	3601      	adds	r6, #1
 8009c2e:	e7f2      	b.n	8009c16 <__libc_init_array+0x1e>
 8009c30:	08009ea0 	.word	0x08009ea0
 8009c34:	08009ea0 	.word	0x08009ea0
 8009c38:	08009ea0 	.word	0x08009ea0
 8009c3c:	08009ea4 	.word	0x08009ea4

08009c40 <memcpy>:
 8009c40:	440a      	add	r2, r1
 8009c42:	4291      	cmp	r1, r2
 8009c44:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c48:	d100      	bne.n	8009c4c <memcpy+0xc>
 8009c4a:	4770      	bx	lr
 8009c4c:	b510      	push	{r4, lr}
 8009c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c56:	4291      	cmp	r1, r2
 8009c58:	d1f9      	bne.n	8009c4e <memcpy+0xe>
 8009c5a:	bd10      	pop	{r4, pc}

08009c5c <round>:
 8009c5c:	ec53 2b10 	vmov	r2, r3, d0
 8009c60:	b570      	push	{r4, r5, r6, lr}
 8009c62:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8009c66:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8009c6a:	2813      	cmp	r0, #19
 8009c6c:	ee10 5a10 	vmov	r5, s0
 8009c70:	4619      	mov	r1, r3
 8009c72:	dc18      	bgt.n	8009ca6 <round+0x4a>
 8009c74:	2800      	cmp	r0, #0
 8009c76:	da09      	bge.n	8009c8c <round+0x30>
 8009c78:	3001      	adds	r0, #1
 8009c7a:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8009c7e:	d103      	bne.n	8009c88 <round+0x2c>
 8009c80:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8009c84:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009c88:	2300      	movs	r3, #0
 8009c8a:	e02a      	b.n	8009ce2 <round+0x86>
 8009c8c:	4c16      	ldr	r4, [pc, #88]	; (8009ce8 <round+0x8c>)
 8009c8e:	4104      	asrs	r4, r0
 8009c90:	ea03 0604 	and.w	r6, r3, r4
 8009c94:	4316      	orrs	r6, r2
 8009c96:	d011      	beq.n	8009cbc <round+0x60>
 8009c98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009c9c:	4103      	asrs	r3, r0
 8009c9e:	440b      	add	r3, r1
 8009ca0:	ea23 0104 	bic.w	r1, r3, r4
 8009ca4:	e7f0      	b.n	8009c88 <round+0x2c>
 8009ca6:	2833      	cmp	r0, #51	; 0x33
 8009ca8:	dd0b      	ble.n	8009cc2 <round+0x66>
 8009caa:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009cae:	d105      	bne.n	8009cbc <round+0x60>
 8009cb0:	ee10 0a10 	vmov	r0, s0
 8009cb4:	f7f6 fafc 	bl	80002b0 <__adddf3>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	460b      	mov	r3, r1
 8009cbc:	ec43 2b10 	vmov	d0, r2, r3
 8009cc0:	bd70      	pop	{r4, r5, r6, pc}
 8009cc2:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8009cc6:	f04f 34ff 	mov.w	r4, #4294967295
 8009cca:	40f4      	lsrs	r4, r6
 8009ccc:	4214      	tst	r4, r2
 8009cce:	d0f5      	beq.n	8009cbc <round+0x60>
 8009cd0:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	4083      	lsls	r3, r0
 8009cd8:	195b      	adds	r3, r3, r5
 8009cda:	bf28      	it	cs
 8009cdc:	3101      	addcs	r1, #1
 8009cde:	ea23 0304 	bic.w	r3, r3, r4
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	e7e9      	b.n	8009cbc <round+0x60>
 8009ce8:	000fffff 	.word	0x000fffff

08009cec <_init>:
 8009cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cee:	bf00      	nop
 8009cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cf2:	bc08      	pop	{r3}
 8009cf4:	469e      	mov	lr, r3
 8009cf6:	4770      	bx	lr

08009cf8 <_fini>:
 8009cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cfa:	bf00      	nop
 8009cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cfe:	bc08      	pop	{r3}
 8009d00:	469e      	mov	lr, r3
 8009d02:	4770      	bx	lr
